pcre.h:
include {
PCRE_ANCHORED
PCRE_AUTO_CALLOUT
PCRE_CASELESS
PCRE_CONFIG_LINK_SIZE
PCRE_CONFIG_MATCH_LIMIT
PCRE_CONFIG_NEWLINE
PCRE_CONFIG_POSIX_MALLOC_THRESHOLD
PCRE_CONFIG_STACKRECURSE
PCRE_CONFIG_UNICODE_PROPERTIES
PCRE_CONFIG_UTF8
PCRE_DFA_RESTART
PCRE_DFA_SHORTEST
PCRE_DOLLAR_ENDONLY
PCRE_DOTALL
PCRE_ERROR_BADCOUNT
PCRE_ERROR_BADMAGIC
PCRE_ERROR_BADOPTION
PCRE_ERROR_BADPARTIAL
PCRE_ERROR_BADUTF8
PCRE_ERROR_BADUTF8_OFFSET
PCRE_ERROR_CALLOUT
PCRE_ERROR_DFA_RECURSE
PCRE_ERROR_DFA_UCOND
PCRE_ERROR_DFA_UITEM
PCRE_ERROR_DFA_UMLIMIT
PCRE_ERROR_DFA_WSSIZE
PCRE_ERROR_INTERNAL
PCRE_ERROR_MATCHLIMIT
PCRE_ERROR_NOMATCH
PCRE_ERROR_NOMEMORY
PCRE_ERROR_NOSUBSTRING
PCRE_ERROR_NULL
PCRE_ERROR_PARTIAL
PCRE_ERROR_UNKNOWN_NODE
PCRE_EXTENDED
PCRE_EXTRA
PCRE_EXTRA_CALLOUT_DATA
PCRE_EXTRA_MATCH_LIMIT
PCRE_EXTRA_STUDY_DATA
PCRE_EXTRA_TABLES
PCRE_FIRSTLINE
PCRE_INFO_BACKREFMAX
PCRE_INFO_CAPTURECOUNT
PCRE_INFO_DEFAULT_TABLES
PCRE_INFO_FIRSTBYTE
PCRE_INFO_FIRSTCHAR
PCRE_INFO_FIRSTTABLE
PCRE_INFO_LASTLITERAL
PCRE_INFO_NAMECOUNT
PCRE_INFO_NAMEENTRYSIZE
PCRE_INFO_NAMETABLE
PCRE_INFO_OPTIONS
PCRE_INFO_SIZE
PCRE_INFO_STUDYSIZE
PCRE_MAJOR
PCRE_MINOR
PCRE_MULTILINE
PCRE_NO_AUTO_CAPTURE
PCRE_NOTBOL
PCRE_NOTEMPTY
PCRE_NOTEOL
PCRE_NO_UTF8_CHECK
PCRE_PARTIAL
PCRE_UNGREEDY
PCRE_UTF8
pcre
pcre_extra
pcre_callout_block
size_t
}
hstub pcre_compile {
  struct pcre_table; // abstract, must be constructed by pcre_maketables().
  typedef struct pcre_table pcre_table_t;
  extern "C"
  // TODO: the table is retained in the return value
  pcre *pcre_compile(const char @pattern, int options,
                     const char **errptr, int @erroffset,
                     const pcre_table_t *tableptr);
}
hstub pcre_compile2 {
  extern "C"
  // TODO: the table is retained in the return value
  pcre *pcre_compile2(const char @pattern, int options,
                      int *errorcodeptr,
                      const char **errptr, int @erroffset,
                      const pcre_table_t *tableptr);
}
hstub pcre_study {
  extern "C"
  pcre_extra *pcre_study(const pcre @code, int options,
                         const char *`H @errptr);
}
hstub pcre_exec {
  int pcre_exec(const pcre @code, const pcre_extra *extra,
                const char ?subject, int length,
                int startoffset, int options,
                int ?ovector, int ovecsize)
    @requires(numelts(subject)>=length && numelts(ovector)>=ovecsize);
}
cycstub pcre_exec {
  namespace Cpcre {
    extern "C"
    int pcre_exec(const pcre @code, const pcre_extra *extra,
                  const char *subject, int length,
                  int startoffset, int options,
                  int *ovector, int ovecsize);
  }
  int pcre_exec(const pcre @code, const pcre_extra *extra,
                const char ?subject, int length,
                int startoffset, int options,
                int ?ovector, int ovecsize)
    @requires(numelts(subject)>=length && numelts(ovector)>=ovecsize) {
    return Cpcre::pcre_exec(code,extra,
                            (const char *)subject,
                            length,startoffset,options,
                            (int *)ovector,
                            ovecsize);
  }
}
hstub pcre_dfa_exec {
  int pcre_dfa_exec(const pcre @code, const pcre_extra *extra,
                    const char ?subject, int length,
                    int startoffset, int options,
                    int ?ovector, int ovecsize,
                    int ?workspace, int wscount)
    @requires(numelts(subject)>=length && numelts(ovector)>=ovecsize
              && numelts(workspace)>=wscount && wscount>=20);
}
cycstub pcre_dfa_exec {
  namespace Cpcre {
    extern "C"
    int pcre_dfa_exec(const pcre @code, const pcre_extra *extra,
                      const char *subject, int length,
                      int startoffset, int options,
                      int *ovector, int ovecsize,
                      int *workspace, int wscount);
  }
  int pcre_dfa_exec(const pcre @code, const pcre_extra *extra,
                    const char ?subject, int length,
                    int startoffset, int options,
                    int ?ovector, int ovecsize,
                    int ?workspace, int wscount)
    @requires(numelts(subject)>=length && numelts(ovector)>=ovecsize
              && numelts(workspace)>=wscount && wscount>=20) {
    return Cpcre::pcre_dfa_exec(code,extra,
                                (const char *)subject,
                                length,startoffset,options,
                                (int *)ovector,
                                ovecsize,
                                (int *)workspace,
                                wscount);
  }
}
hstub pcre_copy_named_substring {
  int pcre_copy_named_substring(const pcre @code,
                                const char ?subject, int ?ovector,
                                int stringcount, const char @stringname,
                                char ?buffer, int buffersize);
}
cycstub pcre_copy_named_substring {
  int pcre_copy_named_substring(const pcre @code,
                                const char ?subject, int ?ovector,
                                int stringcount, const char @stringname,
                                char ?buffer, int buffersize) {
    let stringnumber = pcre_get_stringnumber(code,stringname);
    if (stringnumber < 0)
      return PCRE_ERROR_NOSUBSTRING;
    return pcre_copy_substring(subject,ovector,stringcount,stringnumber,
                               buffer,buffersize);
  }
}

hstub pcre_copy_substring {
  int pcre_copy_substring(const char ?subject, int ?ovector,
                          int stringcount, int stringnumber, char ?buffer,
                          int buffersize);
}
cycstub pcre_copy_substring {
  /* The C version of this is quite unsafe so we do it all in Cyclone. */
  int pcre_copy_substring(const char ?subject, int ?ovector,
                          int stringcount, int stringnumber, char ?buffer,
                          int buffersize) {
    if (stringcount <= 0 || stringnumber < 0)
      return PCRE_ERROR_NOSUBSTRING; /* bad parameters */

    if (stringnumber >= stringcount)
      return PCRE_ERROR_NOSUBSTRING; /* substring did not match */

    if (2*(stringnumber+1) > numelts(ovector))
      return PCRE_ERROR_NOSUBSTRING; /* substring did not match */

    let start = ovector[2*stringnumber];
    let len = ovector[2*stringnumber+1];

    if (start < 0 || len < 0) {
      /* This particular substring did not actually match anything,
         even though the pattern as a whole matched.  Return NULL. */
      if (numelts(buffer) == 0)
        return PCRE_ERROR_NOMEMORY; /* not enough buffer */
      buffer[0] = '\0';
      return 0; /* length of returned string */ 
    }
    if (numelts(buffer) < len + 1)
        return PCRE_ERROR_NOMEMORY; /* not enough buffer */
    if (buffersize < len + 1)
        return PCRE_ERROR_NOMEMORY; /* not enough buffer */
    if (numelts(subject) < start+len)
      /* It's not clear what to return here; the subject and the
         ovector do not match up. */
      return PCRE_ERROR_NOSUBSTRING; /* not enough subject */
    for (int i = 0; i < len; i++)
      buffer[i] = subject[start+i];
    buffer[len] = '\0';
    return len; /* length of returned string */
  }
}

hstub pcre_get_named_substring {
  int pcre_get_named_substring(const pcre @code,
                               const char ?subject, int ?ovector,
                               int stringcount, const char @stringname,
                               const char ?`H@stringptr);
}
cycstub pcre_get_named_substring {
  int pcre_get_named_substring(const pcre @code,
                               const char ?subject, int ?ovector,
                               int stringcount, const char @stringname,
                               const char ?`H@stringptr) {
    let stringnumber = pcre_get_stringnumber(code,stringname);
    if (stringnumber < 0)
      return PCRE_ERROR_NOSUBSTRING;
    return pcre_get_substring(subject,ovector,stringcount,stringnumber,
                              stringptr);
  }
}

hstub pcre_get_stringnumber {
  extern "C"
  int pcre_get_stringnumber(const pcre @code,
                            const char @name);
}

hstub pcre_get_substring {
  int pcre_get_substring(const char ?subject, int ?ovector,
                         int stringcount, int stringnumber,
                         const char ?`H@stringptr);
}
cycstub pcre_get_substring {
  /* The C version of this is quite unsafe so we do it all in Cyclone. */
  /* Note this will not quite match the API as the string is not
     allocated using pcre_malloc. */
  /* TODO: share the error checking code with pcre_copy_substring. */
  int pcre_get_substring(const char ?subject, int ?ovector,
                         int stringcount, int stringnumber,
                         const char ?`H@stringptr) {
    if (stringcount <= 0 || stringnumber < 0)
      return PCRE_ERROR_NOSUBSTRING; /* bad parameters */

    if (stringnumber >= stringcount)
      return PCRE_ERROR_NOSUBSTRING; /* substring did not match */

    if (2*(stringnumber+1) > numelts(ovector))
      return PCRE_ERROR_NOSUBSTRING; /* substring did not match */

    let start = ovector[2*stringnumber];
    let len = ovector[2*stringnumber+1];

    if (start < 0 || len < 0) {
      /* This particular substring did not actually match anything,
         even though the pattern as a whole matched.  Return the empty
         string. */
      *stringptr = (const char ?)"";
      return 0; /* length of returned string */ 
    }
    if (numelts(subject) < start+len)
      /* It's not clear what to return here; the subject and the
         ovector do not match up. */
      return PCRE_ERROR_NOSUBSTRING; /* not enough subject */
    char ?buffer = calloc(len+1,sizeof(char));
    if (!buffer)
      return PCRE_ERROR_NOMEMORY;
    for (int i = 0; i < len; i++)
      buffer[i] = subject[start+i];
    buffer[len] = '\0';
    *stringptr = (const char ?)buffer;
    return len; /* length of returned string */
  }
}

hstub pcre_get_substring_list {
  int pcre_get_substring_list(const char ?subject,
                              int ?ovector, int stringcount,
                              const char ?`H?`H@listptr);
}
cycstub pcre_get_substring_list {
#include <string.h>
  /* The memory returned does not have the same structure as that
     specified by the pcre documentation, which says that it should be
     in a single contiguous block of memory. */
  int pcre_get_substring_list(const char ?subject,
                              int ?ovector, int stringcount,
                              const char ?`H?`H@listptr) {

    if (stringcount <= 0)
      /* bad parameters.  pcre docs say the only error return for this
         function is PCRE_ERROR_NOMEMORY, so that's what we return. */
      return PCRE_ERROR_NOMEMORY;

    if (2*stringcount > numelts(ovector))
      /* bad parameters.  pcre docs say the only error return for this
         function is PCRE_ERROR_NOMEMORY, so that's what we return. */
      return PCRE_ERROR_NOMEMORY;

    let res = calloc(stringcount+1,sizeof(const char ?`H)); // +1 for final NULL
    if (!res)
      return PCRE_ERROR_NOMEMORY;

    let sublen = numelts(subject);
    for (let i = 0; i < stringcount; i++) {
      let start = ovector[2*i];
      let len = ovector[2*i+1];
      if (start < 0 || len < 0)
        continue;
      if (sublen < start+len)
        continue; /* This could be considered an error, but we ignore it */
      res[i] = substring(subject,start,len);
    }
    *listptr = res;
    return 0;
  }
}

hstub pcre_free_substring {
  // TODO
  // void pcre_free_substring(const char *stringptr);
}

hstub pcre_free_substring_list {
  // TODO
  // void pcre_free_substring_list(const char **stringptr);
}

hstub pcre_maketables {
  // TODO: memory management of returned value
  extern "C"
  const pcre_table_t *pcre_maketables(void);
}
hstub pcre_fullinfo {
  extern datatype PcreInfo<`r::E> {
    PI_int(int @`r);
    PI_table(unsigned char @@numelts(32)@nozeroterm);
    PI_options(unsigned long int @`r);
    PI_size(size_t @`r);
  };
  typedef datatype PcreInfo<`r> @`r PI<`r>;
  int pcre_fullinfo(const pcre @code, const pcre_extra *extra,
                    int what, ... inject PI);
}
cstub {
#include <pcre.h>
}
cstub pcre_fullinfo {
  int pcre_fullinfo_int(const pcre *a,const pcre_extra *b,int c,int *d) {
    return pcre_fullinfo(a,b,c,d);
  }
  int pcre_fullinfo_table(const pcre *a,const pcre_extra *b,int c,unsigned char * d) {
    return pcre_fullinfo(a,b,c,d);
  }
  int pcre_fullinfo_options(const pcre *a,const pcre_extra *b,int c,unsigned long int *d) {
    return pcre_fullinfo(a,b,c,d);
  }
  int pcre_fullinfo_size(const pcre *a,const pcre_extra *b,int c,size_t *d) {
    return pcre_fullinfo(a,b,c,d);
  }
}
cycstub pcre_fullinfo {
  namespace Cpcre {
    extern "C" int pcre_fullinfo_int(const pcre @,const pcre_extra *,int,int @);
    extern "C" int pcre_fullinfo_table(const pcre @,const pcre_extra *,int,unsigned char @@numelts(32)@nozeroterm);
    extern "C" int pcre_fullinfo_options(const pcre @,const pcre_extra *,int,unsigned long int @);
    extern "C" int pcre_fullinfo_size(const pcre @,const pcre_extra *,int,size_t @);
  }
  int pcre_fullinfo(const pcre @code, const pcre_extra *extra,
                    int what, ... inject PI pi_array) {
    if (numelts(pi_array) != 1)
      return PCRE_ERROR_BADOPTION;
    if (what == PCRE_INFO_NAMETABLE)
      // TODO: not supported yet
      return PCRE_ERROR_BADOPTION;
    switch (pi_array[0]) {
    case &PI_int(x):
      switch (what) {
      case PCRE_INFO_BACKREFMAX:
      case PCRE_INFO_CAPTURECOUNT:
      case PCRE_INFO_FIRSTBYTE:
        //      case PCRE_INFO_FIRSTCHAR: // synonym for above, comment out to avoid redundant case error
      case PCRE_INFO_LASTLITERAL:
      case PCRE_INFO_NAMECOUNT:
      case PCRE_INFO_NAMEENTRYSIZE:
        return Cpcre::pcre_fullinfo_int(code,extra,what,x);
      default:
        return PCRE_ERROR_BADOPTION;
      }
    case &PI_table(x):
      switch (what) {
      case PCRE_INFO_DEFAULT_TABLES:
      case PCRE_INFO_FIRSTTABLE:
        return Cpcre::pcre_fullinfo_table(code,extra,what,x);
      default:
        return PCRE_ERROR_BADOPTION;
      }
    case &PI_options(x):
      switch (what) {
      case PCRE_INFO_OPTIONS:
        return Cpcre::pcre_fullinfo_options(code,extra,what,x);
      default:
        return PCRE_ERROR_BADOPTION;
      }
    case &PI_size(x):
      switch (what) {
      case PCRE_INFO_SIZE:
      case PCRE_INFO_STUDYSIZE:
        return Cpcre::pcre_fullinfo_size(code,extra,what,x);
      default:
        return PCRE_ERROR_BADOPTION;
      }
    }
  }
}

hstub pcre_info {
  extern "C"
  int pcre_info(const pcre @code, int *optptr, int *firstcharptr);
}

hstub pcre_refcount {
  extern "C"
  int pcre_refcount(pcre @code, int adjust);
}

hstub pcre_config {
  extern "C"
  int pcre_config(int what, int @where);
}

hstub pcre_version {
  extern "C"
  char *pcre_version(void);
}

hstub pcre_malloc {
  // TODO
  // void *(*pcre_malloc)(size_t);
}

hstub pcre_free {
  // TODO
  // void (*pcre_free)(void *);
}

hstub pcre_stack_malloc {
  // TODO
  // void *(*pcre_stack_malloc)(size_t);
}

hstub pcre_stack_free {
  // TODO
  // void (*pcre_stack_free)(void *);
}

hstub pcre_callout {
  // TODO

  // The problem here is that the pcre_callout_block has fields which
  // cannot be used safely, e.g., a thin pointer to an ovector with a
  // separate length field.  We have to change the typing of the
  // structure to get things to be safe.

  //  extern int (*pcre_callout)(pcre_callout_block *);
}

hstub {
#include <list.h>
#include <buffer.h>
  unsigned int pcre_ovector_len(pcre @re);
  void add_replacement(Buffer::T buf, const char ?s, int ?ovector, const char ?r);
  char ?pcre_s_g(const char ?s,const char ?p,const char ?r,int options);
  char ?pcre_s(const char ?s,const char ?p,const char ?r,int options);
  int pcre_m(const char ?s,const char ?p,int options);
  char ?pcre_chomp(const char ?s);
  List::list_t<char ?@> pcre_split(const char ?p,int options,const char ?s);
}

hstub {
  /* Like perl's s/foo/bar/g */
#define PCRE_S_EG(s,p,r,options) ({                                     \
      let _s = s;                                                       \
      pcre *_re; const char *_err = NULL; int _erroff;                  \
                                                                        \
      _re = pcre_compile(p, options, &_err, &_erroff, NULL);            \
      if (!_re) { fprintf(stderr,"Error at position %d:\n%s\n",_erroff,p); exit(1); } \
                                                                        \
      let _buf = Buffer::create(10);                                    \
      let _slen = strlen(_s);                                           \
      let _olen = pcre_ovector_len(_re);                                \
      int ?_ovector = new {for i < _olen : 0};                          \
      int _startoffset = 0;                                             \
                                                                        \
      while (_startoffset <= _slen && /* = to try to match empty string at end */ \
             pcre_exec(_re,NULL,_s,_slen,_startoffset,0,_ovector,_olen) >= 0) { \
        let _start = _ovector[0];                                       \
        let _after = _ovector[1];                                       \
        if (_start < 0 || _after < 0) break;                            \
        Buffer::add_substring(_buf,_s,_startoffset,_start-_startoffset); /* string before match */ \
        r; /* replacement text */                                       \
        /* now set up for the next search */                            \
        _startoffset = _after;                                          \
        if (_startoffset == _start) {                                   \
          /* (original _startoffset) <= _start == _after, i.e., the pattern \
             matched the empty string.  We need to advance to the next  \
             character so that the empty string does not match again    \
             (avoid the infinite loop). */                              \
          Buffer::add_char(_buf,_s[_startoffset]);                      \
          _startoffset++;                                               \
        }                                                               \
      }                                                                 \
      Buffer::add_string(_buf,_s+_startoffset); /* no matches in the remainder, add it to the result */ \
      Buffer::contents(_buf);                                           \
    })

#define REPLACE(x) add_replacement(_buf,_s,_ovector,x)
#define STRING(x) Buffer::add_string(_buf,x);
#define DOLLAR(x) ({ int _start = _ovector[2*(x)]; int _after = _ovector[2*(x)+1]; \
      (_start < 0 || _after < 0) ? strdup("") : substring(_s,_start,_after-_start); })
}
cycstub {
  /* Return the size needed for an ovector for a given regular expression. */
  unsigned int pcre_ovector_len(pcre @re) {
    unsigned int olen;
    int rc = pcre_fullinfo(re,NULL,PCRE_INFO_CAPTURECOUNT,&olen);
    return 3*(olen+1);
  }

  /* Add a replacement to a buffer.  The replacement supports the Perl
     constructs $`, $&, $', $1, ... */
  /* Array_bounds if backref number is too high */
  void
    add_replacement(Buffer::T buf, const char ?s, int ?ovector, const char ?r) {
    let len = strlen(r);
    char c;
    for (let i = 0; i<len; i++) {
      c = r[i];
      if (c != '$') { Buffer::add_char(buf,c); continue; }

      i++;
      if (i>=len) {
        Buffer::add_char(buf,'$');
        return;
      }
      c = r[i];
      switch (c) {
      case '`':
        Buffer::add_substring(buf,s,0,ovector[0]);
        break;
      case '\'':
        Buffer::add_string(buf,s+ovector[1]); // assumes s zero terminated
        break;
      case '&':
        Buffer::add_substring(buf,s,ovector[0],ovector[1]-ovector[0]);
        break;
      default:
        if (c < '0' || '9' < c) { /* Not a Number */
          Buffer::add_char(buf,'$');
          Buffer::add_char(buf,c);
          break;
        }
        /* A number (back reference) */
        int backref = 0;
        int backreflen = 0;
        for (; r[i+backreflen]; backreflen++) {
          let d = r[i+backreflen];
          if (!isdigit(d)) break;
          backref = backref*10 + (d - '0');
        }
        /* backref holds the converted backref number, i+backlen
           is the index of the first non-digit character */
        /* Don't use sscanf because of a cyclone problem with linking
           order (-lpcre ends up after -lcyc, barfs) */
        /* TODO: check that backref is valid, give useful message otherwise */
        let start = ovector[backref*2];
        let after = ovector[backref*2+1];
        if (start < 0 || after < 0) continue; /* did not actually match */
        Buffer::add_substring(buf,s,start,after-start);
        i += backreflen-1; /* -1 because for loop does i++ */
        break;
      }
    }
  }

  char ?pcre_s_g(const char ?s,const char ?p,const char ?r,int options) {
    return PCRE_S_EG(s,p,REPLACE(r),options);
  }

  //char ?pcre_s_g(const char ?s,const char ?p,const char ?r,int options) {
  //  pcre *_re; const char *_err = NULL; int _erroff;
  //
  //  _re = pcre_compile(p, options, &_err, &_erroff, NULL);
  //
  //  let _buf = Buffer::create(10);
  //  let _slen = strlen(s);
  //  let _olen = pcre_ovector_len(_re);
  //  int ?_ovector = new {for i < _olen : 0};
  //  int _startoffset = 0;
  //
  //  while (_startoffset <= _slen && /* = to try to match empty string at end */
  //         pcre_exec(_re,NULL,s,_slen,_startoffset,0,_ovector,_olen) >= 0) {
  //    let _start = _ovector[0];
  //    let _after = _ovector[1];
  //    if (_start < 0 || _after < 0) break;
  //    Buffer::add_substring(_buf,s,_startoffset,_start-_startoffset); /* string before match */
  //    add_replacement(_buf,s,_ovector,r); /* replacement text */
  //    /* now set up for the next search */
  //    _startoffset = _after;
  //    if (_startoffset == _start) {
  //      /* (original _startoffset) <= _start == _after, i.e., the pattern
  //         matched the empty string.  We need to advance to the next
  //         character so that the empty string does not match again
  //         (avoid the infinite loop). */
  //      Buffer::add_char(_buf,s[_startoffset]);
  //      _startoffset++;
  //    }
  //  }
  //  Buffer::add_string(_buf,s+_startoffset); /* no matches in the remainder, add it to the result */
  //  return Buffer::contents(_buf);
  //}

  char ?pcre_s(const char ?s,const char ?p,const char ?r,int options) {
    pcre *re; const char *err = NULL; int erroff;

    re = pcre_compile(p, options, &err, &erroff, NULL);
    if (!re) {
      fprintf(stderr,"Error at position %d:\n%s\n",erroff,p);
      exit(1);
    }

    let slen = strlen(s);
    let buf = Buffer::create(slen);
    let olen = pcre_ovector_len(re);
    int ?ovector = new {for i < olen : 0};

    if (pcre_exec(re,NULL,s,slen,0,0,ovector,olen) >= 0) {
      let start = ovector[0];
      let after = ovector[1];
      if (start < 0 || after < 0) {
        return strdup(s);
      }
      Buffer::add_substring(buf,s,0,start);
      add_replacement(buf,s,ovector,r);
      Buffer::add_string(buf,s+after);
      return Buffer::contents(buf);
    }
    else
      return strdup(s);
  }

  int pcre_m(const char ?s,const char ?p,int options) {
    pcre *re; const char *err = NULL; int erroff;

    re = pcre_compile(p, options, &err, &erroff, NULL);
    if (!re) {
      // TODO: return a better error
      // fprintf(stderr,"Error at position %d:\n%s\n",erroff,p);
      return 0;
    }

    let slen = strlen(s);
    let olen = pcre_ovector_len(re);
    int ?ovector = new {for i < olen : 0};

    return (0 <= pcre_exec(re,NULL,s,slen,0,0,ovector,olen));
  }

  /* TODO: maybe this should work by side effect rather than return a new string */
  char ?pcre_chomp(const char ?s) {
    return pcre_s(s,"\n$","",0);
  }

  List::list_t<char ?@> pcre_split(const char ?p,int options,const char ?s) {
    pcre *re; const char *err = NULL; int erroff;

    re = pcre_compile(p, options, &err, &erroff, NULL);
    if (!re) {
      fprintf(stderr,"Error at position %d:\n%s\n",erroff,p);
      exit(1);
    }

    List::list_t<char ?`H@`H> res = NULL;
    let slen = strlen(s);
    let olen = pcre_ovector_len(re);
    int ?ovector = new {for i < olen : 0};
    int startoffset = 0;
    int was_empty_match = 0;

    while (startoffset <= slen && /* = to try to match empty string at end */
           pcre_exec(re,NULL,s,slen,startoffset+was_empty_match,
                     0,ovector,olen) >= 0) {
      let start = ovector[0];
      let after = ovector[1];
      if (start < 0 || after < 0) break;
      res = new List::List(new substring(s,startoffset,start-startoffset),res);
      startoffset = after;
      if (startoffset == start) {
        /* (original _startoffset) <= _start == _after, i.e., the pattern
           matched the empty string.  We need to advance to the next
           character so that the empty string does not match again
           (avoid the infinite loop). */
        was_empty_match = 1;
      }
      else
        was_empty_match = 0;
    }
    if (startoffset < slen)
      res = new List::List(new strdup(s+startoffset),res);
    res = List::imp_rev(res);
    return res;
  }
}
;
