;    This file is part of the RC compiler.
;    Copyright (C) 2000-2001 The Regents of the University of California.
; 
; RC is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2, or (at your option)
; any later version.
; 
; RC is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with RC; see the file COPYING.  If not, write to
; the Free Software Foundation, 59 Temple Place - Suite 330,
; Boston, MA 02111-1307, USA.

;; AST definition  -*-Lisp-*-

;; (deffield FIELD-NAME C-TYPE (ATTRIBUTES))
;; (deftype TYPE-NAME SUPER-TYPE (FIELDS) "DOCUMENTATION")
;; (defnode NODE-NAME TYPE-NAME "DOCUMENTATION")

;; deffield:
;; Define field FIELD-NAME with type C-TYPE. The attributes listed are 
;; interpreted by the various generators, attributes are either symbols,
;; or lists whose first element is a symbol

;; Current attributes:
;;   init: field is an argument to the constructing function for the types
;;         that contain it
;;   nodump: field is not marshalled/unmarshalled
;;   noprint: field is not printed as part of AST
;;   dump-special: call dump_FIELD-NAME to marshall/unmarshall this node
;;   print-special: call print_FIELD-NAME to print node



(deffield temp int (nodump noprint (default "23"))) ; a random int field with default value 23

(deffield type type ())
(deffield declared_type type ())
(deffield name "const char *" ())
(deffield location location (init))
(deffield next "node sameregion" ()) 
(deffield asttype asttype (init tree))
(deffield condition expression (init tree))
(deffield arg1 expression (init tree))
(deffield arg2 expression (init tree))
(deffield arg3 expression (init tree))
(deffield stmt statement (init tree))
(deffield stmt1 statement (init tree))
(deffield stmt2 statement (init tree))
(deffield stmts statement (init tree))
(deffield asm_stmt asm_stmt (init tree))
(deffield extension bool ())
(deffield label label (init tree))
(deffield labels label (init tree))
(deffield id_label id_label (init tree))
(deffield id_labels id_label (init tree))
(deffield cstring cstring (init))
(deffield word1 word (init tree))
(deffield word2 word (init tree))
(deffield strings expression (init tree))
(deffield args expression (init tree))
(deffield modifiers type_element (init tree))
(deffield qualifiers type_element (init tree))
(deffield init_expr expression (init tree))
(deffield parms declaration (init tree))
(deffield decl declaration (init tree))
(deffield decls declaration (init tree))
(deffield asm_operands1 asm_operand (init tree))
(deffield asm_operands2 asm_operand (init tree))
(deffield asm_clobbers string (init tree))
(deffield id "enum rid" (init))
(deffield declarator declarator (init tree))
(deffield string string (init tree))
(deffield fields declaration (init tree))
(deffield defined bool (init))
(deffield parent_function function_decl (init))
(deffield env environment (init))
(deffield ddecl data_declaration (init))
(deffield ident identifier (init))
(deffield incrementrc bool (init))
(deffield old_parms declaration (init))
(deffield attributes attribute (init tree))
(deffield chars "wchar_t *" (init))
(deffield length size_t (init))
(deffield cval cval (init))
(deffield va_arg_call asttype (init))

(deffield tdecl tag_declaration ())
(deffield fdeclarator function_declarator ())
(deffield lvalue bool ())
(deffield bitfield bool ())
(deffield isregister bool ())
(deffield side_effects bool ())
(deffield cst known_cst ())
(deffield static_address known_cst ())
(deffield undeclared_variables env ())
(deffield base_labels env ())
(deffield scoped_labels env ())
(deffield ldecl label_declaration ())
(deffield parent_loop statement ())
(deffield current_loop statement ())
(deffield next_label label ())
(deffield vertex node ())
(deffield vertex_next node ())
(deffield edges_out edge ())
(deffield edges_in edge ())
(deffield cfg_entry node ())
(deffield cfg_size long ())
(deffield cfg_nextnode long ())
(deffield cfg_nodes "node parentptr *" ())
(deffield postorder_nodes "node parentptr *" ())
(deffield preorder_nodes "node parentptr *" ())
(deffield postorder_size long ())
(deffield addressed_labels dd_list ())
(deffield break_dest node ())
(deffield continue_dest node ())
(deffield mark long ())
(deffield live_in bitset ())
(deffield live_out bitset ())
(deffield defs_out "noderef *" ())
(deffield parent "node sameregion" ())
(deffield parent_ptr "node sameregion *sameregion" ())
(deffield nlocals int ())
(deffield inscope_vars bitset ())
(deffield vmap "data_declaration *" ())
(deffield temps "data_declaration %s[MAXRCTEMPS]" (format))
(deffield in_postorder "unsigned long" ())
(deffield clearing bool ())
(deffield rcop generic_rc ())
(deffield allrcops "generic_rc sameregion *sameregion" ())
(deffield mf_height int ())
(deffield mf_excess int ())
(deffield mf_marked bool ())
(deffield rc_fns declaration ())
(deffield rcfn_decl data_declaration ())
(deffield sr_vertex gnode ())
(deffield sr_graph ggraph ())
(deffield sr_entry gnode ())
(deffield sr_vmap "data_declaration *" ())
(deffield sr_nvars int ())
(deffield sr_return_id place ())
(deffield sr_nptrargs int ())
(deffield sr_unknown_arguments bool ())
(deffield sr_temp "struct sr_state" ((default "zero_state")))
(deffield sr_local2placeidmap "place *" ())
(deffield sr_preorder "gnode *" ())
(deffield sr_size int ())
(deffield lregion gplace ((default "PERROR")))
(deffield rregion gplace ((default "PERROR")))
(deffield chkopt_time double ())


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Base types
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype node nil (location type next edges_out edges_in vertex vertex_next 
		   mark live_in live_out parent parent_ptr inscope_vars 
		   mf_height mf_excess mf_marked in_postorder 
		   sr_vertex defs_out)
  "The common supertype of all AST nodes
VERTEX points to the node that represents the vertex of this cfg node after
collapsing the graph. VERTEX_NEXT forms a list of all nodes collapsed to
the same vertex.
MF_HEIGHT and MF_EXCESS are used by the maxflow algorithm.
SR_VERTEX is the vertex (or null for none) of this node in the reduced
sameregion-optimisation cfg")

(deftype declaration node ()
  "The common type of all definitions")

(deftype statement node (parent_loop break_dest continue_dest)
  "The common type of all statements
PARENT_LOOP: 
  - for break and continue: the containing for/while/do-while/switch
    statement they escape from
  - for for/while/do-while: the containing for/while/do-while/switch
    statement
BREAK_DEST and CONTINUE_DEST: for for/while/do-while/switch statements
the CFG node to which break or continue should go to")

(deftype expression node (lvalue side_effects cst bitfield isregister
			  static_address lregion rregion)
  "Expression nodes are subtypes of this type.
LVALUE is true if this expression can be used in a context requiring an lvalue.
BITFIELD is true if this lvalue is a bitfield.
ISREGISTER is true if this lvalue is (declared to be) in a register.
SIDE_EFFECTS is true if the expression has side effects.
CST is non-null (and points to an appropriate constant) if this expression is
constant.
STATIC_ADDRESS is true for lvalues whose address is a constant expression
LREGION and RREGION specify the region where the address of this value (when
meaningful) and the actual value are known to live. See chkopt.[ch]. LREGION
and RREGION are generalised places.")

(deftype type_element node ()
  "A common super-type for all type-building elements (qualifiers, etc)")

(deftype declarator node ()
  "A common super-type for all declarator elements")

(deftype label node (next_label)
  "A common super-type for all labels.
NEXT_LABEL points to the next case or default label of a switch 
(for case or default labels only)")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnode error_decl declaration "Placeholder for erroneous declarations")

(deftype asm_decl declaration (asm_stmt)
  "Asm statement STMT at the top level of a file (GCC)")

(deftype data_decl declaration (modifiers attributes decls)
  "The declaration MODIFIERS ATTRIBUTES DECLS;
DECLS is a list")

(deftype extension_decl declaration (decl)
  "__extension__ DECL; (GCC)")

(deftype ellipsis_decl declaration ()
  "A pseudo-declaration to represent ... in a function argument list")

(deftype enumerator declaration (cstring arg1 ddecl)
  "The enumeration element CSTRING = ARG1. CSTRING is optional")

(deftype oldidentifier_decl declaration (cstring ddecl)
  "CSTRING in an old-style parameter list")

(deftype function_decl declaration (declarator qualifiers attributes old_parms stmt
				    parent_function ddecl fdeclarator
				    declared_type undeclared_variables
				    base_labels scoped_labels current_loop
				    cfg_entry cfg_nodes cfg_nextnode cfg_size 
				    postorder_nodes preorder_nodes postorder_size
				    addressed_labels nlocals vmap rc_fns
				    sr_graph sr_entry sr_vmap sr_nvars sr_return_id
				    sr_nptrargs sr_unknown_arguments sr_temp
				    sr_local2placeidmap sr_preorder sr_size
				    chkopt_time allrcops)
  "A function definition with body STMT.
OLD_PARMS is the old-style parameter declaration list.
CFG_ENTRY is the first vertex of the function's cfg.
RC_FNS is a list of adjust_function_decl or update_function_decl that
should be generated before this function.
")

(deftype implicit_decl declaration (ident)
  "Used as the AST node for implicit declarations. IDENT points to the
identifier node that implicitly declared the function")

(deftype variable_decl declaration (declarator attributes arg1 asm_stmt
				    ddecl declared_type)
  "Declaration of ATTRIBUTES ASM_STMT DECLARATOR = ARG1.
ATTRIBUTEES is a list. ASM_STMT is optional (GCC specific).
ARG1 is an optional initialiser.
DDECL points to the declaration for this item.
DECLARED_TYPE is the type in this declaration (which may be different than that
in DDECL->TYPE)")

(deftype field_decl declaration (declarator attributes arg1)
  "Declaration of field QUALIFIERS ATTRIBUTES DECLARATOR : ARG1.
QUALIFIERS and ATTRIBUTEES are lists. ARG1 is an optional bitfield specifier")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Types and type elements
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype asttype node (declarator qualifiers)
  "The source-level type QUALIFIERS DECLARATOR")

(deftype typename type_element (ddecl)
  "typedef-type with declaration DDECL. The name is ddecl->name")

(deftype typeof_expr type_element (arg1)
  "typeof(ARG1)")

(deftype typeof_type type_element (asttype)
  "typeof(ASTTYPE)")

(deftype attribute type_element (word1 word2 args)
  "The attribute WORD1(WORD2, ARGS). word2 and args are optional")

(deftype rid type_element (id)
  "Storage class specifier, type specifier or type qualifier ID (see RID_xxx)")

(deftype qualifier type_element (id)
  "Type or function qualifier ID (see qualifiers.h and type_quals in types.h)")

(deftype tag_ref type_element (word1 attributes fields defined
			       tdecl)
  "struct/union/enum WORD1 { FIELDS; }  ATTRIBUTES
ATTRIBUTES and FIELDS are lists.
ATTRIBUTES is GCC specific. WORD1 is optional.
DEFINED is TRUE if this declaration defines the struct/union/enum.
DEFINED == FALSE => FIELDS == NULL

TDECL points to the internal declaration node for this type")
(defnode struct_ref tag_ref "A struct")
(defnode union_ref tag_ref "A union")
(defnode enum_ref tag_ref "An enum")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Declarators
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The last DECLARATOR in a chain is:
;;   NULL_NODE in absolute declarations
;;   an identifier_decl otherwise

(deftype function_declarator declarator (declarator parms qualifiers env)
  "Function declarator DECLARATOR(PARMS). PARMS is a list of declarations.
ENV is the environment for parms")

(deftype pointer_declarator declarator (declarator qualifiers)
  "Pointer declarator *QUALIFIERS DECLARATOR")

(deftype array_declarator declarator (declarator arg1)
  "Array declarator DECLARATOR[ARG1]. ARG1 is optional")

(deftype identifier_declarator declarator (cstring)
  "Declaration of CSTRING")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Statements
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnode error_stmt statement "Placeholder for erroneous statements")

(deftype asm_stmt statement (arg1 asm_operands1 asm_operands2 asm_clobbers qualifiers)
  "The statement asm QUALIFIERS (ARG1 : ASM_OPERANDS1 : ASM_OPERANDS2 : ASM_CLOBBERS) 
where ASM_OPERANDS1, ASM_OPERANDS2, QUALIFIERS are optional, ASM_CLOBBERS is a list (GCC)")

(deftype compound_stmt statement (id_labels decls stmts env)
  "{ ID_LABELS DECLS STMTS }. The ID_LABELS are GCC-specific. ID_LABELS, DECLS,
STMTS are lists
ENV is the environment for the block")

(deftype if_stmt statement (condition stmt1 stmt2)
  "IF (CONDITION) STMT1 ELSE STMT2. STMT2 is optional")

(deftype labeled_stmt statement (label stmt)
  "LABEL: STMT")

(deftype expression_stmt statement (arg1)
  "EXPR;")


(deftype conditional_stmt statement (condition stmt)
  "Basic type for all conditional statements")
(defnode while_stmt conditional_stmt "WHILE (CONDITION) STMT")
(defnode dowhile_stmt conditional_stmt "DO STMT WHILE (CONDITION")
(deftype switch_stmt conditional_stmt (next_label) 
  "SWITCH (CONDITION) STMT.
NEXT_LABEL points to the switches first label")

(deftype for_stmt statement (arg1 arg2 arg3 stmt)
  "FOR (ARG1; ARG2; ARG3) STMT. ARG1, ARG2, ARG3 are optional")

(deftype break_stmt statement ()
  "BREAK;")

(deftype continue_stmt statement ()
  "CONTINUE;")

(deftype return_stmt statement (arg1)
  "RETURN ARG1. ARG1 is optional")

(deftype goto_stmt statement (id_label)
  "GOTO ID_LABEL")

(deftype computed_goto_stmt statement (arg1)
  "GOTO *ARG1 (GCC)")

(deftype empty_stmt statement ()
  ";")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Expressions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnode error_expr expression "Placeholder for erroneous expressions")

(deftype unary expression (arg1)
  "Unary expression nodes, kind defines operator")

(deftype binary expression (arg1 arg2)
  "Binary expression nodes, kind defines operator")

(deftype comma expression (arg1)
  "A comma separated list of expressions ARG1")

(deftype sizeof_type expression (asttype)
  "sizeof (ASTTYPE)")

(deftype alignof_type expression (asttype)
  "__alignof (ASTTYPE) (GCC)")

(deftype label_address expression (id_label)
  "&&ID_LABEL (GCC)")

(deftype cast unary (asttype)
  "(ASTTYPE)ARG1")

(deftype cast_list expression (asttype init_expr)
  "(ASTTYPE){INIT_EXPR} (GCC)")

(deftype conditional expression (condition arg1 arg2)
  "CONDITION ? ARG1 : ARG2
   GCC specific: ARG1 is optional")

(deftype identifier expression (cstring ddecl)
  "The identrifier CSTRING.
DEAD_USE is true for identifiers used as the target of a regular assignment")

(deftype compound_expr expression (stmt)
  "({stmt}) (GCC)")

(deftype function_call expression (arg1 args va_arg_call)
  "ARG1(ARGS). ARGS is a list of expressions
If VA_ARG_CALL is non-null, this is actually a call to the pseudo-function
__builtin_va_arg(args, va_arg_call) (where va_arg_call is a type). In 
this case arg1 is a dummy identifier.")

(defnode array_ref binary "ARG1[ARG2]")

(deftype field_ref unary (cstring)
  "ARG1.CSTRING")

(defnode dereference unary "*ARG1")
(defnode extension_expr unary "__extension__ ARG1 (GCC)")
(defnode sizeof_expr unary "sizeof ARG1")
(defnode alignof_expr unary "__alignof ARG1 (GCC)")
(defnode realpart unary "__real ARG1 (GCC)")
(defnode imagpart unary "__imag ARG1 (GCC)")
(defnode address_of unary "&ARG1")
(defnode unary_minus unary "-ARG1")
(defnode unary_plus unary "+ARG1")
(defnode conjugate unary "~ARG1 on complex arguments")
(defnode preincrement unary "++ARG1")
(defnode predecrement unary "--ARG1")
(defnode postincrement unary "ARG1++")
(defnode postdecrement unary "ARG1--")
(defnode bitnot unary "~ARG1")
(defnode not unary "!ARG1")

(defnode plus binary "ARG1 + ARG2")
(defnode minus binary "ARG1 - ARG2")
(defnode times binary "ARG1 * ARG2")
(defnode divide binary "ARG1 / ARG2")
(defnode modulo binary "ARG1 % ARG2")
(defnode lshift binary "ARG1 << ARG2")
(defnode rshift binary "ARG1 >> ARG2")
(defnode leq binary "ARG1 <= ARG2")
(defnode geq binary "ARG1 >= ARG2")
(defnode lt binary "ARG1 < ARG2")
(defnode gt binary "ARG1 > ARG2")
(defnode eq binary "ARG1 == ARG2")
(defnode ne binary "ARG1 != ARG2")
(defnode bitand binary "ARG1 & ARG2")
(defnode bitor binary "ARG1 | ARG2")
(defnode bitxor binary "ARG1 ^ ARG2")
(defnode andand binary "ARG1 && ARG2")
(defnode oror binary "ARG1 || ARG2")
(deftype assign binary (clearing rcop) 
  "ARG1 = ARG2.
CLEARING is true for assignments used to pre-set local pointers to NULL")
(defnode plus_assign binary "ARG1 += ARG2")
(defnode minus_assign binary "ARG1 -= ARG2")
(defnode times_assign binary "ARG1 *= ARG2")
(defnode divide_assign binary "ARG1 /= ARG2")
(defnode modulo_assign binary "ARG1 %= ARG2")
(defnode lshift_assign binary "ARG1 <<= ARG2")
(defnode rshift_assign binary "ARG1 >>= ARG2")
(defnode bitand_assign binary "ARG1 &= ARG2")
(defnode bitor_assign binary "ARG1 |= ARG2")
(defnode bitxor_assign binary "ARG1 ^= ARG2")

;; Initialiser expressions (not allowed in most contexts)

(deftype init_list expression (args)
  "{ ARGS }. ARGS is a list of expressions")

(deftype init_index expression (arg1 arg2 init_expr)
  "[ ARG1 ... ARG2] INIT_EXPR (GCC). ARG2 is optional")

(deftype init_field expression (word1 init_expr)
  "WORD1 : INIT_EXPR (GCC)")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype known_cst expression (cval)
  "A constant representable in CVAL. These do not appear as part of the
AST (they show up in the cst and static_address fields of expressions).")

(deftype lexical_cst expression (cstring)
  "A constant represented as in its unparsed lexical form CSTRING. These
appear in the AST.")

(deftype string_cst lexical_cst (chars length)
  "A single lexical string whose LENGTH characters are CHARS. The source
form of the constant can be found in CSTRING.")

(deftype string expression (strings ddecl)
  "A list of STRINGS forming a single string constant.
DDECL is the magic_string declaration for this string.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Labels
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype id_label label (cstring ldecl)
  "The label CSTRING:")

(deftype case_label label (arg1 arg2)
  "CASE ARG1 ... ARG2: ARG2 is optional, it's presence is GCC-specific")

(deftype default_label label ()
  "DEFAULT:")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Miscellaneous
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype word node (cstring)
  "The identifier CSTRING used uninterpreted")

(deftype asm_operand node (string arg1)
  "STRING(EXPR) (GCC)")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Internal use
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype adjust_rc expression (arg1 incrementrc rcfn_decl)
  "Adjust the rc of value of pointers of ARG1 (increment if INCREMENTRC true,
decrement otherwise)
RCFN_DECL is the declaration of any necessary rc_adjust function")

(deftype generic_rc binary (temps rcfn_decl)
  "Update rc for 'ARG1 = ARG2'
RCFN_DECL is the declaration of any necessary rc_adjust/rc_update function")

(deftype update_rc generic_rc (ddecl)
  "Update rc for 'ARG1 = ARG2', where ARG1 is accessed (possibly as an offset)
off pointer variable DDECL
RCFN_DECL is the declaration of any necessary rc_update function")

(defnode global_rc generic_rc
  "Update rc for 'ARG1 = ARG2', where ARG1 is a global or local variable
with an optional field access path")

(deftype adjust_function_decl declaration (rcfn_decl)
  "A placeholder representing an automatically generated rc_adjust_x
function for type TYPE")

(deftype adjustarray_function_decl declaration (rcfn_decl)
  "A placeholder representing an automatically generated __rc_adjustarray
function")

(deftype update_function_decl declaration (rcfn_decl)
  "A placeholder representing an automatically generated rc_update_x
function for type TYPE")

