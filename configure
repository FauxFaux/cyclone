#!/bin/bash
# Architecture-specific configuration.
# 
# usage: configure

# get the root directory of the source tree
CYCDIR=`pwd`

#  incdir="$CYCDIR/include"
#  libdir="$CYCDIR/bin/cyc-lib"
#  bindir=

incdir="/usr/include/cyclone"
libdir="/usr/local/lib/cyclone"
bindir="/usr/local/bin"

# arguments
#
while [ $# != 0 ]; do
  case "$1" in
    -bindir) # set the directory to store the binaries
        shift
        [[ $# = 0 ]] && echo "-bindir must specify a directory";
        bindir=$1
        shift
    ;;
    -libdir) # set the library directory
        shift
        [[ $# = 0 ]] && echo "-libdir must specify a directory";
        libdir=$1
        shift
    ;;
    -incdir) # set the include directory
        shift
        [[ $# = 0 ]] && echo "-incdir must specify a directory";
        incdir=$1
        shift
    ;;
    -prefix) # set directories to prefix/bin prefix/lib/cyclone ...
        shift
        [[ $# = 0 ]] && echo "-prefix must specify a directory prefix";
	prefix=$1
        shift
    ;;
    *) # bad option
        echo "usage: $0 [-incdir dir] [-bindir dir] [-libdir dir] [-prefix pre]";
        exit 1
    ;;
  esac
done

if [ -n "$prefix" ]; then
  bindir="$prefix/bin"
  libdir="$prefix/lib/cyclone"
fi

# now figure out the architecture
cd config
ARCH=`./config.guess`

# function to cleanup if we can't port the arch
function cleanup {
  \rm -f ${CYCDIR}/lib/arch/${ARCH}.h ${CYCDIR}/include/arch/${ARCH}.h ${CYCDIR}/config/arch/${ARCH}*
  \rm -rf ${CYCDIR}/bin/genfiles/${ARCH}
  exit 1
}

# see if we have #defines for this architecture
if [ ! -f "arch/${ARCH}" ] || [ ! -f "arch/${ARCH}.undef" ]; then
  echo "This architecture is currently unsupported.  Set it up (y/n)?"
  read resp
  if [ "$resp" = "y" ]; then
    echo | gcc -E -dM - > arch/$ARCH
    if [ $? != 0 ]; then
      echo "error creating arch #define file"
      cleanup
    fi
    awk '{ printf("#undef %s\n",$2); }' arch/$ARCH > arch/$ARCH.undef
    if [ $? != 0 ]; then
      echo "error creating arch #undef file"
      cleanup
    fi
    echo "Creating architecture-specific include file"
    ./arch_include > ${CYCDIR}/lib/arch/${ARCH}.h
    cp ${CYCDIR}/lib/arch/${ARCH}.h ${CYCDIR}/include/arch/${ARCH}.h
    if [ $? != 0 ]; then
      echo "  failed.  Try altering the version of egrep used by"
      echo "  the script config/arch_include."
      cleanup
    fi
    if [ -d "${CYCDIR}/bin/genfiles/${ARCH}" ]; then
      echo "Warning: genfiles directory for ${ARCH} exists"
    else
      mkdir ${CYCDIR}/bin/genfiles/${ARCH}
      case "${ARCH}" in
      *cygwin*)
        DEF_ARCH=i686-unknown-cygwin1.3.2;;
      *)
        DEF_ARCH=i686-unknown-linux
      esac
      echo "Using the genfiles from ${DEF_ARCH}" 
      cp -r ${CYCDIR}/bin/genfiles/${DEF_ARCH}/* ${CYCDIR}/bin/genfiles/${ARCH}
      find ${CYCDIR}/bin/genfiles/${ARCH} -name CVS -exec rm -rf {} \;
    fi
  else
    echo "aborting."
    exit 1
  fi
else
  echo "Supported architecture ${ARCH}"
fi

# set up the installation paths
function chkdir {
  echo -n "  $1=$2"
  if [ ! -d "$2" ]; then
    echo " (will create)"
  else
    echo
  fi
}
echo "Will install into"
chkdir "binaries" $bindir
chkdir "libraries" $libdir
chkdir "include files" $incdir

# figure out all supported architectures by checking for config files
ALL_ARCHS=`cd arch; \ls -1 | grep -v undef | grep -v CVS | awk '{printf("%s ",$1);}'`

# write the config Makefile
cd ..
(cat <<EOF
# -*- Makefile -*-
# THIS FILE IS AUTOMATICALLY GENERATED BY configure FROM Makefine.inc.in

# architecture specific defines
CYCDIR=${CYCDIR}
ARCH=${ARCH}
INC_INSTALL=${incdir}
BIN_INSTALL=${bindir}
LIB_INSTALL=${libdir}
ALL_ARCHS=${ALL_ARCHS}

EOF
cat Makefile.inc.in) > Makefile.inc
