# -*- Makefile -*-
# CYCDIR must be defined by the environment for this file to work correctly.
#
# This file is normally invoked recursively by the top-level Cyclone
# Makefile, which exports CYCDIR, so all is well.
#
# This file should be called from the directory where you want the results
# of building the Cyclone library and/or compiler to be put.
# By using flags, variables, etc., this file can be used to build
# bootstrap iterations, compilers for other targets, debug/profile versions, etc

include $(CYCDIR)/Makefile.inc
VPATH=$(CYCDIR)/lib $(CYCDIR)/src $(CYCDIR)
export CYCFLAGS
ifndef UPDATEARCH
UPDATEARCH:=$(ARCH)
endif

# For bootstrapping, may want to override these with something appropriate
CYCC:=$(CYCDIR)/bin/$(CYCCOMP)
CYCLEX:=$(CYCDIR)/bin/cyclex$(EXE)
CYCBISON:=$(CYCDIR)/bin/cycbison$(EXE)
INC_PATH:=. include $(CYCDIR)/lib $(CYCDIR)/src $(CYCDIR)/include
LIB_PATH:=$(CYCDIR)/lib
LIBR:=$(CYCBOOTLIB)
export CYCC CYCLEX CYCBISON INC_PATH LIB_PATH LIBR

# Note, the -B arguments ensure that we use the correct cyc_include.h.
#   If cyc_include.h is being changed, the new version should be in
#   lib/cyc_include.h; the -B$(LIB_PATH) makes sure we use that one.
#   On the other hand if there is no lib/cyc_include.h, then a rule
#   below will copy bin/lib/cyc-lib/cyc_include.h to the current
#   directory, and the -B. ensures we use that one.
override CYCFLAGS += $(addprefix -I, $(INC_PATH)) -B. -B$(LIB_PATH) -save-c

# various flags to set
ifdef DEBUGBUILD
override CYCFLAGS += -pp -g
endif
ifdef PROFILE
override CYCFLAGS += -pg
endif
ifdef ALLOC_PROFILE
override CYCFLAGS += -pa
endif
ifdef NOGC
override CYCFLAGS += -nogc
endif
ifdef NOREGIONS
override CYCFLAGS += -noregions
endif
ifdef OPTBUILD
override CYCFLAGS += -O3
endif

# cross compilation -- will be changed to use -b shortly
ifneq ($(UPDATEARCH),$(ARCH))
#override CYCFLAGS += -use-cpp '$(addprefix $(CYCDIR)/config/, cyccpp arch/$(ARCH) arch/$(UPDATEARCH))'
# TJIM -- WORKING
override CYCFLAGS += -b $(UPDATEARCH)
endif

CYC_SRCS := $(addsuffix .cyc, $(CYCLONE_SRCS))

all: libs $(CYCCOMP) cycdoc$(EXE) buildlib$(EXE) 

libs: $(CYCBOOTLIB) nogc.a $(RUNTIME).$(O) $(CYCLIB)

cfiles: $(C_SRCS) cycdoc.c buildlib.c $(C_BOOT_LIBS) boot_cycstubs.c precore_c.h other_cfiles

# These c files aren't genfiles needed for booting, but, it's
# a good idea to make them anyway: building them can find problems
# with buildlib or libc.cys.
other_cfiles: cyc_setjmp.h cstubs.c cycstubs.cyc $(C_LIBS)

cyc_setjmp.h cstubs.c cycstubs.cyc: libc.cys
	-mkdir include
	gunzip -c $(CYCDIR)/bin/genfiles/$(UPDATEARCH).headers.tgz | tar xf - -C include
	$(CYCDIR)/bin/buildlib -d include -finish -setjmp > cyc_setjmp.h
	$(CYCDIR)/bin/buildlib -d include -finish $<
	find include -name '\*.i[BC]' -exec rm \{\} \;
	mv include/cstubs.c .
	mv include/cycstubs.cyc .

libc.cys:
	(test -e $(CYCDIR)/lib/libc.cys && cp $(CYCDIR)/lib/libc.cys $@) || cp $(CYCDIR)/bin/cyc-lib/libc.cys $@

$(CYCCOMP): $(O_SRCS) install_path.$(O) $(LIBR)
ifdef MS
#FIX: Ignore fewer flags.
	cl /Fe$@ $(CYC_LIB_PATH)/snprintf.obj $^ $(CYCDIR)/bin/lib/cyc-lib/gc.lib
else
	$(CYCC) -o $@ -v -compile-for-boot -L. -B. -B$(CYCDIR)/bin/lib/cyc-lib $(CYCFLAGS) $(O_SRCS) install_path.$(O) $(LDFLAGS)
endif

# The -L. makes sure that we pick up the libcyc.a of the current
# directory.  The -B. makes sure we use the runtime_cyc.o of the
# current directory, and the second -B makes sure we pick up the gc.a
# of the current $(CYCDIR), and we avoid the libcyc.a and gc.a of any
# version of Cyclone currently installed in the usual place.
# We don't these use $(CYCFLAGS) -- because that has -save-c which is
#   irrelevant and the -B flags used there are to find cyc_include.h,
#   not the .a files.
ifdef PROFILE
OTHER_CYCFLAGS += -pg
endif
ifdef ALLOC_PROFILE
OTHER_CYCFLAGS += -pa
endif
ifdef NOGC
OTHER_CYCFLAGS += -nogc
endif
ifdef NOREGIONS
OTHER_CYCFLAGS += -noregions
endif

cycdoc$(EXE): $(addsuffix .$(O), $(CYCDOC_SRCS)) $(LIBR)
	$(CYCC) -o $@ -v -compile-for-boot -L. -B. -B$(CYCDIR)/bin/lib/cyc-lib $(OTHER_CYCFLAGS) $(addsuffix .$(O), $(CYCDOC_SRCS)) $(LDFLAGS)

buildlib$(EXE): $(addsuffix .$(O), $(BUILDLIB_SRCS)) install_path.$(O) $(LIBR)
	$(CYCC) -o $@ -v -compile-for-boot -L. -B. -B$(CYCDIR)/bin/lib/cyc-lib $(OTHER_CYCFLAGS) $(addsuffix .$(O), $(BUILDLIB_SRCS)) install_path.$(O) $(LDFLAGS)

install_path.c: $(CYCDIR)/Makefile.inc
	 (echo "char *Carch = \"$(ARCH)\";"; \
	  echo "char *Cdef_inc_path = \"$(INC_INSTALL)\";"; \
	  echo "char *Cdef_lib_path = \"$(LIB_INSTALL)\";"; \
	  echo "char *Ccomp = \"$(CC)\";"; \
	  echo "char *Cversion = \"$(VERSION)\";") > $@

$(CYCLIB): $(O_LIBS) $(O_BOOT_LIBS) cstubs.$(O) cycstubs.$(O)
ifdef MS
	lib /out:$@ $^
else
	-$(RM) $@
ifdef LC_FLAG
	$(CYCC) -o $@ $(LC_FLAG) $^
else
	ar rc $@ $^
	@echo Trying ranlib, if not found, probably ok to ignore error messages
	-ranlib $@
endif
endif

$(CYCBOOTLIB): $(O_BOOT_LIBS) boot_cstubs.$(O) boot_cycstubs.$(O)
ifdef MS
	lib /out:$@ $^
else
	-$(RM) $@
ifdef LC_FLAG
	$(CYCC) -o $@ $(LC_FLAG) $^
else
	ar rc $@ $^
	@echo Trying ranlib, if not found, probably ok to ignore error messages
	-ranlib $@
endif
endif

nogc.a: nogc.o
	ar rc $@ $^
	@echo Trying ranlib, if not found, probably ok to ignore error messages
	-ranlib $@

cyc_include.h: $(CYCDIR)/bin/lib/cyc-lib/cyc_include.h
	cp $< $@

cycspecs: $(CYCDIR)/bin/lib/cyc-lib/$(UPDATEARCH)/cycspecs
	cp $< $@

core.h: $(CYCDIR)/include/core.h
	cp $< $@

precore_c.h: core.h $(CYCC) cyc_include.h cycspecs
	$(CYCC) -o $@ $(CYCFLAGS) -stopafter-toc -pp -D_CYC_GENERATE_PRECORE_C_ -nocyc -noremoveunused -noexpandtypedefs -nocyc_setjmp -x cyc $<

%.cyc: %.cyl $(CYCLEX)
	$(CYCLEX) $< $@
%_tab.cyc: %.y $(CYCBISON)
	$(CYCBISON) -d $< -o $@
%_tab.h: %.y $(CYCBISON)
	$(CYCBISON) -d $< -o $(patsubst %.h,%.cyc,$@)
# For runtime_cyc.c and nogc.c and cstubs.c and boot_cstubs.c
%.$(O): %.c precore_c.h cyc_include.h cyc_setjmp.h cycspecs
	$(CC) -c -o $@ $(CFLAGS) -I. $<

# These two rules always uses -compile-for-boot, but we really shouldn't
# use it for library files not in the minimal boot library.
%.c: %.cyc $(CYCC) cyc_include.h cyc_setjmp.h cycspecs
	$(CYCC) -c -o $@ -compile-for-boot $(CYCFLAGS) -D__FILE2__=\"$(notdir $<)\" -stopafter-toc $<
%.$(O): %.cyc $(CYCC) cyc_include.h cyc_setjmp.h cycspecs
	$(CYCC) -c -o $@ -compile-for-boot $(CYCFLAGS) -D__FILE2__=\"$(notdir $<)\" $<

ifdef MS
%.obj: %.c precore_c.h cyc_include.h cyc_setjmp.h cycspecs
	cl /I$(CYCDIR) /Dinline=__inline /c /w /nologo /Fo$@ $^
endif

# Always use the original compiler to avoid circularities
# Note: In most cases, it would be correct to share .d files
# Note: depends on cstubs.c so header files get built first
%.d: %.cyc cstubs.c
	$(CYCDIR)/bin/$(CYCCOMP) -M -MG $(CYCFLAGS) -B$(CYCDIR)/bin/lib/cyc-lib $< > $@

ifndef NODEPS
-include $(addsuffix .d, $(CYCLONE_BOOT_LIBS) $(CYCLONE_LIBS) $(CYCLONE_SRCS) cycdoc buildlib)
endif
