/* Type checking for statements */

#include "core.h"
#include "list.h"
#include "position.h"
#include "absyn.h"
#include "absynpp.h"
#include "tcutil.h"
#include "tcenv.h"
#include "tcexp.h"
#include "tcpat.h"
#include "new_control_flow.h"
#include "tcstmt.h"
#include "evexp.h"
#include "stdio.h"

namespace Tcstmt;

using Core;
using List;
using Position;
using Absyn;
using Absynpp;
using Tcutil;
using Tcenv;
using Tcexp;
using Tcpat;
using Stdio;

static void decorate_stmt(tenv_t te, stmt s) {
  NewControlFlow::set_encloser(s, get_encloser(te));
  s->try_depth = get_try_depth(te);
}

// used to type-check Let_d, switch clauses, and catch clauses
static void pattern_synth(seg_t loc, tenv_t te, list_t<tvar> tvs,
			  list_t<vardecl> vs, stmt s, exp_opt where_opt,
			  bool new_block) {
  tenv te2 = add_type_vars(loc,te,tvs);
  if(new_block)
    te2 = Tcenv::new_block(te2);
  let ropt = &Opt(Tcenv::curr_rgn(te2));
  for(let vs2 = vs; vs2 != null; vs2 = vs2->tl) {
    te2 = add_pat_var(loc, te2, vs2->hd);
    vs2->hd->region = ropt;
  }

  if(where_opt != null)
    tcTest(te2,(exp)where_opt,"switch clause guard");

  if(vs != null)
    te2 = set_encloser(te2,s); // for substatements inside of s
  tcStmt(te2,s,false); // pattern vars are in a different region from body ??
  // The encloser of s is not s, so reset it properly.
  if(vs != null)
    NewControlFlow::set_encloser(s,get_encloser(te));
}

// new_block is a kludge because we he abstract syntax doesn't group the
// local declarations in a block, but the region rules do.  (That is,
// adjacent declarations are in the same region.  Those at the beginning
// of a function are in the same region as the parameters.
// Case variables are in new regions, but let variables follow the adjacency
// rules.  We may revisit some of these semi-arbitrary decisions.)
// Note: With these adjacency rules, you can't just throw skip statements in
//       anywhere because they end regions.
void tcStmt(tenv_t te, stmt s0, bool new_block) {
  
  decorate_stmt(te,s0);

  switch (s0->r) {

  case Skip_s: return;

  case Exp_s(e): tcExp(te,null,e); return;

  case Seq_s(s1,s2):
    let te2 = set_next(te,Stmt_j(s2));
    tcStmt(te2,s1,true); // pass new_block in case of weird associativity??
    // JGM: try to treat sequences as "tail-calls" to avoid a deep stack.
    // (Of course, this depends on the parser's associativity.)
    while (true)
      switch (s2->r) {
      case Seq_s(s3,s4):
	decorate_stmt(te,s2);
	te2 = set_next(te,Stmt_j(s4));
	tcStmt(te2,s3,true);
	s2  = s4;
	continue;
      default: goto seq_end; // break out of loop
      }
  seq_end:
    tcStmt(te,s2,true);
    return;

  case Return_s(eopt):
    typ t = return_typ(te);
    if (eopt == null) {
      switch (compress(t)) {
      case VoidType: break;
      default:
	terr(s0->loc,xprintf("must return a value of type %s",typ2string(t)));
        break;
      }
    } else {
      exp e = (exp)eopt;
      tcExp(te,&t,e);
      if (!coerce_use(te,e,t))
	terr(s0->loc, xprintf("returns value of type %s but requires %s",
			      typ2string(e->topt->v), typ2string(t)));
      switch (compress(t)) {
      case VoidType: terr(s0->loc,"function returns void expression"); break;
      default: break;
      }
    }
    return;

  case IfThenElse_s(e,s1,s2):
    tcTest(te,e,"if statement"); // passing string causes allocation :-(
    tcStmt(te,s1,true);
    tcStmt(te,s2,true);
    return;

  case While_s($(e,cont_s),s):
    decorate_stmt(te,cont_s);
    tcTest(te,e,"while loop");
    tcStmt(set_in_loop(te,cont_s),s,true);
    return;

  case For_s(e1,$(e2,guard_s),$(e3,cont_s),s):
    decorate_stmt(te,guard_s);
    decorate_stmt(te,cont_s);
    tcExp(te,null,e1);
    tcTest(te,e2,"for loop");
    te = set_in_loop(te,cont_s);
    tcStmt(te,s,true);
    tcExp(te,null,e3); // ??? what does a break/continue in e3 mean ???
    return;

  case Do_s(s,$(e,cont_s)):
    decorate_stmt(te,cont_s);
    tcStmt(set_in_loop(te,cont_s),s,true);
    tcTest(te,e,"do loop");
    return;

    // In the next 4 cases, the function call assigns through sopt
    // We leave the work to Tcenv b/c it has all the control information
  case Break_s(*sopt):    process_break(te,s0,sopt);    return;
  case Continue_s(*sopt): process_continue(te,s0,sopt); return;
  case Goto_s(l,*sopt):   process_goto(te,s0,l,sopt);   return;

  case Fallthru_s(es,*clauseopt):
    let trip_opt = process_fallthru(te,s0,clauseopt);
    if(trip_opt == null) {
      terr(s0->loc,"fallthru not in a non-last case");
      return;
    }
    let &$(_,tvs,ts) = (_@)(trip_opt);
    list_t<$(tvar,typ)@> instantiation = List::map(make_inst_var,tvs);
    ts = List::map_c(substitute,instantiation,ts);
    for(; ts != null && es != null; ts = ts->tl, es = es->tl) {
      tcExp(te,null,es->hd);
      if(!coerce_arg(te,es->hd,ts->hd))
	terr(s0->loc, xprintf("fallthru argument has type %s "
			      "but pattern variable has type %s",
			      typ2string(es->hd->topt->v), typ2string(ts->hd)));
    }
    if (es != null)
      terr(s0->loc, "too many arguments to explicit fallthru");
    if (ts != null)
      terr(s0->loc, "too few arguments to explicit fallthru");
    return;

  // Note: NewControlFlow requires we add the label with s, not s0 !!
  //       (That way, we can use switch_clause bodies and stmtExp stmt's
  //       as enclosers and get the right behavior!!!)
    // FIX: should use l for the region name.
  case Label_s(l,s): tcStmt(add_label(te,l,s),s,true); return;

  case Switch_s(e,scs0):
    tcExp(te,null,e);
    let t = e->topt->v;
    // type-check the cases in reverse order, a fallthru therefore transfers
    // control to the case most recently type-checked. For the last case,
    // fallthru is not allowed.
    te = set_in_switch(te);
    te = clear_fallthru(te);
    for (_ scs = List::rev(scs0); scs != null; scs = scs->tl) {
      let p       = scs->hd->pattern;
      let pat_typ = tcPat(te,p,null); // FIX: can pass region if e is an lvalue
      let &$(new_tvs,x) = pat_typ;
      if (!unify(p->topt->v,t))
	terr(scs->hd->loc,xprintf("switch on type %s, but case expects type %s",
				  typ2string(t), typ2string(p->topt->v)));
      else
	check_pat_regions(te,p);
      scs->hd->pat_vars = &Opt(x);
      // type-checking the body will type-check any explicit fallthrus.
      pattern_synth(scs->hd->loc, te, new_tvs, x, scs->hd->body,
		    scs->hd->where_clause, true);
      te = set_fallthru(te, pat_typ, scs->hd);
    }
    check_switch_exhaustive(s0->loc,scs0);
    return;

  case TryCatch_s(s,scs0):
    // This is a KLUDGE so that we have a next statement that is not
    // outside of the handler, eg. for try while(b) break; catch ...
    // We have to do this b/c the translation to C uses the destinations
    // to pop handlers.
    s->r = seq_stmt(new_stmt(s->r,s->loc), skip_stmt(s->loc), s->loc)->r;

    // must set encloser b/c cannot goto into a handler.
    tcStmt(set_encloser(enter_try(te),s0),s,true);

    // similar to Switch_s -- check the patterns in reverse order:
    te = set_in_switch(te);
    te = clear_fallthru(te);
    for (let scs = List::rev(scs0); scs != null; scs = scs->tl) {
      let p       = scs->hd->pattern;
      let pat_typ = tcPat(te,p,null);
      let &$(new_tvs,x) = pat_typ;
      if (!unify(p->topt->v,exn_typ))
        terr(scs->hd->loc, xprintf("expected xenum exn but found %s",
				   typ2string(p->topt->v)));
      else
	check_pat_regions(te,p);
      scs->hd->pat_vars = &Opt(x);
      // type-checking the body will type-check any explicit fallthrus
      pattern_synth(scs->hd->loc, te, new_tvs, x, scs->hd->body,
		    scs->hd->where_clause, true);
      te = set_fallthru(te, pat_typ, scs->hd);
    }
    check_catch_overlap(s0->loc,scs0);
    return;

  case Decl_s(d,s):
    string unimp_msg_part;

    if(new_block)
      te = Tcenv::new_block(te);

    switch (d->r) {
    case Var_d(vd):
      let &Vardecl(sc,&$(nsl,x),tq,t,initializer,_,*rgn_ptr,atts) = vd;
      let curr_bl = Tcenv::curr_rgn(te);
      *rgn_ptr = &Opt(curr_bl); // side effect
      switch (nsl) {
      case Loc_n: break;
      case Rel_n(null):
        (*vd->name)[0] = Loc_n;
        break;
      case Abs_n(y): throw impos("tcstmt: Abs_n declaration");
      default:
        terr(d->loc, "cannot declare a qualified local variable");
        break;
      }
      check_type(s0->loc,te,lookup_type_vars(te),MemKind,t);
      if (initializer != null) {
	// special case -- fill in the size for t[] arrays
	switch (compress(t)) {
	case ArrayType(telt,tq,sz):
	  if (Evexp::eval_const_uint_exp(sz) == 0) {
	    switch (initializer->r) {
	    case Const_e(String_c(_,s)):
	      t = vd->type = ArrayType(telt,tq,uint_exp(s.size,null)); break;
	    case UnresolvedMem_e(_,es): fallthru(es);
	    case Array_e(_,es):
	      t = vd->type = ArrayType(telt,tq,uint_exp(List::length(es),null));
	      break;
	    default: break;
	    }
	  }
	  break;
	default: break;
	}
        tcExpInitializer(te,&t,(exp)initializer);
        if (!coerce_assign(te,(exp)initializer,t))
	  terr(d->loc,
	       xprintf("%s declared with type %s, initialized with type %s",
		       *x, typ2string(t),
		       typ2string(initializer->topt->v)));
      }
      tcStmt(set_encloser(add_local_var(s->loc,te,vd),s0),s,false);
      return;

    case Let_d(p,*vds,*topt_ref,e,*exhaust):
      let topt = *topt_ref;
      tcExpInitializer(te,null,e);
      *topt_ref = e->topt; // side effect
      let &$(new_tvs,x) = tcPat(te,p,null);//FIX: can pass region if e an lvalue
      *vds = &Opt(x);
      // FIX: if let-declarations were of the form "let pat = e in S" then
      // we could allow any type variables within e to be used within S.
      if (new_tvs != null)
	terr(d->loc,"can't introduce type variables in let-clause");
      if (topt != null && !unify(p->topt->v,topt->v))
        terr(d->loc,"type of pattern does not match declared type");
      if (!unify(p->topt->v,e->topt->v))
	terr(d->loc,xprintf("pattern type %s does not match definition type %s",
			    typ2string(p->topt->v),typ2string(e->topt->v)));
      else
	check_pat_regions(te,p);
      *exhaust = check_let_pat_exhaustive(p->loc,p); // side effect
      pattern_synth(s0->loc, te, null, x, s, null, false);
      return;

    case Namespace_d(n,tds): unimp_msg_part = "namespace"; break;
    case Using_d(q,tds):     unimp_msg_part = "using";     break; //FIX: allow
    case Fn_d(_):            unimp_msg_part = "function";  break;
    case Struct_d(_):        unimp_msg_part = "struct";    break;
    case Union_d(_):         unimp_msg_part = "union";     break;
    case Enum_d(_):          unimp_msg_part = "enum";      break;
    case Xenum_d(_):         unimp_msg_part = "xenum";     break;
    case Typedef_d(_):       unimp_msg_part = "typedef";   break;
    case ExternC_d(_):       unimp_msg_part = "extern \"C\""; break;
    }
    throw impos(xprintf("tcStmt: nested %s declarations unimplemented",
			unimp_msg_part));

  case Cut_s(s):    throw impos("tcStmt: cut is not implemented");    // FIX
  case Splice_s(s): throw impos("tcStmt: splice is not implemented"); // FIX
  }
}
