/* Type checking for statements */

/* Todo:
   try/catch, cut/splice, fallthru, label/goto
 */

#include "core.h"
#include "string.h"
#include "list.h"
#include "dict.h"
#include "set.h"
#include "position.h"
#include "absyn.h"
#include "absynpp.h"
#include "tcutil.h"
#include "tcenv.h"
#include "tcexp.h"
#include "tcpat.h"
#include "tcstmt.h"

namespace Tcstmt;

using Core;
using List;
using Set;
using Position;
using Absyn;
using Absynpp;
using Tcutil;
using Tcenv;
using Tcexp;
using Tcpat;

static tenv add_local_vars(segment loc, tenv te,
                           list<vardecl> x, bool init) {
  tenv te2 = te;
  for (; x != null; x = x->tl) {
    let &Vardecl(_,&$(_,v),tq,t,_,_) = x->hd;
    te2 = add_local_var(loc,te2,v,tq,t,init);
  }
  return te2;
}

static synth remove_local_vars(tenv te, list<vardecl> x, synth ssyn) {
  Set::Set<var> vs = Set::empty(String::strcmp);
  for (; x != null; x = x->tl)
    vs = Set::insert(vs,x->hd->name[1]);
  Set::Set<var> shadowed = Set::intersect(get_unassigned(te),vs);
  return add_var_synth(shadowed,ssyn);
}

static synth decl_synth(tenv te, list<vardecl> x, bool init, stmt s) {
  tenv  te2  = add_local_vars(s->loc,te,x,init);
  synth ssyn = tcStmt(te2,s);
  return remove_local_vars(te,x,ssyn);
}

synth tcStmt(tenv te, stmt s0) {
  switch (s0->r) {

  case Skip_s: return skip_synth(te);

  case Exp_s(e): return tcExp(te,null,e);

  case Seq_s(s1,s2):
    let te1 = clear_fallthru(te);
    let ssyn1 = tcStmt(te1,s1);
    // JGM: try to treat sequences as "tail-calls" to avoid a deep stack.
    bool still_working = true;
    while (still_working) {
      switch (s2->r) {
      case Seq_s(s3,s4):
	ssyn1 = seq_synth(ssyn1,tcStmt(layer_synth(te1,ssyn1),s3));
	s2 = s4;
	continue;
      default:
        still_working = false; // get out of loop
        break;
      }
    }
    return seq_synth(ssyn1,tcStmt(layer_synth(te,ssyn1),s2));

  case Return_s(eopt):
    te = clear_fallthru(te);
    typ t = return_typ(te);
    if (eopt == null) {
      switch (t) {
      case VoidType:
        break; // skip
      default:
        terr(s0->loc,xprintf("must return a value of type %s",typ2string(t)));
        break;
      }
    } else {
      exp e = eopt->v;
      let esyn = tcExp(te,&Opt(t),e);
      if (!coerce_use(te,e,t))
	terr(s0->loc, xprintf("returns value of type %s but requires %s",
			      typ2string(synth_typ(esyn)), typ2string(t)));
      switch (compress(t)) {
      case VoidType: terr(s0->loc,"attempt to return void expression"); break;
      default: break; // skip
      }
    }
    return empty_synth(te);

  case IfThenElse_s(e,s1,s2):
    te = clear_fallthru(te);
    let esyn = tcExp(te,&Opt(bool_t),e);
    if (!coerce_to_bool(te,e))
      terr(e->loc,xprintf("test of if statement has type %s instead of bool",
                          typ2string(synth_typ(esyn))));
    let $(true_te,false_te) = bool_layer_synth(te,esyn);
    let ssyn1 = tcStmt(true_te, s1);
    let ssyn2 = tcStmt(false_te,s2);
    return join_synth(seq_synth(esyn,ssyn1),seq_synth(esyn,ssyn2));

  case While_s(e,s):
    let te2  = clear_fallthru(te);
    let esyn = tcExp(te2,&Opt(bool_t),e);
    if (!coerce_to_bool(te2,e))
      terr(e->loc,xprintf("test of while loop has type %s instead of bool",
                          typ2string(synth_typ(esyn))));
    let $(true_te,_) = bool_layer_synth(te2,esyn);
    let ssyn = tcStmt(set_in_loop(true_te),s);
    return loop_synth(esyn,ssyn);

  case Break_s:
    if (is_ok_break(te))
      return forward_jump_synth(te);
    else {
      terr(s0->loc,"break outside of loop/switch");
      return skip_synth(te);
    }

  case Continue_s:
    if (!is_ok_continue(te))
      terr(s0->loc,"continue outside of loop");
    return empty_synth(te);

  case Goto_s(_):
    warn(s0->loc, "goto may be unsafe!!!");
    return forward_jump_synth(te);

  case For_s(e1,e2,e3,s):
    te = clear_fallthru(te);
    let esyn1 = tcExp(te,null,e1);
    te = layer_synth(te,esyn1);
    let esyn2 = tcExp(te,&Opt(bool_t),e2);
    let $(true_te,_) = bool_layer_synth(te,esyn2);
    let te_body = set_in_loop(true_te);
    if (!coerce_to_bool(te,e2))
      terr(e2->loc,xprintf("test of for loop has type %s instead of bool",
			   typ2string(synth_typ(esyn2))));
    let ssyn = tcStmt(te_body,s);
    te_body = layer_synth(te_body,ssyn);
    let esyn3 = seq_synth(ssyn,tcExp(te_body,null,e3));
    return seq_synth(esyn1,loop_synth(esyn2,esyn3));

  case Switch_s(e,scs0):
    te = clear_fallthru(te);
    let esyn = tcExp(te,null,e);
    let t    = synth_typ(esyn);
    te = layer_synth(te,esyn);
    synth swsyn = (scs0 == null) ? esyn : empty_synth(te);
    for (let scs = scs0; scs != null; scs = scs->tl) {
      let p = scs->hd->pattern;
      let &$(new_tvs,x) = tcPat(te,p);
      if (!unify(p->topt->v,t))
	terr(scs->hd->loc,xprintf("switch on type %s, but case expects type %s",
				  typ2string(t), typ2string(p->topt->v)));
      tenv te2 = add_local_vars(scs->hd->loc,
				add_type_vars(scs->hd->loc,te,new_tvs),
				x,true);
      let where_opt = scs->hd->where_clause;
      if (where_opt != null) {
	let esyn1 = tcExp(te2,&Opt(bool_t),where_opt->v);
	if (!coerce_to_bool(te,where_opt->v))
	  terr(where_opt->v->loc,
	       xprintf("where clause has type %s instead of bool",
		       typ2string(synth_typ(esyn1))));
	// could only have the "true" part of esyn propagated
	te2 = layer_synth(te2,esyn1);
      }
      te2 = set_in_switch(te2);
      let s    = scs->hd->body;
      let ssyn = remove_local_vars(te,x,tcStmt(te2,s));
      if (synth_may_implicit_fallthru(ssyn))
	terr(s->loc,
	     "switch case must not implicitly fall through to next case");
      if (!synth_may_explicit_fallthru(ssyn)) {
	swsyn = join_synth(swsyn,ssyn);
      } else {
	// we need to record only the forward jump info in swsyn
	swsyn = join_synth(swsyn,drop_fallthru_synth(ssyn));

	// check that the bound type variables and pattern variables are
	// the same in the next pattern (if any).
	if (scs->tl == null) terr(s->loc,"last case of switch does a fallthru");
	else {
	  let p2 = scs->tl->hd->pattern;
	  let &$(new_tvs2,x2) = tcPat(te,p);
	  for (; new_tvs != null && new_tvs2 != null; new_tvs = new_tvs->tl,
		 new_tvs2 = new_tvs2->tl) {
	    if (String::strcmp(new_tvs->hd,new_tvs2->hd) != 0) {
	      terr(p2->loc,"case fallthru: bound type variable mismatch");
	      break;
	    }
	  }
	  if (new_tvs != null || new_tvs2 != null)
	    terr(p2->loc,"case fallthru: bound type variable mismatch");
	  for (; x != null && x2 != null; x = x->tl, x2 = x2->tl) {
	    let &Vardecl(_,&$(_,v1),q1,t1,_,_) = x->hd;
	    let &Vardecl(_,&$(_,v2),q2,t2,_,_) = x2->hd;
	    if (String::strcmp(v1,v2) != 0 
		|| !equal_tqual(q1,q2)
		|| unify(t1,t2)) {
	      terr(p2->loc,"case fallthru: bound pattern variable mismatch");
	      break;
	    }
	  }
	  if (x != null || x2 != null)
	    terr(p2->loc,"case fallthru: bound pattern variable mismatch");
	}
      }
    }
    check_switch_exhaustive(s0->loc,scs0);
    return seq_synth(esyn,switch_bottom(swsyn));

  case TryCatch_s(s,scs0):
    let te1 = clear_fallthru(te);
    let ssyn1 = tcStmt(te1,s);

    synth swsyn = empty_synth(te);

    for (let scs = scs0; scs != null; scs = scs->tl) {
      let p = scs->hd->pattern;
      let &$(new_tvs,x) = tcPat(te1,p);

      if (!unify(p->topt->v,exn_t))
        terr(scs->hd->loc, xprintf("expected xenum exn but found %s",
				   typ2string(p->topt->v)));

      tenv te2 = add_type_vars(scs->hd->loc,te1,new_tvs);
      let where_opt = scs->hd->where_clause;
      if (where_opt != null) {
	let esyn = tcExp(te2,&Opt(bool_t),where_opt->v);
	if (!coerce_to_bool(te1,where_opt->v))
	  terr(where_opt->v->loc,
	       xprintf("where clause has type %s instead of bool",
		       typ2string(synth_typ(esyn))));
	// could only have the "true" part of esyn propagated
	te2 = layer_synth(te2,esyn);
      }
      te2 = set_in_switch(te2);

      let s1 = scs->hd->body;
      let ssyn = decl_synth(te2,x,true,s1);
      if (synth_may_implicit_fallthru(ssyn))
	terr(s1->loc,"catch case must not implicitly fall through to next case");
      if (!synth_may_explicit_fallthru(ssyn)) {
	swsyn = join_synth(swsyn,ssyn);
      } else {
	swsyn = join_synth(swsyn,drop_fallthru_synth(ssyn));
	if (scs->tl == null) terr(s1->loc,"last case of catch does a fallthru");
	else {
	  let p2 = scs->tl->hd->pattern;
	  let &$(new_tvs2,x2) = tcPat(te1,p);
	  for (; new_tvs != null && new_tvs2 != null; new_tvs = new_tvs->tl,
		 new_tvs2 = new_tvs2->tl) 
	    if (String::strcmp(new_tvs->hd,new_tvs2->hd) != 0) {
	      terr(p2->loc,"case fallthru: bound type variable mismatch");
	      break;
	    }
	  if (new_tvs != null || new_tvs2 != null)
	    terr(p2->loc,"case fallthru: bound type variable mismatch");
	  for (; x != null && x2 != null; x = x->tl, x2 = x2->tl) {
	    let &Vardecl(_,&$(_,v1),q1,t1,_,_) = x->hd;
	    let &Vardecl(_,&$(_,v2),q2,t2,_,_) = x2->hd;
	    if (String::strcmp(v1,v2) != 0 
		|| !equal_tqual(q1,q2) 
		|| unify(t1,t2)) {
	      terr(p2->loc,"case fallthru: bound pattern variable mismatch");
	      break;
	    }
	  }
	  if (x != null || x2 != null)
	    terr(p2->loc,"case fallthru: bound pattern variable mismatch");
	}
      }
    }
    check_catch_overlap(s0->loc,scs0);
    return join_synth(ssyn1,switch_bottom(swsyn));

/*
  case TryHandle(s1,x,s2):
    let ssyn1 = tcStmt(te,s1);
    let ssyn2 = decl_synth(te,&cons(&$(x,ExnType),null),true,s2);
    return join_synth(ssyn1,ssyn2,false);

  case TryCatchFinally(q):
    // to simplify our lives for now, we just translate this into a
    // try/handle expression -- this means we can't deal with finally
    // clauses yet.
    if (q[3] != null) terr(s0->loc,"finally clauses not supported yet -- sorry.");
    var exn_var = "_";
    exp exn_var_exp = &Exp(null,Var_e(exn_var),null,s0->loc);
    stmt sw = &Stmt(^r->ExnSwitch(&$(exn_var_exp,q[1],q[2])),s0->loc);
    r rs = ^r->TryHandle(&$(q[0],exn_var,sw));
    s0->r = rs;
    return tcStmt(te,s0);

  case With(q): return tcWith(te,s0->loc,s0,q);
*/

  case Fallthru_s:
    if (!is_ok_fallthru(te)) {
      terr(s0->loc,"bad explicit fallthru");
      return skip_synth(te);
    } else
      return fallthru_synth(te);

  case Decl_s(d,s):
    switch (d->r) {
    case Fn_d(fd):
      return impos("tcStmt: nested function declarations are not implemented");
    case Struct_d(sd):
      return impos("tcStmt: nested struct declarations are not implemented");
    case Union_d:
      return impos("tcStmt: nested union declarations are not implemented");
    case Enum_d(ed):
      return impos("tcStmt: nested enum declarations are not implemented");
    case Xenum_d(xed):
      return impos("tcStmt: nested xenum declarations are not implemented");
    case Typedef_d(tdd):
      return impos("tcStmt: nested typedef declarations are not implemented");
    case Var_d(vd):
      let &Vardecl(sc,&$(nsl,x),tq,t,initializer,_) = vd;
      if (nsl != null)
        terr(d->loc, "local variables cannot be qualified");
      check_valid_type(s0->loc,te,lookup_type_vars(te),t);
      bool init = false;
      if (initializer != null) {
        init = true;
        let esyn = tcExp(te,&Opt(t),initializer->v);
        if (!coerce_assign(te,initializer->v,t))
            terr(d->loc,
                 xprintf("%s declared with type %s, initialized with type %s",
                         x, typ2string(t), typ2string(synth_typ(esyn))));
        te = set_unassigned(te,maybe_unassigned(esyn));
      }
      return decl_synth(te,&cons(vd,null),init,s);
    case Let_d(p,*topt_ref,e,*exhaust):
      let topt = *topt_ref;
      let esyn = tcExp(te,null,e);
      *topt_ref = e->topt; // side effect
      let &$(new_tvars,x) = tcPat(te,p);
      // FIX: if let-declarations were of the form "let pat = e in S" then
      // we could allow any type variables within e to be used within S.
      if (new_tvars != null)
	terr(d->loc,"can't introduce type variables in let-clause");
      if (topt != null && !unify(p->topt->v,topt->v))
        terr(d->loc,
             "type of pattern does not match declared type");
      if (!unify(p->topt->v,synth_typ(esyn)))
	terr(d->loc,
	     xprintf("pattern type %s does not match definition type %s",
		     typ2string(p->topt->v),typ2string(synth_typ(esyn))));
      if(check_let_pat_exhaustive(s0->loc,p))
	*exhaust = true; // side effect
      return decl_synth(te,x,true,s);
    case Namespace_d(n,tds):
      terr(d->loc,"namespace is allowed at top level only");
      return skip_synth(te);
    case Using_d(q,tds):
      // FIX: we should allow "using" in limited scope
      terr(d->loc,"using is allowed at top level only");
      return skip_synth(te);
    }

  case Label_s(x,s):
    // FIX:  interaction with goto and unassigned variables
    // deviates from Java as though immediate break
    tcStmt(add_label(te,x),s);
    return skip_synth(te);

  case Cut_s(s):
    // FIX: cut
    return impos("tcStmt: cut is not implemented");
/*
    switch (te->le) {
    case Frame(p):
      // be sure to prevent break/continue across cut
      tcStmt(set_ok_break_continue(^tenv(te->ge,^frames->Hidden(p)),false),
             s);
      // very conservative in presence of Cyclone right now
      // BUG: splice might assign to variables (see comments in poptypeexp)
      return base_ssyn(te);
    case Hidden(_):
      terr(s0->loc,"cannot cut while codegen is in cut");
      return jump_synth_g->v;
    case Outermost(_):
      terr(s0->loc,"cut can only be used within codegen");
      return jump_synth_g->v;
    }
*/

  case Splice_s(s):
    // FIX: splice
    return impos("tcStmt: splice is not implemented");
/*
    switch (te->le) {
    case Hidden(p):
      // be sure to prevent break/continue across splice
      tcStmt(set_ok_break_continue(^tenv(te->ge,^frames->Frame(p)),false),
             s);
      // very conservative in presence of Cyclone right now
      // BUG: splice might assign to variables (see comments in poptypeexp)
      return base_ssyn(te);
    case Frame(_):
      terr(s0->loc,"cannot splice while already in codegen");
      return jump_synth_g->v;
    case Outermost(_):
      terr(s0->loc,"splice can only be used within cut");
      return jump_synth_g->v;
    }
*/

  case Do_s(s,e):
    te = clear_fallthru(te);
    let ssyn = tcStmt(set_in_loop(te),s);
    let te2  = layer_synth(te,ssyn);
    let esyn = tcExp(te2,&Opt(bool_t),e);
    if (!coerce_to_bool(te,e))
      terr(e->loc,xprintf("test of do loop has type %s instead of bool",
			  typ2string(synth_typ(esyn))));
    return loop_synth(esyn,ssyn);
  }

  throw Unreachable("tcStmt");
}
