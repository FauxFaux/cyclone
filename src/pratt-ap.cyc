/* Copyright (C) 2003 Greg Morrisett
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. 



   This file implements Pratt's algorithm for determining whether
   a set of constraints over integer-valued variables is satisfiable.
   In particular, the algorithm can handle constraints of the form
   x - y <= c where x and y are variables and c is a constant.  
   Note that you can encode all kinds of other constraints into
   this form (e.g., x = y + c, x > y, x < y, etc.)  Note also that
   you can treat x <= c using a constraint of the form x - Z <= c
   where Z is some distinguished variable used to represent 0.  In
   turn, this allows us to encode more constraints (e.g., x = c,
   x < c, etc.)

   The algorithm works by essentially treating x - y <= c as a
   directed, weighted edge in a graph of variable nodes.  In
   particular, we represent this as x ---c---> y.  When adding new
   constraint to the graph, the resulting set of constraints is
   satisfiable iff there is no negative-weight cycle between nodes.
   To track this incrementally, we calculate the shortest path between
   each node, which means that when we add a new constraint, we're
   doing O(n^2) work.  However, we expect the number of variables to
   be small, and the number of constraints to be relatively sparse.
   (At least we hope so...)

   We also provide functionality for "joining" two graphs.  In
   particular, join_graph(G1,G2) yields a new graph G such that (G1 or
   G2) implies the constraints in G.  A constraint x--c-->y is in G
   iff x--c1-->y is in G1 and x--c2-->y is in G2 and c = max(c1,c2).

   Note that, according to this order, we have infinite ascending
   chains (well, they're really finite but of length 2^wordsize).  To
   support getting a fixed-point, we also provide join_eq_graph(G1,G2)
   which has the property that it only contains an edge x--c-->y if
   both G1 and G2 contain the same edge.   Note that join_graph(G1,G2)
   always implies join_eq_graph(G1,G2).

   So, the right way to use this in a flow analysis is to use
   join_flow for conditionals, and a combination of join_flow
   and join_eq_flow on the loop edges.  For now, I'm not using
   this stuff, so it's all commented out.
*/
#include "unify.h"
#include "tcutil.h"
#include "cf_flowinfo.h"
#include <assert.h>
#include <ap.h>
#include "absynpp.h"
#include "pratt-ap.h"
using Core;
using List;
namespace Pratt;
// #define PRATT_DEBUG

#define INFINITE NULL

// nodes of the graph are either variables, the distinguished constant zero,
// or the number of elements of a variable.
@tagged union Node {
  int       NZero;  // int unused
  Absyn::vardecl_t NVar;
  Absyn::vardecl_t NNumelts;
  Absyn::type_t    NType;
  unsigned int     NParam;
  unsigned int     NParamNumelts;
  int             NReturn;
};
union Node zero_node = {.NZero = 0};
node_t NVar(Absyn::vardecl_t vd) { return Node{.NVar = vd}; }
node_t NNumelts(Absyn::vardecl_t vd) { return Node{.NNumelts = vd}; }
node_t NType(Absyn::type_t t) { return Node{.NType = t}; }
node_t NParam(unsigned i) { return Node{.NParam = i}; }
node_t NParamNumelts(unsigned i) { return Node{.NParamNumelts = i}; }
node_t NReturn() { return Node{.NReturn = 0}; }

static int cmp_node(node_t n1, node_t n2) {
  switch $(n1,n2) {
  case $({.NZero = _},{.NZero = _}): return 0;
  case $({.NZero = _},_)           : return -1;
  case $(_,{.NZero = _})           : return 1;
  case $({.NReturn = _}, {.NReturn = _}): return 0;
  case $({.NReturn = _}, _): return -1;
  case $(_, {.NReturn = _}): return 1;
  case $({.NVar = x},{.NVar = y})  : return ((int)x - (int)y);
  case $({.NVar = _},_)            : return -1;
  case $(_,{.NVar = _})           : return 1;
  case $({.NNumelts = x},{.NNumelts = y}): return ((int)x - (int)y);
  case $({.NNumelts = x},_): return -1;
  case $(_,{.NNumelts = y}): return 1;
  case $({.NType = x},{.NType = y}): 
    if (Unify::unify(x,y)) return 0;
    return Tcutil::typecmp(x,y);
  case $({.NType = _},_): return -1;
  case $(_,{.NType = _}): return 1;
  case $({.NParam = i}, {.NParam = j}): return ((int)i - (int)j);
  case $({.NParam = i}, _): return -1;
  case $(_, {.NParam = j}): return 1;
  case $({.NParamNumelts = i}, {.NParamNumelts = j}): return ((int)i - (int)j);
  }
}

string_t node2string(node_t n) {
  switch (n) {
  case {.NZero = _}: return "0";
  case {.NVar = x} : return Absynpp::qvar2string(x->name);
  case {.NType = x} : return Absynpp::typ2string(x);
  case {.NNumelts = x}: return aprintf("numelts(%s)",Absynpp::qvar2string(x->name));
  case {.NParam = i}: return aprintf("param(%d)",i);
  case {.NParamNumelts = i}: return aprintf("numelts(param(%d))",i);
  case {.NReturn = _}: return aprintf("return_value");
  } 
}

// Currently, we represent the distance matrix as a sparse list of
// edges.  We never represent the edge x ---> x, since it's value
// is always 0.  If there is no entry for x ---> y, then the distance is
// infinite.  
struct Edge {
  node_t x;        // represent an edge between x and y with weight value.
  node_t y;
  AP_T value;
};
typedef struct Edge @edge_t;

struct Graph {
  list_t<node_t@> nodes;   // set of nodes in the graph
  list_t<edge_t> edges;    // set of edges in the graph
};

// create a new graph -- the distinguished node zero is used to
// represent zero and is always present in the graph.
graph_t@ empty_graph() {
  let nodes = new List{&zero_node,NULL};
  return new Graph{nodes,NULL};
}


static list_t<edge_t> copy_edges(list_t<edge_t> ds) {
  let res = NULL;
  for (; ds != NULL; ds = ds->tl) {
    let e = ds->hd;
    res = new List(new Edge(e->x,e->y,e->value),res);
  }
  return imp_rev(res);
}

graph_t@ copy_graph(graph_t@ G) {
  let &Graph{nodes,edges} = G;
  return new Graph{nodes,copy_edges(edges)};
}

// lookup distance between x and y in G.  Returns INFINITE (== NULL)
// or a pointer to an integer representing the distance.  
static AP_T* lookup_distance(graph_t@ G, node_t x, node_t y) {
  // x is always at distance 0 from itself
  if (cmp_node(x,y) == 0) return &AP_zero; 
  for (let ds = G->edges; ds != NULL; ds = ds->tl) {
    let e = ds->hd;
    if (cmp_node(e->x,x) == 0 && cmp_node(e->y,y) == 0)
      return &e->value;
  }
  return INFINITE;
}

// (possibly) destructively set the distance from x to y to be d.  
// Assumes x and y are distinct nodes and that both have already
// been added to the graph.
static void set_distance(graph_t@ G, node_t x, node_t y, AP_T d) {
  AP_T *r = lookup_distance(G,x,y);
  if (r == INFINITE) {
    G->edges = new List(new Edge(x,y,d),G->edges);
  } else {
    *r = d;
  }
}

void print_graph(graph_t *G) {
  if (G == NULL) {
    fprintf(stderr,"<inconsistent>");
    return;
  }
  let Graph(nodes,ds) = *G;
  for(; ds != NULL; ds=ds->tl) {
    let e = ds->hd;
    fprintf(stderr,"%s - %s <= %s",
            node2string(e->x),node2string(e->y),AP_tostr(e->value, 10));
    if (ds->tl != NULL) fprintf(stderr,", ");
  }
}

// add x to the graph if not already present.
static void add_node(graph_t@G, node_t x) {
  for (let vs = G->nodes; vs != NULL; vs = vs->tl) {
    node_t y = *vs->hd;
    if (cmp_node(x,y) == 0) return;
  }
  //printf("adding node "); print_node(x); printf("\n");
  G->nodes = new List{new x,G->nodes};
}

// add edge i ---a---> j to the graph G and return the new graph
// as the result unless there's a contradiction (i.e., adding the
// edge will result in a negative-weight cycle.)  
graph_t*`r add_edge(graph_t @`r G, node_t i, node_t j, AP_T a) 
{
#ifdef PRATT_DEBUG
  fprintf(stderr,"adding edge %s - %s <= %s to graph ",node2string(i),node2string(j),AP_tostr(a, 10));
  print_graph(G);
  fprintf(stderr,"\n");
#endif
  add_node(G,i);
  add_node(G,j);
  // lookup distance from i to j
  AP_T *dist = lookup_distance(G,i,j);
  // if old distances is less than a, no change
  if (dist != NULL && AP_cmp (*dist, a) < 1) {
#ifdef PRATT_DEBUG
    fprintf(stderr,"old distance was smaller (%s)\n",AP_tostr(*dist, 10));
#endif
    return G;
  }
  // check for a negative-weighted path which is an inconsistency
  dist = lookup_distance(G,j,i);
  if (dist != INFINITE && AP_cmp (AP_add (*dist, a), AP_zero) < 0) {
#ifdef PRATT_DEBUG
    fprintf(stderr,"negative weight path!\n");
#endif
    return NULL;
  }
  // update distances
  for (let ks = G->nodes; ks != NULL; ks=ks->tl) {
    let k = *ks->hd;
    let dist_ki = lookup_distance(G,k,i);
    if (dist_ki == INFINITE) continue;
    for (let ls = G->nodes; ls != NULL; ls=ls->tl) {
      let l = *ls->hd;
      let dist_jl = lookup_distance(G,j,l);
      if (dist_jl != INFINITE) {
        let dist_kl = lookup_distance(G,k,l);
        // FIX -- worry about wraparound...
        let d = AP_add (*dist_ki, AP_add (a, *dist_jl));
#ifdef PRATT_DEBUG
        fprintf(stderr,"  updating edge[%s,%s] by looking at path through %s:",node2string(k),node2string(l),node2string(i));
#endif
        if (dist_kl == INFINITE) {
#ifdef PRATT_DEBUG
          fprintf(stderr,"distance was infinite\n");
#endif
          G->edges = new List(new Edge(k,l,d),G->edges);
        } else if (AP_cmp (*dist_kl, d) > 0) {
#ifdef PRATT_DEBUG
          fprintf(stderr,"old dist %s, new %s\n",AP_tostr(*dist_kl, 10),AP_tostr(d, 10));
#endif
          *dist_kl = d;
        }
      }
    }
  }
  return G;
}

///////////////////////////////////////////////////////////////////////
// None of the code below is currently used... 
///////////////////////////////////////////////////////////////////////
/*
// Given two graphs G1 and G2, compute a new graph G such that:
//     if x--c1-->y in G1 and x--c2-->y in G2, then add
//     x--max(c1,c2)-->y to G.  
// Justification: each graph Gi is a conjunction of predicates x-y<=ci which
// are assumed to be true.  We're trying to produce a predicate G such that
// G1 or G2 implies G and we'd like G to be as strong as possible (though
// this is not generally doable, since the constraints aren't convex in the
// integers?)  
// So for each constraint x-y<=c1 in G1, we would like to see if G2
// implies that constraint.  This holds if x-y<=c2 is in G2 and c2 is
// less than or equal to c1.  In other words, we're picking the greatest
// upper bound on x-y.  
static graph_opt_t join_graphs(graph_opt_t G1, graph_opt_t G2) {
  if (G1 == NULL) return G2;
  if (G2 == NULL) return G1;
  graph_t@ G = empty_graph();
  graph_t temp = *G;
  for (let es1 = G1->edges; es1 != NULL; es1 = es1->tl) {
    let &Edge{x,y,value1} = es1->hd;
    let d2 = lookup_distance(G2,x,y);
    if (d2 != INFINITE) {
      let value2 = *d2;
      let value = (AP_cmp (value1, value2) > -1) ? value1 : value2;
      assert(add_edge(G,*G,x,y,value));
    }
  }
  return G;
}

// Same as above, but we only add an edge if the weights are the same.
// So, we're setting x - y <= infinity in the result graph when their
// distances in G1 and G2 aren't the same.  
// 
// Note:  join_eq should give us fixed-points, whereas join may not due
// to infinite ascending chains (well, actually, you may just go up until
// you wrap around...) The strategy below tries to join the two graphs
// and then join_eq that with the first original graph.  The idea is
// that for a loop, we might take the original flow and join it with
// the inflow, and then join_eq that result with the loop's original flow.
// That should give us a subset of the relations that are invariant for the
// loop.  
//
// To see the problem, consider a loop where i = 0 to start, and
// then each time around the loop, we increment i:
//    for (int i = 0; i < n; i++) { ... }
// Before entering the loop, we have i - z <= 0 & z - i <= 0 as 
// constraints.  After one iteration, we'll have i - z <= 1 & z - i <= -1.  
// If we join these, then we get i - z <= 1 & z - i <= 0.  (Note that
// if we join_eq'd them, then we'd get no relation!)  If we 
// go around the loop again, we'll have i - z <= 2 & z - i <= -2.
// After joining, we get i - z <= 2 & z - i <= 0.  At this point,
// it's clear that the upper bound on i - z will (have to) keep growing.  
// So, by doing a join_eq, we pull out only z - i <= 0 which is the
// invariant for the loop.  
static graph_opt_t join_eq_graphs(graph_opt_t G1, graph_opt_t G2) {
  if (G1 == NULL) return G2;
  if (G2 == NULL) return G1;
  graph_t@ G = empty_graph();
  graph_t temp = *G;
  for (let es1 = G1->edges; es1 != NULL; es1 = es1->tl) {
    let &Edge{x,y,value} = es1->hd;
    let d2 = lookup_distance(G2,x,y);
    if (d2 != INFINITE && AP_cmp (*d2, value) == 0) {
      assert(add_edge(G,*G,x,y,value));
    }
  }
  return G;
}
*/
