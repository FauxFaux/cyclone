#include <core.h>
#include "absyn.h"
#include "bansheeif.h"

namespace BansheeIf {
  datatype Constraint{ IgnoreConstraint };
  datatype Constraint.IgnoreConstraint Ignore_constraint_val = IgnoreConstraint;
  bool banshee_init(){ return false;}
  void add_constant(string_t name, Absyn::cvartype_t c){}
  void add_variable(Absyn::cvartype_t cvar){}

   constraint_t equality_constraint(Absyn::cvartype_t a, Absyn::cvartype_t b){ return &Ignore_constraint_val;}
  constraint_t cond_equality_constraint(Absyn::cvartype_t a, Absyn::cvartype_t b){ return &Ignore_constraint_val;}
  constraint_t inclusion_constraint(Absyn::cvartype_t a, Absyn::cvartype_t b){ return &Ignore_constraint_val;}
  constraint_t implication_constraint(constraint_t a, constraint_t b){ return &Ignore_constraint_val;}
  constraint_t and_constraint(constraint_t a, constraint_t b){ return &Ignore_constraint_val;}
  constraint_t or_constraint(constraint_t a, constraint_t b){ return &Ignore_constraint_val;}
  constraint_t not_constraint(constraint_t b){ return &Ignore_constraint_val;}
  constraint_t cmpeq_constraint(Absyn::cvartype_t t1, Absyn::cvartype_t t2){ return &Ignore_constraint_val;}
  constraint_t check_constraint(constraint_t b){ return &Ignore_constraint_val;}
  void reset_local_cvar(Absyn::type_t cvar){}
  string_t constraint2string(constraint_t b){ return "IgnoreConstraint"; }
  
  bool add_constraint(Absyn::seg_t a, constraint_t b){ return false; }
  int discharge_implications(){}
  bool resolve(Absyn::cvartype_t b){return false;}
  //resolution
  void resolve_or_default(Absyn::type_t t);
  
  void init_toplevel_cvars(List::list_t<$(Absyn::type_t, List::list_t<constraint_t,`H>)@> assoc) {}
  int  add_all_constraints(List::list_t<$(Absyn::type_t, List::list_t<constraint_t,`H>)@> assoc) {}
  void register_toplevel_cvar(Absyn::type_t cvar){}
  void persist_cvarmap(FILE @f){}

  void resolve_or_default(Absyn::type_t t){}

  constraint_t add_location(string_t<`H> loc, constraint_t c) { return c; }
}

