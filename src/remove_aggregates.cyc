/* Translate Cyclone abstract syntax to C abstract syntax.
   Copyright (C) 2004 Dan Grossman, AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

// TO DO: move over translation aggregate-removal of toplevel expressions

// The purpose of this pass is to get all work-arounds dealing with
// the infamous "GCC bug" out of toc.cyc.  It lets us to do a better
// job of generating fewer temporaries (and statement expressions)
// without cluttering up toc.cyc.  And because tuples and datatypes have
// already been converted into structs, we have a lot fewer cases.
// Do not be confused by the name: We remove aggregate _constructors_ (e.g.,
// Aggregate_e and Array_e) but not aggregate assignment
// Tempting as it might be to optimize x = Aggr(e1,...,en) to assign directly
//  to fields of x instead of creating a temporary, doing so requires
//  information we do not have.  For example, consider the source expression
//  y = $(y[1],y[0]).  We can almost always do this optimization for 
//  initializers, but pathological cases prevent it because the new decl is
//  in scope in the initializer.  (It's not for let-expressions, but alas we
//  already compiled those away.)

#include <dict.h>
#include "warn.h"
#include "toc.h" // for temp_var and Dest
#include "tcutil.h" // for is_array
#include "remove_aggregates.h"
using Core;
using List;
using Absyn;
namespace RemoveAggrs;

#define DL 0

static void massage_toplevel_aggr(exp_opt_t e) {
  if(e==NULL)
    return;
  // DO ME -- still being done in toc.cyc (may intersperse with non-toplevel?)
}

// same as aggrmember_e(e,f,DL) but when e is a deref_e(e1), replaces with
// aggrarrow_e(e1,f,DL) (copied from toc.cyc)
static exp_t member_exp(exp_t e, field_name_t f, seg_t loc) {
  switch (e->r) {
  case &Deref_e(e1): return aggrarrow_exp(e1,f,loc);
  default: return aggrmember_exp(e,f,loc);
  }
}

// treat these functionally
// Note: we are never at top-level when we use these (see above for top-level)
static enum ExpContext {
  Initializer, // e appears in form t x = e (not a subexpression thereof)
  NewDest, // e appears in form new e (not a subexpression thereof)
  AggrField,   // e is an aggr-field, array-field, or comprehension body
  Other
};
static struct Env { // a tagged union or datatype may be better
  enum ExpContext ctxt;
  exp_opt_t dest; // where to assign the result (often NULL)
};
typedef struct Env env_t;
static env_t other_env = Env(Other,NULL);

static enum ExpResult {
  WasArray,
  OtherRes
};
static struct Result {
  enum ExpResult res; 
};
typedef struct Result result_t;

static result_t remove_aggrs_exp(env_t, exp_t);
static void remove_aggrs_stmt(stmt_t s);

static void noarray_remove_aggrs_exp(env_t env, exp_t e) {
  let Result(r) = remove_aggrs_exp(env,e);
  if(r != OtherRes)
    Warn::impos2("remove_aggrs_exp -- unexpected array or comprehension: ",e);
}

static result_t remove_aggrs_exp(env_t env, exp_t e) {
  enum ExpResult res  = OtherRes; // changed in several cases
  bool did_assign = false; // changed in comprehension, array and aggr cases

  switch(e->r) {
  case &Const_e(Cnst{.String_c = s}):
    // FIX! need to deal with Wstring's too!
    if (env.ctxt == AggrField && Tcutil::is_array_type((type_t)e->topt)) {
      list_t<$(list_t<designator_t>,exp_t)@> dles = NULL;
      let n = numelts(s);
      for (unsigned i = 0; i < n; i++) {
        let c = char_exp(s[i],0);
        c->topt = char_type;
        dles = new List{new $(NULL,c), dles};
      }
      dles = List::imp_rev(dles);
      e->r = new Array_e(dles);
      return remove_aggrs_exp(env, e);
    } 
    break;
  case &Const_e(_):
  case &Sizeoftype_e(_):  
  case &Offsetof_e(_,_): 
  case &AnonEnum_e(...):
  case &Enum_e(...): 
  case &Asm_e(...):  
  case &Var_e(_): break;

  case &New_e(_,e1):
    switch(e->annot) {
    case &Toc::Dest(dest): 
      remove_aggrs_exp(Env(NewDest,dest), e1); 
      *e = *e1;
      break;
    default: Warn::impos("removeAggrs: toc did not set a new-destination");
    }
    break;

  case &Aggregate_e(tdn,_,dles,sdopt):
    did_assign = true;
    bool do_stmt_exp = (env.ctxt != AggrField && env.ctxt != NewDest);
    exp_t dest;
    qvar_t * v;
    if(do_stmt_exp) {
      v  = new Toc::temp_var();
      dest = var_exp(*v,DL);
    } else {
      v = NULL;
      dest   = (exp_t)env.dest;
      if(env.ctxt == NewDest)
	dest = deref_exp(dest,DL);
    }
    // FIX: need different code for tagged unions ??!!
    for(let dles2=dles; dles2 != NULL; dles2 = dles2->tl) {
      let &$(ds,field_exp) = dles2->hd;
      let f = designatorlist_to_fieldname(ds);
      let field_dest = member_exp(copy_exp(dest),f,DL);
      remove_aggrs_exp(Env(AggrField,field_dest),field_exp);
    }
    // note: we must preserve left-to-right since we're linearizing here
    if(dles==NULL)
      Warn::impos("zero-field aggregate");
    exp_t init_e = (*dles->hd)[1];
    for(dles=dles->tl; dles!=NULL; dles=dles->tl)
      init_e = seq_exp(init_e,(*dles->hd)[1],DL);
    if(do_stmt_exp) {
      let f = sdopt && sdopt->kind==UnionA ? unionq_type : strctq;
      e->r = stmt_exp(declare_stmt(*v,f(tdn),NULL,
				   seq_stmt(exp_stmt(init_e,DL),
					    exp_stmt(dest,DL), DL),DL),DL)->r;
    } else {
      e->r = init_e->r; // nested aggregate case, so result ignored
      e->topt = NULL;   // being careful b/c the type is wrong
    }
    break;

    // for next two cases, check the form of the lhs to be what we expect
    // (namely dereference of a var or maybe just a var too)
  case &Array_e(dles): 
    res = WasArray;
    if(dles==NULL) { // result ignored
      *e = *signed_int_exp(0,DL);
      break;
    }
    switch(env.ctxt) {
    case Other: Warn::impos("remove-aggrs: Array_e in bad position");
    default: break;
    }
    did_assign = true;
    exp_t dest = (exp_t)env.dest;
    // FIX: wrong if we ever actually support nontrivial array designators
    int i=0;
    for(let dles2=dles; dles2 != NULL; dles2=dles2->tl, ++i) {
      // ignore designators b/c type-checker ensured they are trivial
      // (only repeat the fact that we have the ith element)
      let &$(_,field_exp) = dles2->hd;
      let fielddest = subscript_exp(copy_exp(dest),signed_int_exp(i,DL),DL);
      remove_aggrs_exp(Env(AggrField,fielddest),field_exp);
    }
    exp_t init_e = (*dles->hd)[1];
    for(dles=dles->tl; dles!=NULL; dles=dles->tl)
      init_e = seq_exp(init_e,(*dles->hd)[1],DL);
    e->r = init_e->r; // result ignored
    e->topt = NULL;   // being careful b/c the type is wrong
    break;

  case &Comprehension_e(vd,bd,body,zero_term):
    // note: we now create a for-loop, even for expression initializers
    did_assign = true;
    res = WasArray;
    switch(env.ctxt) {
    case Other: Warn::impos("remove-aggrs: comprehension in bad position");
    default: break;
    }
    qvar_t max = Toc::temp_var();
    qvar_t i   = vd->name;
    exp_t ea = assign_exp(var_exp(i,DL),signed_int_exp(0,DL),DL);
    exp_t eb = lt_exp(var_exp(i,DL),var_exp(max,DL),DL);
    exp_t ec = increment_exp(var_exp(i,DL),PreInc,DL);
    exp_t lval = subscript_exp((exp_t)env.dest,var_exp(i,DL),DL);
    remove_aggrs_exp(Env(AggrField,copy_exp(lval)),body);
    stmt_t s = for_stmt(ea,eb,ec,exp_stmt(body,DL),DL);
    if(zero_term) { 
      // used to be in toc.cyc; has nothing to do with aggregate removal
      // FIX: lhs[max] may be "const" -- we need to use pointer arithmetic
      // here and cast it to be a non-const pointer to the element type.
      // NB: we use new_exp here for the lhs to avoid sharing with the
      // occurrence of lhs above.
      // FIX: I removed a cast of the 0 -- may lead to gcc warnings
      exp_t ex = assign_exp(subscript_exp(copy_exp((exp_t)env.dest),
					  var_exp(max,DL),DL),
                            signed_int_exp(0,DL),DL);
      s = seq_stmt(s,exp_stmt(ex,DL),DL);
    }
    // Note the generated code for an initializer is a bit uglier than necessary
    noarray_remove_aggrs_exp(other_env,bd);
    e->r = stmt_exp(seq_stmt(declare_stmt(max,uint_type,bd,
			     declare_stmt(i,uint_type,NULL,s,DL),DL),
			     exp_stmt(signed_int_exp(0,DL),DL),DL),DL)->r;
    e->topt = NULL;
    break;

  case &ComprehensionNoinit_e(bd,...): 
    did_assign = true;
    res = WasArray;
    switch(env.ctxt) {
    case Other: Warn::impos2("remove-aggrs: no-init-comp in bad position");
    default: break;
    }
    // we execute the bound just for the effect (extremely pathological)
    *e = *bd;
    break;

  case &AssignOp_e(e1,_,e2): 
    noarray_remove_aggrs_exp(other_env,e1);
    remove_aggrs_exp(other_env,e2);
    break;
  case &SeqExp_e(e1,e2): 
    did_assign = true; // b/c we pass env for e2
    noarray_remove_aggrs_exp(other_env,e1);
    noarray_remove_aggrs_exp(env,e2);
    break;
  case &Conditional_e(e1,e2,e3): 
    did_assign = true; // b/c we pass env for e2 and e3
    noarray_remove_aggrs_exp(other_env,e1);
    noarray_remove_aggrs_exp(env,e2);
    let env3 = Env(env.ctxt, (env.dest==NULL ? NULL : copy_exp(env.dest)));
    noarray_remove_aggrs_exp(env3,e3); // avoid sharing dest!
    break;

  case &FnCall_e(e,es,NULL,_): // NULL b/c varargs already translated away
    noarray_remove_aggrs_exp(other_env,e);
    fallthru(es);
  case &Primop_e(_, es): 
    for(; es != NULL; es=es->tl)
      noarray_remove_aggrs_exp(other_env,es->hd);
    break;

  case &Subscript_e(e1,e2): fallthru(e1,e2);
  case &And_e(e1,e2):       fallthru(e1,e2);
  case &Or_e(e1,e2): 
    noarray_remove_aggrs_exp(other_env,e1);
    noarray_remove_aggrs_exp(other_env,e2);
    break;
    
    // (maybe do better for some cases??)
  case &Instantiate_e(e1,_):  fallthru(e1);
  case &NoInstantiate_e(e1):  fallthru(e1);
  case &Cast_e(_,e1,_,_):     fallthru(e1); // we better not cast arrays
  case &Address_e(e1):        fallthru(e1);
  case &Deref_e(e1):          fallthru(e1);
  case &AggrMember_e(e1,...): fallthru(e1); 
  case &AggrArrow_e(e1,...):  fallthru(e1);
  case &Sizeofexp_e(e1):      fallthru(e1); // could allow arrays but we do not
  case &Increment_e(e1,_):    noarray_remove_aggrs_exp(other_env,e1); break;

    // we do not bother threading through a dest
  case &StmtExp_e(s): remove_aggrs_stmt(s); break;
    
  default: Warn::impos2("bad exp after translation to C: ",e);
  }
  if(env.ctxt == AggrField && !did_assign)
    e->r = assign_exp((exp_t)env.dest,copy_exp(e),DL)->r;
  if(env.ctxt == NewDest && !did_assign)
    e->r = assign_exp(deref_exp((exp_t)env.dest,DL),copy_exp(e),DL)->r;
  return Result(res);
}

// We do not try to push a destination through a statement-expression, so this
// is just recursive descent, except for array-initializers
// for tests, we use other_env -- WholeStmt would be fine, but 
// assignments to comprehensions cannot appear so there is no point
static void remove_aggrs_stmt(stmt_t s) {
  switch(s->r) {
  case &Skip_s:         
  case &Break_s:    
  case &Continue_s: 
  case &Goto_s(_): return;
  case &Label_s(_,s2): remove_aggrs_stmt(s2); return;
  case &Return_s(eopt):
    if (eopt == NULL)
      return;
    fallthru(eopt);
  case &Exp_s(e): remove_aggrs_exp(other_env,e); return;
  case &Seq_s(s1,s2): 
    remove_aggrs_stmt(s1); 
    remove_aggrs_stmt(s2); 
    return;
  case &IfThenElse_s(e,s1,s2):
    remove_aggrs_exp(other_env,e);
    remove_aggrs_stmt(s1);
    remove_aggrs_stmt(s2);
    return;
  case &Do_s(s2,$(e,_)): fallthru(e,s2);
  case &While_s($(e,_),s2):
    remove_aggrs_exp(other_env,e);
    remove_aggrs_stmt(s2);
    return;
  case &For_s(e1,$(e2,_),$(e3,_),s2):
    remove_aggrs_exp(other_env,e1);
    remove_aggrs_exp(other_env,e2);
    remove_aggrs_exp(other_env,e3);
    remove_aggrs_stmt(s2);
    return;
  case &Switch_s(e,scs,_):
    // most switches have been translated away -- only C switches remain.
    // there should be no where clauses, so ignore them.
    remove_aggrs_exp(other_env,e);
    for(; scs != NULL; scs = scs->tl)
      remove_aggrs_stmt(scs->hd->body);
    return;
  case &Decl_s(d,s2):
    remove_aggrs_stmt(s2);
    switch(d->r) {
    case &Var_d(vd):
      if(vd->sc == Static) {
	massage_toplevel_aggr(vd->initializer);
	return;
      }
      // NOTE: It is probably okay not to compile away array-initializers
      // in most cases, but a comprehension inside an array would not
      // work correctly (e.g., {{for i < 7: 0}, {for i < 7: 0}}
      // so we do the more uniform thing and remove all Array_e expressions
      // (not including string constants)
      // May produce "prettier" output to do something like this for
      // aggregates too, but currently we just use a statement-expression.
      if(vd->initializer != NULL) {
	let Result(r) = remove_aggrs_exp(Env(Initializer,var_exp(vd->name,DL)), 
					 (exp_t)vd->initializer);
	if(r==WasArray) {
	  s->r = decl_stmt(d, seq_stmt(exp_stmt((exp_t)vd->initializer,DL),
				       s2, DL), DL)->r;
	  vd->initializer = NULL;
	}
      }
      return;
    case &Fn_d(fd): remove_aggrs_stmt(fd->body); return;
    default: Warn::impos("bad local declaration after xlation to C");
    }
  default: Warn::impos("bad stmt after xlation to C");
  }
}

list_t<decl_t> remove_aggrs(list_t<decl_t,`H> ds) {
  for(let ds2 = ds; ds2 != NULL; ds2 = ds2->tl)
    switch(ds2->hd->r) {
    case &Fn_d(fd):  
      if(fd->orig_scope != ExternC) //ignore extern C bodies
	remove_aggrs_stmt(fd->body); 
      break;
    case &Var_d(vd): massage_toplevel_aggr(vd->initializer); break;
    case &Aggr_d(_): 
    case &Enum_d(_): // assuming no aggregates in tag-expressions
    case &Typedef_d(_): break;
    case &Pool_d(...):
    case &Region_d(...):
    case &Datatype_d(...):
    case &Let_d(...): 
    case &Letv_d(...):  Warn::impos("Cyclone decl after xlation to C");
    case &Namespace_d(...):
    case &Using_d(...):    
    case &ExternC_d(...):  
    case &ExternCinclude_d(...):
    case &Porton_d:
    case &Portoff_d: 
    case &Tempeston_d:
    case &Tempestoff_d: Warn::impos("translation unit after xlation to C");
    }
  return ds;
}
