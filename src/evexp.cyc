/* Routines for evaluating expressions that should be "constant".
   Copyright (C) 2001 Greg Morrisett, AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

// FIX: Add appropriate support for float, double, and long long

#include <core.h>
#include <list.h>
#include <position.h>
#include <cycboot.h>
#include <string.h>
#include "absyn.h"
#include "absynpp.h"
#include "tcutil.h"
#include "evexp.h"

using Core;
using Absyn;
using List;
using Position;
using Absynpp;
using Tcutil;

namespace Evexp;

static $(cnst_t,bool) eval_const_exp(exp_t); // needed due to mutual recursion

static cnst_t promote_const(cnst_t cn) {
  switch (cn) {
  case {.Char_c = $(sn,c)}:  return Int_c(sn,(int)c);
  /* FIX: what about wide characters Wchar_c */
  case {.Short_c = $(sn,s)}: return Int_c(sn,(int)s);
  default:             return cn;
  }
}

$(unsigned int,bool) eval_const_uint_exp(exp_t e) {
  let $(cn,known) = eval_const_exp(e);
  if(!known)
    return $(0,false);
  switch (promote_const(cn)) {
  case {.Int_c = $(_,i)}: return $((unsigned int)i,true);
  default:          terr(e->loc,"expecting unsigned int"); return $(0,true);
  }
}

static $(bool,bool) eval_const_bool_exp(exp_t e) {
  let $(cn,known) = eval_const_exp(e);
  if(!known)
    return $(false,false);
  switch (promote_const(cn)) {
  case {.Int_c = $(_,b)}:       return $(b != 0, true);
  case {.LongLong_c = $(_,b)}:  return $(b != 0, true);
  case {.Null_c = _}:           return $(false,  false);
  default: terr(e->loc,"expecting bool"); return $(false, false);
  }
}

static $(cnst_t,bool) eval_const_unprimop(primop_t p,exp_t e) {
  let $(cn,known) = eval_const_exp(e);
  if(!known)
    return $(cn,false);
  switch ($(p,cn)) {
  case $(Plus,_): break;
  case $(Minus,  {.Int_c = $(s,i)}): cn = Int_c(Signed,  -i); break;
  case $(Bitnot, {.Int_c = $(s,i)}): cn = Int_c(Unsigned,~i); break;
  case $(Not,    {.Int_c = $(_,i)}): cn = Int_c(Signed,  i == 0 ? 1 : 0); break;
  case $(Not,    {.Null_c = _}):      cn = Int_c(Signed,  1); break;
  default: terr(e->loc,"bad constant expression"); break;
  }
  return $(cn,true);
}

// FIX: should allow pointer-comparison of non-integers (e.g., NULL==NULL)
static $(cnst_t,bool) eval_const_binprimop(primop_t p,exp_t e1,exp_t e2) {
  let $(cn1,known1) = eval_const_exp(e1);
  let $(cn2,known2) = eval_const_exp(e2);
  if(!known1 || !known2)
    return $(cn1,false);
  cn1 = promote_const(cn1);
  cn2 = promote_const(cn2);
  sign_t s1, s2;
  int    i1, i2;
  switch (cn1) {
  case {.Int_c = $(x,y)}: s1 = x; i1 = y; break;
  default: terr(e1->loc, "bad constant expression"); return $(cn1,true);
  }
  switch (cn2) {
  case {.Int_c = $(x,y)}: s2 = x; i2 = y; break;
  default: terr(e2->loc, "bad constant expression"); return $(cn1,true);
  }
  switch (p) {
  case Div:
  case Mod:
    if (i2 == 0) {
      terr(e2->loc,"division by zero in constant expression");
      return $(cn1,true);
    }
    break;
  default: break;
  }
  bool has_u_arg = (s1 == Unsigned || s2 == Unsigned);
  unsigned int u1 = (unsigned int)i1;
  unsigned int u2 = (unsigned int)i2;
  int          i3 = 0;    // definite assignment not smart enough
  unsigned int u3 = 0;    // definite assignment not smart enough
  bool         b3 = true; // definite assignment not smart enough
  bool use_i3 = false;
  bool use_u3 = false;
  bool use_b3 = false;
  switch ($(p,has_u_arg)) {
  case $(Plus,     false): i3 = i1 +  i2; use_i3 = true; break;
  case $(Times,    false): i3 = i1 *  i2; use_i3 = true; break;
  case $(Minus,    false): i3 = i1 -  i2; use_i3 = true; break;
  case $(Div,      false): i3 = i1 /  i2; use_i3 = true; break;
  case $(Mod,      false): i3 = i1 %  i2; use_i3 = true; break;
  case $(Plus,      true): u3 = u1 +  u2; use_u3 = true; break;
  case $(Times,     true): u3 = u1 *  u2; use_u3 = true; break;
  case $(Minus,     true): u3 = u1 -  u2; use_u3 = true; break;
  case $(Div,       true): u3 = u1 /  u2; use_u3 = true; break;
  case $(Mod,       true): u3 = u1 %  u2; use_u3 = true; break;
  case $(Eq,           _): b3 = i1 == i2; use_b3 = true; break;
  case $(Neq,          _): b3 = i1 != i2; use_b3 = true; break;
  case $(Gt,       false): b3 = i1 >  i2; use_b3 = true; break;
  case $(Lt,       false): b3 = i1 <  i2; use_b3 = true; break;
  case $(Gte,      false): b3 = i1 >= i2; use_b3 = true; break;
  case $(Lte,      false): b3 = i1 <= i2; use_b3 = true; break;
  case $(Gt,        true): b3 = u1 >  u2; use_b3 = true; break;
  case $(Lt,        true): b3 = u1 <  u2; use_b3 = true; break;
  case $(Gte,       true): b3 = u1 >= u2; use_b3 = true; break;
  case $(Lte,       true): b3 = u1 <= u2; use_b3 = true; break;
  case $(Bitand,       _): u3 = u1 &  u2; use_u3 = true; break;
  case $(Bitor,        _): u3 = u1 |  u2; use_u3 = true; break;
  case $(Bitxor,       _): u3 = u1 ^  u2; use_u3 = true; break;
  case $(Bitlshift,    _): u3 = u1 << u2; use_u3 = true; break;
  case $(Bitlrshift,   _): u3 = u1 >> u2; use_u3 = true; break;
  case $(Bitarshift,   _): terr(e1->loc, ">>> NOT IMPLEMENTED"); fallthru;
  default: terr(e1->loc, "bad constant expression"); return $(cn1,true);
  }
  if(use_i3) return $(Int_c(Signed,   i3),       true);
  if(use_u3) return $(Int_c(Unsigned, (int)u3),  true);
  if(use_b3) return $(Int_c(Signed, b3 ? 1 : 0), true);
  impos("Evexp::eval_const_binop");
}

// The main routine -- side-effects the expression e, overwriting its
// r field with the resulting constant (only if there's no error or sizeof
// or valueof.)  The allow_valueof flag determines whether or not we
// allow valueof.
static $(cnst_t,bool) eval_const_exp(exp_t e) {
  $(cnst_t,bool) ans;
  switch (e->r) {
  case &Const_e(c): return $(c,true); // return eagerly to avoid allocation
  case &Conditional_e(e1,e2,e3):
    let $(bool1,known1) = eval_const_bool_exp(e1);
    if(!known1) {
      eval_const_exp(e2);
      eval_const_exp(e3);
      return $(Int_c(Signed,0),false);
    }
    ans = bool1 ? eval_const_exp(e2) : eval_const_exp(e3);
    break;
  case &And_e(e1,e2):
    let $(bool1,known1) = eval_const_bool_exp(e1);
    if (!known1) {
      eval_const_exp(e2);
      return $(Int_c(Signed,0),false);
    }
    if (bool1) ans = eval_const_exp(e2);
    else ans = $(Int_c(Signed,0),true);
    break;
  case &Or_e(e1,e2):
    let $(bool1,known1) = eval_const_bool_exp(e1);
    if (!known1) {
      eval_const_exp(e2);
      return $(Int_c(Signed,0),false);
    }
    if (!bool1) ans = eval_const_exp(e2);
    else ans = $(Int_c(Signed,1),true);
    break;
  case &Primop_e(p,es):
    if (es == NULL) {
      terr(e->loc,"bad static expression (no args to primop)");
      return $(Int_c(Signed,0), true);
    }
    if (es->tl == NULL) {
      ans = eval_const_unprimop(p,es->hd);
      break;
    }
    if (es->tl->tl == NULL) {
      ans = eval_const_binprimop(p,es->hd,es->tl->hd);
      break;
    }
    terr(e->loc,"bad static expression (too many args to primop)");
    return $(Int_c(Signed,0), true);
  case &Valueof_e(t):
    // special case to reduce valueof(valueof_t<e>) to e
    switch (compress(t)) {
    case &ValueofType(e2): return eval_const_exp(e2);
    default: break;
    }
    fallthru;
  case &Sizeoftyp_e(_):
  case &Sizeofexp_e(_):
  case &Offsetof_e(_,_): ans = $(Int_c(Signed,0), false); break;
  case &Cast_e(t,e2,_,_):
    // FIX: this needs to be generalized
    ans = eval_const_exp(e2);
    if(ans[1])
      switch ($(compress(t),ans[0])) {
      /* FIX: what about wide characters Wchar_c */
      case $(&IntType(sn,sz),{.Char_c = $(sn2,x)}):  fallthru(sn,sz,sn2,x);
      case $(&IntType(sn,sz),{.Short_c = $(sn2,x)}): fallthru(sn,sz,sn2,x);
      case $(&IntType(sn,sz),{.Int_c = $(sn2,x)}):
	if(sn != sn2)
	  ans[0] = Int_c(sn,x);
	break;
      /* FIX: what about wide characters Wchar_c */
      case $(&TagType(it),{.Char_c = $(sn2,x)}):  fallthru(it,sn2,x);
      case $(&TagType(it),{.Short_c = $(sn2,x)}): fallthru(it,sn2,x);
      case $(&TagType(it),{.Int_c = $(sn2,x)}):
	if(x < 0)
	  terr(e->loc,"cannot cast negative number to a tag type");
	unify(it, new ValueofType(const_exp(ans[0],0)));
	ans[0] = Int_c(Unsigned,x);
	break;
      default: terr(e->loc,"cannot cast to %s",typ2string(t)); break;
      }
    break;
  case &AnonEnum_e(_,_,ef): fallthru(ef);
  case &Enum_e(_,_,ef): ans = eval_const_exp((exp_t)ef->tag); break;
  default:
    terr(e->loc,"bad static expression %s", exp2string(e));
    return $(Int_c(Signed,0), true);
  }
  if(ans[1])
    e->r = new Const_e(ans[0]);
  return ans;
}

bool c_can_eval(exp_t e) {
  switch (e->r) {
  case &AnonEnum_e(...):
  case &Enum_e(...):
  case &Sizeoftyp_e(_):
  case &Sizeofexp_e(_):
  case &Offsetof_e(_,_):
  case &Const_e(_): return true;
  case &Conditional_e(e1,e2,e3):
    return c_can_eval(e1) && c_can_eval(e2) && c_can_eval(e3);
  case &And_e(e1,e2): fallthru(e1,e2);
  case &Or_e(e1,e2):
    return c_can_eval(e1) && c_can_eval(e2);
  case &Primop_e(p,es):
    for (; es != NULL; es = es->tl)
      if (!c_can_eval(es->hd)) return false;
    return true;
  case &Valueof_e(_): return false;
  case &Cast_e(_,e,_,_): return c_can_eval(e);
  default: return false;
  }
}

static int const_exp_case_number(exp_t e) {
  switch(e->r) {
  case &Const_e(_): return 1;
  case &Conditional_e(_,_,_): return 2;
  case &Primop_e(_,_): return 3;
  case &Sizeoftyp_e(_): // do these the same so equal types are equal
  case &Sizeofexp_e(_): return 4;
  case &Offsetof_e(_,_): return 5;
  case &Cast_e(_,_,_,_): return 6;
  case &And_e(_,_): return 7;
  case &Or_e(_,_): return 8;
  case &Valueof_e(_): return 9;
    // note: AnonEnum_e and Enum_e should be impossible b/c already replaced
  default: terr(e->loc,"bad static expression %s", exp2string(e)); return 0;
  }
}

int const_exp_cmp(exp_t e1, exp_t e2) {
  let $(i1,known1) = eval_const_uint_exp(e1);
  let $(i2,known2) = eval_const_uint_exp(e2);
  if(known1 && known2)
    return i1 - i2;
  let e1case = const_exp_case_number(e1);
  let e2case = const_exp_case_number(e2);
  if(e1case != e2case)
    return e1case - e2case;
  switch($(e1->r, e2->r)) {
    // note: two consts are impossible -- they'd be known
  case $(&Conditional_e(e11,e12,e13), &Conditional_e(e21,e22,e23)):
    // FIX: not quite right -- if e11 and e21 are known and equal, then only
    // one of the remaining pairs should matter. Anybody care?
    let c1 = const_exp_cmp(e13,e23);
    if (c1 != 0) return c1;
    fallthru(e11,e12,e21,e22);
  case $(&And_e(e11,e12),&And_e(e21,e22)): fallthru(e11,e12,e21,e22);
  case $(&Or_e(e11,e12),&Or_e(e21,e22)):
    let c1 = const_exp_cmp(e11,e21);
    if(c1 != 0) return c1;
    return const_exp_cmp(e12,e22);
  case $(&Primop_e(p1,es1), &Primop_e(p2,es2)):
    let c1 = (int)p1 - (int)p2;
    if(c1 != 0) return c1;
    for(; es1 != NULL && es2 != NULL; es1=es1->tl, es2=es2->tl) {
      let c2 = const_exp_cmp(es1->hd, es2->hd);
      if(c2 != 0)
	return c2;
    }
    return 0; // list lengths must be the same -- it's the same primop
  case $(&Sizeoftyp_e(t1), &Sizeoftyp_e(t2)):  return typecmp(t1,t2);
  case $(&Sizeoftyp_e(t1), &Sizeofexp_e(e2a)):
    if(e2a->topt == NULL)
      terr(e2->loc, "cannot handle sizeof(exp) here -- use sizeof(type)");
    return typecmp(t1,e2a->topt->v);
  case $(&Sizeofexp_e(e1a), &Sizeoftyp_e(t2)):
    if(e1a->topt == NULL)
      terr(e1->loc, "cannot handle sizeof(exp) here -- use sizeof(type)");
    return typecmp(e1a->topt->v,t2);
  case $(&Sizeofexp_e(e1a), &Sizeofexp_e(e2a)):
    if(e1a->topt == NULL)
      terr(e1->loc, "cannot handle sizeof(exp) here -- use sizeof(type)");
    if(e2a->topt == NULL)
      terr(e2->loc, "cannot handle sizeof(exp) here -- use sizeof(type)");
    return typecmp(e1a->topt->v,e2a->topt->v);
  case $(&Offsetof_e(t1,f1), &Offsetof_e(t2,f2)):
    let c1 = typecmp(t1,t2);
    if(c1 != 0) return c1;
    switch($(f1,f2)) {
    case $(&StructField(_),&TupleIndex(_)): return -1;
    case $(&TupleIndex(_),&StructField(_)): return 1;
    case $(&StructField(fn1),&StructField(fn2)): return strptrcmp(fn1,fn2);
    case $(&TupleIndex(i1),&TupleIndex(i2)): return i1-i2;
    }
  case $(&Cast_e(t1,e1a,_,_), &Cast_e(t2,e2a,_,_)):
    let c1 = typecmp(t1,t2);
    if(c1 != 0) return c1;
    return const_exp_cmp(e1a,e2a);
  case $(&Valueof_e(t1), &Valueof_e(t2)):
    if (Tcutil::unify(t1,t2)) return 0;
    return typecmp(t1,t2);
  default: impos("Evexp::const_exp_cmp, unexpected case");
  }
}
bool same_const_exp(exp_t e1, exp_t e2) {
  return const_exp_cmp(e1,e2)==0;
}
bool lte_const_exp(exp_t e1, exp_t e2) {
  let $(i1,known1) = eval_const_uint_exp(e1);
  let $(i2,known2) = eval_const_uint_exp(e2);
  if(known1 && known2)
    return i1 <= i2;
  return same_const_exp(e1,e2);
}

// called by tcSizeof (which ignores result)
// Note that an AggrType better be checked so we can get the aggrdecl
bool okay_szofarg(type_t t) {
  switch (Tcutil::compress(t)) {
  case &VoidType: return false;
  case &VarType(tv):
    switch (tvar_kind(tv,&bk)->kind) {
    case BoxKind: return true;
    default:      return false;
    }
  case &Evar(&Opt{&Kind(BoxKind,_)},_,_,_): return true; // Possible?
  case &Evar(_,_,_,_): return false;
  case &DatatypeType(_): return true;
  case &DatatypeFieldType(DatatypeFieldInfo{{.KnownDatatypefield=$(_,tuf)},_}):
    fallthru(tuf->typs);
  case &TupleType(tqs):
    for (; tqs != NULL; tqs = tqs->tl)
      if(!okay_szofarg((*tqs->hd)[1]))
	return false;
    return true;

  case &DatatypeFieldType(_): return false;

    // okay? (used to require constrained bound)
  case &PointerType(_): return true;

  case &TagType(_):
  case &IntType(_,_):
  case &FloatType(_): return true;
  case &ArrayType(ArrayInfo{t2,_,e,_,_}): //assume e constant checked elsewhere
    return (e != NULL);
  case &FnType(_): return false;
  case &RgnHandleType(_): return true;
  case &DynRgnType(_,_): return true;
  case &AggrType(AggrInfo(info,ts)):
    _ ad;
    switch(info) {
    case {.UnknownAggr = _}: impos("szof on unchecked StructType");
    case {.KnownAggr = &ad2}: ad = ad2;
    }
    if(ad->impl == NULL)
      return false;
    {
      region temp;
      let inst = List::rzip(temp,temp,ad->tvs,ts);
      for (let fs = ad->impl->fields; fs != NULL; fs = fs->tl)
        if (!okay_szofarg(rsubstitute(temp,inst,fs->hd->type))) return false;
      return true;
    }
    fallthru(ad->impl->fields);
  case &AnonAggrType(_,fs):
    for(; fs != NULL; fs = fs->tl)
      if(!okay_szofarg(fs->hd->type))
	return false;
    return true;
  case &EnumType(_,_):
  case &AnonEnumType(_): return true;
  case &TypeDeclType(...):
  case &HeapRgn:
  case &RefCntRgn:
  case &UniqueRgn:
  case &JoinEff(_):
  case &AccessEff(_):
  case &ValueofType(_):
  case &RgnsEff(_):   return false;
  case &TypedefType(_,_,td,_):
    // Is this right, considering abstract typedefs??
    if (td == NULL || td->kind == NULL)
      impos(aprintf("szof typedeftype %s",typ2string(t)));
    return td->kind->v->kind==BoxKind;
  }
}
