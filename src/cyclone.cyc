// Main file

#include "arg.h"
#include "core.h"
#include "list.h"
#include "string.h"
#include "dict.h"
#include "filename.h"
#include "id.h"
#include "parse.h"
#include "position.h"
#include "absyn.h"
#include "absynpp.h"
#include "tcutil.h"
#include "tcenv.h"
#include "tc.h"
#include "toc.h"

namespace Lex {
extern void lex_init();
}

using Core;
using List;
using Arg;
using String;

bool pp_r       = false;
bool noexpand_r = false;
bool tc_r       = false;
bool toc_r      = false;

bool @ pp       = &pp_r;
bool @ noexpand = &noexpand_r;
bool @ tc       = &tc_r;
bool @ toc      = &toc_r;

void set_check_null() {
  Toc::check_for_null = true;
}

list<string> includes = null;
void add_include(string s) {
  includes = &cons(s,includes);
}
list<string> defines = null;
void add_define(string s) {
  defines = &cons(s,defines);
}

bool compile_failure = false; // for exit code (helps Makefile)

void compile_file(string filename) {

  string basename = Filename::chop_extension(filename);

  fprintf(cyc_stderr,"Compiling file: %s\n", basename);

  // establish filenames
  string preprocfile = strconcat(basename,  ".i");

  // Run the preprocessor, by building and running a command-line
  // Pass -I and -D things onto pre-processor
  string inc_string = String::str_sepstr(&cons((string)"", rev(includes))," -I");
  string def_string = String::str_sepstr(&cons((string)"", rev(defines)), " -D");
  string cmd = xprintf("gcc -x c -E -U__GNUC__ %s %s %s > %s",
		       inc_string, def_string, filename, preprocfile);
  fprintf(cyc_stderr,"%s\n",cmd);
  system(string_to_Cstring(cmd));

  // reset front-end -- necessary for good error messages!
  Position::reset_position(preprocfile);

  // Actually process the file
  FILE @f;
  try
    f = file_open(preprocfile, "r");
  catch {
  default:
    fprintf(cyc_stderr, "couldn't open %s\n", preprocfile);
    compile_failure=true;
    return;
  }

  // parse
  list<Absyn::decl> tds = null;
  tds = Parse::parse_file(f);
  fprintf(cyc_stderr,"Parsing completed\n");
  fflush(cyc_stderr);
  if (tds != null && *tc) try {
    Absynpp::expand_typedefs = ! *noexpand;
    Tc::tc(Tcenv::tc_init(),tds);
    fprintf(cyc_stderr,"Type checking completed\n");
    fflush(cyc_stderr);
  } catch {
  case Tcutil::TypeErr: 
    fprintf(cyc_stderr,"Type error!\n");
    fflush(cyc_stderr);
    compile_failure=true;
    break;
  case Dict::Absent:
    fprintf(cyc_stderr,"Dict::Absent occurred during type checking!\n");
    fflush(cyc_stderr);
    compile_failure=true;
    break;
  }
  if (*toc) {
    tds = Toc::toc(tds); // translate to C
  }
  if (tds != null && *pp) {
    Absynpp::expand_typedefs = ! *noexpand;
    if (*toc) 
      printf("#include \"cyc_include.h\"\n\n");
    Absynpp::decllist2file(tds,cyc_stdout);
    fflush(cyc_stdout);
  }
  if (Position::error_p()) {
    fprintf(cyc_stderr,"COMPILATION FAILED!\n");
    fflush(cyc_stderr);
    compile_failure=true;
  } else {
    Tcutil::flush_warnings();
  }
  file_close(f);
  file_delete(preprocfile);
  return;
}

int cyc_main() {

  list<$(string,Arg::spec,string)@> options =
    &cons(&$((string)"-pp",Set_spec(pp), 
	     (string)"pretty print"),
    &cons(&$((string)"-noexpandtypedefs",Set_spec(noexpand),
             (string)"don't expand typedefs in pretty printing"),
    &cons(&$((string)"-tc",Set_spec(tc), 
	     (string)"type check"),
    &cons(&$((string)"-toc",Set_spec(toc), 
	     (string)"translate to C"),
    &cons(&$((string)"-I",String_spec(add_include), 
	     (string)"include directory"),
    &cons(&$((string)"-D",String_spec(add_define), 
	     (string)"pass definition to pre-processor"),
    &cons(&$((string)"-check_null",Unit_spec(set_check_null), 
	     (string)"turn on null-checking in generated C code"),
	  null)))))));

  Lex::lex_init();
  Arg::parse(options, compile_file, "Options:");

  return compile_failure ? 1 : 0;
}

