/* Type environments.

   An identifier can have at most one binding in each of the following:

   1) namespaces (after "namespace" or "using")
   2) structure tags (after "struct")
   3) union tags (after "union")
   4) structure or union members (after "." or "->")
   5) enum tags (after "enum")
   6) xenum tags (after "xenum")
   7) labels (after "goto", before ":")
   8) typedef names (in types)
   9) ordinary identifiers (the catch-all case)

   The ordinary identifiers include structure tags and enum and xenum
   constructors.

   The environment data structures below follow from this directly.
   Note that labels can only appear inside of functions, so they don't
   appear in global environments.  And structure and union members
   must be resolved on a per-structure/per-union basis (e.g., two
   structs can have members with the same names) so their bindings
   don't belong in our environments.

   Also, we don't currently implement union.
*/

/* FIX: the environment datatypes should be abstract.
   Their representation is used in this file and in tc.pop; elsewhere
   they are used abstractly, but this is not enforced. */

/* During type checking we keep two parallel environments.  One is
   accessed by absolute name, the other by local name.  We need these
   two environments because what is defined in a namespace is
   different from what is available in the namespace.  E.g.,

      extern int z;
      namespace Foo {
        int x;
        namespace Bar {
          int y = x;
        }
      }

   Here x is available in the inner namespace Bar but not defined
   there.  The absolute namespace will have entries for ::z, ::Foo::x,
   ::Foo::Bar, and ::Foo::Bar::y.  The relative namespace just after
   the definition of y will have entries for x, y, and z.
*/

#include "core.h"
#include "list.h"
#include "dict.h"
#include "set.h"
#include "dict.h"
#include "position.h"
#include "absyn.h"
#include "tcenv.h"
#include "tcutil.h"
#include "string.h"
#include "absynpp.h"

namespace Tcenv;

using Core;
using List;
using Set;
using Dict;
using Position;
using Absyn;

xenum exn {Env_error};

`a env_err<`a>(string msg) {
  printf("Error: %s\n",msg);
  fflush(cyc_stdout);
  throw Env_error();
}

// Type environments 
struct Tenv {
  list<var>            ns; // current namespace
  Dict<list<var>,genv> ae; // absolute environment
  Opt_t<frames<fenv>>  le; // local environment, == null except in functions
};

// Global environments -- what's declared in a global scope 
struct Genv {
  Set<var>              namespaces;
  Dict<var,structdecl>  structdecls;
  Dict<var,enumdecl>    enumdecls;
  Dict<var,xenumdecl>   xenumdecls;
  Dict<var,typedefdecl> typedefs;
  Dict<var,resolved>    ordinaries;
  list<list<var>>       availables; // "using" namespaces
};

enum Unassigned {
  Always(Set<var>);  // unassigned after expression
  Boolean(Set<var>,Set<var>); // unassigned when true, when false
};

static Opt_t<unassigned_t> empty_unassigned = null;
static Opt_t<Set<var>>     empty_var_set    = null;

tenv tc_init() {
  // Initialize globals
  empty_var_set    = &Opt(Set::empty(String::strcmp));
  empty_unassigned = &Opt(Always(empty_var_set->v));

  // Set up initial environment so that xenum exn is defined
  string exn_v  = "exn";
  let    xed    = &Xenumdecl{.sc=Extern, .name=&$(null,exn_v), .fields=null};
  let    ge     = empty_genv();
  let    top_ns = null;
  ge->xenumdecls = Dict::insert(ge->xenumdecls, exn_v, xed);
  let ae = Dict::insert(Dict::empty(varlist_cmp), top_ns, ge);
  return &Tenv(top_ns,ae,null);
}

struct Ok_ctrl {
  bool OK_continue;
  bool OK_loop_break;
  bool OK_switch_break;
  bool OK_fallthru;
};

static struct Ok_ctrl def_ok_ctrl = {false,false,false,false};
ok_ctrl_t default_ok_ctrl = &def_ok_ctrl;

// Local function environments 
struct Fenv {
  list<var>             labels;
  Dict<var,binding_t>   locals; // binding will be Param_b, Local_b, or Pat_b
  ok_ctrl_t             ok;
    // maybe-unassigned variables -- going away from this pass soon
  Set<var>              uv; 
  typ                   return_typ;
  list<tvar>            type_vars; // type variables that can occur free
};

// Models the nesting of the RTCG constructs 
enum Frames<`a> {
  Outermost(`a);
  Frame(`a,enum Frames<`a>);
  Hidden(`a,enum Frames<`a>);
};

`a get_visible<`a>(frames<`a> f) {
  while(true)
    switch (f) {
    case Outermost(x): return x;
    case Frame(x,_):   return x;
    case Hidden(x,y):  f = y; break;
    }
  throw Unreachable("Tcenv::get_visible");
}

frames<`a> put_visible<`a>(frames<`a> f, `a x) {
  switch (f) {
  case Outermost(x2): return Outermost(x);
  case Frame(x2,f2):  return Frame(x,f2);
  case Hidden(x2,f2): return Hidden(x2,put_visible(f2,x));
  }
}

frames<`a> apply_to_visible<`a>(`a g(`a), frames<`a> f) {
  return put_visible(f,g(get_visible(f)));
}

frames<`b> map_frames<`a,`b>(`b g(`a), frames<`a> f) {
  switch (f) {
  case Outermost(x): return Outermost(g(x));
  case Frame(x,f2):  return Frame(g(x),map_frames(g,f2));
  case Hidden(x,f2): return Hidden(g(x),map_frames(g,f2));
  }
}

fenv get_fenv(tenv te) {
  if (te->le == null) throw Env_error();
  return get_visible(te->le->v);
}

tenv put_fenv(tenv te, fenv fe) {
  if (te->le == null) throw Env_error();
  return &Tenv(te->ns, te->ae, &Opt(put_visible(te->le->v,fe)));
}

// Used to tell what an ordinary identifer refers to 
enum Resolved {
  VarRes(binding_t); // includes unresolved variant
  StructRes(structdecl);
  EnumRes(enumdecl,enumfield);
  XenumRes(xenumdecl,enumfield);
};

// lookup functions 
static list<var> outer_namespace(list<var> ns) {
  if (ns == null) {
    env_err("Tcenv::outer_namespace");
    throw Impossible("Tcenv::outer_namespace");
  }
  return List::rev(List::rev(ns)->tl);
}

// FIX: never actually returns null
static $(list<var>,`a) * scoped_lookup<`a>(tenv te, segment loc, 
					   `a lookup(genv,var), var v) {
  list<var> cns = te->ns; // current namespace
  int num_results = 0;
  $(list<var>,`a) * result = null; // def assignment too dumb
  while (true) {
    genv ge = Dict::lookup(te->ae,cns);
    // Check available namespaces
    for (let nss = ge->availables; nss != null; nss = nss->tl) {
      genv ge2 = Dict::lookup(te->ae,nss->hd);
      try {
	result = &$(nss->hd,lookup(ge2,v));
	++num_results;
      }
      catch { case Dict::Absent: break; /* ignore */}
    }
    // Check current namespace
    try {
      result = &$(cns,lookup(ge,v));
      ++num_results;
    }
    catch { case Dict::Absent: break; /* ignore */ }

    if(num_results > 1) 
      Tcutil::terr(loc,xprintf("%s is ambiguous-",v));
    if(num_results > 0)
      return result;

    if (cns == null) 
      throw Dict::Absent();
    // v is not defined in current namespace, look in next outer
    cns = outer_namespace(cns);
  }
  throw Unreachable("Tcenv::scoped_lookup");
}

resolved lookup_ordinary_global_f(genv ge,var v) {
  return Dict::lookup(ge->ordinaries,v);
}
static resolved lookup_ordinary_global(tenv te,segment loc,qvar q) {
  try {
    if (q[0] == null)
      return scoped_lookup(te, loc, lookup_ordinary_global_f, q[1])[1];
    genv ge = lookup_namespace(te,loc,q[0]);
    return Dict::lookup(ge->ordinaries,q[1]);
  } catch {
  case Dict::Absent: return VarRes(Unresolved_b);
  }
}

resolved lookup_ordinary(tenv te,segment loc,qvar q) {
  if (q[0] != null || te->le == null)
    return lookup_ordinary_global(te,loc,q);
  var  v  = q[1];
  fenv fe = get_fenv(te);
  try return VarRes(Dict::lookup(fe->locals,v));
  catch {case Dict::Absent: return lookup_ordinary_global(te,loc,q);}
}

// Lookup a namespace relative to the current namespace
genv lookup_namespace(tenv te, segment loc, list<var> ns) {
  return Dict::lookup(te->ae, resolve_namespace(te,loc,ns));
}

list<var> resolve_namespace(tenv te, segment loc, list<var> ns) {
  if (ns == null)
    // null means the current namespace
    return te->ns;
  list<var> cns = te->ns; // current namespace
  list<list<var>> result = null;
  while (true) {
    genv ge = Dict::lookup(te->ae,cns);
    // Check namespaces that have been made available
    for (let nss = ge->availables; nss != null; nss = nss->tl) {
      genv ge2 = Dict::lookup(te->ae,nss->hd);
      if (Set::member(ge2->namespaces, ns->hd))
        result = &cons(List::append(cns,ns),result);
    }
    // Check current namespace
    if (Set::member(ge->namespaces, ns->hd))
      result = &cons(List::append(cns,ns),result);
    if (result != null) {
      if (result->tl != null)
        Tcutil::terr(loc,xprintf("%s is ambiguous_",ns->hd));
      return result->hd;
    }
    if (cns == null)
      throw Dict::Absent();
    // ns->hd is not defined in current namespace, look in next outer
    cns = outer_namespace(cns);
  }
  throw Unreachable("Tcenv::resolve_namespace");
}

static structdecl lookup_structdecl_f(genv ge,var v) {
  return Dict::lookup(ge->structdecls,v);
}
structdecl lookup_structdecl(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null)
    return scoped_lookup(te, loc, lookup_structdecl_f, v)[1];
  genv ge = lookup_namespace(te,loc,nsl);
  return Dict::lookup(ge->structdecls,v);
}

static enumdecl lookup_enumdecl_f(genv ge,var v) {
  return Dict::lookup(ge->enumdecls,v);
}
enumdecl lookup_enumdecl(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null)
    return scoped_lookup(te, loc, lookup_enumdecl_f, v)[1];
  genv ge = lookup_namespace(te,loc,nsl);
  return Dict::lookup(ge->enumdecls,v);
}

static xenumdecl lookup_xenumdecl_f(genv ge,var v) {
  return Dict::lookup(ge->xenumdecls,v);
}

// DAN: some functionality from tcXenumdecl has moved to here.
Opt_t<xenumdecl> lookup_xenumdecl(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null)
    // unqualified name, okay to fail -- that just means we have a new xenum
    try return &Opt(scoped_lookup(te, loc, lookup_xenumdecl_f, v)[1]);
    catch { case Dict::Absent: return null; }
  // qualified name, it's an error if the namespace is bad or the
  // xenum doesn't already exist.  In either case, we'll raise
  // Dict::Absent, so we give a more descriptive message for the
  // former.
  genv ge;
  try ge = lookup_namespace(te,loc,nsl);
  catch { 
  case Dict::Absent: 
    Tcutil::terr(loc,"bad qualified name for xenum"); 
    throw Dict::Absent();
  }
  return &Opt(Dict::lookup(ge->xenumdecls,v));
}


static typedefdecl lookup_typedefdecl_f(genv ge,var v) {
  return Dict::lookup(ge->typedefs,v);
}
typedefdecl lookup_typedefdecl(tenv te, segment loc, qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null) 
    return scoped_lookup(te, loc, lookup_typedefdecl_f, v)[1];
  genv ge = lookup_namespace(te,loc,nsl);
  return Dict::lookup(ge->typedefs,v);
}

static int shadow_ctr = 1;

tenv add_local_var(segment loc, tenv te, vardecl vd) {
  if(te->le == null) env_err("Tcenv: unexpected add_local_var");
  fenv fe = get_fenv(te);
  var  v  = vd->name[1];
  if(Dict::member(fe->locals,v))
    vd->shadow = ++shadow_ctr;
  Set<var> uv = fe->uv;
  if(vd->initializer == null)
    uv = Set::insert(uv,v);
  fenv fe2 = &Fenv(fe->labels,
		   Dict::insert(fe->locals,v,Local_b(vd)),
                   fe->ok,
                   uv,
                   fe->return_typ,
		   fe->type_vars);
  return put_fenv(te,fe2);
}
// assume uniqueness has been checked elsewhere, never uninitialized
tenv add_param_var(segment loc, tenv te, $(var,tqual,typ)@ trip) {
  if(te->le == null) env_err("Tcenv: unexpected add_param_var");
  fenv fe  = get_fenv(te);
  fenv fe2 = &Fenv(fe->labels,
		   Dict::insert(fe->locals,trip[0],Param_b(trip)),
                   fe->ok,
                   fe->uv,
                   fe->return_typ,
		   fe->type_vars);
  return put_fenv(te,fe2);
}
// assume uniqueness has been checked elsewhere, never uninitialized
tenv add_pat_var(segment loc, tenv te, vardecl vd) {
  if(te->le == null) env_err("Tcenv: unexpected add_param_var");
  fenv fe = get_fenv(te);
  var  v  = vd->name[1];
  if(Dict::member(fe->locals,v))
    vd->shadow = ++shadow_ctr;
  fenv fe2 = &Fenv(fe->labels,
		   Dict::insert(fe->locals,v,Pat_b(vd)),
                   fe->ok,
                   fe->uv,
                   fe->return_typ,
		   fe->type_vars);
  return put_fenv(te,fe2);
}

Opt_t<$(tqual,typ)@> lookup_struct_field(structdecl sd, var v) {
  if (sd->fields == null) 
    return null;
  let fs = sd->fields->v;
  while (fs != null) {
    let &$(name,tq,t) = fs->hd;
    if (String::strcmp(name,v) == 0)
      return &Opt(&$(tq,t));
    else
      fs = fs->tl;
  }
  return null;
}

list<tvar> lookup_type_vars(tenv te) {
  if (te->le == null) return null;
  return get_fenv(te)->type_vars;
}

tenv add_type_vars(segment loc,tenv te,list<tvar> tvs) {
  list<tvar> new_tvs = List::append(tvs,lookup_type_vars(te));
  Tcutil::check_unique_tvars(loc,new_tvs);
  fenv fe = get_fenv(te);
  fenv fe2 = &Fenv(fe->labels,
		   fe->locals,
		   fe->ok,
		   fe->uv,
		   fe->return_typ,
		   new_tvs);
  return put_fenv(te,fe2);
}

// When type-checking a statement or expression, we need to know
// what kind of control flow it may have so that we can determine
// whether code "falls off" a function, implicitly falls through
// in a switch branch, etc.  We also use this information to better
// approximate the set of variables that have not yet been initialized.
// The lattice contains 3 bits of information represented as follows:
static struct Ctrl {
  bool implicit_fallthru;     // stmt/exp may fall-through
  bool explicit_fallthru;     // stmt does an explicit fallthru
  bool forward_jump;          // stmt/exp may do a forward jump
};
typedef struct Ctrl @ctrl_t;

struct Synth {
  typ          type;      // only valid on expressions
  ctrl_t       control;   // how the stmt/expr may flow
  unassigned_t norm_unas; // uninitialized variables on fall-through edge
  Set<var>     jump_unas; // uninitialized variables on forward jump edge
};

bool synth_may_implicit_fallthru(synth s) {
  return s->control->implicit_fallthru;
}

bool synth_may_explicit_fallthru(synth s) {
  return s->control->explicit_fallthru;
}

typ synth_typ(synth s) {
  return s->type;
}

synth synth_set_typ(synth s, typ t) {
  s->type = t;
  return s;
}

static struct Ctrl standard_ctrl_v = {true,false,false};
static struct Ctrl empty_ctrl_v    = {false,false,false};
static struct Ctrl forward_ctrl_v  = {false,false,true};
static struct Ctrl fallthru_ctrl_v = {false,true,false};
static ctrl_t standard_ctrl = &standard_ctrl_v;
static ctrl_t empty_ctrl    = &empty_ctrl_v;
static ctrl_t forward_ctrl  = &forward_ctrl_v;
static ctrl_t fallthru_ctrl = &fallthru_ctrl_v;

Set<var> get_unassigned(tenv te) {
  if (te->le == null) return empty_var_set->v;
  fenv fe = get_fenv(te);
  return fe->uv;
}

tenv layer_synth(tenv te, synth syn) {
  if (synth_may_implicit_fallthru(syn))
    return set_unassigned(te,maybe_unassigned(syn));
  else
    return set_unassigned(te,empty_var_set->v);
}

$(tenv,tenv) bool_layer_synth(tenv te, synth syn) {
  if (synth_may_implicit_fallthru(syn)) {
    switch (syn->norm_unas) {
    case Always(v):
      te = set_unassigned(te,v);
      return $(te,te);
    case Boolean(tv,fv):
      return $(set_unassigned(te,tv), set_unassigned(te,fv));
    }
  } else {
    te = set_unassigned(te,empty_var_set->v);
    return $(te,te);
  }
}

Set<var> maybe_unassigned(synth es) {
  switch (es->norm_unas) {
  case Always(s):      return s;
  case Boolean(s1,s2): return Set::union_two(s1,s2);
  }
}

$(Set<var>,Set<var>) maybe_unassigned_bool(synth es) {
  switch (es->norm_unas) {
  case Always(s):    return $(s,s);
  case Boolean(x,y): return $(x,y);
  }
}

unassigned_t merge_unassigned(unassigned_t u1, unassigned_t u2) {
  switch ($(u1,u2)) {
  case $(Always(s1),  Always(s2)):       
    return Always(Set::union_two(s1,s2));
  case $(Always(s1),  Boolean(ts2,fs2)): 
    return Boolean(Set::union_two(s1,ts2),  Set::union_two(s1,fs2));
  case $(Boolean(ts1,fs1), Always(s2)):  
    return Boolean(Set::union_two(s2,ts1),  Set::union_two(s2,fs1));
  case $(Boolean(ts1,fs1), Boolean(ts2,fs2)): 
    return Boolean(Set::union_two(ts1,ts2), Set::union_two(fs1,fs2));
  }
}


// synth we get for most expressions and atomic statements -- implicit
// fallthru with no forward jump, and all currently unassigned variables as
// unassigned on the normal edge, empty set of unassigned variables on
// the forward jump edge.
synth standard_synth(tenv te, typ t) {
  return &Synth{.type = t, .control = standard_ctrl,
		.norm_unas = Always(get_unassigned(te)),
	        .jump_unas = empty_var_set->v};
}

// useful for error expressions
synth wild_synth(tenv te) {
  return standard_synth(te, wildtyp());
}

// synth we get for more statements -- standard_synth with void type
synth skip_synth(tenv te) { return standard_synth(te, VoidType); }

// synth we get upon return or continue -- no fallthru or forward jump,
// no unassigned variables on either the normal or forward jump edge.
synth empty_synth(tenv te) {
  let j = empty_var_set->v;
  let u = Always(j);
  return &Synth{.type = wildtyp(),.control = empty_ctrl,
                .norm_unas = u,.jump_unas = j};
}

// synth we get upon a break, goto, or throw -- forward jump with no
// fallthru, all currently unassigned variables on the forward jump edge, the
// empty set on the normal edge.
synth forward_jump_synth(tenv te) {
  let j = get_unassigned(te);
  let u = empty_unassigned->v;
  return &Synth{.type = wildtyp(), .control = forward_ctrl, 
		.norm_unas = u,    .jump_unas = j};
}

// synth we get for sequencing.  We merge the normal and jump edges
// according to whether or not s1 may fallthru to s2.
synth seq_synth(synth s1, synth s2) {
  if (!s1->control->implicit_fallthru) {
    // control can't get to s2
    // HACK:  we want to return s1 but the type must be draw from s2
    // I'm using in place update instead of allocating a new record...
    // bet this bites me someday.
    s1->type = s2->type;
    return s1;
  } else if (!s1->control->forward_jump)
    // control can only flow through s2
    return s2;
  else {
    // control may or may not flow through s2
    ctrl_t c = &Ctrl{.forward_jump =
		          s1->control->forward_jump || s2->control->forward_jump,
		     .implicit_fallthru = s2->control->implicit_fallthru,
		     .explicit_fallthru = s2->control->explicit_fallthru};
    unassigned_t nu = s2->norm_unas;
    Set<var> ju = Set::union_two(s1->jump_unas, s2->jump_unas);
    return &Synth{.type = s2->type, .control = c,
                  .norm_unas = nu, .jump_unas = ju};
  }
}

// synth we get upon join of two if statements or switch cases etc.
synth join_synth(synth s1, synth s2) {
  ctrl_t c = 
    &Ctrl{.implicit_fallthru = 
	      s1->control->implicit_fallthru || s2->control->implicit_fallthru,
	  .forward_jump = 
	       s1->control->forward_jump || s2->control->forward_jump,
	  .explicit_fallthru = false
         };
  let norm = merge_unassigned(s1->norm_unas,s2->norm_unas);
  let jump = Set::union_two(s1->jump_unas,s2->jump_unas);
  return &Synth{.type = s1->type, .control = c,
                   .norm_unas = norm, .jump_unas = jump};
}

// after joining all of the switch cases' synths, we treat the
// unassigned variables on the "forward jump" edge as unassigned
// on the outgoing normal control flow edge, because any case's break is
// a forward jump to the bottom of the switch statement.
synth switch_bottom(synth s) {
  let n = Always(Set::union_two(s->jump_unas,maybe_unassigned(s)));
  ctrl_t c = 
    &Ctrl{.implicit_fallthru =
	        s->control->forward_jump || s->control->explicit_fallthru,
	  //		 forward_jump = s->control->forward_jump,
	  // When a switch is followed by other statements, the result
	  // of the above is a statement with a forward jump, even
	  // though the forward jump comes from break statements.
	  .forward_jump = false,
	  .explicit_fallthru = false};
  return &Synth{.type = s->type, 
		.control = c, 
                .norm_unas = n, 
                .jump_unas = empty_var_set->v};
}

// after a loop, the synth is the join of the "false" part of the
// test expression, and the forward_jump part of the statement
synth loop_synth(synth e, synth s) {
  ctrl_t c = &Ctrl{.implicit_fallthru = e->control->implicit_fallthru,
		   .explicit_fallthru = false,
		   .forward_jump = 
		      e->control->forward_jump || s->control->forward_jump};
  let $(_,un_false) = maybe_unassigned_bool(e);
  let nu = Set::union_two(un_false, s->jump_unas);
  let ju = Set::union_two(e->jump_unas, s->jump_unas);
  return &Synth{.type = VoidType, .control = c,
		.norm_unas = Always(nu), .jump_unas = ju};
}

// an explicit fallthru -- similar to skip but ctrl indicates explicit fallthru
synth fallthru_synth(tenv te) {
  return &Synth{.type      = VoidType, 
		.control   = fallthru_ctrl,
		.norm_unas = Always(get_unassigned(te)),
		.jump_unas = empty_var_set->v};
}

// remove all of the variables on the fall-through edge
synth drop_fallthru_synth(synth s) {
  s->norm_unas = empty_unassigned->v;
  return s;
}

// add the set v to both edges of the synth
synth add_var_synth(Set<var> v, synth s) {
  unassigned_t nu = Always(Set::union_two(maybe_unassigned(s),v));
  return &Synth{.type = s->type, .control = s->control,
		.norm_unas = nu, .jump_unas = Set::union_two(s->jump_unas,v)};
}

// remove v from the fallthru edge of the synth
synth initialize_var_synth(synth s, var v) {
  let vs = Set::delete(maybe_unassigned(s),v);
  return &Synth{.type = s->type, .control = s->control,
		.norm_unas = Always(vs), .jump_unas = s->jump_unas};
}


tenv set_unassigned(tenv te, Set<var> un) {
  if (te->le == null) return te;
  fenv fe = get_fenv(te);
  fenv fe2 = &Fenv(fe->labels,fe->locals,fe->ok,un,
                   fe->return_typ,fe->type_vars);
  return put_fenv(te,fe2);
}

bool is_ok_continue(tenv te) {
  if (te->le == null) return false;
  fenv fe = get_fenv(te);
  return fe->ok->OK_continue;
}
bool is_ok_break(tenv te) {
  if (te->le == null) return false;
  fenv fe = get_fenv(te);
  return (fe->ok->OK_switch_break || fe->ok->OK_loop_break);
}
bool is_ok_fallthru(tenv te) {
  if (te->le == null) return false;
  fenv fe = get_fenv(te);
  return fe->ok->OK_fallthru;
}
tenv set_in_loop(tenv te) {
  if (te->le == null) env_err("Tcenv: unexpected set_in_loop");
  fenv fe = get_fenv(te);
  ok_ctrl_t c2 = &Ok_ctrl{.OK_continue=true,.OK_loop_break=true,
			.OK_switch_break=false,.OK_fallthru=false};
  fenv fe2 = &Fenv(fe->labels,fe->locals,c2,fe->uv,fe->return_typ,
		   fe->type_vars);
  return put_fenv(te,fe2);
}
tenv set_in_switch(tenv te) {
  if (te->le == null) env_err("Tcenv: unexpected set_in_switch");
  fenv fe = get_fenv(te);
  ok_ctrl_t c1 = fe->ok;
  ok_ctrl_t c2 = &Ok_ctrl{.OK_continue=c1->OK_continue,
			  .OK_loop_break=false,
			  .OK_switch_break=true,
			  .OK_fallthru=true};
  fenv fe2 = &Fenv(fe->labels,fe->locals,c2,fe->uv,fe->return_typ,
                   fe->type_vars);
  return put_fenv(te,fe2);
}
tenv clear_fallthru(tenv te) {
  if (te->le == null) return te;
  fenv fe = get_fenv(te);
  ok_ctrl_t c1 = fe->ok;
  // avoid allocating a new env unless the state really changes
  if (fe->ok->OK_fallthru) {
    ok_ctrl_t c2 = &Ok_ctrl{.OK_continue=c1->OK_continue,
			    .OK_loop_break=c1->OK_loop_break,
			    .OK_switch_break=c1->OK_switch_break,
			    .OK_fallthru=false};
    fenv fe2 = &Fenv(fe->labels,fe->locals,c2,fe->uv,fe->return_typ,
		     fe->type_vars);
    return put_fenv(te,fe2);
  } else
    return te;
}
tenv add_label(tenv te,var v) {
  if (te->le == null) env_err("Tcenv: unexpected add_label");
  fenv fe  = get_fenv(te);
  fenv fe2 = &Fenv(&cons(v,fe->labels),fe->locals,fe->ok,
                   fe->uv,fe->return_typ,fe->type_vars);
  return put_fenv(te,fe2);
}
typ return_typ(tenv te) {
  if (te->le == null) env_err("Tcenv: unexpected return_typ");
  return get_fenv(te)->return_typ;
}

genv empty_genv() { 
  return &Genv{.namespaces  = empty_var_set->v,
               .structdecls = Dict::empty(String::strcmp),
               .enumdecls   = Dict::empty(String::strcmp),
               .xenumdecls  = Dict::empty(String::strcmp),
               .typedefs    = Dict::empty(String::strcmp),
               .ordinaries  = Dict::empty(String::strcmp),
               .availables  = null};
}
