/* Type environments.

   An identifier can have at most one binding in each of the following:

   1) namespaces (after "namespace" or "using")
   2) structure tags (after "struct")
   3) union tags (after "union")
   4) structure or union members (after "." or "->")
   5) enum tags (after "enum")
   6) xenum tags (after "xenum")
   7) labels (after "goto", before ":")
   8) typedef names (in types)
   9) ordinary identifiers (the catch-all case)

   The ordinary identifiers include structure tags and enum and xenum
   constructors.

   The environment data structures below follow from this directly.
   Note that labels can only appear inside of functions, so they don't
   appear in global environments.  And structure and union members
   must be resolved on a per-structure/per-union basis (e.g., two
   structs can have members with the same names) so their bindings
   don't belong in our environments.

   Also, we don't currently implement union.
*/

/* During type checking we keep two parallel environments.  One is
   accessed by absolute name, the other by local name.  We need these
   two environments because what is defined in a namespace is
   different from what is available in the namespace.  E.g.,

      extern int z;
      namespace Foo {
        int x;
        namespace Bar {
          int y = x;
        }
      }

   Here x is available in the inner namespace Bar but not defined
   there.  The absolute namespace will have entries for ::z, ::Foo::x,
   ::Foo::Bar, and ::Foo::Bar::y.  The relative namespace just after
   the definition of y will have entries for x, y, and z.
*/

#include "core.h"
#include "list.h"
#include "dict.h"
#include "set.h"
#include "dict.h"
#include "slowdict.h"
#include "position.h"
#include "absyn.h"
#include "tcenv.h"
#include "tcutil.h"
#include "string.h"
#include "absynpp.h"

namespace Tcenv;

using Core;
using List;
using Set;
using Position;
using Absyn;
using Tcutil;

xenum exn {Env_error};

`a env_err<`a>(string msg) {
  fprintf(cyc_stdout,"Error: %s\n",msg);
  fflush(cyc_stdout);
  throw Env_error();
}

/////////////////////////// Type Definitions /////////////////////////////////

// Type environments 
struct Tenv {
  list<var>                    ns; // current namespace
  Dict::Dict<list<var>,genv_t> ae; // absolute environment
  Opt_t<frames<fenv_t>>        le; // is null except in functions
};

// Global environments -- what's declared in a global scope 
struct Genv {
  Set<var>                    namespaces;
  Dict::Dict<var,structdecl@> structdecls;
  Dict::Dict<var,enumdecl@>   enumdecls;
  Dict::Dict<var,xenumdecl@>  xenumdecls;
  Dict::Dict<var,typedefdecl> typedefs; // no indirection b/c no redeclaration
  Dict::Dict<var,resolved_t>  ordinaries;
  list<list<var>>             availables; // "using" namespaces
};

// Used to tell what an ordinary identifer refers to 
enum Resolved {
  VarRes(binding_t); // includes unresolved variant
  StructRes(structdecl);
  EnumRes(enumdecl,enumfield);
  XenumRes(xenumdecl,enumfield);
};

// Models the nesting of the RTCG constructs 
enum Frames<`a> {
  Outermost(`a);
  Frame(`a,enum Frames<`a>);
  Hidden(`a,enum Frames<`a>);
};

enum Unassigned {
  Always(Set<var>);  // unassigned after expression
  Boolean(Set<var>,Set<var>); // unassigned when true, when false
};

enum Jumpee { 
  NotLoop_j;
  CaseEnd_j;
  FnEnd_j;
  Stmt_j(stmt);
};

static struct CtrlEnv {
  jumpee_t continue_stmt;
  jumpee_t break_stmt;
  $(stmt, list<tvar>, list<typ>) * fallthru_stmt; // null => not allowed
  jumpee_t next_stmt; // needed to calculate break_stmt
  // The next_stmt field needs to be correct only when we might enter
  // a loop or switch. (i.e. when we call set_in_loop or set_in_switch)
};
typedef struct CtrlEnv @ ctrl_env_t;

// This part is shared throughout type-checking of a function.
// Hence mutations are seen by all subsequent type-checking, which is easier
// than threading labels which must be function-wide unique anyway.
static struct SharedFenv {
  typ                            return_typ;
  Dict::Dict<var,stmt>           seen_labels;
  SlowDict::Dict<var,list<stmt>> needed_labels;  // FIX: check empty when done!
  Dict::Dict<int,typ>            block_to_rgn;   // adding tvars lazily
  int                            next_block_num; // for "gensymming" blocks
};  

// Local function environments -- this is getting a bit out of hand, no?
struct Fenv {
  struct SharedFenv @   shared;
  list<tvar>            type_vars; // type variables that can occur free
  Dict::Dict<var,binding_t> locals;// binding will be Param_b, Local_b, or Pat_b
  stmt                  encloser;  // nearest stmt with a binder or a try
  ctrl_env_t            ctrl_env;
  int                   curr_block_num;
};

//////////////////////// Top-level Environment Manipulation //////////////////

tenv tc_init() {
  // Initialize globals
  empty_var_set    = &Opt(Set::empty(String::zstrcmp));

  // Set up initial environment so that xenum exn is defined
  genv_t ge     = empty_genv();
  _      top_ns = null;
  ge->xenumdecls = Dict::insert(ge->xenumdecls, exn_name[1], 
				(xenumdecl @)&$(exn_xed));
  _ ae = Dict::insert(Dict::empty(varlist_cmp), top_ns, ge);
  return &Tenv(top_ns,ae,null);
}

// Lookup a namespace relative to the current namespace
static genv_t lookup_namespace(tenv te, segment loc, list<var> ns) {
  return Dict::lookup(te->ae, resolve_namespace(te,loc,ns));
}

// lookup functions 
static list<var> outer_namespace(list<var> ns) {
  if (ns == null) 
    return env_err("Tcenv::outer_namespace");
  return List::rev(List::rev(ns)->tl);
}

// FIX: never actually returns null
static $(list<var>,`a) * scoped_lookup<`a>(tenv te, segment loc, 
					   `a lookup(genv_t,var), var v) {
  list<var> cns = te->ns; // current namespace
  int num_results = 0;
  $(list<var>,`a) * result = null; // def assignment too dumb
  while (true) {
    genv_t ge = Dict::lookup(te->ae,cns);
    // Check available namespaces
    for (let nss = ge->availables; nss != null; nss = nss->tl) {
      genv_t ge2 = Dict::lookup(te->ae,nss->hd);
      try {
	result = &$(nss->hd,lookup(ge2,v));
	++num_results;
      } catch { case Dict::Absent: break; /* ignore */}
    }
    // Check current namespace
    try {
      result = &$(cns,lookup(ge,v));
      ++num_results;
    } catch { case Dict::Absent: break; /* ignore */ }

    if(num_results > 1) 
      Tcutil::terr(loc,xprintf("%s is ambiguous-",v));
    if(num_results > 0)
      return result;

    if (cns == null) 
      throw Dict::Absent();
    // v is not defined in current namespace, look in next outer
    cns = outer_namespace(cns);
  }
}

static resolved_t lookup_ordinary_global_f(genv_t ge,var v) {
  return Dict::lookup(ge->ordinaries,v);
}
static resolved_t lookup_ordinary_global(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  try {
    if (nsl == null)
      return scoped_lookup(te, loc, lookup_ordinary_global_f, v)[1];
    genv_t ge = lookup_namespace(te,loc,nsl);
    return Dict::lookup(ge->ordinaries,v);
  } catch { case Dict::Absent: return VarRes(Unresolved_b); }
}

list<var> resolve_namespace(tenv te, segment loc, list<var> ns) {
  if (ns == null)
    // null means the current namespace
    return te->ns;
  list<var> cns = te->ns; // current namespace
  list<list<var>> result = null;
  while (true) {
    genv_t ge = Dict::lookup(te->ae,cns);
    // Check namespaces that have been made available
    for (let nss = ge->availables; nss != null; nss = nss->tl) {
      genv_t ge2 = Dict::lookup(te->ae,nss->hd);
      if (Set::member(ge2->namespaces, ns->hd))
        result = &cons(List::append(cns,ns),result);
    }
    // Check current namespace
    if (Set::member(ge->namespaces, ns->hd))
      result = &cons(List::append(cns,ns),result);
    if (result != null) {
      if (result->tl != null)
        Tcutil::terr(loc,xprintf("%s is ambiguous_",ns->hd));
      return result->hd;
    }
    if (cns == null)
      throw Dict::Absent();
    // ns->hd is not defined in current namespace, look in next outer
    cns = outer_namespace(cns);
  }
}

// The absolute versions aren't being used right now, but it's
// important to think about whether they are correct in certain contexts.

static structdecl @ lookup_structdecl_f(genv_t ge,var v) {
  return Dict::lookup(ge->structdecls,v);
}
structdecl @ lookup_structdecl(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null)
    return scoped_lookup(te, loc, lookup_structdecl_f, v)[1];
  genv_t ge = lookup_namespace(te,loc,nsl);
  return Dict::lookup(ge->structdecls,v);
}
structdecl @ lookup_structdecl_abs(tenv te, segment loc,qvar q) {
  return Dict::lookup(Dict::lookup(te->ae,q[0])->structdecls, q[1]);
}

static enumdecl @ lookup_enumdecl_f(genv_t ge,var v) {
  return Dict::lookup(ge->enumdecls,v);
}
enumdecl @ lookup_enumdecl(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null)
    return scoped_lookup(te, loc, lookup_enumdecl_f, v)[1];
  genv_t ge = lookup_namespace(te,loc,nsl);
  return Dict::lookup(ge->enumdecls,v);
}
enumdecl @ lookup_enumdecl_abs(tenv te, segment loc,qvar q) {
  return Dict::lookup(Dict::lookup(te->ae,q[0])->enumdecls, q[1]);
}

static xenumdecl @ lookup_xenumdecl_f(genv_t ge,var v) {
  return Dict::lookup(ge->xenumdecls,v);
}

// DAN: some functionality from tcXenumdecl has moved to here.
Opt_t<xenumdecl@> lookup_xenumdecl(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null)
    // unqualified name, okay to fail -- that just means we have a new xenum
    try return &Opt(scoped_lookup(te, loc, lookup_xenumdecl_f, v)[1]);
    catch { case Dict::Absent: return null; }
  // qualified name, it's an error if the namespace is bad or the
  // xenum doesn't already exist.  In either case, we'll raise
  // Dict::Absent, so we give a more descriptive message for the
  // former.
  genv_t ge;
  try ge = lookup_namespace(te,loc,nsl);
  catch { case Dict::Absent: 
    Tcutil::terr(loc,"bad qualified name for xenum"); 
    throw Dict::Absent();
  }
  return &Opt(Dict::lookup(ge->xenumdecls,v));
}
// FIX: We probably need some of the lenience of lookup_xenumdecl here too.
//      I would add it, but I think xenums are still generally sorta busted.
Opt_t<xenumdecl@> lookup_xenumdecl_abs(tenv te, segment loc,qvar q) {
  return &Opt(Dict::lookup(Dict::lookup(te->ae,q[0])->xenumdecls, q[1]));
}

static typedefdecl lookup_typedefdecl_f(genv_t ge,var v) {
  return Dict::lookup(ge->typedefs,v);
}
typedefdecl lookup_typedefdecl(tenv te, segment loc, qvar q) {
  let &$(nsl,v) = q;
  if (nsl == null) 
    return scoped_lookup(te, loc, lookup_typedefdecl_f, v)[1];
  genv_t ge = lookup_namespace(te,loc,nsl);
  return Dict::lookup(ge->typedefs,v);
}

genv_t empty_genv() { 
  return &Genv{.namespaces  = empty_var_set->v,
               .structdecls = Dict::empty(String::zstrcmp),
               .enumdecls   = Dict::empty(String::zstrcmp),
               .xenumdecls  = Dict::empty(String::zstrcmp),
               .typedefs    = Dict::empty(String::zstrcmp),
               .ordinaries  = Dict::empty(String::zstrcmp),
               .availables  = null};
}

////////////////////////////// Frames Manipulation //////////////////////////

`a get_visible<`a>(frames<`a> f) {
  while(true)
    switch (f) {
    case Outermost(x): return x;
    case Frame(x,_):   return x;
    case Hidden(x,y):  f = y; break;
    }
}

frames<`a> put_visible<`a>(frames<`a> f, `a x) {
  switch (f) {
  case Outermost(x2): return Outermost(x);
  case Frame(x2,f2):  return Frame(x,f2);
  case Hidden(x2,f2): return Hidden(x2,put_visible(f2,x));
  }
}

frames<`a> apply_to_visible<`a>(`a g(`a), frames<`a> f) {
  return put_visible(f,g(get_visible(f)));
}

frames<`b> map_frames<`a,`b>(`b g(`a), frames<`a> f) {
  switch (f) {
  case Outermost(x): return Outermost(g(x));
  case Frame(x,f2):  return Frame(g(x),map_frames(g,f2));
  case Hidden(x,f2): return Hidden(g(x),map_frames(g,f2));
  }
}

fenv_t get_fenv(tenv te) {
  if (te->le == null) throw Env_error();
  return get_visible(te->le->v);
}

tenv put_fenv(tenv te, fenv_t fe) {
  if (te->le == null) throw Env_error();
  return &Tenv(te->ns, te->ae, &Opt(put_visible(te->le->v,fe)));
}

//////////////////// Function Environment Manipulation //////////////////////

static fenv_t copy_fenv_old_ctrl(fenv_t f) {
  return &Fenv(f->shared, f->type_vars, f->locals, f->encloser, f->ctrl_env,
	       f->curr_block_num);
}
static fenv_t copy_fenv_new_ctrl(fenv_t f) {
  // WARNING: fallthru_stmt shared with old
  ctrl_env_t c = f->ctrl_env;
  return &Fenv(f->shared, f->type_vars, f->locals, f->encloser,
	       &CtrlEnv(c->continue_stmt, c->break_stmt, c->fallthru_stmt,
			c->next_stmt),
	       f->curr_block_num);
}

typ return_typ(tenv te) {
  if(te->le == null) env_err("Tcenv: unexpected return_typ");
  return get_fenv(te)->shared->return_typ;
}

list<tvar> lookup_type_vars(tenv te) {
  if(te->le == null) return null;
  return get_fenv(te)->type_vars;
}

tenv add_type_vars(segment loc,tenv te,list<tvar> tvs) {
  if(te->le == null) env_err("Tcenv: unexpected add_type_vars");
  _ fe      = copy_fenv_old_ctrl(get_fenv(te));
  _ new_tvs = List::append(tvs,fe->type_vars);
  Tcutil::check_unique_tvars(loc,new_tvs);
  fe->type_vars = new_tvs;
  return put_fenv(te,fe);
}

// FIX: This can cause clashes with other programmer variables!!!!
static int shadow_ctr = 1;

tenv add_local_var(segment loc, tenv te, vardecl vd) {
  if(te->le == null) env_err("Tcenv: unexpected add_local_var");
  _ fe = copy_fenv_old_ctrl(get_fenv(te));
  _ v  = vd->name[1];
  if(Dict::member(fe->locals,v))
    vd->shadow = ++shadow_ctr;
  fe->locals = Dict::insert(fe->locals,v,Local_b(vd));
  return put_fenv(te,fe);
}

// assume uniqueness has been checked elsewhere
tenv add_pat_var(segment loc, tenv te, vardecl vd) {
  if(te->le == null) env_err("Tcenv: unexpected add_pat_var");
  _ fe = copy_fenv_old_ctrl(get_fenv(te));
  _ v  = vd->name[1];
  if(Dict::member(fe->locals,v))
    vd->shadow = ++shadow_ctr;
  fe->locals = Dict::insert(fe->locals,v,Pat_b(vd));
  return put_fenv(te,fe);
}

resolved_t lookup_ordinary(tenv te,segment loc,qvar q) {
  let &$(nsl,v) = q;
  if (nsl != null || te->le == null)
    return lookup_ordinary_global(te,loc,q);
  _ fe = get_fenv(te);
  try return VarRes(Dict::lookup(fe->locals,v));
  catch {case Dict::Absent: return lookup_ordinary_global(te,loc,q);}
}

void process_continue(tenv te, stmt s, Opt_t<stmt> * sopt) {
  if (te->le == null) env_err("Tcenv: unexpected process_continue");
  switch (get_fenv(te)->ctrl_env->continue_stmt) {
  case Stmt_j(s2):
    s2->non_local_preds = &cons(s,s2->non_local_preds);
    *sopt = &Opt(s2);
    return;
  case NotLoop_j: terr(s->loc, "continue not in a loop");     return;
  case CaseEnd_j: env_err("Tcenv: continue dest is CaseEnd"); return;
  case FnEnd_j:   env_err("Tcenv: continue dest is CaseEnd"); return;
  }
}
void process_break(tenv te, stmt s, Opt_t<stmt> * sopt) {
  if (te->le == null) env_err("Tcenv: unexpected process_break");
  fenv_t fe = get_fenv(te);
  switch (fe->ctrl_env->break_stmt) {
  case Stmt_j(s2):
    s2->non_local_preds = &cons(s,s2->non_local_preds);
    *sopt = &Opt(s2);
    return;
  case NotLoop_j: 
    terr(s->loc, "break not in a loop or switch"); 
    return;
  case FnEnd_j:   
    // Note doing this here is more conservative than in control-flow.
    // Eg: while(true) if(false) break; else return 0;
    // But it's a pain to do in control flow because there is no stmt dest
    if(fe->shared->return_typ != VoidType)
      terr(s->loc, "break causes function not to return a value");
    return;
  case CaseEnd_j:
    // Analogous comment to previous case applies.
    terr(s->loc, "break causes outer switch clause to implicitly fallthru");
    return;
  }
}
void process_goto(tenv te, stmt s, var l, Opt_t<stmt> * sopt) {
  if (te->le == null) env_err("Tcenv: unexpected process_goto");
  fenv_t fe    = get_fenv(te);
  _      sopt2 = Dict::lookup_opt(fe->shared->seen_labels, l);
  if(sopt2 == null) {
    _ needed = fe->shared->needed_labels;
    _ slopt  = SlowDict::lookup_opt(needed, l);
    if(slopt == null) 
      slopt = &Opt(null);
    fe->shared->needed_labels = SlowDict::insert(needed,l,&cons(s,slopt->v));
  } else {
    sopt2->v->non_local_preds = &cons(s, sopt2->v->non_local_preds);
    *sopt = sopt2;
  }
}
$(stmt,list<tvar>,list<typ>)* process_fallthru(tenv te,stmt s,Opt_t<stmt>*sopt){
  if (te->le == null) env_err("Tcenv: unexpected process_fallthru");
  fenv_t fe  = get_fenv(te);
  _      ans = fe->ctrl_env->fallthru_stmt;
  if(ans != null) {
    ans[0]->non_local_preds = &cons(s, ans[0]->non_local_preds);
    *sopt = &Opt(ans[0]);
  }
  return ans;
}

tenv set_fallthru(tenv te, $(list<tvar>,list<vardecl>) * pat_typ, stmt body) {
  if(te->le == null) env_err("Tcenv: unexpected set_fallthru");
  _ ft_typ = null;
  for(_ vds = pat_typ[1]; vds!=null; vds=vds->tl)
    ft_typ = &cons(vds->hd->type,ft_typ);
  ft_typ = List::imp_rev(ft_typ);
  fenv_t fe = copy_fenv_new_ctrl(get_fenv(te));
  fe->ctrl_env->fallthru_stmt = &$(body,pat_typ[0],ft_typ);
  return put_fenv(te,fe);
}
// fallthru is illegal in the last case
tenv clear_fallthru(tenv te) {
  if(te->le == null) env_err("Tcenv: unexpected clear_fallthru");
  fenv_t fe = copy_fenv_new_ctrl(get_fenv(te));
  fe->ctrl_env->fallthru_stmt = null;
  return put_fenv(te,fe);
}

tenv set_in_loop(tenv te, stmt continue_dest) {
  if (te->le == null) env_err("Tcenv: unexpected set_in_loop");
  fenv_t fe = copy_fenv_new_ctrl(get_fenv(te));
  fe->ctrl_env->continue_stmt = Stmt_j(continue_dest);
  fe->ctrl_env->break_stmt    = fe->ctrl_env->next_stmt; // break goes to next
  fe->ctrl_env->next_stmt     = Stmt_j(continue_dest);   // next starts as cont
  return put_fenv(te,fe);
}

// each non-last case must also call set_fallthru, here we just 
// change the break destination
tenv set_in_switch(tenv te) {
  if (te->le == null) env_err("Tcenv: unexpected set_in_switch");
  fenv_t fe  = copy_fenv_new_ctrl(get_fenv(te));
  fe->ctrl_env->break_stmt = fe->ctrl_env->next_stmt; // break goes to next
  fe->ctrl_env->next_stmt  = CaseEnd_j; // prevent nested break to fallthru
  return put_fenv(te,fe);
}

tenv set_next(tenv te, jumpee_t j) {
  if (te->le == null) env_err("Tcenv: unexpected set_next");
  fenv_t fe = copy_fenv_new_ctrl(get_fenv(te));
  fe->ctrl_env->next_stmt = j;
  return put_fenv(te,fe);
}

tenv add_label(tenv te, var v, stmt s) {
  if (te->le == null) env_err("Tcenv: unexpected add_label");
  _ fe     = get_fenv(te);
  _ needed = fe->shared->needed_labels;
  _ sl_opt = SlowDict::lookup_opt(needed, v);
  if(sl_opt != null) {
    fe->shared->needed_labels = SlowDict::delete(needed, v);
    // backpatching
    let sl = sl_opt->v;
    s->non_local_preds = sl; 
    for(; sl != null; sl = sl->tl)
      switch (sl->hd->r) {
      case Goto_s(_,*so): *so = &Opt(s); break;
      default: env_err("Tcenv: add_label backpatching of non-goto"); break;
      }
  }
  if(Dict::member(fe->shared->seen_labels, v))
    Tcutil::terr(s->loc, xprintf("Repeated label: %s", v));
  fe->shared->seen_labels = Dict::insert(fe->shared->seen_labels, v, s);
  return te;
}

bool all_labels_resolved(tenv te) {
  return SlowDict::is_empty(get_fenv(te)->shared->needed_labels);
}

stmt get_encloser(tenv te) {
  if (te->le == null) env_err("Tcenv: unexpected get_encloser");
  return get_fenv(te)->encloser;
}
tenv set_encloser(tenv te, stmt s) {
  if (te->le == null) env_err("Tcenv: unexpected set_encloser");
  fenv_t fe  = copy_fenv_old_ctrl(get_fenv(te));
  fe->encloser = s;
  return put_fenv(te,fe);
}

tenv new_block(tenv te) {
  if (te->le == null) env_err("Tcenv: unexpected new_block");
  fenv_t fe = copy_fenv_old_ctrl(get_fenv(te));
  ++fe->shared->next_block_num;
  fe->curr_block_num = fe->shared->next_block_num;
  return put_fenv(te,fe);
}
int curr_block(tenv te) {
  if (te->le == null) env_err("Tcenv: unexpected curr_block");
  return get_fenv(te)->curr_block_num;
}
typ block_to_typ(tenv te, int block_num) {
  // NOTE: should only be called with the block field of a non-global!
  if (te->le == null) env_err("Tcenv: unexpected block_to_typ");
  _ fe = get_fenv(te);
  _ d  = fe->shared->block_to_rgn;
  if(Dict::member(d,block_num))
    return Dict::lookup(d,block_num);
  // KLUDGE: The tyvar will be fresh b/c block_num is unique and
  //         all user tyvars start with `.
  _ ans = VarType(&$(string_of_int(block_num),RgnKind));
  fe->shared->block_to_rgn = 
    Dict::insert(fe->shared->block_to_rgn,block_num,ans);
  return ans;
}

// KLUDGE: Tcexp::lhs_const assumes the outermost block is 0 and
// decides that the parameters live in that block!
fenv_t new_fenv(fndecl fd) {
  _ locals = Dict::empty(String::zstrcmp);
  for(_ args = fd->args; args != null; args = args->tl)
    locals = Dict::insert(locals, args->hd[0], Param_b(args->hd));
  return &Fenv{.shared        = &SharedFenv(fd->ret_type,
					    Dict::empty(String::zstrcmp),
					    SlowDict::empty(String::zstrcmp),
					    Dict::empty(Core::intcmp),
					    0),
 	       .type_vars     = fd->tvs, // assumed unique
	       .locals        = locals,  // assumed unique
	       .encloser      = fd->body, // careful -- self loop at top!!!
	       .ctrl_env      = &CtrlEnv(NotLoop_j,
					 NotLoop_j,
					 null,
					 FnEnd_j),
	       .curr_block_num = 0};
}

///////////////////////////// Synthesis (CHANGING SOON) //////////////////////

struct Synth { typ type; };

typ synth_typ(synth s) {
  return s.type;
}

synth synth_set_typ(synth s, typ t) {
  s.type = t;
  return s;
}

tenv layer_synth(tenv te, synth syn) { return te; }

$(tenv,tenv) bool_layer_synth(tenv te, synth syn) { return $(te,te); }

synth standard_synth(tenv te, typ t) { return Synth(t); }

// useful for error expressions
synth wild_synth(tenv te) { return standard_synth(te,wildtyp()); }

// synth we get for more statements -- standard_synth with void type
synth skip_synth(tenv te) { return standard_synth(te, VoidType); }

// synth we get upon return or continue
synth empty_synth(tenv te) { return wild_synth(te); }

// synth we get upon a break, goto, or throw 
synth forward_jump_synth(tenv te) { return wild_synth(te); }

// synth we get for sequencing.  
synth seq_synth(synth s1, synth s2) { return s2; }

// synth we get upon join of two if statements or switch cases etc.
synth join_synth(synth s1, synth s2) { return s2; }

synth switch_bottom(synth s) { return s; }

synth loop_synth(synth e, synth s) { return Synth(VoidType); }
