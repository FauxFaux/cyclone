/* Unifying types.
   Copyright (C) 2001 Greg Morrisett, Dan Grossman, AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include <string.h>
#include "absynpp.h"
#include "evexp.h"
#include "relations-ap.h"
#include "tcutil.h"
#include "unify.h"
using Core;
using List;
using Absyn;
using Tcutil;
namespace Unify;
typedef Relations::relns_t<`r> relns_t<`r>;

datatype exn {Unify};
datacon(exn,Unify);

// Variables set to indicate where a failure occurs
static $(type_opt_t,type_opt_t) ts_failure = $(NULL,NULL);
static $(bool,bool) tqs_const = $(false,false); // optional for ts_failure
static const char ? failure_reason = NULL; // why the unification failed

static void fail_because(const char?`H reason) __attribute__((noreturn)) {
  failure_reason = reason;
  throw &Unify_val;
}

// print out an explanation about where and why a type error
// occurred -- this augments the high-level information with
// low-level specific details.
void explain_failure() {
  if(Position::num_errors >= Position::max_errors) 
    return;
  fflush(stderr);

  // for qualifier mismatches, there's no need to print out the types
  if (strcmp("(qualifiers don't match)", failure_reason) == 0) {
    fprintf(stderr, "  %s\n",failure_reason);
    return;
  }
  // for effects, we need to tell the pretty printer to print them out
  if (strcmp("(function effects do not match)", failure_reason) == 0) {
    let p = Absynpp::tc_params_r;
    p.print_all_effects = true;
    Absynpp::set_params(&p);
  }
  let $(t1f,t2f) = ts_failure;
  string_t s1 = t1f ? Absynpp::typ2string(t1f) : "<?>";
  string_t s2 = t2f ? Absynpp::typ2string(t2f) : "<?>";
  int pos = 2;
  fprintf(stderr,"  %s",s1);
  pos += numelts(s1);
  if (pos + 5 >= 80) {
    fprintf(stderr,"\n\t");
    pos = 8;
  } else {
    fprintf(stderr," ");
    pos++;
  }
  fprintf(stderr,"and ");
  pos += 4;
  if (pos + numelts(s2) >= 80) {
    fprintf(stderr,"\n\t");
    pos = 8;
  }
  fprintf(stderr,"%s ",s2);
  pos += numelts(s2)+1;
  if (pos + 17 >= 80) {
    fprintf(stderr,"\n\t");
    pos = 8;
  }
  fprintf(stderr,"are not compatible. ");
  pos += 17;
  if (failure_reason != NULL) {
    if (pos+strlen(failure_reason) >= 80) {
      fprintf(stderr,"\n\t");
    };
    fprintf(stderr,"%s",failure_reason);
  }
  fprintf(stderr,"\n");
  fflush(stderr);
}

// e1 and e2 represent requires/ensures clauses and we're to check
// logical equivalence.
static bool check_logical_equivalence(relns_t<`H> r1, relns_t<`H> r2) {
  if (r1 == r2) return true;
  return Relations::check_logical_implication(r1,r2) && 
         Relations::check_logical_implication(r2,r1);
}

bool unify_kindbound(kindbound_t kb1, kindbound_t kb2) {
  switch $(compress_kb(kb1), compress_kb(kb2)) {
  case $(&Eq_kb(k1), &Eq_kb(k2)): return k1 == k2;
  case $(&Less_kb(*x,k2), &Eq_kb(k1)):
    if (kind_leq(k1,k2)) {
      *x = new Opt(kb2);
      return true;
    } else return false;
  case $(&Eq_kb(k1), &Less_kb(*x,k2)):
    if (kind_leq(k1,k2)) {
      *x = new Opt(kb1);
      return true;
    } else return false;
  case $(&Less_kb(*x,k1), &Less_kb(*y,k2)):
    if (kind_leq(k1,k2)) {
      *y = new Opt(kb1);
      return true;
    } else if (kind_leq(k2,k1)) {
      *x = new Opt(kb2);
      return true;
    } else return false;
  case $(&Unknown_kb(*x), y): fallthru(y,x);
  case $(y, &Unknown_kb(*x)):
    *x = new Opt(y);
    return true;
  }
}

// see if evar occurs within t and also check that every free type
// variable in t occurs within the list env.
void occurs(type_t evar,region_t<`r> r,list_t<tvar_t,`r> env,type_t t) {
  t = compress(t);
  switch (t) {
  case &VarType(tv):
    if (!List::mem(fast_tvar_cmp,env,tv))
      fail_because("(type variable would escape scope)");
    break;
  case &Evar(_,rg,_,*sopt):
    if (t == evar) 
      fail_because("(occurs check)");
    else if (rg != NULL) occurs(evar,r,env,rg);
    else {
      // check to see if sopt is a subset of env
      bool problem = false;
      for (_ s = (*sopt)->v; s != NULL && !problem; s = s->tl)
        if (!List::mem(fast_tvar_cmp,env,s->hd))
          problem = true; 
      // for sopt to be a subset of env
      if (problem) {
        let result = NULL;
        for (_ s = (*sopt)->v; s != NULL; s = s->tl)
          if (List::mem(fast_tvar_cmp,env,s->hd))
            result = new List(s->hd,result);
        *sopt = new Opt(result);
      }
    }
    break;
  case &PointerType(pinfo):
    occurs(evar,r,env,pinfo.elt_type);
    occurs(evar,r,env,pinfo.ptr_atts.rgn);
    occurs(evar,r,env,pinfo.ptr_atts.nullable);
    occurs(evar,r,env,pinfo.ptr_atts.bounds);
    occurs(evar,r,env,pinfo.ptr_atts.zero_term);
    break;
    // FIX: shouldn't we check for occurrence within the bound?
  case &ArrayType(ArrayInfo{t2,_,_,zt,_}): 
    occurs(evar,r,env,t2); 
    occurs(evar,r,env,zt);
    break;
  // FIX: shouldn't we check for occurrence within requires and ensures clauses?
  case &FnType(FnInfo{tvs,eff,rt_tq,rt,args,_,cyc_varargs,rgn_po,...}):
    env = List::rappend(r,tvs,env);
    if (eff != NULL) occurs(evar,r,env,eff);
    occurs(evar,r,env,rt);
    for(; args != NULL; args = args->tl)
      occurs(evar,r,env,(*args->hd)[2]);
    if (cyc_varargs != NULL)
      occurs(evar,r,env,cyc_varargs->type);
    for (; rgn_po != NULL; rgn_po = rgn_po->tl) {
      let &$(r1,r2) = rgn_po->hd;
      occurs(evar,r,env,r1);
      occurs(evar,r,env,r2);
    }
    break;
  case &TupleType(args):
    for(; args != NULL; args = args->tl)
      occurs(evar,r,env,(*args->hd)[1]);
    break;
  case &AnonAggrType(_,fs):
    // FIX: shouldn't we check for occurrence within the requires clauses?
    for (; fs != NULL; fs = fs->tl)
      occurs(evar,r,env,fs->hd->type);
    break;
  case &TypedefType(_,ts,_,_): fallthru(ts);
  case &AppType(_,ts): 
    for (; ts != NULL; ts = ts->tl)
      occurs(evar,r,env,ts->hd);
    break;
    // FIX: should check within expression of ValueofType(e)
    // FIX: should check within expression of TypeofType(e)
  default: break;
  }
}

static void unify_it(type_t t1, type_t t2);

// unify types t1 and t2, returning true iff the unification succeeds
bool unify(type_t t1, type_t t2) {
  try {
    unify_it(t1,t2);
    return true;
  } catch { case &Unify: return false; }
}

// unify two lists of types
static void unify_list(list_t<type_t> t1, list_t<type_t> t2) {
  for (; t1 != NULL && t2 != NULL; t1 = t1->tl, t2 = t2->tl)
    unify_it(t1->hd,t2->hd);
  if (t1 != NULL || t2 != NULL)
    throw &Unify_val;
}

// unify two type qualifiers -- throws Unify unless they are the same
static void unify_tqual(tqual_t tq1, type_t t1, tqual_t tq2, type_t t2) {
  if (tq1.print_const && !tq1.real_const)
    impos("tq1 real_const not set.");
  if (tq2.print_const && !tq2.real_const)
    impos("tq2 real_const not set.");

  if ((tq1.real_const != tq2.real_const)
      || (tq1.q_volatile != tq2.q_volatile)
      || (tq1.q_restrict != tq2.q_restrict)) {
    ts_failure  = $(t1,t2);
    tqs_const = $(tq1.real_const,tq2.real_const);
    failure_reason = "(qualifiers don't match)";
    throw &Unify_val;
  }
  // clear these flags for error reporting purpose
  tqs_const = $(false,false);
}

// "unify" two effects
//    * We simply check that one
//      effect is a "subset" of the other.  If necessary, we instantiate
//      region or effect evars to force the subset relation.  This may
//      cause region or effect evars to become pinned down in an undesirable
//       way...  But the situation should be rare, and if it happens, users
//       should fall back on explicit typing.
//
// What we should really do:  generate some set equalities and hold
// on to them.  Then try to simplify and solve them later on after
// things have become more constrained.
static bool unify_effect(type_t e1, type_t e2) {
  e1 = normalize_effect(e1);
  e2 = normalize_effect(e2);
  if(subset_effect(false, e1, e2) && subset_effect(false, e2, e1))
    return true;
  if(subset_effect(true, e1, e2) && subset_effect(true, e2, e1))
    return true;
  return false;
}

static bool unify_const_exp_opt(exp_opt_t e1, exp_opt_t e2) {
  if(e1==NULL && e2==NULL)
    return true;
  if(e1==NULL || e2==NULL)
    return false;
  return Evexp::same_const_exp(e1,e2);
}

// the real work of unification
static void unify_it(type_t t1, type_t t2) {
  ts_failure = $(t1,t2);
  failure_reason = NULL;
  t1 = compress(t1);
  t2 = compress(t2);
  if (t1 == t2) return;
  switch (t1) {
  case &Evar(kind1,*ref1_ref,_,s1opt):
    // check that the evar doesn't occur in t2 and that any free variables
    // of t2 are contained in s1.
    occurs(t1,heap_region,s1opt->v,t2);
    let kind2 = type_kind(t2);
    // we can constrain the Evar to be equal to t2 only when the kind of
    // the evar is greater than or equal to the kind of t2 or t2 is an
    // evar that we can constrain to be equal to t1.
    if (kind_leq(kind2,kind1->v)) {
      *ref1_ref = t2;
      return;
    } 
    switch (t2) {
    case &Evar(_,*ref2_ref,_,s2opt):
      // check that s2 is a subset of s1
      let s1 = s1opt->v;
      for (_ s2 = s2opt->v; s2 != NULL; s2 = s2->tl)
	if (!List::mem(fast_tvar_cmp,s1,s2->hd))
	  fail_because("(type variable would escape scope)");
      if (!kind_leq(kind1->v,kind2)) 
	fail_because("(kinds are incompatible)");
      *ref2_ref = t1; 
      return;
      // this is a special hack to deal with the fact that a boxed evar
      // can't unify with a pointer type where we don't know whether or
      // not it's a ? pointer vs. a * or @ pointer.
    case &PointerType(pinfo) && kind1->v->kind == BoxKind:
      let c = compress(pinfo.ptr_atts.bounds);
      switch (c) {
      case &Evar(...):
	unify(c,bounds_one()); // FIX? should be unify_it??
	*ref1_ref = t2;
	return;
      default: fail_because("(kinds are incompatible)");
      }
    default: fail_because("(kinds are incompatible)");
    }
  default: break;
  }
  // t1 is not an evar

  switch ($(t2,t1)) {

  case $(&Evar(...),_): // t2 is an evar, t1 is not, so swap
    unify_it(t2,t1); return;

  case $(&AppType(&JoinCon,_), _):
  case $(_, &AppType(&JoinCon,_)):
  case $(&AppType(&AccessCon,_), _):
  case $(_, &AppType(&AccessCon,_)):
  case $(&AppType(&RgnsCon,_), _):
  case $(_, &AppType(&RgnsCon,_)):
    if (!unify_effect(t1,t2)) 
      fail_because("(effects don't unify)");
    return;

  case $(&AppType(c1,ts1),&AppType(c2,ts2)):
    if (tycon_cmp(c1,c2) != 0) 
      fail_because("(different type constructors)");
    unify_list(ts1,ts2);
    return;

  case $(&VarType(tv2),&VarType(tv1)):
    // identities should be resolved
    if (tv2->identity != tv1->identity) 
      fail_because("(variable types are not the same)");
    return;

  case $(&PointerType(PtrInfo(t2a,tqual2a,PtrAtts(rgn2,null2a,b2,zt2,_))),
         &PointerType(PtrInfo(t1a,tqual1a,PtrAtts(rgn1,null1a,b1,zt1,_)))):
    unify_it(t1a,t2a);
    unify_it(rgn2,rgn1); // the whole reason regions are "types"
    let orig_failure = failure_reason;
    if (!unify(zt1,zt2)) {
      ts_failure = $(t1,t2);
      fail_because("(not both zero terminated)");
    }
    unify_tqual(tqual1a,t1a,tqual2a,t2a);
    if (!unify(b1,b2)) {
      ts_failure = $(t1,t2);
      fail_because("(different pointer bounds)");
    }
    // Don't force the nullable's to be the same when the bounds are dyn.
    switch (compress(b1)) {
    case &AppType(&FatCon,_): 
      failure_reason = orig_failure;
      return;
    default: 
      failure_reason = "(incompatible pointer types)";
      unify_it(null1a,null2a);
      return;
    }

  case $(&ValueofType(e1), &ValueofType(e2)):
    if (!Evexp::same_const_exp(e1,e2))
      fail_because("(cannot prove expressions are the same)");
    return;

  case $(&ArrayType(ArrayInfo{t2a,tq2a,e1,zt1,_}),
         &ArrayType(ArrayInfo{t1a,tq1a,e2,zt2,_})):
    unify_it(t1a,t2a);
    unify_tqual(tq1a,t1a,tq2a,t2a);
    failure_reason = "(not both zero terminated)";
    unify_it(zt1,zt2);
    if(!unify_const_exp_opt(e1,e2))
      fail_because("(different array sizes)");
    return;

  case $(&FnType(FnInfo{tvs2,eff2,rt_tq2,rt2,args2,c_vararg2,cyc_vararg2,rpo2,atts2,req1,req_relns1,ens1,ens_relns1}),
         &FnType(FnInfo{tvs1,eff1,rt_tq1,rt1,args1,c_vararg1,cyc_vararg1,rpo1,atts1,req2,req_relns2,ens2,ens_relns2})):
    { region rgn; 
    list_t<$(tvar_t,type_t)@`rgn,`rgn> inst = NULL;
    while (tvs1 != NULL) {
      if (tvs2 == NULL) 
	fail_because("(second function type has too few type variables)");
      let kb1 = tvs1->hd->kind;
      let kb2 = tvs2->hd->kind;
      if (!unify_kindbound(kb1,kb2))
	fail_because(aprintf("(type var %s has different kinds %s and %s)",
			     Absynpp::tvar2string(tvs1->hd),
			     Absynpp::kind2string(tvar_kind(tvs1->hd,&bk)),
			     Absynpp::kind2string(tvar_kind(tvs2->hd,&bk))));
      inst = rnew(rgn) List(rnew(rgn) $(tvs2->hd,var_type(tvs1->hd)),inst);
      tvs1 = tvs1->tl;
      tvs2 = tvs2->tl;
    }
    if (tvs2 != NULL)
      fail_because("(second function type has too many type variables)");
    if (inst != NULL) {
      unify_it(new FnType(FnInfo{NULL,eff1,rt_tq1,rt1,args1,c_vararg1,
				   cyc_vararg1,rpo1,atts1,req1,req_relns1,ens1,
                                   ens_relns1}),
	       rsubstitute(rgn, inst,
                           new FnType(FnInfo{NULL,eff2,rt_tq2,rt2,args2,
                                               c_vararg2,cyc_vararg2,rpo2,
                                               atts2,req2,req_relns2,
                                               ens2,ens_relns2})));
      return;
    }
    }
    unify_it(rt1,rt2);
    unify_tqual(rt_tq1,rt1,rt_tq2,rt2);
    for (; args1!=NULL && args2!=NULL; args1 = args1->tl, args2 = args2->tl) {
      let $(_,tqa,ta) = *args1->hd;
      let $(_,tqb,tb) = *args2->hd;
      unify_it(ta,tb);
      unify_tqual(tqa,ta,tqb,tb);
    }
    ts_failure = $(t1,t2);
    if (args1 != NULL || args2 != NULL)
      fail_because("(function types have different number of arguments)");
    if (c_vararg1 != c_vararg2)
      fail_because("(only one function type takes C varargs)");
    // unify any cyclone varargs
    switch ($(cyc_vararg1, cyc_vararg2)) {
    case $(NULL,NULL): break;
    case $(NULL,_):
    case $(_,NULL): fail_because("(only one function type takes varargs)");
    case $(&VarargInfo{n1,tq1,tp1,i1}, &VarargInfo{n2,tq2,tp2,i2}):
      unify_it(tp1,tp2);
      unify_tqual(tq1,tp1,tq2,tp2);
      if (i1 != i2)
        fail_because("(only one function type injects varargs)");
    }
    // It's important to unify the effects and po after the arguments and
    // result so that the effects are pinned down as much as possible.
    bool bad_effect;
    if(eff1==NULL && eff2==NULL)
      bad_effect = false;
    else if(eff1==NULL || eff2==NULL)
      bad_effect = true;
    else 
      bad_effect = !unify_effect(eff1,eff2);
    ts_failure = $(t1,t2);
    if(bad_effect)
      fail_because("(function effects do not match)");
    if (!equiv_fn_atts(atts2,atts1))
      fail_because("(function types have different attributes)");
    if (!same_rgn_po(rpo2,rpo1))
      fail_because("(function types have different region lifetime orderings)");
    if (!check_logical_equivalence(req_relns1,req_relns2))
      fail_because("(@requires clauses not equivalent)");
    if (!check_logical_equivalence(ens_relns1,ens_relns2))
      fail_because("(@ensures clauses not equivalent)");
    return;

  case $(&TupleType(ts2), &TupleType(ts1)):
    for (; ts1 != NULL && ts2 != NULL; ts1 = ts1->tl, ts2 = ts2->tl) {
      let $(tqa,ta) = *ts1->hd;
      let $(tqb,tb) = *ts2->hd;
      unify_it(ta,tb);
      unify_tqual(tqa,ta,tqb,tb);
    }
    if (ts1 == NULL && ts2 == NULL) 
      return;
    ts_failure = $(t1,t2);
    fail_because("(tuple types have different numbers of components)");

  case $(&AnonAggrType(k2,fs2), &AnonAggrType(k1,fs1)):
    if(k1 != k2)
      fail_because("(struct and union type)"); 
    for (; fs1 != NULL && fs2 != NULL; fs1 = fs1->tl, fs2 = fs2->tl) {
      let f1 = fs1->hd;
      let f2 = fs2->hd;
      if (strptrcmp(f1->name,f2->name) != 0)
        fail_because("(different member names)");
      unify_it(f1->type, f2->type);
      unify_tqual(f1->tq, f1->type, f2->tq, f2->type);
      ts_failure = $(t1,t2);
      if (!same_atts(f1->attributes,f2->attributes))
        fail_because("(different attributes on member)");
      if(!unify_const_exp_opt(f1->width,f2->width))
        fail_because("(different bitfield widths on member)");
      if(!unify_const_exp_opt(f1->requires_clause,f2->requires_clause))
        fail_because("(different @requires clauses on member)");
    }
    if (fs1 != NULL || fs2 != NULL) 
      fail_because("(different number of members)");
    return;

  case $(&TypedefType(_,ts1,td1,_),&TypedefType(_,ts2,td2,_)):
    if (td1 != td2)
      fail_because("(different abstract typedefs)");
    failure_reason = "(type parameters to typedef differ)";
    unify_list(ts1,ts2);
    return;
  default: throw &Unify_val; // caller in charge failure_reason
  }
}
