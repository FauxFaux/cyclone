{
/* Lexer.
   Copyright (C) 2001 Greg Morrisett, AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

// WARNING: Because we now intern identifiers, you better never mutate them!
// WARNING: lex_init must be called for each source file!

#include <core.h>
#include <stdio.h>
#include <list.h>
#include <lexing.h>
#include <set.h>
#include <string.h>
#include <xarray.h>
#include "parse.h"
#include <position.h>
#include <dict.h>

using Core;
using List;
using Lexing;
using Parse;
using Absyn;
using Position;

void yyerror(string_t<`H> s) { 
  post_error(mk_err_parse(segment_of_abs(yylloc.first_line,
					 yylloc.last_line), 
			  s));
} 

namespace Lex {

static struct Trie;
typedef struct Trie * trie_t;
tunion TrieChildren {
  Zero;
  One(int, trie_t);
  Many(trie_t @{64}); // enough room for id chars and `
};
static struct Trie {
  tunion TrieChildren children;
  int                 shared_str; // meaning depends on which trie -- see below
};

/////////////////////////////// Globals /////////////////////////////

// These must be (re-)initialized in lex_init.
static int    num_kws  = 0;
static int ?  kw_nums  = NULL;
static struct Xarray::Xarray<stringptr_t> * symbols  = NULL;
static trie_t ids_trie      = NULL;//int field is symbol index, 0 for not there
static trie_t typedefs_trie = NULL;//int field true iff path is a typedef

static int comment_depth = 0;

// These needn't be set by lex_init -- they're set while finding a token.
static $(sign_t,int)        token_int_pair = $(Signed,0);
static string_t             bogus_string   = "*bogus*";
static $(nmspace_t,var_t)   token_id_pair = $((nmspace_t)&rel_ns_null_value,
					      &bogus_string);

static char           token_char   = '\000';
static string_t       token_string = "";
static $(sign_t,int)@ token_int    = &token_int_pair;
static qvar_t         token_qvar   = &token_id_pair;

static int runaway_start = 0;

static void err(string_t<`H> msg,Lexbuf<`a> lb) {
  seg_t s = segment_of_abs(lexeme_start(lb),lexeme_end(lb));
  post_error(mk_err_lex(s,msg));
}
static void runaway_err(string_t<`H> msg,Lexbuf<`a> lb) {
  seg_t s = segment_of_abs(runaway_start,lexeme_start(lb));
  post_error(mk_err_lex(s,msg));
}

// ************************** RESERVED WORDS **************************
// the bool is true when the keyword is a C keyword as opposed to a
// Cyclone keyword.  
static $(string_t,short,bool) rw_array[] = {
  $("__attribute__", ATTRIBUTE, true),
  $("abstract", ABSTRACT, false),
  $("auto", AUTO, true),
  $("break", BREAK, true),
  $("calloc", CALLOC, false),
  $("case", CASE, true),
  $("catch", CATCH,true),
  $("char", CHAR, true),
  $("const", CONST, true),
  $("continue", CONTINUE, true),
  $("default", DEFAULT, true),
  $("do", DO, true),
  $("double", DOUBLE, true),
  $("else", ELSE, true),
  $("enum", ENUM, true),
  $("export", EXPORT, false),
  $("extern", EXTERN, true),
  $("fallthru", FALLTHRU, false),
  $("float", FLOAT, true),
  $("for", FOR, true),
  $("__gen", GEN, false),
  $("goto", GOTO, true),
  $("if", IF, true),
  $("inline", INLINE, true),
  $("__inline__", INLINE, true),
  $("int", INT, true),
  $("let", LET, false),
  $("long", LONG, true),
  $("malloc", MALLOC, false),
  $("namespace", NAMESPACE, false),
  $("new", NEW, false),
  $("NOZEROTERM",NOZEROTERM_kw, false),
  $("NULL", NULL_kw, false),
  $("offsetof", OFFSETOF, true),
  $("__cyclone_port_on__", PORTON, false),
  $("__cyclone_port_off__", PORTOFF, false),
  $("rcalloc", RCALLOC, false),
  $("region_t", REGION_T, false),
  $("region", REGION, false),
  $("regions", REGIONS, false),
  $("register", REGISTER, true),
  $("reset_region", RESET_REGION, false),
  $("restrict", RESTRICT, true),
  $("return", RETURN, true),
  $("rmalloc", RMALLOC, false),
  $("rnew", RNEW, false),
  $("short", SHORT, true),
  $("signed", SIGNED, true),
  $("sizeof", SIZEOF, true),
  $("sizeof_t", SIZEOF_T, false),
  $("static", STATIC, true),
  $("struct", STRUCT, true),
  $("switch", SWITCH, true),
  $("tag_t", TAG_T, false),
  $("throw", THROW, false),
  $("try", TRY, false),
  $("tunion", TUNION, false),
  $("typedef", TYPEDEF, true),
  $("union", UNION, true),
  $("unsigned", UNSIGNED, true),
  $("using", USING, false),
  $("void", VOID, true),
  $("volatile", VOLATILE, true),
  $("while", WHILE, true),
  $("xtunion", XTUNION, false),
  $("ZEROTERM", ZEROTERM_kw, false)
};

static int num_keywords(bool include_cyclone_keywords) {
  int sum = 0;
  for (unsigned i = 0; i < rw_array.size; i++)
    if (include_cyclone_keywords || rw_array[i][2]) 
      sum++;
  return sum;
}

///////////////////////// Trie manipulation ///////////////////////
static int trie_char(int c) {
  // get the legal chars into a narrow range starting at 0
  if(c >= 95) return c - 59;
  else if(c > 64) return c - 55;
  return c - 48;
}

static trie_t trie_lookup(trie_t t, string_t buff, int offset, int len) {
  int    i    = offset;
  int    last = offset + len - 1;
  while(i <= last) {
    switch(t->children) {
    case &Many(arr):
      // walk down one level
      int ch = trie_char(buff[i]);
      if(arr[ch] == NULL)
	arr[ch] = new Trie(Zero,0);
      t = arr[ch];
      ++i;
      break;
    case &One(one_ch, one_trie):
      // walk down one level
      if(one_ch == buff[i]) {
	t = one_trie;
      } else {
	let arr = new {for j < 64: NULL};
	arr[trie_char(one_ch)] = one_trie;
	let ch = trie_char(buff[i]);
	arr[ch] = new Trie(Zero,0);
	t->children = new Many(arr); 
	t = arr[ch];
      }
      ++i;
      break;
    case Zero:
      // new string -- extend the trie
      while(i <= last) {
	let next = new Trie(Zero,0);
	t->children = new One(buff[i++], next);
	t = next;
      }
      return t;
    }
  }
  return t;
}

static int str_index(string_t buff, int offset, int len) {
  let t = trie_lookup(ids_trie, buff, offset, len);
  // build string if necessary and return
  if(t->shared_str == 0) {
    let newstr = new_string(len+1);
    zstrncpy((char ?NOZEROTERM)newstr,buff+offset,len);
    int ans = Xarray::add_ind((Xarray::xarray_t<stringptr_t>)symbols, 
			      new ((string_t)newstr));
    t->shared_str = ans;
  }
  return t->shared_str;
}

static int str_index_lbuf(Lexbuf<`a> lbuf) {
  return str_index(lbuf->lex_buffer, 
		   lbuf->lex_start_pos,
		   lbuf->lex_curr_pos - lbuf->lex_start_pos);
}

static void insert_typedef(stringptr_t sptr) {
  let s = *sptr;
  let t = trie_lookup(typedefs_trie, s, 0, s.size-1);
  t->shared_str = true;
  return;
}

static stringptr_t get_symbol(int symbol_num) {
  return Xarray::get((Xarray::xarray_t<stringptr_t>)symbols, symbol_num);
}

// ************************ INTEGER CONSTANTS ************************

  // String to integer conversions.  Core::int_of_string does not handle
  // all of the cases we want: it does not handle a trailing 'u', 'U',
  // 'l', or 'L'; and in particular, it does not treat '0'['0'-'7'] as
  // an octal number.  

  // copied from Core
static int int_of_char(char c) {
  if ('0'<=c && c<='9')      return c-'0';
  else if ('a'<=c && c<='f') return 10+c-'a';
  else if ('A'<=c && c<='F') return 10+c-'A';
  else throw new Invalid_argument("string to integer conversion");
}

 
// FIX: We should really have 8-bytes to store a long literal!!!
//      That is, we and the previous version totally ignore the L!!!
static $(sign_t, int)@ intconst(Lexbuf<`a> lbuf, int start, int end, int base) {
  unsigned int n    = 0;
  int          end2 = lbuf->lex_curr_pos - end;
  mstring_t    buff = lbuf->lex_buffer;
  int          i    = start + lbuf->lex_start_pos;
  for(int i = start + lbuf->lex_start_pos; i < end2; ++i) {
    char c = buff[i];
    switch (c) {
        // incorrect to return as soon as we see 'u' 'U' if l isn't ignored
    case 'u': fallthru;
    case 'U': return new $(Unsigned,(signed int)n); 
    case 'l': break;
    case 'L': break;
    default: n = n*base + (unsigned int)int_of_char(c); break;
    }
  }
  return new $(Signed, (signed int)n);
}

// ************************* STRING CONSTANTS *************************

char string_buffer_v[]ZEROTERM = {'x','x','x','x','x','x','x','x','x','x',0};
mstring_t string_buffer = (mstring_t)string_buffer_v;
int    string_pos    = 0;
void store_string_char(char c) {
  int sz = string_buffer.size - 1;
  if (string_pos >= sz) {
    int newsz = sz;
    while (string_pos >= newsz) newsz = newsz * 2;
    mstring_t str = new {for i < newsz : (i < sz) ? string_buffer[i] : '\000'};
    string_buffer = str;
  }	
  string_buffer[string_pos] = c;
  ++string_pos;
}
mstring_t get_stored_string() {
  mstring_t str = substring(string_buffer,0,string_pos);
  string_pos = 0;
  return str;
} 

// ******************* NAMESPACE, USING, AND TYPEDEF  *******************

static struct Ldecls {
  // records typedefs and namespaces declared in a scope
  Set::set_t<var_t> typedefs;
  Set::set_t<var_t> namespaces;
};
typedef struct Ldecls @ldecls_t;

static struct Lvis {  // the King lives!
  // records the namespaces whose declarations are visible in a scope
  list_t<var_t>         current_namespace;
  list_t<list_t<var_t>> imported_namespaces;
};
typedef struct Lvis @lvis_t;

static struct Lstate {
  // lstack is the current nested scope structure,
  // decls is the global declaration mapping
  List_t<lvis_t>                     lstack; 
  Dict::dict_t<list_t<var_t>,ldecls_t> decls;
};
typedef struct Lstate @lstate_t;

static opt_t<lstate_t> lstate = NULL;

static void typedef_init() {
  let init_lvis   = new Lvis{.current_namespace=NULL,
                             .imported_namespaces=NULL};
  let init_lstack = new List(init_lvis, NULL);
  Dict::dict_t<list_t<var_t,`H>,ldecls_t> init_decls = 
    Dict::insert(Dict::empty(varlist_cmp),
                 NULL,
                 new Ldecls{.typedefs=Set::empty(zstrptrcmp),
                               .namespaces=Set::empty(zstrptrcmp)});
  lstate = new Opt(new Lstate{.lstack=init_lstack,.decls=init_decls});
}

static list_t<var_t> get_absolute_namespace(List_t<var_t,`H> ns) {
  // ns is a relative namespace, we return the absolute namespace
  var_t n = ns->hd;
  // For each enclosing scope...
  for (list_t<lvis_t> ls = lstate->v->lstack; ls != NULL; ls = ls->tl) {
    lvis_t lv = ls->hd; // ... see what namespaces are visible
    // ... and look in each such visible namespace
    list_t<list_t<var_t>> x = new List(lv->current_namespace,
                                       lv->imported_namespaces);
    for (; x != NULL; x = x->tl) {
      ldecls_t ld = Dict::lookup(lstate->v->decls,x->hd);
      // ... for namespace n
      if (Set::member(ld->namespaces,n))
        // OK, we know ns refers to x.hd+ns
        return List::append(x->hd,ns);
    }
  }
  yyerror(aprintf("undeclared namespace %s",str_sepstr(ns,"::")));
  return NULL; 
}

static void recompute_typedefs() {
  // Drop the old trie on the floor.
  typedefs_trie = new Trie(Zero,false);
  
 //For each enclosing scope, get the visible namespaces and add all the typedefs
  for (list_t<lvis_t> ls = lstate->v->lstack; ls != NULL; ls = ls->tl) {
    lvis_t lv = ls->hd; 
    list_t<list_t<var_t>> x = new List(lv->current_namespace, 
                                       lv->imported_namespaces);
    for (; x != NULL; x = x->tl) {
      ldecls_t ld = Dict::lookup(lstate->v->decls,x->hd);
      Set::iter(insert_typedef,ld->typedefs);
    }
  }
}

// This can stay the slow way because most identifiers are not qualified.
static bool is_typedef_in_namespace(List_t<var_t,`H> ns, var_t v) {
  list_t<var_t> ans = get_absolute_namespace(ns);
  try {
    ldecls_t ld = Dict::lookup(lstate->v->decls,ans);
    return Set::member(ld->typedefs,v);
  } catch { case Dict::Absent:
    return false;
  }
}
static bool is_typedef(List::list_t<var_t,`H> ns, var_t v) {
  if (ns != NULL)
    return is_typedef_in_namespace((List_t<var_t,`H>)ns,v);
  // all unqualified typedefs must be in the trie 
  // look ma -- fast lookup
  let s   = *v;
  int    len = s.size - 1;
  trie_t t   = typedefs_trie;
  for(int i = 0; i < len; ++i)
    switch (t->children) {
    case Zero: return false;
    case &One(one_ch, one_trie) && one_ch != s[i]: return false;
    case &One(_,      one_trie): t = one_trie; break;
    case &Many(arr):
      let next = arr[trie_char(s[i])];
      if(next == NULL)
	return false;
      t = next;
      break;
    }
  return t->shared_str;
}

void enter_namespace(var_t s) {
  list_t<var_t> ns = lstate->v->lstack->hd->current_namespace;
  list_t<var_t> new_ns = List::append(ns,new List(s,NULL));
  // Push the new namespace on the stack
  lstate->v->lstack =
    new List(new Lvis{.current_namespace = new_ns,.imported_namespaces = NULL},
             lstate->v->lstack);
  // If this is the first time the new namespace has been encountered,
  // make sure it is bound in the old namespace, and add an empty
  // environment for the new namespace
  ldecls_t ld = Dict::lookup(lstate->v->decls,ns);
  if (!Set::member(ld->namespaces,s)) {
    lstate->v->decls = Dict::insert(lstate->v->decls,
				    ns,
				    new Ldecls{.typedefs = ld->typedefs,
                                               .namespaces = 
                                               Set::insert(ld->namespaces, 
                                                           s)});
    lstate->v->decls = Dict::insert(lstate->v->decls,
				    new_ns,
				    new Ldecls{.typedefs= 
                                               Set::empty(zstrptrcmp),
                                               .namespaces= 
                                               Set::empty(zstrptrcmp)
				    });

  }
  // some more typedefs may be visible
  // recompute_typedefs(); // too slow! (does repeated work)
  Set::iter(insert_typedef,Dict::lookup(lstate->v->decls,new_ns)->typedefs);
}
void leave_namespace() {
  // we never leave the outermost namespace, so the cast is okay
  lstate->v->lstack = (List_t<lvis_t>)lstate->v->lstack->tl;
  recompute_typedefs();
}
void enter_using(qvar_t q) {
  _ ns;
  switch ((*q)[0]) {
  case Loc_n:
    ns = (List_t<stringptr_t>)(new List((*q)[1],NULL));
    break;
  case &Rel_n(y): fallthru(y);
  case &Abs_n(y):
    ns = (List_t<stringptr_t>)List::append(y,new List((*q)[1],NULL));
    break;
  }

  let ans      = get_absolute_namespace(ns);
  let imported = lstate->v->lstack->hd->imported_namespaces;

  lstate->v->lstack->hd->imported_namespaces = new List(ans,imported);
  
  // some more typedefs may be visible
  // recompute_typedefs(); // too slow! (does repeated work)
  Set::iter(insert_typedef,Dict::lookup(lstate->v->decls,ans)->typedefs);
}
void leave_using() {
  let imported = lstate->v->lstack->hd->imported_namespaces;
  lstate->v->lstack->hd->imported_namespaces = imported->tl;

  // some typedefs may no longer be visible
  recompute_typedefs();
}

void register_typedef(qvar_t q) {
  // FIX: we assume that q is not in fact qualified
  let current = lstate->v->lstack->hd->current_namespace;
  let ds      = lstate->v->decls;
  let ld      = Dict::lookup(ds,current);
  let new_ld  = new Ldecls{.typedefs   = Set::insert(ld->typedefs,(*q)[1]),
                           .namespaces = ld->namespaces};
  lstate->v->decls = Dict::insert(ds,current,new_ld);

  // FIX: We're really assuming it's unqualified here -- else need to
  //      decide if the namespace-list is a visible one
  insert_typedef((*q)[1]);
}

static short process_id(Lexbuf<`a> lbuf) {
  int symbol_num = str_index_lbuf(lbuf);

  // maybe it's a keyword
  if(symbol_num <= num_kws)
    return (short)kw_nums[symbol_num-1]; 

  let s = get_symbol(symbol_num);
  token_string = *s;

  // maybe it's a typedef
  if (is_typedef(NULL,s))
    return TYPEDEF_NAME;

  // alas, it's an identifier
  return IDENTIFIER;
}

static short process_qual_id(Lexbuf<`a> lbuf) {
  int       i   = lbuf->lex_start_pos;
  int       end = lbuf->lex_curr_pos;
  mstring_t s   = lbuf->lex_buffer;

  list_t<var_t> rev_vs = NULL;

  while (i<end) {
    int start = i;
    for (; i < end && s[i] != ':'; i++) 
      ; // skip
    if (start == i) // no progress -- first char is ':'
      throw new Impossible("bad namespace");
    int vlen = i - start;
    var_t v    = get_symbol(str_index(s, start, vlen));
    rev_vs = new List(v,rev_vs);
    i += 2;
  }
  if (rev_vs == NULL)
    throw new Impossible("bad namespace");
  var_t         v  = rev_vs->hd;
  list_t<var_t> vs = List::imp_rev(rev_vs->tl);
  token_qvar = new $(new Rel_n(vs),v);
  if (is_typedef(vs,v))
    return QUAL_TYPEDEF_NAME;
  return QUAL_IDENTIFIER;
}

// Forward declarations of lexing functions 
int token(Lexbuf<`a>);
int strng(Lexbuf<`a>);
int comment(Lexbuf<`a>);
} // namespace Lex

// for parser -- must not be prefixed
int yylex() { 
 int ans = Lex::token(lbuf->v);
 yylloc.first_line = lexeme_start(lbuf->v);
 yylloc.last_line  = lexeme_end(lbuf->v);
 switch (ans) {
 case IDENTIFIER        : yylval = new String_tok(Lex::token_string); break;
 case TYPEDEF_NAME      : yylval = new String_tok(Lex::token_string); break;
 case QUAL_IDENTIFIER   : yylval = new QualId_tok(Lex::token_qvar);   break;
 case QUAL_TYPEDEF_NAME : yylval = new QualId_tok(Lex::token_qvar);   break;
 case TYPE_VAR          : yylval = new String_tok(Lex::token_string); break;
 case TYPE_INTEGER      : yylval = new Int_tok(Lex::token_int);       break;
 case INTEGER_CONSTANT  : yylval = new Int_tok(Lex::token_int);       break;
 case CHARACTER_CONSTANT: yylval = new Char_tok(Lex::token_char);     break;
 case FLOATING_CONSTANT : yylval = new String_tok(Lex::token_string); break;
 case STRING            : yylval = new String_tok(Lex::token_string); break;
 default: break;
 }
 return ans;
} 

namespace Lex;
////////////////////////// LEXING RULES /////////////////////////////
}

let newline = ('\n' | '\r' | "\r\n")

rule token = parse
/* Identifiers, type names, and keywords */
  ['A'-'Z''a'-'z']['A'-'Z''a'-'z''0'-'9''_']*
{ return process_id(lexbuf); }
| ['_']['A'-'Z''a'-'z''0'-'9''_']+
{ return process_id(lexbuf); }
/* Qualified identifiers and type names (e.g., Foo::bar) */
| (['A'-'Z''a'-'z']['A'-'Z''a'-'z''0'-'9''_']*':'':')+
  ['A'-'Z''a'-'z''_']['A'-'Z''a'-'z''0'-'9''_']*
      { return process_qual_id(lexbuf); }
/* New (int kinds): Type integer constants*/
| '`''0'['x''X']['0'-'9''a'-'f''A'-'F']+((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexbuf,3,0,16);
        return TYPE_INTEGER; }
| '`''0'['0'-'7']*((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexbuf,1,0,8);
        return TYPE_INTEGER; }
| '`''0'['0'-'9']+((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      /* This is really an error case according to OSI C --
         the leading 0 indicates this should be in octal. */
      /* FIX: print a warning message? */
      { token_int = intconst(lexbuf,1,0,10);
        return TYPE_INTEGER; }
| '`'['1'-'9']['0'-'9']*((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexbuf,1,0,10);
        return TYPE_INTEGER; }
/* Type variables */
| '`'['A'-'Z''a'-'z''_']['A'-'Z''a'-'z''0'-'9''_']*
   { token_string = *(get_symbol(str_index_lbuf(lexbuf))); 
      return TYPE_VAR; }
/* Integer constants */
| '0'['x''X']['0'-'9''a'-'f''A'-'F']+((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexbuf,2,0,16);
        return INTEGER_CONSTANT; }
| '0'['0'-'7']*((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexbuf,0,0,8);
        return INTEGER_CONSTANT; }
| '0'['0'-'9']+((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      /* This is really an error case according to OSI C --
         the leading 0 indicates this should be in octal. */
      /* FIX: print a warning message? */
      { token_int = intconst(lexbuf,0,0,10);
        return INTEGER_CONSTANT; }
| ['1'-'9']['0'-'9']*((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexbuf,0,0,10);
        return INTEGER_CONSTANT; }
/* Floating-point constants */
| ['0'-'9']+['e''E']['+''-']?['0'-'9']+['f''F''l''L']?
      { token_string = lexeme(lexbuf);
        return FLOATING_CONSTANT; }
| ((['0'-'9']+'.')|(['0'-'9']+'.'['0'-'9']+)|('.'['0'-'9']+))
  (['e''E']['+''-']?['0'-'9']+)?['f''F''l''L']?
      { token_string = lexeme(lexbuf);
        return FLOATING_CONSTANT; }
/* Operators */
| "==" { return  EQ_OP; }
| "!=" { return  NE_OP; }
| "<=" { return  LE_OP; }
| ">=" { return  GE_OP; }
| "++" { return  INC_OP; }
| "--" { return  DEC_OP; }
| "+=" { return  ADD_ASSIGN; }
| "-=" { return  SUB_ASSIGN; }
| "*=" { return  MUL_ASSIGN; }
| "/=" { return  DIV_ASSIGN; }
| "%="   { return  MOD_ASSIGN; }
| "|="   { return  OR_ASSIGN; }
| "^="   { return  XOR_ASSIGN; }
| "&="   { return  AND_ASSIGN; }
| "<<="  { return  LEFT_ASSIGN; }
| ">>="  { return  RIGHT_ASSIGN; } 
| "&&" { return  AND_OP; }
| "||" { return  OR_OP; }  
| "<<" { return  LEFT_OP; }
/* JGM: see shift_expr and relational_expr -- we now parse >> as two
 * separate > tokens.  */
| ">>" { return  RIGHT_OP; }
| "<>" { return  LEFT_RIGHT; }
| "->" { return PTR_OP; }
| "..." { return ELLIPSIS; }
| "::" { return COLON_COLON; }
/* comments */
| "#"[^ '\n' '\r']*(newline)      { return  token(lexbuf); }
| [' ' '\t' '\v' '\f' '\n' '\r']+ { return  token(lexbuf); }
| "//"[^'\n' '\r']* newline       { return  token(lexbuf); }
| "/*"  { comment_depth = 1; 
	  runaway_start = lexeme_start(lexbuf); 
	  comment(lexbuf); 
	  return token(lexbuf); }
/* string constants */
| "\""
  { string_pos = 0; 
    runaway_start = lexeme_start(lexbuf);
    while (strng(lexbuf))
      /* skip */;
    token_string = get_stored_string();
    return STRING; }
/* character constants */
| "'\\a'"   { token_char = '\a'; return CHARACTER_CONSTANT; }
| "'\\b'"   { token_char = '\b'; return CHARACTER_CONSTANT; }
| "'\\f'"   { token_char = '\f'; return CHARACTER_CONSTANT; }
| "'\\n'"   { token_char = '\n'; return CHARACTER_CONSTANT; }
| "'\\r'"   { token_char = '\r'; return CHARACTER_CONSTANT; }
| "'\\t'"   { token_char = '\t'; return CHARACTER_CONSTANT; }
| "'\\v'"   { token_char = '\v'; return CHARACTER_CONSTANT; }
| "'\\\\'"  { token_char = '\\'; return CHARACTER_CONSTANT; }
| "'\\''"   { token_char = '\''; return CHARACTER_CONSTANT; }
| "'\\\"'"  { token_char = '"';  return CHARACTER_CONSTANT; }
| "'\\?'"   { token_char = '?';  return CHARACTER_CONSTANT; }
/* octal character escapes */
| "'\\" ['0'-'7']['0'-'7']?['0'-'7']? "'"
            { token_char = (char)(*intconst(lexbuf,2,1,8))[1];
              return CHARACTER_CONSTANT;
            }
/* hex character escapes */
| "'\\x" ['0'-'9''A'-'Z''a'-'z']+ "'"
            { token_char = (char)(*intconst(lexbuf,3,1,16))[1];
              return CHARACTER_CONSTANT;
            }
| "'" [^ '\\' '\'' '\n'] "'"
    { token_char = lexeme_char(lexbuf,1);
      return CHARACTER_CONSTANT;
    }
/* End of file */
| eof { return -1; }
/* Default case */
| _   { return (int)(lexeme_char(lexbuf,0)); }

and strng = parse
    "\"" [' ''\n''\r''\t']* "\""
  /* concatenate adjacent strings */
                    { return 1; }
  | "\""            { return 0; }
  | "\\" newline    { return 1; }
  | "\\a"           { store_string_char('\a'); return 1; }
  | "\\b"           { store_string_char('\b'); return 1; }
  | "\\f"           { store_string_char('\f'); return 1; }
  | "\\n"           { store_string_char('\n'); return 1; }
  | "\\r"           { store_string_char('\r'); return 1; }
  | "\\t"           { store_string_char('\t'); return 1; }
  | "\\v"           { store_string_char('\v'); return 1; }
  | "\\\\"          { store_string_char('\\'); return 1; }
  | "\\'"           { store_string_char('\''); return 1; }
  | "\\\""          { store_string_char('"');  return 1; }
  | "\\?"           { store_string_char('?');  return 1; }
  /* octal character escapes */
  | "\\" ['0'-'7']['0'-'7']?['0'-'7']?
                    { store_string_char((char)(*intconst(lexbuf,1,0,8))[1]);
                      return 1;
                    }
  /* hex character escapes FIX? any length okay? */
  | "\\x" ['0'-'9''A'-'F''a'-'f']+
                    { store_string_char((char)(*intconst(lexbuf,2,0,16))[1]);
                      return 1;
                    }
  | [^ '"''\\''\n']   /* NOT double quote, backslash, or newline */
                    { /* for efficiency, should have a while loop here */
                      store_string_char (lexeme_char(lexbuf,0));
		      return 1; }
  | newline         { runaway_err("string ends in newline",lexbuf);
                      return 0;
                    }
  | eof             { runaway_err("unterminated string",lexbuf);
                      return 0;
                    }
  | _               { err("bad character following backslash in string",lexbuf);
		      return 1; }
and comment = parse
   "/*"             { ++comment_depth; return comment(lexbuf); }
 | "*/"             { --comment_depth; 
		      if (comment_depth > 0) 
			return comment(lexbuf);
		      return 0; /* return value ignored */
		    }
 | eof              { runaway_err("unterminated comment",lexbuf);
                      return 0; /* return value ignored */ 
                    }
 | '*'              { return comment(lexbuf); }
 | '/'              { return comment(lexbuf); }
 | [^ '/' '*']+     { return comment(lexbuf); }

{

void lex_init(bool include_cyclone_keywords) {
  ids_trie      = new Trie(Zero,0);
  typedefs_trie = new Trie(Zero,false);
  symbols       = Xarray::create(101,new ((string_t)""));
  // don't use first entry b/c 0 means "not a symbol"
  Xarray::add((Xarray::xarray_t<stringptr_t>)symbols, &bogus_string);
  num_kws       = num_keywords(include_cyclone_keywords);
  kw_nums       = new {for i < num_kws : 0};
  unsigned i = 0;
  unsigned rwsze = rw_array.size;
  for (unsigned j = 0; j < rwsze; j++) {
    if (include_cyclone_keywords || rw_array[j][2]) {
      let str = rw_array[j][0];
      str_index(str, 0, strlen(str));
      kw_nums[i] = rw_array[j][1];
      i++;
    }
  }
  typedef_init();
  comment_depth = 0;
}

}
