/* Abstract syntax.
   Copyright (C) 2001 Greg Morrisett, AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

// we define ABSYN_CYC to avoid redeclaring the abstract syntax -- see absyn.h
#define ABSYN_CYC 
#include "absyn.h"
#include "warn.h"
#include <string.h>
#include "tcutil.h"
#include "cyclone.h"
#include "evexp.h"

namespace Absynpp {
  extern string_t exp2string(Absyn::exp_t e);
}
using Core;
using List;

//FJS -- hack this in here until we create a file such as flags.cyc
namespace Cyclone{ 
  bool tovc_r = false;

  enum C_Compilers c_compiler = Gcc_c;
}

namespace Absyn;

// return a negative, zero, or positive int according to whether the
// first string list is less than, equal to, or greater than the second 
static int strlist_cmp(list_t<stringptr_t> ss1, list_t<stringptr_t> ss2) {
  for (; ss1 != NULL; ss1 = ss1->tl) {
    if (ss2 == NULL) return 1;
    int i = strptrcmp(ss1->hd,ss2->hd);
    if (i != 0) return i;
    ss2 = ss2->tl;
  }
  if (ss2 != NULL) return -1;
  return 0;
}
int varlist_cmp(list_t<var_t> vs1, list_t<var_t> vs2) {
  if((int)vs1==(int)vs2) return 0;
  return strlist_cmp(vs1,vs2);
}
int qvar_cmp(qvar_t q1, qvar_t q2) {
  if (q1 == q2) return 0;
  let &$(n1,v1) = q1;
  let &$(n2,v2) = q2;
  int i = strptrcmp(v1,v2);
  if (i != 0) return i;
  switch ($(n1,n2)) {
  case $({.Loc_n = _},{.Loc_n = _}): return 0;
  case $({.Rel_n = x1},{.Rel_n = x2}): return strlist_cmp(x1,x2);
  case $({.Abs_n = x1},{.Abs_n = x2}): return strlist_cmp(x1,x2);
  case $({.C_n = x1},{.C_n = x2}): return strlist_cmp(x1,x2);
  // we arbitrarily decide that Loc_n < Rel_n < Abs_n < C_n
  case $({.Loc_n = _},_): return -1;
  case $(_,{.Loc_n = _}): return 1;
  case $({.Rel_n = _},_): return -1;
  case $(_,{.Rel_n = _}): return 1;
  case $({.Abs_n = _},_): return -1;
  case $(_,{.Abs_n = _}): return 1; 
  }
}
// WARNING: Ignores the kinds.
int tvar_cmp(tvar_t tv1, tvar_t tv2) {
  int i = strptrcmp(tv1->name,tv2->name);
  if (i != 0) return i;
  return (tv1->identity) - (tv2->identity);
}
  
nmspace_t Loc_n = Nmspace{.Loc_n = 0};
nmspace_t Abs_n(list_t<var_t,`H> x, bool C_scope) { 
  return C_scope ? Nmspace{.C_n = x} : Nmspace{.Abs_n = x}; 
}
nmspace_t Rel_n(list_t<var_t,`H> x) { return Nmspace{.Rel_n = x}; }
nmspace_t rel_ns_null = Nmspace{.Rel_n = NULL};

bool is_qvar_qualified(qvar_t qv) {
  switch((*qv)[0]) {
  case {.Rel_n = NULL}:
  case {.Abs_n = NULL}:
  case {.Loc_n = _}: return false;
  default: return true;
  }
}

type_t new_evar(opt_t<kind_t,`H> k, opt_t<list_t<tvar_t,`H>,`H> env) {
  static int new_type_counter = 0;
  return new Evar(k,NULL,new_type_counter++,env);
}
type_t wildtyp(opt_t<list_t<tvar_t,`H>,`H> tenv) {
  return new_evar(&Tcutil::tmko,tenv); 
}

tqual_t empty_tqual(seg_t loc) { return Tqual(false,false,false,false,loc); }
tqual_t const_tqual(seg_t loc) { return Tqual(true, false,false,true, loc); }
tqual_t combine_tqual(tqual_t x,tqual_t y) { 
  return Tqual(x.print_const || y.print_const,
	       x.q_volatile || y.q_volatile,
	       x.q_restrict || y.q_restrict,
               x.real_const || y.real_const,
               Position::segment_join(x.loc,y.loc));
}
bool equal_tqual(tqual_t tq1, tqual_t tq2) {
  return ((tq1.real_const == tq2.real_const)
	  && (tq1.q_volatile == tq2.q_volatile)
	  && (tq1.q_restrict == tq2.q_restrict));
}

datacon(AbsynAnnot, EmptyAnnot);

union DatatypeInfo UnknownDatatype(struct UnknownDatatypeInfo udi) {
  return DatatypeInfo{.UnknownDatatype = udi};
}
union DatatypeInfo KnownDatatype(datatypedecl_t@`H d) {
  return DatatypeInfo{.KnownDatatype = d};
}
union DatatypeFieldInfo UnknownDatatypefield(struct UnknownDatatypeFieldInfo s){
  return DatatypeFieldInfo{.UnknownDatatypefield = s};
}
union DatatypeFieldInfo KnownDatatypefield(datatypedecl_t dd, datatypefield_t df) {
  return DatatypeFieldInfo{.KnownDatatypefield = $(dd,df)};
}
union AggrInfo UnknownAggr(aggr_kind_t ak,typedef_name_t n,opt_t<bool,`H> tagged) {
  return AggrInfo{.UnknownAggr = $(ak,n,tagged)};
}
union AggrInfo KnownAggr(aggrdecl_t@`H ad) {
  return AggrInfo{.KnownAggr = ad};
}
kindbound_t compress_kb(kindbound_t k) {
  switch (k) {
  case &Eq_kb(_): 
  case &Unknown_kb(NULL):
  case &Less_kb(NULL,_): return k;
  case &Unknown_kb(&Opt(*k2)): fallthru(k2);
  case &Less_kb(&Opt(*k2),_): 
    *k2 = compress_kb(*k2);
    return *k2;
  }
}
kind_t force_kb(kindbound_t kb) {
  switch (compress_kb(kb)) {
  case &Eq_kb(k): return k;
  case &Unknown_kb(*f): fallthru(f,&Tcutil::bk);
  case &Less_kb(*f,k):
    *f = new Opt(Tcutil::kind_to_bound(k)); 
    return k;
  }
}

//////////////////////////// Types ///////////////////////////////
type_t app_type(tycon_t c, ...type_t args) {
  return new AppType(c,from_array(args));
}
type_t valueof_type(exp_t e) {
  return new ValueofType(e);
}

// e.g., MAKE_NULLARY_TYPE(void_type,VoidCon) becomes
// static datatype TyCon.VoidCon void_type_cval = VoidCon;
// static datatype Type.AppType  void_type_tval = AppType(&void_type_cval,NULL);
// type_t void_type = &void_type_tval
#define MAKE_TYPE(N,F,C)\
  static datatype TyCon.F      N##_cval = C;\
  static datatype Type.AppType N##_tval = AppType(& N##_cval, NULL);\
         type_t                N        = & N##_tval
#define MAKE_NULLARY_TYPE(N,C)     MAKE_TYPE(N,C,C)
#define MAKE_INT_TYPE(N,SIGN,SIZE) MAKE_TYPE(N,IntCon,IntCon(SIGN,SIZE))
#define MAKE_FLOAT_TYPE(N,NUM)     MAKE_TYPE(N,FloatCon,FloatCon(NUM))

MAKE_NULLARY_TYPE(void_type,       VoidCon);
MAKE_NULLARY_TYPE(heap_rgn_type,   HeapCon);
MAKE_NULLARY_TYPE(unique_rgn_type, UniqueCon);
MAKE_NULLARY_TYPE(refcnt_rgn_type, RefCntCon);
MAKE_NULLARY_TYPE(true_type,       TrueCon);
MAKE_NULLARY_TYPE(false_type,      FalseCon);
MAKE_NULLARY_TYPE(fat_bound_type,  FatCon);
MAKE_INT_TYPE(schar_type,     Signed,   Char_sz);
MAKE_INT_TYPE(uchar_type,     Unsigned, Char_sz);
MAKE_INT_TYPE(char_type,      None,     Char_sz);
MAKE_INT_TYPE(sshort_type,    Signed,   Short_sz);
MAKE_INT_TYPE(ushort_type,    Unsigned, Short_sz);
MAKE_INT_TYPE(nshort_type,    None,     Short_sz);
MAKE_INT_TYPE(sint_type,      Signed,   Int_sz);
MAKE_INT_TYPE(uint_type,      Unsigned, Int_sz);
MAKE_INT_TYPE(nint_type,      None,     Int_sz);
MAKE_INT_TYPE(slong_type,     Signed,   Long_sz);
MAKE_INT_TYPE(ulong_type,     Unsigned, Long_sz);
MAKE_INT_TYPE(nlong_type,     None,     Long_sz);
MAKE_INT_TYPE(slonglong_type, Signed,   LongLong_sz);
MAKE_INT_TYPE(ulonglong_type, Unsigned, LongLong_sz);
MAKE_INT_TYPE(nlonglong_type, None,     LongLong_sz);
MAKE_FLOAT_TYPE(float_type, 1);
MAKE_FLOAT_TYPE(double_type, 2);
MAKE_FLOAT_TYPE(long_double_type, 3);

MAKE_NULLARY_TYPE(empty_effect,JoinCon); // see kludge in join_eff below

static datacon(TyCon,RgnHandleCon);
static datacon(TyCon,TagCon);
static datacon(TyCon,AccessCon);
static datacon(TyCon,RgnsCon);
static datacon(TyCon,ThinCon);
static datacon(TyCon,JoinCon);
type_t rgn_handle_type (rgntype_t r) { return app_type(&RgnHandleCon_val, r);  }
type_t tag_type        (type_t    t) { return app_type(&TagCon_val,       t);  }
type_t access_eff      (rgntype_t r) { return app_type(&AccessCon_val,    r);  }
type_t regionsof_eff   (type_t    t) { return app_type(&RgnsCon_val,      t);  }
type_t thin_bounds_type(type_t    t) { return app_type(&ThinCon_val,      t);  }
type_t join_eff(types_t  ts) { return new AppType(&empty_effect_cval,ts);}

type_t enum_type(typedef_name_t n, struct Enumdecl *`H d) {
  return app_type(new EnumCon(n,d));
}
type_t anon_enum_type(list_t<enumfield_t,`H> fs) {
  return app_type(new AnonEnumCon(fs));
}
type_t builtin_type(string_t<`H> s,kind_t k) {
  return app_type(new BuiltinCon(s,k));
}
type_t datatype_type(union DatatypeInfo di, types_t args) {
  return new AppType(new DatatypeCon(di),args);
}
type_t datatype_field_type(union DatatypeFieldInfo di, types_t args) {
  return new AppType(new DatatypeFieldCon(di),args);
}
type_t aggr_type(union AggrInfo ai, types_t args) {
  return new AppType(new AggrCon(ai),args);
}

type_t var_type(tvar_t x) { return new VarType(x); }
type_t gen_float_type(unsigned i) {
  switch (i) {
  case 0: return float_type;
  case 1: return double_type;
  case 2: return long_double_type;
  default: Warn::impos("gen_float_type(%d)",i);
  }
}
type_t int_type(sign_t sn, size_of_t sz) {
  switch (sn) {
  case Signed:
    switch (sz) {
    case Char_sz:  return schar_type;
    case Short_sz: return sshort_type;
    case Int_sz:   return sint_type;
    case Long_sz:  return slong_type;
    case LongLong_sz: 
    default:       return slonglong_type;
    }
  case Unsigned:
    switch (sz) {
    case Char_sz:  return uchar_type;
    case Short_sz: return ushort_type;
    case Int_sz:   return uint_type;
    case Long_sz:  return ulong_type;
    case LongLong_sz: 
    default:       return ulonglong_type;
    }
  case None:
  default:
    switch (sz) {
    case Char_sz:  return char_type;
    case Short_sz: return nshort_type;
    case Int_sz:   return nint_type;
    case Long_sz:  return nlong_type;
    case LongLong_sz: 
    default:       return nlonglong_type;
    }
  }
}

type_t thin_bounds_exp(exp_t e) {
  return thin_bounds_type(valueof_type(e));
}
type_t thin_bounds_int(unsigned int i) {
  exp_t e = uint_exp(i,0);
  e->topt = uint_type;
  return thin_bounds_exp(e);
}
type_t bounds_one() {
  static type_opt_t bone = NULL;
  let b = bone;
  if (b == NULL) {
    b = thin_bounds_int(1);
    bone = b;
  }
  return (type_t)b;
}

// wide characters
// from install_path.c
extern "C" {
  extern int Wchar_t_unsigned;
  extern int Sizeof_wchar_t;
}
type_t wchar_type() {
  switch (Sizeof_wchar_t) {
  case 1:
    /* This is a problem case.  If wchar_t is declared to be
       char instead of unsigned char or signed char in the
       header files, then
         wchar_t x[] = L"abc";
       won't typecheck, because wchar_t will be filled in by
       just char and the type of the initializer will be
       signed or unsigned char.  Since we have a sign None
       as well as Signed and Unsigned, this won't work. */
    return (Wchar_t_unsigned?uchar_type:schar_type);
  case 2: return (Wchar_t_unsigned?ushort_type:sshort_type);
  default:
    /* FIX: We're assuming 4 is the max size */
    return (Wchar_t_unsigned?uint_type:sint_type);
  }
}

// exceptions
static string_t exn_str = "exn";
static $(nmspace_t,var_t) exn_name_v = $(Nmspace{.Abs_n = NULL},&exn_str);
qvar_t exn_name = &exn_name_v;

datatypedecl_t exn_tud() {
  static string_t builtin_exns[] = 
    {"Null_Exception", "Array_bounds", "Match_Exception", "Bad_alloc"};
  static struct Datatypedecl * tud_opt = NULL;
  if(tud_opt == NULL) {
    list_t<datatypefield_t> tufs = NULL;
    for(int i=0; i < numelts(builtin_exns); ++i)
      tufs = new List(new Datatypefield(new $(Nmspace{.Abs_n=NULL},
					      new builtin_exns[i]),
					NULL,0,Extern),
		      tufs);
    tud_opt = new Datatypedecl(Extern, exn_name, NULL, new Opt(tufs), true);
  }
  return tud_opt;
}

type_t exn_type() {
  static type_opt_t exn_type_val = NULL;
  static type_opt_t eopt         = NULL;
  if (exn_type_val == NULL) {
    eopt = datatype_type(DatatypeInfo{.KnownDatatype = new exn_tud()},NULL);
    exn_type_val = at_type(eopt, heap_rgn_type, empty_tqual(0), false_type);
  }
  return exn_type_val;
}

qvar_t datatype_print_arg_qvar() {
  static qvar_opt_t q = NULL;
  if(q==NULL)
    q = new $(Abs_n(NULL,false), new "PrintArg");
  return q;
}
qvar_t datatype_scanf_arg_qvar() {
  static qvar_opt_t q = NULL;
  if(q==NULL)
    q = new $(Abs_n(NULL,false), new "ScanfArg");
  return q;
}

// unique region qvar.  We need this so that code generation properly
// attributes an allocation to the unique region.  This way, when
// doing dynamic region profiling we correctly tally the stuff stored
// in the unique region
// FIX: must correspond with def in core.h; should have just one def
qvar_t uniquergn_qvar() {
  static qvar_opt_t q = NULL;
  if(q==NULL)
    q = new $(Abs_n(new List(new "Core",NULL), false), new "unique_region");
  return q;
}
exp_t uniquergn_exp() {
  static exp_opt_t e = NULL;
  if(e==NULL) {
    let t = rgn_handle_type(unique_rgn_type);
    e = new Exp{.topt = t, .loc = 0, .annot = &EmptyAnnot_val, .r = 
		new Var_e(new Global_b(new Vardecl(Extern, uniquergn_qvar(),
						   0, empty_tqual(0), t, 
						   NULL, NULL, NULL, false)))};
  }
  return e;
}

// pointers
type_t pointer_type(struct PtrInfo s) {
  return new PointerType(s);
}

type_t fatptr_type(type_t t, type_t r, tqual_t tq, booltype_t zt) {
  return pointer_type(PtrInfo{t, tq, PtrAtts{.rgn = r, .nullable = true_type, 
					     .bounds = fat_bound_type,
					     .zero_term = zt, .ptrloc=NULL}});
}
type_t starb_type(type_t t, type_t r, tqual_t tq, ptrbound_t b, booltype_t zt) {
  return pointer_type(PtrInfo{t, tq, PtrAtts{.rgn = r, .nullable = true_type, 
					     .bounds = b, 
					     .zero_term = zt, .ptrloc=NULL}});
}
type_t atb_type(type_t t, type_t r, tqual_t tq, ptrbound_t b, booltype_t zt) {
  return pointer_type(PtrInfo{t, tq, PtrAtts{.rgn = r, .nullable = false_type, 
					     .bounds = b, 
					     .zero_term = zt, .ptrloc=NULL}});
}
type_t star_type(type_t t, type_t r, tqual_t tq, booltype_t zeroterm) { 
  return starb_type(t,r,tq,bounds_one(),zeroterm);
}
type_t cstar_type(type_t t, tqual_t tq) { 
  return star_type(t, heap_rgn_type, tq, false_type);
}
type_t at_type(type_t t, type_t r, tqual_t tq, booltype_t zeroterm) {
  return atb_type(t,r,tq,bounds_one(),zeroterm);
}
type_t string_type(type_t rgn) {
  return starb_type(char_type,rgn,empty_tqual(0),fat_bound_type,true_type);
}
type_t const_string_type(type_t rgn) {
  return starb_type(char_type,rgn,const_tqual(0),fat_bound_type,true_type);
}

type_t array_type(type_t elt_type, tqual_t tq, exp_opt_t num_elts, 
                  booltype_t zero_term, seg_t ztloc) {
  return new ArrayType(ArrayInfo{elt_type,tq,num_elts,zero_term,ztloc});
}

type_t typeof_type(exp_t e) {
  return new TypeofType(e);
}

// typedefs
type_t typedef_type(typedef_name_t n,types_t args,
                    struct Typedefdecl*`H d,type_opt_t defn) {
  return new TypedefType(n,args,d,defn);
}
// structs and unions
// WARNING: currently only Toc calls these, so we don't need to set
//          the aggrdecl field.  Beware using them anywhere else!
// (Probably we should require setting the third field even in Toc.)
static type_t aggregate_type(aggr_kind_t k, var_t name) {
  return new AppType(new AggrCon(UnknownAggr(k, new $(rel_ns_null,name), NULL)),NULL);
}
type_t strct(var_t name)     { return aggregate_type(StructA,name); }
type_t union_typ(var_t name) { return aggregate_type(UnionA,name);  }

type_t strctq(qvar_t name) {
  return aggr_type(UnknownAggr(StructA,name,NULL), NULL);
}
type_t unionq_type(qvar_t name) {
  return aggr_type(UnknownAggr(UnionA,name,NULL), NULL);
}
///////////////////////// Constants //////////////////////////////
cnst_t Char_c(sign_t sn,char c)          { return Cnst{.Char_c     = $(sn,c)}; }
cnst_t Wchar_c(string_t<`H> s)           { return Cnst{.Wchar_c    = s};       }
cnst_t Short_c(sign_t sn,short s)        { return Cnst{.Short_c    = $(sn,s)}; }
cnst_t Int_c(sign_t sn,int i)            { return Cnst{.Int_c      = $(sn,i)}; }
cnst_t LongLong_c(sign_t sn,long long l) { return Cnst{.LongLong_c = $(sn,l)}; }
cnst_t Float_c(string_t<`H> s,int i)     { return Cnst{.Float_c    = $(s, i)}; }
cnst_t String_c(string_t<`H> s)          { return Cnst{.String_c   = s};       }
cnst_t Wstring_c(string_t<`H> s)         { return Cnst{.Wstring_c  = s};       }

///////////////////////// Expressions //////////////////////////////
exp_t new_exp(raw_exp_t r, seg_t loc) {
  return new Exp{.topt=NULL, .r=r, .loc=loc, .annot=&EmptyAnnot_val};
}
exp_t New_exp(exp_opt_t rgn_handle, exp_t e, seg_t loc) {
  return new_exp(new New_e(rgn_handle,e), loc);
}
exp_t copy_exp(exp_t e) {
  return new *e;
}
exp_t const_exp(cnst_t c, seg_t loc) { 
  return new_exp(new Const_e(c), loc); 
}
exp_t null_exp(seg_t loc) { 
  static datatype Raw_exp.Const_e null_const = Const_e(Cnst{.Null_c = 0});
  return new_exp(&null_const, loc); 
}
exp_t int_exp(sign_t s,int i,seg_t seg) {return const_exp(Int_c(s,i),seg);}
exp_t signed_int_exp(int i, seg_t loc) {
  static datatype Raw_exp.Const_e szero = Const_e(Cnst{.Int_c = $(Signed,0)});
  static datatype Raw_exp.Const_e sone  = Const_e(Cnst{.Int_c = $(Signed,1)});
  if (i == 0) return new_exp(&szero, loc);
  else if (i == 1) return new_exp(&sone, loc);
  return int_exp(Signed,i,loc);
}
exp_t uint_exp(unsigned int i, seg_t loc) {
  static datatype Raw_exp.Const_e uzero = Const_e(Cnst{.Int_c =$(Unsigned,0)});
  static datatype Raw_exp.Const_e uone  = Const_e(Cnst{.Int_c = $(Unsigned,1)});
  if (i == 0) return new_exp(&uzero, loc);
  else if (i == 1) return new_exp(&uone,loc);
  else return int_exp(Unsigned,i,loc);
}
exp_t bool_exp(bool b, seg_t loc) { return signed_int_exp(b ? 1 : 0, loc); }
exp_t true_exp(seg_t loc)  { return bool_exp(true,  loc); }
exp_t false_exp(seg_t loc) { return bool_exp(false, loc); }
exp_t char_exp(char c, seg_t loc) { return const_exp(Char_c(None,c),loc); }
exp_t float_exp(string_t<`H> f, int i, seg_t loc) { 
  return const_exp(Float_c(f,i),loc);  
}
static exp_t str2exp(cnst_t (@f)(string_t<`H>), string_t<`H> s, seg_t loc) {
  return const_exp(f(s),loc);
}
exp_t wchar_exp  (string_t<`H> s, seg_t loc){ return str2exp(Wchar_c,  s,loc); }
exp_t string_exp (string_t<`H> s, seg_t loc){ return str2exp(String_c, s,loc); }
exp_t wstring_exp(string_t<`H> s, seg_t loc){ return str2exp(Wstring_c,s,loc); }

exp_t var_exp(qvar_t q, seg_t loc) {
  return new_exp(new Var_e(new Unresolved_b(q)), loc);
}
exp_t varb_exp(binding_t b, seg_t loc) {
  return new_exp(new Var_e(b), loc);
}
// same as var_exp now
exp_t unknownid_exp(qvar_t q, seg_t loc) { 
  return var_exp(q,loc);
}
exp_t pragma_exp(string_t<`H> s,seg_t loc) {
  return new_exp(new Pragma_e(s),loc);
}
exp_t primop_exp(primop_t p, list_t<exp_t,`H> es, seg_t loc) {
  return new_exp(new Primop_e(p,es),loc);
}
exp_t prim1_exp(primop_t p, exp_t e, seg_t loc) {
  return primop_exp(p, new List(e,NULL), loc);
}
exp_t prim2_exp(primop_t p, exp_t e1, exp_t e2, seg_t loc) {
  return primop_exp(p, new List(e1,new List(e2,NULL)), loc);
}
exp_t swap_exp(exp_t e1, exp_t e2, seg_t loc) {
  return new_exp(new Swap_e(e1,e2),loc);
}
exp_t add_exp(exp_t e1,exp_t e2,seg_t loc)   {return prim2_exp(Plus,e1,e2,loc);}
exp_t times_exp(exp_t e1,exp_t e2,seg_t loc){return prim2_exp(Times,e1,e2,loc);}
exp_t divide_exp(exp_t e1,exp_t e2,seg_t loc){return prim2_exp(Div,e1,e2,loc);}
exp_t eq_exp(exp_t e1,  exp_t e2, seg_t loc) {return prim2_exp(Eq,e1,e2,loc);}
exp_t neq_exp(exp_t e1, exp_t e2, seg_t loc) {return prim2_exp(Neq,e1,e2,loc);}
exp_t gt_exp(exp_t e1,  exp_t e2, seg_t loc) {return prim2_exp(Gt,e1,e2,loc);}
exp_t lt_exp(exp_t e1,  exp_t e2, seg_t loc) {return prim2_exp(Lt,e1,e2,loc);}
exp_t gte_exp(exp_t e1, exp_t e2, seg_t loc) {return prim2_exp(Gte,e1,e2,loc);}
exp_t lte_exp(exp_t e1, exp_t e2, seg_t loc) {return prim2_exp(Lte,e1,e2,loc);}

exp_t assignop_exp(exp_t e1, opt_t<primop_t,`H> popt, exp_t e2, seg_t loc) {
  return new_exp(new AssignOp_e(e1,popt,e2),loc);
}
exp_t assign_exp(exp_t e1, exp_t e2, seg_t loc) {
  return assignop_exp(e1,NULL,e2,loc);
}
exp_t increment_exp(exp_t e,incrementor_t i,seg_t loc) {
  return new_exp(new Increment_e(e,i),loc);
}
exp_t post_inc_exp(exp_t e,seg_t loc) {return increment_exp(e,PostInc,loc);}
exp_t pre_inc_exp (exp_t e, seg_t loc){return increment_exp(e,PreInc, loc);}
exp_t pre_dec_exp (exp_t e, seg_t loc){return increment_exp(e,PreDec, loc);}
exp_t post_dec_exp(exp_t e,seg_t loc) {return increment_exp(e,PostDec,loc);}
exp_t conditional_exp(exp_t e1,exp_t e2,exp_t e3,seg_t loc) {
  return new_exp(new Conditional_e(e1,e2,e3), loc);
}
exp_t and_exp(exp_t e1, exp_t e2, seg_t loc) {
  return new_exp(new And_e(e1,e2), loc);
}
exp_t or_exp(exp_t e1, exp_t e2, seg_t loc) {
  return new_exp(new Or_e(e1,e2), loc);
}
exp_t seq_exp(exp_t e1, exp_t e2, seg_t loc) {
  return new_exp(new SeqExp_e(e1,e2), loc);
}
exp_t unknowncall_exp(exp_t e, list_t<exp_t,`H> es, seg_t loc) {
  return new_exp(new FnCall_e(e,es,NULL,false), loc);
}
exp_t fncall_exp(exp_t e, list_t<exp_t,`H> es, seg_t loc) {
  return new_exp(new FnCall_e(e,es,NULL,true), loc);
}
exp_t noinstantiate_exp(exp_t e, seg_t loc) {
  return new_exp(new NoInstantiate_e(e), loc);
}
exp_t instantiate_exp(exp_t e, types_t ts, seg_t loc) {
  return new_exp(new Instantiate_e(e,ts), loc);
}
exp_t cast_exp(type_t t, exp_t e, bool user_cast, coercion_t c, seg_t loc) { 
  return new_exp(new Cast_e(t,e,user_cast,c), loc);
}
exp_t throw_exp(exp_t e, seg_t loc) { 
  return new_exp(new Throw_e(e,false),loc); 
}
exp_t rethrow_exp(exp_t e, seg_t loc) { 
  return new_exp(new Throw_e(e,true),loc); 
}
exp_t address_exp(exp_t e, seg_t loc) { return new_exp(new Address_e(e), loc); }
exp_t sizeoftype_exp(type_t t, seg_t loc) {
  return new_exp(new Sizeoftype_e(t), loc); 
}
exp_t sizeofexp_exp(exp_t e, seg_t loc) { 
  return new_exp(new Sizeofexp_e(e), loc); 
}
exp_t offsetof_exp(type_t t, list_t<offsetof_field_t,`H> ofs, seg_t loc) {
  return new_exp(new Offsetof_e(t,ofs), loc);
}
exp_t deref_exp(exp_t e,   seg_t loc) { return new_exp(new Deref_e(e), loc); }
exp_t aggrmember_exp(exp_t e, field_name_t n, seg_t loc) {
  return new_exp(new AggrMember_e(e,n,false,false), loc); 
}
exp_t aggrarrow_exp(exp_t e, field_name_t n, seg_t loc) {
  return new_exp(new AggrArrow_e(e,n,false,false), loc); 
}
exp_t subscript_exp(exp_t e1, exp_t e2, seg_t loc) {
  return new_exp(new Subscript_e(e1,e2), loc); 
}
exp_t tuple_exp(list_t<exp_t,`H> es, seg_t loc) {
  return new_exp(new Tuple_e(es), loc); 
}
exp_t stmt_exp(stmt_t s,seg_t loc) { 
  return new_exp(new StmtExp_e(s), loc); 
}
exp_t valueof_exp(type_t t, seg_t loc) {
  return new_exp(new Valueof_e(t), loc);
}
exp_t asm_exp(bool volatile_kw, string_t<`H> body, seg_t loc) {
  return new_exp(new Asm_e(volatile_kw,body),loc);
}
exp_t extension_exp(exp_t e, seg_t loc) {
  return new_exp(new Extension_e(e), loc);
}

exp_t array_exp(list_t<exp_t,`H> es, seg_t loc) {
  let dles = NULL;
  for (; es != NULL; es = es->tl)
    dles = new List(new $(NULL,es->hd),dles);
  dles = List::imp_rev(dles);
  return new_exp(new Array_e(dles),loc);
}
exp_t unresolvedmem_exp(opt_t<typedef_name_t,`H> n,
                        list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H> dles,
                        seg_t loc) {
  return new_exp(new UnresolvedMem_e(n,dles),loc);
}
///////////////////////// Statements ///////////////////////////////
stmt_t new_stmt(raw_stmt_t s, seg_t loc) { 
  return new Stmt{.r=s, .loc=loc, .annot=&EmptyAnnot_val};
}
static datatype Raw_stmt.Skip_s     Skip_s_val     = Skip_s;
static datatype Raw_stmt.Break_s    Break_s_val    = Break_s;
static datatype Raw_stmt.Continue_s Continue_s_val = Continue_s;
stmt_t skip_stmt    (seg_t loc) { return new_stmt(&Skip_s_val,     loc); }
stmt_t break_stmt   (seg_t loc) { return new_stmt(&Break_s_val,    loc); }
stmt_t continue_stmt(seg_t loc) { return new_stmt(&Continue_s_val, loc); }
stmt_t exp_stmt(exp_t e,seg_t loc) { return new_stmt(new Exp_s(e),loc); }
stmt_t return_stmt(exp_opt_t e,seg_t loc){return new_stmt(new Return_s(e),loc);}
stmt_t seq_stmts(list_t<stmt_t> ss, seg_t loc) {
  if (ss == NULL) return skip_stmt(loc);
  else if (ss->tl == NULL) return ss->hd;
  else return seq_stmt(ss->hd,seq_stmts(ss->tl,loc),loc);
}
stmt_t seq_stmt(stmt_t s1, stmt_t s2, seg_t loc) { 
  switch ($(s1->r,s2->r)) {
  case $(&Skip_s,_): return s2;
  case $(_,&Skip_s): return s1;
  default: return new_stmt(new Seq_s(s1,s2), loc); 
  }
}
stmt_t ifthenelse_stmt(exp_t e,stmt_t s1,stmt_t s2,seg_t loc) {
  return new_stmt(new IfThenElse_s(e,s1,s2),loc);
}
stmt_t while_stmt(exp_t e,stmt_t s,seg_t loc) { 
  return new_stmt(new While_s($(e,skip_stmt(e->loc)),s), loc);
}
stmt_t for_stmt(exp_t e1,exp_t e2,exp_t e3,stmt_t s,seg_t loc) {
  return new_stmt(new For_s(e1,$(e2,skip_stmt(e3->loc)),
                            $(e3,skip_stmt(e3->loc)),s),
		  loc);
}
stmt_t do_stmt(stmt_t s, exp_t e, seg_t loc) {
  return new_stmt(new Do_s(s,$(e,skip_stmt(e->loc))), loc);
}
stmt_t switch_stmt(exp_t e, list_t<switch_clause_t,`H> scs, seg_t loc) {
  return new_stmt(new Switch_s(e,scs,NULL), loc);
}
stmt_t trycatch_stmt(stmt_t s, list_t<switch_clause_t,`H> scs, seg_t loc) {
  return new_stmt(new TryCatch_s(s,scs,NULL), loc);
}
stmt_t fallthru_stmt(list_t<exp_t,`H> el, seg_t loc) { 
  return new_stmt(new Fallthru_s(el,NULL), loc); 
}
stmt_t goto_stmt(var_t lab, seg_t loc) {
  return new_stmt(new Goto_s(lab), loc);
}
stmt_t label_stmt(var_t v, stmt_t s, seg_t loc) {
  return new_stmt(new Label_s(v,s), loc);
}
stmt_t decl_stmt(decl_t d, stmt_t s, seg_t loc) {
  return new_stmt(new Decl_s(d,s), loc);
}
stmt_t declare_stmt(qvar_t x, type_t t, exp_opt_t init, stmt_t s, seg_t loc) {
  decl_t d = new_decl(new Var_d(new_vardecl(0,x,t,init)),loc);
  return new_stmt(new Decl_s(d,s),loc);
}
stmt_t assign_stmt(exp_t e1, exp_t e2, seg_t loc) {
  return exp_stmt(assign_exp(e1,e2,loc),loc);
}
/////////////////////////// Patterns //////////////////////////////
pat_t new_pat(raw_pat_t p, seg_t s) { return new Pat(p,NULL,s); }
pat_t exp_pat(exp_t e) { return new_pat(new Exp_p(e),e->loc); }
datatype Raw_pat.Wild_p Wild_p_val = Wild_p;
datatype Raw_pat.Null_p Null_p_val = Null_p;

////////////////////////// Declarations ///////////////////////////
decl_t new_decl(raw_decl_t r, seg_t loc) { return new Decl{.r=r, .loc=loc}; }
decl_t let_decl(pat_t p, exp_t e, seg_t loc) {
  return new_decl(new Let_d(p,NULL,e,NULL),loc);
}
decl_t letv_decl(list_t<vardecl_t,`H> vds, seg_t loc) {
  return new_decl(new Letv_d(vds),loc);
}
decl_t region_decl(tvar_t tv,vardecl_t vd,exp_opt_t open_exp,seg_t loc) {
  return new_decl(new Region_d(tv,vd,open_exp),loc);
}
decl_t alias_decl(tvar_t tv,vardecl_t vd,exp_t e,seg_t loc) {
  // assumes the variable's initializer is NULL
 return new_decl(new Let_d(new_pat(new AliasVar_p(tv,vd),loc),NULL,e,NULL),loc);
}

vardecl_t new_vardecl(seg_t varloc, qvar_t x, type_t t, exp_opt_t init) {
  return new Vardecl{.sc=Public, .name=x, .varloc = varloc,
			.tq=empty_tqual(0),
                        .type=t, .initializer=init, .rgn=NULL, 
                        .attributes=NULL, .escapes=false};
}
vardecl_t static_vardecl(qvar_t x, type_t t, exp_opt_t init) {
  return new Vardecl{.sc=Static, .name=x, .varloc = 0,.tq=empty_tqual(0),
                        .type=t, .initializer=init, .rgn=NULL,
                        .attributes=NULL, .escapes=false};
}
struct AggrdeclImpl @ aggrdecl_impl(list_t<tvar_t,`H> exists,
				    list_t<$(type_t,type_t)@`H,`H> po,
				    list_t<aggrfield_t,`H> fs, 
                                    bool tagged) {
  return new AggrdeclImpl{.exist_vars=exists, .rgn_po=po, 
                          .fields=fs, .tagged = tagged};
}
decl_t aggr_decl(aggr_kind_t k, scope_t s, typedef_name_t n,
		 list_t<tvar_t,`H> ts, struct AggrdeclImpl *`H i,
		 attributes_t atts, seg_t loc) {
  return new_decl(new Aggr_d(new Aggrdecl {.kind = k, .sc=s, .name=n, .tvs=ts,
					   .impl=i, .attributes = atts,
                                           .expected_mem_kind = false}),
		  loc);
}
type_decl_t aggr_tdecl(aggr_kind_t k, scope_t s, typedef_name_t n,
		 list_t<tvar_t,`H> ts, struct AggrdeclImpl *`H i,
		 attributes_t atts, seg_t loc) {
  return new TypeDecl(new Aggr_td(new Aggrdecl {.kind = k, .sc=s, .name=n, 
                                                .tvs=ts, .impl=i, 
                                                .attributes = atts,
                                                .expected_mem_kind = false}),
                      loc);
}
decl_t struct_decl(scope_t s,typedef_name_t n,
		   list_t<tvar_t,`H> ts, struct AggrdeclImpl *`H i,
                   attributes_t atts, seg_t loc) {
  return aggr_decl(StructA,s,n,ts,i,atts,loc);
}
decl_t union_decl(scope_t s,typedef_name_t n,
		  list_t<tvar_t,`H> ts, struct AggrdeclImpl *`H i,
		  attributes_t atts, seg_t loc) {
  return aggr_decl(UnionA,s,n,ts,i,atts,loc);
}
decl_t datatype_decl(scope_t s, typedef_name_t n, list_t<tvar_t,`H> ts,
		   opt_t<list_t<datatypefield_t,`H>,`H> fs, 
                   bool is_extensible, seg_t loc){
  return new_decl(new Datatype_d(new Datatypedecl(s,n,ts,fs,is_extensible)),
                  loc);
}
type_decl_t datatype_tdecl(scope_t s, typedef_name_t n, list_t<tvar_t,`H> ts,
                           opt_t<list_t<datatypefield_t,`H>,`H> fs, 
                           bool is_extensible, seg_t loc){
  return new TypeDecl(new Datatype_td(new Datatypedecl(s,n,ts,fs,
                                                       is_extensible)),
                      loc);
}

// We treat function types in argument or return position as an
// abbreviation for a non-nullable pointer to a function, that is,
//   int f(void g())(float)
// is the same as
//   int (@f(void (@g)()))(float)
// We do this in the parser by constructing every function type using 
// function_type, rather than mucking with the typechecker/unifier/etc.
type_t function_type(list_t<tvar_t,`H> tvs, type_opt_t eff_type, 
                     tqual_t ret_tqual, type_t ret_type, 
                     list_t<$(var_opt_t,tqual_t,type_t)@`H,`H> args, 
                     bool c_varargs, vararg_info_t *`H cyc_varargs,
                     list_t<$(type_t,type_t)@`H,`H> rgn_po,
                     attributes_t atts, exp_opt_t req, exp_opt_t ens) {
  for(let args2 = args; args2 != NULL; args2 = args2->tl)
    (*args2->hd)[2] = pointer_expand((*args2->hd)[2], true);
  return new FnType(FnInfo{.tvars = tvs, 
                              .ret_tqual = ret_tqual,
                              .ret_type = pointer_expand(ret_type,false),
                              .effect = eff_type, 
                              .args = args, 
                              .c_varargs = c_varargs, 
                              .cyc_varargs = cyc_varargs,
                              .rgn_po = rgn_po,
                              .attributes=atts,
                              .requires_clause = req,
                              .requires_relns = NULL,
                              .ensures_clause = ens,
                              .ensures_relns = NULL});
}
// MWH: use RgnKind here rather than TopRgnKind for fresh evars;
//   function pointers can't be unique at the moment
type_t pointer_expand(type_t t,bool fresh_evar) {
  switch (Tcutil::compress(t)) {
  case &FnType(_): return at_type(t,
                                  fresh_evar ? 
                                  new_evar(new Opt(&Tcutil::rk), NULL) 
				  : heap_rgn_type,
                                  empty_tqual(0),false_type);
  default: return t;
  }
}

// These are the lvalues of C:
//    exp      where
//    ---------------------------
//    name     name is a variable -- and not a function name or array!
//    e[k]
//    (e)      e is an lvalue
//    e.name   e is an lvalue
//    e->name
//    *e

// must be called after the expression is type-checked.
bool is_lvalue(exp_t e) {
  switch (e->r) {
  case &Var_e(&Funname_b(_)): return false;
  case &Var_e(&Global_b(vd)): fallthru(vd);
  case &Var_e(&Local_b(vd)):
    switch (Tcutil::compress(vd->type)) {
    case &ArrayType(_): return false;
    default: return true; 
    }
  case &Var_e(...):    
  case &AggrArrow_e(...):   
  case &Deref_e(...):           
  case &Subscript_e(...):    return true;
  case &AggrMember_e(e1,...):  return is_lvalue(e1);
  case &Instantiate_e(e1,...): return is_lvalue(e1);
  case &NoInstantiate_e(e1): return is_lvalue(e1);
  default:                   return false;
  }
}

struct Aggrfield * lookup_field(list_t<aggrfield_t> fields, var_t v) {
  for(let fs = fields; fs != NULL; fs = fs->tl)
    if (strptrcmp(fs->hd->name,v) == 0)
      return fs->hd;
  return NULL;
}
struct Aggrfield * lookup_decl_field(aggrdecl_t ad, var_t v) {
  return (ad->impl == NULL) ? NULL : lookup_field(ad->impl->fields,v);
}

$(tqual_t,type_t) * lookup_tuple_field(list_t<$(tqual_t,type_t)@`H> ts, int i) {
  for(; i != 0; --i) {
    if(ts == NULL)
      return NULL;
    ts = ts->tl;
  }
  if(ts == NULL)
    return NULL;
  return ts->hd;
}

string_t<`H> *decl_name(decl_t decl) {
  switch (decl->r) {
  case &Aggr_d(x):    return (*x->name)[1];
  case &Enum_d(x):    return (*x->name)[1];
  case &Typedef_d(x): return (*x->name)[1];
  case &Var_d(x):     return (*x->name)[1];
  case &Fn_d(x):      return (*x->name)[1];
  case &Porton_d:
  case &Portoff_d:
  case &Tempeston_d:
  case &Tempestoff_d:
  case &Let_d(...):
  case &Datatype_d(_):
  case &Letv_d(_):
  case &Namespace_d(_,_):
  case &Using_d(_,_):
  case &ExternC_d(...):
  case &ExternCinclude_d(...):
  case &Region_d(...): return NULL;
  }
}

// returns the decl from the list having the given name
struct Decl *lookup_decl(list_t<decl_t> decls, stringptr_t<`H> name) {
  _* dname;
  for (; decls != NULL; decls = decls->tl) {
    dname = decl_name(decls->hd);
    if (dname && !strptrcmp(dname,name))
      return decls->hd;
  }
  return NULL;
}

datacon(Attribute,Stdcall_att);      
datacon(Attribute,Cdecl_att);        
datacon(Attribute,Fastcall_att);
datacon(Attribute,Noreturn_att);     
datacon(Attribute,Const_att);
datacon(Attribute,Packed_att);
datacon(Attribute,Nocommon_att);
datacon(Attribute,Shared_att);
datacon(Attribute,Unused_att);
datacon(Attribute,Weak_att);
datacon(Attribute,Dllimport_att);
datacon(Attribute,Dllexport_att);
datacon(Attribute,No_instrument_function_att);
datacon(Attribute,Constructor_att);
datacon(Attribute,Destructor_att);
datacon(Attribute,No_check_memory_usage_att);
datacon(Attribute,Pure_att);
datacon(Attribute,Always_inline_att);

string_t attribute2string(attribute_t a) {
  switch (a) {
  case &Regparm_att(i): return aprintf("regparm(%d)",i);
  case &Stdcall_att: return "stdcall";
  case &Cdecl_att: return "cdecl";
  case &Fastcall_att: return "fastcall";
  case &Noreturn_att: return "noreturn";
  case &Const_att: return "const";
  case &Aligned_att(e): 
    if (e == NULL) return "aligned";
    else /* return aprintf("aligned(%d)",i);*/
      switch(Cyclone::c_compiler){
      case Cyclone::Gcc_c: return aprintf("aligned(%s)",Absynpp::exp2string(e));
      case Cyclone::Vc_c:  
      default: return aprintf("align(%s)",Absynpp::exp2string(e));
      }
  case &Packed_att: return "packed";
  case &Section_att(s): return aprintf("section(\"%s\")",s);
  case &Nocommon_att: return "nocommon";
  case &Shared_att: return "shared";
  case &Unused_att: return "unused";
  case &Weak_att: return "weak";
  case &Dllimport_att: return "dllimport";
  case &Dllexport_att: return "dllexport";
  case &No_instrument_function_att: return "no_instrument_function";
  case &Constructor_att: return "constructor";
  case &Destructor_att: return "destructor";
  case &No_check_memory_usage_att: return "no_check_memory_usage";
  case &Format_att(Printf_ft,n,m): return aprintf("format(printf,%u,%u)",n,m);
  case &Format_att(/*Scanf_ft*/_,n,m): 
    return aprintf("format(scanf,%u,%u)", n,m);
  case &Initializes_att(n): return aprintf("initializes(%d)",n);
  case &Noliveunique_att(n): return aprintf("noliveunique(%d)",n);
  case &Consume_att(n): return aprintf("consume(%d)",n);
  case &Pure_att: return "pure";
  case &Always_inline_att: return "always_inline";
  case &Mode_att(s): return aprintf("__mode__(\"%s\")",s); 
  case &Alias_att(s): return aprintf("alias(\"%s\")",s); 
 }
}

static int attribute_case_number(attribute_t att) {
  switch(att) {
  case &Regparm_att(_): return 0;
  case &Stdcall_att: return 1;
  case &Cdecl_att: return 2;
  case &Fastcall_att: return 3;
  case &Noreturn_att: return 4;
  case &Const_att: return 5;
  case &Aligned_att(_): return 6;
  case &Packed_att: return 7;
  case &Section_att(_): return 8;
  case &Nocommon_att: return 9;
  case &Shared_att: return 10;
  case &Unused_att: return 11;
  case &Weak_att: return 12;
  case &Dllimport_att: return 13;
  case &Dllexport_att: return 14;
  case &No_instrument_function_att: return 15;
  case &Constructor_att: return 16;
  case &Destructor_att: return 17;
  case &No_check_memory_usage_att: return 18;
  case &Format_att(...): return 19;
  case &Initializes_att(_): return 20;
  case _: return 21;
  }
}
int attribute_cmp(attribute_t att1, attribute_t att2) {
  switch($(att1,att2)) {
  case $(&Regparm_att(i1),&Regparm_att(i2)): fallthru(i1,i2);
  case $(&Initializes_att(i1), &Initializes_att(i2)): 
    return intcmp(i1,i2);
  case $(&Aligned_att(e1),&Aligned_att(e2)): 
    if (e1 == e2) return 0;
    if (e1 == NULL) return -1;
    if (e2 == NULL) return 1;
    return Evexp::const_exp_cmp(e1,e2);
  case $(&Section_att(s1),&Section_att(s2)): return strcmp(s1,s2);
  case $(&Format_att(ft1,i1,j1),&Format_att(ft2,i2,j2)):
    let ftc = intcmp((unsigned int)ft1, (unsigned int)ft2);
    if(ftc != 0) return ftc;
    let ic = intcmp(i1,i2);
    if(ic != 0) return ic;
    return intcmp(j1,j2);
  default:
    return intcmp(attribute_case_number(att1), attribute_case_number(att2));
  }
}
bool equal_att(attribute_t a1, attribute_t a2) {
  return attribute_cmp(a1,a2)==0;
}

// returns true when a is an attribute for function types
bool fntype_att(attribute_t a) {
  switch (a) {
  case &Regparm_att(i):    
  case &Fastcall_att:       
  case &Stdcall_att:        
  case &Cdecl_att:          
  case &Noreturn_att:       
  case &Pure_att:
  case &Format_att(...):
  case &Const_att:
  case &Noliveunique_att(_):
  case &Initializes_att(_):
  case &Consume_att(_): return true;
  default: return false;
  }
}

stringptr_t fieldname(int i) {
  // cache strings used for field names f0,f1,f2,...
  static string_t f0 = "f0";
  static stringptr_t field_names_v[1] = {&f0};
  static stringptr_t ?field_names = field_names_v;
  unsigned int fsz = numelts(field_names);
  if (i >= fsz)
    field_names = 
      new {for j < i+1 : 
	   (j < fsz) ? field_names[j] : new (string_t)aprintf("f%d",j)};
  return field_names[i];
}

$(aggr_kind_t,qvar_t) aggr_kinded_name(union AggrInfo info) {
  switch(info) {
  case {.UnknownAggr = $(ak,n,_)}: return $(ak,n);
  case {.KnownAggr = &&Aggrdecl(k,_,n,...)}: return $(k,n);
  }
}
aggrdecl_t get_known_aggrdecl(union AggrInfo info) {
  switch(info) {
  case {.UnknownAggr = _ }: Warn::impos("unchecked aggrdecl");
  case {.KnownAggr = &ad}: return ad;
  }
}
bool is_nontagged_nonrequire_union_type(type_t t) {
  switch(Tcutil::compress(t)) {
  case &AnonAggrType(UnionA,fs):     
    if (fs == NULL) return true;
    return (fs->hd->requires_clause == NULL);
  case &AppType(&AggrCon(info),_):
    switch (info) {
    case {.KnownAggr = &ad}: 
      if (ad->kind != UnionA) return false;
      let impl = ad->impl;
      if (impl->tagged) return false;
      let fields = impl->fields;
      if (fields == NULL) return true;
      return (fields->hd->requires_clause == NULL);
    case {.UnknownAggr = $(k,_,NULL)}: return k == UnionA;
    case {.UnknownAggr = $(k,_,&Opt(b))}: return k == UnionA && !b;
    }
  default: return false;
  }
}
bool is_require_union_type(type_t t) {
  switch(Tcutil::compress(t)) {
  case &AnonAggrType(UnionA,fs):     
    if (fs == NULL) return false;
    return (fs->hd->requires_clause != NULL);
  case &AppType(&AggrCon(info),_):
    switch (info) {
    case {.KnownAggr = &ad}: 
      if (ad->kind != UnionA) return false;
      let impl = ad->impl;
      if (impl->tagged) return false;
      let fields = impl->fields;
      if (fields == NULL) return false;
      return (fields->hd->requires_clause != NULL);
    case {.UnknownAggr = $(k,_,NULL)}: return false;
    case {.UnknownAggr = $(k,_,&Opt(b))}: return false;
    }
  default: return false;
  }
}

qvar_t binding2qvar(binding_t b) {
  switch (b) {
  case &Unresolved_b(qv): return qv;
  case &Global_b(vd):     fallthru(vd);
  case &Param_b(vd):      fallthru(vd);
  case &Local_b(vd):      fallthru(vd);
  case &Pat_b(vd):        return vd->name;
  case &Funname_b(fd):    return fd->name;
  }
}

var_t designatorlist_to_fieldname(list_t<designator_t> ds) {
  if(ds==NULL || ds->tl != NULL)
    Warn::impos("designator list not of length 1");
  switch(ds->hd) {
  case &FieldName(f):    return f;
  case &ArrayElement(_): Warn::impos("array designator in struct");
  }
}

bool type2bool(bool def, type_t t) {
  switch (Tcutil::compress(t)) {
  case &AppType(&TrueCon,_): return true;
  case &AppType(&FalseCon,_): return false;
  default: return def;
  }
}

datacon(Raw_decl,Porton_d);
datacon(Raw_decl,Portoff_d);
datacon(Raw_decl,Tempeston_d);
datacon(Raw_decl,Tempestoff_d);

bool porting_c_code = false;
bool no_regions = false;
