/* Post-translation tree-shaking
   Copyright (C) 2004 Dan Grossman, AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

// This is an optional pass that removes structs, enums, and externs
// that are not used.  It runs on C code, not Cyclone code.
// FIX: would be less conservative if we merged the worklists

#include <hashtable.h>
#include <set.h>
#include "warn.h"
#include "low_treeshake.h"
using Absyn;
namespace LowTreeShake;

// lists because types can be declared multiple times
typedef Hashtable::table_t<qvar_t,List::list_t<aggrdecl_t>> aggr_table_t;
typedef Set::set_t<qvar_t> qvar_set_t;
typedef Hashtable::table_t<qvar_t,bool> qvar_dict_t;

// essentially global state for the pass
struct Env {
  aggr_table_t aggrdecls;
  qvar_set_t   aggr_worklist;
  qvar_set_t   aggr_keepers;
  qvar_set_t   enum_keepers; // could distinguish needing tags and not
  qvar_dict_t  global_keepers;
  qvar_dict_t  funs_defined;
};
typedef struct Env@`r env_t<`r>;

static void build_tables_exp(env_t, exp_t);
static void build_tables_type(env_t env, type_t t) {
  switch(t) {
  case &AppType(&AggrCon(ai),NULL):
    let n = aggr_kinded_name(ai)[1];
    if(!Set::member(env->aggr_keepers,n))
      Set::imp_insert(env->aggr_worklist,n);
    break;
  case &AppType(&EnumCon(n,_),NULL): 
    Set::imp_insert(env->enum_keepers,n); break;
  case &AppType(&ComplexCon,_):
  case &AppType(_,NULL): break;

  case &Evar(_,topt,_,_):        fallthru(topt);
  case &TypedefType(_,_,_,topt): if(topt) fallthru(topt); break; 
  case &PointerType(PtrInfo(t1,...)): build_tables_type(env,t1); break;

  case &ArrayType(ArrayInfo(t1,_,eo,...)): // eo can have sizeof in it!
    if(eo) build_tables_exp(env,eo);
    build_tables_type(env,t1); 
    break;

  case &FnType(i):
    build_tables_type(env,i.ret_type);
    for(let args = i.args; args != NULL; args=args->tl)
      build_tables_type(env,(*args->hd)[2]);
    break;

  case &TypeofType(e): build_tables_exp(env,e); break;

  default: Warn::impos2("LowTreeshake: unexpected type ",t);
  }
}

static bool build_tables_visit_f1(env_t env, exp_t e) {
  switch(e->r) {
  case &Var_e(&Global_b(vd)): fallthru(vd->name);   
  case &Var_e(&Funname_b(&Fndecl{.name=qv,...})): fallthru(qv);   
  case &Var_e(&Unresolved_b(qv)): 
    if(!Hashtable::lookup_opt(env->funs_defined,qv) 
       && !Hashtable::lookup_opt(env->global_keepers,qv))
      Hashtable::insert(env->global_keepers,qv,true);
    return false;
  case &Enum_e(ed,_): Set::imp_insert(env->enum_keepers,ed->name); return false;
  case &Offsetof_e(t,_): fallthru(t);
  case &Sizeoftype_e(t): fallthru(t);
  case &Cast_e(t,...): build_tables_type(env,t); return true;
  default: return true;
  }
}
static bool build_tables_visit_f2(env_t env, stmt_t s) {
  switch(s->r) {
  case &Decl_s(d,s1):
    switch(d->r) {
    case &Var_d(vd): // FIX: also shake out unused externs
      build_tables_type(env,vd->type);
      return true;
    case &Fn_d(fd): // nested functions
      build_tables_type(env,fd->i.ret_type);
      for(let args = fd->i.args; args != NULL; args=args->tl)
	build_tables_type(env,(*args->hd)[2]);
      return true;
    default: Warn::impos2("LowTreeShake: local decl not a var or function");
    }
  default: return true;
  }
}
static void build_tables_exp(env_t env, exp_t e) {
  visit_exp(build_tables_visit_f1,build_tables_visit_f2,env,e);
}

static void add_to_table(Hashtable::table_t<qvar_t,List::list_t<`a,`H>> tab,
			 qvar_t qv, `a d) {
  let lst_opt = Hashtable::lookup_opt(tab,qv);
  let lst = new List::List(d, lst_opt ? *lst_opt : NULL);
  Hashtable::insert(tab,qv,lst);
}

static void build_tables(env_t env, List::list_t<decl_t,`H> tds) {
  for(; tds != NULL; tds = tds->tl) 
    switch (tds->hd->r) { 
    case &Var_d(vd): // FIX: also shake out unused externs
      build_tables_type(env,vd->type);
      if(vd->initializer != NULL)
	build_tables_exp(env,(exp_t)vd->initializer);
      break;
    case &Fn_d(fd):
      Hashtable::insert(env->funs_defined,fd->name,true);
      build_tables_type(env,fd->i.ret_type);
      for(let args = fd->i.args; args != NULL; args=args->tl)
	build_tables_type(env,(*args->hd)[2]);
      visit_stmt(build_tables_visit_f1,build_tables_visit_f2,env,fd->body);
      break;
    case &Aggr_d(ad): add_to_table(env->aggrdecls,ad->name,ad); break;
    case &Enum_d(ed): // I suppose a field could include a sizeof
      // this conservatively assumes the enum is used
      if(ed->fields != NULL)
	for(let fs = ed->fields->v; fs != NULL; fs = fs->tl)
	  if(fs->hd->tag != NULL)
	    build_tables_exp(env,(exp_t)fs->hd->tag);
      break;
    case &Typedef_d(td): //conservative (we usually don't have typedefs though)
      build_tables_type(env,(type_t)td->defn); break;
    default: Warn::impos2("LowTreeShake: top-level Cyclone decl");
    }
}

static void process_worklist(env_t env) {
  // FIX: not doing enums yet because of enumfields
  while(!Set::is_empty(env->aggr_worklist)) {
    let n = Set::choose(env->aggr_worklist);
    Set::imp_delete(env->aggr_worklist,n);
    Set::imp_insert(env->aggr_keepers,n);
    // structs defined in cyc_include.h won't be in env->aggrdecls
    let ads_opt = Hashtable::lookup_opt(env->aggrdecls,n);
    if(!ads_opt)
      continue;
    for(let ads=*ads_opt; ads != NULL; ads = ads->tl)
      if(ads->hd->impl != NULL)
	for(let fs = ads->hd->impl->fields; fs != NULL; fs = fs->tl)
	  build_tables_type(env,fs->hd->type);
  }
}

static List::list_t<decl_t,`H> trim_decls(env_t env, List::list_t<decl_t,`H> tds) {
  let ans = NULL;
  for(; tds != NULL; tds = tds->tl) {
    bool keep;
    switch(tds->hd->r) { 
    case &Var_d(vd): keep = (vd->sc != Extern && vd->is_proto != true) 
		       || Hashtable::lookup_opt(env->global_keepers,vd->name);
      break;
    case &Aggr_d(ad): keep = Set::member(env->aggr_keepers,ad->name); break;
    case &Enum_d(ed): keep = Set::member(env->enum_keepers,ed->name); break;
    default:          keep = true; break;
    }
    if(keep)
      ans = new List::List(tds->hd,ans);
  }
  return List::imp_rev(ans);
}

List::list_t<decl_t> shake(List::list_t<decl_t,`H> tds) {
  let env = Env(Hashtable::create(37,qvar_cmp,hash_qvar),
		Set::empty(qvar_cmp),
		Set::empty(qvar_cmp),
		Set::empty(qvar_cmp),
		Hashtable::create(37,qvar_cmp,hash_qvar),
		Hashtable::create(37,qvar_cmp,hash_qvar));
  build_tables(&env,tds);
  process_worklist(&env);
  return trim_decls(&env,tds);
}
