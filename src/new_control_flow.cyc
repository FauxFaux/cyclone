/* Control flow analysis.
   Copyright (C) 2001 Dan Grossman, Greg Morrisett
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

// TO DO: Get patterns right rather than require fully initialized
//        At very least, special case let x = e !!

// TO DO: complain about dereference of definitely NULL -- cannot do this
// until we've reached a fixpoint!!!

// TO DO: Exploit @ types to know NotZero!

// KLUDGE: For unions, we just pretend its initialized.  Since you can
// only read bits out, safety is not compromised.

// The previous pass (type-checking) sets up:
// * decorating all stmts with their correct non_local_preds
// * decorating each stmt with CFAnnot
// * setting all the encloser fields (note the list ends with a self-loop,
//   not a NULL!
// (The latter two activities are performed via calls to set_encloser.)

#include <core.h>
#include <list.h>
#include <set.h>
#include <dict.h>
#include <string.h>
#include <hashtable.h>
#include "absyn.h"
#include "tcutil.h"
#include "evexp.h"
#include "cf_flowinfo.h"
#include "new_control_flow.h"
#include "rgnorder.h"

// for debugging
#include "absynpp.h"
#include <cycboot.h>

using List;
using Absyn;
using CfFlowInfo;
using Absynpp;
namespace NewControlFlow;

typedef Dict::dict_t<`a,`b> dict_t<`a,`b>;
typedef Position::seg_t     seg_t;

// flag controlling whether or not to warn when we lose unique pointers
bool warn_lose_unique = false;
//////////////////////////// Statement Decoration //////////////////////////
struct CFStmtAnnot {
  stmt_t encloser; // for checking goto-scope -- no other use
  int    visited;  // for detecting need to iterate
  // we now use a separate hash table for the flow info
  // flow_t flow;     // flow to merge in when we check again
};
typedef struct CFStmtAnnot cf_stmt_annot_t;
@extensible datatype AbsynAnnot { static CFAnnot(cf_stmt_annot_t); };

// to be used by the type-checking pass to get things set up for us
// must be called on EVERY stmt in the abstract syntax (even the dummy ones)
void set_encloser(stmt_t enclosee, stmt_t encloser) {
  enclosee->annot = new CFAnnot(CFStmtAnnot(encloser, 0));
}

///////////////////////////// Analysis ///////////////////////////////

// FIX: Add some memoization for commonly used absRVal_t values, eg.
// fully initialized and fully uninitialized structs.  Also for root_t value.
// FIX: Assigning a pointer to an int shouldn't cause anything to escape.

// Note: w/o passing down whether we're in a "pointer context", we'll
// unnecessarily escape points-to on branches of conditional expressions.
// Note: for *(e1 ? e2 : e3) we're requiring e2 and e3 to be all-init.
struct AnalEnv<`r::R> {
  region_t<`r>  r;
  flow_env_t<`r> fenv;
  bool          iterate_again; // set to true when a visited flow is updated
  int           iteration_num; // update annotations with this on each visit
  bool          in_try;      // an optimization for the common case
  flow_t<`r>    tryflow;     // updated by any flow change while in a try-block
  place_set_t<`r>*`r all_changed;// NULL for "not in unorderd so don't bother"
  bool          noreturn;    // true when function is "noreturn"
  list_t<place_t<`r,`r>,`r> param_roots;
  list_t<$(place_t<`r,`r>,absRval_t<`r>) @`r,`r> noconsume_params;
  Hashtable::table_t<stmt_t,flow_t<`r>@`r,`r> flow_table;
};
typedef struct AnalEnv<`r> @`r analenv_t<`r>;

#ifdef COARSE_REGIONS
#define ANAL_RGN(ae,x) let x = (ae)->r;
#else
#define ANAL_RGN(ae,x) region x;
#endif

static flow_t<`r> anal_stmt(analenv_t<`r>, flow_t<`r>, stmt_t);
static flow_t<`r> anal_decl(analenv_t<`r>, flow_t<`r>, decl_t);
static $(flow_t<`r>,absLval_t<`r>) anal_Lexp(analenv_t<`r>, flow_t<`r>, bool expand_unique, exp_t);//takes all exps!
static $(flow_t<`r>,absRval_t<`r>) anal_Rexp(analenv_t<`r>, bool copy_ctxt, flow_t<`r>, exp_t);
static $(flow_t<`r>,flow_t<`r>)    anal_test(analenv_t<`r>, flow_t<`r>, exp_t);
static list_t<place_t<`r,`r>,`r> noalias_ptrs_rec(analenv_t<`r> env,
						  place_t<`r,`r> p,
						  type_t t);

static cf_stmt_annot_t @ get_stmt_annot(stmt_t s) {
  switch(s->annot) {
  case &CFAnnot(*x): return x;
  default: throw new Core::Impossible("ControlFlow -- wrong stmt annotation");
  }
}

static flow_t<`r>@`r get_stmt_flow(analenv_t<`r> env, stmt_t s) {
  flow_t<`r>@`r*`r sflow = Hashtable::lookup_opt(env->flow_table, s);
  if (sflow == NULL) {
    flow_t@`r res = rnew(env->r) BottomFL();
    Hashtable::insert(env->flow_table, s, res);
    return res;
  }
  return *sflow;
}

static $(cf_stmt_annot_t@,flow_t<`r>@`r) pre_stmt_check(analenv_t<`r> env, flow_t<`r> inflow, stmt_t s){
  let annot = get_stmt_annot(s);
  let sflow = get_stmt_flow(env,s);
  // join inflow with flow from non-local preds and earlier iterations
  *sflow = join_flow(env->fenv, env->all_changed, inflow, *sflow);
  // keep the iteration count right, cannot increment because of StmtExp
  // in an unordered position!
  annot->visited = env->iteration_num;
  return $(annot,sflow);
}

// Sound KLUDGE: The changed should go on the destination, but it's easier
// to put it on the source and nobody is ever going to notice the difference
// in precision (it takes a goto or caught throw from an inner unordered
// context to an outer one, I think).  The fix is to keep all the changed
// lists in the env and find the right one for the dest (by following
// enclosers somehow), but again, it is a really strange thing.
// Another KLUDGE: may_consume info should never be relevant in a
// catch block, so we clear it here, rather than cleaning it up elsewhere.
static void update_tryflow(analenv_t<`r> env, flow_t<`r> new_flow) {
  if(env->in_try) {
    DEBUG_PRINT("update_tryflow: before flow:\n");
    DEBUG_PRINT_F(print_flow,env->tryflow);
    DEBUG_PRINT("\n");
    DEBUG_PRINT("update_tryflow: new flow:\n");
    DEBUG_PRINT_F(print_flow,new_flow);
    DEBUG_PRINT("\n");
    env->tryflow = join_flow(env->fenv, env->all_changed, new_flow, env->tryflow);
    DEBUG_PRINT("update_tryflow: joined flow:\n");
    DEBUG_PRINT_F(print_flow,env->tryflow);
    DEBUG_PRINT("\n");
  }
}

static void check_unique_root($(analenv_t<`r>,seg_t,flowdict_t<`r>)@ckenv,
                              root_t<`r> root, absRval_t<`r> rval) {
  let &$(env,loc,new_fd) = ckenv;
  switch (root) {
  case &VarRoot(vd):
    if (!Dict::lookup_bool(new_fd,root,&rval) &&
        Tcutil::is_noalias_pointer_or_aggr(env->fenv->r,vd->type)) {
    retry:switch (rval) {
      case &NamedLocation(_,r): rval = r; goto retry;
      case &Consumed(...):
      case &UnknownR(NoneIL):
      case &Zero: break;
	// FIX: should handle Aggregates as well
      default:
	Tcutil::warn(loc,"unique pointer(s) reachable from %s may become unreachable.",qvar2string(vd->name));
	break;
      }
    }
    break;
  default: break;
  }
}

// Sound KLUDGE: same explanation as for update_tryflow above
// need to check for less than after the join b/c of the approximation
// else may not terminate.
static void update_flow(analenv_t<`r> env, stmt_t s, flow_t<`r> flow) {
  let annot    = get_stmt_annot(s);
  let sflow    = get_stmt_flow(env,s);
  let new_flow = join_flow(env->fenv, env->all_changed, flow, *sflow);
  if (warn_lose_unique) {
    switch $(flow,new_flow) {
    case $({.ReachableFL = $(fd,_)},{.ReachableFL = $(new_fd,_)}):
      let ckenv = $(env,s->loc,new_fd);
      Dict::iter_c(check_unique_root,&ckenv,fd);
      break;
    default: break;
    }
  }
  // check for variables that might be going out of scope and have
  // unique pointers in them.
  if(!flow_lessthan_approx(new_flow, *sflow)) {
    DEBUG_PRINT("update_flow for |%s|: flow changed\n*sflow=\n",
		Absynpp::stmt2string(s));
    DEBUG_PRINT_F(print_flow,*sflow);
    DEBUG_PRINT("\njoined flow (> annot_flow):\n");
    DEBUG_PRINT_F(print_flow,new_flow);
    DEBUG_PRINT("\n");
    *sflow = new_flow;
    DEBUG_PRINT("update_flow: annot->visited=%d, iteration_num=%d, *sflow=",
		annot->visited, env->iteration_num);
    DEBUG_PRINT_F(print_flow,*sflow);
    if(annot->visited == env->iteration_num) {
      DEBUG_PRINT("update_flow: will iterate again\n");
      env->iterate_again = true;
    }
  }
}

static flow_t<`r> add_vars(flow_env_t<`r> fenv,
                           flow_t<`r> inflow,list_t<vardecl_t> vds,
                           absRval_t<`r> leafval, Position::seg_t loc,
			   bool nameit) {
  switch(inflow) {
  case {.BottomFL = _}: return BottomFL();
  case {.ReachableFL = $(d,relns)}:
    for(; vds != NULL; vds = vds->tl) {
      let root = rnew(fenv->r) VarRoot(vds->hd);
      let rval = typ_to_absrval(fenv,vds->hd->type,false,leafval);
      if (nameit) {
	string_t<`r> locname = Absynpp::qvar2string(vds->hd->name);
	rval = rnew (fenv->r) NamedLocation(locname, rval);
      }
      DEBUG_PRINT("adding variable %s\n",qvar2string(vds->hd->name));
      d = Dict::insert(d,root,rval);
    }
    return ReachableFL(d,relns);
  }
}

static flow_t<`r> use_Rval(analenv_t<`r> env, seg_t loc, flow_t<`r> inflow, absRval_t<`r> r){
  switch(inflow) {
  case {.BottomFL = _}: return BottomFL();
  case {.ReachableFL = $(d,relns)}:
    if(initlevel(env->fenv,d,r) != AllIL)
      Tcutil::terr(loc,"expression may not be fully initialized");
    let ans_d = escape_deref(env->fenv, d, env->all_changed, r);
    if(d.t == ans_d.t) return inflow;
    let ans = ReachableFL(ans_d,relns);
    update_tryflow(env, ans);
    return ans;
  }
}

static void check_nounique(analenv_t<`r> env, seg_t loc, type_t t, absRval_t<`r> r) {
  switch $(Tcutil::compress(t),r) {
  case $(_,&UnknownR(NoneIL)): return;
  case $(_,&Zero): return;
  case $(_,&Consumed(...)): return;
  case $(_,&NamedLocation(_,r)): check_nounique(env,loc,t,r); return;
  case $(&DatatypeFieldType(DatatypeFieldInfo({.KnownDatatypefield=$(_,tuf)},_)),&Aggregate(_,ad)):
    if(tuf->typs == NULL)
      return;
    fallthru(tuf->typs,ad);
  case $(&TupleType(tqts),&Aggregate(_,ad)):
    unsigned sz = List::length(tqts);
    for (int i = 0; i < sz; i++) {
      check_nounique(env,loc,(*tqts->hd)[1],ad[i]);
    }
    return;
  case $(&AggrType(AggrInfo(info,targs)),&Aggregate(_,d)):
    // fix -- not right for unions?
    let ad = get_known_aggrdecl(info);
    if(ad->impl==NULL) return;
    let fs = ad->impl->fields;
    region temp;
    let inst = List::rzip(temp,temp,ad->tvs,targs);
    for (int i = 0; i < numelts(d); i++, fs = fs->tl) {
      type_t t = fs->hd->type;
      if (inst != NULL) t = Tcutil::rsubstitute(temp,inst,t);
      check_nounique(env,loc,t,d[i]);
    }
    return;
  case $(&AnonAggrType(k,fs),&Aggregate(_,d)):
    // fix -- not right for unions?
    for (int i = 0; i < numelts(d); i++, fs = fs->tl)
      check_nounique(env,loc,fs->hd->type,d[i]);
    return;
  case $(&PointerType(_),_) && Tcutil::is_noalias_pointer(t):
    Tcutil::warn(loc,"argument may still contain unique pointers");
    return;
  default: return;
  }
}

// MWH: this code is a copy of the above, and apparently not used

// static void check_unique(analenv_t<`r> env, seg_t loc, type_t t, absRval_t<`r> r) {
//   switch $(Tcutil::compress(t),r) {
//   case $(_,&UnknownR(NoneIL)): return;
//   case $(_,&Zero): return;
//   case $(_,&Consumed(...)): return;
//   case $(&DatatypeFieldType(DatatypeFieldInfo({.KnownDatatypefield=$(_,tuf)},_)),&Aggregate(_,ad)):
//     if(tuf->typs == NULL)
//       return;
//     fallthru(tuf->typs,ad);
//   case $(&TupleType(tqts),&Aggregate(_,ad)):
//     unsigned sz = List::length(tqts);
//     for (int i = 0; i < sz; i++) {
//       check_nounique(env,loc,(*tqts->hd)[1],ad[i]);
//     }
//     return;
//   case $(&AggrType(AggrInfo(info,targs)),&Aggregate(_,d)):
//     // fix -- not right for unions?
//     let ad = get_known_aggrdecl(info);
//     if(ad->impl==NULL) return;
//     let fs = ad->impl->fields;
//     region temp;
//     let inst = List::rzip(temp,temp,ad->tvs,targs);
//     for (int i = 0; i < numelts(d); i++, fs = fs->tl) {
//       type_t t = fs->hd->type;
//       if (inst != NULL) t = Tcutil::rsubstitute(temp,inst,t);
//       check_nounique(env,loc,t,d[i]);
//     }
//     return;
//   case $(&AnonAggrType(k,fs),&Aggregate(_,d)):
//     // fix -- not right for unions?
//     for (int i = 0; i < numelts(d); i++, fs = fs->tl)
//       check_nounique(env,loc,fs->hd->type,d[i]);
//     return;
//   case $(&PointerType(_),_) && Tcutil::is_noalias_pointer(t):
//     Tcutil::warn(loc,"argument may still contain unique pointers");
//     return;
//   default: return;
//   }
// }

static flow_t<`r> use_nounique_Rval(analenv_t<`r> env, seg_t loc, Absyn::type_t t, flow_t<`r> inflow, absRval_t<`r> r) {
  switch(inflow) {
  case {.BottomFL = _}: return BottomFL();
  case {.ReachableFL = $(d,relns)}:
    if (!Tcutil::is_noalias_pointer(t)) {
      Tcutil::terr(loc,"noliveunique attribute requires unique pointer");
      return BottomFL();
    }
    let elt_type = Tcutil::pointer_elt_type(t);
    retry: switch (r) {
    case &NamedLocation(_,r2): r = r2; goto retry;
    case &AddressOf(p):
      check_nounique(env,loc,elt_type,lookup_place(d,p));
      break;
    default:
      if (Tcutil::is_noalias_pointer_or_aggr(env->fenv->r,elt_type))
	Tcutil::warn(loc,"argument may contain live unique pointers");
      return use_Rval(env,loc,inflow,r);
    }
    let ans_d = escape_deref(env->fenv, d, env->all_changed, r);
    if(d.t == ans_d.t) return inflow;
    let ans = ReachableFL(ans_d,relns);
    update_tryflow(env, ans);
    return ans;
  }
}


static $(flow_t<`r>,list_t<absRval_t<`r>,`rgn>)
  anal_unordered_Rexps(region_t<`rgn> rgn,
                       analenv_t<`r> env,
                       flow_t<`r> inflow,
                       list_t<exp_t> es,
                       bool first_is_copy,
                       bool others_are_copy) {
  if(es == NULL)
    return $(inflow, NULL);
  if(es->tl == NULL) {
    let $(f,r) = anal_Rexp(env,first_is_copy,inflow,es->hd);
    return $(f, rnew(rgn) List(r,NULL));
  }
  place_set_t * outer_all_changed = env->all_changed;
  place_set_t this_all_changed; // keep separate b/c we iterate
  flow_t old_inflow;
  flow_t outflow;
  list_t<absRval_t,`rgn> rvals;
  do { // unnecessarily recomputes rvals each time
    this_all_changed = env->fenv->mt_place_set;
    // wouldn't need to peel off the head if we had a TopFL
    env->all_changed = rnew(env->r) env->fenv->mt_place_set;
    let $(f,r) = anal_Rexp(env,first_is_copy,inflow,es->hd);
    outflow = f;
    rvals = rnew(rgn) List(r,NULL);
    this_all_changed = union_place_set(this_all_changed,
				       *env->all_changed, false);
    for(_ es2 = es->tl; es2 != NULL; es2 = es2->tl) {
      env->all_changed = rnew(env->r) env->fenv->mt_place_set;
      let $(f,r) = anal_Rexp(env,others_are_copy,inflow,es2->hd);
      rvals = rnew(rgn) List(r,rvals);
      outflow = after_flow(env->fenv, &this_all_changed, outflow, f,
			   this_all_changed, *env->all_changed);
      this_all_changed = union_place_set(this_all_changed, *env->all_changed,
					 false);
    }
    old_inflow = inflow;
    // need to check for less than after the join b/c of the approximation
    // else may not terminate.
    inflow = join_flow(env->fenv,outer_all_changed,inflow,outflow);
//      DEBUG_PRINT("anal_unordered: old_inflow=\n");
//      DEBUG_PRINT_F(print_flow,old_inflow);
//      DEBUG_PRINT("anal_unordered: joined flow=\n");
//      DEBUG_PRINT_F(print_flow,inflow);
  } while(!flow_lessthan_approx(inflow,old_inflow));
  if(outer_all_changed == NULL)
    env->all_changed = NULL;
  else
    env->all_changed = rnew(env->r) union_place_set(*outer_all_changed,
                                                    this_all_changed, false);
  update_tryflow(env,outflow);
  return $(outflow,imp_rev(rvals));
}

// though the name doesn't indicate it, this is fine for the size primop too
// the point is we don't read through pointers, so nothing escapes.
static $(flow_t<`r>,absRval_t<`r>)
anal_use_ints(analenv_t<`r> env, flow_t<`r> inflow,
              list_t<exp_t> es) {
  ANAL_RGN(env, rgn) {
    let $(afterflow, rvals) =
      anal_unordered_Rexps(rgn,env,inflow,es,false,false);
    switch(afterflow) {
    case {.ReachableFL = $(d,_)}:
      for(; rvals != NULL; rvals = rvals->tl, es = es->tl)
        if(initlevel(env->fenv,d,rvals->hd)==NoneIL)
          Tcutil::terr(es->hd->loc, "expression may not be initialized");
      break;
    case {.BottomFL = _}: break;
    }
    return $(afterflow, env->fenv->unknown_all);
  }
}

// Called from anal_deref* when anal_Rexp([inflow],[e]) yields
// $(UnknownR([il]),[outflow]) where [il] > NoneIL.  Used to generate
// a new lval for that expression and assign to it a new rval that is
// assumed to be not zero, by virtue of the dereference.  We can get
// the lval this way only because f and the flow returned by anal_Lexp
// will not differ w.r.t. must-point-to information.  i.e. we should
// be called with the inflow the caller used as an *argument* to
// anal_Rexp Also: the result of anal_Rexp on e (before calling this)
// MUST be Unknown, not Esc! or it would be unsound to generate a
// place for it.
static flow_t<`r>
notzero(analenv_t<`r> env, flow_t<`r> inflow, flow_t<`r> outflow,
        exp_t e, initlevel_t il, string_t<`r> locname) {
  DEBUG_PRINT("in notzero for exp |%s|\n",Absynpp::exp2string(e));
  DEBUG_PRINT("inflow=\n");
  DEBUG_PRINT_F(print_flow,inflow);
  switch(outflow) {
  case {.BottomFL = _}: return outflow;
  case {.ReachableFL = $(d,relns)}:
    switch(anal_Lexp(env,inflow,false,e)[1]) {
    case {.UnknownL = _}:
      DEBUG_PRINT("Got UnknownL, outflow=\n");
      DEBUG_PRINT_F(print_flow,outflow);
      return outflow;
    case {.PlaceL = p}: // okay b/c p can't be escaped (it's Unknown)
      DEBUG_PRINT("Got place ");
      DEBUG_PRINT_F(print_place,p);
      absRval_t nzval = il==AllIL ? env->fenv->notzeroall : env->fenv->notzerothis;
      if (locname != NULL)
	nzval = rnew (env->fenv->r) NamedLocation(locname,nzval);
      let outflow = ReachableFL(assign_place(env->fenv,e->loc,d,env->all_changed,
					     p,nzval),relns);
      DEBUG_PRINT("outflow=\n");
      DEBUG_PRINT_F(print_flow,outflow);
      return outflow;
    }
  }
}

// Called from anal_test when anal_Rexp([inflow],[e]) yields
// $(UnknownR([il]),[outflow]) where [il] > NoneIL. Used to generate a
// new place [p] for that expression and assign to it a new rval that
// is either zero or notzero if the place is unaliased.
static $(flow_t<`r>,flow_t<`r>)
splitzero(analenv_t<`r> env, flow_t<`r> inflow, flow_t<`r> outflow,
          exp_t e, initlevel_t il, string_t<`r> locname) {
  switch(outflow) {
  case {.BottomFL = _}: return $(outflow,outflow);
  case {.ReachableFL = $(d,relns)}:
    switch(anal_Lexp(env,inflow,false,e)[1]) {
    case {.UnknownL = _}: return $(outflow,outflow);
    case {.PlaceL = p}: // okay b/c p can't be escaped (it's Unknown)
      absRval_t nzval = il==AllIL ? env->fenv->notzeroall : env->fenv->notzerothis;
      if (locname != NULL)
	nzval = rnew (env->fenv->r) NamedLocation(locname,nzval);
      return
        $(ReachableFL(assign_place(env->fenv,e->loc,d,env->all_changed,
                                   p,nzval),relns),
          ReachableFL(assign_place(env->fenv,e->loc,d,env->all_changed,p,
                                   env->fenv->zero),relns));
    }
  }
}

static datatype AbsynAnnot.NotZero mt_notzero_v = NotZero(NULL);
static datatype AbsynAnnot.UnknownZ mt_unknownz_v = UnknownZ(NULL);

// Note: correct for e1 an array b/c r won't be AddressOf??
// FIX: Important place to memoize type_to_absrval calls (b/c StructArrow
//      calls this.)
static $(flow_t<`r>,absRval_t<`r>)
  anal_derefR(analenv_t<`r> env, flow_t<`r> inflow,
              flow_t<`r> f, exp_t e, absRval_t<`r> r) {

  switch(Tcutil::compress((type_t)e->topt)) {
  case &PointerType(PtrInfo(elttype,_,PtrAtts(_,_,bd,zt,_))):
    switch(f) {
    case {.BottomFL = _}:
      return $(f,typ_to_absrval(env->fenv,elttype,false,env->fenv->unknown_all));
    case {.ReachableFL = $(outdict,relns)}:
      // else cannot be known: FIX: determine notzero as appropriate
      string_t locname = NULL;
      switch (r) {
      case &NamedLocation(n,r2): locname = n; break;
      default: break;
      }
      if(Tcutil::is_bound_one(bd)) {
	retry: switch(r) {
	case &NamedLocation(n,r2): r = r2; goto retry;
	case &NotZeroAll:
	case &NotZeroThis:
          switch (e->annot) {
          case &NotZero(relns2):
            if (!same_relns(relns,relns2)) fallthru;
            break;
          default:
            // if e isn't a subscript, we don't need the relns
            switch (e->r) {
            case &Subscript_e(_,_):
              e->annot = new NotZero(copy_relns(Core::heap_region,relns));
              break;
            default:
              e->annot = &mt_notzero_v;
              break;
            }
            break;
          }
	  break;
	case &AddressOf(p):
          switch (e->annot) {
          case &NotZero(relns2):
            if (!same_relns(relns,relns2)) fallthru;
            break;
          default:
            // if e isn't a subscript, we don't need th relns
            switch (e->r) {
            case &Subscript_e(_,_):
              e->annot = new NotZero(copy_relns(Core::heap_region,relns));
              break;
            default:
              e->annot = &mt_notzero_v;
              break;
            }
            break;
          }
	  return $(f,lookup_place(outdict,p));
	case &Zero:
	  e->annot = &IsZero_val;
	  return $(BottomFL(),typ_to_absrval(env->fenv,elttype,
					     false,env->fenv->unknown_all));
	case &UnknownR(il): f = notzero(env,inflow,f,e,il,locname); fallthru;
	default:
          switch (e->r) {
          case &Subscript_e(_,_):
            e->annot = new UnknownZ(copy_relns(Core::heap_region,relns));
            break;
          default:
            e->annot = &mt_unknownz_v;
            break;
          }
          break;
	}
      } else {
        switch (e->annot) {
        case &UnknownZ(relns2):
          if (!same_relns(relns,relns2)) fallthru;
          break;
        default:
          e->annot = new UnknownZ(copy_relns(Core::heap_region,relns)); // FIX: too conservative?
          break;
        }
      }
      switch(initlevel(env->fenv,outdict,r)) {
      case NoneIL:
        switch (r) {
	  // XXX deal with aggregates and named locations ?
        case &Consumed(_,_,_):
          Tcutil::terr(e->loc,"attempt to use a unique pointer that has already been copied");
          break;
        default:
          Tcutil::terr(e->loc,"dereference of possibly uninitialized pointer");
        }
	fallthru;
      case AllIL:
	let rval = env->fenv->unknown_all;
	if (locname != NULL)
	  rval = rnew (env->fenv->r) NamedLocation(locname,rval);
        return $(f,typ_to_absrval(env->fenv,elttype,false,rval));
      case ThisIL:
	let rval = env->fenv->unknown_none;
	if (locname != NULL)
	  rval = rnew (env->fenv->r) NamedLocation(locname,rval);
        return $(f,typ_to_absrval(env->fenv,elttype,false,rval));
      }
    }
  default: throw new Core::Impossible("right deref of non-pointer-type");
  }
}

// we've performed e1[e2] -- if this is of the form x[i], then add
// i < x.size to the relations.
static relns_t<`r> add_subscript_reln(region_t<`r> rgn,
                                      relns_t<`r> relns, exp_t e1, exp_t e2) {
  switch (e1->r) {
  case &Var_e(_,&Pat_b(x)):   fallthru(x);
  case &Var_e(_,&Local_b(x)): fallthru(x);
  case &Var_e(_,&Param_b(x)): fallthru(x);
  case &Var_e(_,&Global_b(x)):
    if (!x->escapes)
      switch (e2->r) {
      case &Var_e(_,&Pat_b(i)):   fallthru(i);
      case &Var_e(_,&Local_b(i)): fallthru(i);
      case &Var_e(_,&Param_b(i)): fallthru(i);
      case &Var_e(_,&Global_b(i)):
        if (!i->escapes) {
          // we have x[i] -- add i < x.size to relns if not already present.
          bool found = false;
          for (let rs = relns; rs != NULL; rs = rs->tl) {
            let r = rs->hd;
            if (r->vd == i)
              switch (r->rop) {
              case {.LessNumelts = v} && v == x: return relns;
              default: continue;
              }
          }
          if (!found)
            return rnew(rgn) List(rnew(rgn) Reln(i,LessNumelts(x)),relns);
        }
        return relns;
      default: return relns;
      }
    else return relns;
  default: return relns;
  }
}

// assigns [rexp] to [lexp], which have abstract values [rval] and
// [lval], respectively, in [outflow].
static $(flow_t<`r>,absRval_t<`r>)
  do_assign(flow_env_t<`r> fenv,
	    analenv_t<`r> env,
	    flow_t<`r> outflow,
	    exp_t lexp, absLval_t<`r> lval,
	    exp_t rexp, absRval_t<`r> rval,
	    Position::seg_t loc) {

  switch(outflow) {
  case {.BottomFL = _}:
    DEBUG_PRINT("leaving AssignOp_e\n");
    return $(BottomFL(),rval);
  case {.ReachableFL = $(indict,relns)}:
    switch(lval) {
    case {.PlaceL = p}:
      let outdict = assign_place(fenv,loc,indict,env->all_changed,p,rval);
      relns   = reln_assign_exp(fenv->r,relns,lexp,rexp);
      outflow = ReachableFL(outdict,relns);
      if (warn_lose_unique &&
          Tcutil::is_noalias_pointer_or_aggr(env->fenv->r,(type_t)lexp->topt)){
        // check to see if we're over-writing a unique pointer
        switch (lookup_place(indict,p)) {
        case &UnknownR(NoneIL):
        case &Consumed(...):
        case &Zero:
        case &NamedLocation(_,&UnknownR(NoneIL)):
        case &NamedLocation(_,&Consumed(...)):
        case &NamedLocation(_,&Zero): break;
        default:
          Tcutil::warn(lexp->loc,"assignment may overwrite unique pointer(s)");
          break;
        }
      }
      DEBUG_PRINT("in AssignOp_e; calling update_tryflow\n");
      update_tryflow(env, outflow);
      DEBUG_PRINT("leaving AssignOp_e\n");
      return $(outflow, rval);
    case {.UnknownL = _}:
      DEBUG_PRINT("leaving AssignOp_e\n");
      return $(use_Rval(env,rexp->loc,outflow,rval), rval);
    }
  }
}

static bool is_local_var_rooted_path(Absyn::exp_t e) {
  switch (e->r) {
  case &Var_e(_,&Local_b(_)):
  case &Var_e(_,&Param_b(_)): 
  case &Var_e(_,&Pat_b(_)): return true;
  case &Deref_e(e): fallthru(e);
  case &AggrMember_e(e,...): fallthru(e);
  case &AggrArrow_e(e,...):
    return is_local_var_rooted_path(e);
  case &Subscript_e(e,...):
    switch (Tcutil::compress((type_t)e->topt)) {
    case &TupleType(...): return is_local_var_rooted_path(e);
    default: return false;
    }
  case &Cast_e(_,e,...): return is_local_var_rooted_path(e);
  default: return false;
  }
}

static $(flow_t<`r>,absRval_t<`r>)
anal_stmt_exp(analenv_t<`r> env, bool copy_ctxt, flow_t<`r> inflow, stmt_t s) {
  let fenv = env->fenv;
  // We need the absRval_t from the last expression --
  // that's why we traverse the statement ourselves.
  // make sure we do everything just like anal_stmt does!
  while(true) {
    let $(_,sflow) = pre_stmt_check(env,inflow,s);
    inflow = *sflow;
    switch(s->r) {
    case &Seq_s(s1,s2):
      inflow = anal_stmt(env,inflow,s1);
      s = s2;
      break;
    case &Decl_s(&Decl{.r = &Alias_d(e,tv,vd), ...},s1):
      // FIX: This is the same code as in anal_stmt -- should be factored out
      // similar to the copy situation at the top of anal_Rexp
      let $(f,lval) = anal_Lexp(env,inflow,true,e);
      switch $(f,lval) {
      case $({.ReachableFL = $(fd,relns)},{.PlaceL = p}):
        let old_rval = lookup_place(fd,p);
        // HACK -- if e is cast, then get at the underlying expression's type
        type_t t = (type_t)e->topt;
        switch (e->r) {
        case &Cast_e(_,e2,...): t = (type_t)e2->topt; break;
        default: break;
        }
        let new_rval = make_unique_consumed(fenv,t,e,env->iteration_num,old_rval);
        fd = assign_place(fenv,e->loc,fd,env->all_changed,p,new_rval);
        f = ReachableFL(fd,relns);
        absRval_t leaf;
        switch (initlevel(fenv,fd,old_rval)) {
        case AllIL: leaf = fenv->unknown_all; break;
        case NoneIL: leaf = fenv->unknown_none; break;
        case ThisIL: leaf = fenv->unknown_this; break;
        }
	// XXX: not sure what's going on here---may need to deal
	//   with NamedLocation specially ...
        let old_rval_approx = typ_to_absrval(fenv,t,false,leaf);
        f = use_Rval(env,e->loc,f,old_rval);
        let vds = List(vd,NULL);
        f = add_vars(fenv,f,&vds,fenv->unknown_all,s->loc,false);
        let $(f,res) = anal_stmt_exp(env,copy_ctxt,f,s1);
        switch (f) {
        case {.ReachableFL = $(fd,relns)}:
          fd = assign_place(fenv,s->loc,fd,env->all_changed,p,old_rval_approx);
          let outflow = ReachableFL(fd,relns);
          return $(outflow,res);
        default: return $(f,res);
        }
      case $({.BottomFL = _}, _): return $(f,fenv->unknown_all);
      default: Tcutil::terr(e->loc,"bad alias expression--no unique path found");
        return $(BottomFL(),fenv->unknown_all);
      }
    case &Decl_s(d,s1):
      inflow = anal_decl(env,inflow,d);
      s = s1;
      break;
    case &Exp_s(e):
      return anal_Rexp(env,copy_ctxt,inflow,e);
    default: throw new Core::Impossible("analyze_Rexp: ill-formed StmtExp");
    }
  }
}


// Note: must deal with try-flow in all "base" cases!!!
static $(flow_t<`r>,absRval_t<`r>)
anal_Rexp(analenv_t<`r> env, bool copy_ctxt, flow_t<`r> inflow, exp_t e) {
  // Note: It is sound to return on BottomFL only because there is no way to
  //       jump into an expression (we reject goto into a StmtExp).
  let fenv = env->fenv;
  flowdict_t d;
  relns_t relns;
  DEBUG_PRINT("in Rexp for |%s|, flow is {\n",Absynpp::exp2string(e));
  DEBUG_PRINT_F(print_flow,inflow);
  DEBUG_PRINT("}\n");
  switch(inflow) {
  case {.BottomFL = _}: return $(BottomFL(), fenv->unknown_all); // absRval_t irrelvent
  case {.ReachableFL = $(d2,relns2)}: d = d2; relns = relns2;
    //fprintf(stderr,"inflow expression %s:",Absynpp::exp2string(e));
    //print_relns(relns); fprintf(stderr,"\n");
  }
  // check to see if e is a copy of a unique pointer that needs to be
  // consumed.  Note that we could push this into the var, deref,
  // member, and arrow cases...
  if (copy_ctxt && is_local_var_rooted_path(e) &&
      Tcutil::is_noalias_pointer_or_aggr(env->r,(type_t)e->topt)) {
    DEBUG_PRINT("copy of unique pointer(s)\n");
    // if e is a copy of a unique pointer, then we want to treat this
    // as if it were:
    //   ({ x = &e;
    //      y = *e;
    //      *x = <uninit> // really, make all unique pointers in *x uninit
    //      y; })
    // However, we do not need to do this unless the unique pointers would
    // be reachable along a unique path after executing e.  (Copies of
    // unique pointers along non-unique paths are illegal.  One can only
    // swap if you go through a shared object.)  Thus, we only need to
    // go to this trouble when e is rooted by a local variable.  In
    // particular, if e drawn from the following subset of "local-variable
    // rooted path" (lrp) expressions:
    //   lrp ::= x | lrp.m | lrp->m | *lrp | lrp = e'
    // Note that for an expression such as "(T)lrp" or "e ? lrp : e'" in
    // a copy context, we will end up doing the kills when we process the
    // lrp's as a sub-expression.
    //   When calculating the lval, we expand the unique pointer paths.
    let $(flval,lval) = anal_Lexp(env,inflow,true,e);
    switch $(flval,lval) {
    case $({.ReachableFL = $(fd,r)},{.PlaceL = p}):
      let old_rval = lookup_place(fd,p);
      bool needs_unconsume = false;
      if (is_unique_consumed(e,env->iteration_num,old_rval,&needs_unconsume)) {
	Tcutil::terr(e->loc,"expression attempts to copy unique value that may be copied elsewhere.");
	return $(BottomFL(),fenv->unknown_all);
      }
      else if (needs_unconsume) {
	DEBUG_PRINT("consuming again\n");
	return $(flval,make_unique_unconsumed(fenv,old_rval));
      }
      else {
	let new_rval = make_unique_consumed(fenv,(type_t)e->topt,e,env->iteration_num,old_rval);
	let outdict = assign_place(fenv,e->loc,fd,env->all_changed,p,new_rval);
	DEBUG_PRINT("place is ");
	DEBUG_PRINT_F(print_place,p);
	DEBUG_PRINT(", old_rval is ");
	DEBUG_PRINT_F(print_absrval,old_rval);
	DEBUG_PRINT(", new_rval is ");
	DEBUG_PRINT_F(print_absrval,new_rval);
	DEBUG_PRINT("\nOutput Flow {\n");
	DEBUG_PRINT_F(print_flowdict,outdict);
	DEBUG_PRINT("}\n ");
	return $(ReachableFL(outdict,r),old_rval);
      }
    default: break;
    }
  }
  switch(e->r) {
    // treat this similar to a dereference in that there's a null-check
    // and afterwards, we know the value is not null.
  case &Cast_e(_,e1,_,NonNull_to_Null):
    let $(f1,r1) = anal_Rexp(env,copy_ctxt,inflow,e1);
    let $(f2,r2) = anal_derefR(env,inflow,f1,e1,r1);
    return $(f2,r1);
    // C doesn't allow "memory-kind casts", which is good because then
    // we'd have to translate the dictionary domains and that's a pain.
    // In essence, we're assuming the result absRval_t is not Aggregate.
  case &Cast_e(_,e1,_,_):    fallthru(e1);
  case &NoInstantiate_e(e1): fallthru(e1);
  case &Instantiate_e(e1,_): return anal_Rexp(env,copy_ctxt,inflow,e1);

  case &Const_e({.Null_c = _}):
  case &Const_e({.Int_c = $(_,0)}): return $(inflow, fenv->zero);
  case &Const_e({.Int_c = $(_,_)}):
  case &Var_e(_,&Funname_b(_)):    return $(inflow, fenv->notzeroall);

  case &Datatype_e(NULL,_,_): // FIX: distinguish zero/non-zero
  case &Const_e(_):
  case &Sizeofexp_e(_): // note: the exp is NOT evaluated
  case &Sizeoftyp_e(_):
  case &Offsetof_e(_,_): // FIX: ?? (first field guaranteed zero?)
  case &AnonEnum_e(_,_,_): // FIX : distinguish tags that are/aren't 0
  case &Enum_e(_,_,_): return $(inflow, fenv->unknown_all);

  case &Var_e(_,&Global_b(_)): // globals are init and may be aggregates
    return $(inflow, typ_to_absrval(fenv,(type_t)e->topt, false,fenv->unknown_all));
    // Note: if Esc we return that even though it isn't an absRval.  That's
    //       okay b/c assign_place_inner does the right thing
  case &Var_e(_,&Param_b(vd)): fallthru(vd);
  case &Var_e(_,&Local_b(vd)): fallthru(vd);
  case &Var_e(_,&Pat_b(vd)):
    DEBUG_PRINT("in Rexp:Var_e for |%s|\n",Absynpp::exp2string(e));
    datatype Root.VarRoot vdroot = VarRoot(vd);
    return $(inflow, Dict::lookup_other(d, root_cmp, &vdroot));

    // Note: none of the primops cause things to escape or do a dereference!
    //       and they all return initialized ints of unknown value.
  case &Primop_e(p,es):
    DEBUG_PRINT("in Rexp:Primop_e\n");
    let $(f,r) = anal_use_ints(env,inflow,es);
    return $(f,r);

  case &Increment_e(e1,_):
    let arg = List{e1,NULL};
    let $(f,_) = anal_use_ints(env,inflow,&arg);
    let $(_,lval) = anal_Lexp(env,f,false,e1);
    switch($(lval,f)) {
    case $({.PlaceL = p},{.ReachableFL = $(outdict,relns)}):
      relns = reln_kill_exp(fenv->r,relns,e1);
      f = ReachableFL(assign_place(fenv,e1->loc,outdict,
                                   env->all_changed,p,fenv->unknown_all),
                      relns);
      break;
    default: break;
    }
    return $(f,fenv->unknown_all);

  case &AssignOp_e(l,&_,r):
    if (copy_ctxt && Tcutil::is_noalias_pointer_or_aggr(env->r,(type_t)e->topt)) {
      Tcutil::terr(e->loc,"cannot track unique pointers through multiple assignments");
      return $(BottomFL(), fenv->unknown_all);
    }
    let arg2 = List{r,NULL};
    let arg1 = List{l,&arg2};
    let $(f,_) = anal_use_ints(env,inflow,&arg1);
    let $(_,lval) = anal_Lexp(env,f,false,l);
    switch(f) {
    case {.ReachableFL = $(outdict,relns)}:
      switch (lval) {
      case {.PlaceL = p}:
      DEBUG_PRINT("assignOp: old_inflow=\n");
      DEBUG_PRINT_F(print_flow,f);
	relns = reln_kill_exp(fenv->r,relns,l);
	outdict = assign_place(fenv,l->loc,outdict,
			       env->all_changed,p,fenv->unknown_all);
	f = ReachableFL(outdict,relns);
        DEBUG_PRINT("assignOp: new flow=\n");
        DEBUG_PRINT_F(print_flow,f);
	break;
      case {.UnknownL = _}:
	DEBUG_PRINT("assignOp: unknown place\n");
	break;
      }
      break;
    default: break;
    }
    return $(f,fenv->unknown_all);

  case &AssignOp_e(e1,NULL,e2):
    DEBUG_PRINT("in Rexp:AssignOp_e for |%s|\n",Absynpp::exp2string(e));
    if (copy_ctxt && Tcutil::is_noalias_pointer_or_aggr(env->r,(type_t)e->topt)) {
      Tcutil::terr(e->loc,"cannot track unique pointers through multiple assignments");
      return $(BottomFL(), fenv->unknown_all);
    }
    let outer_all_changed = env->all_changed;
    while(true) { // local iteration
      env->all_changed  = rnew(env->r) fenv->mt_place_set;
      let $(left_out, lval) = anal_Lexp(env,inflow,false,e1);
      let left_changed      = *env->all_changed;
      env->all_changed      = rnew(env->r) fenv->mt_place_set;
      let $(right_out,rval) = anal_Rexp(env,true,inflow,e2);
      let right_changed     = *env->all_changed;
      let outflow = after_flow(fenv,&left_changed, left_out,right_out,
                               left_changed, right_changed);
      // FIX: need to kill any variables assigned in e1 or e2?
      let new_inflow = join_flow(fenv,outer_all_changed,inflow,outflow);

      // see if we've reached a fixpoint
      if(flow_lessthan_approx(new_inflow,inflow)) {
        if(outer_all_changed == NULL)
          env->all_changed = NULL;
        else
          *env->all_changed = union_place_set(*outer_all_changed,
                              union_place_set(left_changed, right_changed,
                                              false), false);
	return do_assign(fenv,env,outflow,e1,lval,e2,rval,e->loc);
      }
      // iterate again
      inflow = new_inflow;
      DEBUG_PRINT("inflow changed; recalculating\n");
    }

  case &SeqExp_e(e1,e2):
    let $(f,r) = anal_Rexp(env,false,inflow,e1);
    return anal_Rexp(env, copy_ctxt, f, e2);

  case &Throw_e(e1):
    let $(f,r) = anal_Rexp(env,true,inflow,e1);
    use_Rval(env,e1->loc,f,r); // result irrelevant so long as initialized
    return $(BottomFL(),typ_to_absrval(fenv,(type_t)e->topt,false,fenv->unknown_all));

  case &FnCall_e(e1,es,...):
    ANAL_RGN(env,temp) {
      let $(fst_outflow,rvals) = anal_unordered_Rexps(temp,env,inflow,rnew(temp) List(e1,rcopy(temp,es)),false,true);
      // for strange reasons, use_Rval is fine for the function pointer:
      let outflow = use_Rval(env,e1->loc,fst_outflow,rvals->hd);
      rvals = rvals->tl;
      // we just just "use" each arg except for the "initializes" attribute
      list_t<int> init_params = NULL;
      list_t<int> nolive_unique_params = NULL;
      list_t<int> noconsume_params = NULL;
      switch(Tcutil::compress((type_t)e1->topt)) {
      case &PointerType(PtrInfo(t,_,_)):
        switch(Tcutil::compress(t)) {
        case &FnType(FnInfo(_,_,_,_,_,_,_,_,atts)):
          for(; atts != NULL; atts = atts->tl)
	    // These attributes are assumed to be disjoint
            switch(atts->hd) {
            case &Initializes_att(i):
	      init_params=rnew(temp) List(i,init_params); break;
            case &Noliveunique_att(i):
              nolive_unique_params = rnew(temp) List(i,nolive_unique_params);
              break;
            case &Noconsume_att(i):
	      DEBUG_PRINT("found noconsume arg %d\n",i);
              noconsume_params = rnew(temp) List(i,noconsume_params);
              break;
            default: break;
            }
          break;
        default: Tcutil::impos("anal_Rexp: bad function type");
        }
        break;
      default: Tcutil::impos("anal_Rexp: bad function type");
      }
      for(int i=1; rvals != NULL; rvals = rvals->tl, es = es->tl, ++i) {
	if (List::memq(init_params,i)) {
	  switch(fst_outflow) {
	  case {.BottomFL = _}: break;
	  case {.ReachableFL = $(fst_d,_)}:
	    if(initlevel(env->fenv,fst_d,rvals->hd)==NoneIL)
	      Tcutil::terr(es->hd->loc,"expression may not be initialized");
	    switch(outflow) {
	    case {.BottomFL = _}: break;
	    case {.ReachableFL = $(d,relns)}:
	      // do the escape, but then set to esc_all (i.e. initialized)
	      // in outflow
	      let ans_d = escape_deref(fenv, d, env->all_changed, rvals->hd);
	      switch(rvals->hd) {
	      case &AddressOf(p):
		switch(Tcutil::compress((type_t)es->hd->topt)) {
		case &PointerType(PtrInfo(t,_,_)):
		  // XXX: should I propagate NamedLocation here?  Seems
		  //   pointless since I'm escaping it anyway
		  ans_d = assign_place(fenv, es->hd->loc, ans_d,
				       env->all_changed,
				       p, typ_to_absrval(fenv,t,false,
							 fenv->esc_all));
		  break;
		default: Tcutil::impos("anal_Rexp:bad type for initialized arg");
		}
		break;
	      default: break;
	      }
	      outflow = ReachableFL(ans_d,relns);
	      break;
	    }
	    break;
	  }
	}
        else if (List::memq(nolive_unique_params,i)) {
          DEBUG_PRINT("using unique argument %d, inflow is {\n",i);
          DEBUG_PRINT_F(print_flow,outflow);
          outflow = use_nounique_Rval(env,es->hd->loc,(type_t)es->hd->topt,
                                      outflow,rvals->hd);
          DEBUG_PRINT("}\n and outflow is {\n");
          DEBUG_PRINT_F(print_flow,outflow);
          DEBUG_PRINT("}\n");
        }
	else {
	  outflow = use_Rval(env,es->hd->loc,outflow,rvals->hd);
	  if (List::memq(noconsume_params,i)) {
	    // for a no-consume argument, we want to unconsume the rval.
	    let $(_,lval) = anal_Lexp(env,outflow,true,es->hd);
	    switch $(outflow,lval) {
	    case $({.ReachableFL = $(fd,relns)},{.PlaceL = p}):
	      let new_rval = make_unique_unconsumed(fenv,rvals->hd);
	      DEBUG_PRINT("noconsume att(%d): inflow is {\n",i);
	      DEBUG_PRINT_F(print_flow,outflow);
	      fd=assign_place(fenv,es->hd->loc,fd,env->all_changed,p,new_rval);
	      outflow = ReachableFL(fd,relns);
	      DEBUG_PRINT("}\n and outflow is {\n");
	      DEBUG_PRINT_F(print_flow,outflow);
	      DEBUG_PRINT("}\n");
	      break;
	    case $({.BottomFL = _}, _): continue;
	    default:
	      Tcutil::terr(es->hd->loc,
			   "noconsume() parameters must be l-values");
	    }
	  }
	}
      }
      // if the called function doesn't return, we get BottomFL out
      if (Tcutil::is_noreturn((type_t)e1->topt))
        return $(BottomFL(),typ_to_absrval(fenv,(type_t)e->topt,false,fenv->unknown_all));
      else
        return $(outflow,typ_to_absrval(fenv,(type_t)e->topt,false,fenv->unknown_all));
    }
  case &Malloc_e(MallocInfo{iscalloc,eopt,topt,exp,isfat}):
    root_t    root      = rnew(fenv->r) MallocPt(exp,(type_t)e->topt);
    place_t   place     = rnew(fenv->r) Place(root,NULL);
    absRval_t rval      = rnew(fenv->r) AddressOf(place);
    absRval_t place_val;
    if(isfat) place_val = fenv->notzeroall;
    else if(iscalloc) place_val = typ_to_absrval(fenv,*topt,false,fenv->zero);
    else place_val = typ_to_absrval(fenv,*topt,false,fenv->unknown_none);
    flow_t    outflow;
    update_place_set(env->all_changed,place,0);
    if(eopt!=NULL) {
      ANAL_RGN(env,temp) {
        let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                              rlist(temp,(exp_t)eopt,exp),true,true);
        outflow = f;
      }
    } else {
      let $(f,_) = anal_Rexp(env,true,inflow,exp);
      outflow = f;
    }
    switch(outflow) {
    case {.BottomFL = _}: return $(outflow,rval);
    case {.ReachableFL = $(d2,relns)}:
      return $(ReachableFL(Dict::insert(d2,root,place_val),relns), rval);
    }

  case &Swap_e(e1,e2):
    _ left_rval;
    _ right_rval;
    _ outflow;
    DEBUG_PRINT("in Swap_e(%s,%s): at start, flow is\n",
		Absynpp::exp2string(e1),Absynpp::exp2string(e2));
    DEBUG_PRINT_F(print_flow,inflow);
    ANAL_RGN(env, temp) {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
					    rlist(temp,e1,e2),false,false);
      left_rval = rvals->hd;
      right_rval = rvals->tl->hd;
      outflow = f;
    }
    // now assign the abstract rvals
    let $(_,left_lval) = anal_Lexp(env,outflow,false,e1);
    let $(_,right_lval) = anal_Lexp(env,outflow,false,e2);
    switch (outflow) {
    case {.ReachableFL = $(outdict,relns)}:
      switch(left_lval) {
      case {.PlaceL = lp}:
	outdict = assign_place(fenv,e1->loc,outdict,env->all_changed,
			       lp,right_rval);
	break;
      case {.UnknownL = _}: break;
      }
      switch(right_lval) {
      case {.PlaceL = rp}:
	outdict = assign_place(fenv,e2->loc,outdict,env->all_changed,
			       rp,left_rval);
	break;
      case {.UnknownL = _}: break;
      }
      // FIX: should swap the relation information
      relns = reln_kill_exp(fenv->r,relns,e1);
      relns = reln_kill_exp(fenv->r,relns,e2);
      // create new flow
      outflow = ReachableFL(outdict,relns);
      break;
    default: break;
    }
    DEBUG_PRINT("in Swap_e: after swap, flow is\n");
    DEBUG_PRINT_F(print_flow,outflow);
    return $(outflow,fenv->unknown_all);

  case &New_e(eopt,e2):
    root_t    root      = rnew(fenv->r) MallocPt(e2,(type_t)e->topt);
    place_t   place     = rnew(fenv->r) Place(root,NULL);
    absRval_t rval      = rnew(fenv->r) AddressOf(place);
    update_place_set(env->all_changed,place,0);
    flow_t    outflow;
    absRval_t place_val;
    if(eopt!=NULL) {
      ANAL_RGN(env, temp) {
        let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                              rlist(temp,(exp_t)eopt,e2),true,true);
      outflow   = f;
      place_val = rvals->tl->hd;
      }
    } else {
      let $(f,r) = anal_Rexp(env,true,inflow,e2);
      outflow   = f;
      place_val = r;
    }
    switch(outflow) {
    case {.BottomFL = _}: return $(outflow,rval);
    case {.ReachableFL = $(d2,relns)}:
      return $(ReachableFL(Dict::insert(d2,root,place_val),relns), rval);
    }

  case &Address_e(e1): // FIX: support & as a malloc-and-initialize???
    let $(f,l) = anal_Lexp(env,inflow,false,e1);
    switch(l) {
    case {.UnknownL = _}:   return $(f, fenv->notzeroall);
    case {.PlaceL = p}: return $(f, rnew(env->r) AddressOf(p));
    }

  case &Deref_e(e1):
    let $(f,r) = anal_Rexp(env,false,inflow,e1);
    return anal_derefR(env,inflow,f,e1,r);

    // KLUDGE: unions (see comment at top of file)
  case &AggrMember_e(e1,field,...):
    let $(f,r) = anal_Rexp(env,false,inflow,e1);
    if(is_nontagged_union_type((type_t)e1->topt))
      return $(f,typ_to_absrval(fenv,(type_t)e->topt,false,fenv->unknown_all));
    switch (r) {
    case &NamedLocation(_, &Aggregate(UnionRInfo(is_union,fnum),rdict)):
      fallthru(is_union,fnum,rdict);
    case &Aggregate(UnionRInfo(is_union,fnum),rdict):
      let field_no = get_field_index((type_t)e1->topt,field);
      if (is_union && fnum != -1 && fnum != field_no)
	return $(f, typ_to_absrval(fenv,(type_t)e->topt,true,fenv->unknown_none));
      return $(f,rdict[field_no]);
    default:
      throw new Core::Impossible(aprintf("anal_Rexp: AggrMember: %s",
                                         Absynpp::exp2string(e)));
    }

  case &Tagcheck_e(e1,field):
    // similar to above, but result is a non-zero integer unless the
    // field is already known
    let $(f,r) = anal_Rexp(env,false,inflow,e1);
    if(is_nontagged_union_type((type_t)e1->topt))
      return $(f,fenv->unknown_all);
    switch (r) {
    case &NamedLocation(_, &Aggregate(UnionRInfo(is_union,fnum),rdict)):
      fallthru(is_union,fnum,rdict);
    case &Aggregate(UnionRInfo(is_union,fnum),rdict):
      let field_no = get_field_index((type_t)e1->topt,field);
      if (is_union && fnum != -1)
	if (fnum != field_no)
	  return $(f, fenv->zero);
	else
	  return $(f, fenv->notzeroall);
      else
	return $(f,fenv->unknown_all);
    default:
      throw new Core::Impossible(aprintf("anal_Rexp: TagCheck_e: %s",
                                         Absynpp::exp2string(e)));
    }

  case &AggrArrow_e(e1,field,...): // composition of * and ., of course
    let $(f1,r1) = anal_Rexp(env,false,inflow,e1);
    DEBUG_PRINT("f1 flow is ");
    DEBUG_PRINT_F(print_flow,f1);
    let $(f2,r2) = anal_derefR(env,inflow,f1,e1,r1);
    DEBUG_PRINT("\nf2 flow is ");
    DEBUG_PRINT_F(print_flow,f2);
    switch(Tcutil::compress((type_t)e1->topt)) {
    case &PointerType(PtrInfo{t2,_,_}):
      if(is_nontagged_union_type(t2))
	return $(f2,typ_to_absrval(fenv,(type_t)e->topt,false,fenv->unknown_all));
      switch (r2) {
      case &NamedLocation(_, &Aggregate(UnionRInfo(is_union,fnum),rdict)):
	fallthru(is_union,fnum,rdict);
      case &Aggregate(UnionRInfo(is_union,fnum),rdict):
        let field_no = get_field_index(t2,field);
	if (is_union && fnum != -1 && fnum != field_no)
	  return $(f2, typ_to_absrval(fenv,(type_t)e->topt,true,fenv->unknown_none));
        return $(f2,rdict[field_no]);
      default: throw new Core::Impossible("anal_Rexp: AggrArrow");
      }
    default: throw new Core::Impossible("anal_Rexp: AggrArrow ptr");
    }

  case &Conditional_e(e1,e2,e3):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    let pr2 = anal_Rexp(env,copy_ctxt,f1t,e2);
    let pr3 = anal_Rexp(env,copy_ctxt,f1f,e3);
    // merge the consume information on the join
    return join_flow_and_rval(fenv,env->all_changed,pr2,pr3);

  case &And_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    let $(f2t,f2r) = anal_Rexp(env,copy_ctxt,f1t,e2);
    let pr2 = $(f2t,f2r);
    let pr3 = $(f1f,fenv->zero);
    return join_flow_and_rval(fenv,env->all_changed,pr2,pr3);

  case &Or_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    let $(f2t,f2r) = anal_Rexp(env,copy_ctxt,f1f,e2);
    let pr2 = $(f2t,f2r);
    let pr3 = $(f1t,fenv->notzeroall);
    return join_flow_and_rval(fenv,env->all_changed,pr2,pr3);

  case &Subscript_e(e1,e2):
    ANAL_RGN(env, temp) {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                            rlist(temp,e1,e2),false,true);
      DEBUG_PRINT("in Rexp:subscript: after anal, flow is\n");
      DEBUG_PRINT_F(print_flow,f);
      let f2 = f;
      switch(f) {
      case {.ReachableFL = $(d2,relns)}:
        //fprintf(stderr,"subscript %s:",Absynpp::exp2string(e));
        //print_relns(relns); fprintf(stderr,"\n");
        if(initlevel(env->fenv,d2,rvals->tl->hd)==NoneIL)
          Tcutil::terr(e2->loc, "expression may not be initialized");
        let new_relns = add_subscript_reln(fenv->r,relns,e1,e2);
        if (relns != new_relns)
          f2 = ReachableFL(d2,new_relns);
        break;
      default: break;
      }
      switch(Tcutil::compress((type_t)e1->topt)) {
      case &TupleType(tqts):
        switch(rvals->hd) {
	case &NamedLocation(_, &Aggregate(_,rdict)):
	  fallthru(rdict);
        case &Aggregate(_,rdict):
          unsigned int i = Evexp::eval_const_uint_exp(e2)[0];
          return $(f2,rdict[i]);
        default: throw new Core::Impossible("anal_Rexp: Subscript");
        }
      case &PointerType(PtrInfo(_,_,PtrAtts(_,_,b,_,_))):
        let $(f3,r) = anal_derefR(env,inflow,f,e1,rvals->hd);
        switch (f3) {
        case {.BottomFL = _}: return $(f3,r);
        default: return $(f2,r);
        }
      default: throw new Core::Impossible("anal_Rexp: Subscript -- bad type");
      }
    }

  case &Datatype_e(es,tud,_): // NULL case handled above
    fallthru(es);
  case &Tuple_e(es):
    ANAL_RGN(env, temp) {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,es,true,true);
      aggrdict_t aggrdict =
        rnew(env->r) {for i < List::length(es) :
              ({ let temp = rvals->hd;
                 rvals = rvals->tl;
                 temp; })};

      return $(f, rnew(env->r) Aggregate(UnionRInfo(false,-1),aggrdict));
    }
  case &AnonStruct_e(_,des):
    list_t<Absyn::aggrfield_t> fs;
    switch (Tcutil::compress((type_t)e->topt)) {
    case &AnonAggrType(_,f): fs = f; break;
    default: throw new Core::Impossible("anal_Rexp:anon struct has bad type");
    }
    fallthru(des,StructA,fs);
  case &Aggregate_e(_,_,des,&Aggrdecl{.kind = kind, .impl = &AggrdeclImpl{.fields=fs,...},...}):
    ANAL_RGN(env, temp) {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                            rmap(temp,Core::snd,des),true,true);
      aggrdict_t aggrdict =
	aggrfields_to_aggrdict(fenv,fs,kind==UnionA,kind==UnionA ? fenv->unknown_none : fenv->unknown_all);
      int field_no = -1;
      for(int i=0; rvals != NULL; rvals = rvals->tl, des = des->tl, ++i)
        for(_ ds = (*des->hd)[0]; ds != NULL; ds = ds->tl)
          switch (ds->hd) {
          case &ArrayElement(_): throw new Core::Impossible("anal_Rexp:Aggregate_e");
          case &FieldName(fld):
            // find the field and update the aggrdict imperatively
            field_no = get_field_index_fs(fs,fld);
            aggrdict[field_no] = rvals->hd;
            // if this is a union, require this to be initialized
            if (kind == UnionA) {
              let e = (*des->hd)[1];
              f = use_Rval(env,e->loc,f,rvals->hd);
            }
          }
      return $(f, rnew(env->r) Aggregate(UnionRInfo(kind == UnionA,field_no), aggrdict));
    }
  case &Aggregate_e(_,_,_,_):
    throw new Core::Impossible("anal_Rexp:missing aggrdeclimpl");
  case &Array_e(dles):
    ANAL_RGN(env, temp) {
      let es = rmap(temp,Core::snd,dles);
      let $(outflow,rvals) = anal_unordered_Rexps(temp,env,inflow,es,true,true);
      for(; rvals != NULL; rvals = rvals->tl, es = es->tl)
        outflow = use_Rval(env,es->hd->loc,outflow,rvals->hd);
      return $(outflow,typ_to_absrval(fenv,(type_t)e->topt,false,fenv->unknown_all));
    }
  case &Comprehension_e(vd,e1,e2,zt):

    let $(f1,r1) = anal_Rexp(env,true,inflow,e1);
    switch(f1) {
    case {.BottomFL = _}: return $(f1,fenv->unknown_all);
    case {.ReachableFL = $(d1,relns)}:
      if(initlevel(env->fenv,d1,r1)==NoneIL)
	Tcutil::terr(e1->loc, "expression may not be initialized");

      // add vd < e1 when e1 is something useful
      relns_t new_relns = relns;
    comp_loop:
      switch(e1->r) {
      case &Cast_e(_,e2,_,_): e1 = e2; goto comp_loop;
      case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
      case &Var_e(_,&Local_b(v2)) && !v2->escapes: fallthru(v2);
      case &Var_e(_,&Pat_b(v2)) && !v2->escapes: fallthru(v2);
      case &Var_e(_,&Param_b(v2)) && !v2->escapes:
        new_relns = rnew(env->r) List(rnew(env->r) Reln(vd,LessVar(v2,v2->type)),relns);
        break;
      case &Const_e({.Int_c = $(_,i)}):
        new_relns = rnew(env->r) List(rnew(env->r) Reln(vd,LessConst(i)),relns);
        break;
      case &Primop_e(Size,&List(e3,_)):
        switch (e3->r) {
        case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
        case &Var_e(_,&Local_b(v2)) && !v2->escapes: fallthru(v2);
        case &Var_e(_,&Pat_b(v2)) && !v2->escapes: fallthru(v2);
        case &Var_e(_,&Param_b(v2)) && !v2->escapes:
          // size is always unsigned
          new_relns = rnew(env->r) List(rnew(env->r) Reln(vd,LessNumelts(v2)),relns);
          break;
        default: break;
        }
        break;
      default: break;
      }
      if (relns != new_relns)
        f1 = ReachableFL(d1,new_relns);

      // check e2 now
      switch(r1) {
      case &Zero: return $(f1,fenv->unknown_all); // e2 executed 0 times
      case &NotZeroThis:
      case &NotZeroAll:
      case &AddressOf(_): // e2 executed at least once
	let l = List(vd,NULL);
	f1 = add_vars(fenv,f1,&l,fenv->unknown_all,e->loc,false);

	let $(f2,r2) = anal_Rexp(env,true,f1,e2);
	switch(f2) {
	case {.BottomFL = _}: return $(f2,fenv->unknown_all);
	case {.ReachableFL = $(d2,_)}:
	  if(initlevel(fenv,d2,r2) != AllIL) {
	    Tcutil::terr(e1->loc, "expression may not be initialized");
	    return $(BottomFL(),fenv->unknown_all);
	  }
	}
	f1 = f2;
	fallthru;
      default: // e2 executed any number of times, including 0
	while(true) {
	  let l = List(vd,NULL);
	  f1 = add_vars(fenv,f1,&l,fenv->unknown_all,e->loc,false);
	  let $(f2,r2) = anal_Rexp(env,true,f1,e2);
	  switch(f2) {
	  case {.BottomFL = _}: break;
	  case {.ReachableFL = $(d2,_)}:
	    if(initlevel(fenv,d2,r2) != AllIL) {
	      Tcutil::terr(e1->loc, "expression may not be initialized");
	      return $(BottomFL(), fenv->unknown_all);
	    }
	  }
	  let newflow = join_flow(fenv,env->all_changed,f1,f2);
	  if(flow_lessthan_approx(newflow,f1))
	    break;
	  f1 = newflow;
	}
	return $(f1,fenv->unknown_all);
      }
    }
  case &StmtExp_e(s): return anal_stmt_exp(env,copy_ctxt,inflow,s);
  case &Var_e(_,&Unresolved_b):
  case &UnresolvedMem_e(_,_):
  case &CompoundLit_e(_,_):
  case &Valueof_e(_):
  case &Asm_e(...):
    throw new Core::Impossible("anal_Rexp, unexpected exp form");
  }
}

// Having $([f],[r]) = anal_Rexp([env],[inflow],[e]) (or the unordered
// version) and the field nesting [flds], where [e] is a pointer being
// dereferenced, we here set the annotations needed for null-check
// elimination, etc., and return an appropriate lvalue; either a place
// if it is known or else UnknownL.
static $(flow_t<`r>,absLval_t<`r>)
  anal_derefL(analenv_t<`r> env,
	      flow_t<`r> inflow,
              exp_t e,
	      flow_t<`r> f,
	      absRval_t<`r> r,
              list_t<int,`r> flds) {
  let fenv = env->fenv;
  switch(Tcutil::compress((type_t)e->topt)) {
  case &PointerType(PtrInfo{elttype,_,PtrAtts(_,_,bd,zt,_)}):
    switch(f) {
    case {.BottomFL = _}: return $(f,UnknownL());
    case {.ReachableFL = $(outdict,relns)}:
      // else cannot be known: FIX: determine notzero as appropriate
      string_t locname = NULL;
      if(Tcutil::is_bound_one(bd))
	retry: switch(r) {
	case &NamedLocation(n,r2): r = r2; locname = n; goto retry;
	case &NotZeroAll:
	case &NotZeroThis:
          e->annot = new NotZero(copy_relns(Core::heap_region,relns)); break;
	case &AddressOf(&Place(root,flds2)):
	  e->annot = new NotZero(copy_relns(Core::heap_region,relns));
	  return $(f, PlaceL(rnew(fenv->r) Place(root, rappend(fenv->r,flds2,flds))));
	case &Zero:
	  e->annot = &IsZero_val;
	  return $(BottomFL(),UnknownL());
	case &UnknownR(il): f = notzero(env,inflow,f,e,il,locname); fallthru;
	// Note: I think tag cmps aren't useful here
	default: e->annot = new UnknownZ(copy_relns(Core::heap_region,relns));
	}
      else
	e->annot = new UnknownZ(copy_relns(Core::heap_region,relns)); // FIX: too conservative?
      if(initlevel(fenv,outdict,r)==NoneIL)
	Tcutil::terr(e->loc,"dereference of possibly uninitialized pointer");
      return $(f,UnknownL());
    }
  default: throw new Core::Impossible("left deref of non-pointer-type");
  }
}

// Note: we accept all exps, just returning UnknownL for non-lvalues b/c of
// how code like notzero and splitzero use this function, but no reason
// in these cases to track any effects.
// Note: As with anal_Rexp, it's okay to return immediately on BottomFL.
static $(flow_t<`r>,absLval_t<`r>)
  anal_Lexp_rec(analenv_t<`r> env, flow_t<`r> inflow, bool expand_unique,
                exp_t e, list_t<int,`r> flds){
  flowdict_t d;
  let fenv = env->fenv;
  switch(inflow) {
  case {.BottomFL = _}: return $(BottomFL(), UnknownL()); // absLval_t irrelvent
  case {.ReachableFL = $(d2,relns)}:
    d = d2;
    //fprintf(stderr,"exp %s:",Absynpp::exp2string(e));
    //print_relns(relns); fprintf(stderr,"\n");
  }
  switch(e->r) {
  case &Cast_e(_,e1,_,_):      fallthru(e1);
  case &NoInstantiate_e(e1): fallthru(e1);
  case &Instantiate_e(e1,_): return anal_Lexp_rec(env,inflow,expand_unique,e1,flds);

  case &Var_e(_,&Param_b(vd)): fallthru(vd);
  case &Var_e(_,&Local_b(vd)): fallthru(vd);
  case &Var_e(_,&Pat_b(vd)):
    return $(inflow, PlaceL(rnew(env->r) Place(rnew(env->r) VarRoot(vd), flds)));

  case &Var_e(_,&Global_b(vd)): return $(inflow,UnknownL());

  case &AggrArrow_e(e1,f,...):
    switch(Tcutil::compress((type_t)e1->topt)) {
    case &PointerType(PtrInfo{t2,_,_}):
      if(!is_nontagged_union_type(t2))
	flds = rnew(env->r) List(get_field_index(t2,f),flds);
      break;
    default: throw new Core::Impossible("anal_Rexp: AggrArrow ptr");
    }
    fallthru(e1);
  case &Deref_e(e1):
    if (expand_unique && Tcutil::is_noalias_pointer((type_t)e1->topt)) {
      let $(f,lval) = anal_Lexp(env,inflow,true,e1);
      switch $(f,lval) {
      case $({.ReachableFL = $(fd,r)},{.PlaceL = p}):
        let rval = lookup_place(fd,p);
	string_t locname = NULL;
        switch (rval) {
        case &AddressOf(...): return anal_derefL(env,f,e1,f,rval,flds);
	case &NamedLocation(n,r): rval = r; locname = n; fallthru;
        default:
	  DEBUG_PRINT("expanding unique %s found place ",exp2string(e1));
	  DEBUG_PRINT_F(print_place,p);
	  DEBUG_PRINT(" with rval ");
	  DEBUG_PRINT_F(print_absrval,rval);
	  DEBUG_PRINT("\n");
          initlevel_t il = initlevel(fenv,fd,rval);
          absRval_t leaf = (il == AllIL) ? fenv->unknown_all : fenv->unknown_none;
          absRval_t new_rval = typ_to_absrval(fenv,Tcutil::pointer_elt_type((type_t)e1->topt),false,leaf);
          root_t new_root = rnew(fenv->r) MallocPt(e,(type_t)e->topt);
          place_t place = rnew(fenv->r) Place{new_root,NULL};
          absRval_t res = rnew(fenv->r) AddressOf(place);
	  if (locname != NULL)
	    res = rnew(fenv->r) NamedLocation(locname,res);
          update_place_set(env->all_changed,place,0);
          fd = Dict::insert(fd,new_root,new_rval);
          fd = assign_place(fenv,e->loc,fd,env->all_changed,p,res);
          let outflow = ReachableFL(fd,r);
          DEBUG_PRINT("after expansion, flow is ");
          DEBUG_PRINT_F(print_flow,outflow);
          DEBUG_PRINT("\n");
          return anal_derefL(env,outflow,e1,outflow,res,flds);
        }
      default: break;
      }
    }
    let $(f,r) = anal_Rexp(env,false,inflow,e1);
    return anal_derefL(env,inflow,e1,f,r,flds);
  case &Subscript_e(e1,e2):
    // assumes that tuple-projection implies e2 is pure and is evaluable
    switch(Tcutil::compress((type_t)e1->topt)) {
    case &TupleType(_):
      let fld = Evexp::eval_const_uint_exp(e2)[0];
      return anal_Lexp_rec(env,inflow,expand_unique,e1,rnew(env->r) List(fld,flds));
    case &PointerType(PtrInfo(_,_,PtrAtts(_,_,b,_,_))):
      ANAL_RGN(env, temp) {
        let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                              rlist(temp,e1,e2),false,true);
        let f2 = f;
        switch(f) {
        case {.ReachableFL = $(d2,relns)}:
          if(initlevel(fenv,d2,rvals->tl->hd)==NoneIL)
            Tcutil::terr(e2->loc, "expression may not be initialized");
          let new_relns = add_subscript_reln(fenv->r,relns,e1,e2);
          if (relns != new_relns)
            f2 = ReachableFL(d2,new_relns);
          break;
        default: break;
        }
        let $(f3,r) = anal_derefL(env,inflow,e1,f,rvals->hd,flds);
        switch (f3) {
        case {.BottomFL = _}: return $(f3,r);
        default: return $(f2,r);
        }
      }
    default: throw new Core::Impossible("anal_Lexp: Subscript -- bad type");
    }
    // KLUDGE: unions (see comment at top of file)
  case &AggrMember_e(e1,fld,...):
    if(is_nontagged_union_type((type_t)e1->topt))
      return $(inflow,UnknownL());
    return anal_Lexp_rec(env,inflow,expand_unique,e1,
                         rnew(env->r) List(get_field_index((type_t)e1->topt,fld),flds));

  default: return $(BottomFL(), UnknownL()); // see comment before function
  }
}

static $(flow_t<`r>,absLval_t<`r>)
anal_Lexp(analenv_t<`r> env, flow_t<`r> inflow, bool expand_unique, exp_t e) {
  let $(f,r) = anal_Lexp_rec(env,inflow,expand_unique,e,NULL);
  return $(f,r);
}

// FIX: ?? there are more primops and the "not-zero" cases to add if we care.
//      also we can statically determine stupid tests like NotZero == Zero
static $(flow_t<`r>,flow_t<`r>)
anal_test(analenv_t<`r> env, flow_t<`r> inflow, exp_t e) {
  let fenv = env->fenv;
  switch(e->r) {
  case &Conditional_e(e1,e2,e3):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    let $(f2t,f2f) = anal_test(env,f1t,e2);
    let $(f3t,f3f) = anal_test(env,f1f,e3);
    return $(join_flow(fenv, env->all_changed, f2t, f3t),
	     join_flow(fenv, env->all_changed, f2f, f3f));
  case &And_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    let $(f2t,f2f) = anal_test(env,f1t,e2);
    return $(f2t, join_flow(fenv,env->all_changed, f1f, f2f));
  case &Or_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    let $(f2t,f2f) = anal_test(env,f1f,e2);
    return $(join_flow(fenv,env->all_changed, f1t, f2t), f2f);
  case &SeqExp_e(e1,e2):
    let $(f,r) = anal_Rexp(env,false,inflow,e1);
    return anal_test(env, f, e2);
  case &Primop_e(Not,&List(e1,NULL)):
    let $(f1,f2) = anal_test(env,inflow,e1);
    return $(f2,f1);
  case &Primop_e(p,es):
    DEBUG_PRINT("anal_test %s, inflow is ",exp2string(e));
    DEBUG_PRINT_F(print_flow,inflow);
    absRval_t r1,r2;
    flow_t f;
    ANAL_RGN(env, temp) {
      let $(fl,rvals) = anal_unordered_Rexps(temp,env,inflow,es,false,false);
      r1 = rvals->hd;
      r2 = rvals->tl->hd;
      f = fl;
    }
    DEBUG_PRINT("anal_test %s, after rexps, flow is ",exp2string(e));
    DEBUG_PRINT_F(print_flow,f);
    switch(f) {
    case {.BottomFL = _}: return $(f,f);
    case {.ReachableFL = $(d,relns)}:
      let e1 = es->hd;
      let e2 = es->tl->hd;
      if(initlevel(env->fenv,d,r1)==NoneIL)
        Tcutil::terr(es->hd->loc,"expression may not be initialized");
      if(initlevel(env->fenv,d,r2)==NoneIL)
        Tcutil::terr(es->tl->hd->loc,"expression may not be initialized");

      // zero-splitting, only for Eq and Neq with Zero and Unknown, so can
      // take precedence over any array-bounds splitting
      if(p==Eq || p==Neq) {
	string_t r1n = NULL, r2n = NULL;
	switch (r1) {
	case &NamedLocation(n,r): r1 = r; r1n = n; break;
	default: break;
	}
	switch (r2) {
	case &NamedLocation(n,r): r2 = r; r2n = n; break;
	default: break;
	}
	  
        switch($(r1,r2)) {
	/* XXX here I would adjust things to use VirtualAddrOf;
	   do a fall-through on that case for the next two */
        case $(&UnknownR(il),&Zero): // f is correct for both args b/c unordered
          let $(f1,f2) = splitzero(env,f,f,e1,il,r1n);
          switch(p) {
          case Eq:  return $(f2,f1);
          case Neq: return $(f1,f2);
          default: throw new Core::Impossible("anal_test, zero-split");
          }
        case $(&Zero,&UnknownR(il)):
          let $(f1,f2) = splitzero(env,f,f,e2,il,r2n);
          switch(p) {
          case Eq:  return $(f2,f1);
          case Neq: return $(f1,f2);
          default: throw new Core::Impossible("anal_test, zero-split");
          }
        case $(&Zero,&Zero):
          if (p == Eq) return $(f,BottomFL());
          else return $(BottomFL(),f);
        case $(&Zero,&NotZeroAll): fallthru;
        case $(&Zero,&NotZeroThis): fallthru;
        case $(&Zero,&AddressOf(_)): fallthru;
        case $(&NotZeroAll,&Zero): fallthru;
        case $(&NotZeroThis,&Zero): fallthru;
        case $(&AddressOf(_),&Zero):
          if (p == Neq) return $(f,BottomFL());
          else return $(BottomFL(),f);
        default: break;
        }
      }

      // bounds checking needs unsigned comparisons
      // this (hoisted) check shouldn't disable any of Greg's stuff because
      // it always used to either check for unsigned or require x.size,
      // which is unsigned
      switch($(Tcutil::compress((type_t)e1->topt),Tcutil::compress((type_t)e2->topt))) {
      case $(&IntType(Unsigned,_),_):
      case $(_,&IntType(Unsigned,_)):
      case $(&TagType(_),_):
      case $(_,&TagType(_)): break;
      default: return $(f,f);
      }

      switch(p) {
      case Eq:
      case Neq:
      case Gt:
      case Gte: return $(f,f);
      case Lt:
        let ft = f;
        let ff = f;

        switch(ft) {
        case {.BottomFL = _}: throw new Core::Impossible("anal_test, Lt");
        case {.ReachableFL = $(d2,_)}: d = d2;
        }

        // this case tracks most of the inequalities we need for bounds-checking
        switch (e1->r) {
          // Note: global arrays are the only thing that don't "escape"
        case &Var_e(_,&Global_b(v1)) && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Local_b(v1))  && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Pat_b(v1))    && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Param_b(v1))  && !v1->escapes:
          switch (e2->r) {
          case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
          case &Var_e(_,&Local_b(v2))  && !v2->escapes: fallthru(v2);
          case &Var_e(_,&Pat_b(v2))    && !v2->escapes: fallthru(v2);
          case &Var_e(_,&Param_b(v2))  && !v2->escapes:
            // v1 or v2 are unsigned, so this is an unsigned comparison
            let r = env->fenv->r;
            let relns_true = rnew(r) List(rnew(r) Reln(v1,LessVar(v2,v2->type)),relns);
            return $(ReachableFL(d,relns_true), ff);
          case &Const_e({.Int_c = $(_,i)}): fallthru(i);
          case &Cast_e(_,&Exp{.r = &Const_e({.Int_c = $(_,i)}),...},...):
            let r = env->fenv->r;
            let relns_true = rnew(r) List(rnew(r) Reln(v1,LessConst(i)),relns);
            return $(ReachableFL(d,relns_true), ff);
          case &Primop_e(Size,&List(e3,_)):
            switch (e3->r) {
            case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Local_b(v2))  && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Pat_b(v2))    && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Param_b(v2))  && !v2->escapes:
              // size is always unsigned
              let r = env->fenv->r;
              let relns_true = rnew(r) List(rnew(r) Reln(v1,LessNumelts(v2)),relns);
              return $(ReachableFL(d,relns_true), ff);
            default: return $(ft,ff);
            }
          default: return $(ft,ff);
          }
        default: return $(ft,ff);
        }

      case Lte:
        let ft = f;
        let ff = f;

        switch(ft) {
        case {.BottomFL = _}: throw new Core::Impossible("anal_test, Lte");
        case {.ReachableFL = $(d2,_)}: d = d2;
        }

        // this case checks for i <= x.size
        switch (e1->r) {
          // Note: global arrays are the only thing that don't "escape"
        case &Var_e(_,&Global_b(v1)) && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Local_b(v1))  && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Pat_b(v1))    && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Param_b(v1))  && !v1->escapes:
          switch (e2->r) {
          case &Const_e({.Int_c = $(_,i)}): fallthru(i);
          case &Cast_e(_,&Exp{.r = &Const_e({.Int_c = $(_,i)}),...},...):
            let r = env->fenv->r;
            let relns_true = rnew(r)
              List(rnew(r) Reln(v1,LessEqConst(i)),relns);
            return $(ReachableFL(d,relns_true), ff);
          case &Primop_e(Size,&List(e3,_)):
            switch (e3->r) {
            case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Local_b(v2))  && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Pat_b(v2))    && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Param_b(v2))  && !v2->escapes:
              // size is always unsigned
              let fenv = env->fenv;
              let relns_true = rnew(fenv->r) List(rnew(fenv->r) Reln(v1,LessEqNumelts(v2)),relns);
              return $(ReachableFL(d,relns_true), ff);
            default: return $(ft,ff);
            }
          default: return $(ft,ff);
          }
        default: return $(ft,ff);
        }
      default: return $(f,f);
      }
    }
  default: break;
  }
  // NB: just the default case of the outermost switch from here on;
  // should otherwise have returned in switch statement
  let $(f,r) = anal_Rexp(env,false,inflow,e);
  switch(f) {
  case {.BottomFL = _}: return $(f,f);
  case {.ReachableFL = $(d,_)}:
    string_t locname = NULL;
    retry: switch(r) {
    case &NamedLocation(n,r2): r = r2; locname = n; goto retry;
    case &Zero: return $(BottomFL(),f);
    case &NotZeroThis:
    case &NotZeroAll:
    case &AddressOf(_): return $(f,BottomFL());
    case &UnknownR(NoneIL):
    case &Esc(NoneIL):
    case &Consumed(_,_,_):
      Tcutil::terr(e->loc,"expression may not be initialized");
      return $(BottomFL(),BottomFL());
    /* XXX another place to add VirtAddrOf fallthru */
    case &UnknownR(il): return splitzero(env,inflow,f,e,il,locname);
    case &Esc(_):       return $(f,f);
    case &Aggregate(...): throw new Core::Impossible("anal_test");
    }
  }
}

static void check_for_unused_unique($(seg_t,analenv_t<`r>,flowdict_t<`r>)@ ckenv,
                                    root_t<`r> root, absRval_t<`r> rval) {
  let &$(loc,env,fd) = ckenv;
  switch (root) {
  case &VarRoot(vd):
    if (Tcutil::is_noalias_pointer_or_aggr(env->fenv->r,vd->type))
      switch (rval) {
      case &NamedLocation(_,&Consumed(...)):
      case &NamedLocation(_,&Zero):
      case &NamedLocation(_,&UnknownR(NoneIL)):
      case &Consumed(...):
      case &Zero:
      case &UnknownR(NoneIL): break;
      default:
        Tcutil::warn(loc,"unique pointers reachable from %s may become unreachable",qvar2string(vd->name));
        break;
      }
    break;
  default: break;
  }
}

static void check_init_params(seg_t loc, analenv_t<`r> env, flow_t<`r> flow) {
  switch(flow) {
  case {.BottomFL = _}: return;
  case {.ReachableFL = $(d,_)}:
    for(let inits = env->param_roots; inits!=NULL; inits=inits->tl)
      if(initlevel(env->fenv,d,lookup_place(d,inits->hd))!=AllIL)
	Tcutil::terr(loc, "function may not initialize all the parameters "
		     "with attribute 'initializes'");
    if (warn_lose_unique) {
      let check_env = $(loc,env,d);
      Dict::iter_c(check_for_unused_unique,&check_env,d);
    }
    return;
  }
}

static void check_noconsume_params(seg_t loc, analenv_t<`r> env,
				   flow_t<`r> flow) {
  switch(flow) {
  case {.BottomFL = _}: return;
  case {.ReachableFL = $(d,_)}:
    let bogus_exp = exp_unsigned_one;
    let bogus_bool = false;
    let bogus_int = 1;
    for(let params = env->noconsume_params; params!=NULL; params=params->tl) {
      // need to check that for each parameter it is still mapped to
      // the same location, and that location must not be consumed
      let &$(p,rval) = params->hd;
      let curr_rval = lookup_place(d,p);
      let &Place(root,_) = p;
      switch ($(root,rval,curr_rval)) {
      case $(&VarRoot(vd),&NamedLocation(n1,r1),&NamedLocation(n2,r2)):
	if (n1 == n2) {
	  if (is_unique_consumed(bogus_exp,bogus_int,r2,&bogus_bool))
	    Tcutil::terr(loc, "function consumes parameter %s"
			 " with attribute 'noconsume'", 
			 Absynpp::qvar2string(vd->name));
	  else if(initlevel(env->fenv,d,r2) != AllIL)
	    Tcutil::terr(loc, "function consumes value pointed to by "
			 "parameter %s, which has attribute 'noconsume'", 
			 Absynpp::qvar2string(vd->name));
	  // otherwise it names the same value, which is good
	}
	else
	  fallthru(vd);
	break;
      case $(&VarRoot(vd),_,_):
	Tcutil::terr(loc, "function parameter %s with attribute "
		     "'noconsume' no longer set to its original value", 
		     Absynpp::qvar2string(vd->name));
	break;
      default:
	Tcutil::impos("check_noconsume_params: root is not a varroot");
      }
    }
    return;
  }
}

// For now, PATTERN VARS ARE INITIALIZED
// FIX: should keep track of which pattern vars are actually consumed
//   so that we don't entirely consume the value being switched on
static flow_t<`r> anal_scs(analenv_t<`r> env,flow_t<`r> inflow,
                           list_t<switch_clause_t> scs){
  let fenv = env->fenv;
  for(; scs != NULL; scs = scs->tl) {
    let &Switch_clause(_,vds_opt,where_opt,body,loc) = scs->hd;
    flow_t clause_inflow = add_vars(fenv,inflow,vds_opt->v,fenv->unknown_all,loc,false);
    flow_t clause_outflow;
    if(where_opt != NULL) {
      exp_t wexp = (exp_t)where_opt;
      let $(ft,ff) = anal_test(env,clause_inflow,wexp);
      inflow = ff; // affects remaining clauses
      clause_outflow = anal_stmt(env,ft,body);
    } else {
      clause_outflow = anal_stmt(env,clause_inflow,body);
    }
    switch(clause_outflow) {
    case {.BottomFL = _}: break;
    default:
      // no need for a break/fallthru for the last case
      if(scs->tl == NULL)
	return clause_outflow;
      else {
	// if the next case has pattern variables, we need an explicit fallthru
	// else just issue a warning
	if (scs->tl->hd->pat_vars->v != NULL)
	  Tcutil::terr(body->loc, "switch clause may implicitly fallthru");
	else
	  Tcutil::warn(body->loc, "switch clause may implicitly fallthru");
	// in any case, we must update the flow there!
	update_flow(env, scs->tl->hd->body, clause_outflow);
      }
      break;
    }
  }
  return BottomFL(); // not reached if last case falls through
}

// the variables defined by vd are about to go out of scope -- check
// that there aren't hidden unique pointers in them.
static void check_dropped_unique_vd($(analenv_t<`r>, flowdict_t<`r>, seg_t)@ vdenv,
                                     Absyn::vardecl_t vd) {
  let &$(env,fd,loc) = vdenv;
  if (Tcutil::is_noalias_pointer_or_aggr(env->fenv->r,vd->type)) {
    // FIX: avoid allocation of var-root
    datatype Root.VarRoot vdroot = VarRoot(vd);
    //let root = rnew(env->fenv->r) VarRoot(vd);
    let rval = Dict::lookup_other(fd,root_cmp,&vdroot);
    switch (rval) {
    case &NamedLocation(_,&Consumed(...)):
    case &NamedLocation(_,&Zero):
    case &NamedLocation(_,&UnknownR(NoneIL)):
    case &Consumed(...):
    case &Zero:
    case &UnknownR(NoneIL): break;
    default:
      Tcutil::warn(loc,"unique pointers may still exist after variable %s goes out of scope",qvar2string(vd->name));

      break;
    }
  }
}

static void check_dropped_unique(analenv_t<`r> env, flow_t<`r> inflow,
                                 decl_t decl) {
  switch (inflow) {
  case {.ReachableFL = $(fd,_)}:
    let vdenv = $(env,fd,decl->loc);
    let fenv = env->fenv;
    switch (decl->r) {
    case &Var_d(vd):
      check_dropped_unique_vd(&vdenv,vd);
      break;
    case &Let_d(_,&Core::Opt(vds),_): fallthru(vds);
    case &Letv_d(vds):
      List::iter_c(check_dropped_unique_vd,&vdenv,vds);
      break;
    default: break;
    }
    break;
  default: break;
  }
  return;
}

static flow_t<`r> anal_stmt(analenv_t<`r> env, flow_t<`r> inflow, stmt_t s) {
  flow_t outflow;
  //DEBUG_PRINT("before statement <%s>, the flow is {",stmt2string(s));
  //DEBUG_PRINT_F(print_flow,inflow);
  //DEBUG_PRINT("}\n");
  let $(annot,sflow) = pre_stmt_check(env,inflow,s);
  inflow = *sflow;
  let fenv = env->fenv;
  switch(s->r) {
  case &Skip_s: return inflow;
  case &Return_s(NULL):
    if (env->noreturn)
      Tcutil::terr(s->loc,"`noreturn' function might return");
    check_init_params(s->loc,env,inflow);
    check_noconsume_params(s->loc,env,inflow);
    return BottomFL();
  case &Return_s(e):
    if (env->noreturn)
      Tcutil::terr(s->loc,"`noreturn' function might return");
    let $(f,r) = anal_Rexp(env,true,inflow,(exp_t)e);
    f = use_Rval(env,e->loc,f,r);
    check_init_params(s->loc,env,f);
    check_noconsume_params(s->loc,env,f);
    return BottomFL();

  case &Exp_s(e): return anal_Rexp(env,false,inflow,e)[0];

  case &Seq_s(s1,s2):
    return anal_stmt(env, anal_stmt(env, inflow, s1), s2);

  case &IfThenElse_s(e,s1,s2):
    let $(f1t,f1f) = anal_test(env,inflow,e);
    DEBUG_PRINT("after if-true, the flow is {");
    DEBUG_PRINT_F(print_flow,f1t);
    DEBUG_PRINT("}\n");
    DEBUG_PRINT("after if-false, the flow is {");
    DEBUG_PRINT_F(print_flow,f1f);
    DEBUG_PRINT("}\n");
    let ff = anal_stmt(env,f1f,s2);
    let ft = anal_stmt(env,f1t,s1);
    return join_flow(fenv, env->all_changed, ft, ff);

  case &While_s($(e,cont),body):
    DEBUG_PRINT("in anal_stmt:While_s for |%s| (cont=|%s|)\n",
		Absynpp::stmt2string(body),
		Absynpp::stmt2string(cont));
    let $(_,eflow_ptr) = pre_stmt_check(env,inflow,cont);
    let e_inflow = *eflow_ptr;
    let $(f1t,f1f) = anal_test(env,e_inflow,e);
    let body_outflow = anal_stmt(env,f1t,body);
    update_flow(env, cont, body_outflow);
    return f1f;

  case &Do_s(body,$(e,cont)):
    DEBUG_PRINT("in anal_stmt:Do_s for |%s|\n",
		Absynpp::stmt2string(body));
    let body_outflow = anal_stmt(env,inflow,body);
    let $(_,eflow_ptr) = pre_stmt_check(env,body_outflow,cont);
    let e_inflow = *eflow_ptr;
    let $(f1t,f1f) = anal_test(env,e_inflow,e);
    update_flow(env, body, f1t);
    return f1f;

    // MWH: ok to drop these?  Seems like "null" expressions
  case &For_s(e1,$(e2,guard),$(e3,cont),body):
    let e1_outflow = anal_Rexp(env,false,inflow,e1)[0];
    let $(_,e2flow_ptr) = pre_stmt_check(env,e1_outflow,guard);
    let e2_inflow  = *e2flow_ptr;
    let $(f2t,f2f) = anal_test(env,e2_inflow,e2);
    let body_outflow = anal_stmt(env,f2t,body);
    let $(_,e3flow_ptr) = pre_stmt_check(env,body_outflow,cont);
    let e3_inflow  = *e3flow_ptr;
    let e3_outflow = anal_Rexp(env,false,e3_inflow,e3)[0];
    update_flow(env, guard, e3_outflow);
    return f2f;

    // eg. of when this can happen is when destination is end of function
  case &Break_s(NULL): return BottomFL();
  case &Fallthru_s(es,&destclause):
    ANAL_RGN(env, temp) {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,es,true,true);
      // FIX: WHEN WE INTERPRET PATTERNS
      for(; rvals != NULL; rvals = rvals->tl, es = es->tl)
        f = use_Rval(env,es->hd->loc,f,rvals->hd);
      // The gunk is because the next case's binding vars are still in scope!
      f = add_vars(fenv,f,destclause->pat_vars->v,fenv->unknown_all,s->loc,false);
      update_flow(env, (stmt_t)(destclause->body), f);
      return BottomFL();
    }
  case &Break_s(dest):    fallthru(dest);
  case &Continue_s(dest): fallthru(dest);
  case &Goto_s(_,dest):
    // check we don't jump into scope -- this is totally orthogonal to
    // the rest of control-flow checking, so we only do it the first iteration
    if(env->iteration_num==1) {
      let my_encloser   = annot->encloser;
      let dest_encloser = get_stmt_annot((stmt_t)dest)->encloser;
      while(dest_encloser != my_encloser) {
	let next_encloser = get_stmt_annot(my_encloser)->encloser;
	if(next_encloser == my_encloser) { // function body is own encloser
	  Tcutil::terr(s->loc, "goto enters local scope or exception handler");
	  break;
	}
	my_encloser = next_encloser;
      }
    }
    // now just update the dest's flow
    DEBUG_PRINT("in Rexp:Break/Continue/Goto; updating flow\n");
    update_flow(env, (stmt_t)dest, inflow);
    return BottomFL();

  case &Switch_s(e,scs):
    let $(f,r) = anal_Rexp(env,true,inflow,e);
    f = use_Rval(env,e->loc,f,r);
    return anal_scs(env,f,scs);

  case &TryCatch_s(s1,scs):
    // order very important here
    DEBUG_PRINT("in anal_stmt:TryCatch_e\n");
    bool   old_in_try  = env->in_try;
    flow_t old_tryflow = env->tryflow;
    env->in_try  = true;
    env->tryflow = inflow;
    flow_t s1_outflow = anal_stmt(env,inflow,s1);
    flow_t scs_inflow = env->tryflow;
    DEBUG_PRINT("inflow for catch clauses:\n");
    DEBUG_PRINT_F(print_flow,scs_inflow);
    env->in_try  = old_in_try;
    env->tryflow = old_tryflow;
    // sound KLUDGE (see update_tryflow)
    update_tryflow(env,scs_inflow); // necessary?
    flow_t scs_outflow = anal_scs(env,scs_inflow,scs);
    switch(scs_outflow) {
    case {.BottomFL = _}: break;
    default: Tcutil::terr(s->loc, "last catch clause may implicitly fallthru");
    }
    outflow = s1_outflow; // really join with scs_outflow, but it's BottomFL
    DEBUG_PRINT("leaving anal_stmt:TryCatch_e\n");
    return outflow;

    // must handle alias declarations separate from other decls because
    // we need to reset some reachable stuff.
  case &Decl_s(&Decl{.r = &Alias_d(e,tv,vd), ...},s1):
    // similar to the copy situation at the top of anal_Rexp
    let $(f,lval) = anal_Lexp(env,inflow,true,e);
    DEBUG_PRINT("inflow on alias is {\n");
    DEBUG_PRINT_F(print_flow,inflow);
    DEBUG_PRINT("}\n");
    switch $(f,lval) {
    case $({.ReachableFL = $(fd,relns)},{.PlaceL = p}):
      let old_rval = lookup_place(fd,p);
      // HACK -- if e is cast, then get at the underlying expression's type
      type_t t = (type_t)e->topt;
      switch (e->r) {
      case &Cast_e(_,e2,...): t = (type_t)e2->topt; break;
      default: break;
      }
      let new_rval = make_unique_consumed(fenv,t,e,env->iteration_num,old_rval);
      fd = assign_place(fenv,e->loc,fd,env->all_changed,p,new_rval);
      f = ReachableFL(fd,relns);
      DEBUG_PRINT("flow after consuming is {\n");
      DEBUG_PRINT_F(print_flow,f);
      DEBUG_PRINT("}\n");
      absRval_t leaf;
      switch (initlevel(fenv,fd,old_rval)) {
      case AllIL: leaf = fenv->unknown_all; break;
      case NoneIL: leaf = fenv->unknown_none; break;
      case ThisIL: leaf = fenv->unknown_this; break;
      }
      // XXX: not sure what's going on here---may need to deal
      //   with NamedLocation specially ...
      let old_rval_approx = typ_to_absrval(fenv,t,false,leaf);
      f = use_Rval(env,e->loc,f,old_rval);
      let vds = List(vd,NULL);
      f = add_vars(fenv,f,&vds,fenv->unknown_all,s->loc,false);
      DEBUG_PRINT("flow for alias body is {\n");
      DEBUG_PRINT_F(print_flow,f);
      DEBUG_PRINT("}\n");
      f = anal_stmt(env,f,s1);
      // plug old rvalue back into place -- actually, we plug in an
      // approximation of the old rvalue, according to its init-level.
      // this avoids some complications with expanded nodes that end
      // up escaping.
      switch (f) {
      case {.ReachableFL = $(fd,relns)}:
        fd = assign_place(fenv,s->loc,fd,env->all_changed,p,old_rval_approx);
        outflow = ReachableFL(fd,relns);
        DEBUG_PRINT("flow for alias continuation is {\n");
        DEBUG_PRINT_F(print_flow,outflow);
        DEBUG_PRINT("}\n");
        return outflow;
      default: return f;
      }
    case $({.BottomFL = _}, _): return f;
    default: Tcutil::terr(e->loc,"bad alias expression--no unique path found");
      return BottomFL();
    }

  case &Decl_s(d,s):
    outflow = anal_stmt(env,anal_decl(env,inflow,d),s);
    if (warn_lose_unique)
      check_dropped_unique(env,outflow,d);
    return outflow;

  case &Label_s(_,s): return anal_stmt(env,inflow,s);

  case &ResetRegion_s(e):
    let $(f,r) = anal_Rexp(env,true,inflow,e);
    let f2 = use_Rval(env,e->loc,f,r);
    switch (Tcutil::compress((type_t)e->topt)) {
    case &RgnHandleType(r):
      return kill_flow_region(fenv,f,r);
    default: throw new Core::Impossible("anal_stmt -- reset_region");
    }

  default: throw new Core::Impossible("anal_stmt -- bad stmt syntax"
                                      " or unimplemented stmt form");
  }
}

static void check_nested_fun(flow_env_t<`r>, flow_t<`r> inflow, fndecl_t fd);

static flow_t<`r> anal_decl(analenv_t<`r> env, flow_t<`r> inflow, decl_t decl) {
  let fenv = env->fenv;
  switch(decl->r) {
    // Note: We don't need to add initialized vars as changed things
    //       because they won't escape to unordered siblings???

  case &Var_d(vd):
    DEBUG_PRINT("analyzing declaration %s, Flow = {\n",qvar2string(vd->name));
    DEBUG_PRINT_F(print_flow,inflow);
    DEBUG_PRINT("}\n");
    let vds = List(vd,NULL);
    inflow = add_vars(fenv,inflow,&vds,fenv->unknown_none,decl->loc,false);
    let e = vd->initializer;
    if(e==NULL)
      return inflow;
    let $(f,r) = anal_Rexp(env,true,inflow,(exp_t)e);
    switch(f) {
    case {.BottomFL = _}: return BottomFL();
    case {.ReachableFL = $(outdict,relns)}:
      outdict = assign_place(fenv,decl->loc,outdict,env->all_changed,
			     rnew(env->r) Place(rnew(env->r) VarRoot(vd),
                                                NULL), r);
      relns = reln_assign_var(env->r,relns,vd,(exp_t)vd->initializer);
      let outflow = ReachableFL(outdict,relns);
      update_tryflow(env,outflow);
      //fprintf(stderr,"outflow for decl %s:",Absynpp::qvar2string(vd->name));
      //print_relns(relns); fprintf(stderr,"\n");
      return outflow;
    }

    // FIX WHEN WE INTERPRET PATTERNS!!! SPECIAL-CASE VAR-PATTERN?
  case &Let_d(_,&Core::Opt(vds),e):
    let $(f,r) = anal_Rexp(env,true,inflow,e);
    f = use_Rval(env,e->loc,f,r);
    return add_vars(fenv,f,vds,fenv->unknown_all,decl->loc,false);

  case &Letv_d(vds):
    return add_vars(fenv,inflow,vds,fenv->unknown_none,decl->loc,false);

  case &Fn_d(fd):
    check_nested_fun(fenv,inflow,fd);
    type_t t = (type_t)fd->cached_typ;
    let vd = (vardecl_t)fd->fn_vardecl;
    // JGM: hmmmm.  nested functions can effect local variables, so if we
    // call one of these, then we should set all of the local variables
    // to unknown-init-level.
    return add_vars(fenv,inflow,rnew(env->r) List(vd,NULL),fenv->unknown_all,decl->loc,false);

  case &Region_d(tv,vd,resetable,exp_opt):
    if (exp_opt != NULL) {
      let e = (exp_t)exp_opt;
      let $(f,r) = anal_Rexp(env,true,inflow,e);
      inflow = use_Rval(env,e->loc,f,r);
    }
    let vds = List(vd,NULL);
    return add_vars(fenv, inflow,&vds,fenv->unknown_all,decl->loc,false);

  default: throw new Core::Impossible("anal_decl: unexpected decl variant");
  }
}

//////////////////////////// Post-pass //////////////////////////////

// Note: This is just a space optimization.  Out of laziness, we don't
//       traverse expressions to find nested statements (due to StmtExp_e),
//       so the space for such annotations leaks.
// JGM: now that the flow annotations are put in a hashtable (that gets
// collected at the end of the analysis), there's not much need for this.
/*
static void postpass(stmt_t s) {
  s->annot = EmptyAnnot;
  switch(s->r) {
  case &For_s(_,$(_,s2),$(_,s3),s1): postpass(s3); fallthru(s1,s2);

  case &Seq_s(s1,s2):          fallthru(s1,s2);
  case &While_s($(_,s2),s1):   fallthru(s1,s2);
  case &Do_s(s1,$(_,s2)):      fallthru(s1,s2);
  case &IfThenElse_s(_,s1,s2): postpass(s1); fallthru(s2);

  case &Region_s(_,_,_,_,s1): fallthru(s1);
  case &Label_s(_,s1):      fallthru(s1);
  case &Decl_s(_,s1):       postpass(s1); return;

  case &TryCatch_s(s1,scs): postpass(s1); fallthru(scs);
  case &Switch_s(_,scs):
    for(; scs != NULL; scs = scs->tl)
      postpass(scs->hd->body);
    return;
  default: return;
  }
}
*/

//////////////////////////// Top-level ////////////////////////////////

// TO DO: account for init qualifier (add ThisIL for those params and
//        check them on return and on fall off void)
static void check_fun(fndecl_t fd) {
  region frgn; {
    flow_env_t<`frgn> fenv = new_flow_env(frgn);
    check_nested_fun(fenv,ReachableFL(fenv->mt_flowdict,NULL),fd);
  }
}

static int hash_ptr(`a s) {
  return (int)s;
}

static void check_nested_fun(flow_env_t<`r> fenv,
                             flow_t<`r> inflow, fndecl_t fd) {
  //fprintf(stderr,"checking %s of type %s\n",*(*fd->name)[1],
  //        Absynpp::typ2string(Tcutil::fndecl2typ(fd)));
  let frgn = fenv->r;
  let loc = fd->body->loc;
  inflow = add_vars(fenv,inflow,fd->param_vardecls->v,fenv->unknown_all,loc,true);
  DEBUG_PRINT("initial inflow = {");
  DEBUG_PRINT_F(print_flow,inflow);
  DEBUG_PRINT("}\n");
  list_t<place_t,`r> param_roots = NULL; // only for "initializes"
  list_t<$(place_t<`r,`r>,absRval_t<`r>) @`r,`r> noconsume_rvals = NULL; // only for "noconsume"
  switch(inflow) {
  case {.BottomFL = _}: Tcutil::impos("check_fun");
  case {.ReachableFL = $(d,relns)}:
    // NOTE: for reasons Dan doesn't understand, the attributes, are not
    // on the fndecl, only on the type.
    _ atts;
    switch(Tcutil::compress((type_t)fd->cached_typ)) {
    case &FnType(FnInfo(_,_,_,_,_,_,_,_,as)): atts = as; break;
    default: Tcutil::impos("check_fun: non-function type cached with fndecl_t");
    }
    for(; atts != NULL; atts = atts->tl)
      switch(atts->hd) {
      case &Noliveunique_att(i):
        unsigned j = i;
        exp_t bogus_exp = signed_int_exp(-1,0);
        if (j > List::length(fd->param_vardecls->v)) {
          Tcutil::terr(loc,"noliveunique attribute exceeds number of parameters");
          continue;
        }
        let vd = List::nth(fd->param_vardecls->v,j-1);
        type_t t = Tcutil::compress(vd->type);
        if (!Tcutil::is_noalias_pointer(t)) {
          Tcutil::terr(loc,"noliveunique attribute requires unique pointer type");
          continue;
        }
        type_t elttype = Tcutil::pointer_elt_type(t);
        let rval =
          make_unique_consumed(fenv,elttype,bogus_exp,-1,
                               typ_to_absrval(fenv,elttype,false,fenv->unknown_all));
        let r = rnew(frgn) InitParam(j,t);
        let rp = rnew(frgn) Place(r,NULL);
        d = Dict::insert(d,r,rval);
        d = Dict::insert(d,rnew(frgn) VarRoot(vd),rnew(frgn) AddressOf(rp));
        break;
      case &Initializes_att(i):
	unsigned j = i;
	if(j > List::length(fd->param_vardecls->v)) {
	  Tcutil::terr(loc,
		       "initializes attribute exceeds number of parameters");
	  continue;
	}
	let vd = List::nth(fd->param_vardecls->v,j-1);
	switch(Tcutil::compress(vd->type)) {
	case &PointerType(PtrInfo(t,_,PtrAtts(_,nullable,bd,zt,_))):
	  if(conref_val(nullable))
	    Tcutil::terr(loc, "initializes attribute not allowed on "
			 "nullable pointers");
	  if(!Tcutil::is_bound_one(bd))
	    Tcutil::terr(loc, "initializes attribute allowed only on pointers"
			 " of size 1");
          if(conref_def(false,zt))
	    Tcutil::terr(loc, "initializes attribute allowed only on pointers"
			 " to non-zero-terminated arrays");
	  let r = rnew(frgn) InitParam(j,t);
	  let rp = rnew(frgn) Place(r,NULL);
	  d = Dict::insert(d,r,typ_to_absrval(fenv,t,false,fenv->esc_none));
	  d = Dict::insert(d,rnew(frgn) VarRoot(vd),rnew(frgn) AddressOf(rp));
	  param_roots = rnew(frgn) List(rp,param_roots);
	  break;
	default: Tcutil::terr(loc, "initializes attribute on non-pointer");
	}
	break;
      case &Noconsume_att(i):
        unsigned j = i;
        if (j > List::length(fd->param_vardecls->v)) {
          Tcutil::terr(loc,"noconsume attribute exceeds number of parameters");
          continue;
        }
        let vd = List::nth(fd->param_vardecls->v,j-1);
        type_t t = Tcutil::compress(vd->type);
        if (!Tcutil::is_noalias_pointer(t)) {
          Tcutil::terr(loc,"noconsume attribute requires unique pointer type");
          continue;
        }
	// XXX other restrictions?  E.g. not on arrays or fat pointers?
        let root = rnew(frgn) VarRoot(vd);
	let rp = rnew(frgn) Place(root,NULL);
        let rval = lookup_place(d,rp);
	noconsume_rvals = rnew(frgn) List(rnew(frgn) $(rp,rval),
                                          noconsume_rvals);
	break;
      default: break;
      }
    inflow = ReachableFL(d,relns);
  }

  bool      noreturn = Tcutil::is_noreturn(Tcutil::fndecl2typ(fd));
  Hashtable::table_t<stmt_t,flow_t@`r,`r> flow_table =
    Hashtable::rcreate(frgn, 33, Core::ptrcmp, hash_ptr);
  analenv_t env = rnew(frgn) AnalEnv(frgn,fenv,true,0,false,inflow,NULL,noreturn,param_roots,noconsume_rvals,flow_table);
  flow_t    outflow  = inflow;
  while(env->iterate_again && !Position::error_p()) {
    ++(env->iteration_num);
    DEBUG_PRINT("\n  ITERATION %d, inflow = {", env->iteration_num);
    DEBUG_PRINT_F(print_flow,inflow);
    DEBUG_PRINT("}\n");
    env->iterate_again = false;
    outflow = anal_stmt(env, inflow, fd->body);
  }
  switch(outflow) {
  case {.BottomFL = _}: break;
  default:
    check_init_params(loc,env,outflow);
    check_noconsume_params(loc,env,outflow);

    // this is the case when the function "falls off the end"
    if (noreturn)
      Tcutil::terr(loc, "`noreturn' function might (implicitly) return");
    else
      switch (Tcutil::compress(fd->ret_type)) {
      case &VoidType: break;
      case &FloatType(_):
      case &IntType(_,_):
        Tcutil::warn(loc, "function may not return a value"); break;
      default:
        Tcutil::terr(loc, "function may not return a value"); break;
      }
    break;
  }
  // postpass(fd->body); // see comments above
}

void cf_check(list_t<decl_t> ds) {
  for(; ds != NULL; ds = ds->tl)
    switch(ds->hd->r) {
    case &Fn_d(fd):	      check_fun(fd); break;
    case &ExternC_d(ds2):     fallthru(ds2);
    case &Using_d(_,ds2):     fallthru(ds2);
    case &Namespace_d(_,ds2): cf_check(ds2); break;
    case &ExternCinclude_d(_,_): break;
    default: break;
    }
}
