/* Control flow analysis.
   Copyright (C) 2001 Dan Grossman, Greg Morrisett
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

// TO DO: Get patterns right rather than require fully initialized
//        At very least, special case let x = e !!

// TO DO: complain about dereference of definitely NULL -- cannot do this
// until we've reached a fixpoint!!!

// TO DO: Exploit @ types to know NotZero!

// KLUDGE: For unions, we just pretend its initialized.  Since you can
// only read bits out, safety is not compromised.

// The previous pass (type-checking) sets up:
// * decorating all stmts with their correct non_local_preds
// * decorating each stmt with CFAnnot
// * setting all the encloser fields (note the list ends with a self-loop,
//   not a NULL!
// (The latter two activities are performed via calls to set_encloser.)

#include <core.h>
#include <list.h>
#include <set.h>
#include <dict.h>
#include <string.h>
#include "absyn.h"
#include "tcutil.h"
#include "evexp.h"
#include "cf_flowinfo.h"
#include "new_control_flow.h"
#include "rgnorder.h"

// for debugging
#include "absynpp.h"
#include <stdio.h>

using List;
using Absyn;
using CfFlowInfo;
namespace NewControlFlow;

typedef Dict::dict_t<`a,`b> dict_t<`a,`b>;
typedef Position::seg_t     seg_t;

//////////////////////////// Statement Decoration //////////////////////////
struct CFStmtAnnot {
  stmt_t encloser; // for checking goto-scope -- no other use
  int    visited;  // for detecting need to iterate
  flow_t flow;     // flow to merge in when we check again
};
typedef struct CFStmtAnnot cf_stmt_annot_t;
xtunion AbsynAnnot { static CFAnnot(cf_stmt_annot_t); };

// to be used by the type-checking pass to get things set up for us
// must be called on EVERY stmt in the abstract syntax (even the dummy ones)
void set_encloser(stmt_t enclosee, stmt_t encloser) {
  enclosee->annot = new CFAnnot(CFStmtAnnot(encloser, 0, BottomFL));
}
static cf_stmt_annot_t @ get_stmt_annot(stmt_t s) {
  switch(s->annot) {
  case &CFAnnot(*x): return x;
  default: throw new Core::Impossible("ControlFlow -- wrong stmt annotation");
  }
}

///////////////////////////// Analysis ///////////////////////////////

// FIX: Add some memoization for commonly used absRVal_t values, eg.
// fully initialized and fully uninitialized structs.  Also for root_t value.
// FIX: Assigning a pointer to an int shouldn't cause anything to escape.

// Note: w/o passing down whether we're in a "pointer context", we'll 
// unnecessarily escape points-to on branches of conditional expressions.
// Note: for *(e1 ? e2 : e3) we're requiring e2 and e3 to be all-init.
struct AnalEnv<`r::R> {
  bool          iterate_again; // set to true when a visited flow is updated
  int           iteration_num; // update annotations with this on each visit
  bool          in_try;      // an optimization for the common case
  flow_t        tryflow;     // updated by any flow change while in a try-block.
  place_set_t * all_changed; // NULL for "not in unorderd so don't bother"
  bool          noreturn;    // true when function is "noreturn"
  list_t<place_t,`r> param_roots;
};
typedef struct AnalEnv<`r> @`r analenv_t<`r>;

static flow_t              anal_stmt(analenv_t, flow_t, stmt_t);
static flow_t              anal_decl(analenv_t, flow_t, decl_t);
static $(flow_t,absLval_t) anal_Lexp(analenv_t, flow_t, exp_t);//takes all exps!
static $(flow_t,absRval_t) anal_Rexp(analenv_t, flow_t, exp_t);
static $(flow_t,flow_t)    anal_test(analenv_t, flow_t, exp_t);

static cf_stmt_annot_t@ pre_stmt_check(analenv_t env, flow_t inflow, stmt_t s){
  let annot = get_stmt_annot(s);
  // join inflow with flow from non-local preds and earlier iterations
  annot->flow = join_flow(env->all_changed, inflow, annot->flow, true);
  // keep the iteration count right, cannot increment because of StmtExp
  // in an unordered position!
  annot->visited = env->iteration_num;
  return annot;
}

static int get_field_index_fs(list_t<aggrfield_t> fs, field_name_t f) {
  int n = 0;
  for (; fs; fs = fs->tl) {
    let f2 = fs->hd->name;
    if (strptrcmp(f2,f) == 0) return n;
    n = n+1;
  }
  throw new Core::Impossible(aprintf("get_field_index_fs failed: %s",*f));
}

static int get_field_index(type_t t, field_name_t f) {
  switch (Tcutil::compress(t)) {
  case &AggrType(AggrInfo(info,_)):
    let fs = get_known_aggrdecl(info)->impl->fields;
    fallthru(fs);
  case &AnonAggrType(_,fs):
    return get_field_index_fs(fs, f);
  default: 
    throw new Core::Impossible(aprintf("get_field_index failed: %s",
                                       Absynpp::typ2string(t)));
  }
}

// Sound KLUDGE: The changed should go on the destination, but it's easier
// to put it on the source and nobody is ever going to notice the difference
// in precision (it takes a goto or caught throw from an inner unordered
// context to an outer one, I think).  The fix is to keep all the changed
// lists in the env and find the right one for the dest (by following
// enclosers somehow), but again, it is a really strange thing.
static void update_tryflow(analenv_t env, flow_t new_flow) {
  if(env->in_try) {
    DEBUG_PRINT("update_tryflow: before flow:\n");
    DEBUG_PRINT_F(print_flow,env->tryflow);
    DEBUG_PRINT("\n");
    DEBUG_PRINT("update_tryflow: new flow:\n");
    DEBUG_PRINT_F(print_flow,new_flow);
    DEBUG_PRINT("\n");
    env->tryflow = join_flow(env->all_changed, new_flow, env->tryflow, true);
    DEBUG_PRINT("update_tryflow: joined flow:\n");
    DEBUG_PRINT_F(print_flow,env->tryflow);
    DEBUG_PRINT("\n");
  }    
}

// Sound KLUDGE: same explanation as for update_tryflow above
// need to check for less than after the join b/c of the approximation
// else may not terminate.
static void update_flow(analenv_t env, stmt_t s, flow_t flow) { 
  let annot    = get_stmt_annot(s);
  let new_flow = join_flow(env->all_changed, flow, annot->flow, true);
  if(!flow_lessthan_approx(new_flow, annot->flow)) {
    DEBUG_PRINT("update_flow for |%s|: flow changed\nannot->flow=\n",
		Absynpp::stmt2string(s));
    DEBUG_PRINT_F(print_flow,annot->flow);
    DEBUG_PRINT("\njoined flow (> annot_flow):\n");
    DEBUG_PRINT_F(print_flow,new_flow);
    DEBUG_PRINT("\n");
    annot->flow = new_flow;
    DEBUG_PRINT("update_flow: annot->visited=%d, iteration_num=%d\n",
		annot->visited, env->iteration_num);
    if(annot->visited == env->iteration_num) {
      DEBUG_PRINT("update_flow: will iterate again\n");
      env->iterate_again = true;
    }
  }
}

static flow_t add_vars(flow_t inflow,list_t<vardecl_t> vds,absRval_t leafval,Position::seg_t loc) {
  switch(inflow) {
  case BottomFL: return BottomFL;
  case ReachableFL(d,relns,cinfo): 
    for(; vds != NULL; vds = vds->tl) {
      let root = new VarRoot(vds->hd);
      d = Dict::insert(d,root,typ_to_absrval(vds->hd->type,leafval));
//        if (contains_region(UniqueRgn_k,vds->hd->type))
//  	update_place_set(unique_places, new Place(root,NULL), loc);
    }
    return ReachableFL(d,relns,cinfo);
  }
}

// not in use currently; planning to use to observe when unique variables
// are not getting freed so we can signal a warning
static void remove_vars(flow_t outflow, place_set_t *out_unique_places,
			place_set_t old_unique_places) {
  // for all variables in out_unique_places not in c, print a warning
  let $(ConsumeInfo(c,_),_) = save_consume_info(outflow,false);
  region r {
    let iter = Dict::make_iter(r,*out_unique_places);
    let elem = *Dict::rchoose(r,*out_unique_places);
    while(Iter::next(iter,&elem)) {
      let p = elem[0];
      if (!Dict::member(c,p))
	Tcutil::terr(elem[1],"Failed to consume unique variable %s",
		     place_err_string(p));
    }
  }
  // restore the variable info
  *out_unique_places = old_unique_places;
}

// when using an r-value, we also consume any variables on the consume list.
static flow_t use_Rval(analenv_t env, seg_t loc, flow_t inflow, absRval_t r){
  switch(inflow) {
  case BottomFL: return BottomFL;
  case ReachableFL(d,relns,cinfo):
    if(initlevel(d,r) != AllIL)
      Tcutil::terr(loc,"expression may not be fully initialized");
    let ans_d = escape_deref(d, env->all_changed, r);
    if(d.t == ans_d.t) return inflow;
    let ans = ReachableFL(ans_d,relns,cinfo);
    update_tryflow(env, ans);
    return ans;
  }
}

static $(flow_t,list_t<absRval_t,`rgn>) 
  anal_unordered_Rexps(region_t<`rgn> rgn,
                       analenv_t env,
                       flow_t inflow,
                       list_t<exp_t> es,
                       bool arg1_unconsumed) {
  if(es == NULL)
    return $(inflow, NULL);
  if(es->tl == NULL) {
    let $(f,r) = anal_Rexp(env,inflow,es->hd);
    return $(f, rnew(rgn) List(r,NULL));
  }
  place_set_t * outer_all_changed = env->all_changed;
  place_set_t this_all_changed; // keep separate b/c we iterate
  flow_t old_inflow;
  flow_t outflow;
  list_t<absRval_t,`rgn> rvals;
  let $(saved_cinfo, inflow) = save_consume_info(inflow,true);
  consume_t outflow_consume = { mt_place_set(), NULL };
  bool init_consume = false;
  do { // unnecessarily recomputes rvals each time
    this_all_changed = mt_place_set();
    // need to reset consume stuff on each iteration
    inflow = restore_consume_info(inflow,saved_cinfo);
    // wouldn't need to peel off the head if we had a TopFL
    env->all_changed = new mt_place_set();
    let $(f,r) = anal_Rexp(env,inflow,es->hd);
    outflow = f;
    rvals = rnew(rgn) List(r,NULL);
    this_all_changed = union_place_set(this_all_changed,
				       *env->all_changed, false);
    // if the first argument is special (e.g. the source pointer of a
    // subscript), do not consume its first argument
    if (arg1_unconsumed) {
      switch (outflow) {
      case BottomFL: break;
      case ReachableFL(d,r,c):
	outflow = 
	  ReachableFL(d,r,ConsumeInfo(c.consumed,saved_cinfo.may_consume));
      }
    }
    for(_ es2 = es->tl; es2 != NULL; es2 = es2->tl) {
      env->all_changed = new mt_place_set();
      let $(f,r) = anal_Rexp(env,inflow,es2->hd);
      rvals = rnew(rgn) List(r,rvals);
      outflow = after_flow(&this_all_changed, outflow, f, 
			   this_all_changed, *env->all_changed);
      this_all_changed = union_place_set(this_all_changed, *env->all_changed,
					 false);
    }
    // save/restore the consume information to terminate
    let $(c,_) = save_consume_info(outflow, false);
    if (init_consume) {
#ifdef SANITY
      if (consume_approx(c, outflow_consume)) {
	DEBUG_PRINT("sanity consumed: ");
	DEBUG_PRINT_F(print_place_set,outflow_consume.consumed);
	DEBUG_PRINT("\ncurrent consumed: ");
	DEBUG_PRINT_F(print_place_set,c.consumed);
	DEBUG_PRINT("\nsanity may_consume: ");
	DEBUG_PRINT_F(print_place_list,outflow_consume.may_consume);
	DEBUG_PRINT("\ncurrent may_consume: ");
	DEBUG_PRINT_F(print_place_list,c.may_consume);
	DEBUG_PRINT("\n");
	Tcutil::impos("anal_unordered_exps failed to preserve consumed info");
      }
#endif
      old_inflow = restore_consume_info(inflow, outflow_consume);
    }
    else
      old_inflow = inflow;
    init_consume = true;
    outflow_consume = c;
    // need to check for less than after the join b/c of the approximation
    // else may not terminate.
    inflow = join_flow(outer_all_changed,inflow,outflow,true);
//      DEBUG_PRINT("anal_unordered: old_inflow=\n");
//      DEBUG_PRINT_F(print_flow,old_inflow);
//      DEBUG_PRINT("anal_unordered: joined flow=\n");
//      DEBUG_PRINT_F(print_flow,inflow);
  } while(!flow_lessthan_approx(inflow,old_inflow));
  if(outer_all_changed == NULL)
    env->all_changed = NULL;
  else
    env->all_changed = new union_place_set(*outer_all_changed,
					   this_all_changed, false);
  update_tryflow(env,outflow);
  return $(outflow,imp_rev(rvals));
}

// though the name doesn't indicate it, this is fine for the size primop too
// the point is we don't read through pointers, so nothing escapes.
static $(flow_t,absRval_t) anal_use_ints(analenv_t env, flow_t inflow,
					 list_t<exp_t> es,
					 bool arg1_unconsumed) {
  region rgn {
    let $(afterflow, rvals) =
      anal_unordered_Rexps(rgn,env,inflow,es,arg1_unconsumed);
    switch(afterflow) {
    case ReachableFL(d,_,_): 
      for(; rvals != NULL; rvals = rvals->tl, es = es->tl)
        if(initlevel(d,rvals->hd)==NoneIL)
          Tcutil::terr(es->hd->loc, "expression may not be initialized");
      break;
    case BottomFL: break;
    }
    return $(afterflow, unknown_all);
  }
}

// we can get the lval this way only because f and the flow returned
// by anal_Lexp will not differ w.r.t. must-point-to information.
// i.e. we should be called with the inflow the caller used as an *argument*
// to anal_Rexp
// Also: the result of anal_Rexp on e MUST be Unknown, not Esc!
static flow_t notzero(analenv_t env, flow_t inflow, flow_t outflow,
		      exp_t e, initlevel_t il) {
  switch(outflow) {
  case BottomFL: return outflow;
  case ReachableFL(d,relns,cinfo):
    switch(anal_Lexp(env,inflow,e)[1]) {
    case UnknownL: return outflow;
    case &PlaceL(p): // okay b/c p can't be escaped (it's Unknown) 
      absRval_t nzval = il==AllIL ? NotZeroAll : NotZeroThis;
      return ReachableFL(assign_place(e->loc,d,env->all_changed,p,nzval),
                             relns,cinfo);
    }
  }
}


static $(flow_t,flow_t) splitzero(analenv_t env, flow_t inflow, flow_t outflow,
                                  exp_t e, initlevel_t il) {
  switch(outflow) {
  case BottomFL: return $(outflow,outflow);
  case ReachableFL(d,relns,cinfo):
    switch(anal_Lexp(env,inflow,e)[1]) {
    case UnknownL: return $(outflow,outflow);
    case &PlaceL(p): // okay b/c p can't be escaped (it's Unknown) 
      absRval_t nzval = il==AllIL ? NotZeroAll : NotZeroThis;
      return 
        $(ReachableFL(assign_place(e->loc,d,env->all_changed,p,nzval),
                          relns,cinfo),
          ReachableFL(assign_place(e->loc,d,env->all_changed,p,Zero),
                          relns,cinfo));
    }
  }
}

// same comments as for previous function, only does anything if r2 is TagCmps
// ASSUMES all cmp primops are Lt, Lte, or Eq
static flow_t if_tagcmp(analenv_t env, flow_t flow, exp_t e1, 
			absRval_t r1,  primop_t p,  absRval_t r2) {
  switch(flow) {
  case BottomFL: return flow;
  case ReachableFL(d,relns,cinfo):
    switch (r2) {
    case &TagCmps(cl2):
      switch(anal_Lexp(env,flow,e1)[1]) {
      case UnknownL: return flow;
      case &PlaceL(pl):
	list_t new_cl;
	switch(r1) { 
	case &TagCmps(cl1): new_cl = cl1; break;
	  // some choice for these whether to use tags or not
	case &UnknownR(AllIL):
	case Zero:
	case NotZeroAll: new_cl = NULL; break; 
	default: return flow;
	}
	
	// see assumption above!
	for(; cl2 != NULL; cl2 = cl2->tl) {
	  primop_t new_cmp;
	  switch($(p,cl2->hd->cmp)) {
	  case $(Lt,_):
	  case $(_,Lt):  new_cmp = Lt; break;
	  case $(Eq,Eq): new_cmp = Eq; break;
	  default: new_cmp = Lte; break;
	  }
	  new_cl = new List(new TagCmp(new_cmp, cl2->hd->bd), new_cl);
	}
	return ReachableFL(assign_place(e1->loc,d,env->all_changed,pl,
					    new TagCmps(new_cl)),
			       relns,cinfo);
      }
    default: return flow;
    }
  }
}

// Note: correct for e1 an array b/c r won't be AddressOf??
// FIX: Important place to memoize type_to_absrval calls (b/c StructArrow
//      calls this.)
static $(flow_t,absRval_t) anal_derefR(analenv_t env, flow_t inflow,
				       flow_t f, exp_t e, absRval_t r) {
  switch(Tcutil::compress(e->topt->v)) {
  case &PointerType(PtrInfo(elttype,_,PtrAtts(_,_,bd,zt,_))):
    switch(f) {
    case BottomFL: return $(f,typ_to_absrval(elttype,unknown_all));
    case ReachableFL(outdict,relns,_):
      // else cannot be known: FIX: determine notzero as appropriate
      if(Tcutil::is_bound_one(bd))
	switch(r) {
	case NotZeroAll: 
	case NotZeroThis: 
	  e->annot = new NotZero(relns); 
	  break;
	case &AddressOf(p): 
	  e->annot = new NotZero(relns); 
	  return $(f,lookup_place(outdict,p));
	case Zero: 
	  e->annot = IsZero;
	  return $(BottomFL,typ_to_absrval(elttype,unknown_all));
	case &UnknownR(il): f = notzero(env,inflow,f,e,il); fallthru;
	default: e->annot = new UnknownZ(relns);
	}
      else
	e->annot = new UnknownZ(relns); // FIX: too conservative?
      switch(initlevel(outdict,r)) {
      case NoneIL:
	Tcutil::terr(e->loc,"dereference of possibly uninitialized pointer");
	fallthru;
      case AllIL:  return $(f,typ_to_absrval(elttype,unknown_all));
      case ThisIL: return $(f,typ_to_absrval(elttype,unknown_none));
      }
    }
  default: throw new Core::Impossible("right deref of non-pointer-type");
  }
}

// we've performed e1[e2] -- if this is of the form x[i], then add
// i < x.size to the relations.
static relns_t add_subscript_reln(relns_t relns, exp_t e1, exp_t e2) {
  switch (e1->r) {
  case &Var_e(_,&Pat_b(x)):   fallthru(x);
  case &Var_e(_,&Local_b(x)): fallthru(x);
  case &Var_e(_,&Param_b(x)): fallthru(x);
  case &Var_e(_,&Global_b(x)):
    if (!x->escapes)
      switch (e2->r) {
      case &Var_e(_,&Pat_b(i)):   fallthru(i);
      case &Var_e(_,&Local_b(i)): fallthru(i);
      case &Var_e(_,&Param_b(i)): fallthru(i);
      case &Var_e(_,&Global_b(i)):
        if (!i->escapes) {
          // we have x[i] -- add i < x.size to relns if not already present.
          bool found = false;
          for (let rs = relns; rs != NULL; rs = rs->tl) {
            let r = rs->hd;
            if (r->vd == i)
              switch (r->rop) {
              case LessSize(v) && v == x: return relns;
              default: continue;
              }
          }
          if (!found) return new List(new Reln(i,LessSize(x)),relns);
        }
        return relns;
      default: return relns;
      }
    else return relns;
  default: return relns;
  }
}

// Note: must deal with try-flow in all "base" cases!!!
static $(flow_t,absRval_t) anal_Rexp(analenv_t env, flow_t inflow, exp_t e) {
  // Note: It is sound to return on BottomFL only because there is no way to
  //       jump into an expression (we reject goto into a StmtExp).
  flowdict_t d;
  relns_t relns;
  consume_t cinfo;
  DEBUG_PRINT("in Rexp for |%s|\n",Absynpp::exp2string(e));
  switch(inflow) {
  case BottomFL: return $(BottomFL, unknown_all); // absRval_t irrelvent
  case ReachableFL(d2,relns2,c): d = d2; relns = relns2; cinfo = c;
    //fprintf(stderr,"inflow expression %s:",Absynpp::exp2string(e));
    //print_relns(relns); fprintf(stderr,"\n");
  }
  switch(e->r) {
    // treat this similar to a dereference in that there's a null-check
    // and afterwards, we know the value is not null.
  case &Cast_e(_,e1,_,NonNull_to_Null):
    let $(f1,r1) = anal_Rexp(env,inflow,e1);
    let $(f2,r2) = anal_derefR(env,inflow,f1,e1,r1);
    return $(f2,r1);
    // C doesn't allow "memory-kind casts", which is good because then
    // we'd have to translate the dictionary domains and that's a pain.
    // In essence, we're assuming the result absRval_t is not Aggregate.
  case &Cast_e(_,e1,_,_):    fallthru(e1);
  case &NoInstantiate_e(e1): fallthru(e1);
  case &Instantiate_e(e1,_): return anal_Rexp(env,inflow,e1);

  case &Const_e(Null_c):
  case &Const_e(Int_c(_,0)): return $(inflow, Zero);
  case &Const_e(Int_c(_,_)): 
  case &Var_e(_,&Funname_b(_)):    return $(inflow, NotZeroAll);

  case &Tunion_e(NULL,_,_): // FIX: distinguish zero/non-zero
  case &Const_e(_): 
  case &Sizeofexp_e(_): // note: the exp is NOT evaluated
  case &Sizeoftyp_e(_):  
  case &Offsetof_e(_,_): // FIX: ?? (first field guaranteed zero?) 
  case &Gentyp_e(_,_):  // FIX: distinguish zero/non-zero enum tags
  case &AnonEnum_e(_,_,_): // FIX : distinguish tags that are/aren't 0
  case &Enum_e(_,_,_): return $(inflow, unknown_all);

  case &Var_e(_,&Global_b(_)): // globals are init and may be aggregates
    return $(inflow, typ_to_absrval(e->topt->v, unknown_all));

    // FIX: avoid allocation of VarRoot
    // Note: if Esc we return that even though it isn't an absRval.  That's
    //       okay b/c assign_place_inner does the right thing
  case &Var_e(_,&Param_b(vd)): fallthru(vd);
  case &Var_e(_,&Local_b(vd)): fallthru(vd);
  case &Var_e(_,&Pat_b(vd)): 
    // If this is a unique pointer, we add it to the may_consume list
    // The caller will invalidate this location if necessary.  Note that
    // a value can appear on the may_consume list multiple times; this
    // will only be an error in the event the list is actually
    // consumed.
    DEBUG_PRINT("in Rexp:Var_e for |%s|\n",Absynpp::exp2string(e));
    if (contains_region(UniqueRgn_k,vd->type)) {
      DEBUG_PRINT("  adding to may_consume\n");
      let root  = new VarRoot(vd);
      let place = new Place(root,NULL);
      cinfo.may_consume = List::merge(place_cmp,new List::List(place,NULL),
				      cinfo.may_consume);
      inflow = ReachableFL(d,relns,cinfo);
    }
    return $(inflow, Dict::lookup(d, new VarRoot(vd)));

    // Note: none of the primops cause things to escape or do a dereference!
    //       and they all return initialized ints of unknown value.
  case &Primop_e(p,es): 
    DEBUG_PRINT("in Rexp:Primop_e\n");
    let $(f,r) = anal_use_ints(env,inflow,es,false);
    switch (p) {
    case Plus: case Minus: check_unique_rvals(es->hd->loc,f); break;
    default: f = readthrough_unique_rvals(es->hd->loc,f); break;
    }    
    // Note: we could be smarter here and prune the may_consume list
    return $(f,r);

  case &Increment_e(e1,_):   
    let arg = List{e1,NULL};
    let $(f,_) = anal_use_ints(env,inflow,&arg,false);
    check_unique_rvals(e1->loc,f);
    let $(_,lval) = anal_Lexp(env,f,e1);
    switch($(lval,f)) {
    case $(&PlaceL(p),ReachableFL(outdict,relns,c)): 
      relns = reln_kill_exp(relns,e1);
      f = ReachableFL(assign_place(e1->loc,outdict,
				       env->all_changed,p,unknown_all),
			  relns,c);
      break;
    default: break;
    }
    return $(f,unknown_all);

  case &AssignOp_e(l,&_,r): 
    let arg2 = List{r,NULL};
    let arg1 = List{l,&arg2};
    let $(f,_) = anal_use_ints(env,inflow,&arg1,true);
    let $(_,lval) = anal_Lexp(env,f,e);
    f = consume_unique_rvals(e->loc,f); // consume the rhs of the assignment
    switch($(lval,f)) {
    case $(&PlaceL(p),ReachableFL(outdict,relns,cinfo)): 
      relns = reln_kill_exp(relns,l);
      outdict = assign_place(l->loc,outdict,env->all_changed,p,unknown_all);
      // add lhs to consume list if it's unique
      if (contains_region(UniqueRgn_k,l->topt->v)) {
	DEBUG_PRINT("  assign lhs; adding |%s| to may_consume\n",
		    Absynpp::exp2string(l));
	cinfo.may_consume = List::merge(place_cmp,new List::List(p,NULL),
					cinfo.may_consume);
	// see if we are clobbering an unconsumed unique pointer;
	// signal warning if so
	if (!Dict::member(cinfo.consumed,p)) {
	  let &Place(root,_) = p;
	  switch (root) {
	  case &VarRoot(vd):
	    let s = Absynpp::qvar2string(vd->name);
	    Tcutil::warn(l->loc,"may clobber unique pointer %s", s);
	    break;
	  default:
	    Tcutil::impos("warning locations not for VarRoots");
	  }
	}

	// if we are not in a unordered expression context, we can
	// remove the root, if present, from consumed set.  We check
	// the error context to ensure we terminate (otherwise we will
	// flip-flop in adding/removing a member from the flow on
	// certain loop-based errors).
	if (env->all_changed == NULL) {
	  let c = Dict::delete(cinfo.consumed,p);
	  if (cinfo.consumed.t != c.t)
	    DEBUG_PRINT("  assign lhs; unconsumed |%s|\n",
			Absynpp::exp2string(l));
	  cinfo.consumed = c;
	}
      }
      f = ReachableFL(outdict,relns,cinfo);
      break;
    default: break;
    }
    return $(f,unknown_all);

  case &AssignOp_e(e1,NULL,e2): // really annoying we don't have e1 before e2!
    DEBUG_PRINT("in Rexp:AssignOp_e for |%s|\n",Absynpp::exp2string(e));
    let outer_all_changed = env->all_changed;
    let $(outer_cinfo,inflow) = save_consume_info(inflow,true);
    consume_t empty_consume = { mt_place_set(), NULL };
    consume_t outflow_consume = empty_consume;
    bool init_consume = false;
    while(true) { // local iteration
      env->all_changed  = new mt_place_set();
      let $(left_out, lval) = anal_Lexp(env,inflow,e1);
      let left_changed      = *env->all_changed;
      env->all_changed      = new mt_place_set();
      let $(right_out,rval) = anal_Rexp(env,inflow,e2);
      let right_changed     = *env->all_changed;
      let outflow = after_flow(&left_changed, left_out,right_out,
			       left_changed, right_changed);
      // FIX: need to kill any variables assigned in e1 or e2?
      let new_inflow = join_flow(outer_all_changed,inflow,outflow,true);

      // restore consume information to old inflow if necessary
      let $(c,_) = save_consume_info(new_inflow,false);
      if (init_consume) {
#ifdef SANITY
	if (consume_approx(c, outflow_consume)) {
	  DEBUG_PRINT("sanity consumed: ");
	  DEBUG_PRINT_F(print_place_set,outflow_consume.consumed);
	  DEBUG_PRINT("\ncurrent consumed: ");
	  DEBUG_PRINT_F(print_place_set,c.consumed);
	  DEBUG_PRINT("\nsanity may_consume: ");
	  DEBUG_PRINT_F(print_place_list,outflow_consume.may_consume);
	  DEBUG_PRINT("\ncurrent may_consume: ");
	  DEBUG_PRINT_F(print_place_list,c.may_consume);
	  DEBUG_PRINT("\n");
	  Tcutil::impos("assignOp_e failed to preserve consume info");
	}
#endif
	inflow = restore_consume_info(inflow, outflow_consume);
      }
      outflow_consume = c;
      init_consume = true;
//        DEBUG_PRINT("assignOp: old_inflow=\n");
//        DEBUG_PRINT_F(print_flow,inflow);
//        DEBUG_PRINT("assignOp: joined flow=\n");
//        DEBUG_PRINT_F(print_flow,new_inflow);
      // see if we've reached a fixpoint
      if(flow_lessthan_approx(new_inflow,inflow)) {
	if(outer_all_changed == NULL)
	  env->all_changed = NULL;
	else
	  *env->all_changed = union_place_set(*outer_all_changed,
			      union_place_set(left_changed, right_changed,
					      false), false);
	outflow = consume_unique_rvals(e->loc, outflow); // consume rhs
	// now actually do the assignment!
	switch(outflow) {
	case BottomFL:
	  DEBUG_PRINT("leaving AssignOp_e\n");
	  return $(BottomFL,rval);
	case ReachableFL(outdict,relns,cinfo):
	  // make sure we haven't used a unique value > 1 time
	  cinfo = and_consume(outer_cinfo,cinfo);
	  switch(lval) {
	  case &PlaceL(p): 
	    outdict = assign_place(e->loc,outdict,env->all_changed,p,rval);
	    // add lhs to consume list if it's unique
	    if (contains_region(UniqueRgn_k,e1->topt->v)) {
	      DEBUG_PRINT("  assign lhs; adding |%s| to may consume\n",
			  Absynpp::exp2string(e1));
	      cinfo.may_consume = List::merge(place_cmp,new List::List(p,NULL),
					      cinfo.may_consume);
	      // see if we are clobbering an unconsumed unique pointer;
	      // signal warning if so
	      if (!Dict::member(cinfo.consumed,p)) {
		let &Place(root,_) = p;
		switch (root) {
		case &VarRoot(vd):
		  let s = Absynpp::qvar2string(vd->name);
		  Tcutil::warn(e1->loc,"may clobber unique pointer %s", s);
		  break;
		default:
		  Tcutil::impos("warning locations not for VarRoots");
		}
	      }
	      // if we are not in a unordered expression context, we can
	      //   remove the root, if present, from consumed set.  We
	      //   check the error context to ensure we terminate
	      //   (otherwise we will flip-flop in adding/removing a
	      //   member from the flow on certain loop-based errors).
	      if (env->all_changed == NULL) {
		let c = Dict::delete(cinfo.consumed,p);
		if (cinfo.consumed.t != c.t)
		  DEBUG_PRINT("  assign lhs; unconsumed |%s|\n",
			      Absynpp::exp2string(e1));
		cinfo.consumed = c;
	      }
	    }
	    relns   = reln_assign_exp(relns,e1,e2);
	    outflow = ReachableFL(outdict,relns,cinfo);
	    update_tryflow(env, outflow);
	    DEBUG_PRINT("leaving AssignOp_e\n");
	    return $(outflow, rval);
	  case UnknownL: 
	    DEBUG_PRINT("leaving AssignOp_e\n");
	    if (contains_region(UniqueRgn_k,e1->topt->v))
	      Tcutil::impos("dest of unique assignment is unknown!");
	    return $(use_Rval(env,e2->loc,outflow,rval), rval);
	  }
	}
      }
      // iterate again; need to go back to empty consume info
      inflow = restore_consume_info(new_inflow,empty_consume);
      DEBUG_PRINT("inflow changed; recalculating\n");
    }

  case &SeqExp_e(e1,e2): 
    let $(f,r) = anal_Rexp(env,inflow,e1);
    f = drop_unique_rvals(e1->loc,f); // dropping lhs
    return anal_Rexp(env, f, e2);

  case &Throw_e(e1):
    let $(f,r) = anal_Rexp(env,inflow,e1);
    // Unique exns essentially escape to the heap when thrown
    f = consume_unique_rvals(e1->loc,f); // consume exn expression
    use_Rval(env,e1->loc,f,r); // result irrelevant so long as initialized
    return $(BottomFL,typ_to_absrval(e->topt->v,unknown_all));

  case &FnCall_e(e1,es,_): 
    region temp {
      let $(fst_outflow,rvals) = anal_unordered_Rexps(temp,env,inflow,rnew(temp) List(e1,rcopy(temp,es)),true);
      // consume arguments
      fst_outflow = consume_unique_rvals(e->loc,fst_outflow);
      // for strange reasons, use_Rval is fine for the function pointer:
      let outflow = use_Rval(env,e1->loc,fst_outflow,rvals->hd);
      rvals = rvals->tl;
      // we just just "use" each arg except for the "initializes" attribute
      list_t<int> init_params = NULL;
      switch(Tcutil::compress(e1->topt->v)) {
      case &PointerType(PtrInfo(t,_,_)):
        switch(Tcutil::compress(t)) {
        case &FnType(FnInfo(_,_,_,_,_,_,_,atts)):
          for(; atts != NULL; atts = atts->tl)
            switch(atts->hd) {
            case &Initializes_att(i): init_params=rnew(temp) List(i,init_params); break;
            default: break;
            }
          break;
        default: Tcutil::impos("anal_Rexp: bad function type");
        }
        break;
      default: Tcutil::impos("anal_Rexp: bad function type");
      }
      for(int i=1; rvals != NULL; rvals = rvals->tl, es = es->tl, ++i) {
        if(!List::memq(init_params,i)) {
          outflow = use_Rval(env,es->hd->loc,outflow,rvals->hd);
          continue;
        }
        switch(fst_outflow) {
        case BottomFL: break;
        case ReachableFL(fst_d,_,_):
          if(initlevel(fst_d,rvals->hd)==NoneIL)
            Tcutil::terr(es->hd->loc,"expression may not be initialized");
          switch(outflow) {
          case BottomFL: break;
          case ReachableFL(d,relns,c):
            // do the escape, but then set to esc_all in outflow
            let ans_d = escape_deref(d, env->all_changed, rvals->hd);
            switch(rvals->hd) {
            case &AddressOf(p): 
              switch(Tcutil::compress(es->hd->topt->v)) {
              case &PointerType(PtrInfo(t,_,_)):
                ans_d = assign_place(es->hd->loc, ans_d, env->all_changed,
                                     p, typ_to_absrval(t,esc_all));
                break;
              default: Tcutil::impos("anal_Rexp:bad type for initialized arg");
              }
              break;
            default: break;
            }
            outflow = ReachableFL(ans_d,relns,c);
            break;
          }
          break;
        }
      }
      // if the called function doesn't return, we get BottomFL out
      if (Tcutil::is_noreturn(e1->topt->v)) 
        return $(BottomFL,typ_to_absrval(e->topt->v,unknown_all));
      else 
        return $(outflow,typ_to_absrval(e->topt->v,unknown_all));
    }
  case &Malloc_e(MallocInfo{iscalloc,eopt,topt,exp,isfat}):
    root_t    root      = new MallocPt(exp,e->topt->v);
    place_t   place     = new Place(root,NULL);
    absRval_t rval      = new AddressOf(place);
    absRval_t place_val = 
      isfat ? NotZeroAll : typ_to_absrval(*topt,unknown_none);
    flow_t    outflow;
    update_place_set(env->all_changed,place,NULL);
    if(eopt!=NULL) {
      region temp {
        let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                              rlist(temp,(exp_t)eopt,exp),
                                              false);
        outflow = f;
      }
    } else {
      let $(f,_) = anal_Rexp(env,inflow,exp);
      outflow = f;
    }
    outflow = readthrough_unique_rvals(exp->loc,outflow); // read malloc args
    switch(outflow) {
    case BottomFL: return $(outflow,rval);
    case ReachableFL(d2,relns,c):
      return $(ReachableFL(Dict::insert(d2,root,place_val),relns,c), rval);
    }

  case &New_e(eopt,e2):
    root_t    root      = new MallocPt(e2,e->topt->v);
    place_t   place     = new Place(root,NULL);
    absRval_t rval      = new AddressOf(place);
    update_place_set(env->all_changed,place,NULL);
    flow_t    outflow;
    absRval_t place_val;
    if(eopt!=NULL) {
      region temp {
        let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                              rlist(temp,(exp_t)eopt,e2),
                                              false);
      outflow   = f;
      place_val = rvals->tl->hd;
      }
    } else {
      let $(f,r) = anal_Rexp(env,inflow,e2);
      outflow   = f;
      place_val = r;
    }
    outflow = readthrough_unique_rvals(e2->loc, outflow); // read new args
    switch(outflow) {
    case BottomFL: return $(outflow,rval);
    case ReachableFL(d2,relns,c):
      return $(ReachableFL(Dict::insert(d2,root,place_val),relns,c), rval);
    }
    
  case &Address_e(e1): // FIX: support & as a malloc-and-initialize???
    let $(f,l) = anal_Lexp(env,inflow,e1);
    switch(l) {
    case UnknownL:   return $(f, NotZeroAll);
    case &PlaceL(p): return $(f, new AddressOf(p));
    }

  case &Deref_e(e1): 
    let $(f,r) = anal_Rexp(env,inflow,e1);
    f = readthrough_unique_rvals(e->loc, f); // read pointer
    return anal_derefR(env,inflow,f,e1,r);

    // KLUDGE: unions (see comment at top of file)
  case &AggrMember_e(e1,field):
    let $(f,r) = anal_Rexp(env,inflow,e1);
    // MWH: don't consume unique pointer here, since this isn't a
    //   pointer, I think ...
    if(is_union_type(e1->topt->v))
      return $(f,typ_to_absrval(e->topt->v,unknown_all)); 
    switch (r) {
    case &Aggregate(rdict):
      let field_no = get_field_index(e1->topt->v,field);
      return $(f,rdict[field_no]);
    default: 
      throw new Core::Impossible(aprintf("anal_Rexp: AggrMember: %s",
                                         Absynpp::exp2string(e)));
    }
    
  case &AggrArrow_e(e1,field): // composition of * and ., of course
    let $(f1,r1) = anal_Rexp(env,inflow,e1);
    f1 = readthrough_unique_rvals(e->loc, f1); // read struct pointer
    let $(f2,r2) = anal_derefR(env,inflow,f1,e1,r1);
    switch(Tcutil::compress(e1->topt->v)) {
    case &PointerType(PtrInfo{t2,_,_}):
      if(is_union_type(t2))
	return $(f2,typ_to_absrval(e->topt->v,unknown_all)); 
      switch (r2) {
      case &Aggregate(rdict):
        let field_no = get_field_index(t2,field);
        return $(f2,rdict[field_no]);
      default: throw new Core::Impossible("anal_Rexp: AggrArrow");
      }  
    default: throw new Core::Impossible("anal_Rexp: AggrArrow ptr");
    }
      
  case &Conditional_e(e1,e2,e3): 
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    // consider each branch separately with regard to consume info
    f1t = readthrough_unique_rvals(e1->loc, f1t); // read cond exp, true-flow
    f1f = readthrough_unique_rvals(e1->loc, f1f); // read cond exp, false-flow
    let pr2 = anal_Rexp(env,f1t,e2);
    let pr3 = anal_Rexp(env,f1f,e3);
    // merge the consume information on the join
    return join_flow_and_rval(env->all_changed,pr2,pr3,true);

  case &And_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    f1t     = readthrough_unique_rvals(e1->loc,f1t); // read 1st exp,true-flow
    f1f     = readthrough_unique_rvals(e1->loc,f1f); // read 1st exp,false-flow
    let $(f2t,f2r) = anal_Rexp(env,f1t,e2);
    f2t     = readthrough_unique_rvals(e2->loc,f2t); // read 2nd exp
    let pr2 = $(f2t,f2r);
    let pr3 = $(f1f, (absRval_t)Zero);
    return join_flow_and_rval(env->all_changed,pr2,pr3,false);

  case &Or_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    f1t     = readthrough_unique_rvals(e1->loc,f1t); // read 1st exp,true-flow
    f1f     = readthrough_unique_rvals(e1->loc,f1f); // read 1st exp,false-flow
    let $(f2t,f2r) = anal_Rexp(env,f1f,e2);
    f2t     = readthrough_unique_rvals(e2->loc,f2t); // read 2nd exp
    let pr2 = $(f2t,f2r);
    let pr3 = $(f1t, (absRval_t)NotZeroAll);
    return join_flow_and_rval(env->all_changed,pr2,pr3,false);

  case &Subscript_e(e1,e2): 
    region temp {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                            rlist(temp,e1,e2),true);
      f = readthrough_unique_rvals(e2->loc,f); // read index expr
      let f2 = f;
      switch(f) {
      case ReachableFL(d2,relns,c2):
        //fprintf(stderr,"subscript %s:",Absynpp::exp2string(e));
        //print_relns(relns); fprintf(stderr,"\n");
        if(initlevel(d2,rvals->tl->hd)==NoneIL)
          Tcutil::terr(e2->loc, "expression may not be initialized");
        let new_relns = add_subscript_reln(relns,e1,e2);
        if (relns != new_relns)
          f2 = ReachableFL(d2,new_relns,c2);
        break;
      default: break;
      }
      switch(Tcutil::compress(e1->topt->v)) {
      case &TupleType(tqts):
        switch(rvals->hd) {
        case &Aggregate(rdict): 
          unsigned int i = Evexp::eval_const_uint_exp(e2)[0];
          return $(f2,rdict[i]);
        default: throw new Core::Impossible("anal_Rexp: Subscript");
        }
      case &PointerType(PtrInfo(_,_,PtrAtts(_,_,b,_,_))):
        // translation to C reports "can't prove in bounds" errors
        switch(compress_conref(b)->v) {
        case Eq_constr(&AbsUpper_b(_)):
          switch(rvals->tl->hd) {
          case &TagCmps(cl): e2->annot = new HasTagCmps(cl); break;
          default: break;
          }
          break;
        default: break;
        }
        let $(f3,r) = anal_derefR(env,inflow,f,e1,rvals->hd);
        switch (f3) {
        case BottomFL: return $(f3,r);
        default: return $(f2,r);
        }
      default: throw new Core::Impossible("anal_Rexp: Subscript -- bad type");
      }
    }

  case &Tunion_e(es,tud,_): // NULL case handled above
    if (tud->is_flat) {
      // FIX: for now, I'm just requiring everything to be initialized here
      // because otherwise, I'm getting join errors.
      region temp {
        let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,es,false);
        f = consume_unique_rvals(e->loc,f); // consume init exprs
        for (; es; es = es->tl, rvals = rvals->tl)
          f = use_Rval(env,es->hd->loc,f,rvals->hd);
        return $(f,unknown_all);
      }
    }
    fallthru(es); 
  case &Tuple_e(es):
    region temp {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,es,false);
      f = consume_unique_rvals(e->loc,f); // consume init exprs
      aggrdict_t aggrdict = 
        new {for i < List::length(es) : 
             ({ let temp = rvals->hd;
                rvals = rvals->tl;
                temp; })};

      return $(f, new Aggregate(aggrdict));
    }
  case &AnonStruct_e(_,des): 
    list_t<Absyn::aggrfield_t> fs;
    switch (Tcutil::compress(e->topt->v)) {
    case &AnonAggrType(_,f): fs = f; break;
    default: throw new Core::Impossible("anal_Rexp:anon struct has bad type");
    }
    fallthru(des,fs);
  case &Struct_e(_,_,des,&Aggrdecl{.impl = &AggrdeclImpl{.fields=fs,...},...}):
    region temp {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                            rmap(temp,Core::snd,des),false);
      
      f = consume_unique_rvals(e->loc,f); // consume init exprs
      aggrdict_t aggrdict = aggrfields_to_aggrdict(fs,unknown_all);
      for(int i=0; rvals != NULL; rvals = rvals->tl, des = des->tl, ++i)
        for(_ ds = (*des->hd)[0]; ds != NULL; ds = ds->tl)
          switch (ds->hd) {
          case &ArrayElement(_): throw new Core::Impossible("anal_Rexp:Struct_e");
          case &FieldName(fld): 
            // find the field and update the aggrdict imperatively
            let field_no = get_field_index_fs(fs,fld);
            aggrdict[field_no] = rvals->hd;
          }
      return $(f, new Aggregate(aggrdict));
    }
  case &Struct_e(_,_,_,_):
    throw new Core::Impossible("anal_Rexp:missing aggrdeclimpl");
  case &Array_e(dles): 
    region temp {
      let es = rmap(temp,Core::snd,dles);
      let $(outflow,rvals) = anal_unordered_Rexps(temp,env,inflow,es,false);
      outflow = consume_unique_rvals(e->loc,outflow); // consume init exprs
      for(; rvals != NULL; rvals = rvals->tl, es = es->tl)
        outflow = use_Rval(env,es->hd->loc,outflow,rvals->hd);
      return $(outflow,typ_to_absrval(e->topt->v,unknown_all));
    }
  case &Comprehension_e(vd,e1,e2,zt): 

    let $(f1,r1) = anal_Rexp(env,inflow,e1);
    f1 = readthrough_unique_rvals(e1->loc, f1); // read bound expr
    switch(f1) {
    case BottomFL: return $(f1,unknown_all);
    case ReachableFL(d1,relns,c1):
      if(initlevel(d1,r1)==NoneIL)
	Tcutil::terr(e1->loc, "expression may not be initialized");

      // add vd < e1 when e1 is something useful
      relns_t new_relns = relns;
    comp_loop:
      switch(e1->r) {
      case &Cast_e(_,e2,_,_): e1 = e2; goto comp_loop;
      case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
      case &Var_e(_,&Local_b(v2)) && !v2->escapes: fallthru(v2);
      case &Var_e(_,&Pat_b(v2)) && !v2->escapes: fallthru(v2);
      case &Var_e(_,&Param_b(v2)) && !v2->escapes:
        new_relns = new List(new Reln(vd,LessVar(v2)),relns);
        break;
      case &Const_e(Int_c(_,i)): 
        new_relns = new List(new Reln(vd,LessConst(i)),relns);
        break;
      case &Primop_e(Size,&List(e3,_)):
        switch (e3->r) {
        case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
        case &Var_e(_,&Local_b(v2)) && !v2->escapes: fallthru(v2);
        case &Var_e(_,&Pat_b(v2)) && !v2->escapes: fallthru(v2);
        case &Var_e(_,&Param_b(v2)) && !v2->escapes:
          // size is always unsigned
          new_relns = new List(new Reln(vd,LessSize(v2)),relns);
          break;
        default: break;
        }
        break;
      default: break;
      }
      if (relns != new_relns) 
        f1 = ReachableFL(d1,new_relns,c1);

      // check e2 now
      switch(r1) {
      case Zero: return $(f1,unknown_all); // e2 executed 0 times
      case NotZeroThis:
      case NotZeroAll:
      case &AddressOf(_): // e2 executed at least once
	let l = List(vd,NULL);
	f1 = add_vars(f1,&l,unknown_all,e->loc);

	let $(f2,r2) = anal_Rexp(env,f1,e2);
	f2 = consume_unique_rvals(e2->loc,f2); // consume rhexp
	switch(f2) {
	case BottomFL: return $(f2,unknown_all);
	case ReachableFL(d2,_,c2):
	  if(initlevel(d2,r2) != AllIL) {
	    Tcutil::terr(e1->loc, "expression may not be initialized");
	    return $(BottomFL,unknown_all);
	  }
	}
	f1 = f2;
	fallthru;
      default: // e2 executed any number of times, including 0
	while(true) {
	  let l = List(vd,NULL);
	  f1 = add_vars(f1,&l,unknown_all,e->loc);
	  let $(f2,r2) = anal_Rexp(env,f1,e2);
	  f2 = consume_unique_rvals(e2->loc,f2); // consume rh exp
	  switch(f2) {
	  case BottomFL: break;
	  case ReachableFL(d2,_,c2):
	    if(initlevel(d2,r2) != AllIL) {
	      Tcutil::terr(e1->loc, "expression may not be initialized");
	      return $(BottomFL, unknown_all);
	    }
	  }
	  let newflow = join_flow(env->all_changed,f1,f2,true);
	  if(flow_lessthan_approx(newflow,f1))
	    break;
	  f1 = newflow;
	}
	return $(f1,unknown_all);
      }
    }
  case &StmtExp_e(s): 
    // We need the absRval_t from the last expression --
    // that's why we traverse the statement ourselves.
    // make sure we do everything just like anal_stmt does!
    while(true) {
      inflow = pre_stmt_check(env,inflow,s)->flow;
      switch(s->r) {
      case &Seq_s(s1,s2): 
	inflow = anal_stmt(env,inflow,s1);
	s = s2;
	break;
      case &Decl_s(d,s1): 
	inflow = anal_decl(env,inflow,d);
	s = s1;
	break;
      case &Exp_s(e): 
	return anal_Rexp(env,inflow,e);
      default: throw new Core::Impossible("analyze_Rexp: ill-formed StmtExp");
      }
    } 

  case &Var_e(_,Unresolved_b): 
  case &UnknownId_e(_):        
  case &UnknownCall_e(_,_):    
  case &UnresolvedMem_e(_,_):  
  case &CompoundLit_e(_,_):    
    throw new Core::Impossible("anal_Rexp, unexpected exp form");
  }
}

static $(flow_t,absLval_t) anal_derefL(analenv_t env, flow_t inflow, flow_t f, 
				       exp_t e, absRval_t r, 
				       list_t<int,`H> flds) {
  switch(Tcutil::compress(e->topt->v)) {
  case &PointerType(PtrInfo{elttype,_,PtrAtts(_,_,bd,zt,_)}):
    switch(f) {
    case BottomFL: return $(f,UnknownL);
    case ReachableFL(outdict,relns,c):
      // else cannot be known: FIX: determine notzero as appropriate
      if(Tcutil::is_bound_one(bd))
	switch(r) {
	case NotZeroAll:
	case NotZeroThis: e->annot = new NotZero(relns); break;
	case &AddressOf(&Place(root,flds2)): 
	  e->annot = new NotZero(relns);
	  return $(f, new PlaceL(new Place(root, append(flds2,flds))));
	case Zero: 
	  e->annot = IsZero;
	  return $(BottomFL,UnknownL);
	case &UnknownR(il): f = notzero(env,inflow,f,e,il); fallthru;
	// Note: I think tag cmps aren't useful here
	default: e->annot = new UnknownZ(relns);
	}
      else
	e->annot = new UnknownZ(relns); // FIX: too conservative?
      if(initlevel(outdict,r)==NoneIL)
	Tcutil::terr(e->loc,"dereference of possibly uninitialized pointer");
      return $(f,UnknownL);
    }
  default: throw new Core::Impossible("left deref of non-pointer-type");
  }
}

// Note: we accept all exps, just returning UnknownL for non-lvalues b/c of
// how code like notzero and splitzero use this function, but no reason
// in these cases to track any effects.
// Note: As with anal_Rexp, it's okay to return immediately on BottomFL.
static $(flow_t,absLval_t) anal_Lexp_rec(analenv_t env, flow_t inflow, 
					 exp_t e, list_t<int,`H> flds){
  flowdict_t d;
  switch(inflow) {
  case BottomFL: return $(BottomFL, UnknownL); // absLval_t irrelvent
  case ReachableFL(d2,relns,_):
    d = d2;
    //fprintf(stderr,"exp %s:",Absynpp::exp2string(e));
    //print_relns(relns); fprintf(stderr,"\n");
  }
  switch(e->r) {
  case &Cast_e(_,e1,_,_):      fallthru(e1);
  case &NoInstantiate_e(e1): fallthru(e1);
  case &Instantiate_e(e1,_): return anal_Lexp_rec(env,inflow,e1,flds);

  case &Var_e(_,&Param_b(vd)): fallthru(vd);
  case &Var_e(_,&Local_b(vd)): fallthru(vd);
  case &Var_e(_,&Pat_b(vd)):
    // since this a lhs, we can ignore uniqueness
    return $(inflow, new PlaceL(new Place(new VarRoot(vd), flds)));

  case &Var_e(_,&Global_b(vd)): return $(inflow,UnknownL);

  case &AggrArrow_e(e1,f):
    switch(Tcutil::compress(e1->topt->v)) {
    case &PointerType(PtrInfo{t2,_,_}):
      if(!is_union_type(t2))
	flds = new List(get_field_index(t2,f),flds);
      break;
    default: throw new Core::Impossible("anal_Rexp: AggrArrow ptr");
    }
    fallthru(e1);
  case &Deref_e(e1): 
    let $(f,r) = anal_Rexp(env,inflow,e1);
    f = readthrough_unique_rvals(e->loc,f); // read e1
    return anal_derefL(env,inflow,f,e1,r,flds);

  case &Subscript_e(e1,e2): 
    // assumes that tuple-projection implies e2 is pure and is evaluable
    switch(Tcutil::compress(e1->topt->v)) {
    case &TupleType(_):
      let fld = Evexp::eval_const_uint_exp(e2)[0];
      return anal_Lexp_rec(env,inflow,e1,new List(fld,flds));
    case &PointerType(PtrInfo(_,_,PtrAtts(_,_,b,_,_))):
      // by setting the last flag to true, we make sure not to consume
      // the root pointer
      region temp {
        let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,
                                              rlist(temp,e1,e2),true);
        f = readthrough_unique_rvals(e2->loc,f); // read index expr
        let f2 = f;
        switch(f) {
        case ReachableFL(d2,relns,c):
          if(initlevel(d2,rvals->tl->hd)==NoneIL)
            Tcutil::terr(e2->loc, "expression may not be initialized");
          let new_relns = add_subscript_reln(relns,e1,e2);
          if (relns != new_relns)
            f2 = ReachableFL(d2,new_relns,c);
          break;
        default: break;
        }
        // translation to C reports "can't prove in bounds" errors
        switch(compress_conref(b)->v) {
        case Eq_constr(&AbsUpper_b(_)):
          switch(rvals->tl->hd) {
          case &TagCmps(cl): e2->annot = new HasTagCmps(cl); break;
          default: break;
          }
          break;
        default: break;
        }
        let $(f3,r) = anal_derefL(env,inflow,f,e1,rvals->hd,flds);
        switch (f3) {
        case BottomFL: return $(f3,r);
        default: return $(f2,r);
        }
      }
    default: throw new Core::Impossible("anal_Lexp: Subscript -- bad type");
    }
    // KLUDGE: unions (see comment at top of file)
  case &AggrMember_e(e1,fld): 
    if(is_union_type(e1->topt->v))
      return $(inflow,UnknownL);
    return anal_Lexp_rec(env,inflow,e1,
                         new List(get_field_index(e1->topt->v,fld),flds)); 

  default: return $(BottomFL, UnknownL); // see comment before function
  }
}

static $(flow_t,absLval_t) anal_Lexp(analenv_t env, flow_t inflow, exp_t e) {
#ifdef SANITY
  let $(saved_cinfo,_) = save_consume_info(inflow,false); // sanity check
#endif
  let $(f,r) = anal_Lexp_rec(env,inflow,e,NULL);
#ifdef SANITY
  let $(end_cinfo,_) = save_consume_info(inflow,false);
  if (saved_cinfo.may_consume != end_cinfo.may_consume ||
      saved_cinfo.consumed != end_cinfo.consumed)
    Tcutil::impos("oops: anal_Lexp modified consume lists");
#endif
  return $(f,r);
}

// FIX: ?? there are more primops and the "not-zero" cases to add if we care.
//      also we can statically determine stupid tests like NotZero == Zero
static $(flow_t,flow_t) anal_test(analenv_t env, flow_t inflow, exp_t e) {
  switch(e->r) {
  case &Conditional_e(e1,e2,e3):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    // consider each branch separately with regard to consume info
    f1t = readthrough_unique_rvals(e1->loc,f1t); // read cond exp, true-flow
    f1f = readthrough_unique_rvals(e1->loc,f1f); // read cond exp, false-flow
    let $(f2t,f2f) = anal_test(env,f1t,e2);
    let $(f3t,f3f) = anal_test(env,f1f,e3);
    return $(join_flow(env->all_changed, f2t, f3t, true),
	     join_flow(env->all_changed, f2f, f3f, true));
  case &And_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    f1t = readthrough_unique_rvals(e1->loc,f1t); // read 1st exp, true-flow
    f1f = readthrough_unique_rvals(e1->loc,f1f); // read 1st exp, false-flow
    let $(f2t,f2f) = anal_test(env,f1t,e2);
    f2t = readthrough_unique_rvals(e2->loc,f2t); // read 2nd exp, true-flow
    f2f = readthrough_unique_rvals(e2->loc,f2f); // read 2nd exp, false-flow
    // MWH: not sure if this should maybe be true
    return $(f2t, join_flow(env->all_changed, f1f, f2f, false));
  case &Or_e(e1,e2):
    let $(f1t,f1f) = anal_test(env,inflow,e1);
    f1t = readthrough_unique_rvals(e1->loc,f1t); // read 1st exp, true-flow
    f1f = readthrough_unique_rvals(e1->loc,f1f); // read 1st exp, false-flow
    let $(f2t,f2f) = anal_test(env,f1f,e2);
    f2t = readthrough_unique_rvals(e2->loc,f2t); // read 2nd exp, true-flow
    f2f = readthrough_unique_rvals(e2->loc,f2f); // read 2nd exp, false-flow
    // MWH: not sure if this should maybe be true
    return $(join_flow(env->all_changed, f1t, f2t, false), f2f);
  case &SeqExp_e(e1,e2):
    let $(f,r) = anal_Rexp(env,inflow,e1);
    f = drop_unique_rvals(e1->loc,f); // drop left expr
    return anal_test(env, f, e2);
  case &Primop_e(Not,&List(e1,NULL)):          
    let $(f1,f2) = anal_test(env,inflow,e1);
    return $(f2,f1);
  case &Primop_e(p,es):
    // FIX: what if the primop has only one argument?
    absRval_t r1,r2;
    flow_t f;
    region temp {
      let $(fl,rvals) = anal_unordered_Rexps(temp,env,inflow,es,false);
      r1 = rvals->hd;
      r2 = rvals->tl->hd;
      f = fl;
    }
    // if the primop could be pointer, we may have to consume the exp.
    // Otherwise, we are just reading for purposes of comparison, or
    // computing on integers.
    switch (p) {
    case Plus: case Minus: check_unique_rvals(es->hd->loc,f); break;
    default: f = readthrough_unique_rvals(es->hd->loc,f); break;
    }    
    switch(f) {
    case BottomFL: return $(f,f);
    case ReachableFL(d,relns,cinfo):
      let e1 = es->hd;
      let e2 = es->tl->hd;
      if(initlevel(d,r1)==NoneIL)
        Tcutil::terr(es->hd->loc,"expression may not be initialized");
      if(initlevel(d,r2)==NoneIL)
        Tcutil::terr(es->tl->hd->loc,"expression may not be initialized");
        
      // zero-splitting, only for Eq and Neq with Zero and Unknown, so can
      // take precedence over any array-bounds splitting
      if(p==Eq || p==Neq)
        switch($(r1,r2)) {
        case $(&UnknownR(il),Zero): // f is correct for both args b/c unordered
          let $(f1,f2) = splitzero(env,f,f,e1,il);
          switch(p) { 
          case Eq:  return $(f2,f1);
          case Neq: return $(f1,f2);
          default: throw new Core::Impossible("anal_test, zero-split");
          }
        case $(Zero,&UnknownR(il)):
          let $(f1,f2) = splitzero(env,f,f,e2,il);
          switch(p) { 
          case Eq:  return $(f2,f1);
          case Neq: return $(f1,f2);
          default: throw new Core::Impossible("anal_test, zero-split");
          }
        case $(Zero,Zero):
          if (p == Eq) return $(f,BottomFL);
          else return $(BottomFL,f);
        case $(Zero,NotZeroAll): fallthru;
        case $(Zero,NotZeroThis): fallthru;
        case $(Zero,&AddressOf(_)): fallthru;
        case $(NotZeroAll,Zero): fallthru;
        case $(NotZeroThis,Zero): fallthru;
        case $(&AddressOf(_),Zero): 
          if (p == Neq) return $(f,BottomFL);
          else return $(BottomFL,f);
        default: break;
        }
      
      // bounds checking needs unsigned comparisons
      // this (hoisted) check shouldn't disable any of Greg's stuff because
      // it always used to either check for unsigned or require x.size,
      // which is unsigned
      switch($(Tcutil::compress(e1->topt->v),Tcutil::compress(e2->topt->v))) {
      case $(&IntType(Unsigned,_),_):
      case $(_,&IntType(Unsigned,_)):
      case $(&TagType(_),_):
      case $(_,&TagType(_)): break;
      default: return $(f,f);
      }
      
      switch(p) {
      case Eq: 
        let ft = if_tagcmp(env,f,e1,r1,Eq,r2);
        ft = if_tagcmp(env,ft,e2,r2,Eq,r1);
        return $(ft,f);
      case Neq:
        let ff = if_tagcmp(env,f,e1,r1,Eq,r2);
        ff = if_tagcmp(env,ff,e2,r2,Eq,r1);
        return $(f,ff);
      case Gt:
        let ft = if_tagcmp(env,f,e2,r2,Lt,r1);
        let ff = if_tagcmp(env,f,e1,r1,Lte,r2);
        return $(ft,ff);
      case Gte:
        let ft = if_tagcmp(env,f,e2,r2,Lte,r1);
        let ff = if_tagcmp(env,f,e1,r1,Lt,r2);
        return $(ft,ff);
        
      case Lt:
        let ft = if_tagcmp(env,f,e1,r1,Lt,r2);
        let ff = if_tagcmp(env,f,e2,r2,Lte,r1);
        
        switch(ft) {
        case BottomFL: throw new Core::Impossible("anal_test, Lt");
        case ReachableFL(d2,_,cinfo2): d = d2; cinfo = cinfo2;
        }
        
        // this case tracks most of the inequalities we need for bounds-checking
        switch (e1->r) {
          // Note: global arrays are the only thing that don't "escape"
        case &Var_e(_,&Global_b(v1)) && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Local_b(v1))  && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Pat_b(v1))    && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Param_b(v1))  && !v1->escapes:
          switch (e2->r) {
          case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
          case &Var_e(_,&Local_b(v2))  && !v2->escapes: fallthru(v2);
          case &Var_e(_,&Pat_b(v2))    && !v2->escapes: fallthru(v2);
          case &Var_e(_,&Param_b(v2))  && !v2->escapes:
            // check that v1 or v2 is unsigned to ensure this is an
            // unsigned comparison
            let relns_true = new List(new Reln(v1,LessVar(v2)),relns);
            return $(ReachableFL(d,relns_true,cinfo), ff);
          case &Const_e(Int_c(_,i)): 
            let relns_true = new List(new Reln(v1,LessConst(i)),relns);
            return $(ReachableFL(d,relns_true,cinfo), ff);
          case &Primop_e(Size,&List(e3,_)):
            switch (e3->r) {
            case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Local_b(v2))  && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Pat_b(v2))    && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Param_b(v2))  && !v2->escapes:
              // size is always unsigned
              let relns_true = new List(new Reln(v1,LessSize(v2)),relns);
              return $(ReachableFL(d,relns_true,cinfo), ff);
            default: return $(ft,ff);
            }
          default: return $(ft,ff);
          }
        default: return $(ft,ff);
        }
        
      case Lte:
        let ft = if_tagcmp(env,f,e1,r1,Lte,r2);
        let ff = if_tagcmp(env,f,e2,r1,Lt,r1);
        
        switch(ft) {
        case BottomFL: throw new Core::Impossible("anal_test, Lte");
        case ReachableFL(d2,_,cinfo2): d = d2; cinfo = cinfo2;
        }
        
        // this case checks for i <= x.size
        switch (e1->r) {
          // Note: global arrays are the only thing that don't "escape"
        case &Var_e(_,&Global_b(v1)) && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Local_b(v1))  && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Pat_b(v1))    && !v1->escapes: fallthru(v1);
        case &Var_e(_,&Param_b(v1))  && !v1->escapes:
          switch (e2->r) {
          case &Primop_e(Size,&List(e3,_)):
            switch (e3->r) {
            case &Var_e(_,&Global_b(v2)) && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Local_b(v2))  && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Pat_b(v2))    && !v2->escapes: fallthru(v2);
            case &Var_e(_,&Param_b(v2))  && !v2->escapes:
              // size is always unsigned
              let relns_true = new List(new Reln(v1,LessEqSize(v2)),relns);
              return $(ReachableFL(d,relns_true,cinfo), ff);
            default: return $(ft,ff);
            }
          default: return $(ft,ff);
          }
        default: return $(ft,ff);
        }
      default: return $(f,f);
      }
    }
  default: break;
  }
  // NB: just the default case from here on; should otherwise have
  // returned in switch statement
  let $(f,r) = anal_Rexp(env,inflow,e);
  f = readthrough_unique_rvals(e->loc,f); // read test expr
  switch(f) {
  case BottomFL: return $(f,f);
  case ReachableFL(d,_,_):
    switch(r) {
    case Zero: return $(BottomFL,f);
    case NotZeroThis:
    case NotZeroAll:
    case &AddressOf(_): return $(f,BottomFL);
    case &UnknownR(NoneIL):
    case &Esc(NoneIL): 	
      Tcutil::terr(e->loc,"expression may not be initialized");
      return $(BottomFL,BottomFL);
    case &UnknownR(il): return splitzero(env,inflow,f,e,il);
    case &Esc(_):       return $(f,f);
    case &TagCmps(_):   return $(f,f); // may be better to splitzero?
    case &Aggregate(_): throw new Core::Impossible("anal_test");
    }
  }
}

static void check_init_params(seg_t loc, analenv_t env, flow_t flow) {
  switch(flow) {
  case BottomFL: return;
  case ReachableFL(d,_,_):
    for(let inits = env->param_roots; inits!=NULL; inits=inits->tl)
      if(initlevel(d,lookup_place(d,inits->hd))!=AllIL)
	Tcutil::terr(loc, "function may not initialize all the parameters "
		     "with attribute 'initializes'");
    return;
  }
}

// For now, PATTERN VARS ARE INITIALIZED
static flow_t anal_scs(analenv_t env,flow_t inflow,list_t<switch_clause_t> scs){
  for(; scs != NULL; scs = scs->tl) {
    let &Switch_clause(_,vds_opt,where_opt,body,loc) = scs->hd;
    flow_t clause_inflow = add_vars(inflow,vds_opt->v,unknown_all,loc); 
    flow_t clause_outflow;
    if(where_opt != NULL) {
      let $(true_flow,false_flow) = 
	anal_test(env,clause_inflow,(exp_t)where_opt);
      inflow = false_flow; // affects remaining clauses
      clause_outflow = anal_stmt(env,true_flow,body);
    } else {
      clause_outflow = anal_stmt(env,clause_inflow,body);
    }
    switch(clause_outflow) {
    case BottomFL: break;
    default:
      // no need for a break/fallthru for the last case
      if(scs->tl == NULL)
	return clause_outflow;
      else {
	// if the next case has pattern variables, we need an explicit fallthru
	// else just issue a warning
	if (scs->tl->hd->pat_vars->v != NULL)
	  Tcutil::terr(body->loc, "switch clause may implicitly fallthru");
	else 
	  Tcutil::warn(body->loc, "switch clause may implicitly fallthru");
	// in any case, we must update the flow there!
	update_flow(env, scs->tl->hd->body, clause_outflow);
      }
      break;
    }
  }
  return BottomFL; // not reached if last case falls through
}

static flow_t anal_stmt(analenv_t env, flow_t inflow, stmt_t s) {
  flow_t outflow;
  let annot = pre_stmt_check(env,inflow,s);
  inflow = annot->flow;
  
  switch(s->r) {
  case Skip_s: return inflow;
  case &Return_s(NULL): 
    if (env->noreturn) 
      Tcutil::terr(s->loc,"`noreturn' function might return");
    check_init_params(s->loc,env,inflow);
    return BottomFL;
  case &Return_s(e):    
    if (env->noreturn) 
      Tcutil::terr(s->loc,"`noreturn' function might return");
    let $(f,r) = anal_Rexp(env,inflow,(exp_t)e);
    f = consume_unique_rvals(e->loc,f); // consume returned expression
    f = use_Rval(env,e->loc,f,r);
    check_init_params(s->loc,env,f);
    return BottomFL;
    
  case &Exp_s(e): outflow = anal_Rexp(env,inflow,e)[0]; break;

  case &Seq_s(s1,s2): 
    outflow = anal_stmt(env, anal_stmt(env, inflow, s1), s2); break;

  case &IfThenElse_s(e,s1,s2):
    let $(f1t,f1f) = anal_test(env,inflow,e);
    f1t     = readthrough_unique_rvals(e->loc,f1t); // read if exp, true-flow
    f1f     = readthrough_unique_rvals(e->loc,f1f); // read if exp, false-flow
    outflow = join_flow(env->all_changed,
			anal_stmt(env,f1t,s1),
			anal_stmt(env,f1f,s2),
			true);
    break;

  case &While_s($(e,cont),body):
    DEBUG_PRINT("in anal_stmt:While_s for |%s| (cont=|%s|)\n",
		Absynpp::stmt2string(body), 
		Absynpp::stmt2string(cont));
    let e_inflow = pre_stmt_check(env,inflow,cont)->flow;
    let $(f1t,f1f) = anal_test(env,e_inflow,e);
    f1t     = readthrough_unique_rvals(e->loc,f1t); // read cond exp,true-flow
    f1f     = readthrough_unique_rvals(e->loc,f1f); // read cond exp,false-flow
    let body_outflow = anal_stmt(env,f1t,body);
    update_flow(env, cont, body_outflow);
    outflow = f1f;
    break;

  case &Do_s(body,$(e,cont)):
    DEBUG_PRINT("in anal_stmt:Do_s for |%s|\n",
		Absynpp::stmt2string(body));
    let body_outflow = anal_stmt(env,inflow,body);
    let e_inflow = pre_stmt_check(env,body_outflow,cont)->flow;
    let $(f1t,f1f) = anal_test(env,e_inflow,e);
    update_flow(env, body, f1t);
    outflow = f1f;
    DEBUG_PRINT("done with Do_s\n");
    break;

    // MWH: ok to drop these?  Seems like "null" expressions
  case &For_s(e1,$(e2,guard),$(e3,cont),body):
    let e1_outflow = anal_Rexp(env,inflow,e1)[0];
    e1_outflow = drop_unique_rvals(e1->loc,e1_outflow); // drop init expr
    let e2_inflow  = pre_stmt_check(env,e1_outflow,guard)->flow;
    let $(f2t,f2f) = anal_test(env,e2_inflow,e2);
    let body_outflow = anal_stmt(env,f2t,body);
    let e3_inflow  = pre_stmt_check(env,body_outflow,cont)->flow;
    let e3_outflow = anal_Rexp(env,e3_inflow,e3)[0];
    e3_outflow = drop_unique_rvals(e3->loc,e3_outflow); // drop iter expr
    update_flow(env, guard, e3_outflow);
    outflow = f2f;
    break;

    // eg. of when this can happen is when destination is end of function
  case &Break_s(NULL): return BottomFL;
  case &Fallthru_s(es,&destclause):
    region temp {
      let $(f,rvals) = anal_unordered_Rexps(temp,env,inflow,es,false);
      // FIX: WHEN WE INTERPRET PATTERNS
      for(; rvals != NULL; rvals = rvals->tl, es = es->tl)
        f = use_Rval(env,es->hd->loc,f,rvals->hd);
      f = consume_unique_rvals(s->loc,f); // consume fallthru exps
      // The gunk is because the next case's binding vars are still in scope!
      f = add_vars(f,destclause->pat_vars->v,unknown_all,s->loc);
      update_flow(env, (stmt_t)(destclause->body), f);
      return BottomFL;
    }
  case &Break_s(dest):    fallthru(dest);
  case &Continue_s(dest): fallthru(dest);
  case &Goto_s(_,dest):
    // check we don't jump into scope -- this is totally orthogonal to 
    // the rest of control-flow checking, so we only do it the first iteration
    if(env->iteration_num==1) {
      let my_encloser   = annot->encloser;
      let dest_encloser = get_stmt_annot((stmt_t)dest)->encloser;
      while(dest_encloser != my_encloser) {
	let next_encloser = get_stmt_annot(my_encloser)->encloser;
	if(next_encloser == my_encloser) { // function body is own encloser
	  Tcutil::terr(s->loc, "goto enters local scope or exception handler");
	  break;
	}
	my_encloser = next_encloser;
      }
    } 
    // now just update the dest's flow
    DEBUG_PRINT("in Rexp:Break/Continue/Goto; updating flow\n");
    update_flow(env, (stmt_t)dest, inflow);
    return BottomFL;

  case &Switch_s(e,scs):
    let $(f,r) = anal_Rexp(env,inflow,e);
    f = consume_unique_rvals(e->loc,f); // consume switched exp
    f = use_Rval(env,e->loc,f,r);
    outflow = anal_scs(env,f,scs);
    break;
    
  case &TryCatch_s(s1,scs):
    // order very important here
    DEBUG_PRINT("in anal_stmt:TryCatch_e\n");
    bool   old_in_try  = env->in_try;
    flow_t old_tryflow = env->tryflow;
    env->in_try  = true;
    env->tryflow = inflow;
    flow_t s1_outflow = anal_stmt(env,inflow,s1);
    flow_t scs_inflow = env->tryflow;
    DEBUG_PRINT("inflow for catch clauses:\n");
    DEBUG_PRINT_F(print_flow,scs_inflow);
    env->in_try  = old_in_try;
    env->tryflow = old_tryflow;
    // sound KLUDGE (see update_tryflow)
    update_tryflow(env,scs_inflow); // necessary?
    flow_t scs_outflow = anal_scs(env,scs_inflow,scs);
    switch(scs_outflow) {
    case BottomFL: break;
    default: Tcutil::terr(s->loc, "last catch clause may implicitly fallthru");
    }
    outflow = s1_outflow; // really join with scs_outflow, but it's BottomFL
    DEBUG_PRINT("leaving anal_stmt:TryCatch_e\n");
    break;

  case &Decl_s(d,s): outflow = anal_stmt(env,anal_decl(env,inflow,d),s); break;

  case &Label_s(_,s): outflow = anal_stmt(env,inflow,s); break;

  case &Region_s(tv,vd,resetable,s):
    let vds = List(vd,NULL);
    inflow = add_vars(inflow,&vds,unknown_all,s->loc);
    outflow = anal_stmt(env,inflow,s);
    break;

  case &ResetRegion_s(e):
    let $(f,r) = anal_Rexp(env,inflow,e);
    f = readthrough_unique_rvals(e->loc,f); // drop region exp
    let f2 = use_Rval(env,e->loc,f,r);
    switch (Tcutil::compress(e->topt->v)) {
    case &RgnHandleType(r): 
      outflow = kill_flow_region(f,r);
      break;
    default: throw new Core::Impossible("anal_stmt -- reset_region");
    }
    break;

  default: throw new Core::Impossible("anal_stmt -- bad stmt syntax"
                                      " or unimplemented stmt form");
  }
  // now drop any vars on the may consume list, since we won't use them
  DEBUG_PRINT("stmt boundary; clearing may consume\n");
  outflow = drop_unique_rvals(s->loc, outflow);
  switch (outflow) {
  case ReachableFL(_,_,cinfo):
    DEBUG_PRINT("  consumed: ");
    DEBUG_PRINT_F(print_place_set,cinfo.consumed);
    DEBUG_PRINT("\n");
    break;
  default: break;
  }
  return outflow;
}

static void check_nested_fun(flow_t inflow, fndecl_t fd);

static flow_t anal_decl(analenv_t env, flow_t inflow, decl_t decl) {
  switch(decl->r) {
    // Note: We don't need to add initialized vars as changed things
    //       because they won't escape to unordered siblings???  Similarly
    //       don't need to may_consume list
    
  case &Var_d(vd):
    let vds = List(vd,NULL);
    inflow = add_vars(inflow,&vds,unknown_none,decl->loc);
    let e = vd->initializer;
    if(e==NULL)
      return inflow;
    let $(f,r) = anal_Rexp(env,inflow,(exp_t)e);
    f = consume_unique_rvals(e->loc, f); // consume rhs
    switch(f) {
    case BottomFL: return BottomFL;
    case ReachableFL(outdict,relns,cinfo):
      outdict = assign_place(decl->loc,outdict,env->all_changed,
			     new Place(new VarRoot(vd),NULL), r);
      relns = reln_assign_var(relns,vd,(exp_t)vd->initializer);
      let outflow = ReachableFL(outdict,relns,cinfo);
      update_tryflow(env,outflow);
      //fprintf(stderr,"outflow for decl %s:",Absynpp::qvar2string(vd->name));
      //print_relns(relns); fprintf(stderr,"\n");
      return outflow;
    }

    // FIX WHEN WE INTERPRET PATTERNS!!! SPECIAL-CASE VAR-PATTERN?
  case &Let_d(_,&Core::Opt(vds),e):
    let $(f,r) = anal_Rexp(env,inflow,e);
    f = consume_unique_rvals(e->loc,f); // consume rhs of let exp
    f = use_Rval(env,e->loc,f,r);
    return add_vars(f,vds,unknown_all,decl->loc);

    // MWH: do I need to do anything here?
  case &Letv_d(vds): return add_vars(inflow,vds,unknown_none,decl->loc);

  case &Fn_d(fd):
    check_nested_fun(inflow,fd);
    let t = fd->cached_typ->v;
    let vd = (vardecl_t)fd->fn_vardecl;
    return add_vars(inflow,new List(vd,NULL),unknown_all,decl->loc);

  default: throw new Core::Impossible("anal_decl: unexpected decl variant");
  }
}

//////////////////////////// Post-pass //////////////////////////////

// Note: This is just a space optimization.  Out of laziness, we don't
//       traverse expressions to find nested statements (due to StmtExp_e),
//       so the space for such annotations leaks.
static void postpass(stmt_t s) {
  s->annot = EmptyAnnot;
  switch(s->r) {
  case &For_s(_,$(_,s2),$(_,s3),s1): postpass(s3); fallthru(s1,s2);

  case &Seq_s(s1,s2):          fallthru(s1,s2);
  case &While_s($(_,s2),s1):   fallthru(s1,s2);
  case &Do_s(s1,$(_,s2)):      fallthru(s1,s2);
  case &IfThenElse_s(_,s1,s2): postpass(s1); fallthru(s2);

  case &Region_s(_,_,_,s1): fallthru(s1);
  case &Label_s(_,s1):      fallthru(s1);
  case &Decl_s(_,s1):       postpass(s1); return;

  case &TryCatch_s(s1,scs): postpass(s1); fallthru(scs);
  case &Switch_s(_,scs):
    for(; scs != NULL; scs = scs->tl)
      postpass(scs->hd->body);
    return;
  default: return;
  }
}

//////////////////////////// Top-level ////////////////////////////////

// TO DO: account for init qualifier (add ThisIL for those params and
//        check them on return and on fall off void)
static void check_fun(fndecl_t fd) {
  check_nested_fun(ReachableFL(empty_flowdict(),NULL,
                               ConsumeInfo(mt_place_set(),NULL)),fd);
}

static void check_nested_fun(flow_t inflow, fndecl_t fd) {
  //fprintf(stderr,"checking %s of type %s\n",*(*fd->name)[1],
  //        Absynpp::typ2string(Tcutil::fndecl2typ(fd)));
  region frgn {
  let loc = fd->body->loc;
  inflow = add_vars(inflow, fd->param_vardecls->v, unknown_all, loc);
  list_t<place_t,`frgn> param_roots = NULL; // only for "initializes"
  switch(inflow) {
  case BottomFL: Tcutil::impos("check_fun");
  case ReachableFL(d,relns,cinfo):
    // NOTE: for reasons Dan doesn't understand, the attributes, are not
    // on the fndecl, only on the type.
    _ atts;
    switch(Tcutil::compress(fd->cached_typ->v)) {
    case &FnType(FnInfo(_,_,_,_,_,_,_,as)): atts = as; break;
    default: Tcutil::impos("check_fun: non-function type cached with fndecl_t");
    }
    for(; atts != NULL; atts = atts->tl)
      switch(atts->hd) {
      case &Initializes_att(i):
	unsigned j = i;
	if(j > List::length(fd->param_vardecls->v)) {
	  Tcutil::terr(loc,
		       "initializes attribute exceeds number of parameters");
	  continue;
	}
	let vd = List::nth(fd->param_vardecls->v,j-1);
	switch(Tcutil::compress(vd->type)) {
	case &PointerType(PtrInfo(t,_,PtrAtts(_,nullable,bd,zt,_))):
	  if(conref_val(nullable))
	    Tcutil::terr(loc, "initializes attribute not allowed on "
			 "nullable pointers");
	  if(!Tcutil::is_bound_one(bd))
	    Tcutil::terr(loc, "initializes attribute allowed only on pointers"
			 " of size 1");
          if(conref_def(false,zt))
	    Tcutil::terr(loc, "initializes attribute allowed only on pointers"
			 " to non-zero-terminated arrays");
	  let r = new InitParam(j,t);
	  let rp = new Place(r,NULL);
	  d = Dict::insert(d,r,typ_to_absrval(t,esc_none));
	  d = Dict::insert(d,new VarRoot(vd),new AddressOf(rp));
	  param_roots = rnew(frgn) List(rp,param_roots);
	  break;
	default: Tcutil::terr(loc, "initializes attribute on non-pointer");
	}
	break;
      default: break;
      }
    inflow = ReachableFL(d,relns,cinfo);
  }

  bool      noreturn = Tcutil::is_noreturn(Tcutil::fndecl2typ(fd));
  analenv_t env = rnew(frgn) AnalEnv(true,0,false,inflow,NULL,noreturn,param_roots);
  flow_t    outflow  = inflow;
  while(env->iterate_again && !Position::error_p()) {
    ++(env->iteration_num);
    DEBUG_PRINT("\n  ITERATION %d\n\n", env->iteration_num);
    env->iterate_again = false;
    outflow = anal_stmt(env, inflow, fd->body);
    DEBUG_PRINT("clearing may_consume list\n");
    outflow = drop_unique_rvals(fd->body->loc, outflow);
  }
  switch(outflow) {
  case BottomFL: break;
  default: 
    check_init_params(loc,env,outflow);

    // this is the case when the function "falls off the end"
    if (noreturn)
      Tcutil::terr(loc, "`noreturn' function might (implicitly) return");
    else
      switch (Tcutil::compress(fd->ret_type)) {
      case VoidType: break;
      case &DoubleType(_):
      case FloatType: 
      case &IntType(_,_):
        Tcutil::warn(loc, "function may not return a value"); break;
      default:
        Tcutil::terr(loc, "function may not return a value"); break;
      }
    break;
  }
  } // end of frgn
  postpass(fd->body);
}

void cf_check(list_t<decl_t> ds) {
  for(; ds != NULL; ds = ds->tl)
    switch(ds->hd->r) {
    case &Fn_d(fd):	      check_fun(fd); break;
    case &ExternC_d(ds2):     fallthru(ds2);
    case &Using_d(_,ds2):     fallthru(ds2);
    case &Namespace_d(_,ds2): cf_check(ds2); break;
    case &ExternCinclude_d(_,_): break;
    default: break;
    }
}
