/* Open and close files for bison,
   Copyright (C) 1984, 1986, 1989, 1992 Free Software Foundation, Inc.

This file is part of Bison, the GNU Compiler Compiler.

Bison is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

Bison is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Bison; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */


#if defined (VMS) & !defined (__VMS_POSIX)
#include <ssdef.h>
#define unlink delete
#endif

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "system.h"
#include "files.h"
#include "new.h"
#include "gram.h"
#include <string.h>

FILE *finput=NULL;
FILE *foutput=NULL;
FILE *fdefines=NULL;
FILE *ftable=NULL;
FILE *fattrs=NULL;
FILE *fattrs0=NULL;
FILE *fguard=NULL;
FILE *faction=NULL;

/* File name specified with -o for the output file, or 0 if no -o.  */
char ?spec_outfile;

char ?infile;
char ?outfile;
char ?defsfile;
char ?tabfile;
char ?attrsfile;
char ?attrs0file;
char ?guardfile;
char ?actfile;
char ?tmpattrsfile;
char ?tmpattrs0file;
char ?tmptabfile;
char ?tmpdefsfile;

extern int noparserflag;
/*the following three functions should be in stdio.h or stdlib.h*/
//extern char	?getenv(const char?);
/*perror already defined in stdio.h */
//extern void	perror(char *);

FILE	@tryopen(const char?, const char@);	/* This might be a good idea */
void done(int);

extern char ?program_name;
extern int verboseflag;
extern int definesflag;
int fixed_outfiles = 0;


char?
stringappend(const char ?string1, int end1, const char ?string2)
{
  register char ?ostring;
  /*  
  register char ?cp, ?cp1;
  register int i;
  cp = string2;  i = 0;
  while (*cp++) i++;

  ostring = NEW2(i+end1+1, char);

  cp = ostring;
  cp1 = string1;
  for (i = 0; i < end1; i++)
    *cp++ = *cp1++;

  cp1 = string2;
  while (*cp++ = *cp1++) ;
  */
  
  /* using strconcat to do the same job --wangyl*/
  ostring=strconcat(substring(string1, 0,end1),string2);
  return ostring;
}


/* JF this has been hacked to death.  Nowaday it sets up the file names for
   the output files, and opens the tmp files and the parser */
void
openfiles()
{
  char ?name_base;
  int base_length;
  int short_base_length;

#if defined (VMS) & !defined (__VMS_POSIX)
  const char ?tmp_base = "sys$scratch:b_";
#else
  const char ?tmp_base = "/tmp/b.";
#endif
  int tmp_len;

#ifdef MSDOS
  tmp_base = getenv ("TMP");
  if (tmp_base == 0)
    tmp_base = "";
  strlwr (infile);
#endif /* MSDOS */

  tmp_len = strlen (tmp_base);

  if (spec_outfile)
    {
      /* -o was specified.  The precise -o name will be used for ftable.
	 For other output files, remove the ".cyc" suffix.  */
      name_base = spec_outfile;
#ifdef MSDOS
      strlwr (name_base);
#endif /* MSDOS */
      /* BASE_LENGTH includes "_tab" but not ".cyc".  */
      base_length = strlen (name_base);
      if (!strcmp (name_base + (base_length - 4), ".cyc"))
	base_length -= 4;
      /* SHORT_BASE_LENGTH includes neither "_tab" nor ".cyc".  */
      short_base_length = base_length;
      if (!strncmp (name_base + (short_base_length - 4), "_tab", 4))
	short_base_length -= 4;
    }
  else if (spec_file_prefix)
    {
      /* -b was specified.  Construct names from it.  */
      /* SHORT_BASE_LENGTH includes neither "_tab" nor ".cyc".  */
      short_base_length = strlen (spec_file_prefix);
      /* Count room for `_tab'.  */
      base_length = short_base_length + 4;
      
      //name_base = (char ?) xmalloc (base_length + 1);
      /* Append `.tab'.  */
      //strcpy (name_base, spec_file_prefix);
      //strcat (name_base, "_tab");
      name_base = aprintf("%s_tab", spec_file_prefix);
#ifdef MSDOS
      strlwr (name_base);
#endif /* MSDOS */
    }
  else
    {
      /* -o was not specified; compute output file name from input
	 or use y.tab.c, etc., if -y was specified.  */

      name_base = fixed_outfiles ? strdup("y.y") : infile;

      /* BASE_LENGTH gets length of NAME_BASE, sans ".y" suffix if any.  */

      base_length = strlen (name_base);
      if (!strcmp (name_base + (base_length - 2), ".y"))
	base_length -= 2;
      short_base_length = base_length;

      name_base = stringappend(name_base, short_base_length, "_tab");
      base_length = short_base_length + 4;
    }

  finput = tryopen(infile, "r");

  if (verboseflag)
    {
#ifdef MSDOS
      outfile = stringappend(name_base, short_base_length, ".out");
#else
      /* We used to use just .out if spec_name_prefix (-p) was used,
	 but that conflicts with Posix.  */
      outfile = stringappend(name_base, short_base_length, ".output");
#endif
      foutput = tryopen(outfile, "w");
    }

  if (noparserflag)
    {
      /* use permanent name for actions file */
      actfile = stringappend(name_base, short_base_length, ".act");
      faction = tryopen(actfile, "w");
    } 

#ifdef MSDOS
  if (! noparserflag)
    actfile = stringappend(tmp_base, tmp_len, "acXXXXXX");
  tmpattrsfile = stringappend(tmp_base, tmp_len, "atXXXXXX");
  tmpattrs0file = stringappend(tmp_base, tmp_len, "at0XXXXXX");
  tmptabfile = stringappend(tmp_base, tmp_len, "taXXXXXX");
  tmpdefsfile = stringappend(tmp_base, tmp_len, "deXXXXXX");
#else
  if (! noparserflag)
    actfile = stringappend(tmp_base, tmp_len, "act.XXXXXX");
  tmpattrsfile = stringappend(tmp_base, tmp_len, "attrs.XXXXXX");
  tmpattrs0file = stringappend(tmp_base, tmp_len, "attrs0.XXXXXX");
  tmptabfile = stringappend(tmp_base, tmp_len, "tab.XXXXXX");
  tmpdefsfile = stringappend(tmp_base, tmp_len, "defs.XXXXXX");
  
#endif /* not MSDOS */

  if (! noparserflag)
    faction = tryopen(actfile, "w+");
  fattrs = tryopen(tmpattrsfile,"w+");
  fattrs0 = tryopen(tmpattrs0file,"w+");
  ftable = tryopen(tmptabfile, "w+");

  if (definesflag)
    {
      defsfile = stringappend(name_base, base_length, ".h");
      fdefines = tryopen(tmpdefsfile, "w+");
    }

#ifndef MSDOS
  /*fix:: unlink not supported yet*/
  if (! noparserflag)
    unlink((const char @)actfile);
  unlink((const char @)tmpattrsfile);
  unlink((const char @)tmpattrs0file);
  unlink((const char @)tmptabfile);
  unlink((const char @)tmpdefsfile);
#endif

	/* These are opened by `done' or `open_extra_files', if at all */
  if (spec_outfile)
    tabfile = spec_outfile;
  else
    tabfile = stringappend(name_base, base_length, ".cyc");

#ifdef VMS
  attrsfile = stringappend(name_base, short_base_length, "_stype.h");
  attrs0file = stringappend(name_base, short_base_length, "_stype0.h");
  guardfile = stringappend(name_base, short_base_length, "_guard.c");
#else
#ifdef MSDOS
  attrsfile = stringappend(name_base, short_base_length, ".sth");
  attrs0file = stringappend(name_base, short_base_length, ".st0");
  guardfile = stringappend(name_base, short_base_length, ".guc");
#else
  attrsfile = stringappend(name_base, short_base_length, ".stype.h");
  attrs0file = stringappend(name_base, short_base_length, ".stype0.h");
  guardfile = stringappend(name_base, short_base_length, ".guard.c");
#endif /* not MSDOS */
#endif /* not VMS */
}



/* open the output files needed only for the semantic parser.
This is done when %semantic_parser is seen in the declarations section.  */

void open_extra_files(void)
{
  FILE *ftmp;
  int c;

		/* JF change from inline attrs file to separate one */
  ftmp = tryopen(attrsfile, "w");
  rewind((FILE@)fattrs);
  while((c=getc((FILE @)fattrs))!=EOF)	/* Thank god for buffering */
    putc(c,(FILE @)ftmp);
  fclose((FILE@)fattrs);
  fattrs=ftmp;

  fguard = tryopen(guardfile, "w");

}

	/* JF to make file opening easier.  This func tries to open file
	   NAME with mode MODE, and prints an error message if it fails. */
FILE @ tryopen(const char? name, const char@mode)
{
  FILE	*ptr;

  ptr = fopen((const char @)name, mode);
  if (ptr == NULL)
    {
      fprintf(stderr, "%s: ", program_name);
      perror(name);
      done(2);
    }
  return (FILE@)ptr;
}

void done(int k)
{
  if (faction)
    fclose((FILE @)faction);

  if (fattrs)
    fclose((FILE @)fattrs);

  if (fattrs0)
    fclose((FILE @)fattrs0);

  if (fguard)
    fclose((FILE @)fguard);

  if (finput)
    fclose((FILE @)finput);

  if (foutput)
    fclose((FILE @)foutput);

	/* JF write out the output file */
  if ((k == 0) && (ftable!=NULL))
    {
      FILE *ftmp;
      register int c;

      ftmp=tryopen(tabfile, "w");
      rewind((FILE @)ftable);
      while((c=getc((FILE @)ftable)) != EOF)
        putc(c,(FILE @)ftmp);
      fclose((FILE @)ftmp);
      fclose((FILE @)ftable);

      if (definesflag)
        {
          ftmp = tryopen(defsfile, "w");
          fflush(fdefines);
          rewind((FILE @)fdefines);
          while((c=getc((FILE @)fdefines)) != EOF)
            putc(c,(FILE @)ftmp);
          fclose((FILE @)ftmp);
          fclose((FILE @)fdefines);
        }
    }

#if defined (VMS) & !defined (__VMS_POSIX)
  if (faction && ! noparserflag)
    delete(actfile);
  if (fattrs)
    delete(tmpattrsfile);
  if (fattrs0)
    delete(tmpattrs0file);
  if (ftable)
    delete(tmptabfile);
  if (k==0) sys$exit(SS$_NORMAL);
  sys$exit(SS$_ABORT);
#else
#ifdef MSDOS
  if (actfile && ! noparserflag) unlink(actfile);
  if (tmpattrsfile) unlink(tmpattrsfile);
  if (tmpattrs0file) unlink(tmpattrs0file);
  if (tmptabfile) unlink(tmptabfile);
  if (tmpdefsfile) unlink(tmpdefsfile);
#endif /* MSDOS */
  exit(k);
#endif /* not VMS, or __VMS_POSIX */
}

