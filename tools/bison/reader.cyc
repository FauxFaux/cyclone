/* Input parser for bison
   Copyright (C) 1984, 1986, 1989, 1992 Free Software Foundation, Inc.

This file is part of Bison, the GNU Compiler Compiler.

Bison is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

Bison is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Bison; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */


/* read in the grammar specification and record it in the format described in gram.h.
  All guards are copied into the fguard file and all actions into faction,
  in each case forming the body of a C function (yyguard or yyaction)
  which contains a switch statement to decide which guard or action to execute.

The entry point is reader().  */

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include "system.h"
#include "files.h"
#include "new.h"
#include "symtab.h"
#include "lex.h"
#include "gram.h"
#include "machine.h"

/* DJG: I think the parser generator is still busted if you try to
 * re-define YYLTYPE.  Note that = is used on locs, so they shouldn't
 * be pointers!
 */
#define	LTYPESTR \
"\n#ifndef YYLTYPE"\
"\nstruct Yyltype"\
"\n    {"\
"\n      int timestamp;"\
"\n      int first_line;"\
"\n      int first_column;"\
"\n      int last_line;"\
"\n      int last_column;"\
"\n   };"\
"\ntypedef struct Yyltype yyltype;"\
"\n\n"\
"\n#define YYLTYPE yyltype"\
"\nYYLTYPE yynewloc() { "\
"\n  return Yyltype{0,0,0,0,0}; "\
"\n}"\
"\nyyltype yylloc=Yyltype{0,0,0,0,0};"\
"\n#endif\n\n"

#define EXTERN_LTYPESTR \
"\n#ifndef YYLTYPE"\
"\nextern struct Yyltype {"\
"\n      int timestamp;"\
"\n      int first_line;"\
"\n      int first_column;"\
"\n      int last_line;"\
"\n      int last_column;"\
"\n};"\
"\ntypedef struct Yyltype yyltype;"\
"\n\n"\
"\n#define YYLTYPE yyltype"\
"\nextern YYLTYPE yynewloc();"\
"\nextern yyltype yylloc;"\
"\n#endif\n\n"

/* Number of slots allocated (but not necessarily used yet) in `rline'  */
int rline_allocated;

extern char ?program_name;
extern int definesflag;
extern int nolinesflag;
extern int noparserflag;
extern int rawtoknumflag;
extern bucket *symval;
extern int numval;
extern int expected_conflicts;
extern char ?token_buffer;
extern int maxtoken;
extern char? grow_token_buffer(char ?);

extern char? printable_version(char);
extern void init_lex();
extern void tabinit();
extern void output_headers();
extern void output_trailers();
extern void free_symtab();
extern void open_extra_files();
extern char ?int_to_string(int);
extern void fatal(const char?);
extern void fatals(const char ?, const char?);
extern void warn(const char?);
extern void warni(const char?, int);
extern void warns(const char ?, const char?);
extern void warnss(const char?, const char?, const char?);
extern void warnsss(const char?, const char?, const char?, const char?);
extern void unlex(int);
extern void done(int);

extern int skip_white_space();
extern int parse_percent_token();
extern int lex();

typedef
  struct symbol_list
    {
      struct symbol_list *next;
      bucket *sym;
      bucket *ruleprec;
    }
  symbol_list;


void reader_output_yylsp(FILE @);
void read_declarations();
void copy_definition();
void parse_token_decl(int,int);
void parse_start_decl();
void parse_type_decl();
void parse_assoc_decl(int);
void parse_union_decl();
void print_union_decl();
void parse_expect_decl();
void parse_thong_decl();
void copy_action(symbol_list *, int);
void readgram();
void record_rule_line();
void packsymbols();
void output_token_defines(FILE @);
void packgram();
int read_signed_integer(FILE @);
static int get_type();



int lineno;
symbol_list *grammar;
int start_flag;
bucket *startval;
char ??tags;//an array of strings
int ?user_toknums;//an array of integers

/* Nonzero if components of semantic values are used, implying
   they must be unions.  */
static int value_components_used;

static int typed;  /* nonzero if %union has been seen.  */

static int lastprec;  /* incremented for each %left, %right or %nonassoc seen */

static int gensym_count;  /* incremented for each generated symbol */

static bucket *errtoken;

/* Nonzero if any action or guard uses the @n construct.  */
static int yylsp_needed;

extern char ?version_string;


static void
skip_to_char(int target)
{
  int c;
  if (target == '\n')
    warn("   Skipping to next \\n");
  else
    warni("   Skipping to next %c", target);

  do
    c = skip_white_space();
  while (c != target && c != EOF);
  if (c != EOF) 
    ungetc(c, (FILE @)finput);
}


void
reader()
{
  start_flag = 0;
  startval = NULL;  /* start symbol not specified yet. */

#if 0
  translations = 0;  /* initially assume token number translation not needed.  */
#endif
  /* Nowadays translations is always set to 1,
     since we give `error' a user-token-number
     to satisfy the Posix demand for YYERRCODE==256.  */
  translations = 1;

  nsyms = 1;
  nvars = 0;
  nrules = 0;
  nitems = 0;
  rline_allocated = 10;
  rline = NEW2(rline_allocated, short);

  typed = 0;
  lastprec = 0;

  gensym_count = 0;

  semantic_parser = 0;
  pure_parser = 0;
  yylsp_needed = 0;

  grammar = NULL;

  init_lex();
  lineno = 1;

  /* initialize the symbol table.  */
  tabinit();
  /* construct the error token */
  errtoken = getsym("error");
  errtoken->class = STOKEN;
  errtoken->user_token_number = 256; /* Value specified by posix.  */
  /* construct a token that represents all undefined literal tokens. */
  /* it is always token number 2.  */
  getsym("$undefined.")->class = STOKEN;
  /* Read the declaration section.  Copy %{ ... %} groups to ftable and fdefines file.
     Also notice any %token, %left, etc. found there.  */
  if (noparserflag) 
    fprintf((FILE @)ftable, "\n/*  Bison-generated parse tables, made from %s\n",
		infile);
  else
    fprintf((FILE @)ftable, "\n/*  A Bison parser, made from %s\n", infile);
  fprintf((FILE @)ftable, " by  %s  */\n\n", version_string);
  fprintf((FILE @)ftable, "#define YYBISON 1  /* Identify Bison output.  */\n\n");
  read_declarations();
  /* start writing the guard and action files, if they are needed.  */
  output_headers();
  /* read in the grammar, build grammar in list form.  write out guards and actions.  */
  readgram();
  /* Now we know whether we need the line-number stack.
     If we do, write its type into the .tab.h file.  */
  if (fdefines) /* bug fix by Dan -- for link-checking, must extern this! */
    /* reader_output_yylsp(fdefines); */
    if (yylsp_needed)
      fprintf((FILE @)fdefines, EXTERN_LTYPESTR);
  /* write closing delimiters for actions and guards.  */
  output_trailers();
  if (yylsp_needed)
    fprintf((FILE @)ftable, "#define YYLSP_NEEDED\n\n");
  /* assign the symbols their symbol numbers.
     Write #defines for the token symbols into fdefines if requested.  */
  packsymbols();
  /* convert the grammar into the format described in gram.h.  */
  packgram();
  /* free the symbol table data structure
     since symbols are now all referred to by symbol number.  */
  free_symtab();
}

void
reader_output_yylsp(FILE @ f)
{
  if (yylsp_needed)
    fprintf(f, LTYPESTR);
}

/* read from finput until %% is seen.  Discard the %%.
Handle any % declarations,
and copy the contents of any %{ ... %} groups to fattrs.  */

void
read_declarations ()
{
  register int c;
  register int tok;

  for (;;)
    {
      c = skip_white_space();

      if (c == '%')
	{
	  tok = parse_percent_token();

	  switch (tok)
	    {
	    case TWO_PERCENTS:
              //spit out union at the end of declaration
              print_union_decl();
	      return;

	    case PERCENT_LEFT_CURLY:
	      copy_definition();
	      break;

	    case TOKEN:
	      parse_token_decl (STOKEN, SNTERM);
	      break;
	
	    case NTERM:
	      parse_token_decl (SNTERM, STOKEN);
	      break;
	
	    case TYPE:
	      parse_type_decl();
	      break;
	
	    case START:
	      parse_start_decl();
	      break;
	
	    case UNION:
              parse_union_decl();
              //              fatal("no union is allowed any more!\n");
	      break;
	
	    case EXPECT:
	      parse_expect_decl();
	      break;
	    case THONG:
	      parse_thong_decl();
	      break;
	    case LEFT:
	      parse_assoc_decl(LEFT_ASSOC);
	      break;

	    case RIGHT:
	      parse_assoc_decl(RIGHT_ASSOC);
	      break;

	    case NONASSOC:
	      parse_assoc_decl(NON_ASSOC);
	      break;

	    case SEMANTIC_PARSER:
	      if (semantic_parser == 0)
		{
		  semantic_parser = 1;
		  open_extra_files();
		}
	      break;

	    case PURE_PARSER:
	      pure_parser = 1;
	      break;

	    case NOOP:
	      break;

	    default:
              warns("unrecognized: %s", token_buffer);
              skip_to_char('%');
                break;
	  }
	}
      else if (c == EOF)
        fatal("no input grammar");
      else
	{
		warns("unknown character: %s", printable_version((char)c));
		skip_to_char('%');
	}
    }
}


/* copy the contents of a %{ ... %} into the definitions file.
The %{ has already been read.  Return after reading the %}.  */

void
copy_definition ()
{
  register int c;
  register int match;
  register int ended;
  register int after_percent;  /* -1 while reading a character if prev char was % */
  int cplus_comment;

  if (!nolinesflag)
    fprintf((FILE @)fattrs0, "#line %d \"%s\"\n", lineno, infile);

  after_percent = 0;

  c = getc((FILE @)finput);

  for (;;)
    {
      switch (c)
	{
	case '\n':
	  putc(c, (FILE @)fattrs0);
	  lineno++;
	  break;

	case '%':
          after_percent = -1;
	  break;
	      
	case '\'':
	case '"':
	  match = c;
	  putc(c, (FILE @)fattrs0);
	  c = getc((FILE @)finput);

	  while (c != match)
	    {
	      if (c == EOF)
		fatal("unterminated string at end of file");
	      if (c == '\n')
		{
		  warn("unterminated string");
		  ungetc(c, (FILE @)finput);
		  c = match;
		  continue;
		}

	      putc(c, (FILE @)fattrs0);
	      
	      if (c == '\\')
		{
		  c = getc((FILE @)finput);
		  if (c == EOF)
		    fatal("unterminated string at end of file");
		  putc(c, (FILE @)fattrs0);
		  if (c == '\n')
		    lineno++;
		}

	      c = getc((FILE @)finput);
	    }

	  putc(c, (FILE @)fattrs0);
	  break;

	case '/':
	  putc(c, (FILE @)fattrs0);
	  c = getc((FILE @)finput);
	  if (c != '*' && c != '/')
	    continue;

	  cplus_comment = (c == '/');
	  putc(c, (FILE @)fattrs0);
	  c = getc((FILE @)finput);

	  ended = 0;
	  while (!ended)
	    {
	      if (!cplus_comment && c == '*')
		{
		  while (c == '*')
		    {
		      putc(c, (FILE @)fattrs0);
		      c = getc((FILE @)finput);
		    }

		  if (c == '/')
		    {
		      putc(c, (FILE @)fattrs0);
		      ended = 1;
		    }
		}
	      else if (c == '\n')
		{
		  lineno++;
		  putc(c, (FILE @)fattrs0);
		  if (cplus_comment)
		    ended = 1;
		  else
		    c = getc((FILE @)finput);
		}
	      else if (c == EOF)
		fatal("unterminated comment in `%{' definition");
	      else
		{
		  putc(c, (FILE @)fattrs0);
		  c = getc((FILE @)finput);
		}
	    }

	  break;

	case EOF:
	  fatal("unterminated `%{' definition");
          break;

	default:
	  putc(c, (FILE @)fattrs0);
          break;
	}

      c = getc((FILE @)finput);

      if (after_percent)
	{
	  if (c == '}')
	    return;
	  putc('%', (FILE @)fattrs0);
	}
      after_percent = 0;

    }

}



/* parse what comes after %token or %nterm.
For %token, what_is is STOKEN and what_is_not is SNTERM.
For %nterm, the arguments are reversed.  */

void
parse_token_decl (int what_is, int what_is_not)
{
  register int token = 0;
  register char ?typename = NULL;
  register struct bucket *`H symbol = NULL;  /* pts to symbol being defined */
  int k;

  for (;;)
    {
      if(ungetc(skip_white_space(), (FILE @)finput) == '%')
	return;
      token = lex();
      if (token == COMMA)
	{
	  symbol = NULL;
	  continue;
	}
      if (token == TYPENAME)
	{
	  k = strlen(token_buffer);
	  typename = NEW2(k + 1, char);
	  strcpy(typename, token_buffer);
	  value_components_used = 1;
	  symbol = NULL;
	}
      else if (token == IDENTIFIER && *symval->tag == '\"'
		&& (symbol!=NULL)) 
	{
	  translations = 1;
	  symval->class = STOKEN;
	  symval->type_name = typename;
	  symval->user_token_number = symbol->user_token_number;
	  symbol->user_token_number = SALIAS;

	  symval->alias = symbol;	
	  symbol->alias = symval;	
	  symbol = NULL;

 	  nsyms--;   /* symbol and symval combined are only one symbol */
	}
      else if (token == IDENTIFIER)
	{
	  int oldclass = symval->class;
	  symbol = symval;

	  if (symbol->class == what_is_not)
	    warns("symbol %s redefined", symbol->tag);
	  symbol->class = (char)what_is;
	  if (what_is == SNTERM && oldclass != SNTERM)
	    symbol->value = (short)nvars++;

	  if (typename)
	    {
	      if (symbol->type_name == NULL)
		symbol->type_name = typename;
	      else if (strcmp(typename, symbol->type_name) != 0)
		warns("type redeclaration for %s", symbol->tag);
	    }
	}
      else if (symbol && token == NUMBER)
        {
	  symbol->user_token_number = (short)numval;
	  translations = 1;
        }
      else
	{
          warnss("`%s' is invalid in %s",
                 token_buffer, 
                 (what_is == STOKEN) ? "%token" : "%nterm");
	  skip_to_char('%');
	}
    }

}

/* parse what comes after %thong 
	the full syntax is
		%thong <type> token number literal
 the <type> or number may be omitted.  The number specifies the
 user_token_number.

 Two symbols are entered in the table, one for the token symbol and
 one for the literal.  Both are given the <type>, if any, from the declaration.
 The ->user_token_number of the first is SALIAS and the ->user_token_number
 of the second is set to the number, if any, from the declaration.
 The two symbols are linked via pointers in their ->alias fields.
 
 during output_defines_table, the symbol is reported
 thereafter, only the literal string is retained
 it is the literal string that is output to yytname
*/

void
parse_thong_decl ()
{
  register int token;
  register struct bucket *symbol;
  register char ?typename = NULL;
  int k, usrtoknum;

  translations = 1;
  token = lex();		/* fetch typename or first token */
  if (token == TYPENAME) {
    k = strlen(token_buffer);
    typename = NEW2(k + 1, char);
    strcpy(typename, token_buffer);
    value_components_used = 1;
    token = lex();		/* fetch first token */
  }

  /* process first token */

  if (token != IDENTIFIER) 
    {
      warns("unrecognized item %s, expected an identifier", 
            token_buffer);
      skip_to_char('%');
      return;
    }
  symval->class = STOKEN;
  symval->type_name = typename;
  symval->user_token_number = SALIAS;
  symbol = symval;

  token = lex();		/* get number or literal string */
	
  if (token == NUMBER) {
    usrtoknum = numval;
    token = lex();		/* okay, did number, now get literal */
  }
  else usrtoknum = 0;

  /* process literal string token */

  if (token != IDENTIFIER || *symval->tag != '\"') 
    {
      warns("expected string constant instead of %s", 
            token_buffer);
      skip_to_char('%');
      return;
    }
  symval->class = STOKEN;
  symval->type_name = typename;
  symval->user_token_number = (short)usrtoknum;

  symval->alias = symbol;	
  symbol->alias = symval;	

  nsyms--;			/* symbol and symval combined are only one symbol */
}


/* parse what comes after %start */

void
parse_start_decl ()
{
  if (start_flag)
    warn("multiple %start declarations");
  if (lex() != IDENTIFIER)
    warn("invalid %start declaration");
  else
    {
      start_flag = 1;
      startval = symval;
    }
}


/* read in a %type declaration and record its information for get_type_name
   to access 
   DAN: We do destructor creation here rather than in parse_union_decl because
   the latter makes it too much of a pain to get the constructor names out.
   Note you'll get Cyclone errors if the type isn't actually a variant
   of YYSTYPE that carries exactly one value!

   Note: We're relying heavily on Cyclone's type inference -- else this
   is a real pain since bison doesn't really parse YYSTYPE!
*/
static int type_count = 0;
struct strlist { char ? str; char ?nth; bool seen; struct strlist * tl; };
struct strlist *seen_destructors = NULL;
static char? has_been_seen(char ?`H str) {
  struct strlist *`H l1 = seen_destructors;
  struct strlist *`H l2;
  for(; l1 != NULL; l1 = l1->tl)
    if (strcmp(l1->str,str)==0){
      if (l1->seen)
	return NULL;//we have already made deconstructor for this type
      else
	l1->seen = true;
	return l1->nth; //we haven't made deconstructor.
    }

  //this is a new type
  type_count++;
  l2 = (struct strlist *)malloc(sizeof(struct strlist));
  l2->str = str;
  l2->nth = aprintf("YY%d",type_count);
  l2->seen = true;
  l2->tl  = seen_destructors;
  seen_destructors = l2;
  return l2->nth;
}

static void add_to_list(char ?`H str, char ?`H constructor){
  struct strlist *`H l1 = seen_destructors;
  struct strlist *`H l2;
  for(; l1 != NULL; l1 = l1->tl)
    if (strcmp(l1->str,str)==0){
      warns("you refered to the type %s before you define it\n",str);
      l1->nth = constructor;
      l1->seen = false;
      return;
    }

  l2 = (struct strlist *)malloc(sizeof(struct strlist));
  l2->str = str;
  l2->nth = constructor;
  l2->seen = false;
  l2->tl  = seen_destructors;
  seen_destructors = l2;
  return;

}

static char? type2nth(char ? type_name){
  struct strlist *`H l1 = seen_destructors;
  for(; l1 != NULL; l1 = l1->tl)
    if(strcmp(l1->str,type_name)==0)
      return l1->nth;
  fatal("no such type defined\n");
  return NULL;
  
}

void
parse_type_decl ()
{
  register int k;
  register char ?name;

  if (lex() != TYPENAME)
    {
      warn("%type declaration has no <typename>");
      skip_to_char('%');
      return;
    }

  k = strlen(token_buffer);
  name = NEW2(k + 1, char);
  strcpy(name, token_buffer);

  /* DAN -- spit out the strip function */
  char ? deconstructor = has_been_seen(name);
  if(deconstructor) {
    if(!nolinesflag)
      fprintf((FILE @)fattrs, "\n#line %d \"%s\"", lineno, infile);
    fprintf((FILE @)fattrs, "\n static xtunion exn.Core::Failure yyfail_%s = Core::Failure(\"%s\");\n",deconstructor,name);
    // JGM: the new type system does not allow evars in function types so I am
    // going back to a macro like we used to have.  The right solution is to
    // modify bison so that we get rid of the union definition and gensym
    // tokens appropriately.
    //fprintf((FILE @)fattrs, "\n_ yyget_%s(xtunion YYSTYPE yy1) {switch(yy1) {case &%s(yy2): return yy2; default: throw &yyfail_%s;}}\n", name, name, name);
    fprintf((FILE @)fattrs, "\n%s yyget_%s(xtunion YYSTYPE yy1) {\n  _ yyzzz; \n  switch(yy1) {\n    case &%s(yyzzzz): \n      yyzzz = yyzzzz;\n      break;\n    default: throw &yyfail_%s;\n  }; \n  return yyzzz;\n}",name,deconstructor,deconstructor,deconstructor);
  }

  for (;;)
    {
      register int t;

      if(ungetc(skip_white_space(), (FILE @)finput) == '%')
	return;

      t = lex();

      switch (t)
	{

	case COMMA:
          break;
	case SEMICOLON:
	  break;

	case IDENTIFIER:
	  if (symval->type_name == NULL)
	    symval->type_name = name;
	  else if (strcmp(name, symval->type_name) != 0)
            warns("type redeclaration for %s", symval->tag);

	  break;

	default:
          warns("invalid %%type declaration due to item: `%s'", token_buffer);
          skip_to_char('%');
          break;
	}
    }
}



/* read in a %left, %right or %nonassoc declaration and record its information.  */
/* assoc is either LEFT_ASSOC, RIGHT_ASSOC or NON_ASSOC.  */

void
parse_assoc_decl (int assoc)
{
  register int k;
  register char ?name = NULL;
  register int prev = 0;

  lastprec++;  /* Assign a new precedence level, never 0.  */

  for (;;)
    {
      register int t;

      if(ungetc(skip_white_space(), (FILE @)finput) == '%')
	return;

      t = lex();

      switch (t)
	{

	case TYPENAME:
	  k = strlen(token_buffer);
	  name = NEW2(k + 1, char);
	  strcpy(name, token_buffer);
	  break;

	case COMMA:
	  break;

	case IDENTIFIER:
	  if (symval->prec != 0)
            warns("redefining precedence of %s", symval->tag);
	  symval->prec = (short)lastprec;
	  symval->assoc = (short)assoc;
	  if (symval->class == SNTERM)
            warns("symbol %s redefined", symval->tag);
	  symval->class = STOKEN;
	  if (name)
	    { /* record the type, if one is specified */
	      if (symval->type_name == NULL)
		symval->type_name = name;
	      else if (strcmp(name, symval->type_name) != 0)
               	warns("type redeclaration for %s", symval->tag);
	    }
	  break;

	case NUMBER:
	  if (prev == IDENTIFIER)
            {
	      symval->user_token_number = (short)numval;
	      translations = 1;
            }
          else	  
            {
              warns("invalid text (%s) - number should be after identifier", 
                    token_buffer);
	      skip_to_char('%');
            }
	  break;

	case SEMICOLON:
	  return;

    default:
          warns("unexpected item: %s", token_buffer);       
          skip_to_char('%');
          break;

	}

      prev = t;

    }
}

/* copy the union declaration into fattrs (and fdefines),
   where it is made into the
   definition of YYSTYPE, the type of elements of the parser value stack.  */

void
parse_union_decl()
{
  register int c;
  register int count;
  register int in_comment;
  int cplus_comment;
  char new_field;
  char state; /* before reading constructor, state =0;
	       * after reading constructor, state = 1;
	       * after reading type, state = 2;
	       * after reading semicolon, state = 0;*/

  char ? p; /*used in conjunction with token_buffer
              to get constructor name and type name*/
  char ? constructor = NULL;
  char ? type_name = NULL;
 
  if (typed)
    warn("multiple %union declarations");

  typed = 1;

  if (!nolinesflag)
    fprintf((FILE @)fattrs, "\n#line %d \"%s\"\n", lineno, infile);
  else
    fprintf((FILE @)fattrs, "\n");

  fprintf((FILE @)fattrs, "\nxtunion YYSTYPE;\nxtunion YYSTYPE "); 
  if (fdefines)
    fprintf((FILE @)fdefines, 
	"\nextern int yyparse();\nextern xtunion YYSTYPE; "
	    "\nextern xtunion YYSTYPE ");

  count = 0;
  in_comment = 0;
  new_field = 1;
  state = 0;

  c = getc((FILE @)finput);

  while (c != EOF)
    {
      putc(c, (FILE @)fattrs);
      if (fdefines){
	if (new_field && (c>='a' && c<='z' || c>='A' && c<='Z')) {
	  fprintf((FILE @)fdefines, "extern ");
	  new_field=0;
	}
	putc(c, (FILE @)fdefines);
      }

      switch (c)
	{
	case ';':
	  new_field = 1;
	  state = 0;
	  break;

	case '\n':
	  lineno++;
	  break;

	case '/':
	  c = getc((FILE @)finput);
	  if (c != '*' && c != '/')
	    ungetc(c, (FILE @)finput);
	  else
	    {
	      putc(c, (FILE @)fattrs);
	      if (fdefines)
		putc(c, (FILE @)fdefines);
	      cplus_comment = (c == '/');
	      in_comment = 1;
	      c = getc((FILE @)finput);
	      while (in_comment)
		{
		  putc(c, (FILE @)fattrs);
		  if (fdefines)
		    putc(c, (FILE @)fdefines);

		  if (c == '\n')
		    {
		      lineno++;
		      if (cplus_comment)
			{
			  in_comment = 0;
			  break;
			}
		    }
		  if (c == EOF)
		    fatal("unterminated comment at end of file");

		  if (!cplus_comment && c == '*')
		    {
		      c = getc((FILE @)finput);
		      if (c == '/')
			{
			  putc('/', (FILE @)fattrs);
			  if (fdefines)
			    putc('/', (FILE @)fdefines);
			  in_comment = 0;
			}
		    }
		  else
		    c = getc((FILE @)finput);
		}
	    }
	  break;


	case '{':
	  count++;
	  break;

	case '}':
	  if (count == 0)
	    warn ("unmatched close-brace (`}')");
	  count--;
	  if (count <= 0)
	    {
	      fprintf((FILE @)fattrs, "; \n");
	      if (fdefines)
		fprintf((FILE @)fdefines, "; \n");
	      /* JF don't choke on trailing semi */
	      c=skip_white_space();
	      if(c!=';') ungetc(c,(FILE @)finput);
	      return;
	    }
          break;

	case 'A':  case 'B':  case 'C':  case 'D':  case 'E':
	case 'F':  case 'G':  case 'H':  case 'I':  case 'J':
	case 'K':  case 'L':  case 'M':  case 'N':  case 'O':
	case 'P':  case 'Q':  case 'R':  case 'S':  case 'T':
	case 'U':  case 'V':  case 'W':  case 'X':  case 'Y':
	case 'Z':
	case 'a':  case 'b':  case 'c':  case 'd':  case 'e':
	case 'f':  case 'g':  case 'h':  case 'i':  case 'j':
	case 'k':  case 'l':  case 'm':  case 'n':  case 'o':
	case 'p':  case 'q':  case 'r':  case 's':  case 't':
	case 'u':  case 'v':  case 'w':  case 'x':  case 'y':
	case 'z':
	case '.':  case '_':
	  if (state!=0)
	    warn("we are not expecting this identifier\n");
	  p = token_buffer;
	  *p++ = (char)c;
	  c = getc((FILE @)finput);
	  while (isalnum(c) || c == '_' || c == '.')
	    {
	      putc(c, (FILE @)fattrs);
	      if (fdefines)
		putc(c, (FILE @)fdefines);

	      if (p == token_buffer + maxtoken)
		p = grow_token_buffer(p);

	      *p++ = (char)c;
	      c = getc((FILE @)finput);
	    }

	  *p = 0;
	  ungetc(c, (FILE @)finput);
	  constructor = strdup(token_buffer);
	  state = 1; /* now waiting for type name*/
	  break;
         
	case '(':
	  int level = 0;

	  if (state!=1)
	    warn("not expecting a type here\n");

	  p = token_buffer;
	  c = getc((FILE @)finput);

	  while (c != ')'||level>0)
	    {
	      putc(c, (FILE @)fattrs);
	      if (fdefines)
		putc(c, (FILE @)fdefines);

	      if (c == EOF)
		fatal("unterminated type name at end of file");
	      if (c == '\n') 
		{
		  warn("unterminated type name");
		  lineno++;
		}
	      if (c == '(') 
		{
		  level++;
		}
	      if (c == ')') 
		{
		  level--;
		  if (level<0){
		    warn("unmatched () inside union definition");
		    ungetc(c, (FILE @)finput);
		    break;
		  }
		}

	      if (p == token_buffer + maxtoken)
		p = grow_token_buffer(p);

	      *p++ =(char) c;
	      c = getc((FILE @)finput);
	    }
	  
	  putc(c, (FILE @)fattrs);
	  if (fdefines)
	    putc(c, (FILE @)fdefines);

	  *p = 0;
	  type_name = strdup(token_buffer);
	  state = 2;
	  add_to_list(type_name, constructor);
	  /*add this constructor(typename) pair into the list*/
	  break;

        default:
          break;
	}

      c = getc((FILE @)finput);
    }


}



/* copy the union declaration into fattrs (and fdefines),
   where it is made into the
   definition of YYSTYPE, the type of elements of the parser value stack.  */
void
print_union_decl()
{
  struct strlist *`H l1 = seen_destructors;
  fprintf((FILE @)fattrs0,"\nxtunion YYSTYPE;\nxtunion YYSTYPE ");
  fprintf((FILE @)fattrs0,"\n{");
  for(; l1 != NULL; l1 = l1->tl){
    fprintf((FILE @)fattrs0,"\n  %s(%s),",
            l1->nth, l1->str);
  }
  fprintf((FILE @)fattrs0,"\n  YYINITIALSVAL");
  fprintf((FILE @)fattrs0,"\n};\n");
  if (fdefines){
    fprintf((FILE @)fdefines,"\nextern int yyparse();");
    fprintf((FILE @)fdefines,"\nextern xtunion YYSTYPE ");
    fprintf((FILE @)fdefines,"\n{");
    l1 = seen_destructors;
    for(; l1 != NULL; l1 = l1->tl){
      fprintf((FILE @)fdefines,"\n  extern %s(%s),",
              l1->nth, l1->str);
    }
    fprintf((FILE @)fdefines,"\n  extern YYINITIALSVAL");
    fprintf((FILE @)fdefines,"\n};\n");
  }

  
}

/* parse the declaration %expect N which says to expect N
   shift-reduce conflicts.  */

void
parse_expect_decl()
{
  register int c;
  register int count;
  char buffer[21]ZEROTERM = {for i<20:0};

  c = getc((FILE @)finput);
  while (c == ' ' || c == '\t')
    c = getc((FILE @)finput);

  count = 0;
  while (c >= '0' && c <= '9')
    {
      if (count < 20)
	buffer[count++] = (char)c;
      c = getc((FILE @)finput);
    }
  buffer[count] = 0;

  ungetc (c, (FILE @)finput);

  if (count <= 0 || count > 10)
	warn("argument of %expect is not an integer");
  expected_conflicts = atoi (buffer);
}

/* that's all of parsing the declaration section */

/* Get the data type (alternative in the union) of the value for symbol n in rule rule.  */

char ?
get_type_name(int n, symbol_list *rule)
{
  const char ?msg = "invalid $ value";

  register int i;
  register symbol_list *rp;

  if (n < 0)
    {
      warn(msg);
      return NULL;
    }

  rp = rule;
  i = 0;

  while (i < n)
    {
      rp = rp->next;
      if (rp == NULL || rp->sym == NULL)
	{
	  warn(msg);
	  return NULL;
	}
      i++;
    }

  return (rp->sym->type_name);
}


/* after %guard is seen in the input file,
copy the actual guard into the guards file.
If the guard is followed by an action, copy that into the actions file.
stack_offset is the number of values in the current rule so far,
which says where to find $0 with respect to the top of the stack,
for the simple parser in which the stack is not popped until after the guard is run.  */

void
copy_guard(symbol_list *rule, int stack_offset)
{
  register int c;
  register int n;
  register int count;
  register int match;
  register int ended;
  register char ?type_name;
  int brace_flag = 0;
  int cplus_comment;

  /* offset is always 0 if parser has already popped the stack pointer */
  if (semantic_parser) stack_offset = 0;

  fprintf((FILE @)fguard, "\ncase %d:\n", nrules);
  if (!nolinesflag)
    fprintf((FILE @)fguard, "#line %d \"%s\"\n", lineno, infile);
  putc('{', (FILE @)fguard);

  count = 0;
  c = getc((FILE @)finput);

  while (brace_flag ? (count > 0) : (c != ';'))
    {
      switch (c)
	{
	case '\n':
	  putc(c, (FILE @)fguard);
	  lineno++;
	  break;

	case '{':
	  putc(c, (FILE @)fguard);
	  brace_flag = 1;
	  count++;
	  break;

	case '}':
	  putc(c, (FILE @)fguard);
	  if (count > 0)
	    count--;
	  else 
	    {
	      warn("unmatched right brace (`}')");
	      c = getc((FILE @)finput);	/* skip it */
	    }
          break;

	case '\'':
	case '"':
	  match = c;
	  putc(c, (FILE @)fguard);
	  c = getc((FILE @)finput);

	  while (c != match)
	    {
	      if (c == EOF)
		fatal("unterminated string at end of file");
	      if (c == '\n') 
		{
		  warn("unterminated string");
		  ungetc(c, (FILE @)finput);
		  c = match;		/* invent terminator */
		  continue;
		}

	      putc(c, (FILE @)fguard);
	      
	      if (c == '\\')
		{
		  c = getc((FILE @)finput);
		  if (c == EOF)
		    fatal("unterminated string");
		  putc(c, (FILE @)fguard);
		  if (c == '\n')
		    lineno++;
		}

	      c = getc((FILE @)finput);
	    }

	  putc(c, (FILE @)fguard);
	  break;

	case '/':
	  putc(c, (FILE @)fguard);
	  c = getc((FILE @)finput);
	  if (c != '*' && c != '/')
	    continue;

	  cplus_comment = (c == '/');
	  putc(c, (FILE @)fguard);
	  c = getc((FILE @)finput);

	  ended = 0;
	  while (!ended)
	    {
	      if (!cplus_comment && c == '*')
		{
		  while (c == '*')
		    {
		      putc(c, (FILE @)fguard);
		      c = getc((FILE @)finput);
		    }

		  if (c == '/')
		    {
		      putc(c, (FILE @)fguard);
		      ended = 1;
		    }
		}
	      else if (c == '\n')
		{
		  lineno++;
		  putc(c, (FILE @)fguard);
		  if (cplus_comment)
		    ended = 1;
		  else
		    c = getc((FILE @)finput);
		}
	      else if (c == EOF)
		fatal("unterminated comment");
	      else
		{
		  putc(c, (FILE @)fguard);
		  c = getc((FILE @)finput);
		}
	    }

	  break;

	case '$':
	  c = getc((FILE @)finput);
	  type_name = NULL;

	  if (c == '<')
	    {
	      register char ?cp = token_buffer;

	      while ((c = getc((FILE @)finput)) != '>' && c > 0)
		*cp++ = (char)c;
	      *cp = 0;
	      type_name = token_buffer;

	      c = getc((FILE @)finput);
	    }

	  if (c == '$')
	    {
	      fprintf((FILE @)fguard, "yyval");
	      if (!type_name) type_name = rule->sym->type_name;
	      if (type_name)
		fprintf((FILE @)fguard, ".%s", type_name);
	      if(!type_name && typed)
                warns("$$ of `%s' has no declared type", rule->sym->tag);
	    }

	  else if (isdigit(c) || c == '-')
	    {
	      ungetc (c, (FILE @)finput);
	      n = read_signed_integer((FILE @)finput);
	      c = getc((FILE @)finput);

	      if (!type_name && n > 0)
		type_name = get_type_name(n, rule);

	      /* JGM: */
	      if (!type_name) {
                warnss("$%s of %s has no declared type", int_to_string(n),
                       rule->sym->tag);
		type_name = strdup("BOGUS");
	      }
              
	      fprintf((FILE @)fguard, "yyget_%s(yyvsp[%d])", type2nth(type_name), n-stack_offset);
	      continue;
	    }
	  else if (c == '(') {
	    /* JGM: $ is valid in other contexts for Cyclone -- notably for
	    * tuples -- to get a bit of error checking, we require no white-
	    * space between the $ and the left-paren. */
	    putc('$', (FILE @)fguard);
	    continue;
	  } else
	    warns("$%s is invalid", printable_version((char)c)); 

	  break;

	case '@':
	  c = getc((FILE @)finput);
	  if (isdigit(c) || c == '-')
	    {
	      ungetc (c, (FILE @)finput);
	      n = read_signed_integer((FILE @)finput);
	      c = getc((FILE @)finput);
	    }
	  else 
	    {
	      /* JGM: @ is valid in other contexts for Cyclone */
	      putc('@', (FILE @)finput);
	      continue;
	      /* warni("@%s is invalid", printable_version(c));
		 n = 1; 
	      */
	    }

	  fprintf((FILE @)fguard, "yylsp[%d]", n - stack_offset);
	  yylsp_needed = 1;

	  continue;

	case EOF:
	  fatal("unterminated %%guard clause");
          break;

	default:
	  putc(c, (FILE @)fguard);
          break;
	}

      if (c != '}' || count != 0)
	c = getc((FILE @)finput);
    }

  c = skip_white_space();

  fprintf((FILE @)fguard, ";\n    break;}");
  if (c == '{')
    copy_action(rule, stack_offset);
  else if (c == '=')
    {
      c = getc((FILE @)finput);	/* why not skip_white_space -wjh */
      if (c == '{')
	copy_action(rule, stack_offset);
    }
  else
    ungetc(c, (FILE @)finput);
}



/* Assuming that a { has just been seen, copy everything up to the matching }
into the actions file.
stack_offset is the number of values in the current rule so far,
which says where to find $0 with respect to the top of the stack.  */

void
copy_action(symbol_list *rule, int stack_offset)
{
  register int c;
  register int n;
  register int count;
  register int match;
  register int ended;
  register char ?type_name;
  int do_dereference;
  int cplus_comment;

  /* offset is always 0 if parser has already popped the stack pointer */
  if (semantic_parser) stack_offset = 0;

  fprintf((FILE @)faction, "\ncase %d:\n", nrules);
  if (!nolinesflag)
    fprintf((FILE @)faction, "#line %d \"%s\"\n", lineno, infile);
  putc('{', (FILE @)faction);

  count = 1;
  c = getc((FILE @)finput);

  while (count > 0)
    {
      while (c != '}')
        {
          switch (c)
	    {
	    case '\n':
	      putc(c, (FILE @)faction);
	      lineno++;
	      break;

	    case '{':
	      putc(c, (FILE @)faction);
	      count++;
	      break;

	    case '\'':
	    case '"':
	      match = c;
	      putc(c, (FILE @)faction);
	      c = getc((FILE @)finput);

	      while (c != match)
		{
		  if (c == '\n')
		    {
		      warn("unterminated string");
		      ungetc(c, (FILE @)finput);
		      c = match;
		      continue;
		    }
		  else if (c == EOF)
		    fatal("unterminated string at end of file");

		  putc(c, (FILE @)faction);

		  if (c == '\\')
		    {
		      c = getc((FILE @)finput);
		      if (c == EOF)
			fatal("unterminated string");
		      putc(c, (FILE @)faction);
		      if (c == '\n')
			lineno++;
		    }

		  c = getc((FILE @)finput);
		}

	      putc(c, (FILE @)faction);
	      break;

	    case '/':
	      putc(c, (FILE @)faction);
	      c = getc((FILE @)finput);
	      if (c != '*' && c != '/')
		continue;

	      cplus_comment = (c == '/');
	      putc(c, (FILE @)faction);
	      c = getc((FILE @)finput);

	      ended = 0;
	      while (!ended)
		{
		  if (!cplus_comment && c == '*')
		    {
		      while (c == '*')
		        {
			  putc(c, (FILE @)faction);
			  c = getc((FILE @)finput);
			}

		      if (c == '/')
			{
			  putc(c, (FILE @)faction);
			  ended = 1;
			}
		    }
		  else if (c == '\n')
		    {
		      lineno++;
		      putc(c, (FILE @)faction);
		      if (cplus_comment)
			ended = 1;
		      else
		        c = getc((FILE @)finput);
		    }
		  else if (c == EOF)
		    fatal("unterminated comment");
		  else
		    {
		      putc(c, (FILE @)faction);
		      c = getc((FILE @)finput);
		    }
		}

	      break;
	      /* JGM: we use ^$ to abbreviate <typename> where
	       * <typename> is the xtunion field name that's associated with
	       * the rule via the type declaration.  
	       */
	    case '^':
	      c = getc((FILE @)finput);
	      if (c == '$') {
		c = getc((FILE @)finput);
		type_name = get_type_name(0,rule);
		if (type_name)
		  fprintf((FILE @)faction,"new %s",type2nth(type_name));
		else
		  fatal("rule has no type for ^$");
		continue;
	      } else {
		putc('^',(FILE @)faction);
		continue;
	      }

	    case '$':
	      c = getc((FILE @)finput);
	      type_name = NULL;
	      do_dereference = 1;

	      if (c == '<')
		{
		  register char ?cp = token_buffer;

		  while ((c = getc((FILE @)finput)) != '>' && c > 0)
		    *cp++ = (char)c;
		  *cp = 0;
		  type_name = token_buffer;
		  value_components_used = 1;

		  c = getc((FILE @)finput);
		}
	      if (c == '$')
		{
		  /* Now $$ is just yyval.  If you want to assign to it,
		   * it should be a value of type YYSTYPE.  Usually, this
		   * is done by simply doing $$ = ^$(blah).  If you want
		   * to use $$ as an r-value, then you'll need to match it
		   * explicitly (e.g., let Int(x) = $$; ).
		   */
		  fprintf((FILE @)faction, "yyval");
		}
	      else if (isdigit(c) || c == '!' || c == '-')
		{
		  int m;
		  if (c == '!') {
		    /* added by Dan.  Since we imagine the primary use of this
		       to be for $$= $!n, we warn that the variant of n
		       is the same as the variant of $$.  We could also support
		      a version that does not check this statically, but I don't
		      think it would be too useful.
		    */
		    do_dereference = 0;
		    c = getc((FILE @)finput);
		    if(!(isdigit(c))) {
		      warns("$!%s is invalid", printable_version((char)c));
		      break;
		    }
		  }
		  ungetc (c, (FILE @)finput);
		  n = read_signed_integer((FILE @)finput);
		  m = n - stack_offset;
		  c = getc((FILE @)finput);
                  
		  if (!type_name && n > 0)
		    type_name = get_type_name(n, rule);

		  if (!do_dereference || !type_name) {
		    /* check the variant is the same as $$.  
		       Is there a better way to do this than strcmp?
		    */
		    if(!type_name)
                      warnss("$%s of '%s' has no declared type",
                             int_to_string(n), rule->sym->tag);
		    /* JGM: it's sometimes useful to directly deconstruct
		     * $!i so I'm not sure this is a good idea.
		    else if(strcmp(type_name,get_type_name(0,rule))!=0)
		      warnss("$%s of '%s' has different type than $$",
			     int_to_string(n), rule->sym->tag);
		    */
		    if (m==0)
		      fprintf((FILE @)faction, "(yyvs[yyvsp_offset])");
		    else if (m > 0) 
		      fprintf((FILE @)faction, "(yyvs[yyvsp_offset+%d])", m);
		    else 
		      fprintf((FILE @)faction, "(yyvs[yyvsp_offset-%d])", -m);
		  } else {
		    /* DAN: calling functions makes for smaller files. */
		    fprintf((FILE @)faction," yyget_%s",type2nth(type_name));
		    if (m==0)
		      fprintf((FILE @)faction, "(yyvs[yyvsp_offset])");
		    else if (m > 0) 
		      fprintf((FILE @)faction, "(yyvs[yyvsp_offset+%d])", m);
		    else 
		      fprintf((FILE @)faction, "(yyvs[yyvsp_offset-%d])", -m);

		    /*
		    fprintf(faction,"; yyinternal;})");
		    */
		  }
		  continue;
		}
	      else if (c == '(') {
		/* JGM: $ is valid in other contexts for Cyclone -- 
		 * notably for tuples -- to get a bit of error checking, 
		 * we require no whitespace between the $ and the left-paren. 
		 */
		putc('$', (FILE @)faction);
		continue;
	      } else
		warns("$%s is invalid", printable_version((char)c));

	      break;

	    case '@': 
	    { int m;
	      c = getc((FILE @)finput);
	      if (isdigit(c) || c == '-')
		{
		  ungetc (c, (FILE @)finput);
		  n = read_signed_integer((FILE @)finput);
		  m = n - stack_offset;
		  c = getc((FILE @)finput);
		}
	      else
		{
		  /* JGM: cyclone uses @ */
		  putc('@', (FILE @)faction);
		  continue;
		  /*
		    warn("invalid @-construct");
		    n = 1;
		  */
		}
	      if (m == 0)
		fprintf((FILE @)faction, "yyls[yylsp_offset]");
	      else if (m > 0) 
		fprintf((FILE @)faction, "yyls[yylsp_offset+%d]", m);
	      else /* DJG make Popcorn parser happy */
		fprintf((FILE @)faction, "yyls[yylsp_offset-%d]", -m);

	      yylsp_needed = 1;

	      continue;
	    }
	    case EOF:
	      fatal("unmatched `{'");
              break;

	    default:
	      putc(c, (FILE @)faction);
              break;
	    }

          c = getc((FILE @)finput);
        }

      /* above loop exits when c is '}' */

      if (--count)
        {
	  putc(c, (FILE @)faction);
	  c = getc((FILE @)finput);
	}
    }

  fprintf((FILE @)faction, "\nbreak;}");
}



/* generate a dummy symbol, a nonterminal,
whose name cannot conflict with the user's names. */

bucket *
gensym()
{
  register bucket *sym;

  sprintf(token_buffer, "@%d", ++gensym_count);
  sym = getsym(token_buffer);
  sym->class = SNTERM;
  sym->value = (short)nvars++;
  return (sym);
}

/* Parse the input grammar into a one symbol_list structure.
Each rule is represented by a sequence of symbols: the left hand side
followed by the contents of the right hand side, followed by a NULL pointer
instead of a symbol to terminate the rule.
The next symbol is the lhs of the following rule.

All guards and actions are copied out to the appropriate files,
labelled by the rule number they apply to.  */

void
readgram()
{
  register int t;
  register bucket *`H lhs = NULL;
  register symbol_list *`H p;
  register symbol_list *`H p1;
  register bucket *`H bp;

  symbol_list *`H crule;/* points to first symbol_list of current rule.  */
			/* its symbol is the lhs of the rule.   */
  symbol_list *`H crule1;  /* points to the symbol_list preceding crule.  */

  p1 = NULL;

  t = lex();

  while (t != TWO_PERCENTS && t != ENDFILE)
    {
      if (t == IDENTIFIER || t == BAR)
	{
	  register int actionflag = 0;
	  int rulelength = 0;  /* number of symbols in rhs of this rule so far  */
	  int xactions = 0;	/* JF for error checking */
	  bucket *first_rhs = NULL;

	  if (t == IDENTIFIER)
	    {
	      lhs = symval;

	      if (!start_flag)
		{
		  startval = lhs;
		  start_flag = 1;
		}
    
	      t = lex();
	      if (t != COLON)
		{
		  warn("ill-formed rule: initial symbol not followed by colon");
		  unlex(t);
		}
	    }

	  if (nrules == 0 && t == BAR)
	    {
	      warn("grammar starts with vertical bar");
	      lhs = symval;	/* BOGUS: use a random symval */
	    }
	  /* start a new rule and record its lhs.  */

	  nrules++;
	  nitems++;

	  record_rule_line ();

	  p = NEW(symbol_list);
	  p->sym = lhs;
          p->ruleprec = NULL;
          p->next = NULL;
          
	  crule1 = p1;
	  if (p1)
	    p1->next = p;
	  else
	    grammar = p;
	  p1 = p;
	  crule = p;

	  /* mark the rule's lhs as a nonterminal if not already so.  */

	  if (lhs->class == SUNKNOWN)
	    {
	      lhs->class = SNTERM;
	      lhs->value = (short)nvars;
	      nvars++;
	    }
	  else if (lhs->class == STOKEN)
            warns("rule given for %s, which is a token", lhs->tag);

	  /* read the rhs of the rule.  */

	  for (;;)
	    {
	      t = lex();
	      if (t == PREC)
		{
		  t = lex();
		  crule->ruleprec = symval;
		  t = lex();
		}

	      if (! (t == IDENTIFIER || t == LEFT_CURLY)) break;

	      /* If next token is an identifier, see if a colon follows it.
		 If one does, exit this rule now.  */
	      if (t == IDENTIFIER)
		{
		  register bucket *ssave;
		  register int t1;

		  ssave = symval;
		  t1 = lex();
		  unlex(t1);
		  symval = ssave;
		  if (t1 == COLON) break;

		  if(!first_rhs)	/* JF */
		    first_rhs = symval;
		  /* Not followed by colon =>
		     process as part of this rule's rhs.  */
		}

	      /* If we just passed an action, that action was in the middle
		 of a rule, so make a dummy rule to reduce it to a
		 non-terminal.  */
	      if (actionflag)
		{
		  register bucket *`H sdummy;

		  /* Since the action was written out with this rule's */
		  /* number, we must give the new rule this number */
		  /* by inserting the new rule before it.  */

		  /* Make a dummy nonterminal, a gensym.  */
		  sdummy = gensym();

		  /* Make a new rule, whose body is empty,
		     before the current one, so that the action
		     just read can belong to it.  */
		  nrules++;
		  nitems++;
		  record_rule_line ();
		  p = NEW(symbol_list);
                  p->ruleprec = NULL;
                  p->next = NULL;
                  p->sym = NULL;
		  if (crule1)
		    crule1->next = p;
		  else grammar = p;
		  p->sym = sdummy;
		  crule1 = NEW(symbol_list);
                  crule1->ruleprec = NULL;
                  crule1->next = NULL;
                  crule1->sym = NULL;
		  p->next = crule1;
		  crule1->next = crule;

		  /* insert the dummy generated by that rule into this rule.  */
		  nitems++;
		  p = NEW(symbol_list);
		  p->sym = sdummy;
                  p->next = NULL;
                  p->ruleprec = NULL;
		  p1->next = p;
		  p1 = p;

		  actionflag = 0;
		}

	      if (t == IDENTIFIER)
		{
		  nitems++;
		  p = NEW(symbol_list);
		  p->sym = symval;
                  p->next = NULL;
                  p->ruleprec = NULL;
		  p1->next = p;
		  p1 = p;
		}
	      else /* handle an action.  */
		{
		  copy_action(crule, rulelength);
		  actionflag = 1;
		  xactions++;	/* JF */
		}
	      rulelength++;
	    }	/* end of  read rhs of rule */

	  /* Put an empty link in the list to mark the end of this rule  */
	  p = NEW(symbol_list);
          p->next = NULL;
          p->sym = NULL;
          p->ruleprec = NULL;
	  p1->next = p;
	  p1 = p;

	  if (t == PREC)
	    {
	      warn("two @prec's in a row");
	      t = lex();
	      crule->ruleprec = symval;
	      t = lex();
	    }
	  if (t == GUARD)
	    {
	      if (! semantic_parser)
		warn("%%guard present but %%semantic_parser not specified");

	      copy_guard(crule, rulelength);
	      t = lex();
	    }
	  else if (t == LEFT_CURLY)
	    {
		/* This case never occurs -wjh */
	      if (actionflag)  warn("two actions at end of one rule");
	      copy_action(crule, rulelength);
	      actionflag = 1;
	      xactions++;	/* -wjh */
	      t = lex();
	    }
	  /* If $$ is being set in default way,
	     warn if any type mismatch.  */
	  else if (!xactions && (first_rhs!=NULL) && lhs->type_name != first_rhs->type_name)
	    {
	      if (lhs->type_name == NULL || first_rhs->type_name == NULL
		  || strcmp(lhs->type_name,first_rhs->type_name))
                warnss("type clash (`%s' `%s') on default action",
                	lhs->type_name ? (const char?)lhs->type_name : "",
                	first_rhs->type_name ? (const char?)first_rhs->type_name : "");
	    }
	  /* Warn if there is no default for $$ but we need one.  */
	  else if (!xactions && !first_rhs && lhs->type_name != NULL)
	    warn("empty rule for typed nonterminal, and no action");
	  if (t == SEMICOLON)
	    t = lex();
	}    
#if 0
  /* these things can appear as alternatives to rules.  */
/* NO, they cannot.
	a) none of the documentation allows them
	b) most of them scan forward until finding a next %
		thus they may swallow lots of intervening rules
*/
      else if (t == TOKEN)
	{
	  parse_token_decl(STOKEN, SNTERM);
	  t = lex();
	}
      else if (t == NTERM)
	{
	  parse_token_decl(SNTERM, STOKEN);
	  t = lex();
	}
      else if (t == TYPE)
	{
	  t = get_type();
	}
      else if (t == UNION)
	{
	  parse_union_decl();
	  t = lex();
	}
      else if (t == EXPECT)
	{
	  parse_expect_decl();
	  t = lex();
	}
      else if (t == START)
	{
	  parse_start_decl();
	  t = lex();
	}
#endif

      else
	{
          warns("invalid input: %s", token_buffer);
	  t = lex();
	}
    }

  /* grammar has been read.  Do some checking */

  if (nsyms > MAXSHORT)
    fatals("too many symbols (tokens plus nonterminals); maximum %s",
           int_to_string(MAXSHORT));
  if (nrules == 0)
    fatal("no rules in the input grammar");

#ifdef NOTDEF
  if (typed == 0	/* JF put out same default YYSTYPE as YACC does */
      && !value_components_used)
    {
      /* We used to use `unsigned long' as YYSTYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */
      fprintf((FILE @)fattrs, "#ifndef YYSTYPE\n#define YYSTYPE int\n#endif\n");
      if (fdefines)
	fprintf((FILE @)fdefines, "#ifndef YYSTYPE\n#define YYSTYPE int\n#endif\n");
    }
#endif
  /* Report any undefined symbols and consider them nonterminals.  */

  for (bp = firstsymbol; bp; bp = bp->next)
    if (bp->class == SUNKNOWN)
      {
        warns("symbol %s is used, but is not defined as a token and has no rules",
        		bp->tag);
	bp->class = SNTERM;
	bp->value = (short)nvars++;
      }

  ntokens = nsyms - nvars;
}


void
record_rule_line ()
{
  /* Record each rule's source line number in rline table.  */

  if (nrules >= rline_allocated)
    {
      rline_allocated = nrules * 2;
      /*
      rline = (short *) xrealloc (rline,
				 rline_allocated * sizeof (short));
      */
      rline = new {for _temp_<rline_allocated*sizeof(short):
                  (_temp_<rline.size)?rline[_temp_]:0u};
    }
  rline[nrules] = (short)lineno;
}


/* read in a %type declaration and record its information for get_type_name to access */
/* this is unused.  it is only called from the #if 0 part of readgram */
static int
get_type()
{
  register int k;
  register int t;
  register char ?name;

  t = lex();

  if (t != TYPENAME) 
    {
      warn("ill-formed %type declaration");
      return t;
    }

  k = strlen(token_buffer);
  name = NEW2(k + 1, char);
  strcpy(name, token_buffer);

  for (;;)
    {
      t = lex();

      switch (t)
	{
	case SEMICOLON:
	  return (lex());

	case COMMA:
	  break;

	case IDENTIFIER:
	  if (symval->type_name == NULL)
	    symval->type_name = name;
	  else if (strcmp(name, symval->type_name) != 0)
            warns("type redeclaration for %s", symval->tag);

	  break;

	default:
	  return (t);
	}
    }
}



/* assign symbol numbers, and write definition of token names into fdefines.
Set up vectors tags and sprec of names and precedences of symbols.  */

void
packsymbols()
{
  register bucket *bp;
  register int tokno = 1;
  register int i;
  register int last_user_token_number;

  /* int lossage = 0; JF set but not used */

  tags = NEW2P(nsyms + 1, char ?);
  tags[0] =strdup("$");
  user_toknums = NEW2(nsyms + 1, int);
  user_toknums[0] = 0;

  sprec = NEW2(nsyms, short);
  sassoc = NEW2(nsyms, short);

  max_user_token_number = 256;
  last_user_token_number = 256;

  for (bp = firstsymbol; bp; bp = bp->next)
    {
      if (bp->class == SNTERM)
	{
	  bp->value += ntokens;
	}
      else if (bp->alias)
	{
		/* this symbol and its alias are a single token defn.
		  allocate a tokno, and assign to both
		  check agreement of ->prec and ->assoc fields 
			and make both the same
		*/
		if (bp->value == 0)
			bp->value = bp->alias->value = (short)tokno++;

		if (bp->prec != bp->alias->prec) {
			if (bp->prec != 0 && bp->alias->prec != 0
                                        && bp->user_token_number == SALIAS)
			        warnss("conflicting precedences for %s and %s",
                                       bp->tag, bp->alias->tag);
			if (bp->prec != 0) bp->alias->prec = bp->prec;
			else bp->prec = bp->alias->prec;
		}

		if (bp->assoc != bp->alias->assoc) {
			if (bp->assoc != 0 && bp->alias->assoc != 0
                                         && bp->user_token_number == SALIAS)
                          	warnss("conflicting assoc values for %s and %s",
                          		bp->tag, bp->alias->tag);
			if (bp->assoc != 0) bp->alias->assoc = bp->assoc;
			else bp->assoc = bp->alias->assoc;
		}

		if (bp->user_token_number == SALIAS)
			continue;  /* do not do processing below for SALIASs */

 	}
      else  /* bp->class == STOKEN */
	{
	  bp->value = (short)tokno++;
	}

      if (bp->class == STOKEN)
	{
	  if (translations && !(bp->user_token_number))
	    bp->user_token_number = (short)++last_user_token_number;
	  if (bp->user_token_number > max_user_token_number)
	    max_user_token_number = bp->user_token_number;
	}

      tags[bp->value] = bp->tag;
      user_toknums[bp->value] = bp->user_token_number;
      sprec[bp->value] = bp->prec;
      sassoc[bp->value] = bp->assoc;

    }

  if (translations)
    {
      register int i;

      token_translations = NEW2(max_user_token_number+1, short);

      /* initialize all entries for literal tokens to 2,
	 the internal token number for $undefined.,
	 which represents all invalid inputs.  */
      for (i = 0; i <= max_user_token_number; i++)
        token_translations[i] = 2;      

      for (bp = firstsymbol; bp; bp = bp->next)
        {
          if (bp->value >= ntokens) continue;		  /* non-terminal */
          if (bp->user_token_number == SALIAS) continue;  
          if (token_translations[bp->user_token_number] != 2)
            warnsss("tokens %s and %s both assigned number %s",
                              tags[token_translations[bp->user_token_number]],
            		      bp->tag,
            		      int_to_string(bp->user_token_number));
          token_translations[bp->user_token_number] = bp->value;
        }
    }

  error_token_number = errtoken->value;

  if (! noparserflag)
    output_token_defines((FILE @)ftable);

  if (startval->class == SUNKNOWN)
    fatals("the start symbol %s is undefined", startval->tag);
  else if (startval->class == STOKEN)
    fatals("the start symbol %s is a token", startval->tag);

  start_symbol = startval->value;

  if (definesflag)
    {
      output_token_defines((FILE @)fdefines);

      if (!pure_parser)
	{
	  if (spec_name_prefix)
	    fprintf((FILE @)fdefines, "\nextern YYSTYPE %slval;\n", spec_name_prefix);
	  else
	    fprintf((FILE @)fdefines, "\nextern xtunion YYSTYPE yylval;\n");
	}

      if (semantic_parser)
	for (i = ntokens; i < nsyms; i++)
	  {
	    /* don't make these for dummy nonterminals made by gensym.  */
	    if (*tags[i] != '@')
	      fprintf((FILE @)fdefines, "#define\tNT%s\t%d\n", tags[i], i);
	  }
#if 0
      /* `fdefines' is now a temporary file, so we need to copy its
         contents in `done', so we can't close it here.  */
      fclose(fdefines);
      fdefines = NULL;
#endif
    }
}
      
/* For named tokens, but not literal ones, define the name.  
   The value is the user token number.  
*/
void
output_token_defines(FILE @file)
{
  bucket *bp;
  register char ?cp, ?symbol;
  register char c;

  for (bp = firstsymbol; bp; bp = bp->next)
    {
      symbol = bp->tag;				/* get symbol */
      if (bp->value >= ntokens) continue;
      if (bp->user_token_number == SALIAS) continue;
      if ('\'' == *symbol) continue;	/* skip literal character */
      if (bp == errtoken) continue; 	/* skip error token */
      if ('\"' == *symbol) 
	{
		/* use literal string only if given a symbol with an alias */
		if (bp->alias)
			symbol = bp->alias->tag;
		else
			continue;
	}

      /* Don't #define nonliteral tokens whose names contain periods.  */
      cp = symbol;
      while (((c = *cp++)!=0) && c != '.');
      if (c != '\0')  continue;

      fprintf((FILE @)file, "#define\t%s\t%d\n", symbol,
		((translations && ! rawtoknumflag) 
			? bp->user_token_number 
			: bp->value));
      if (semantic_parser)
        fprintf((FILE @)file, "#define\tT%s\t%d\n", symbol, bp->value);
    }

  putc('\n', (FILE @)file);
}



/* convert the rules into the representation using rrhs, rlhs and ritems.  */

void
packgram()
{
  register int itemno;
  register int ruleno;
  register symbol_list *p;
/*  register bucket *bp; JF unused */

  bucket *ruleprec;

  ritem = NEW2(nitems + 1, short);
  rlhs = NEW2(nrules, short) - 1;
  rrhs = NEW2(nrules, short) - 1;
  rprec = NEW2(nrules, short) - 1;
  rprecsym = NEW2(nrules, short) - 1;
  rassoc = NEW2(nrules, short) - 1;

  itemno = 0;
  ruleno = 1;

  p = grammar;
  while (p)
    {
      rlhs[ruleno] = p->sym->value;
      rrhs[ruleno] = (short)itemno;
      ruleprec = p->ruleprec;

      p = p->next;
      while (p && (p->sym!=NULL))
	{
	  ritem[itemno++] = p->sym->value;
	  /* A rule gets by default the precedence and associativity
	     of the last token in it.  */
          if (p->sym->class == STOKEN)
	    {
	      rprec[ruleno] = p->sym->prec;
	      rassoc[ruleno] = p->sym->assoc;
	    }
	  if (p) p = p->next;
	}

      /* If this rule has a %prec,
	 the specified symbol's precedence replaces the default.  */
      if (ruleprec)
	{
          rprec[ruleno] = ruleprec->prec;
          rassoc[ruleno] = ruleprec->assoc;
	  rprecsym[ruleno] = ruleprec->value;
	}

      ritem[itemno++] = (short)-ruleno;
      ruleno++;

      if (p) p = p->next;
    }

  ritem[itemno] = 0;
}

/* Read a signed integer from STREAM and return its value.  */

int
read_signed_integer (FILE @ stream)
{
  register int c = getc(stream);
  register int sign = 1;
  register int n;

  if (c == '-')
    {
      c = getc(stream);
      sign = -1;
    }
  n = 0;
  while (isdigit(c))
    {
      n = 10*n + (c - '0');
      c = getc(stream);
    }

  ungetc(c, stream);

  return n * sign;
}
