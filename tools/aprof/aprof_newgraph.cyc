/* Graphical Allocation profiler
   Copyright (C) 2001 Greg Morrisett, AT&T
   This file is part of the Cyclone compiler.

   The Cyclone compiler is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The Cyclone compiler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the Cyclone compiler; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include <core.h>
#include <string.h>
#include <list.h>
#include <stdio.h>
#include <stdlib.h>
#include <array.h>
#include <fn.h>
#include <assert.h>
#include <hashtable.h>
#include <xarray.h>
#include "aprof_event.h"

//#define DEBUG_ME

using Core;
using List;
using Aprof;
using Fn;

typedef $(unsigned int,unsigned int) @point_t;
struct Curve {
  const char ?name;
  /* updated in phase 1 */
  double area;  // would like to use long long, but can't printf
  unsigned int max_y;
  unsigned int num_points;
  /* updated in phase 2 */
  list_t<point_t> points;
  /* auxilliary data for both phases */
  unsigned int last_x;
  unsigned int last_y;
};
typedef struct Curve @curve_t;
static curve_t
curve_init(const char ?`H name) {
  return new Curve(name,0,0,0,new List(new $(0,0),NULL),0,0);
}

// Data that is maintained/updated at each profiled event
struct ProcEnv {
  curve_t mem_total;
  curve_t heap_live;
  curve_t unique_live;
  curve_t refcnt_live;
  curve_t other_live;
  list_t<point_t> gc_points;
};

/////////////////////////////// GRAPH OUTPUT

// We either output in jgraph syntax or gnuplot syntax
extern int do_gnuplot; // defined in aprof.cyc
/* Build a growable buffer in the unique region. */
static char ?@nozeroterm `U buf_buf = NULL;
static int buf_pos = 0;
static int buf_len = 0;
static void buf_append(const char ?s) {
  let howmuch = strlen(s);
  if (buf_pos+howmuch > buf_len) {
    let newlen = (buf_len? buf_len*2: 17);
    while (newlen <= buf_pos+howmuch) newlen *= 2;
    char ?@nozeroterm `U newbuf = malloc(newlen * sizeof(char));
    for (int i = 0; i<buf_pos; i++)
      newbuf[i] = buf_buf[i];
    buf_len = newlen;
    buf_buf :=: newbuf;
    if (newbuf) ufree(newbuf);
  }
  for (int i = 0; i < howmuch; i++,s++,buf_pos++) {
    buf_buf[buf_pos] = *s;
  }
}
static void buf_print_contents() {
  if (buf_pos) printf("%.*s",buf_pos,buf_buf);
}
static void output_xy(int x, int y) {
  region r;
  if (do_gnuplot) buf_append(rprintf(r,"%d, %d\n",x,y));
  else printf("%d %d ",x,y);
}
static void output_header(const char ?title,int xmax, int ymax) {
  if (do_gnuplot) {
    printf("set title \"%s\"\n"
           "set xlabel \"allocation event #\"\n"
           "set xrange [0:%d]\n"
           "set ylabel \"bytes allocated/freed\"\n"
           "set yrange [0:%d]\n",
           title,
           xmax,
           ymax);
  }
  else {
    printf("newgraph\n  xaxis min 0 max %d label : allocation event #\n",
           xmax);
    printf("  yaxis min 0 max %d label : bytes allocated/freed\n\n",
           ymax);
  }
}

static int percent(unsigned int numerator, unsigned int denominator) {
  return (int)((numerator * 100.0)/denominator);
}

static void output_comment(const char ?s) {
  if (do_gnuplot)
    printf("# %s\n",s);
  else
    printf("(* %s *)\n",s);
  if (verbose)
    fprintf(stderr,"%s\n",s);
}

static list_t<char ?@> gnuplot_curves = NULL;
static void output_points_header(const char ? name) {
  if (do_gnuplot) {
    gnuplot_curves =
      new List(new aprintf("'-' title \"%s\" with points",name),
               gnuplot_curves);
  }
  else {
    printf("newcurve\n  label : %s\n  marktype circle\n linetype none\n",
	   name);
    printf("  pts ");
  }
}
static void output_lines_header(const char ?name, const char ?curvekind) {
  if (do_gnuplot) {
    gnuplot_curves =
      new List(new aprintf("'-' title \"%s\" with lines",name),
               gnuplot_curves);
  }
  else {
    printf("newcurve\n  label : %s\n  marktype none\n linetype %s\n",
	   name, curvekind);
    printf("  pts ");
  }
}
static void output_curve_end() {
  if (do_gnuplot)
    buf_append("e\n");
  else
    printf("\n\n");
}
static void output_cleanup() {
  if (do_gnuplot) {
    printf("plot \\\n");
    gnuplot_curves = imp_rev(gnuplot_curves);
    for (let l = gnuplot_curves; l != NULL; l = l->tl) {
      printf("%s",*(l->hd));
      if (l->tl) printf(", \\");
      printf("\n");
    }
    buf_print_contents();
  }
}

static void output_point_no_stack(point_t point) {
  let x = (*point)[0];
  let y = (*point)[1];
  output_xy(x,y);
}

// output a line representing the live data for a particular region.
// Update the heap size as we go.
static void output_line(string_t name,
			int num,
			list_t<point_t> points) {
  static string_t linetypes[7] =
    { "solid", "dotted", "dashed", "longdash", "dotdash",
      "dotdotdash", "dotdotdashdash" };
  if (points == NULL) return;
  if (num < 0)
    output_points_header(name);
  else
    output_lines_header(name,linetypes[num % 7]);
  iter(output_point_no_stack,points);
  output_curve_end();
}
static void output_curve(curve_t b) {
  static int curve_num = 1;
  output_line(b->name,curve_num++,b->points);
}

/* Nicely format f as a number of bytes */
char ?print_bytes(double f) {
  $(double,const char ?) powers[] =
    { $(1099511627776.0,"TB"),
      $(1073741824.0,"GB"),
      $(1048576.0,"MB"),
      $(1024.0,"KB") };
  const char ?units = "B";
  
  for (let i = 0; i < numelts(powers); i++) {
    if (f > powers[i][0]) {
      units = powers[i][1];
      f = f/powers[i][0];
      break;
    }
  }
  /* Print >= 3 digits of precision */
  if (f < 10.0)
    return aprintf("%.2f %s",f,units);
  else if (f < 100.0)
    return aprintf("%.1f %s",f,units);
  else
    return aprintf("%.0f %s",f,units);
}

/////////////////////////////// EVENT PROCESSING

/* Table for remembering how much was allocated at an address */
static struct Hashtable::Table<unsigned int,$(const char ?,unsigned int)@> *
allocation_at_address_table = NULL;
/* Table for remembering how much was allocated into a region */
static struct Hashtable::Table<const char ?@,unsigned int> *
allocation_in_region_table = NULL;
/* Array of events -- (region name, delta_y) pairs */
struct Xarray::Xarray<$(const char ?,int)@> *events = NULL;

static int uint_cmp(unsigned int i, unsigned int j) {
  return (i<j)?(-1):((i>j)?1:0);
}
static int uint_hash(unsigned int i) {
  return (int)i;
}
static void
init_globals() {
  allocation_at_address_table =
    Hashtable::create(101,uint_cmp,uint_hash);
  allocation_in_region_table =
    Hashtable::create(101,strptrcmp,Hashtable::hash_stringptr);
  events = Xarray::create_empty();
}

static void mark_delta(curve_t b, int delta_y) {
  if (delta_y == 0) return;
  unsigned int y = b->last_y + delta_y;
  b->num_points++;
  Xarray::add((_@)events,new $(b->name,delta_y));
  unsigned int x = Xarray::length((_@)events);
  b->area += ((double)(x - b->last_x)) * b->last_y;
  if (b->max_y < y) b->max_y = y;
#ifdef DEBUG_ME
  fprintf(stderr,"%s = %d @ %d\n",b->name,y,x);
  fprintf(stderr,"%s->area += %s*events\n",
          b->name,
          print_bytes(((double)(x - b->last_x)) * b->last_y));
#endif
  b->last_x = x;
  b->last_y = y;
}
static void add_point(curve_t b, unsigned int y) {
  mark_delta(b, (int)(y - b->last_y));
}
static void add_delta(curve_t b, unsigned int x, int delta_y) {
  unsigned int y = b->last_y + delta_y;
  if (b->last_x != x-1)
    b->points = new List(new $(x-1,b->last_y),b->points);
  b->points = new List(new $(x,y),b->points);
  b->last_x = x;
  b->last_y = y;
}
static void mark_finish(curve_t b) {
  unsigned int x = Xarray::length((_@)events);
  b->area += ((double)(x - b->last_x)) * b->last_y;
#ifdef DEBUG_ME
  fprintf(stderr,"%s->area += %s*events\n",
          b->name,
          print_bytes(((double)(x - b->last_x)) * b->last_y));
#endif
  b->last_x = 0;
  b->last_y = 0;
}
static void add_finish(curve_t b) {
  unsigned int x = Xarray::length((_@)events);
  if (b->last_x != x)
    b->points = new List(new $(x,b->last_y),b->points);
}

static void comment_stats(curve_t b) { // for debugging
  output_comment(aprintf("%s area: %s*events\tmax_y: %u",b->name,
                         print_bytes(b->area),b->max_y));
}

static void update_heap_stats(struct ProcEnv @env,
			      struct RegionStats @s) {
  add_point(env->mem_total,s->region_size_bytes);
}

static unsigned int bytes_reclaim_heap = 0;
static unsigned int bytes_reclaim_unique = 0;

static bool proc_event(struct ProcEnv @env, aprof_event_t event) {
  switch (event) {
  case &CreateE(CreateEvent(time,_,rname,*rstats)):
    let rnameptr = new rname;

    assert(strcmp("unique",rname));
    assert(strcmp("heap",rname));
    assert(strcmp("refcnt",rname));

    update_heap_stats(env,rstats); // these rstats are for GC
    break;

  case &AllocE(AllocEvent(time,_,rname,count,*rstats,addr)):
    if (!strcmp(rname,"unique")) {
      mark_delta(env->unique_live,count);
      update_heap_stats(env,rstats);
      if (count>0) {
        // remember count for addr in case gc reclaims addr
        Hashtable::insert((_@)allocation_at_address_table,
                          addr,new $("unique",(unsigned int)count));
      }
      else {
        // gc did not reclaim, this is ufree, forget addr/count
        Hashtable::remove((_@)allocation_at_address_table, addr);
      }
    }
    else if (!strcmp(rname,"refcnt")) {
      mark_delta(env->refcnt_live,count);
      update_heap_stats(env,rstats);
    }
    else if (!strcmp(rname,"heap")) {
      mark_delta(env->heap_live,count);
      update_heap_stats(env,rstats);
      Hashtable::insert((_@)allocation_at_address_table,
                        addr,new $("heap",(unsigned int)count));
    }
    else {
      mark_delta(env->other_live,count);
      let rname_p = new rname;
      unsigned int x = 0;
      try {
        x = Hashtable::lookup((_@)allocation_in_region_table, rname_p);
        Hashtable::remove((_@)allocation_in_region_table, rname_p);
      }
      catch {
      case &Not_found: break;
      }
      Hashtable::insert((_@)allocation_in_region_table,rname_p,x+count);
      // The rstats give info about the "other" region, not the
      // memory managed by the GC -- so don't update that.
      // update_heap_stats(env,rstats);
    }
    break;

  case &ReclaimE(ReclaimEvent(time,addr)):
    // this is a unique pointer object that got garbage collected
    try {
      let &$(rname,count) =
        Hashtable::lookup((_@)allocation_at_address_table,addr);
      Hashtable::remove((_@)allocation_at_address_table,addr);
      int delta_y = -1*((int)count);
      if (strcmp("unique",rname) == 0) {
        mark_delta(env->unique_live,delta_y);
        bytes_reclaim_unique += count;
      }
      else if (strcmp("heap",rname) == 0) {
        mark_delta(env->heap_live,delta_y);
        bytes_reclaim_heap += count;
      }
    }
    catch {
    case &Not_found:
      fprintf(stderr,
	      "error: reclaim event %x without (remembered) allocation\n",
              addr);
      //return false;
      break;
    }
    break;

  case &FreeE(FreeEvent(time,rname,*rstats)):
    assert(strcmp("unique",rname));
    assert(strcmp("heap",rname));
    assert(strcmp("refcnt",rname));

    let rname_p = new rname;
    unsigned int x = 0;
    try {
      x = Hashtable::lookup((_@)allocation_in_region_table,rname_p);
      Hashtable::remove((_@)allocation_in_region_table,rname_p);
    }
    catch {
    case &Not_found: break; // region created but not allocated into
    }
    mark_delta(env->other_live,-x);
    update_heap_stats(env,rstats);
    break;

  case &ResizeE(ResizeEvent(time,rname,count,*rstats)):
    assert(strcmp("unique",rname));
    assert(strcmp("heap",rname));
    assert(strcmp("refcnt",rname));

    // The count is the new size of the region -- ignore
    // mark_delta(env->other_live,count);

    // rstats measures GC
    update_heap_stats(env,rstats);
    break;

  case &GcE(GcEvent(time,n,*rstats)):
    update_heap_stats(env,rstats);
    unsigned int x = Xarray::length((_@)events);
    env->gc_points = new List(new $(x,rstats->region_size_bytes),
			      env->gc_points);
    break;

  case &GcAddToHeapE(GcAddToHeapEvent(time,addr,amt,*rstats)):
    update_heap_stats(env,rstats);
    break;

  case &MarkE(_):
    break;
  }

  return true;
}

namespace Aprof;


//////////////////////////////////////////////////////////////////////
list_t<curve_t> all_curves;
static void doit($(const char ?,int) @z) {
  static unsigned int x = 1;
  let &$(name,delta_y) = z;
  for (let l = all_curves; l != NULL; l = l->tl) {
    let b = l->hd;
    if (strcmp(b->name,name) == 0) {
      add_delta(b,x++,delta_y);
      return;
    }
  }
}
static void doit2($(const char ?,int) @z) {
  static unsigned int x = 1;
  let &$(name,delta_y) = z;
  if (strcmp(name,"reserved") == 0) {
    for (let l = all_curves; l != NULL; l = l->tl) {
      let b = l->hd;
      if (strcmp(b->name,name) == 0) {
        add_delta(b,x++,delta_y);
        return;
      }
    }
  }
  else {
    /* increment the curve identified by name, as well as
       all subsequent curves in the list all_curves,
       except for the reserved curve */
    let saw_name = 0;
    for (let l = all_curves; l != NULL; l = l->tl) {
      let b = l->hd;
      if (!saw_name && strcmp(b->name,name) == 0) saw_name = 1;
      if (saw_name && strcmp(b->name,"reserved") != 0) add_delta(b,x,delta_y);
    }
    x++;
  }
}
//////////////////////////////////////////////////////////////////////

int curve_cmp(curve_t x, curve_t y) {
  if (x->area < y->area) return -1;
  else if (x->area == y->area) return 0;
  else return 1;
}

int generate_newgraph(string_t<`H> file) {
  struct ProcEnv @`H env =
    new ProcEnv{.mem_total = curve_init("reserved"),
		.heap_live = curve_init("heap"),
		.unique_live = curve_init("unique"),
		.refcnt_live = curve_init("refcnt"),
		.other_live = curve_init("other"),
		.gc_points = NULL};

  init_globals();

  // process the file
  fn_t clos = make_fn(proc_event,env);
  int ret = proc_file(file,clos);
  if (ret != 0) return ret;

  mark_finish(env->mem_total);
  mark_finish(env->heap_live);
  mark_finish(env->unique_live);
  mark_finish(env->refcnt_live);
  mark_finish(env->other_live);

  if (env->mem_total->area > 0.0)
    all_curves = new List(env->mem_total,all_curves);
  if (env->heap_live->area > 0.0)
    all_curves = new List(env->heap_live,all_curves);
  if (env->unique_live->area > 0.0)
    all_curves = new List(env->unique_live,all_curves);
  if (env->refcnt_live->area > 0.0)
    all_curves = new List(env->refcnt_live,all_curves);
  if (env->other_live->area > 0.0)
    all_curves = new List(env->other_live,all_curves);
  all_curves = merge_sort(curve_cmp,all_curves);
  //  Xarray::iter(doit,(_@)events);
  Xarray::iter(doit2,(_@)events);
  for (let l = all_curves; l != NULL; l = l->tl)
    add_finish(l->hd);

  int max_y = 0;
  if (max_y < env->mem_total->max_y) max_y = env->mem_total->max_y;
  if (max_y < env->heap_live->max_y) max_y = env->heap_live->max_y;
  if (max_y < env->unique_live->max_y) max_y = env->unique_live->max_y;
  if (max_y < env->refcnt_live->max_y) max_y = env->refcnt_live->max_y;
  if (max_y < env->other_live->max_y) max_y = env->other_live->max_y;

  double memory_footprint = env->mem_total->area;
  double data_footprint = 
    env->heap_live->area + env->unique_live->area
    + env->refcnt_live->area + env->other_live->area;
  let title = "";
  if (memory_footprint > 0.0)
    title =
      aprintf("Memory footprint %s*events, data footprint %s*events (%d%%)",
              print_bytes(memory_footprint),
              print_bytes(data_footprint),
              (int)((data_footprint * 100.0)/memory_footprint));
  else
    /* With -nogc we don't get measurement of memory footprint */
    title = aprintf("Data footprint %s*events", print_bytes(data_footprint));

  output_comment("Allocation profile produced by aprof");
  output_comment(aprintf("Total events:\t%u",
                         (num_create_events+num_alloc_events
                          +num_free_events+num_reclaim_events
                          +num_resize_events+num_gc_events)));
  output_comment(aprintf("\tCreate:\t%u",num_create_events));
  output_comment(aprintf("\tAlloc:\t%u",num_alloc_events));
  output_comment(aprintf("\tFree:\t%u",num_free_events));
  output_comment(aprintf("\tReclaim:\t%u",num_reclaim_events));
  output_comment(aprintf("\tResize:\t%u",num_resize_events));
  output_comment(aprintf("\tGc:\t%u",num_gc_events));
  if (num_alloc_heap) {
    output_comment(aprintf("%u objects (%u bytes) allocated in `H",
                           num_alloc_heap, bytes_alloc_heap));
    output_comment(aprintf("%u objects [%d%%] (%u bytes [%d%%]) collected from `H",
                           num_reclaim_heap,
                           percent(num_reclaim_heap,num_alloc_heap),
                           bytes_reclaim_heap,
                           percent(bytes_reclaim_heap,bytes_alloc_heap)));
  }
  if (num_alloc_unique) {
    output_comment(aprintf("%u objects (%u bytes) allocated in `U",
                           num_alloc_unique, bytes_alloc_unique));
    output_comment(aprintf("%u objects [%d%%] (%u bytes [%d%%]) freed from `U",
                           num_freed_unique,
                           percent(num_freed_unique,num_alloc_unique),
                           bytes_freed_unique,
                           percent(bytes_freed_unique,bytes_alloc_unique)));
    output_comment(aprintf("%u objects [%d%%] (%u bytes [%d%%]) collected from `U",
                           num_reclaim_unique,
                           percent(num_reclaim_unique,num_alloc_unique),
                           bytes_reclaim_unique,
                           percent(bytes_reclaim_unique,bytes_alloc_unique)));
  }
  comment_stats(env->mem_total);
  comment_stats(env->heap_live);
  comment_stats(env->unique_live);
  comment_stats(env->refcnt_live);
  comment_stats(env->other_live);

  output_header(title,Xarray::length((_@)events),(int)(max_y * 1.05));

  output_line(aprintf("GC (%d total)",length(env->gc_points)),
	      -1,env->gc_points);
  //output_line(env->mem_total->name,0,env->mem_total->points);
  for (let l = all_curves; l != NULL; l = l->tl) {
    curve_t b = l->hd;
    if (strcmp("reserved",b->name) != 0)
      b->name = aprintf("%s %s*events (%d%%)",b->name,
                        print_bytes(b->area),
                        (int)((b->area * 100.0)/data_footprint));
    output_curve(b);
  }

  output_cleanup();


  return 0;
}
