#include "core.h"
#include "stdio.h"
#include "filename.h"
#include "string.h"


#include "syntax.h"
#include "parser.h"
#include "lexer.h"
#include "lexgen.h"
#include "compact.h"
#include "output.h"

using Core;

int main(int argc, string_t ? argv) {
  if(argc < 2 || argc > 3) {
    fprintf(stderr, "Usage: cycocamllex <input file> [<output file>]");
    return 1;
  }
  string_t source_name = argv[1];
  string_t dest_name;
  if(argc==3)
    dest_name = argv[2];
  else if (Filename::check_suffix(source_name,".cyl"))
    dest_name = strconcat(Filename::chop_extension(source_name),
				  ".cyc");
  else
    dest_name = strconcat(source_name, ".cyc");

  FILE @ ic;
  FILE @ oc; 
  try {
    ic = file_open(source_name, "rb"); // very important for fseek!
    oc = file_open(dest_name,   "w");
  } catch {
  default: 
    fprintf(stderr, "trouble opening files");
    // FIX: remove dest file
    // jcheney: fixed this

    remove(dest_name);
    return 1;
  }
  // FIX: catch errors!!!
  // jcheney: working on this
  try {
    Syntax::lexer_definition_t def = Parser::parse_file(ic);
    let &$(entries, transitions) = Lexgen::make_dfa(def);
    let tables = Compact::compact_tables(transitions);
    Output::output_lexdef(source_name, ic, oc,
			  def->header, tables, entries, def->trailer);
  } catch {
    // FIX: catch other exceptions, handle common default behavior 
    // appropriately
    // jcheney:working on this
    // jcheney: in this case, can't give exact character position since
    // don't have access to lexbuf so can't get Lexing::lexeme_start(lbuf)
    case &Parser::Parser_error(s): 
      fprintf(stderr,"File \"%s\", line %d: syntax error.\n",
	      source_name, Lexer::line_num);
      break;
    case &Lexer::Lexical_error(msg,line,col):
      fprintf(stderr,"File \"%s\", line %d, character %d: %s.\n",
	      source_name,line,col,msg);
      break;
    case Output::Table_overflow:
      fprintf(stderr,"File \"%s\":\ntransition table overflow, automaton is too big\n",
	      source_name);
      break;
    case exn:
      fprintf(stderr, "error in parsing, generation, compaction, or output");
      remove(dest_name);
      throw exn;
      return 1;
  }  
  return 0;
}



