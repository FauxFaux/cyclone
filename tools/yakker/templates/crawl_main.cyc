#include <stdio.h>
#include <buffer.h>
#include "earley-parsetree.h"
#include "earley-backend.h"
#include "dfa.h"

#define YKSAVE ({ let x = 0; ykb->save_count++; if (ykb->save) x = ykb->cur-ykb->save; else ykb->save = ykb->cur; x; })

// TODO: generate a header file for the DFA and include it here
// rather than doing the decl by hand
namespace %(CYC_DFA_NS) {
  extern struct EarleyAnyBackend::DFA::edfa dfa_obj;
}

int main(int argc, const char ?`H?argv) {
  int print_depth = 0;
  int do_print = 0;

  if (argc > 2) {
    fprintf(stderr,"Usage: %s [depth]\n",argv[0]);
    exit(1);
  }
  if (argc == 2) {
    if (!sscanf(argv[1],"%d",&print_depth)) {
      fprintf(stderr,"Usage: %s [depth]\n",argv[0]);
      exit(1);
    }
    do_print = 1;
  }

  let dfa_obj = &%(CYC_DFA_NS)::dfa_obj;

  fprintf(stderr,"ABNF parsing stdin ... \n");
  let ykb = fd2ykbuf(0);

  YKSAVE;  // don't throw away the input as we parse
  let $(trees, valid, valid_prefix) =
    EarleyAnyBackend::ykb_parse(dfa_obj,ykb,1);

  if (trees) {
    fprintf(stderr,"done -- is valid string :%d; is valid prefix: %d\n",
	    valid,valid_prefix);
    if (trees->tl)
      fprintf(stderr,"Ambiguous parse.\n");
    else {
      if (do_print) EarleyParsetree::print_tree(trees->hd->f0,print_depth);
      // "tree" encodes top-level regexp, but we want to crawl starting
      // from symbol with regexp.
      // TODO: generate function that crawls the top-level regexp.
      let child_tree = trees->hd->f0->children[0];

      // Get a NUL-terminated copy of the input
      let len = ykb->lim - ykb->bot;
      let input = substring(ykb->bot,0,ykb->lim - ykb->bot);
      //      zstrncpy(input,ykb->bot,len);

      // Crawl the parse & input
      %(CRAWLFUN)(child_tree, input);
    }
  }
  else fprintf(stderr,"Parse failed. Valid prefix: %d\n",valid_prefix);

  return 0;
}
