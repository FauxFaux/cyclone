#include <stdio.h>
#include <buffer.h>
#include "earley-parsetree.h"
#include "earley-backend.h"
#include "dfa.h"

#if !defined(TGFUN) || !defined(CYC_TG_DFA_NS) || !defined(CYC_GRM_DFA_NS)
#error "Missing parameters to tge-main.cyc"
#endif

// TODO: generate a header file for the DFA and include it here 
// rather than doing the decl by hand
namespace CYC_TG_DFA_NS{
  extern struct EarleyAnyBackend::DFA::edfa dfa_obj;
}
namespace CYC_GRM_DFA_NS{
  extern struct EarleyAnyBackend::DFA::grammar_edfa grm_dfa_obj;
}

#define USAGE \
"Usage:%s [OPTIONS] <input-file>\n"\
"Options: -depth <n>           print parse tree to depth of n.\n"\
"         -num-args <n>        allocate space for n arguments to scan.\n"\
"         -cyc                 use cyclone backend when parsing format string.\n"\
"         -fsm                 use fsm backend when parsing format string.\n"\
"         -fmt <format-string> use the given format string instead of reading from stdin.\n"\
"         -help                print this message\n"

static void die(const char ?prog_name) {
  fprintf(stderr,USAGE,prog_name);
  exit(1);
}


int main(int argc, const char ?`H?argv) {
  int print_depth = 0;
  int do_print = 0;
  int backend = -1;
  int grm_backend = -1;
  string_t input_file = NULL;
  string_t format_string = NULL;
  int num_args = 0;

  for (int argi = 1; argi < argc; argi++) {
    if (     ! strcmp(argv[argi], "-help")) die(argv[0]);
    else if (! strcmp(argv[argi], "-cyc")) backend = 0;
    else if (! strcmp(argv[argi], "-fsm")) backend = 1;
    else if (! strcmp(argv[argi], "-grm-cyc")) grm_backend = 0;
    else if (! strcmp(argv[argi], "-grm-fsm")) grm_backend = 1;
    else if (! strcmp(argv[argi], "-fmt")) {
      if (argi+1 >= argc) die(argv[0]);
      format_string = argv[argi+1];
      argi += 1;
    }
    else if (! strcmp(argv[argi], "-num-args")) {
      if (argi+1 >= argc) die(argv[0]);
      if (!sscanf(argv[argi+1],"%d",&num_args)){
        fprintf(stderr,"-num-args option is not followed by valid integer: %s.\n",argv[argi+1]);
        num_args = 0;
      }
      argi += 1;
    }
    else if (! strcmp(argv[argi], "-depth")) {
      if (argi+1 >= argc) die(argv[0]);
      if (sscanf(argv[argi+1],"%d",&print_depth)){
        do_print = 1;
        argi++;
      } else {
        fprintf(stderr,"Argument %d not valid depth: %s.\n",argi+1, argv[argi+1]);
        die(argv[0]);
      }
      argi += 1;
    }
    else if (!input_file) input_file = argv[argi];
    else { fprintf(stderr,"Unrecognized option: %s\n",argv[argi]); exit(1); }
  }
  
  if (input_file){
    fprintf(stderr,"Using input file %s.\n",input_file);
  } else {
    fprintf(stderr,"Error: missing input file.\n");
    return 1;
  }
    
  if (backend == -1) {     
    fprintf(stderr,"No backend specified. Defaulting to cyclone backend.\n");
    backend = 0;
  }
  
  if (grm_backend == -1) {     
    fprintf(stderr,"No grammar backend specified. Defaulting to cyclone backend.\n");
    grm_backend = 0;
  }
  
  // TODO: allow these to be specified independently on command line.
  int do_print_input = do_print;
  int input_print_depth = print_depth;
  
  if (!format_string){
    fprintf(stderr,"Reading format string from stdin ... \n");
    int c;
    let b = Buffer::create(101);
    while ( (c = fgetc(stdin)) != EOF)
      Buffer::add_char(b, c);
    format_string = Buffer::contents(b);
  }

  let $(trees, valid, valid_prefix) = 
  (backend == 0) ? ({
    let dfa_obj = &CYC_TG_DFA_NS::dfa_obj;
    EarleyAnyBackend::parse(dfa_obj,format_string);
  }) : ({
    let dfa_rep = EarleyFsmBackend::init_dfa();
    EarleyFsmBackend::parse(dfa_rep,format_string);
  });
  
  if (!trees) {
    fprintf(stderr,"Parse failed. Valid prefix: %d\n", valid_prefix);
    return 1;
  }
  
  fprintf(stderr,"done -- is valid string :%d; is valid prefix: %d\n", valid,
      valid_prefix);
  
  if (trees->tl) {
    fprintf(stderr,"Ambiguous parse. Choosing first derivation.\n");
  }

  if (do_print){
    EarleyParsetree::print_tree(trees->hd->f0,print_depth);
    printf("\n");
  }

  // "tree" encodes top-level regexp, but we want to crawl starting from symbol
  // with regexp.
  // TODO: generate function that crawls the top-level regexp.
  let child_tree = trees->hd->f0->children[0];
  let rule_pat = TGFUN(child_tree, format_string);
  fprintf(stderr,"Parsed pattern %s.\n",pat2string(rule_pat));

  // slurp in all of input.
  FILE *f = fopen(input_file,"r");
  if (!f) {
    fprintf(stderr, "Failed to open input file %s.\n", input_file);
    return 1;
  }
  int c;
  let b = Buffer::create(101);
  while ( (c = fgetc(f)) != EOF)
    Buffer::add_char(b, c);
  fclose(f);
  let input = Buffer::contents(b);
  fprintf(stderr,"Parsing input.\n");
  
  //  let $(input_trees, input_valid, input_valid_prefix) = 
  //    (grm_backend == 0) ? ({
  //      let gr_edfa = &CYC_GRM_DFA_NS::grm_dfa_obj;
  //      let ext_edfa = ExtAnyDFA::pat2dfa(rule_pat, gr_edfa);
  //      ExtAnyDFA::dfa_dot(ext_edfa);
  //      let edfa_obj = ExtAnyDFA::mk_any_eb(ext_edfa);
  //      EarleyAnyBackend::parse(edfa_obj,input);
  //    }) : ({
  //      fprintf(stderr, "Loading grammar dfa from grammar_dfa.txt.\n");
  //      let gr_edfa = FsmDFA::fsm2grm_edfa("grammar_dfa.txt");
  //      let ext_edfa = ExtDFA::pat2dfa(rule_pat, gr_edfa);
  //      ExtDFA::dfa_dot(ext_edfa);
  //      EarleyExtFsmBackend::parse(ext_edfa,input);
  //    });
    
  let edfa_obj =
  (grm_backend == 0) ? ({
    let gr_edfa = &CYC_GRM_DFA_NS::grm_dfa_obj;
    let ext_edfa = ExtAnyDFA::pat2dfa(rule_pat, gr_edfa);
    ExtAnyDFA::dfa_dot(ext_edfa);
    ExtAnyDFA::mk_any_eb(ext_edfa);
  }) : ({
    fprintf(stderr, "Loading grammar dfa from grammar_dfa.txt.\n");
    let gr_edfa = FsmDFA::fsm2grm_edfa("grammar_dfa.txt");
    let ext_edfa = ExtDFA::pat2dfa(rule_pat, gr_edfa);
    ExtDFA::dfa_dot(ext_edfa);
    ExtDFA::mk_any_eb(ext_edfa);
  });

  let $(input_trees, input_valid, input_valid_prefix) = 
    EarleyAnyBackend::parse(edfa_obj,input);
  
  if (!input_trees) {
    fprintf(stderr,"Parse failed. Valid prefix: %d\n", input_valid_prefix);
    return 1;
  }
  
  fprintf(stderr,"done -- is valid string :%d; is valid prefix: %d\n", input_valid,
      input_valid_prefix);
  
  if (input_trees->tl) {
    fprintf(stderr,"Ambiguous parse. Choosing first derivation.\n");
  }

  if (do_print_input) {
    EarleyParsetree::print_tree(input_trees->hd->f0,input_print_depth);
    printf("\n");
  }
  
  let scan_args = new {for i < num_args : new ((const char ?@zeroterm)NULL)}; 
  crawl_with_pat(rule_pat, input_trees->hd->f0, input, scan_args);
  printf("Scanned args:\n");
  for (int j=0; j < num_args; j++)
    printf("> %s\n",*scan_args[j]);
  
  return 0;
}