#include <stdio.h>
#include <buffer.h>
#include "earley-parsetree.h"
#include "earley-backend.h"

int main(int argc, const char ?`H?argv) {
  fprintf(stderr,"ABNF parsing stdin ... \n");

  int c;
  let b = Buffer::create(101);
  while ( (c = fgetc(stdin)) != EOF)
    Buffer::add_char(b, c);

  let input = Buffer::contents(b);

  int print_depth = 0;
  int do_print = 0;
  int backend;

  int argi = 1;
  
  if (argi < argc){
    if (!strcmp(argv[argi],"-cyc")){
      backend = 0;
      argi++;
    } 
    else if (!strcmp(argv[argi],"-fsm")){
      backend = 1;
      argi++;
    }
    else {
      fprintf(stderr,"Argument %d is not backend. Defaulting to cyclone backend.\n", argi);
      backend = 0;
    }
  }else {
    fprintf(stderr,"Defaulting to cyclone backend.\n");
    backend = 0;
  }
  if (argi < argc){
    if (sscanf(argv[argi],"%d",&print_depth))
      do_print = 1;
    else
      fprintf(stderr,"Argument %d not valid depth: %s.\n",argi, argv[argi]);
  }

  let $(trees, valid, valid_prefix) = 
  (backend == 0) ? ({
    let dfa_rep = EarleyCycBackend::init_dfa();
    EarleyCycBackend::parse(dfa_rep,input);
  }) : ({
    let dfa_rep = EarleyFsmBackend::init_dfa();
    EarleyFsmBackend::parse(dfa_rep,input);
  });
  
  if (trees) {
    fprintf(stderr,"done -- is valid string :%d; is valid prefix: %d\n", valid,
        valid_prefix);
    if (trees->tl) {
      fprintf(stderr,"Ambiguous parse.\n");
    } else {
      if (do_print)
        EarleyParsetree::print_tree(trees->hd->f0,print_depth);
      // "tree" encodes top-level regexp, but we want to crawl starting from symbol
      // with regexp.
    }
  } else
    fprintf(stderr,"Parse failed. Valid prefix: %d\n", valid_prefix);
}