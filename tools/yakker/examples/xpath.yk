XPath    =    Expr.
Expr    =    ExprSingle *("," ExprSingle).
ExprSingle    =    ForExpr
| QuantifiedExpr
| IfExpr
| OrExpr.
ForExpr    =    SimpleForClause "return" ExprSingle.
SimpleForClause    =    "for" "$" VarName "in" ExprSingle *("," "$" VarName "in" ExprSingle).
QuantifiedExpr    =    ("some" | "every") "$" VarName "in" ExprSingle *("," "$" VarName "in" ExprSingle) "satisfies" ExprSingle.
IfExpr    =    "if" "(" Expr ")" "then" ExprSingle "else" ExprSingle.
OrExpr    =    AndExpr *( "or" AndExpr ).
AndExpr    =    ComparisonExpr *( "and" ComparisonExpr ).
ComparisonExpr    =    RangeExpr [ ( ValueComp
                                    | GeneralComp
        | NodeComp) RangeExpr ].
RangeExpr    =    AdditiveExpr [ "to" AdditiveExpr ].
AdditiveExpr    =    MultiplicativeExpr *( ("+" | "-") MultiplicativeExpr ).
MultiplicativeExpr    =    UnionExpr *( ("*" | "div" | "idiv" | "mod") UnionExpr ).
UnionExpr    =    IntersectExceptExpr *( ("union" | "|") IntersectExceptExpr ).
IntersectExceptExpr    =    InstanceofExpr *( ("intersect" | "except") InstanceofExpr ).
InstanceofExpr    =    TreatExpr [ "instance" "of" SequenceType ].
TreatExpr    =    CastableExpr [ "treat" "as" SequenceType ].
CastableExpr    =    CastExpr [ "castable" "as" SingleType ].
CastExpr    =    UnaryExpr [ "cast" "as" SingleType ].
UnaryExpr    =    *("-" | "+") ValueExpr.
ValueExpr    =    PathExpr.
GeneralComp    =    "=" | "!=" | "<" | "<=" | ">" | ">=".
ValueComp    =    "eq" | "ne" | "lt" | "le" | "gt" | "ge".
NodeComp    =    "is" | "<<" | ">>".
PathExpr    =    ("/" [RelativePathExpr])
| ("//" RelativePathExpr)
| RelativePathExpr. ; xgs: leading-lone-slash
RelativePathExpr    =    StepExpr *(("/" | "//") StepExpr).
StepExpr    =    FilterExpr | AxisStep.
AxisStep    =    (ReverseStep | ForwardStep) PredicateList.
ForwardStep    =    (ForwardAxis NodeTest) | AbbrevForwardStep.
ForwardAxis    =    ("child" "::")
| ("descendant" "::")
| ("attribute" "::")
| ("self" "::")
| ("descendant-or-self" "::")
| ("following-sibling" "::")
| ("following" "::")
| ("namespace" "::").
AbbrevForwardStep    =    ["@"] NodeTest.
ReverseStep    =    (ReverseAxis NodeTest) | AbbrevReverseStep.
ReverseAxis    =    ("parent" "::")
| ("ancestor" "::")
| ("preceding-sibling" "::")
| ("preceding" "::")
| ("ancestor-or-self" "::").
AbbrevReverseStep    =    "..".
NodeTest    =    KindTest | NameTest.
NameTest    =    QName | Wildcard.
Wildcard    =    "*"
| (NCName ":" "*")
| ("*" ":" NCName). ; ws: explicit
FilterExpr    =    PrimaryExpr PredicateList.
PredicateList    =  *Predicate.
Predicate    =    "[" Expr "]".
PrimaryExpr    =    Literal | VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall.
Literal    =    NumericLiteral | StringLiteral.
NumericLiteral    =    IntegerLiteral | DecimalLiteral | DoubleLiteral.
VarRef    =    "$" VarName.
VarName    =    QName.
ParenthesizedExpr    =    "(" [Expr] ")".
ContextItemExpr    =    ".".
FunctionCall    =    QName "(" [ExprSingle *("," ExprSingle)] ")". ; xgs: reserved-function-names 
;/* gn: parens */
SingleType    =    AtomicType ["?"].
SequenceType    =    ("empty-sequence" "(" ")")
| (ItemType [OccurrenceIndicator]).
OccurrenceIndicator    =    "?" | "*" | "+" .; /* xgs: occurrence-indicators */
ItemType    =    KindTest | ("item" "(" ")") | AtomicType.
AtomicType    =    QName.
KindTest    =    DocumentTest
| ElementTest
| AttributeTest
| SchemaElementTest
| SchemaAttributeTest
| PITest
| CommentTest
| TextTest
| AnyKindTest.
AnyKindTest    =    "node" "(" ")".
DocumentTest    =    "document-node" "(" [ElementTest | SchemaElementTest] ")".
TextTest    =    "text" "(" ")".
CommentTest    =    "comment" "(" ")".
PITest    =    "processing-instruction" "(" [NCName | StringLiteral] ")".
AttributeTest    =    "attribute" "(" [AttribNameOrWildcard ["," TypeName]] ")".
AttribNameOrWildcard    =    AttributeName | "*".
SchemaAttributeTest    =    "schema-attribute" "(" AttributeDeclaration ")".
AttributeDeclaration    =    AttributeName.
ElementTest    =    "element" "(" [ElementNameOrWildcard ["," TypeName ["?"]]] ")".
ElementNameOrWildcard    =    ElementName | "*".
SchemaElementTest    =    "schema-element" "(" ElementDeclaration ")".
ElementDeclaration    =    ElementName.
AttributeName    =    QName.
ElementName    =    QName.
TypeName    =    QName.

    IntegerLiteral    =    Digits.
    DecimalLiteral    =    ("." Digits) | (Digits "." *DIGIT). ;/* ws: explicit */
    DoubleLiteral    =    (("." Digits) | (Digits ["." *DIGIT])) ("e" | "E") ["+" | "-"] Digits. ;/* ws: explicit */
    StringLiteral    =    *(DQUOTE (EscapeQuot | (Char - DQUOTE) ) DQUOTE) 
                     | ("'" *(EscapeApos | (Char - "'")) "'"). ;/* ws: explicit */
    EscapeQuot    =    DQUOTE DQUOTE.
    EscapeApos    =    "''".

    Comment    =    "(:" *(CommentContents | Comment) ":)". ; /* ws: explicit *//* gn: comments */
;    QName    =    [http://www.w3.org/TR/REC-xml-names/#NT-QName]. ; /* xgs: xml-version */
;    NCName    =    [http://www.w3.org/TR/REC-xml-names/#NT-NCName]. ; /* xgs: xml-version */
;    Char    =    [http://www.w3.org/TR/REC-xml#NT-Char]. ; /* xgs: xml-version */
; "Fixed" version:
Char = CHAR.

    Digits    =    1*DIGIT.
; ORIGINAL VERSION:    CommentContents    =    (Char+ - (Char* ('(:' | ':)') Char*)).
; "Fixed" version. Any time the parse hits a comment it will spawn a never-ending branch for CommentContents. So
; Also, its incorrect in that it will allow nested comments.
CommentContents    =    1*Char.


; From "Extensible Markup Language (XML) 1.0 (Fourth Edition)"
; ORIGINAL: NameChar	   =  Letter | Digit | '.' | '-' | '_' | ':' | CombiningChar | Extender
; "Fixed" version:
NameChar	   =  Letter | Digit | "." | "-" | "_" | ":".

; From "Namespaces in XML 1.0 (Second Edition)"
 NCName	   = NCNameStartChar *NCNameChar. ;	/* An XML Name, minus the ":" */
; ORGINAL: NCNameChar	   = (NameChar - ":").
; Fixed version:
 NCNameChar	   =  Letter | Digit | "." | "-" | "_".
 NCNameStartChar	   = Letter | "_".
 QName	   = PrefixedName | UnprefixedName.
 PrefixedName	   =  Prefix ":" LocalPart.
 UnprefixedName	   =  LocalPart.
 Prefix	   = NCName.
 LocalPart	   = NCName.

; Added by hand.
 Digit = %d48-57.
; Based on http://www.w3.org/TR/REC-xml#NT-BaseChar
 Letter = %d65-90 | %d97-120 | %d192-214 | %d216-246 | %d248-255.
