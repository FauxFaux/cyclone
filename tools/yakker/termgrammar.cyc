/* termgrammar.cyc
 * Library for specifying and printing parse trees for an ABNF grammar.
 */

/* Copyright (C) 2005 Greg Morrisett, AT&T.
   This file is part of the Cyclone project.

   Cyclone is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   Cyclone is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Cyclone; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

/*
 Sometimes want to format a rule so that it has a tag
   f(...)
 Call this a *term*.
 Sometimes, with commas only, as in the ... above.
 Sometimes we format a rule, sometimes a list of rules.

     +-------------+-----------------------------------+
     |             |             OUTPUT                |
     |  INPUT      |  tagged         sequence of args  |
     |-------------+-----------------------------------+
     |  rule       |  rule2term      rule2terms        |
     |  rule list  |  rules2term     rules2terms       |
     +-------------+-----------------------------------+
 */

#include "bnf.h"
#include "pr.h"
#include "analyze.h"
#include "termgrammar.h"
#include <list.h>
#include <buffer.h>
#include <string.h>
using List;

static
cs_t termchars() {
  return string2cs("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_=~&@");
}

/* Return a possible tag from a sequence, if any */
static
Rule_t seqtag(rule_t r) {
  static cs_opt_t tc = NULL;
  if (!tc) tc = termchars();
  switch (r->r) {
  case &Lit(x):
    let cs = string2cs(x);
    cs_difference(cs,tc);
    if (is_cs_empty(cs))
      // x includes no character outside the legal term characters
      return r;
    else return NULL;
  case &Seq(r1,r2):
    let tag_opt = seqtag(r1);
    return (tag_opt)?tag_opt:seqtag(r2);
  default:
    return NULL;
  }
}

/* If a rule expands to a unique string (the rule has arity 0),
   return that string, else return NULL. */
static
const char ?rule2string(rule_t r0) {
  let b = Buffer::create(23);
  let rs = list(r0);
  while (rs) {
    let r = rs->hd;
    switch (r->r) {
    case &Symb(n,_):
      if (arity_rule(r) != 0) return NULL;
      /* FIX: need to look up rule! */
      internal_err("rule2string needs to look up rule for symbol %s\n",n);
      Buffer::add_string(b,n);
      rs = rs->tl;
      break;
    case &Lit(x):
      Buffer::add_string(b,x);
      rs = rs->tl;
      break;
    case &Seq(r2,r3): /* Flatten r2 and r3 into the rule list */
      rs = new List(r2,new List(r3,rs->tl));
      break;

    case &Star(m,&Num(n),r2):
      if (m==n) {
        let s = rule2string(r2);
        for (let i = 0; i < m; i++) Buffer::add_string(b,s); 
        break;
      }
      else return NULL;
    case &Rcount(_,_):
    case &Star(_,_,_):
    case &Hash(_,_,_):
    case &Opt(_):
    case &Alt(_,_):
    case &CharRange(_,_):
      return NULL;
    case &Prose(x): /* Should have been handled elsewhere */
      internal_err("Unexpected Prose(%s) in rule2string\n",x);
      return "<error>";
    case &Minus(_,_): /* Should have been handled elsewhere */
      internal_err("Unexpected Minus in rule2string\n");
      return "<error>";
    }
  }
  return Buffer::contents(b);
}
static rule_t alt2term(rule_t r);
static Rule_t seq2term(rule_t r0);

static cs_opt_t avoid_cs;
static int avoid(cs_t cs) {
  let x = string2cs("()[], \t\n\r");
  cs_intersect(x,cs);
  return !is_cs_empty(x);
}

static
rule_t rule2term(rule_t r) {
  let res = NULL;
  switch (r->r) {
  case &Rcount(n,r2):
    // FIX: what to do about n???
    return SEQ(LIT("["),
               STAR(0,new Infinity,rule2term(r2)),
               LIT("]"));
  case &Star(m,N,r2):
    if (is_cs(r2)) {
      let cs = rule2cs(r2);
      if (!avoid(cs))
        return STAR(m,N,cs2rule(cs));
    }
    fallthru(m,N,r2);
  case &Hash(m,N,r2):
    return SEQ(LIT("["),
               HASH(m,N,rule2term(r2)),
               LIT("]"));
  case &Opt(r2):
    return SEQ(LIT("["),
               OPT(rule2term(r2)),
               LIT("]"));
  case &Alt(_,_):
    return alt2term(r);
  case &Symb(_,_):
    return r;
  case &CharRange(_,_):
    return r;
  case &Lit(_):
    return r;

  case &Seq(_,_):
    let r2 = seq2term(r);
    if (r2) return r2;
    else {
      internal_err("rule2term: could not convert rule:\n");
      pr_rule(stderr,r);
      fprintf(stderr,"\n");
      return LIT("[]");
    }

    /* Error cases */
  case &Prose(x):
    internal_err("Unexpected Prose(%s) in rule2term\n",x);
    exit(1);
  case &Minus(_,_):
    internal_err("Unexpected Minus in rule2term\n");
    exit(1);
  }
}

/* Is a rule a necessary argument? */
static
int is_arg(rule_t r) {
  switch (r->r) {
  case &Symb(_,_):
  case &Star(_,_,_):
  case &CharRange(_,_):
    return (arity_rule(r) > 0);
  case &Alt(_,_):
  case &Opt(_):
  case &Rcount(_,_):
  case &Hash(_,_,_):
    return 1;
  case &Seq(_,_):
  case &Lit(_):
  case &Prose(_):
  case &Minus(_,_):
    return 0;
  }
}

static
list_t<rule_t> rule2args(rule_t r) {
  return filter(is_arg,seq2rules(r));
}

/* Separate a rule list with commas */
static
rule_t with_commas(list_t<rule_t> rs) {
  if (rs == NULL) return LIT("");
  let res = rs->hd;
  rs = rs->tl;
  for (; rs; rs = rs->tl)
    res = SEQ(res,LIT(","),rs->hd);
  return res;
}

static
rule_t alt2term(rule_t r) {
  switch (r->r) {
  case &Alt(r1,r2):
    return ALT(alt2term(r1),alt2term(r2));
  default:
    let tag = seqtag(r);
    if (!tag) {
      internal_err("alt2term: could not find tag:\n");
      pr_rule(stderr,r);
      fprintf(stderr,"\n");
      return r;
    }
    let args = rule2args(r);
    if (args == NULL)
      return tag;
    else
      return SEQ(tag,LIT("("),with_commas(map(rule2term,args)),LIT(")"));
  }
}

static
int is_term(rule_t r) {
  if (is_cs(r)) return 1;
  switch (r->r) {
  case &Symb(_,_): return 1;
  default:
    break;
  }
  return !arity_rule(r); // An arity-0 rule is a term (a string literal)
}

static
int non_zero_arity(rule_t r) {
  /* Can't pass arity_rule to exists because it returns unsigned int instead
     of int.  Have to do this annoying cast. */
  return (arity_rule(r) != 0);
}

static
Rule_t seq2term(rule_t r0) {
  let rs = seq2rules(r0);
  let args = filter(is_arg,rs);
  let len = length(args);

  if (len == 0) {
    internal_err("seq2term: no args in sequence:\n");
    pr_rule(stderr,r0);
    fprintf(stderr,"\n");
    return LIT("[]");
  }

  if (len == 1) {
    return rule2term(args->hd);
  }

  /* Look for an Alt which could serve as a tag */
  list_t<rule_t,`H> revargs = NULL;
  for (let x = args; x; x = x->tl) {
    let r = x->hd;
    switch (r->r) {
    case &Alt(_,_):
      let alts = alt2rules(r);
      if (exists(non_zero_arity,alts)) {
        revargs = new List(r,revargs);
        continue;
      }
      else {
        /* All alternatives have zero arity, so r can be used as a tag.
           Gather up all the rest of the args and return. */
        x = x->tl; // remove r from the list of args
        for (; revargs; revargs = revargs->tl) // put back the already-examined args
          x = new List(revargs->hd,x);
        return SEQ(r,LIT("("),with_commas(map(rule2term,x)),LIT(")"));
      }
    default:
      revargs = new List(r,revargs);
      break;
    }
  }

 litsearch:
  /* No Alt could be a tag, look for a Lit instead */
  for (; rs; rs = rs->tl) {
    let r = rs->hd;
    switch (r->r) {
    case &Lit(_):
      return SEQ(r,LIT("("),with_commas(map(rule2term,args)),LIT(")"));
    default:
      break;
    }
  }

  /* Nothing worked */
  return NULL;
}

grammar_t grammar2termgrammar(grammar_t ds) {
  init_arityt(ds);
  let res = NULL;
  for (; ds; ds = ds->tl) {
    let &$(n,r,a) = ds->hd;
    let r2;
    let args = rule2args(r);
    if (args == NULL)
      r2 = LIT(n);
    else
      r2 = SEQ(LIT(n),LIT("("),with_commas(map(rule2term,args)),LIT(")"));
    res = new List(new $(n,r2,a),res);
    //    res = new List(new $(n,r2t(r),a),res);
  }
  res = imp_rev(res);
  return res;
}
