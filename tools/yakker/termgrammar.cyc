/* termgrammar.cyc
 * Library for specifying and printing parse trees for an ABNF grammar.
 */

/* Copyright (C) 2005 Greg Morrisett, AT&T.
   This file is part of the Cyclone project.

   Cyclone is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   Cyclone is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Cyclone; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include <core.h>
#include <list.h>
#include <buffer.h>
#include <string.h>
#include <stdio.h>
#include <hashtable.h>

#include "bnf.h"
#include "cs.h"
#include "pr.h"
#include "analyze.h"
#include "termgrammar.h"
#include "pads.h"

using List;

int include_anon_binder = 1;
int include_named_binder = 1;

/* Is a rule a necessary argument? */
static
int is_arg(rule_t r) {
  switch (r->r) {
  case &Symb(_,_):
  case &Star(_,_,_):
  case &CharRange(_,_):
    return (arity_rule(r) > 0);
  case &Alt(_,_):
  case &Opt(_):
  case &Rcount(_,_):
  case &Hash(_,_,_):
    return 1;
  case &Seq(_,_):
  case &Lit(_):
  case &Prose(_):
  case &Minus(_,_):
    return 0;
  }
}

////
// Functions for escaping special characters in grammar.
////

static const char ?default_esc_chars = "\\() %";
static char esc_char = '\\'; // character used to escape characters (including itself). Defaults to \.
static cs_opt_t cs_esc_chars = NULL;

static void 
check_esc_chars(){
  if (!cs_esc_chars) {
    internal_err("Warning: no escape characters found. Using default set: %s\n", default_esc_chars);
    cs_esc_chars = string2cs(default_esc_chars);
  }
}

static void 
init_esc_chars(const char ?esc_chars){
  cs_esc_chars = string2cs(esc_chars);
  esc_char = esc_chars[0];
}

rule_t escape_cs_rule(rule_t r){
  check_esc_chars();
  let cs_ec = (cs_t)cs_esc_chars;

  let cs_r = rule2cs(r);
  let cs_i = cs_dup(cs_r);
  cs_intersect(cs_i,cs_ec);
  if (is_cs_empty(cs_i))
    // r includes no character that needs escaping.
    return r;
  else {
    let r_i = cs2rule(cs_i);
    
    // Remove the escaped chars from the original cs.
    let cs_diff = cs_dup(cs_r);
    cs_difference(cs_diff,cs_ec);

    if (is_cs_empty(cs_diff))
      return SEQ_r(r,LIT("%"), r_i);
    else{      
      let r_diff = cs2rule(cs_diff);
      return ALT_r(r,r_diff,SEQ(LIT("%"), r_i));
    }
  }
}

const char ?escape_lit(const char ?`H s){
  check_esc_chars();
  let cs_ec = (cs_t)cs_esc_chars;

  let n = numelts(s) - 1; // substract one for \0.
  // at most, we'll need 2n + 1 chars for the escaped string.
  char ?@zeroterm @notnull s_esc = calloc((2 * n + 1), sizeof(char)); 
  int i,j;
  for (i = 0, j = 0; i < n; i++, j++){
    if (cs_member(cs_ec,s[i])){
      s_esc[j++] = '%';
    }
    s_esc[j] = s[i];
  }
  s_esc[j] = s[n];
    
  return s_esc;
}
				     
// Escape literals and character sets.
static
rule_t escape_rule(rule_t r) {
  let res = NULL;
  switch (r->r) {
  case &Rcount(n,r2):
    return RCOUNT_r(r,n,escape_rule(r2));
  case &Star(m,N,r2):
//     if (is_cs(r2)) {
//       let escaped = escape_cs_rule_v3(r2);
//       return STAR(m,N, escaped);
//     }
    return STAR_r(r,m,N, escape_rule(r2));
  case &Hash(m,N,r2):
    return HASH_r(r,m,N, escape_rule(r2));
  case &Opt(r2):
    return OPT_r(r,escape_rule(r2) );
  case &Alt(r2,r3):
    return ALT_r(r,escape_rule(r2),escape_rule(r3));
  case &Symb(_,_):
    return r;

  case &CharRange(_,_):
    return escape_cs_rule(r);
  case &Lit(s):
    return LIT_r(r,escape_lit(s));

  case &Seq(r2,r3):
    return SEQ_r(r,escape_rule(r2),escape_rule(r3));

    /* Error cases */
  case &Prose(x):
    internal_err("Unexpected Prose(%s) in escape_rule\n",x);
    exit(1);
  case &Minus(_,_):
    internal_err("Unexpected Minus in escape_rule\n");
    exit(1);
  }
}

grammar_t escape_grammar(grammar_t g, const char? esc_chars) {
  grammar_t res = NULL,ds = g;

  if (esc_chars) 
    init_esc_chars(esc_chars);
  else
    init_esc_chars(default_esc_chars);

  for (; ds; ds = ds->tl) {
    let &$(n,r,a) = ds->hd;
    let r_esc = escape_rule(r);
    res = new List(new $(n, r_esc, a), res);
  }

  res = imp_rev(res);
  return res;
}

//////////////////////////
// Functions for adding bnf/ast generation to rules.
/////

static
const char ?lit2pat(const char ?`H x){
  return aprintf("new LitPat(\"%s\")",string_escape(x));
}

// Used for char-ranges/charsets to capture the particular char used
// in the format string. 
static
rule_t mk_cs_bnfgen (rule_t r){
  let fn = fresh_name();
  // copy r and set a new semantic action and a name.
  return new arule(aprintf("new CharPat(%s[0])",fn),
		   r->p, fn, r->css, r->r);
}

// Print the symbol, instead of the rule. r should not be converted.
// static
// rule_t mk_symb_bnfgen (const char ?`H s, rule_t r){
//   // copy r and set a new semantic action.
//   return new arule(aprintf("return new SymbPat(\"%s\");",s),
// 		   r->p, r->v, r->css, r->r);
// }

// Mapping from (nullary) symbols to their BNF-building semantic actions. 
static struct Hashtable::Table<const char ?@, const char ?@, `H> *symb_semacts;

static
const char ?get_bnfgen(rule_t r){
  switch (r->r) {
  case &Seq(r1,r2):
    let a1 = get_bnfgen(r1);
    let a2 = get_bnfgen(r2);
    return aprintf("new SeqPat(%s,%s)",a1,a2);
  case &Symb(x,_):
    // lookup symbol in table.
    let a = Hashtable::lookup_opt(symb_semacts,new x);
    if (!a){
      internal_err("Undefined symbol: %s\n",x);
      return "ERR";
    } 
    return **a;
  case &Lit(s):
    return lit2pat(s);
  case &CharRange(min,max):
    if (min != max)
      fallthru;
    return aprintf("new CharPat(%u)",min);
  default:
    internal_err("Unexpected rule in get_bnfgen:%s\n",pr_rule2string(r));
    return "ERR";
  }
}

static $(rule_t,const char ?) @add_bnfgen0(rule_t r);

// // returns list of bound bnf-variables, bnf'ed rule and expression for
// // constructing the representation of the rule.
// static
// $(List::list_t<str_t>, rule_t,const char ?) @depseq_add_bnfgen(rule_t r){
//   switch (r->r) {
//   case &Seq(r1,r2):
//     let &$(vars1,r1,a1) = depseq_add_bnfgen(r1);
//     let &$(vars2,r2,a2) = depseq_add_bnfgen(r2);
//     let a = aprintf("new SeqPat(%s,%s)",a1,a2);
//     let r_ab = SEQ_r(r,r1,r2); 
//     return new $(List::append(vars1,vars2),r_ab,a);
//   case &CharRange(min,max):
//     let r_s = mk_cs_bnfgen(r);
//     // "steal" the action from r_s.
//     let a = r_s->a;
//     r_s->a = NULL;
//     return new $(List::list(new r_s->v), r_s, a);
//   case &Symb(_,_):
//     let fn = fresh_name();
//     // copy r and set a new name.
//     let new_r = new arule(r->a, r->p, fn, r->css, r->r);
//     if (r->v){
//       // if r is bound, then rebind by converting ast value bound to
//       // new name (fn) to a string and binding it to the original
//       // name.
//       let conv_r = new arule (NULL,NULL,r->v,NULL,new Symb("ast2string",fn));
//       new_r = arule_inj(new Seq(new_r,conv_r));
//     }
//     return new $(List::list(new fn), new_r, fn);
//   case &Lit(s):
//     return new $(NULL, r, lit2pat(s));
//   default:
//     internal_err("Unexpected rule in depseq_add_bnfgen:%s\n",pr_rule2string(r));
//     return new $(NULL, r, "ERR");
//   }
// }

static
$(rule_t, const char ?) @seq_add_bnfgen(rule_t r){
  let res;
  let seq_a;
  let rules = depseq2rules(r);
  let r_elt = rules->hd;
  // rules is defined to be non-null, so we assign it to nullable variable.
  _* rs = rules->tl;

  // Process first element to set initial value for res (and defs).
  
  if (r_elt->v){ 
    // if r is bound, then rebind by converting ast value bound to
    // new name (fn) to a string and binding it to the original
    // name.
    // If the bound AST cannot be converted to a string, then
    // ast2string will raise an exception.

    // Need to make r_elt non-dependent (NULL-ify r_elt->v) before
    // processing it, or will end up in infinite-loop.
    let v = r_elt->v;
    r_elt->v = NULL; 
    let &$(r_ab,a) = add_bnfgen0(r_elt);    
    r_elt->v = v; //restore it now.

    let conv_r = new arule (NULL,NULL,r_elt->v,NULL,new Symb("ast2string",a));
    res = arule_inj(new Seq(r_ab,conv_r));
    seq_a = a;
  } else {
    let &$(r_ab,a) = add_bnfgen0(r_elt);
    res = r_ab;
    seq_a = a;
  }

  // Process remaining elements
  while (rs){
    let r_elt = rs->hd;
    rs = rs->tl;

    if (r_elt->v){ 
      let &$(r_ab,a) = add_bnfgen0(r_elt);
      let conv_r = new arule (NULL,NULL,r_elt->v,NULL,new Symb("ast2string",a));
      res = SEQ(res,r_ab,conv_r);
      seq_a = aprintf("new SeqPat(%s,%s)",seq_a,a);
    } else {
      let &$(r_ab,a) = add_bnfgen0(r_elt);
      res = arule_inj(new Seq(res,r_ab));
      seq_a = aprintf("new SeqPat(%s,%s)",seq_a,a);
    }
  }

  return new $(res,seq_a);
}

static
rule_t alt_add_bnfgen(const char? return_var, rule_t r){
  switch (r->r) {
  case &Alt(r1,r2):
    let r_ab = ALT_r(r,
		     alt_add_bnfgen(return_var, r1),
		     alt_add_bnfgen(return_var, r2));
    return r_ab;

  default:
    let &$(r_ab,a) = add_bnfgen0(r);
    r_ab->a = aprintf("%s = %s;",return_var, a);
    return r_ab;
  }
}


/*
static
rule_t alt_add_bnfgen(rule_t r){
  switch (r->r) {
  case &Alt(r1,r2):
    let r_ab = ALT_r(r,
		     alt_add_bnfgen(r1),
		     alt_add_bnfgen(r2));
    return r_ab;

  case &CharRange(min,max):
    let r_s = mk_cs_bnfgen(r);
    // convert r_s->a to a return statement.
    r_s->a = aprintf("return %s;",r_s->a);
    return r_s;

  case &Symb(_,_):
    let fn = fresh_name();
    // copy r and set a new name.
    return new arule(aprintf("return %s;",fn), r->p, fn, r->css, r->r);

  case &Lit(s):
    // copy r and set a new sem. action.
    return new arule(aprintf("return %s;",lit2pat(s)), r->p, r->v, r->css, r->r);

  default:
    internal_err("Unexpected rule in alt_add_bnfgen:%s\n",pr_rule2string(r));
    return r;
  }
}
*/

/*
static
rule_t add_bnfgen(rule_t r){
  switch (r->r) {
  case &Seq(r1,r2):
    let &$(r1_ab,a1) = add_bnfgen0(r1);
//     if (r1->v){ // Dependent sequence.
//       let &$(bound_vars, r2_ab, a2) = depseq_add_bnfgen(r2);
//       let fun_args = str_sepstr(bound_vars,new ',');
//       let fun_name = fresh_suffix("hoas_fun");
//       let fun_decl = aprintf("rule_pat_t %s(%s){return %s;}",fun_name, fun_args, a2);
//       let a = aprintf("return new DepSeqPat(%s,%s<>);",a1,fun_name);
//       let r_ab = SEQ_r(r,r1_ab,r2_ab); 
//       r_ab->a = a;
//       return $(List::list(new fun_decl),r_ab);
//     }
    let &$(r2_ab,a2) = add_bnfgen0(r2);
    let a = aprintf("return new SeqPat(%s,%s);",a1,a2);
    let r_ab = SEQ_r(r,r1_ab,r2_ab); 
    r_ab->a = a;
    return r_ab;

  case &Opt(r1):
    let fn = fresh_name();
    let &$(r1_ab,a1) = add_bnfgen0(r1);
    r1_ab->a = aprintf("%s = %s;",fn,a1);
    let r_ab = OPT_r(r, r1_ab);
    r_ab->a = aprintf("return %s ? (datatype Rule_pattern @)%s : new LitPat(\"\");",fn,fn);
    r_ab->v = strconcat("$",fn);
    return r_ab;

  case &Alt(r1,r2):
    let r_ab = ALT_r(r,
		     alt_add_bnfgen(r1),
		     alt_add_bnfgen(r2));
    return r_ab;

  case &Rcount(n,r1):
    let fn = fresh_name();
    let &$(r1_ab,a1) = add_bnfgen0(r1);
    r1_ab->a = aprintf("%s = new List::List(%s,%s);",fn,a1,fn);
    let r_ab = RCOUNT_r(r,n,r1_ab);
    r_ab->a = aprintf("return pats2seq(List::imp_rev(%s));",fn);
    r_ab->v = strconcat("$",fn);
    return r_ab;
//     // Use predicates to put these branches together. The question is
//     // how to know that n depends on x (for some x).
//     let &$(r1_ab,a1) = add_bnfgen0(r1);
//     r1_ab->a = aprintf("return RepeatPat((%s),%s);",n,a1);
//     return r1_ab;

  case &Star(m,N,r1):
    let fn = fresh_name();
    let &$(r1_ab,a1) = add_bnfgen0(r1);
    r1_ab->a = aprintf("%s = new List::List(%s,%s);",fn,a1,fn);
    let r_ab = STAR_r(r,m,N,r1_ab);
    r_ab->a = aprintf("return pats2seq(List::imp_rev(%s));",fn);
    r_ab->v = strconcat("$",fn);
    return r_ab;

  case &CharRange(min,max):
    let r_s = mk_cs_bnfgen(r);
    // convert r_s->a to a return statement.
    r_s->a = aprintf("return %s;",r_s->a);
    return r_s;

  case &Symb(_,_):
    let fn = fresh_name();
    // copy r and set a new name.
    return new arule(aprintf("return %s;",fn), r->p, fn, r->css, r->r);

  case &Lit(s):
    // copy r and set a new sem. action.
    return new arule(aprintf("return %s;",lit2pat(s)), r->p, r->v, r->css, r->r);

  default:
    internal_err("Unexpected rule in add_bnfgen:%s\n",pr_rule2string(r));
    return r;
  }
}
*/


// invariant: For return value r', r'->a is not set, r'->v might be set, r'->p == r->p.
static
$(rule_t,const char ?) @add_bnfgen0(rule_t r){
  switch (r->r) {
  case &Seq(r1,r2):
    return seq_add_bnfgen(r);

  case &Opt(r1):
    let fn = fresh_name();

    let &$(r1_ab,a1) = add_bnfgen0(r1);
    r1_ab->a = aprintf("%s = %s;",fn,a1);

    let r_ab = OPT_r(r, r1_ab);
    let a = aprintf("(%s ? (_ @)%s : (_ @) (new LitPat(\"\")))",fn,fn);
    r_ab->v = strconcat("$",fn);

    return new $(r_ab,a);

  case &Alt(r1,r2):
    // Add a $$ variable to the alt, then pass that variable name to alt_add_bnfgen.
    // Inside, it will replace "return e;" with "%s = e;".
    let fn = fresh_name();
    let r_ab = ALT_r(r,
		     alt_add_bnfgen(fn, r1),
		     alt_add_bnfgen(fn, r2));
    r_ab->v = strconcat("$",fn);

    return new $(r_ab,fn);

  case &Rcount(n,r1):
    let fn = fresh_name();

    let &$(r1_ab,a1) = add_bnfgen0(r1);
    r1_ab->a = aprintf("%s = new List::List(%s,%s);",fn,a1,fn);

    let r_ab = RCOUNT_r(r,n,r1_ab);
    let a = aprintf("pats2seq(List::imp_rev(%s))",fn);
    r_ab->v = strconcat("$",fn);

    return new $(r_ab,a);

  case &Star(m,N,r1):
    let fn = fresh_name();

    let &$(r1_ab,a1) = add_bnfgen0(r1);
    r1_ab->a = aprintf("%s = new List::List(%s,%s);",fn,a1,fn);

    let r_ab = STAR_r(r,m,N,r1_ab);
    let a = aprintf("pats2seq(List::imp_rev(%s))",fn);
    r_ab->v = strconcat("$",fn);

    return new $(r_ab,a);

  case &CharRange(min,max):
    let r_s = mk_cs_bnfgen(r);
    let a = r_s->a;
    r_s->a = NULL;
    return new $(r_s,a);

  case &Symb(_,_):
    let fn = fresh_name();
    // copy r and set a new name.
    let r_s = new arule(r->a, r->p, fn, r->css, r->r);
    return new $(r_s,fn);

  case &Lit(s):
    return new $(r, lit2pat(s));

  default:
    internal_err("Unexpected rule in add_bnfgen0:%s\n",pr_rule2string(r));
    return new $(r,"ERR");
  }
}

rule_t add_bnfgen(rule_t r){
  let &$(r_ab,a) = add_bnfgen0(r);
  r_ab->a = aprintf("return %s;",a);
  return r_ab;
}

/////////////////////////////////////////////
// Functions for deriving a BNF with binders 
// and pattern-matching support from a BNF.
////////////////////////////////

/*
rule_t mk_pattern_match(const char ?`H s){
  let r_bar = LIT("|");
  r_bar->a = "fprintf(stdout,\"\\n| \\\"\\\"{set_branch(%d);}\",branch_id++);";

  let r_first = SYMB(s);
  r_first->a = "fprintf(stdout,\" \\\"\\\"{set_branch(%d);}\",branch_id++);";
  let r = SYMB(s);
  return SEQ(r_first, STAR(0,new Infinity,SEQ(r_bar, r))); 
}

grammar_t grammar2bindgrammar(grammar_t g) {
  init_arityt(g);

  grammar_t res = NULL,ds = g;
  for (; ds; ds = ds->tl) {
    let &$(n,r,a) = ds->hd;
    if (is_arg(SYMB(n))){
//       let n_o = strconcat(n,"_o");
      let n_pm = strconcat(n,"_pm");
      let r_ab = add_binders(r);
      let r_pm = mk_pattern_match(n);
      res = new List(new $(n_pm,r_pm,a),
		     new List(new $(n, r_ab, a), res));
    } else {
      let r_sp = mk_symb_print(n,r);
      res = new List(new $(n,r_sp,a), res);
    }      
  }

  res = imp_rev(res);
  return res;
}

*/
struct Attr mk_bnf_attr(struct Attr a){
  return Attr{.ws=a.ws,.re=a.re,.paramtype=a.paramtype,
      .rettype="rule_pat_t"};
}


grammar_t grammar2bnfgen_grammar(grammar_t<`H> g) {
  grammar_t res = NULL,ds = g;

  for (; ds; ds = ds->tl) {
    let &$(n,r,a) = ds->hd;
    let r_bg = add_bnfgen(r);
    res = new List(new $(n,r_bg,mk_bnf_attr(a)), res);
  }

  res = imp_rev(res);
  return res;
}

// Does the symbol s define a regexp?
static bool is_regexp(const char ?s){
  // simple test: does the name start with an upper-case letter?
   return 'A' <= s[0] && s[0] <= 'Z';
}

static
$(rule_t,$(const char ?,rule_t)*) mk_bnfgen_binder (const char ?`H symb_name){
  // FIX: make sure this name is unique w.r.t. input grammar.
  let r_anon_binder = SYMB("anon-tg-binder"); // generic binder
  let r_named_binder = SEQ(LIT("%"), LIT(symb_name)); // binder specific to this symbol.
  let a = aprintf("return new BinderPat(\"%s\");", symb_name);
  r_anon_binder->a = a;
  r_named_binder->a = a;

  let binder_nonterm_name = aprintf("%s-tg-binder",symb_name);
  let r_binder_nonterm = SYMB(binder_nonterm_name); 
  r_binder_nonterm->v = fresh_name();
  r_binder_nonterm->a = aprintf("return %s;",r_binder_nonterm->v);

  return (include_anon_binder && include_named_binder) ? 
       $(ALT(r_anon_binder, r_binder_nonterm), new $(binder_nonterm_name,r_named_binder)) 
     : (include_anon_binder ? $(r_anon_binder,NULL) 
                            : $(r_binder_nonterm,new $(binder_nonterm_name,r_named_binder)));
}

grammar_t grammar2bindgrammar(grammar_t<`H> g) {
  if (!(include_anon_binder || include_named_binder)){
    internal_err("Bindgrammar called but both named and anonymous binders are disabled.\n");
    return g;
  }
  
  reset_globals();
  init_arityt(g);

  attr_t b_attr = Attr{.ws=0,.re=0,.paramtype=NULL,.rettype="rule_pat_t"};

  grammar_t res = NULL,ds = g;
  for (; ds; ds = ds->tl) {
    let &$(n,r,a) = ds->hd;

    if (arity_rule(SYMB(n)) && !is_regexp(n)){
      let n_orig = aprintf("%s-tg-orig",n);
      let r_orig = SYMB(n_orig);
      r_orig->v = fresh_name();
      r_orig->a = aprintf("return %s;",r_orig->v);

      let $(r_b, named_opt) = mk_bnfgen_binder(n);

      res =  new List(new $(n_orig, r, a), 
                      new List(new $(n, ALT(r_b,r_orig), a), 
                               res));

      if (named_opt){
        let &$(b_name, b_rule) = named_opt;
        res = new List(new $(b_name, b_rule, b_attr), res);
      } 
    } else      
      res = new List(new $(n,r,a), res);
  }

  res = imp_rev(res);

  if (include_anon_binder){
    let anon_bind_def = new $((const char ?)"anon-tg-binder",LIT("%r"),
			      Attr{.ws=0,.re=0,.paramtype=NULL,.rettype=NULL});
    res = new List(anon_bind_def,res);
  }

  return res;
}

// rule_t mk_pattern_match(const char ?`H s){
//   let r_bar = LIT("|");
//   r_bar->a = "fprintf(stdout,\"\\n| set_branch(%d);\",branch_id++);";

//   let r_first = SYMB(s);
//   r_first->a = "fprintf(stdout,\" set_branch(%d);\",branch_id++);";
//   let r = SYMB(s);
//   return SEQ(r_first, STAR(0,new Infinity,SEQ(r_bar, r))); 
// }

// // Make pattern-match grammar
// grammar_t grammar2pmgrammar(grammar_t g) {
//   reset_globals();
//   init_arityt(g);

//   grammar_t res = NULL,ds = g;
//   for (; ds; ds = ds->tl) {
//     let &$(n,r,a) = ds->hd;
//     if (is_arg(SYMB(n))){
// //       let n_o = strconcat(n,"_o");
//       let n_pm = strconcat(n,"_pm");
//       let r_pg = add_parsegen(r);
//       let r_pm = mk_pattern_match(n);
//       res = new List(new $(n_pm,r_pm,a),
// 		     new List(new $(n, r_pg, a), res));
//     } else {
//       let r_sp = mk_symb_parsegen(n,r);
//       res = new List(new $(n,r_sp,a), res);
//     }      
//   }

//   res = imp_rev(res);
//   return res;
// }


////////////////////////////////////////////////////////////////////
// Termgrammar generation based on BNF-generating semantic actions.
// Takes grammar already annotated with BNF-generating semantic actions,
// and converts to termgrammar. Assumes any desired escaping is already done.
///

/* Separate a rule list with a given separator. There should only be
   two types of rules: empty literals with actions and symbols with
   ids.
 */
static
rule_t with_sep_bnfgen(list_t<rule_t> rs, const char ?`H sep) {
  if (rs == NULL) return LIT("");

  // Terms automatically insert a space after the tag. So,
  // we need to make sure that none of the leading nullary arguments
  // have a separator inserted *after* them.
  //
  // Once we've seen a non-nullary argument, we can switch to making sure
  // that none of the nullary arguments get a separator *before* them.

  let res = new *(rs->hd);
  let seqpat; // sequence pattern constructor for semantic action of this sequence.
  let seen_nn;  // Have we seen a non-nullary argument?

  // First check whether res is nullary.
  switch(res->r){
  case &Lit(s):
    if (strcmp(s,"") != 0){
      internal_err("Non-empty literal found in with_sep_bnf_gen.\n");
      fallthru;
    }
    seen_nn = 0;
    seqpat = res->a;
    break;
  case &Symb(_,_):
    seen_nn = 1;
    seqpat = res->v;
    break;
  case &CharRange(min,max):
    seen_nn = 1;
    seqpat = aprintf("new CharPat(%s[0])", res->v);
    break;
  default:
    internal_err("Unexpected rule found in with_sep_bnf_gen: %s\n",pr_rule2string(rs->hd));
    seen_nn = 0;  // ignore the rule and keep going.
    seqpat = "ERR";
  }

  rs = rs->tl;

  // Now add args without separators until we see the first n.n. arg.
  for (; !seen_nn && rs; rs = rs->tl){
    switch(rs->hd->r){
    case &Lit(s):
      if (strcmp(s,"") != 0){
	internal_err("Non-empty literal found in with_sep_bnfgen.\n");
	fallthru;
      }
      seqpat = aprintf("new SeqPat(%s,%s)",seqpat, rs->hd->a);
      break;
    case &Symb(_,_):
      seen_nn = 1;
      seqpat = aprintf("new SeqPat(%s,%s)",seqpat, rs->hd->v);
      // put copy of rs->hd in res.
      res = new *(rs->hd);
      break;
    case &CharRange(min,max):
      seen_nn = 1;
      // put copy of rs->hd in res.
      res = new *(rs->hd);
      seqpat = aprintf("new SeqPat(%s,new CharPat(%s[0]))",seqpat, res->v);
      break;
    default:
      internal_err("Unexpected rule found in with_sep_bnf_gen: %s.\n",pr_rule2string(rs->hd));
      // ignore the rule and keep going.
    }
  }
  
  // invariant: res holds a copy of the first symbol in the sequence,
  // seqpat holds the accumulated semantic action (sequence pattern
  // constructor) and rs points to the first unprocessed rule.

  let r_sep = LIT(sep);
  // Now add n.n. args with seps and nullary args w/o seps.
  for (; rs; rs = rs->tl){
    switch(rs->hd->r){
    case &Lit(s):
      if (strcmp(s,"") != 0){
	internal_err("Non-empty literal found in with_sep_bnfgen.\n");
	fallthru;
      }
      // Just add the pattern-construction to the args list.
      seqpat = aprintf("new SeqPat(%s,%s)",seqpat, rs->hd->a);
      break;
    case &Symb(_,_):
      seqpat = aprintf("new SeqPat(%s,%s)",seqpat, rs->hd->v);
      res = SEQ(res,r_sep,rs->hd);
      break;
    case &CharRange(min,max):
      seqpat = aprintf("new SeqPat(%s,new CharPat(%s[0]))",seqpat, rs->hd->v);
      res = SEQ(res,r_sep,rs->hd);
      break;
    default:
      internal_err("Unexpected rule found in with_sep_bnf_gen: %s.\n",pr_rule2string(rs->hd));
      // ignore the rule and keep going.
    }
  }
  
  res->a = aprintf("return %s;",seqpat);
  return res;
}

/* Separate a rule list with spaces */
static
rule_t with_spaces_bnfgen(list_t<rule_t> rs) {
  return with_sep_bnfgen(rs," ");
}

static
rule_t seqrule2term_bnf(rule_t r) {
  if (is_arg(r))
    return r;

  let r2 = LIT("");
  r2->a = get_bnfgen(r);
  return r2;
}

// Convert an ordinary sequence into a sequence appropriate for a term body.
static
rule_t seq2term_bnf(rule_t r) {
  let args = seq2rules(r);
  return with_spaces_bnfgen(map(seqrule2term_bnf,args));
}

rule_t mkterm_bnf(rule_t tag, rule_t args){
  // check if args is empty. If so, omit from term.
  switch(args->r){
  case &Lit(s):
    if (s[0] == '\0')
      return SEQ(LIT("("), tag, LIT(")"));;
    fallthru;
  default: 
    return SEQ(LIT("("), tag, LIT(" "), args, LIT(")"));
  }
}

bool is_dep_seq(rule_t r){
  let rules = depseq2rules(r);
  return rules->hd->v != NULL;
}

bool is_seq(rule_t r){
  switch(r->r){
  case &Seq(_,_): return !is_dep_seq(r); // make sure not a dep. sequence.
  default: return false;
  }
}

grammar_t grammar2termgrammar_bnf(grammar_t g) {
  reset_globals();
  init_arityt(g);

  symb_semacts = Hashtable::create(101,strptrcmp,Hashtable::hash_stringptr);

  grammar_t res = NULL,ds = g;
  for (; ds; ds = ds->tl) {
    let &$(n,r,a) = ds->hd;
    let n_is_arg = arity_rule(SYMB(n));
    if (n_is_arg && is_seq(r) && !is_regexp(n)){
      let term_body = seq2term_bnf(r);
      let a_tb = term_body->a;
      term_body->a = NULL;
      let r_tag = LIT(n);
      let r2 = mkterm_bnf(r_tag, term_body);
      r2->a = a_tb;      
      let r_both = ALT(r,r2);
      res = new List(new $(n,r_both,a),res);
    }else {
      if (!n_is_arg) Hashtable::insert(symb_semacts, new n, new get_bnfgen(r));
      res = new List(new $(n,r,a), res);
    }
  }

  res = imp_rev(res);
  return res;
}


////////////////
/// TO DO
///////////
// Q: Why does follow for STAR use m2 =0?
// x cutoff of term transformation for reg.exps. (i.e. those rules that have all caps names).

// Independent line of research N+1: Teach RFCs: Generate examples when parse fails.
// Found possible bug in minus_elim. It removes sem. actions from branches of alts that are 
//   classified as char.sets.  Similarly, alt2rules loses semantic actions.
// Our printf could perform dynamic check of well formedness. 
//   Make optional with %t:... format? I.e. think of t: as annotation to be checked.
//   Better syntax is %<fs>:<type>

// Improve efficiency of list handling for defs lists in flatten_grammar functions.

// Generate ast_main for every BNF. currently, specialized to small_imap.bnf.
// Support termgrammars with paths used to fill in data.

