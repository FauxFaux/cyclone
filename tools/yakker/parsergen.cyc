/* Copyright (C) 2005 Greg Morrisett, AT&T.
   This file is part of the Cyclone project.

   Cyclone is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   Cyclone is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Cyclone; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include "bnf.h"
#include "fa.h"
#include "analyze.h"
#include "pr.h"
#include "pads.h"
#include "cs.h"
#include <string.h>
#include <stdio.h>
#include <buffer.h>
#include <stdlib.h>

int print_main = 1;
int print_globals = 1;
int local_lookahead = 0;
int lazyfill = 0;
const char ?cyc_namespace = NULL;
int gen_fun_table = 0; // off by default

/**********************************************************************/
/* A generator for parsers with dfa lookahead.
*/
static const char ?p_id(const char ?`H n) {
  return aprintf("p_%s",make_c_identifier0(n));
}
static int scope = 0;

// conservative estimate of required  number of bytes to input into buffer.
static unsigned int fill_amount(rule_t r) {
  switch (r->r) {
  case &Lit(x):
    return strlen(x);

  case &Seq(r2,r3):
    return fill_amount(r2)+fill_amount(r3);

  case &Alt(r2,r3):
    let a = fill_amount(r2);
    let b = fill_amount(r3);
    return (a<b)?b:a;

  case &Opt(r2):
    return fill_amount(r2);

  case &CharRange(_,_):
  case &Minus(_,_):
    return 1;

  case &Prose(_):
  case &Symb(_,_):
  case &Rcount(_,_):
  case &Star(_,_,_):
  case &Hash(_,_,_):
    return 0;
  }
}

static void gen_cs(cs_t cs) {
  let ranges = cs2ranges(cs,NULL);

  printf("if (0");
  for (; ranges; ranges = ranges->tl) {
    printf("||");
    let &$(lb,ub) = ranges->hd;
    if (lb == ub-1) { gen_uint(lb); printf("==c"); }
    else {
      printf("("); gen_uint(lb); printf("<=c&&c<"); gen_uint(ub); printf(")");
    }
  }
  printf(") {\n");
}
static grammar_t checking_conflicts_grammar;
static void gen_fill(rule_t r) {
  if (lazyfill) return;
  let fa = fill_amount(r);
  if (fa)
    printf("  if ((YKLIMIT - YKCURSOR) < %u) YKFILL(%u);\n",fa,fa);
}
static void gen_fill_constant(unsigned int fa) {
  if (lazyfill) return;
  if (fa)
    printf("  if ((YKLIMIT - YKCURSOR) < %u) YKFILL(%u);\n",fa,fa);
}
static void gen_lazyfill(unsigned int fa) {
  if (!lazyfill) return;
  if (fa)
    printf("  if ((YKLIMIT - YKCURSOR) < %u) YKFILL(%u);\n",fa,fa);
}
/* The set of symbols that return semantic values.  Used to
   determine whether symb$x should bind x to the semantic
   value of symb, or to the string matched by symb.
   This needs to be initialized by the caller of gen0. */
static struct Set::Set<const char ?@> *semvalue_symbs;
static
void gen0(rule_t r, rule_t right_ctxt) {
  int save;
  if (r->v) {
    if ('$' == r->v[0]){
      printf("let %s = NULL;",r->v + 1);
    } else {
      switch (r->r) {
      case &Symb(x,y):
	if (Set::member(semvalue_symbs,new x)) {
	  printf("let %s = ",r->v);
	  break;
	}
	else fallthru;
      default:
	save = scope++;
	printf("let save%d = YKSAVE;\n",save);
	break;
      }
    }
  }

  switch (r->r) {
  case &Symb(x,y):
    printf("%s(ykb%s%s);\n",
	   p_id(x),
	   (y?",":""),
	   y);
    gen_fill(right_ctxt);
    break;
  case &Lit(x):
    printf("{ int c;\n");
    int len = strlen(x);
    gen_lazyfill(len);
    for (int k = 0; k < len; k++) {
      printf("  c = *YKCURSOR++;\n");
      let orig = x[k];
      let l = tolower(orig);
      let u = toupper(orig);
      if (l == u)
        printf("  if (c!=%d) throw &Parse_error_val;\n",l);
      else
        printf("  if (c!=%d&&c!=%d) throw &Parse_error_val;\n",l,u);
    }
    printf("}\n");
    break;
  case &CharRange(min,max):
    gen_lazyfill(1);
    if (min == max)
      printf("if (*YKCURSOR++ != %u) throw &Parse_error_val;\n",min);
    else
      printf("{ int c = *YKCURSOR++;\n"
             "  if (!(%u <= c && c <= %u)) throw &Parse_error_val;\n}\n",min,max);
    break;
  case &Prose(x):
    internal_err("Prose in gen0: <%s>\n",x);
    break;
  case &Minus(_,_):
    internal_err("Minus in gen0\n");
    break;

  case &Seq(r2,r3):
    gen0(r2,SEQ(r3,right_ctxt));
    gen0(r3,right_ctxt);
    break;

  case &Alt(r2,r3):
    let rng_all = cs_empty();
    let rng_conflict = cs_empty();
  
    let alts = alt2rules(r);
    let csets = NULL;
    let has_pred = 0;
    for (let rs = alts; rs; rs = rs->tl) {
      let rng = cs_empty();
      first(rng,SEQ(rs->hd,right_ctxt));
      csets = new List::List(rng,csets);
      let rng2 = cs_dup(rng);
      cs_intersect(rng2,rng_all);
      cs_union(rng_conflict,rng2);
      cs_union(rng_all,rng);
      if (rs->hd->p) has_pred = 1;
    }
    csets = List::imp_rev(csets);
    if (has_pred) {
      // FIX: for now assume all cases have predicates, do a greedy parse
      printf("{\n");
      for (; alts && csets; alts = alts->tl, csets = csets->tl) {
        let pred = (alts->hd->p)?(alts->hd->p):"1";
        printf("if (%s) {\n",pred);
        gen0(alts->hd,right_ctxt);
        printf("}\n");
        printf("else\n");
      }
      printf("throw &Parse_error_val;\n");
      printf("}\n");
    }
    else if (!is_cs_empty(rng_conflict)) {
      /* an LL(1) conflict */
      eprintf("************************************************************************\n");
      num_conflicts_ll++;
      eprintf("Conflict %u\n",num_conflicts_ll);
      eprintf("LL(1) conflict on character(s) ");
      cs_print(stderr,rng_conflict);
      eprintf(" in Alt\n  ");
      pr_rule(stderr,SEQ(r,right_ctxt),0);
      int altnum = 1;
      for (let x = alts; x; x = x->tl) {
        eprintf("\nAlternative %d: ",altnum++);
        pr_rule(stderr,x->hd,0);
      }
      eprintf("\nRight context: ");
      pr_rule(stderr,right_ctxt,0);
      eprintf("\n");
      let dfa;
      if (local_lookahead) {
	eprintf("Ignoring right context.\n");
	dfa = lookahead_dfa(checking_conflicts_grammar,alts,LIT(""));
      }
      else {
	dfa = lookahead_dfa(checking_conflicts_grammar,alts,right_ctxt);
      }
      printf("{ int ykaccept = 0;\n");
      printf("{ let save = YKSAVE;\n");
      dfa_generate2(dfa);
      printf("YKCURSOR = YKRESTORE(save);\n}\n");
      printf("switch (ykaccept) {\n");
      for (unsigned int i = 1; alts; alts = alts->tl, i++) {
        printf("case %u:\n",i);
        gen0(alts->hd,right_ctxt);
        printf("break;\n");
      }
      printf("default: throw &Parse_error_val;\n");
      printf("}\n");
      printf("}\n");
    }
    else {
      printf("{\n");
      gen_fill_constant(1);
      gen_lazyfill(1);
      printf("int c = *YKCURSOR;\n"); // Looking ahead, so don't advance cursor
      for (; alts && csets; alts = alts->tl, csets = csets->tl) {
        gen_cs(csets->hd);
        gen0(alts->hd,right_ctxt); // FIX: if this is a charset we are needlessly repeating
        printf("}\n");
        printf("else\n");
      }
      printf("throw &Parse_error_val;\n");
      printf("}\n");
    }
    break;
  case &Opt(r2):
    let cs2 = cs_empty();
    let cs3 = cs_empty();
    first(cs2,SEQ(r2,right_ctxt));
    first(cs3,right_ctxt);
    let cs = cs_dup(cs2);
    cs_intersect(cs,cs3);
    if (!is_cs_empty(cs)) {
      /* an LL(1) conflict */
      eprintf("************************************************************************\n");
      num_conflicts_ll++;
      eprintf("Conflict %u\n",num_conflicts_ll);
      eprintf("LL(1) conflict on character(s) ");
      cs_print(stderr,cs);
      eprintf(" in Opt\n  ");
      pr_rule(stderr,SEQ(r,right_ctxt),0);
      eprintf("\n");
      let dfa;
      if (local_lookahead) {
	eprintf("Ignoring right context.\n");
	dfa = lookahead_dfa(checking_conflicts_grammar,
			    List::list(r2,right_ctxt),
                            LIT(""));

      }
      else {
	dfa = lookahead_dfa(checking_conflicts_grammar,
			    List::list(r2,LIT("")),
                            right_ctxt);
      }
      printf("{ int ykaccept = 0;\n");
      printf("{ let save = YKSAVE;\n");
      dfa_generate2(dfa);
      printf("YKCURSOR = YKRESTORE(save);\n}\n");
      printf("switch (ykaccept) {\n");
      printf("case 1:\n");
      gen0(r2,right_ctxt);
      printf("  break;\n");
      printf("case 2:\n");
      printf("  break;\n");
      printf("default: throw &Parse_error_val;\n");
      printf("}\n");
      printf("}\n");
    }
    else {
      printf("{\n");
      gen_fill_constant(1);
      gen_lazyfill(1);
      printf("int c = *YKCURSOR;\n"); // Looking ahead, so don't advance cursor
      gen_cs(cs2);
      gen0(r2,right_ctxt); // FIX: if this is a charset we are needlessly repeating
      printf("}\n");
      printf("else ");
      gen_cs(cs3);
      printf("}\n");
      printf("else throw &Parse_error_val;\n");
      printf("}\n");
    }
    break;
  case &Rcount(c,r2):
    printf("{\n");
    printf("unsigned int bounds = %s;\n",c);
    printf("unsigned int count;\n");
    printf("for (count = 0; count < bounds; count++) {\n");
    gen_fill(r2);
    gen0(r2,LIT("")); // throw away right context b/c we are doing a greedy parse
    printf("}\n");
    printf("}\n");
    gen_fill(right_ctxt);
    break;
  case &Star(m,&Num(0),r2):
    gen_fill(right_ctxt);
    break;
  case &Star(m,&Num(n),r2):
    if (m > n) break;
    for (; m > 0; m--,n--) {
      gen_fill(r2);
      gen0(r2,SEQ(STAR(m-1,new Num(n-1),r2),right_ctxt));
    }
    for (; n > 0; n--) {
      gen_fill(r2);
      gen0(OPT(STAR(1,new Num(n-1),r2)),right_ctxt);
    }
    gen_fill(right_ctxt);
    break;
  case &Star(m,&Infinity,r2):
    let inf = new Infinity;
    for (; m > 0; m--) {
      gen_fill(r2);
      gen0(r2,SEQ(STAR(m-1,inf,r2),right_ctxt));
    }

    let before = scope++;
    let after = scope++;
    let cs2 = cs_empty();
    let cs3 = cs_empty();
    let oneplus_r2 = STAR(1,inf,r2);
    first(cs2,SEQ(oneplus_r2,right_ctxt));
    first(cs3,right_ctxt);
    let cs = cs_dup(cs2);
    cs_intersect(cs,cs3);
    let new_right_ctxt = SEQ(STAR(0,inf,r2),right_ctxt);
    if (!is_cs_empty(cs)) {
      /* an LL(1) conflict */
      eprintf("************************************************************************\n");
      num_conflicts_ll++;
      eprintf("Conflict %u\n",num_conflicts_ll);
      eprintf("LL(1) conflict on character(s) ");
      cs_print(stderr,cs);
      eprintf(" in Star\n  ");
      pr_rule(stderr,SEQ(r,right_ctxt),0);
      eprintf("\n");
      eprintf("Alternative 1: ");
      pr_rule(stderr,oneplus_r2,0);
      eprintf("\nAlternative 2: ");
      pr_rule(stderr,LIT(""),0);
      eprintf("\nRight context: ");
      pr_rule(stderr,right_ctxt,0);
      eprintf("\n");
      let dfa;
      if (local_lookahead) {
	eprintf("Ignoring right context.\n");
	dfa = lookahead_dfa(checking_conflicts_grammar,
			    List::list(oneplus_r2,right_ctxt),
                            LIT(""));

      }
      else {
	dfa = lookahead_dfa(checking_conflicts_grammar,
			    List::list(oneplus_r2,LIT("")),
                            right_ctxt);
      }
      printf("A%d: 0;\n",before);
      printf("{ int ykaccept = 0;\n");
      printf("{ let save = YKSAVE;\n");
      dfa_generate2(dfa);
      printf("YKCURSOR = YKRESTORE(save);\n}\n");
      printf("switch (ykaccept) {\n");
      printf("case 1:\n");
      gen_fill(r2);
      gen0(r2,new_right_ctxt);
      printf("  goto A%d;\n",before);
      printf("case 2:\n");
      printf("  goto A%d;\n",after);
      printf("default: throw &Parse_error_val;\n");
      printf("}\n");
      printf("}\n");
      printf("A%d: 0;\n",after);
    }
    else {
      printf("A%d: 0;\n",before);
      printf("{\n");
      gen_fill(r2);
      gen_fill_constant(1);
      gen_lazyfill(1);
      printf("int c = *YKCURSOR;\n"); // Looking ahead, so don't advance cursor
      gen_cs(cs2);
      gen0(r2,new_right_ctxt); // FIX: if this is a charset we are needlessly repeating
      printf("  goto A%d;\n",before);
      printf("}\n");
      printf("else ");
      gen_cs(cs3);
      printf("  goto A%d;\n",after);
      printf("}\n");
      printf("else throw &Parse_error_val;\n");
      printf("}\n");
      printf("A%d: 0;\n",after);
    }
    gen_fill(right_ctxt);
    break;
  case &Hash(0,&Infinity,r2): // 0# r2 -> [r2 *(commas r2)]
    gen_fill(r2);
    gen0(OPT(SEQ(r2,STAR(0,new Infinity,SEQ(commas(),r2)))),right_ctxt);
    // NB: no need to fill for right context, that will be handled by the STAR
    break;
  case &Hash(m,&Infinity,r2): // m# r2 -> r2 (m-1)*(commas r2)
    gen_fill(r2);
    gen0(SEQ(r2,STAR(m-1,new Infinity,SEQ(commas(),r2))),right_ctxt);
    break;
  case &Hash(0,&Num(0),r2): // #0 r2 -> ""
    gen0(LIT(""),right_ctxt);
    // NB: must fill for right context, since LIT("") does not
    gen_fill(right_ctxt);
    break;
  case &Hash(0,&Num(1),r2): // #1 r2 -> [r2]
    gen_fill(r2);
    gen0(OPT(r2),right_ctxt);
    gen_fill(right_ctxt);
    break;
  case &Hash(0,&Num(n),r2): // #n r2 -> [r2 *(n-1)(commas r2)]
    gen_fill(r2);
    gen0(OPT(SEQ(r2,STAR(0,new Num(n-1),SEQ(commas(),r2)))),right_ctxt);
    break;
  case &Hash(m,&Num(n),r2): // m#n r2 -> r2 (m-1)*(n-1)(commas r2)
    gen_fill(r2);
    gen0(SEQ(r2,STAR(m-1,new Num(n-1),SEQ(commas(),r2))),right_ctxt);
    break;
  }
  if (r->v) {
    if ('$' != r->v[0]){
      switch (r->r) {
      case &Symb(x,_):
	if (Set::member(semvalue_symbs,new x)) break;
	else fallthru;
      default:
	printf("unsigned char ?@nozeroterm ykr%d = YKRESTORE(save%d);\n"
	       "let %s = substring((const char ?@nozeroterm)ykr%d,0,YKCURSOR-ykr%d);\n",
	       save,save,
	       r->v,save,save);
	break;
      }
    }
  }
  if (r->a) printf("%s\n",r->a);
  return;
}


// Create a follow grammar where all symbols have eof in their follow grammar.
static grammar_t
eof_all_follow_grammar(grammar_t<`H> grm, unsigned int eof_val) {
  grm = follow_grammar(grm);
  let eof_cr = CHARRANGE(eof_val,eof_val);
  for (let x = grm; x; x = x->tl) {
    let &$(n,*r,_) = x->hd;
    if (is_follow_symbol(n)) {
      *r = ALT(eof_cr,*r);
    }
  }
  return grm;
}

static grammar_t
eof_follow_grammar(grammar_t<`H> grm, const char ?`H symb, unsigned int eof_val) {
  grm = follow_grammar(grm);
  let f = follow_symbol(symb);
  for (let x = grm; x; x = x->tl) {
    let &$(n,*r,_) = x->hd;
    if (strcmp(n,f) == 0) {
      *r = ALT(CHARRANGE(eof_val,eof_val),*r);
      break;
    }
  }
  return grm;
}

/* Print forward definitions of parsing functions in grammar grm. */
void gen_header(grammar_t<`H> grm, List::list_t<const char ?@>textblobs){
  printf("#include <buffer.h>\n"
	 "#include <stdio.h>\n"
	 "#include <stdlib.h>\n"
	 "#include <string.h>\n");
#ifndef STRINGINPUT
  printf("#include \"ykbuf.h\"\n");
#endif

  if (gen_fun_table){
    printf("#include \"funtable.h\"\n");
  }

  /* Print first textblob.  Needed in case it defines typedefs used by parsing functions. */
  if (textblobs) {
    printf("%s\n",*textblobs->hd);
    textblobs = textblobs->tl;
  }

  if (cyc_namespace){
    printf("namespace %s {\n\n",cyc_namespace);
  }

  if (gen_fun_table){
    printf("\nFuntable::table_t get_function_table();\n");
  }

  for (let x = grm; x; x = x->tl) {
    let &$(n,r,a) = x->hd;
    if (a.rettype) {
      printf("%s ",a.rettype);
    } else
      printf("void ");
    printf("%s(ykbuf_t @ykb%s%s);\n",
	   p_id(n),
	   (a.paramtype)?",":"",
	   a.paramtype);
  }
  if (cyc_namespace){
    printf("\n}\n");
  }
}

// generate a code fragment. None of the globals are reset. semvalue_symbs is initialized to empty, if NULL;
void gen_frag(rule_t r){
  if (!semvalue_symbs) semvalue_symbs = Set::empty(strptrcmp);
  grammar_t combinedgrm = NULL;
  init_recursive(combinedgrm);
  init_firstt(combinedgrm);
  init_mayt(combinedgrm);
  init_mustt(combinedgrm);
  init_maybe_empty(combinedgrm);

  gen0(r,LIT(""));
}

void gen(grammar_t<`H> grm, const char ?`H start_symbol,
         List::list_t<const char ?@>textblobs, int all_start, 
	 unsigned int eof_val) {
  reset_globals();
  semvalue_symbs = Set::empty(strptrcmp);
  // init_recursive(grm); // FIX: want to warn only on non-follow symbols,
  // but still need to know whether a follow symbol is recursive
  debugprint(1,"Computing follow grammar... ");
  grammar_t followgrm = all_start ? eof_all_follow_grammar(grm,eof_val) : eof_follow_grammar(grm,start_symbol,eof_val);
//   grammar_t followgrm = follow_grammar(grm);
  debugprint(1,"done\n");
  if (debug > 1) {
    eprintf("The follow grammar:\n");    
    pr_definitions(stderr,followgrm);
    fflush(stderr);
  }
  grammar_t combinedgrm = List::append(grm,followgrm);
  init_recursive(combinedgrm);
  checking_conflicts_grammar = combinedgrm;
  init_firstt(combinedgrm);
  init_mayt(combinedgrm);
  init_mustt(combinedgrm);
  init_maybe_empty(combinedgrm);

  printf("#include <buffer.h>\n"
	 "#include <stdio.h>\n"
	 "#include <stdlib.h>\n"
	 "#include <string.h>\n");

  if (gen_fun_table){
    printf("#include \"funtable.h\"\n");
  }

#ifdef STRINGINPUT
  printf("unsigned char ?@nozeroterm YKSTART;\n"
         "unsigned char ?@nozeroterm YKCURSOR;\n"
         "unsigned char ?@nozeroterm YKMARKER;\n"
         "unsigned char ?@nozeroterm YKLIMIT;\n"
         "#define YKFILL(i) 0\n"
         "#define YKPOSN (YKCURSOR-YKSTART)\n"
         "#define YKSAVE (YKCURSOR-YKSTART)\n"
         "#define YKRESTORE(x) (YKSTART+(x))\n");
#else
  printf("#include \"ykbuf.h\"\n"
         "#define YKLIMIT ykb->lim\n"
         "#define YKCURSOR ykb->cur\n"
         "#define YKFILL(n) (ykfill(ykb,(n)))\n"
         "#define YKPOSN ((ykb->cur-ykb->bot)+ykb->discarded)\n"
         "#define YKMARKER ykb->mark\n"
         "#define YKSAVE ({ let x = 0; ykb->save_count++; if (ykb->save) x = ykb->cur-ykb->save; else ykb->save = ykb->cur; x; })\n"
         "#define YKRESTORE(x) ({ let p = ykb->save+x; if (--ykb->save_count == 0) ykb->save=NULL; p; })\n");
#endif

  if (print_globals){
    printf("int ykdebug = 0;\n"
	   "datatype exn { Parse_error };\n"
	   "datatype exn.Parse_error Parse_error_val = Parse_error;\n");
  }else{
    printf("extern int ykdebug;\n"
	   "datatype exn { extern Parse_error };\n"
	   "extern datatype exn.Parse_error Parse_error_val;\n");
  }

  /* Print first textblob.  Needed in case it defines typedefs used by parsing functions. */
  if (textblobs) {
    printf("%s\n",*textblobs->hd);
    textblobs = textblobs->tl;
  }

  if (cyc_namespace){
    printf("namespace %s {\n\n",cyc_namespace);
  }

  /* Print forward definitions of parsing functions */
  for (let x = grm; x; x = x->tl) {
    let &$(n,r,a) = x->hd;
    if (a.rettype) {
      printf("%s ",a.rettype);
      semvalue_symbs = Set::insert(semvalue_symbs,new n);
    } else
      printf("void ");
    printf("%s(ykbuf_t @ykb%s%s);\n",
	   p_id(n),
	   (a.paramtype)?",":"",
	   a.paramtype);
  }

  /* Print the text blobs */
  for (let x = textblobs; x; x = x->tl) {
    printf("%s\n",*x->hd);
  }

  /* Optionally print a function table. 
   */
  if (gen_fun_table){
    printf("\nFuntable::table_t get_function_table(){\n");
    printf("  let t = Funtable::create(101);\n");
    for (let x = grm; x; x = x->tl) {
      let &$(n,r,a) = x->hd;
      // Only includes function with this signature:     
      //   void x(ykbuf_t @);
      if (!a.rettype && !a.paramtype) {
	printf("  Funtable::insert(t, \"%s\", %s<>);\n",n,p_id(n));
      }
    }
    printf("  return t;\n}\n");
  }

  /* Print the parsing functions */
  for (let x = grm; x; x = x->tl) {
    let &$(n,r,a) = x->hd;
    let fn = follow_symbol(n);
    if (a.rettype)
      printf("%s ",a.rettype);
    else
      printf("void ");
    printf("%s(ykbuf_t @ykb%s%s) {\n",
	   p_id(n),
	   (a.paramtype)?",":"",
	   a.paramtype);
    printf("let YKq = YKPOSN;\n");
    // TODO: HANDLE IMAP STRING SPECIAL CASE AS IN PGEN
    gen_fill(r);
    gen0(r,SYMB(fn));
    printf("  if (ykdebug) printf(\"[%%x,%%x):%s\\n\",YKq,YKPOSN);\n",n);
    printf("}\n");
  }

  if (cyc_namespace){
    printf("\n}\n");
  }

  if (print_main) {
    printf("int main(int argc, char ??argv) {\n"
           "  while ((argc--)>1) {\n"
           "    if (strcmp(*(++argv),\"-d\") == 0) ykdebug++;\n"
           "    else { fprintf(stderr,\"Unrecognized option: %%s\\n\",*argv); exit(1); }\n"
           "  }\n");
#ifdef STRINGINPUT
    printf("  fprintf(stderr,\"Getting input... \");\n"
           "  Buffer::T buf = Buffer::create(1024);\n"
           "  int c;\n"
           "  while ( (c = getchar()) != -1) Buffer::add_char(buf,(char)c);\n"
           "  let len = Buffer::length(buf);\n"
           "  let buf = Buffer::extract(buf);\n"
           "  unsigned char ?@nozeroterm input = malloc((len+1)*sizeof(unsigned char));\n"
           "  for (let i = 0; i < len; i++) input[i] = buf[i];\n"
           "  input[len] = '\\0';\n"
           "  fprintf(stderr,\"done\\n\");\n"
           "  // fprintf(stderr,\"%%s\",input);\n"
           "  fprintf(stderr,\"Trying to parse...\\n\");\n"
           "  YKCURSOR = input;\n"
           "  YKSTART = input;\n"
           "  YKMARKER = input;\n"
           "  YKLIMIT = input+numelts(input);\n");
#else
    printf("  ykbuf_t @ykb = fd2ykbuf(0); // read from stdin\n");
#endif
    printf("  try {\n");
    printf("    ");
    if (cyc_namespace){
      printf("%s::",cyc_namespace);
    }
    printf("%s(ykb);\n", // FIX: what if start_symbol takes args?
	   p_id(start_symbol));

    printf("    //let n = YKPOSN;\n"
           "    //if (n<60) for (int i = 0; i < n; i++) printf(\"^\");\n"
           "    //printf(\" accepted %%d (0x%%x) characters\\n\",n,n);\n"
           "  }\n"
           "  catch {\n"
           "  case &Parse_error:\n"
           "    let n = YKPOSN;\n"
           "    if (n<60) for (int i = 0; i < n; i++) printf(\" \");\n"
           "    printf(\"^ failed at position %%d (0x%%x)\\n\",n,n);\n"
           "    break;\n"
           "  }\n"
           "  return 0;\n"
           "}\n");
  }
  if (num_conflicts_ll) {
    eprintf("************************************************************************\n");
    eprintf("SUMMARY\n\n");
    if (num_conflicts_ll == 1)
      eprintf("There was 1 LL(1) conflict.\n");
    else
      eprintf("There were %u LL(1) conflicts.\n", num_conflicts_ll);

    if (num_conflicts_unbounded == 1)
      eprintf("1 LL(1) conflict might require unbounded lookahead.\n");
    else
      eprintf("%u LL(1) conflicts might require unbounded lookahead.\n",num_conflicts_unbounded);

    if (num_conflicts_dfa == 0)
      eprintf("There were no conflicts for the lookahead dfas.\n");
    else {
      if (num_conflicts_dfa == 1)
        eprintf("There was 1 conflict in the lookahead dfas.\n");
      else if (num_conflicts_dfa > 1)
        eprintf("There were %u conflicts in the lookahead dfas.\n", num_conflicts_dfa);

      if (num_conflicts_resolved){
	if (num_conflicts_resolved == 1)
	  eprintf("  1 conflict was resolved with tie-breaking.\n");
	else
	  eprintf("  %u conflicts were resolved with tie-breaking.\n",num_conflicts_resolved);
      
	if (num_conflicts_change_order == 1)
	  eprintf("  1 tie-break resulted in branch reordering.\n");
	else if (num_conflicts_change_order)
	  eprintf("  %u tie-breaks resulted in branch reordering.\n",num_conflicts_change_order);
      }

      if (num_conflicts_unresolved == 1)
	eprintf("  1 conflict was unresolved.\n");
      else if (num_conflicts_unresolved)
	eprintf("  %u conflicts were unresolved.\n",num_conflicts_unresolved);
    }
  }
}

