/* Detect definitions of character sets and eliminate the minus
   operator on character sets. */

/* Copyright (C) 2005 Greg Morrisett, AT&T.
   This file is part of the Cyclone project.

   Cyclone is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   Cyclone is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Cyclone; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include "cs.h"
#include <string.h>
#include <ctype.h>
#include "util.h"

/* TODO: Someday calculate this dynamically */
#define MAXCSCHAR MAXACTION

int is_cs_empty(cs_t a) {
  for (let i = 0; i < BUCKETS; i++)
    if (a[i]) return 0;
  return 1;
}
int is_cs_full(cs_t a) {
  for (let i = 0; i < BUCKETS; i++)
    if (a[i] != 0xff) return 0;
  return 1;
}
int is_cs_singleton(cs_t a) {
  let num = 0;
  for (let i = 0; i < BUCKETS; i++) {
    unsigned char b = a[i];
    for (let j = 0; j < 8; j++) {
      if (b & (1<<j)) num++;
      if (num > 1) return 0;
    }
  }
  return num;
}
int first_of_cs(cs_t a) {
  for (let i = 0; i < BUCKETS; i++) {
    unsigned char b = a[i];
    for (let j = 0; j < 8; j++) {
      if (b & (1<<j)) return i*8+j;
    }
  }
  return -1;
}

int cs_cmp(cs_t a,cs_t b) {
  for (let i = 0; i < BUCKETS; i++){
    let d = a[i] - b[i];
    if (d) return d;
  }
  
  return 0;
}

int cs_hash(cs_t c) {
  let h = 0;
  for (let i = 0; i < BUCKETS; i++){
    h ^= c[i];
  }
  
  return h;
}

void cs_intersect(cs_t a,cs_t b) {
  for (let i = 0; i < BUCKETS; i++)
    a[i] &= b[i];
}
void cs_union(cs_t a,cs_t b) {
  for (let i = 0; i < BUCKETS; i++)
    a[i] |= b[i];
}
void cs_xor(cs_t a,cs_t b) {
  for (let i = 0; i < BUCKETS; i++)
    a[i] ^= b[i];
}
void cs_insert(cs_t a,unsigned int x) { /* Note, have to change for Unicode */
  if (x > MAXCSCHAR) {
    eprintf("character sets can't hold large character %u\n",x);
    return;
  }
  a[x/8] |= (1<<(x%8));
}
void cs_difference(cs_t a,cs_t b) {
  for (let i = 0; i < BUCKETS; i++)
    a[i] &= ~b[i];
}
void cs_complement(cs_t a) {
  for (let i = 0; i < BUCKETS; i++)
    a[i] = ~a[i];
}
cs_t cs_dup(cs_t a) {
  return new {for i<BUCKETS: a[i]};
}
cs_t cs_empty() {
  return new {for i<BUCKETS: (unsigned char)0};
}
cs_t cs_singleton(unsigned int x) {
  let r = cs_empty();
  cs_insert(r,x);
  return r;
}
cs_t cs_full() {
  return new {for i<BUCKETS: (unsigned char)0xff};
}
/* half-open interval [lb,ub) */
cs_t cs_range(unsigned int lb, unsigned int ub) {
  let r = cs_empty();
  for (; lb < ub; lb++) {
    cs_insert(r,lb);
  }
  return r;
}
int cs_member(cs_t a,unsigned int c) {
  return (a[c/8] & (1<<(c%8))) != 0;
}
/* Returns correct bounds IF cs not empty. */
$(unsigned int,unsigned int) cs_bounds(cs_t rng) {
  unsigned int min = MAXCSCHAR;
  unsigned int max = 0;
  for (unsigned int i = 0; i <= MAXCSCHAR; i++) {
    if (!cs_member(rng,i)) continue;
    min = i;
    max = i;
    break;
  }
  for (unsigned int i = MAXCSCHAR; i >min; i--) {
    if (!cs_member(rng,i)) continue;
    max = i;
    break;
  }
  return $(min,max);
}

const char ?cs_char_escape(unsigned int c) {
  if (isprint(c) && c != ' ' && c != ',' && c != '-')
    return aprintf("%c",(unsigned char)c);
  else return aprintf("0x%x",c);
}

#include <buffer.h>

/* Return a string representation of a character set. */
const char ?cs2string(cs_t rng, cs_pred_t special) {
  let ranges = cs2ranges(rng,special);
  if (ranges == NULL) return "<EMPTY>";

  let b = Buffer::create(32);
  for (; ranges != NULL; ranges = ranges->tl) {
    let &$(lb,ub) = ranges->hd; // [lb,ub)
    if (lb+1 == ub) {
      const char ?`H s = NULL;
      if (special && (s = special(lb)))
        Buffer::add_string(b,s);
      else
        Buffer::add_string(b,cs_char_escape(lb));
    }
    else if (lb+2 == ub) {
      Buffer::add_string(b,cs_char_escape(lb));
      Buffer::add_char(b,',');
      Buffer::add_string(b,cs_char_escape(ub-1));
    }
    else {
      Buffer::add_string(b,cs_char_escape(lb));
      Buffer::add_char(b,'-');
      Buffer::add_string(b,cs_char_escape(ub-1));
    }
    if (ranges->tl != NULL)
      Buffer::add_char(b,',');
  }
  //  return Buffer::extract(b);
  return Buffer::contents(b);
}

void cs_print(FILE @f,cs_t rng) {
  fprintf(f,"%s",cs2string(rng,NULL));
}

void cs_dot_print(FILE @f,cs_t cs,cs_pred_t special) {
  fprintf(f,"%s",string_escape(cs2string(cs,special)));
}

cs_t string2cs(const char ?s) {
  let res = cs_empty();
  let n = strlen(s);
  for (let i = 0; i < n; i++)
    cs_insert(res,s[i]);
  return res;
}

/* return list of half-open intervals in sorted order.
   special is a predicate that indicates that certain characters should
   not be grouped with other characters, i.e., they should always appear
   alone in their own half-open interval. */
List::list_t<$(unsigned int,unsigned int)@> cs2ranges(cs_t a, cs_pred_t special) {
  let empty_so_far = 1;
  let in_range = 0;
  unsigned int lb = 0;
  let result = NULL;
  for (unsigned int i = 0; i < MAXCSCHAR+1; i++) {
    if (cs_member(a,i)) {
      if (special && special(i)) {
        if (in_range)
          result = new List::List(new $(lb,i),result);
        result = new List::List(new $(i,i+1),result);
        in_range = 0;
      }
      else if (!in_range) {
        empty_so_far = 0;
        lb = i;                                    // lb is a member
        in_range = 1;
      }
    }
    else if (in_range) {
      in_range = 0;
      result = new List::List(new $(lb,i),result); // i is not a member
    }
  }
  if (in_range)
    result = new List::List(new $(lb,MAXCSCHAR+1),result);
  result = List::imp_rev(result);
  return result;
}

List::list_t<unsigned int> cs2list(cs_t rng) {
  List::list_t<unsigned int> chars = NULL;
  for (unsigned int i = 0; i <= MAXCSCHAR; i++) {
    if (cs_member(rng,i))
      chars = new List::List(i,chars);
  }
  return List::rev(chars);
}
