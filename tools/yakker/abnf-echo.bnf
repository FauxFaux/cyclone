{
#include "bnf.h"
#include "pr.h"
unsigned int htoi(char ?s) {
  unsigned long int x =
    strtoul(s,NULL,16);
  return x;
}
unsigned int btoi(char ?s) {
  unsigned long int x =
    strtoul(s,NULL,2);
  return x;
}
}

BACKSLASH = "\".
string = DQUOTE *inside-string DQUOTE.

inside-string
= BACKSLASH DQUOTE
| BACKSLASH BACKSLASH
| (OCTET - BACKSLASH).

parens = "(" *inside ")".
braces = "{" *inside "}".
inside
= parens
| string
| braces
| (((((OCTET - "(") - ")") - "{") - "}") - DQUOTE).

ALPHA = %d65-90|%d97-122.
BIT = "0"|"1".
CR = %d13.
CRLF = CR LF.
DIGIT = %d48-57.
DQUOTE = %d34.
HEXDIG = DIGIT|"A"|"B"|"C"|"D"|"E"|"F".
HTAB = %d9.
LF = %d10.
SP = %d32.
VCHAR = %d33-126.
WSP = SP|HTAB.
alternation$(rule_t)
  = concatenation$x 
    *(*c-wsp ("/"|"|") *c-wsp concatenation$y {r = ALT(r,y);})$$r={x} {return r;}.
bin-val$(rule_t)
  = "b" (1*BIT)$x
    (*("." (1*BIT)$y{r = ALT(CHARRANGE(atoi(y),atoi(y)));}))$$r={CHARRANGE(btoi(x),btoi(x))}
  {return r;}
| "b" (1*BIT)$x "-" (1*BIT)$y {return CHARRANGE(btoi(x),btoi(y));}.
c-nl = comment|LF|CRLF.
c-wsp = WSP|(c-nl WSP).
char-line = %d13 %d10 %d32-126 %d13 %d10.
char-val$(rule_t)
  = DQUOTE (*(%d32-33|%d35-126))$x DQUOTE {return LIT(x);}
  | "<" DQUOTE ">" {return LIT("\"");}.
comment = ";" *(WSP|VCHAR) (LF|CRLF).
concatenation$(rule_t)
  = repetition$x
    *(1*c-wsp repetition$y {r = SEQ(r,y);})$$r={x} {return r;}.
dec-val$(rule_t)
= "d" (1*DIGIT)$x
  (*("." (1*DIGIT)$y {r = ALT(CHARRANGE(atoi(y),atoi(y)));}))$$r={CHARRANGE(atoi(x),atoi(x))}
  {return r;}
| "d" (1*DIGIT)$x "-" (1*DIGIT)$y {return CHARRANGE(atoi(x),atoi(y));}.
defined-as = *c-wsp ("="|"=/") *c-wsp.
element$(rule_t)
  = rulename$x {return SYMB(x);}
  |group$x {return x;}
  |option$x {return x;}
  |char-val$x {return x;}
  |num-val$x {return x;}
  |prose-val$x {return x;}
  |"{" (*inside)$x "}" {let r = LIT(""); r->a = x; return r;}.
elements$(rule_t) = alternation$x *c-wsp {return x;}.
group$(rule_t)
  = "(" *c-wsp alternation$x *c-wsp ")" {return x;}
;  | "(" *c-wsp alternation$x 1*c-wsp "-" 1*c-wsp alternation$y *c-wsp ")"
;    {return MINUS(x,y);}
.
hex-val$(rule_t)
  = "x" (1*HEXDIG)$x
   (*("." (1*HEXDIG)$y {r = ALT(CHARRANGE(htoi(y),htoi(y)));}))$$r={CHARRANGE(htoi(x),htoi(x))}
   {return r;}
  | "x" (1*HEXDIG)$x "-" (1*HEXDIG)$y {return CHARRANGE(htoi(x),htoi(y));} .
num-val$(rule_t) = "%" (bin-val$x{return x;}|dec-val$x{return x;}|hex-val$x{return x;}).
option$(rule_t) = "[" *c-wsp alternation$x *c-wsp "]" {return OPT(x);}.
prose-val$(rule_t) = "<" (*(%d32-61|%d63-126))$x ">" {return PROSE(x);}.
repeat$($(unsigned int, repeat_t))
  = (1*DIGIT)$x {return $(atoi(x),new Infinity);}
  |(*DIGIT$x "*" *DIGIT$y)
   { let xlen = strlen(x); let ylen = strlen(y);
     unsigned int xval = 0;
     if (xlen > 0) xval = atoi(x);
     repeat_t yval = new Infinity;
     if (ylen > 0) yval = new Num(atoi(y));
     return $(xval,yval);}.
repetition$(rule_t)
  = "" { int with_repeat = 0; unsigned int m = 0; repeat_t n = new Infinity; }
  [repeat$x { with_repeat = 1; m = x.f0; n = x.f1; } ]
  element$y {if (with_repeat) return STAR(m,n,y); else return y;}.
rule$(definition_t) = rulename$x defined-as elements$y ["." *c-wsp] c-nl
  {return new $((const char ?)x,y,Attr(0,0,NULL,NULL));}.
rulelist$(grammar_t)
  = 1*(rule$x{l=new List::List(x,l);}|(*c-wsp c-nl))$$l={NULL}
{ l = List::imp_rev(l);
  pr_definitions(stdout,l);
  return l;}.
rulename = ALPHA *(ALPHA|DIGIT|"-"|":").
{
grammar_t parse_string(char ?s) {return NULL;}
}
