/* Copyright (C) 2005 Greg Morrisett, AT&T.
   This file is part of the Cyclone project.

   Cyclone is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   Cyclone is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Cyclone; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include <stdio.h>
#include "semiring.h"
#include <math.h>
namespace Semiring;

// Keep weight type "abstract" to enable us to change
// representation, if need be, in the future.

// typedef double weight_t;
// const double weight_zero = 0.0;
// const double weight_half = .5;
// const double weight_one = 1.0;

// // returns: 1 on success, 0 on failure
// int scan_weight(const char ?weight_s,weight_t @p_p){
//   if( sscanf(weight_s,"%lf",p_p) != 1 )
//     return 0;
//   else
//     return 1;
// }
// static int weight_hash(att_t a) { return (int)(a * 1000.0); }
// static int weight_cmp(weight_t a,weight_t b) { 
//   if ( a < b ) return -1;
//   else if (a > b) return 1;
//   else return 0; 
// }

const weight_t zero_weight = 4000000.0;
const weight_t one_weight = 0.0;

int scan_weight(const char ?weight_s,weight_t @w_p){
  if( sscanf(weight_s,"%lf",w_p) != 1 )
    return 0;
  else
    return 1;
}

const char ?print_weight(weight_t w){
  char ? buf = calloc(1000,sizeof(char));
  sprintf(buf,"%e",w);
//   sprintf(buf,"%ld",(long long)w);
  return buf;
}

int check_nonzero(weight_t w){
  return w < zero_weight;
}


weight_t add(weight_t w1, weight_t w2){
//   return - log( exp( - w1 ) + exp( - w2 ) );
  return w1 < w2? w1 : w2;
}

weight_t mult(weight_t w1, weight_t w2){
  return w1 + w2;
}

weight_t from_prob(double p){
  if (p == 0.0)
    return zero_weight;

  return - log (p);
}
