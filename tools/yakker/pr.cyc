/* Copyright (C) 2005 Greg Morrisett, AT&T.
   This file is part of the Cyclone project.

   Cyclone is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   Cyclone is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Cyclone; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include <stdio.h>
#include <string.h>
#include <graph.h>
#include "bnf.h"
#include "pr.h"

int html_mode = 0;
void pr_repeat(FILE @f,repeat_t rp) {
  switch (rp) {
  case &Num(n): fprintf(f,"%d",n); break;
  case &Infinity: fprintf(f,"&"); break;
  }
}

void pr_rule(FILE @f,rule_t r,int with_annotations);

static void pr_rule_paren(FILE @f,rule_t r,int with_annotations) {
  fprintf(f,"("); pr_rule(f,r,with_annotations); fprintf(f,")");
}

void pr_rule(FILE @f,rule_t r,int with_annotations) {
  if (with_annotations){
    if (r->a) {
      switch (r->r) {
      case &Alt(_,_): fprintf(f,"("); break;
      default: break;
      }
    }
  
    if (r->v) {
      switch (r->r) {
      case &Seq(_,_): fprintf(f,"("); break;
      case &Alt(_,_): fprintf(f,"("); break;
      default: break;
      }
    }
  }

  switch (r->r) {
  case &Prose(x):
    /* FIX */
    if (html_mode) {
      fprintf(f,"&lt;%s&gt;",x); break;
    }
    else {
      fprintf(f,"<%s>",x); break;
    }
    break;
  case &Symb(x,y):
    fprintf(f,"%s",x);
    if (y) fprintf(f,"@(%s)",y);
    break;
  case &CharRange(low,high):
    if (low == high) fprintf(f,"%%d%d",low);
    else fprintf(f,"%%d%d-%d",low,high);
    break;
  case &Lit(x):
    if (html_mode) {
      if (strcmp("\"",x) == 0) fprintf(f,"<b>&lt;\"&gt;</b>");
      else fprintf(f,"<b>%s</b>",x);
    }
    else {
      if (strcmp("\"",x) == 0) fprintf(f,"<\">");
      else fprintf(f,"\"%s\"",x);
    }
    break;
  case &Opt(r2):
    fprintf(f,"["); pr_rule(f,r2,with_annotations); fprintf(f,"]"); break;
  case &Rcount(c,r2):
    fprintf(f,"@repeat(%s)",c); 
    if (r2->a || r2->v) pr_rule_paren(f,r2,with_annotations); else pr_rule(f,r2,with_annotations); 
    break;
  case &Seq(r2,r3):
    if (lower_prec(r2,r)) pr_rule_paren(f,r2,with_annotations); else pr_rule(f,r2,with_annotations);
    fprintf(f," ");
    if (lower_prec(r3,r)) pr_rule_paren(f,r3,with_annotations); else pr_rule(f,r3,with_annotations);
    break;
  case &Alt(r2,r3):
    if (lower_prec(r2,r)) pr_rule_paren(f,r2,with_annotations); else pr_rule(f,r2,with_annotations);
    fprintf(f,"|");
    if (lower_prec(r3,r)) pr_rule_paren(f,r3,with_annotations); else pr_rule(f,r3,with_annotations);
    break;
  case &Star(m,&Num(n),r2):
    if (m == n) fprintf(f,"%d",m);
    else if (m == 0) fprintf(f,"*%d",n);
    else fprintf(f,"%d*%d",m,n);
    if (lower_prec(r2,r)) pr_rule_paren(f,r2,with_annotations); else pr_rule(f,r2,with_annotations);
    break;
  case &Star(m,&Infinity,r2):
    if (m == 0) fprintf(f,"*");
    else fprintf(f,"%d*",m);
    if (lower_prec(r2,r)) pr_rule_paren(f,r2,with_annotations); else pr_rule(f,r2,with_annotations);
    break;
  case &Hash(m,&Num(n),r2):
    if (m == 0) fprintf(f,"#%d",n);
    else fprintf(f,"%d#%d",m,n);
    if (lower_prec(r2,r)) pr_rule_paren(f,r2,with_annotations); else pr_rule(f,r2,with_annotations);
    break;
  case &Hash(m,&Infinity,r2):
    if (m == 0) fprintf(f,"#");
    else fprintf(f,"%d#",m);
    if (lower_prec(r2,r)) pr_rule_paren(f,r2,with_annotations); else pr_rule(f,r2,with_annotations);
    break;
  case &Minus(r2,r3):
    fprintf(f,"("); pr_rule_paren(f,r2,with_annotations); fprintf(f," - "); pr_rule_paren(f,r3,with_annotations); fprintf(f,")");
    break;
  }

  if (with_annotations){
    if (r->v) {
      switch (r->r) {
      case &Seq(_,_): fprintf(f,")"); break;
      case &Alt(_,_): fprintf(f,")"); break;
      default: break;
      }
      fprintf(f,"$%s",r->v);
    }
    if (r->a) {
      switch (r->r) {
      case &Alt(_,_): fprintf(f,")"); break;
      default: break;
      }
      fprintf(f," {%s}",r->a);
    }
  }

}

void pr_definition(FILE @f,definition_t d) {
  let &$(n,r,a) = d; // FIX: ws
  fprintf(f,"%s",n);
  if (a.paramtype)
    fprintf(f,"@(%s)",a.paramtype);
  if (a.rettype)
    fprintf(f,"$(%s)",a.rettype);
  fprintf(f," ");
  if (do_ws(d)) fprintf(f,".");
  if (do_re(d)) fprintf(f,"@");
  fprintf(f,"= ");
  pr_rule(f,r, 1);
  fprintf(f,".");
  if (html_mode) fprintf(f,"<br>");
  fprintf(f,"\n");
}

void pr_definitions(FILE @f,grammar_t ds) {
  for (; ds; ds = ds->tl)
    pr_definition(f,ds->hd);
}

void pr_definition_names(FILE @f,grammar_t ds) {
  for (; ds; ds = ds->tl){
    let &$(n,_,_) = ds->hd;
    fprintf(f,"%s ",n);
  }
  fprintf(f,"\n");
}

////////
// Functions for printing to string.
////////

using List;

// typedef List::list_t<stringptr_t<`H,`H>,`H> rs_list;
typedef List::list_t<const char ?`H@`H,`H> rs_list;
typedef const char ?`H chs;

rs_list 
pr_rule2string_l(rs_list rs_l, rule_t r,int with_annotations);

static rs_list
pr_rule2string_paren_l(rs_list rs_l,rule_t r,int with_annotations) {
  rs_l = new List(new "(", rs_l);
  rs_l = pr_rule2string_l(rs_l,r,with_annotations);
  return new List(new ")", rs_l);
}

rs_list
pr_rule2string_l(rs_list rs_l,rule_t r,int with_annotations) {
  if (with_annotations){
    if (r->a) {
      switch (r->r) {
      case &Alt(_,_): 
	rs_l = new List(new "(", rs_l); 
      break;
      default: break;
      }
    }
  
    if (r->v) {
      switch (r->r) {
      case &Seq(_,_): 
      case &Alt(_,_): 
	rs_l = new List(new "(", rs_l); 
      break;      
      default: break;
      }
    }
  }

  switch (r->r) {
  case &Prose(x):
    /* FIX */
    if (html_mode) {
      rs_l = new List(new (chs)aprintf("&lt;%s&gt;",x), rs_l); break;
    }
    else {
      rs_l = new List(new (chs)aprintf("<%s>",x), rs_l); break;
    }
    break;
  case &Symb(x,y):
    rs_l = new List(new (chs)aprintf("%s",x), rs_l);
    if (y) 
      rs_l = new List(new (chs)aprintf("@(%s)",y), rs_l);
    break;
  case &CharRange(low,high):
    if (low == high) rs_l = new List(new (chs)aprintf("%%d%d",low), rs_l);
    else rs_l = new List(new (chs)aprintf("%%d%d-%d",low,high), rs_l);
    break;
  case &Lit(x):
    if (html_mode) {
      if (strcmp("\"",x) == 0) rs_l = new List(new "<b>&lt;\"&gt;</b>", rs_l);
      else rs_l = new List(new (chs)aprintf("<b>%s</b>",x), rs_l);
    }
    else {
      if (strcmp("\"",x) == 0) rs_l = new List(new "<\">", rs_l);
      else rs_l = new List(new (chs)aprintf("\"%s\"",x), rs_l);
    }
    break;
  case &Opt(r2):
    rs_l = new List(new "[", rs_l); rs_l = pr_rule2string_l(rs_l,r2,with_annotations); rs_l = new List(new "]", rs_l); break;
  case &Rcount(c,r2):
    rs_l = new List(new (chs)aprintf("@repeat(%s)",c), rs_l); rs_l = pr_rule2string_l(rs_l,r2,with_annotations); break;
  case &Seq(r2,r3):
    if (lower_prec(r2,r)) 
      rs_l = pr_rule2string_paren_l(rs_l,r2,with_annotations); 
    else 
      rs_l = pr_rule2string_l(rs_l,r2,with_annotations);
    rs_l = new List(new " ", rs_l);
    if (lower_prec(r3,r)) rs_l = pr_rule2string_paren_l(rs_l,r3,with_annotations); 
    else rs_l = pr_rule2string_l(rs_l,r3,with_annotations);
    break;
  case &Alt(r2,r3):
    if (lower_prec(r2,r)) rs_l = pr_rule2string_paren_l(rs_l,r2,with_annotations); 
    else rs_l = pr_rule2string_l(rs_l,r2,with_annotations);
    rs_l = new List(new "|", rs_l);
    if (lower_prec(r3,r)) rs_l = pr_rule2string_paren_l(rs_l,r3,with_annotations); 
    else rs_l = pr_rule2string_l(rs_l,r3,with_annotations);
    break;
  case &Star(m,&Num(n),r2):
    if (m == n) rs_l = new List(new (chs)aprintf("%d",m), rs_l);
    else if (m == 0) rs_l = new List(new (chs)aprintf("*%d",n), rs_l);
    else rs_l = new List(new (chs)aprintf("%d*%d",m,n), rs_l);
    if (lower_prec(r2,r)) rs_l = pr_rule2string_paren_l(rs_l,r2,with_annotations); 
    else rs_l = pr_rule2string_l(rs_l,r2,with_annotations);
    break;
  case &Star(m,&Infinity,r2):
    if (m == 0) rs_l = new List(new "*", rs_l);
    else rs_l = new List(new (chs)aprintf("%d*",m), rs_l);
    if (lower_prec(r2,r)) rs_l = pr_rule2string_paren_l(rs_l,r2,with_annotations); 
    else rs_l = pr_rule2string_l(rs_l,r2,with_annotations);
    break;
  case &Hash(m,&Num(n),r2):
    if (m == 0) rs_l = new List(new (chs)aprintf("#%d",n), rs_l);
    else rs_l = new List(new (chs)aprintf("%d#%d",m,n), rs_l);
    if (lower_prec(r2,r)) rs_l = pr_rule2string_paren_l(rs_l,r2,with_annotations); 
    else rs_l = pr_rule2string_l(rs_l,r2,with_annotations);
    break;
  case &Hash(m,&Infinity,r2):
    if (m == 0) rs_l = new List(new "#", rs_l);
    else rs_l = new List(new (chs)aprintf("%d#",m), rs_l);
    if (lower_prec(r2,r)) rs_l = pr_rule2string_paren_l(rs_l,r2,with_annotations); 
    else rs_l = pr_rule2string_l(rs_l,r2,with_annotations);
    break;
  case &Minus(r2,r3):
    rs_l = new List(new "(", rs_l); 
    rs_l = pr_rule2string_paren_l(rs_l,r2,with_annotations); 
    rs_l = new List(new "-", rs_l); 
    rs_l = pr_rule2string_paren_l(rs_l,r3,with_annotations); 
    rs_l = new List(new ")", rs_l);
    break;
  }

  if (with_annotations){
    if (r->v) {
      switch (r->r) {
      case &Seq(_,_): 
      case &Alt(_,_): 
	rs_l = new List(new ")", rs_l); break;
      default: break;
      }
      rs_l = new List(new (chs)aprintf("$%s",r->v), rs_l);
    }
    if (r->a) {
      switch (r->r) {
      case &Alt(_,_): rs_l = new List(new ")", rs_l); break;
      default: break;
      }
      rs_l = new List(new (chs)aprintf(" {%s}",r->a), rs_l);
    }
  }

  return rs_l;
}

const char ?pr_rule2string(rule_t r){
  let rs_l = pr_rule2string_l(NULL, r, 1);
  return strconcat_l(List::imp_rev(rs_l));
}

