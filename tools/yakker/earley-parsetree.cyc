#include <string.h>
#include <core.h>
#include <list.h>

#include "earley-parsetree.h"

namespace EarleyParsetree;

void print_LT_parse_forest(shared_parse_forest_t pf, int depth);

void print_LT(datatype SharedParseTree @pt, int depth){
  switch (pt) {
  case &NonTerm(name,l,r,w,children):
    printf("<t s=\"%s(%s)\" l=\"%d\" r=\"%d\">",name,Semiring::print_weight(w),l,r);
  print_LT_parse_forest(children, depth);
    printf("</t>");
    break;
  case &SharedNonTerm(name,l,r,w,children_list):
    printf("<t s=\"%s(%s)\" l=\"%d\" r=\"%d\">",name,Semiring::print_weight(w),l,r);
  print_LT_parse_forest(children_list->hd,depth);
    printf("</t>");
    break;
  }
}

void print_LT_parse_forest(shared_parse_forest_t pf, int depth){
  if (depth > 0){
    let d = depth - 1;
    for(let ts = (_*)List::rev(pf); ts; ts = ts->tl)
      print_LT(ts->hd, d);
  } else if(depth == -1) {
    for(let ts = (_*)List::rev(pf); ts; ts = ts->tl)
      print_LT(ts->hd, -1);
  }
}

void print_tree(parse_tree_t pt, int depth){
  let &parse_tree(name,l,r,w,children) = pt;
  printf("<t s=\"%s(%s)\" l=\"%d\" r=\"%d\">",name,Semiring::print_weight(w),l,r);

  if (depth > 0){
	  let n = numelts(children);
	  for (int i = 0; i < n; i++){
	  	print_tree(children[i],depth-1);
	  }
  } else if(depth == -1){
	  let n = numelts(children);
	  for (int i = 0; i < n; i++){
	  	print_tree(children[i],-1);
	  }  
  }
  
  printf("</t>");
}
