/* flatten.cyc
 * Library for converting an ABNF grammar into an ABNF grammar with .
 */

/* Copyright (C) 2007 Greg Morrisett, AT&T.
   This file is part of the Cyclone project.

   Cyclone is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   Cyclone is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Cyclone; see the file COPYING. If not,
   write to the Free Software Foundation, Inc., 59 Temple Place -
   Suite 330, Boston, MA 02111-1307, USA. */

#include <core.h>
#include <list.h>
#include <string.h>
#include <stdio.h>
#include <hashtable.h>

#include "bnf.h"
#include "analyze.h"
#include "flatten.h"

using List;
/////////////////////////////////////////////
// Functions for flattening a BNF - i.e. transferring
// all nested elements into symbol definitions. Also decodes hash into
// simple constructs.
////////////////////////////////

$(grammar_t, rule_t) @flatten_rule0(const char ?`H ctxt_name, rule_t r);

const char ?mk_name(const char ?`H ctxt_name, unsigned int n){
  return strconcat(ctxt_name, aprintf("_%d",n));
}

$(grammar_t, rule_t, unsigned int) @seq_flatten_rule(const char ?`H ctxt_name, rule_t r, unsigned int n_elt){
    switch (r->r) {
    case &Seq(r1,r2):
      let &$(defs1, r1_flat, m_elt)  = seq_flatten_rule(ctxt_name, r1, n_elt);
      let &$(defs2, r2_flat, mn_elt) = seq_flatten_rule(ctxt_name, r2, m_elt);
      return new $(append(defs1,defs2), 
		   SEQ_r(r, r1_flat, r2_flat),
		   mn_elt);
    default:
      let new_ctxt_name = mk_name(ctxt_name, n_elt);
      let &$(g, r_flat) = flatten_rule0(new_ctxt_name, r);
      return new $(g, r_flat, n_elt + 1);
    }  
}

$(grammar_t, rule_t, unsigned int) @alt_flatten_rule(const char ?`H ctxt_name, rule_t r, unsigned int n_elt){
    switch (r->r) {
    case &Alt(r1,r2):
      let &$(defs1, r1_flat, m_elt)  = alt_flatten_rule(ctxt_name, r1, n_elt);
      let &$(defs2, r2_flat, mn_elt) = alt_flatten_rule(ctxt_name, r2, m_elt);
      return new $(append(defs1,defs2), 
		   ALT_r(r, r1_flat, r2_flat),
		   mn_elt);
    default:
      let new_ctxt_name = mk_name(ctxt_name, n_elt);
      let &$(g, r_flat) = flatten_rule0(new_ctxt_name, r);
      return new $(g, r_flat, n_elt + 1);
    }  
}

static struct Attr empty_attr = Attr{.ws=0,.re=0,.paramtype=NULL,.rettype=NULL};

$(grammar_t, rule_t) @flatten_rule0(const char ?`H ctxt_name, rule_t r){
    switch (r->r) {
    case &Seq(r1,r2):
      let &$(defs1, r1_flat, n_elt) = seq_flatten_rule(ctxt_name, r1, 1);
      let &$(defs2, r2_flat, _)     = seq_flatten_rule(ctxt_name, r2, n_elt);
      let r_flat = SEQ_r(r, r1_flat, r2_flat);
      // define new symbol with r_flat
      let r_def = new $(ctxt_name, r_flat, empty_attr);
      // add new symbol to list of defs.
      let defs = append(defs1, append(defs2, new List(r_def,NULL)));
      return new $(defs, SYMB(ctxt_name));

    case &Opt(r1):
      let new_ctxt_name = mk_name(ctxt_name, 1);      
      let &$(defs1, r1_flat) = flatten_rule0(new_ctxt_name, r1);
      let r_flat = OPT_r(r, r1_flat);
      // define new symbol with r_flat
      let r_def = new $(ctxt_name, r_flat, empty_attr);
      // add new symbol to list of defs.
      let defs = append(defs1, new List(r_def,NULL));
      return new $(defs, SYMB(ctxt_name));

    case &Alt(r1,r2):
      let &$(defs1, r1_flat, n_elt) = alt_flatten_rule(ctxt_name, r1, 1);
      let &$(defs2, r2_flat, _)     = alt_flatten_rule(ctxt_name, r2, n_elt);
      let r_flat = ALT_r(r, r1_flat, r2_flat);
      // define new symbol with r_flat
      let r_def = new $(ctxt_name, r_flat, empty_attr);
      // add new symbol to list of defs.
      let defs = append(defs1, append(defs2, new List(r_def,NULL)));
      return new $(defs, SYMB(ctxt_name));

    case &Rcount(n,r1):
      let new_ctxt_name = mk_name(ctxt_name, 1);      
      let &$(defs1, r1_flat) = flatten_rule0(new_ctxt_name, r1);
      let r_flat = RCOUNT_r(r,n, r1_flat);
      // define new symbol with r_flat
      let r_def = new $(ctxt_name, r_flat, empty_attr);
      // add new symbol to list of defs.
      let defs = append(defs1, new List(r_def,NULL));
      return new $(defs, SYMB(ctxt_name));

    case &Star(m,N,r1):
      let new_ctxt_name = mk_name(ctxt_name, 1);      
      let &$(defs1, r1_flat) = flatten_rule0(new_ctxt_name, r1);
      let r_flat = STAR_r(r, m,N, r1_flat);
      // define new symbol with r_flat
      let r_def = new $(ctxt_name, r_flat, empty_attr);
      // add new symbol to list of defs.
      let defs = append(defs1, new List(r_def,NULL));
      return new $(defs, SYMB(ctxt_name));

    case &Hash(m,N,r1):
      let r_s = hash2star(m,N,r1);
      return flatten_rule0(ctxt_name,r_s);

    default:
      return new $(NULL, r);
    }  
}

$(grammar_t, rule_t) @flatten_rule(const char ?`H symb, rule_t r){
  let ctxt_name = strconcat(symb, "__elt");
  //At the top level, we don't want elements being flattened.
  switch(r->r){
  case &Seq(_,_):
    let &$(defs, r_flat, _) = seq_flatten_rule(ctxt_name, r, 1);
    return new $(defs, r_flat);
  
  case &Alt(r1,r2):
    let &$(defs, r_flat, _) = alt_flatten_rule(ctxt_name, r, 1);
    return new $(defs, r_flat);
 
  case &Opt(r1):
    let &$(defs1, r1_flat) = flatten_rule0(ctxt_name, r1);
    return new $(defs1, OPT_r(r, r1_flat));

  case &Rcount(n,r1):
    let &$(defs1, r1_flat) = flatten_rule0(ctxt_name, r1);
    return new $(defs1, RCOUNT_r(r, n, r1_flat));

  case &Star(m,N,r1):
    let &$(defs1, r1_flat) = flatten_rule0(ctxt_name, r1);
    return new $(defs1, STAR_r(r, m,N, r1_flat));

  case &Hash(m,N,r1):
    let &$(defs1, r1_flat) = flatten_rule0(ctxt_name, r1);
    return new $(defs1, HASH_r(r, m,N, r1_flat));

   default:
      return flatten_rule0(ctxt_name, r);
  }
}

grammar_t flatten_grammar(grammar_t g) {
  init_arityt(g);

  grammar_t res = NULL,ds = g;
  for (; ds; ds = ds->tl) {
    let &$(n,r,a) = ds->hd;
    if (arity_rule(SYMB(n))){
      let &$(new_defs, r_flat) = flatten_rule(n,r);
      res = revappend(new_defs,res);
      res = new List(new $(n, r_flat, a), res);
    } else {
      res = new List(new $(n,r,a), res);
    }      
  }

  res = imp_rev(res);
  return res;
}


