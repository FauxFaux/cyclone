
Here we give a brief top-down roadmap to the Cyclone source
distribution.  You do not need any of this information for using
Cyclone or any of the tools; it is provided to help you browse our
code.

For the distribution, we have put the pdf versions of the manuals in
the top directory:
    main-screen.pdf, main-letter.pdf, and main-a4.pdf all have the same
    information.
The HTML version is in doc/online-manual.

DIRECTORIES

Subdirectories are indented.

include: the header files for the Cyclone library.  Subdirectories
arpa, netinet, and sys have similar roles as in gcc.  install can copy
all these header files to a more standard place.

  arch: Only needed for cross-compiling. contains one file for each
        supported architecture.  The file contains the constants in
        the architecture's C library header files that Cyclone needs.

tools: the source code for various tools written in Cyclone

  cyclex: a lexer generator, produces Cyclone lexers.  Ported from
          ocamllex, a lexer generator for O'Caml written in O'Caml.

     genfiles: needed for bootstrapping the lexer generator, because
               the lexer generator sources include a lex file!

  cycbison: a parser generator, produces Cyclone parsers.  Ported from
            bison, a gnu parser generator for C written in C.

  aprof: an allocation profiler.  A Cyclone program compiled with -pa
         produces a file that logs every allocation and the program point
         responsible for it.  aprof processes this information and summarizes
         it.

doc: documentation and emacs-mode support. 
    Producing the documentation pdf requires pdflatex and producing
    html requires hevea.  We distribute the "compiled" versions so
    that you don't need these programs.  The "top" file is
    main-letter.tex, main-screen.tex, or main-a4.tex, depending on
    your desires.
       
    The emacs-mode is a hack that you may not want to use:
    font-lock.el changes C++-mode to work better for Cyclone.  If you
    also write C++ code in emacs, you won't like these changes.  You
    also need to put the code in cyclone_dot_emacs.el into your .emacs.

    todo.txt is used by the developers to remind themselves how much
    work remains.

    online-manual
       contains the html version of the documentation.

tests: contains various tests and small programs.  Many of the programs were
       ported from C and we have the original C versions for comparison 
       purposes.

       cyctest.cyc tests many language features and library calls.
       foo.y is a small grammar for testing cycbison
       finger.cyc is a Cyclone version of the finger program

       compress: two different programs that perform file compression

       smlng: our submission to the 2001 ICFP programming contest       

       shootout: Cyclone versions of the programs at
                 http://www.bagley.org/~doug/shootout/

       tpop: Cyclone versions of some programs from The Practice of Programming
             (Kernighan and Pike)

lib: the source for the Cyclone library.  It is all in Cyclone files that
     correspond to the header files in include.  The one exception is
     runtime_cyc.c that contains the C functions used to implement facilities
     like exceptions and array-bounds checks.  See the documentation
     for a description of the library.

src: the source for the Cyclone compiler and cycdoc.  Roughly
     "front-to-back", there is: a lexer (lex.cyl), parser (parse.y),
     type-checker (tc.cyc for overall control, tcdecl.cyc for
     declarations, tcstmt.cyc for statements, tcexp.cyc for
     expressions, tcpat.cyc for patterns, tcutil.cyc for auxiliary
     operations over types, and tcenv.cyc for manipulating the
     type-checking environment), control-flow checker
     (new_control_flow.cyc for overall control, cf_absexp for an
     abstract evaluation of expressions, cf_flowinfo for manipulating
     the dataflow information), translation to C (toc.cyc), and
     printing (absyndump.cyc for fast printing, absynpp.cyc for slower
     but more readable printing).  The entire compiler works on the
     same abstract syntax (absyn.cyc -- actually see absyn.h).  Files
     not yet mentioned are: evexp.cyc -- evaluates constant
     expressions.  formatstr.cyc -- checks printf and scanf
     attributes.  tovc.cyc -- for translating to output digestable by
     Microsoft Visual C (not yet officially supported).  interface.cyc
     -- for doing link-checking between Cyclone files (not yet
     officially supported).  cyclone.cyc for command-line processing
     and invoking the other phases.

bin: where the initial cyclone compiler and tools are put.  install
can copy the executables to a more standard place.

  cyc-lib: where the initial Cyclone library (libcyc.a), garbage-collector
           (gc.a), and garbage-collector stub (nogc.a) are put.  install
           can copy the libraries to a more standard place.

     include: contains cyc_include.h, the file that the compiler prepends
              to all C code it produces before calling gcc.  (It doesn't 
              actually prepend the code; it uses gcc's -include option.)
              install copies the include directory to wherever the libraries
              are copied.

  genfiles: contains one subdirectory for each supported architecture.
            Each subdirectory has lib and src directories for the C files
            that build the Cyclone library and compiler, respectively.
            The platform differences are exceedingly minor (eg. the
            value of certain signal constants).  All the C files (except
            lib/runtime_cyc.c) were generated by the Cyclone compiler
            (the system is bootstrapping), so like most machine-generated code,
            they are hard to read.

  config: config.guess is used by configure to determine the platform.
          cyc_install installs the tools and libraries (remembering where)
                      and can uninstall previously installations
          cyccpp is a pre-processor wrapper used for cross-compiling Cyclone.
         
          arch: contains two files for each supported architecture.  The files
                are used by cyccpp when cross-compiling. One file
                describes what macros to undefine when the architecture is the
                host.  One file describes what macros to define when the
                architecture is the target.

gc: contains the Boehm-Demers-Weiser conservative garbage collector.  We have
    not modified the collector.
