# Architecture-specific configuration.
# 
# TODO:
#   better job of finding egrep
#

######### figure out the architecture
PATCH_ARCH=i686-unknown-linux
ARCH=`config/config.guess`
TARGET=`echo ${ARCH} | awk -F'-' '{ print $1 }'`
TYPE=`echo ${ARCH} | awk -F'-' '{ print $2 }'`
OS=`echo ${ARCH} | awk -F'-' '{ print $3 }'`

# quit if we know the architecture won't work
case "$OS" in
  cygwin1.3.2)
    echo "Cygwin 1.3.2 is not supported---upgrade to version 1.3.10"
    exit 1
  ;;
  cygwin1.3.3)
    echo "Cygwin 1.3.3 is not supported---upgrade to version 1.3.10"
    exit 1
  ;;
esac

# get the root directory of the source tree and set up WHICH.
# Note: under Cygwin, pwd can return a path name containing a colon.
#  Such path names don't work in make's VPATH, so we convert them
#  to path names without colons using the cygpath command.
# We use 'command -v' for WHICH because it seems to work on Mac OS X, 
# solaris, linux, and IRIX.  Other options are 'type -p' and 'which'.
case "$OS" in
  cygwin*)
    PWD=`pwd`
    CYCDIR=`cygpath -u "$PWD"`
    WHICH='which'
  ;;
  freebsd*)
    CYCDIR=`pwd`
    WHICH='which'
  ;;
  *)
    CYCDIR=`pwd`
    WHICH='command -v'
  ;;
esac


########## find a suitable version of diff
DIFF="diff"
# make sure it's GNU diff
TMPFILE=/tmp/cyconfig$$
$DIFF --version > $TMPFILE 2>&1
grep GNU $TMPFILE > /dev/null
if [ $? != 0 ]; then
  if [ "$TYPE" = "sun" ]; then
    f="/usr/local/gnu/diffutils-2.6/bin/diff"
    if [ -f "$f" ]; then
      DIFF=$f
    else
      echo "Warning: could not find $f"
      echo "  files bin/genfiles/${ARCH}* may be incorrect/incomplete"
    fi
  fi
fi
rm -f $TMPFILE

########## find a suitable version of egrep
EGREP="egrep"
if [ "$TYPE" = "sun" ]; then
  f="/usr/xpg4/bin/egrep"
  if [ -f "$f" ]; then
    EGREP=$f
  else
    echo "Warning: could not find $f"
    echo "  files bin/genfiles/${ARCH}* may be incorrect/incomplete"
  fi
fi

########## find a suitable version of cc, along with special flags
#   if we can't find gcc, use cc (which, if not symlinked to gcc,
#   will fail)
CC=gcc
if [ "$TYPE" = "apple" ]; then
  CC="gcc -no-cpp-precomp -Wno-long-double"
else
  for comp in gcc cc; do
    CC=`$WHICH $comp 2> /dev/null`
    if [ -n "$CC" -a -x "$CC" ]; then
      CC=$comp
      break
    fi
  done
fi
if [ -z "$CC" ]; then
  echo "Could not find gcc or cc on this system"
  exit 1
fi
if [ "$TARGET" = "i686" ]; then
  CC="$CC -march=i686"
fi

##### set up default Cyclone load flags
LDFLAGS=
if [ "$TYPE" = "sun" ]; then
  LDFLAGS="-lnsl -lsocket -lresolv"
fi

###########################################################################
#  incdir="$CYCDIR/include"
#  libdir="$CYCDIR/bin/cyc-lib"
#  bindir=

incdir="/usr/include/cyclone"
libdir="/usr/local/lib/cyclone"
bindir="/usr/local/bin"

# handle command-line arguments
#
while [ $# != 0 ]; do
  case "$1" in
    -bindir) # set the directory to store the binaries
        shift
        if [ $# = 0 ]; then 
	  echo "-bindir must specify a directory"; exit 1; fi
        bindir=$1
        shift
    ;;
    -libdir) # set the library directory
        shift
        if [ $# = 0 ]; then 
	  echo "-libdir must specify a directory"; exit 1; fi
        libdir=$1
        shift
    ;;
    -incdir) # set the include directory
        shift
        if [ $# = 0 ]; then 
	  echo "-incdir must specify a directory"; exit 1; fi
        incdir=$1
        shift
    ;;
    -prefix) # set directories to prefix/bin prefix/lib/cyclone ...
        shift
        if [ $# = 0 ]; then 
	  echo "-prefix must specify a directory prefix"; exit 1; fi
	prefix=$1
        shift
    ;;
    *) # bad option
        echo "usage: configure [-sh shell] [-incdir dir] [-bindir dir] [-libdir dir] [-prefix pre]";
        exit 1
    ;;
  esac
done

if [ -n "$prefix" ]; then
  bindir="$prefix/bin"
  libdir="$prefix/lib/cyclone"
fi

# function to cleanup if we can't port the arch
cleanup () {
  \rm -rf ${CYCDIR}/bin/genfiles/${ARCH}*
  exit 1
}

cd config

# see if we have #defines for this architecture
if [ ! -f "${CYCDIR}/bin/genfiles/${ARCH}.cycspecs" ]; then
  echo "Setting up architecture ${ARCH}"
  ${CYCDIR}/config/buildspecs > ${CYCDIR}/bin/genfiles/${ARCH}.cycspecs
  if [ $? != 0 ]; then
    echo "error creating ${CYCDIR}/bin/genfiles/${ARCH}.cycspecs"
    cleanup
  fi
  export EGREP
  export CC
else
  echo "Supported architecture ${ARCH}"
fi

# set up the installation paths
chkdir () {
  echo -n "  $1=$2"
  if [ ! -d "$2" ]; then
    echo " (will create)"
  else
    echo
  fi
}
echo "Will install into"
chkdir "binaries" $bindir
chkdir "libraries" $libdir
chkdir "include files" $incdir

# figure out all supported architectures by checking for config files
ALL_ARCHS=`cd ../bin/genfiles/; \ls -1 *.cycspecs | sed -e 's/\.cycspecs//' | awk '{printf("%s ",$1);}'`

# write the config Makefile
cd ..

(cat <<EOF
# -*- Makefile -*-
# THIS FILE IS AUTOMATICALLY GENERATED BY configure FROM Makefine.inc.in

# architecture specific defines
CYCDIR=${CYCDIR}
ARCH=${ARCH}
INC_INSTALL=${incdir}
BIN_INSTALL=${bindir}
LIB_INSTALL=${libdir}
ALL_ARCHS=${ALL_ARCHS}
CC=${CC}
LDFLAGS=${LDFLAGS}
SHELL=${CONFIGSHELL}
DIFF=${DIFF}

EOF
cat Makefile.inc.in) > Makefile.inc
