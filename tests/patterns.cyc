#include <core.h>
#include <stdio.h>

/*********************** NON-UNIQUE, 1-2 LEVEL PATTERNS *********************/

struct s1<`r> {
  int *`r p;
  int y;
};

// Aggregate pattern; should propagate equality of px and p, and ps and s.
void func1() {
  int *px = new 1;
  struct s1 @s = new s1{.p=px,.y=1};
  let ps as &s1{.p=p,...} = s;
  return;
}

// Aggregate pattern with fallthru
void func1a(struct s1 @s) {
  bool gotnull = false;
  switch (s) {
  case &s1{.p=p1 as NULL,.y=y1}: gotnull=true; fallthru(p1,y1);
  case &s1{.p=p2,.y=y2}: printf("%x\n",p2); break;
  }
  return;
}

// Aggregate pattern on partially initialized aggregate
void func1b() {
  struct s1 @s = malloc(sizeof(struct s1));
  s->y = 1;
  let ps as &s1{.p=p,.y=y} = s; // p will be uninitialized
//   y = *p; // should fail
  struct s1 @s2 = malloc(sizeof(struct s1));
  s2->p = NULL;
  let &s1{.p=p2,.y=y2} = s2; // y2 will be uninitialized
//   *p2 = 1; // should fail (null dereference)
  return;
}  

// Aggregate pattern through unique pointer to a unique pointer
void func1c(struct s1<`U> @`U s) __attribute__((consume(1))) {
  s->y = 1;
  let ps as &s1{.p=p,.y=y} = s; // s, s->p consumed; ps, p available
  Core::ufree(ps);
  Core::ufree(p);
//   Core::ufree(s); // fail
  return;
}  


// Aggregate pattern through unique pointer to TR pointer
void func1d(struct s1<`RC> @`U s) __attribute__((consume(1))) {
  let &s1{.p=p,...} = s; // s->p consumed; s, p available
  Core::drop_refptr(p);
  Core::ufree(s);
}  

// should fail: reference pattern on unique pointer
// void func1e(struct s1<`RC> @`U s) {
//   let &s1{.p=*p,...} = s; // should fail
// }  

// should fail: can't match against unique pointer in global variable
// struct s1<`U> *`U g = NULL;
// void func1f() {
//   g = new s1(NULL,5);
//   switch (g) {
//   case &s1{.p=p,...}: Core::ufree(p); break;
//   }
//   Core::ufree(g);
// }

/*---------------------*/
datatype Foo {
  IntStar(int *);
  IntStar2(int *);
};

// Datatype pattern; should propagate equality between s and ps, but 
// not between p and px
void func2() {
  int *px = new 1;
  datatype Foo @f = new IntStar(px);
  let ps as &IntStar(p) = f;
  return;
}

// Datatype pattern: should not consume f
int *func3(datatype Foo @`U f) {
  int *y;
  switch (f) {
  case &IntStar(px): y = px; break;
  case &IntStar2(py):y = py; break;
  }
  return y; 
}

// Datatype pattern; should fail due to lack of initialization
// void func3a() {
//   datatype Foo @f;
//   switch (f) {
//   case &IntStar(px):  break;
//   case &IntStar2(py): break;
//   }
// }

/*---------------------*/

struct s2<`r> {
  datatype Foo @`r f;
  int g;
};

// Nested datatype in aggr pattern: should equate f and pf, but not
// x and NULL
int *func4() {
  datatype Foo @f = new IntStar(NULL);
  struct s2 @ps2 = new s2{.f=f, .g=1};
  switch (ps2) {
  case &s2{.f=pf as &IntStar(x),...}: return x;
  default: return NULL;
  }
}

int *func4a() {
  datatype Foo @fp;
  struct s2 *ps2 = malloc(sizeof(struct s2));
  ps2->g=1;
  switch (ps2) {
//   case &s2{.f=pf as &IntStar(x),...}: return x; // should fail; not init
  case &s2{.f=pf2,...}: fp = pf2; break;
    // at this point, both fp and pf2 are uninitialized
  default: return NULL;
  }
  return NULL;
}

void func4b(struct s2<`U> *ps) {
  switch (ps) {
  case &s2{.f=&IntStar(px), .g=g}: break;
//   case &s2{.f=pf, .g=g}: break; // fails
  default: break;
  }
} 

void func4c() {
  struct s2<`U> @@`U pps = new (new s2(new IntStar(NULL),5));
//   let &&s2{.f=pf,...} = pps; // fail: non-unique path to unique pointer
  let &&s2{.f=&IntStar(p),...} = pps; // ok
  int *x = p;
}


/*---------------------*/

datatype Bar {
  AFoo(datatype Foo @);
  AIntStar(int *);
};

// Nested datatype pattern; no equalities; uses the root b
int *func5(datatype Bar @b) {
  int *y;
  switch (b) {
  case &AFoo(&IntStar(x1)):  y = x1; break;
  case &AFoo(&IntStar2(x2)): y = x2; break;
  case &AIntStar(x3):        y = x3; break;
  }
  return y;
}

/*---------------------*/

// Tuple matching
int func6() {
  $(int*,int*,$(int*,int*)) x;
  x[0] = NULL;
  x[2] = $(NULL,new 1);
  let $(v1,v2,$(v3,v4)) = x;
  return *v4;
}

int main() {
  func1();
  func1a(new s1{new 3,4});
  func1b();
  func1c(unew s1{unew 3,4});
  func1d(unew s1{rcnew 3,4});
  func2();
  let v = unew IntStar(new 3);
  func3(v);
  func4();
  func4a();
  func4b(NULL);
  func4c();
  func5(new AIntStar(new 3));
  func6();
  return 0;
}
