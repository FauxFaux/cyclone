#include <stdio.h>
#include "typerep.h"

using Typerep;

/* Example types */
tunion Foo {
  Foo1;
  Foo2(int,int);
  Foo3(float);
  Foo4(int,tunion Foo);
#define Foo1_tag 0
#define Foo2_tag 0
#define Foo3_tag 1
#define Foo4_tag 2
};

//  int x = __gen(int);

tunion Typestruct.Int int_tag = Int(32);

/* tag Foo1 not included */
//  $(unsigned int, tunion Typestruct) 
//    elem_Foo1_tup_list_hd = $(0,(tunion Typestruct)&int_tag);
//  $(unsigned int, tunion Typestruct) @
//    elem_Foo1_tup_arr[1] = { &elem_Foo1_tup_list_hd };
//  tunion Typestruct.Tuple elem_Foo1_tup = Tuple(sizeof(int),elem_Foo1_tup_arr);
//  $(unsigned int, tunion Typestruct) 
//    elem_Foo1 = $(Foo1_tag, (tunion Typestruct)&elem_Foo1_tup);

/* tag Foo2 */
$(unsigned int, tunion Typestruct) 
  elem_Foo2_tup_list_tl_tl_hd = $(2*sizeof(int),(tunion Typestruct)&int_tag);
$(unsigned int, tunion Typestruct) 
  elem_Foo2_tup_list_tl_hd = $(sizeof(int),(tunion Typestruct)&int_tag);
$(unsigned int, tunion Typestruct) 
  elem_Foo2_tup_list_hd = $(0,(tunion Typestruct)&int_tag);
$(unsigned int, tunion Typestruct) @
  elem_Foo2_tup_arr[3] = { &elem_Foo2_tup_list_hd,
			   &elem_Foo2_tup_list_tl_hd,
			   &elem_Foo2_tup_list_tl_tl_hd };
tunion Typestruct.Tuple elem_Foo2_tup = Tuple(3*sizeof(int),
					      elem_Foo2_tup_arr);
$(unsigned int, tunion Typestruct) elem_Foo2 = 
  $(Foo2_tag, (tunion Typestruct)&elem_Foo2_tup);

/* tag Foo3 */
$(unsigned int, tunion Typestruct) 
  elem_Foo3_tup_list_tl_hd = $(sizeof(int),Float);
$(unsigned int, tunion Typestruct) 
  elem_Foo3_tup_list_hd = $(0,(tunion Typestruct)&int_tag);
$(unsigned int, tunion Typestruct) @
  elem_Foo3_tup_arr[2] = { &elem_Foo3_tup_list_hd,
			   &elem_Foo3_tup_list_tl_hd };
tunion Typestruct.Tuple elem_Foo3_tup = 
  Tuple(sizeof(float)+sizeof(int),elem_Foo3_tup_arr);
$(unsigned int, tunion Typestruct) 
  elem_Foo3 = $(Foo3_tag, (tunion Typestruct)&elem_Foo3_tup);

/* tag Foo4 */
extern tunion Typestruct.TUnion foo_rep;
$(unsigned int, tunion Typestruct) 
  elem_Foo4_tup_list_tl_tl_hd = $(2*sizeof(int),(tunion Typestruct)&foo_rep);
$(unsigned int, tunion Typestruct) 
  elem_Foo4_tup_list_tl_hd = $(sizeof(int),(tunion Typestruct)&int_tag);
$(unsigned int, tunion Typestruct) 
  elem_Foo4_tup_list_hd = $(0,(tunion Typestruct)&int_tag);
$(unsigned int, tunion Typestruct) @
  elem_Foo4_tup_arr[3] = { &elem_Foo4_tup_list_hd,
			   &elem_Foo4_tup_list_tl_hd,
			   &elem_Foo4_tup_list_tl_tl_hd };
tunion Typestruct.Tuple elem_Foo4_tup = Tuple(2*sizeof(int)+sizeof(void *),
					      elem_Foo4_tup_arr);
$(unsigned int, tunion Typestruct) elem_Foo4 = 
  $(Foo4_tag, (tunion Typestruct)&elem_Foo4_tup);

/* typerep for Foo */
$(unsigned int,tunion Typestruct)@ 
  elems_Foo_arr[3] = { &elem_Foo2, &elem_Foo3, &elem_Foo4 };
tunion Typestruct.TUnion foo_rep = TUnion(($(unsigned int,tunion Typestruct)@ ?)elems_Foo_arr);

extern "C" `b unsafe_cast<`b,`a>(`a x);

void do_print(tunion Foo f) {
  int @foo = unsafe_cast(f);
  print_type((tunion Typestruct)&foo_rep,foo);
  printf("\n");
}

void main() {
  tunion Foo f;

  f = Foo1;
  do_print(f);

  f = new Foo2(1,2);
  do_print(f);

  f = new Foo3(1.245);
  do_print(f);

  f = new Foo4(1,f);
  do_print(f);
}
