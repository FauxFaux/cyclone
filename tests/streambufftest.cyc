#include <core.h>
#include <queue.h>
#include <assert.h>
#include <string.h>
#include "streambuff.h"

static bool matchPrio(unsigned int prio, streambuff_opt_t<`U> stb)
  __attribute__((noconsume(2))) {

  return (stb->priority == prio) && (stb->typ == Packet);
}

static int mystrcmp(char ? @nozeroterm @buf, char ? @nozeroterm buf2) {
  return strcmp(*buf,buf2);
}
static int stb_cmp_buf(streambuff_t stb, char ? @nozeroterm `r buf) {
  return stb_with_buffer(stb, 0, mystrcmp@<`r,`stb_cmp_buf><>, &buf);
}
int stb_cmp(streambuff_t<`x> stb1, streambuff_t<`r> stb2) {
  if (stb_num_bufs(stb1) != 1)
    stb1 = stb_copy((region_t<`x>)Core::heap_region,0,stb1);
  if (stb_num_bufs(stb2) != 1)
    stb2 = stb_copy((region_t<`r>)Core::heap_region,0,stb2);
  return stb_with_buffer(stb1, 0, stb_cmp_buf@<`r><>, stb2);
}

void bufqueue_test() {
  Queue::queue_t<streambuff_opt_t<`U>> q = Queue::create();
  for (unsigned int i = 0; i<10; i++) {
    let stb = alloc_stb(Core::unique_region,
			Packet, "eth0", i, new { for i < 10*i : char });
    Queue::add(q,stb);
  }

  let stb = (streambuff_t)Queue::take_match(Core::heap_region,q,matchPrio,8);
  assert(stb_size(stb) == 80);
  assert(Queue::length(q) == 9);
  stb_free_unique(stb);

  assert(Queue::take_match(Core::heap_region,q,matchPrio,8) == NULL); 
  assert(Queue::length(q) == 9);

  stb = (streambuff_t)Queue::ptr_take(q);
  assert(Queue::length(q) == 8);
  assert(stb_size(stb) == 0);
  stb_free_unique(stb);

  while (!Queue::is_empty(q)) {
    stb = (streambuff_t)Queue::ptr_take(q);
    stb_free_unique(stb);
  }
  assert(Queue::length(q) == 0);
}

void copy_test() {
  let stb = alloc_stb(Core::unique_region, Packet, "eth0", 1, "hello");
  let stb2 = stb_copy(Core::unique_region,1,stb); // "ello"
  assert(stb_size(stb) == 6); // includes null terminator
  assert(stb_size(stb) -1 == stb_size(stb2));
  assert(stb_noaliases(stb));
  assert(stb_noaliases(stb2));
  unsigned int stb_addr, stb3_addr;
  { alias <`r> streambuff_t<`r> x = stb; stb_addr = (unsigned int)x; }
  let stb3 = stb_rest(3,stb); // "lo"
  { alias <`r> streambuff_t<`r> x = stb3; stb3_addr = (unsigned int)x; }
  assert(stb_addr == stb3_addr);
  assert(stb_size(stb3) == 3);
  stb_free_unique(stb3);
  stb_free_unique(stb2);
}

void clone_test() {
  let stb = alloc_stb(Core::unique_region, Packet, "eth0", 1, "hello");
  let stb2 = stb_clone(Core::unique_region,stb);
  assert(stb_size(stb) == stb_size(stb2));
  assert(!stb_cmp(stb,stb2));
  assert(!stb_noaliases(stb));
  assert(!stb_noaliases(stb2));
  let stb3 = stb_clone(Core::unique_region,stb);
  unsigned int stb_addr, stb4_addr;
  { alias <`r> streambuff_t<`r> x = stb; stb_addr = (unsigned int)x; }
  let stb4 = stb_rest(3,stb);
  { alias <`r> streambuff_t<`r> x = stb4; stb4_addr = (unsigned int)x; }
  assert(stb_size(stb4) == 3);
  assert(stb_size(stb3) == stb_size(stb2));
  assert(!stb_cmp(stb3,stb2));
  stb_free_unique(stb3);
  stb_free_unique(stb2);
  stb_free_unique(stb4);
}

void prepend_test() {
  streambuff_t stb = alloc_stb(Core::unique_region,Packet,"eth0", 1, "hello");
  char ? @nozeroterm `RC rbuf = rmalloc (Core::refcnt_region,6);
  rbuf[0] = rbuf[1] = rbuf[2] = rbuf[3] = rbuf[4] =rbuf[5] = 'a';
  streambuff_t stb2 = stb_prepend(Core::unique_region,stb,rbuf);
  assert(stb_size(stb) == stb_size(stb2) - 6);
  assert(stb_cmp(stb,stb2) > 0);
  assert(!stb_noaliases(stb));
  assert(!stb_noaliases(stb2));
  let stb3 = stb_rest(4,stb2);
  assert(stb_size(stb) + 2 == stb_size(stb3));
  assert(stb_cmp(stb,stb3) > 0);
  let stb4 = stb_rest(2,stb3);
  assert(stb_size(stb) == stb_size(stb4));
  assert(!stb_cmp(stb,stb4));
  stb_free_unique(stb4);
  stb_free_unique(stb);
}

int main(int argc, char ??argv) {
  bufqueue_test();
  copy_test();
  clone_test();
  prepend_test();
  return 0;
}
