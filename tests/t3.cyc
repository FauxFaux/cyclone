// struct cons<`a>;
typedef struct cons<`a> {`a hd; struct cons<`a>* tl;} *list<`a>;

struct cons<`a> {`a hd; struct cons<`a>* tl;};
extern struct cons<`a> {`a hd; struct cons<`a>* tl;};
extern struct cons<`b> {`b hd; struct cons<`b>* tl;};
extern struct cons<`a> {`a hd; list<`a> tl;};
extern struct cons<`c> {`c hd; list<`c> tl;};
extern struct cons<`a>;
struct cons<`c>;

enum exp_node<`prim>;
typedef enum exp_node<`prim> exp<`prim>;
enum exp_node<`prim> { 
  Prim(`prim), 
  App(exp<`prim>,exp<`prim>), 
  Lam(char[?],exp<`prim>)
};
enum exp_node<`a> { 
  Prim(`a), 
  App(exp<`a>,exp<`a>), 
  Lam(char[?],exp<`a>)
};
extern enum exp_node<`a> { 
  Prim(`a), 
  App(exp<`a>,exp<`a>), 
  Lam(char[?],exp<`a>)
};

extern unsigned int length<`a>(list<`a> x);

unsigned int length<`a>(list<`a> x) {
  unsigned int i = (unsigned int)0;
  for (; x != null; x = x->tl, i++) ; // skip
  return i;
}

int foo1(int x) {
  int y;
  switch (x) {
  case 1: y = 4; break;
  case 2: fallthru;
  case 3: fallthru;
  case 4: y = 2; break;
  default: y = 0; break;
  }
  return y;
}

int foo2(int x, int y) {
  switch ($(x,y)) {
  case $(0,y) where y > 0: return 1;
  case $(0,y) where y == 0: return 0;
  default: break;
  }
  y = sizeof(int);
  // y = sizeof(int[]);
  // y = sizeof(int[sizeof(3)]);
  y = sizeof(int[?]);
  y = sizeof(int@);
  return y;
}

int foo3() {

  int x[?] = {1,2,3,4,};
  char s[?] = xprintf("%s %d %c","hello",3,'a');

  printf("hello\n");
  printf("%s %d %c","hello",3,'a');
  
  return x[0];
}

Int foo4(Int x) {
  x = x + 1;
  return x;
}

int foo5(int x) {
  return foo4(x);
}
