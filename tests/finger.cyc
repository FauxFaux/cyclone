/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Tony Nardo of the Johns Hopkins University/Applied Physics Lab.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
/*static char sccsid[] = "from: @(#)net.c	5.5 (Berkeley) 6/1/90";*/
char net_rcsid[] = "$Id: finger.cyc,v 1.6 2001-08-10 22:26:25 tjim Exp $";
#endif /* not lint */

#include <core.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

using Core;

int main(int argc, char ?`H argv[]) {
  FILE *fp;
  struct in_addr *defaddr = new in_addr { 0 };
  int c, sawret, ateol;
  struct hostent *`main hp, def;
  struct servent *sp;
  struct sockaddr_in sn = { 0, 0, {0}, { for i < 8: 0 }};
  int s;
  struct in_addr *@alist = new { NULL };
  char ?`H host;

  if (argc != 2) {
    fprintf(stderr, "%s: exactly one name expected\n", argv[0]);
    exit(1);
  }

  host = strrchr(argv[1], '@');
  if (!host) {
    fprintf(stderr, "%s: no host given\n", argv[0]);
    exit(1);
  }
  *host++ = '\0';

  for (int i=0; i<8; i++) sn.sin_zero[i] = '\0';

  sp = getservbyname("finger", "tcp");
  if (!sp) {
    fprintf(stderr, "%s: tcp/finger: unknown service\n", argv[0]);
    exit(1);
  }
  sn.sin_port = sp->s_port;

  hp = gethostbyname(host);
  if (!hp) {
    if (!inet_aton(host, defaddr)) {
      fprintf(stderr, "%s: unknown host: %s\n", argv[0], host);
      exit(1);
    }
    def.h_name = host;
    def.h_addr_list = alist;
    def.h_addr = defaddr;
    def.h_length = sizeof(struct in_addr);
    def.h_addrtype = AF_INET;
    def.h_aliases = NULL;
    hp = &def;
  }
  sn.sin_family = hp->h_addrtype;
  if (hp->h_length > (int)sizeof(sn.sin_addr)) {
    hp->h_length = sizeof(sn.sin_addr);
  }
  sn.sin_addr = *hp->h_addr;

  if ((s = socket(hp->h_addrtype, SOCK_STREAM, 0)) < 0) {
    fprintf(stderr, "%s: socket: %s\n", argv[0], strerror(errno));
    exit(1);
  }

  /* print hostname before connecting, in case it takes a while */
  printf("[%s]\n", hp->h_name);
  if (connect(s, new sockaddr_in(sn)) < 0) {
    fprintf(stderr, "%s: connect: %s\n", argv[0], strerror(errno));
    close(s);
    exit(1);
  }

  /* send the name followed by <CR><LF> */
  write(s, argv[1], strlen(argv[1]));
  write(s, "\r\n", 2);

  /*
   * Read from the remote system; once we're connected, we assume some
   * data.  If none arrives, we hang until the user interrupts.
   *
   * If we see a <CR> or a <CR> with the high bit set, treat it as
   * a newline; if followed by a newline character, only output one
   * newline.
   */ 
  fp = fdopen(s, "r");
  if (!fp) {
    fprintf(stderr, "%s: fdopen: %s\n", argv[0], strerror(errno));
    close(s);
    exit(1);
  }

  sawret = 0;
  ateol = 1;
  while ((c = getc(fp)) != EOF) {
    c &= 0xff;
    if (c == ('\r'|0x80) || c == ('\n'|0x80)) c &= 0x7f;
    if (c == '\r') {
      sawret = ateol = 1;
      putchar('\n');
    } 
    else if (sawret && c == '\n') {
      sawret = 0;
      /* don't print */
    }
    else {
      if (c == '\n') ateol = 1;
      sawret = 0;
      putchar(c);
    }
  }
  if (!ateol) putchar('\n');
  fclose(fp);
  return 0;
}
