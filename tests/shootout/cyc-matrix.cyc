/*
 * http://www.bagley.org/~doug/shootout/
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "timer.h"

#define SIZE 30

int @{valueof(`j)}`r @{valueof(`i)}`r mkmatrix(region_t<`r> r,
                                               tag_t<`i> rows, 
                                               tag_t<`j> cols) {
    int count = 1;
    int @{valueof(`j)}@{valueof(`i)} m = 
       rnew(r) {for i < rows : rnew(r) {for j < cols : count++}};
    return(m);
}

void zeromatrix(tag_t<`i> rows, tag_t<`j> cols, int @{valueof(`j)}@{valueof(`i)} m) {
    unsigned int i, j;
    for (i=0; i<rows; i++) {
        let v = m[i];
	for (j=0; j<cols; j++) 
	    v[j] = 0;
    }
}

void mmult(tag_t<`i> rows,
           tag_t<`j> cols,
           int @{valueof(`j)}@{valueof(`i)} m1,
           int @{valueof(`j)}@{valueof(`j)} m2,
           int @{valueof(`j)}@{valueof(`i)} m3) {
  unsigned int i, j, k;
  int val;
  for (i=0; i<rows; i++) {
    for (j=0; j<cols; j++) {
      val = 0;
      let v1 = m1[i];
      let v3 = m3[i];
      for (k=0; k<cols; k++) {
        let v2 = m2[k];
        val += v1[k] * v2[j];
      }
      v3[j] = val;
    }
  }
  return;
}

int main(int argc, char ?argv[]) {
    int i, n = ((argc == 2) ? atoi(argv[1]) : 1);
    START_TIME
    region r {
      int @{SIZE}@{SIZE} m1;
      int @{SIZE}@{SIZE} m2;
      int @{SIZE}@{SIZE} mm;
      m1 = mkmatrix(r, SIZE, SIZE);
      m2 = mkmatrix(r, SIZE, SIZE);
      mm = mkmatrix(r, SIZE, SIZE);

      for (i=0; i<n; i++) {
	mmult(SIZE, SIZE, m1, m2, mm);
      }
      printf("%d %d %d %d\n", mm[0][0], mm[2][3], mm[3][2], mm[4][4]);
    }
    END_TIME
    return(0);
}


