#include <stdio.h>
#include <stdlib.h>
#include <list.h>
#include <time.h>
using Stdio;

#define TAGB	0
#define TAGEM	1
#define TAGI	2
#define TAGPL	3
#define TAGS	4
#define TAGTT	5
#define TAGU	6
#define TAG0	7
#define TAG1	8
#define TAG2	9
#define TAG3	10
#define TAG4	11
#define TAG5	12
#define TAG6	13
#define TAG7	14
#define TAG8	15
#define TAG9	16
#define TAGr	17
#define TAGg	18
#define TAGb	19
#define TAGc	20
#define TAGm	21
#define TAGy	22
#define TAGk	23
#define TAGw	24

string_t tag_strings[] = {
  "<B>",
  "<EM>",
  "<I>",
  "<PL>",
  "<S>",
  "<TT>",
  "<U>",
  "<0>",
  "<1>",
  "<2>",
  "<3>",
  "<4>",
  "<5>",
  "<6>",
  "<7>",
  "<8>",
  "<9>",
  "<r>",
  "<g>",
  "<b>",
  "<c>",
  "<m>",
  "<y>",
  "<k>",
  "<w>"
};

string_t end_tag_strings[] = {
  "</B>",
  "</EM>",
  "</I>",
  "</PL>",
  "</S>",
  "</TT>",
  "</U>",
  "</0>",
  "</1>",
  "</2>",
  "</3>",
  "</4>",
  "</5>",
  "</6>",
  "</7>",
  "</8>",
  "</9>",
  "</r>",
  "</g>",
  "</b>",
  "</c>",
  "</m>",
  "</y>",
  "</k>",
  "</w>"
};

/* size of tag + end tag */
int size_tag(int tag) {
  switch (tag) {
  case TAGEM:
  case TAGPL:
  case TAGTT: return 9;
  default: return 7;
  }
}

/* Generate a random int between 0 and n-1 */
int random(int n) {
  let x = (int)(((double)Stdlib::rand()/(double)RAND_MAX)*((double)n));
  if (x < 0 || x >= n) {
    fprintf(stderr,"ERROR: Random number %d out of range %d\n",x,n);
    exit(1);
  }
  return x;
}

/* Manage a stack of tags */
List::list_t<int> stack = null;

void push(int tag) {
  stack = new List::List(tag,stack);
}

bool empty() {
  return (stack == null);
}

int pop() {
  if (stack == null) {
    fprintf(stderr,"Internal error: pop on empty stack\n");
    exit(1);
  }
  let result = stack->hd;
  stack = stack->tl;
  return result;
}

/* Variables and functions for generating output */
int len = 10000;

bool printable_ok = true;

/* generate a SPC, CR, LF, or TAB */
void generate_space() {
  let choice = random(4);
  if (choice == 0) printf("%c",0x20);
  else if (choice == 1) printf("%c",0x0d);
  else if (choice == 2) printf("%c",0x0a);
  else if (choice == 3) printf("%c",0x09);
  len--;
  printable_ok = true;
}

/* generate some printable character */
void generate_printable() {
  let choice = random(26);
  printf("%c",'a'+choice);
  //  printf("x");
  len--;
  printable_ok = false;
}

/* generate an tag ending */
void generate_end_tag() {
  let tag = pop();
  printf(end_tag_strings[tag]); // SEEMS BUGGY!
  printable_ok = true;
}

/* generate a tag */
void generate_tag() {
  /* generate 1 of 25 possible tags */
  int tag = random(25);
  printf(tag_strings[tag]); // SEEMS BUGGY!
  push(tag);
  len -= size_tag(tag);
  printable_ok = true;
}




/**********************************************************************/

int main(int argc, char ??argv) {
  if (argc > 2) {
    fprintf(stderr,"Usage: generate [n]\n");
    exit(1);
  }
  /* Get optional length */
  if (argc > 1)
    sscanf(argv[1],"%d",&len);

  /* initialize random number generator */
  let t = new Time::time(null);
  if (*t<0) {
    fprintf(stderr,"Error: the time is not available\n");
    exit(1);
  }
  else Stdlib::srand(*t);

  while (len > 8) { // A tag can consume 9 characters
    /* randomly choose: generate a tag, generate a space,
       end a tag, or generate a printable character;
       but don't bother to generate two printables in a row. */ 
    let possibilities = 1 + 1 + (empty() ? 0 : 1) + (printable_ok ? 1 : 0);
    int choice = random(possibilities);
    if (choice == 0) generate_tag();
    else if (choice == 1) generate_space();
    else if (choice == 2 && !empty()) generate_end_tag();
    else generate_printable();
  }

  /* Finish up any unclosed tags */
  while (!empty()) generate_end_tag();

  /* Finish up the rest with spaces and printable characters */
  while (len > 0) {
    if (random(2))
      generate_printable();
    else
      generate_space();
  }

  return 0;
}
