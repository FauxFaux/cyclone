#include <stdio.h>
#include <stdlib.h>
#include <list.h>
#include <time.h>
#include <string.h>
using Stdio;

#define TAGB	0
#define TAGEM	1
#define TAGI	2
#define TAGPL	3
#define TAGS	4
#define TAGTT	5
#define TAGU	6
#define TAG0	7
#define TAG1	8
#define TAG2	9
#define TAG3	10
#define TAG4	11
#define TAG5	12
#define TAG6	13
#define TAG7	14
#define TAG8	15
#define TAG9	16
#define TAGr	17
#define TAGg	18
#define TAGb	19
#define TAGc	20
#define TAGm	21
#define TAGy	22
#define TAGk	23
#define TAGw	24

int color_tags[] = {TAGr, TAGg, TAGb, TAGc, TAGm, TAGy, TAGk, TAGw};
int size_tags[] = {TAG0, TAG1, TAG2, TAG3, TAG4, TAG5, TAG6, TAG7, TAG8, TAG9};

string_t tag_strings[] = {
  "<B>",
  "<EM>",
  "<I>",
  "<PL>",
  "<S>",
  "<TT>",
  "<U>",
  "<0>",
  "<1>",
  "<2>",
  "<3>",
  "<4>",
  "<5>",
  "<6>",
  "<7>",
  "<8>",
  "<9>",
  "<r>",
  "<g>",
  "<b>",
  "<c>",
  "<m>",
  "<y>",
  "<k>",
  "<w>"
};

string_t end_tag_strings[] = {
  "</B>",
  "</EM>",
  "</I>",
  "</PL>",
  "</S>",
  "</TT>",
  "</U>",
  "</0>",
  "</1>",
  "</2>",
  "</3>",
  "</4>",
  "</5>",
  "</6>",
  "</7>",
  "</8>",
  "</9>",
  "</r>",
  "</g>",
  "</b>",
  "</c>",
  "</m>",
  "</y>",
  "</k>",
  "</w>"
};

/* size of tag + end tag */
int size_tag(int tag) {
  switch (tag) {
  case TAGEM:
  case TAGPL:
  case TAGTT: return 9;
  default: return 7;
  }
}

/* Generate a random int between 0 and n-1 */
int random(int n) {
  let x = (int)(((double)Stdlib::rand()/(double)RAND_MAX)*((double)n));
  if (x < 0 || x >= n) {
    fprintf(stderr,"ERROR: Random number %d out of range %d\n",x,n);
    exit(1);
  }
  return x;
}

/* Manage a stack of tags */
List::list_t<int> stack = null;

void push(int tag) {
  stack = new List::List(tag,stack);
}

bool empty() {
  return (stack == null);
}

int pop() {
  if (stack == null) {
    fprintf(stderr,"Internal error: pop on empty stack\n");
    exit(1);
  }
  let result = stack->hd;
  stack = stack->tl;
  return result;
}

/* Variables and functions for generating output */
int len = 10000;

bool printable_ok = true;

/* generate a SPC, CR, LF, or TAB */
void generate_space() {
  let choice = random(4);
  if (choice == 0) printf("%c",0x20);
  else if (choice == 1) printf("%c",0x0d);
  else if (choice == 2) printf("%c",0x0a);
  else if (choice == 3) printf("%c",0x09);
  len--;
  printable_ok = true;
}

/* generate some printable character */
void generate_printable() {
  let choice = random(26);
  printf("%c",'a'+choice);
  //  printf("x");
  len--;
  printable_ok = false;
}

/* generate an tag ending */
void generate_end_tag() {
  let tag = pop();
  printf(end_tag_strings[tag]); // SEEMS BUGGY!
  printable_ok = true;
}

/* generate a tag */
void generate_tag() {
  /* generate 1 of 25 possible tags */
  int tag = random(25);
  printf(tag_strings[tag]); // SEEMS BUGGY!
  push(tag);
  len -= size_tag(tag);
  printable_ok = true;
}

void random_generate0() {
  while (len > 8) { // A tag can consume 9 characters
    /* randomly choose: generate a tag, generate a space,
       end a tag, or generate a printable character;
       but don't bother to generate two printables in a row. */ 
    let possibilities = 1 + 1 + (empty() ? 0 : 1) + (printable_ok ? 1 : 0);
    int choice = random(possibilities);
    if (choice == 0) generate_tag();
    else if (choice == 1) generate_space();
    else if (choice == 2 && !empty()) generate_end_tag();
    else generate_printable();
  }

  /* Finish up any unclosed tags */
  while (!empty()) generate_end_tag();

  /* Finish up the rest with spaces and printable characters */
  while (len > 0) {
    if (random(2))
      generate_printable();
    else
      generate_space();
  }
}

#include "contexts.h"

context_t random_context() {
  let r = random(1<<15);
  if (CL(r)>=9) r = setCL(r,random(9));   // 8 colors plus initial color
  if (SZ(r)>=11) r = setSZ(r,random(11)); // 10 sizes plus initial size
  return (context_t)r;
}

using List;

typedef List::list_t<$(context_t,int)@> selt_t; // stack element

selt_t delta(context_t before,context_t after,selt_t tag_stack) {
  
  /* To get to original color or size, close all tags */
  if (((CL(before) != CL(after)) && CL(after) == 8) ||
      ((SZ(before) != SZ(after)) && SZ(after) == 10)) {
    for (; tag_stack != null; tag_stack = tag_stack->tl) {
      let &$(ctxt,tag) = tag_stack->hd;
      printf(end_tag_strings[tag]);
      before = ctxt;
    }
  }
  /* Take care of color and size changes */
  if (CL(before) != CL(after)) {
    /* Assume CL(after) != original color */
    let tag = color_tags[CL(after)];
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = setCL(before,CL(after));
  }
  if (SZ(before) != SZ(after)) {
    /* Assume SZ(after) != original size */
    let tag = size_tag(SZ(after));
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = setSZ(before,SZ(after));
  }
  /* All other changes are made by inserting PL and then open
     tags as appropriate */
  if ((UL(before) != UL(after)) ||
      (isB(before) != isB(after)) ||
      (isI(before) != isI(after)) ||
      (isEM(before) != isEM(after)) ||
      (isS(before) != isS(after)) ||
      (isTT(before) != isTT(after))) {
    let tag = TAGPL;
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = doPL(before);
  }
  for (let ul = UL(after)-UL(before); ul > 0; ul--) {
    /* Assume UL(after)-UL(before) >=0 */
    let tag = TAGU;
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = incUL(before);
  }
  if (isB(before) != isB(after)) {
    /* Assume !isB(before) */
    let tag = TAGB;
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = setB(before);
  }
  if (isI(before) != isI(after)) {
    /* Assume !isI(before) */
    let tag = TAGI;
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = setI(before);
  }
  if (isEM(before) != isEM(after)) {
    /* Assume !isEM(before) and !isS(before) */
    let tag = TAGEM;
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = setEM(before);
  }
  if (isS(before) != isS(after)) {
    /* Assume !isS(before) */
    let tag = TAGS;
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = setS(before);
  }
  if (isTT(before) != isTT(after)) {
    /* Assume !isTT(before) */
    let tag = TAGTT;
    printf(tag_strings[tag]);
    tag_stack = new List::List(new $(before,tag),tag_stack);
    before = setTT(before);
  }

  /* Sanity check */
  if (before != after)
    fprintf(stderr,"Error: delta failed\n");

  return tag_stack;
}

void random_generate1() {
  context_t outside_ctxt = setCL(setSZ(0x0000,10),8);
  let ctxts = new { for i<len : random_context() };
  let tag_stack = null;
  let ctxt = outside_ctxt;
  for (int i = 0; i < len; i++) {
    tag_stack = delta(ctxt,ctxts[i],tag_stack);
    ctxt = ctxts[i];
    if (random(2)) printf(" ");
    else printf("x");
  }
  tag_stack = delta(ctxt,outside_ctxt,tag_stack);
  for (; tag_stack != null; tag_stack = tag_stack->tl) {
    let &$(ctxt,tag) = tag_stack->hd;
    printf(end_tag_strings[tag]);
  }
}

/* Colors only, flattened */
void random_generate2() {
  for (let lastcolor = -1; len > 0; len--) {
    let color;
    while ((color = random(9)) == lastcolor) // 8 colors plus original color
      /* skip */ ;
    if (color==8) printf("x");
    else {
      printf(tag_strings[color_tags[color]]);
      printf("@");
      printf(end_tag_strings[color_tags[color]]);
    }
  }
}

/* Sizes only, flattened */
void random_generate3() {
  for (let lastsize = -1; len > 0; len--) {
    let sz;
    while ((sz = random(11)) == lastsize) // 10 sizes plus original size
      /* skip */ ;
    if (sz==10) printf("x");
    else {
      printf(tag_strings[size_tags[sz]]);
      printf("@");
      printf(end_tag_strings[size_tags[sz]]);
    }
  }
}

/* Nest */
void random_generate4() {
  let n = len; // Need to keep because len is side-effected
  for (int i = 0; i < n; i++) generate_tag();
  printf("Z");
  for (int i = 0; i < n; i++) generate_end_tag();
}

/* Empty nest */
void random_generate5() {
  let n = len; // Need to keep because len is side-effected
  for (int i = 0; i < n; i++) generate_tag();
  for (int i = 0; i < n; i++) generate_end_tag();
}

/**********************************************************************/

int main(int argc, char ??argv) {
  let algorithm = 0;

  if (argc > 3 || (argc > 1 && String::strcmp(argv[1],"-help")==0)) {
    fprintf(stderr,
            "Usage: %s args\n",argv[0]);
    fprintf(stderr,
            "where args can be:\n"
            " n       string w/len n by alg 0\n"
            " -0 n    string w/len n by alg 0\n"
            " -1 n    string w/n printables by alg 1\n"
            " -2 n    string w/n printables, flat colors\n"
            " -3 n    string w/n printables, flat sizes\n"
            " -4 n    string nested to n, one printable, 725000 for 5MB\n"
            " -5 n    string nested to n, no printables, 725000 for 5MB\n"
            " -help   print usage\n"
            "(n is always optional, default is 100000)\n"
            );
    exit(1);
  }

  /* Get optional length */
  if (argc > 1 && argv[1].size > 1 && argv[1][0] == '-') {
    sscanf(argv[1],"-%d",&algorithm);
    if (argc > 2)
      sscanf(argv[2],"%d",&len);
  }
  else if (argc > 1)
    sscanf(argv[1],"%d",&len);

  //  fprintf(stderr,"Length is %d and algorithm is %d\n",len,algorithm);

  /* initialize random number generator */
  let t = new Time::time(null);
  if (*t<0) {
    fprintf(stderr,"Error: the time is not available\n");
    exit(1);
  }
  else Stdlib::srand(*t);

  if (algorithm == 0)
    random_generate0();
  else if (algorithm == 1)
    random_generate1();
  else if (algorithm == 2)
    random_generate2();
  else if (algorithm == 3)
    random_generate3();
  else if (algorithm == 4)
    random_generate4();
  else if (algorithm == 5)
    random_generate5();
  else
    random_generate0();

  return 0;
}
