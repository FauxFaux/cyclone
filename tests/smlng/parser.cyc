// This is the parser.  It reads each character, and does something with it 
// based on the current parsing context.  It will do some compression while 
// it reads stuff in. 
#include <core.h>
#include <stdio.h>
#include <string.h>
#include <list.h>
#include "parser.h"
using Core;
using Stdio;
using String;
using List;
using Buffer;

namespace Parser;

// The information part of a tag 
static string_t tag[] = {
  "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
  "B", "EM", "I", "PL", "S", "TT", "U", "r", "g",
  "b", "c", "m", "y", "k", "w"
};

static int position = 1;
#define GETC(f) (position++, fgetc(f))
#define UNGETC(c,f) (position--, ungetc(c,f))

static void die(const char ?`r desc, ...`r2 inject parg_t<`r4> ap) 
  __attribute__((format(printf,1,2)))
{
  fprintf(stderr,"char %d: ",position);
  vfprintf(stderr,desc,ap);
  exit(1);
}

/* keep going until you hit a tag or EOF 
 * and then return the text you've got so far.
   XXX should be able to region-ify this */
static doc_t get_text(buf_t b, FILE @f) {
  int c;
  unsigned int start = Buffer::position(b);
  while (true) {
    c = GETC(f);
    switch (c) {
    case '<': /* tag */
      UNGETC(c,f);
      Buffer::add_char(b, '\0');
      return new Text(start);
    case EOF: /* eof */
      Buffer::add_char(b, '\0');
      return new Text(start);
    default:
      Buffer::add_char(b,(char)c);
      break;
    }
  }
}

static tag_t get_tag(FILE @f) {
  // < has already been consumed
  int c = GETC(f);
  if (c == EOF) die("EOF within tag");
  tag_t t;
  switch (c) {
  case '0': t = Zero; break;
  case '1': t = One; break;
  case '2': t = Two; break;
  case '3': t = Three; break;
  case '4': t = Four; break;
  case '5': t = Five; break;
  case '6': t = Six; break;
  case '7': t = Seven; break;
  case '8': t = Eight; break;
  case '9': t = Nine; break;
  case 'B': t = B_tag; break;
  case 'I': t = I_tag; break;
  case 'S': t = S_tag; break;
  case 'U': t = U_tag; break;
  case 'r': t = r_tag; break;
  case 'g': t = g_tag; break;
  case 'b': t = b_tag; break;
  case 'c': t = c_tag; break;
  case 'm': t = m_tag; break;
  case 'y': t = y_tag; break;
  case 'k': t = k_tag; break;
  case 'w': t = w_tag; break;
  case 'E': 
    if ((c = GETC(f)) != 'M')
      die("invalid 2-char tag E%c",(char)c);
    t = EM_tag;
    break;
  case 'P':
    if ((c = GETC(f)) != 'L')
      die("invalid 2-char tag P%c",(char)c);
    t = PL_tag;
    break;
  case 'T':
    if ((GETC(f)) != 'T')
      die("invalid 2-char tag T%c",(char)c);
    t = TT_tag;
    break;
  default:
    die("invalid tag %c",(char)c); 
    t = TT_tag; break;
  }
  if ((c = GETC(f)) != '>')
    die("missing > on tag %s",tag[t]);
  return t;
}

static void get_endtag(FILE @f, tag_t t) {
  // < has already been consumed.
  int c = GETC(f);
  if (c != '/')
    die("expecting end tag /");
  tag_t t2 = get_tag(f);
  if (t != t2)
    die("end tag mismatch: %s != %s",tag[t],tag[t2]);
}

doc_t get_docs(buf_t b, FILE @f) {
  doc_t ? result;
  region r {
    glist_t<doc_t,`r> docs = null;
    int c = GETC(f);
    while (true) {
      if (c == EOF) break;
      else if (c == '<') {
        c = GETC(f);
        UNGETC(c,f);
        if (c == '/') {
          break;
        } else {
          let tag = get_tag(f);
          let d = get_docs(b, f);
          get_endtag(f,tag);
          docs = rnew(r) List(new Tagged(tag,d),docs);
        }
      } else {
        UNGETC(c,f);
        docs = rnew(r) List(get_text(b,f),docs);
      }
      c = GETC(f);
    }
    result = to_array(imp_rev(docs));
  }
  if (result.size == 1) return *result;
  else return new Seq(result);
}
  
