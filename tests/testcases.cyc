#include "list.h"

namespace T {
  using T {

// anonymous function parameter using (@) notation
int F1(int (@)(int));
int F2(int)[?][0][];
int F3(`a (@)<`a>(`a));
// more type tests
int (*F4(int))(bool);
int (*F5)(int)(bool);
int ****X1;

// The common idiom of declaring a struct and a typedef by the same
// name
typedef struct xarray<`a> {
  `a elmts[?];
  int num_elmts; 
} xarray<`a>;

xarray<`a> create_empty<`a>() {
  `a x[0];         

  //   return xarray(x,0); // NO GOOD!
  return (struct xarray){x,0}; // Compound literals
}

// the >> vs. >> problem
int fufufu() {
  int i = 4 >> 1;
  List::list<List::list<int>> z = null;
  return i;
}

// vararg extern definition
extern int fooby(int x, ...);

// Printing declarations
int F9() {
  int x,y = 4;
  { int z;
    z++;
  }
  while (x) {
    x--;
  }
  for(int i = 0; i<500; i++) {
    int j = 4;
    j--;
  }    
  // i should no longer be visible here
  x++;
}

void g(struct foo,int);

// void arguments
int bar(void) {
  0;
}

// Old-style function definitions
int foo(x,y)
     int x,y;
{
  return x+y;
}

void f(int x) {

  int y;
  y = 0;
  int z;
  z = 8;

  // Nested conditional expressions
  0 ? 1 ? 2 : 3 : 4;

  // Empty array initializer
  int xx[?] = {};

  // empty expression
  if (x>3) ;

  // switch with no cases, only default
  switch (x) {
  default: break;
  }

  // nested function declaration
  int foobl(int x) {
    return x+1;
  }

  // string escapes
  char x[?] = "\"";

  char y[?] = "\"hello world\\\"";

  // new inline function specifier
  inline bool *blooby(int x) {
    return x==2;
  }

  // character escapes
  char z = '\"';

  // consecutive string constants are concatenated
  char yy[?] = "hello" "there" "mr" "bill";

  return;
}

enum exp {
  Zero,
  Succ(enum exp),
  Var(char[?]),
  Lam(char[?],enum exp),
  App(enum exp,enum exp)
};

}
}
