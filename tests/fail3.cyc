void a1() {
  int *p;
  // dereference of possibly uninitialized pointer
  *p = 0;
}
void a1a() {
   char *{10}@nozeroterm x = 0;
  // dereference of possibly uninitialized pointer
   x[0] = 'a';
}
void a2a(int*p);
void a2() {
  int *p1;
  // expression may not be fully initialized
  a2a(p1);
}
void a3() {
  int *p1, *p2;
  p1 = new 0;
  // dereference of possibly uninitialized pointer
  (*p1) 
    // expression may not be initialized
    + (int)(p1=p2);
}
void a4() {
  int *p1;
  goto L;
  p1 = new 0;
  // dereference of possibly uninitialized pointer
 L: *p1;
}
void a5(int flip) {
  int *p1, *p2;
  p1 = new 0;
  while(flip) {
    // dereference of possibly uninitialized pointer
    *p1 = 17;
    p1 = p2;
  }
}
void a6(int**p1) {
  int * p2;
  // expression may not be fully initialized
  *p1 = p2;
}
void a7() {
  int *p1, *p2;
  p1 = new 0;
  try { 
    p1 = p2;
    p1 = new 3;
    // dereference of possibly uninitialized pointer
  } catch { default: *p1; break; }
}

// function may not return a value
int* a8() {}

// function may not return a value
int* a9(int flip) {
  while(flip)
    return new 0;
}
// `noreturn' function might (implicitly) return
int* a10(int flip) __attribute__((noreturn)) {
  return new 0;
}
void a11(int flip) __attribute__((noreturn)) {
  while(flip)
    37;
}
// last catch clause may implicitly fallthru
void a12() {
  try 37;
  catch {
  default: ;
  }
}
// goto enters local scope or exception handler
// void a13() {
//   goto L;
//   int x;
//  L: 37;
// }
// // goto enters local scope or exception handler
// void a14() {
//   goto L;
//   try { L: 37; } catch { default: break; }
// }
// `noreturn' function might return
void a15() __attribute__((noreturn)) {
  return;
}
int a16() __attribute__((noreturn)) {
  return 42;
}
// switch clause may implicitly fallthru
void a17(int x) {
  switch(x) {
  case 17: 37;
  case y: 42; break;
  }
}

//////////////////////////////////
//// UNIQUENESS-RELATED TESTS ////
//////////////////////////////////

#include <core.h>
void a18(int *`U x) {
  // aliased expression x was overwritten
  {
    let alias <`r>int *`r y = x;
    x = new 1;
  }
  Core::ufree(x);
}
void a19(int *`U x) {
  // expression attempts to copy unique value; i.e. x cannot be unconsumed
  { let y = x;
    x = new 1;
    Core::ufree(x);
  }
  Core::ufree(x);
}
void a20(int *`U y) __attribute__((noconsume(1))) {
  // expression consumes value with attribute noconsume
  Core::ufree(y);
}
void a21(int *`U*`U y) __attribute__((noconsume(1))) {
  // expression consumes value with attribute noconsume
  Core::ufree(*y);
}
void a22(int *`U y) __attribute__((noconsume(1))) {
  // noconsume expression no longer set to orginal value
  y = new 1;
}
void a23(int *`U x) {
  // dereference of uninitialized lhs pointer
  Core::ufree(x);
  *x = 1;
}
void a24(int *`U x) {
  // dereference of uninitialized rhs pointer
  Core::ufree(x);
  int y = *x;
}
void a25() {
  // aliased pattern expression is not an l-value
  let alias<`r>int *`r x = rnew (Core::unique_region) 1;
}
void a26(int *`U x) {
  // cannot track unique pointers through multiple assignments
  int *`U z, *`U y;
  z = y = x;
}
void a27(int *`U x) {
  let y = x;
  // attempts to copy a consumed value
  Core::ufree(x);
}
typedef _::UR uregion;
typedef int @ @region(uregion) uptr;
extern void uptrfree(uptr);
void a28(uptr x) {
  let y = x;
  // attempts to copy a consumed value
  uptrfree(x);
}
