#include "core.h"
extern "C include" {
  struct list { void *x; struct list *tl; };
  struct f { unsigned int len; char *buf; };
  struct Function { 
    void *(* f)(void *env, void *arg);
    void *env;
  };
  extern void *GC_malloc(int);
  struct list *new_list() {
    struct list *x = GC_malloc(sizeof(struct list));
    x->x = (void *)1;
    x->tl = (struct list *)0;
    return x;
  }
  typedef enum test_enum {
    ENUM_KEY_0=0,
    ENUM_KEY_1,
  } tenum_t;

  struct tsz {
    void *fld;
  };

  struct tsz* alloc(unsigned int a) {
    return 0;
  }

  void do_tsz(struct tsz *arg) { //should get a tvar automatically
    return;
  }
}
cyclone_override {
  struct list<`a> { `a x; struct list<`a> *tl; };
  struct f { <`i::I> tag_t<`i> len; char * @nozeroterm @numelts(valueof(`i)) buf; };
  struct Function<`arg,`res,`bd::R> { 
    <`env::B> : regions(`env) > `bd
    `res (@`bd f)(`env,`arg);
    `env env;
  };
  struct list<int>* new_list();

  struct tsz<`a> {
    `a fld;
  };
  
  struct tsz<`a*> *alloc(Core::sizeof_t<`a> a); //typedef should be expanded before merging

}
export { * }
hide { GC_malloc }



int main() {
  struct list *x = new list{new 1,NULL};
  struct list *y = new list{new 1,NULL};
  struct list *z = new_list();
  if (*x->x == *y->x && *x->x == z->x) return ENUM_KEY_0;
  else return -ENUM_KEY_1;
}
