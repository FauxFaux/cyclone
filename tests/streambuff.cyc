/* This file is part of the MediaNet Project.
   Copyright (C) 2002-2004 Michael Hicks

   MediaNet is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   MediaNet is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include "streambuff.h"

#define myassert(e) ((e) ? 0 : (exit(1),0))

/* counts the total size of the data collected by the streambuffer */
unsigned int stb_size(streambuff_t stb) {
  unsigned int sz = 0;
  char ? @nozeroterm `RC buf = NULL;
  let &StreamBuff{<`i> .numbufs=n,.bufs=bufs,...} = stb;
  for (unsigned int i =0; i<n; i++) {
    buf :=: bufs[i].buf;
    sz = sz + (numelts(buf) - bufs[i].ofs);
    buf :=: bufs[i].buf;
  }
  return sz;
}

string_t stb_info(streambuff_t stb) {
  let sz = stb_size(stb);
  switch (stb->typ) { //Cool! ...didn't know you could project a unabstracted field out of an existential type!!
  case CharBuffer:
    return aprintf("CharBuffer(%d)",sz);
  case Packet:
    return aprintf("Packet(%d)",sz);
  default:
    return aprintf("UNKNOWN(%d)",sz);
  }
}

void stb_free(streambuff_t stb) {
  let &StreamBuff{<`i> .numbufs=n,.bufs=bufs,...} = stb;
  char ? @nozeroterm `RC buf;
  for (unsigned int i =0; i<n; i++) {
    buf = NULL;
    buf :=: bufs[i].buf;
    Core::drop_refptr(buf);
  }
}

void stb_free_unique(streambuff_t<`H,\U> stb) __attribute((consume(1))) {
  stb_free(stb);
  Core::ufree(stb);
}

/* returns true if the refcount for all buffers reachable from this
   header have refcount 1, false otherwise */
bool stb_noaliases(streambuff_t stb) {
  let &StreamBuff{<`i> .numbufs=n,.bufs=bufs,...} = stb;
  char ? @nozeroterm `RC buf = NULL;
  for (unsigned int i =0; i<n; i++) {
    buf :=: bufs[i].buf;
    if (buf != NULL && Core::refptr_count(buf) > 1) {
      buf :=: bufs[i].buf;
      return false;
    }
    buf :=: bufs[i].buf;
  }
  return true;
}

/* allocates a streambuffer with the given type and data */
streambuff_t<`r,`q> alloc_stb_with(region_t<`r::E> rgnhdr,
				   aqual_t<`q\T> q,
				   enum StreamType typ,
				   const char ?`H device,
				   unsigned int priority,
				   databuf_t<\RC> data) {
  assert(priority <= MAX_STB_PRIORITY);
  return rnew(rgnhdr,q) StreamBuff{ .typ=typ,
				       .priority = priority,
				       .device = device,
				       .numbufs = 1,
				       .bufs = { data }};
}

/* allocates a streambuffer with the given type; allocates the data
   of the given size (must be >= 0 bytes) */
streambuff_t<`r,`q> alloc_stb(region_t<`r::E> rgnhdr,
			      aqual_t<`q\T> q,
			      enum StreamType typ,
			      const char ?`H device,
			      unsigned int priority,
			      const char ? @nozeroterm buf) {
  let n = numelts(buf);
  if (n == 0)
    return alloc_stb_with(rgnhdr, q,typ, device, priority, DataBuff{0,NULL});
  else {
    char ? @nozeroterm  buf2 = qmalloc(Core::heap_region,Core::refcnt_qual,n);
    // FIX: automatic alias insertion fails because memcpy is
    // a macro that does pointer arithmetic
    { let alias <`r2>char ? @nozeroterm `r2 abuf2 = buf2;
      memcpy(abuf2,buf,n);
    }
    return alloc_stb_with(rgnhdr, q, typ, device, priority,
			  DataBuff{0,buf2});
  }
}

/* copies the streambuff header, but aliases its data. */
streambuff_t<`r,`q> stb_clone(region_t<`r::E> rgn, aqual_t<`q\T> q, streambuff_t stb) {
  let &StreamBuff{<`i> .numbufs=n,.bufs=bufs,
		       .typ=typ, .priority=prio,
		       .device=dev } = stb;
  streambuff_t newstb =
    rnew(rgn,q) StreamBuff{.typ = typ,
			   .device = dev,
			   .priority = prio,
			   .numbufs = n,
			   .bufs = { for i < n : DataBuff{bufs[i].ofs,NULL}} };
  // copy the data buffers
  char ?@aqual(\RC) @nozeroterm `H buf = NULL;
  { let alias <`r2> streambuff_t<`r2> astb = newstb;
    let &StreamBuff{<`j> .numbufs=nn,.bufs=bufsn,...} = astb;
    myassert (nn == n); // dumb array bounds checker
    for (unsigned int i = 0; i<n; i++) {
      bufs[i].buf :=: buf;
      char ?@aqual(\RC) @nozeroterm `H buf2 = Core::alias_refptr(buf);
      bufs[i].buf :=: buf;
      bufsn[i].buf = buf2;
    }
  }
  return newstb;
}

/* copies the streambuff header and the data (starting at the given offset
   ofs); needed when a client writes to data that is shared */
streambuff_t<`r,`q> stb_copy(region_t<`r::E> rgnhdr, aqual_t<`q\T> q,
			     int ofs, streambuff_t stb) {
   
 unsigned int szb = stb_size(stb);
 if (ofs >= szb) throw new Core::Invalid_argument("stb_copy: ofs >= szb");
 let len<_> = szb-ofs;

 let &StreamBuff{<`i> .numbufs=n,.bufs=bufs,
		    .typ=typ, .priority=prio,
		    .device=dev } = stb;

 // copy all buffers into a single buffer
 char ? @nozeroterm newb = rcmalloc(len);
 {
   let alias <`y>char ? @nozeroterm `y newbuf = newb;
   unsigned int idx = 0;
   char ? @nozeroterm `RC buf = NULL;
   for (unsigned int i =0; i<n; i++) { // iterator
     buf :=: bufs[i].buf;
     if (buf != NULL) {
       // FIX: get this to work with memcpy instead
       let szb = numelts(buf);
       let nb = szb - bufs[i].ofs;
       if (nb > ofs) {
	 let alias <`x>char ? @nozeroterm `x b = buf;
	 _memcpy(&newbuf[idx],b+bufs[i].ofs+ofs,nb-ofs,sizeof(char));
	 idx = idx + nb - ofs;
	 // 	for (unsigned int j = bufs[i].ofs; j<szb; j++)
	 // 	  if (j >= ofs) newbuf[idx++] = buf[j];
	 ofs = 0;
       }
       else ofs = ofs - nb;
     }
     buf :=: bufs[i].buf;
   }
 }
 
 return rnew(rgnhdr,q) StreamBuff{.priority = prio,
				   .typ = typ,
				   .device = dev,
				   .numbufs = 1,
				   .bufs = { DataBuff{.ofs=0,.buf=newb}}};
}

streambuff_t<`H,\U> stb_rest(int ofs, streambuff_t<`H,\U> stb) __attribute((consume(2))) {
  char ? @nozeroterm `RC buf = NULL;
  streambuff_opt_t<`H,\U> newstb = NULL;
  { let alias <`r>streambuff_t<`H,\A> stb2 = stb;
    let &StreamBuff{<`i> .numbufs=n, .bufs=bufs,
		       .priority=prio, .device=dev,
		       .typ=t } = stb2;
    if (n == 1) {
      if (bufs[0].buf != NULL) {
	let szb = numelts(bufs[0].buf);
	if (bufs[0].ofs + ofs > szb)
	  throw new Core::Invalid_argument("ofs > sz");
	bufs[0].ofs = bufs[0].ofs + ofs;
      }
      else throw new Core::Invalid_argument("null buffer");
    }
    else {
      // FIX: could use the same stb if the number of buffers
      // doesn't change.  Alternatively could use the same stb
      // and set some to NULL.
      unsigned int i;
      unsigned int x = ofs;
      // look for the start of the buffers to copy over
      for (i=0; i<n; i++) {
	if (bufs[i].buf != NULL) {
	  let szb = numelts(bufs[i].buf);
	  let bofs = bufs[i].ofs;
	  // ok, we've found the offset.  Now modify the offset in this
	  // buf and copy over the rest next...
	  if (szb-bofs > x) {
	    bufs[i].ofs += x;
	    let j<_> = n-i;
	    newstb = unew StreamBuff{.typ=t,
				     .device=dev,
				     .priority=prio,
				     .numbufs=j,
				     .bufs={for z < j : DataBuff{0,NULL}}};
	    break;
	  }
	  x = x - (szb-bofs);
	}
      }
      // now copy over the saved buffers, and free the ones that aren't
      // being used.  also free the original stb
      if (newstb == NULL)
	throw new Core::Invalid_argument("ofs exceeds length");
      { let alias <`r2>struct StreamBuff *`r2 stb2 = newstb;
        let &StreamBuff{<`j> .numbufs=n2, .bufs=bufs2,...} = stb2;
	unsigned int j, k;
	// first free the unused buffers in the old stb
	for (k = 0; k<n; k++) {
	  if (k < i) {
	    char ? @nozeroterm `RC b = NULL;
	    b :=: bufs[k].buf;
	    Core::drop_refptr(b);
	  }
	  else break;
	}
	// now move over the remaining ones
	for (j = 0; j<n2 && k<n; j++, k++) {
	  bufs2[j].buf :=: bufs[k].buf;
          bufs2[j].ofs = bufs[k].ofs;
	}
      } // end alias newstb
    } // end else --> !(n == 1)
  } // end alias stb
  if (newstb != NULL) {
    stb_free_unique(stb);
    stb = (streambuff_t)newstb;
  }
  stb->typ = CharBuffer;
  return stb;
}

streambuff_t<`r,`q> stb_prepend(region_t<`r::E> rgn, aqual_t<`q\T> q, streambuff_t stb,
				char ? @nozeroterm `RC nbuf) __attribute((consume(4))) {
  let &StreamBuff{<`i> .numbufs=n,.bufs=bufs,
		       .typ=typ, .priority=prio,
		       .device=dev } = stb;
  let m<_> = n+1;
  streambuff_t newstb =
    rnew(rgn,q) StreamBuff{.typ = typ,
			 .device = dev,
			 .priority = prio,
			 .numbufs = m,
			 .bufs = { for i < m : DataBuff{0,NULL}} };
  // copy the data buffers
  char ? @nozeroterm `RC buf = NULL;
  { let alias <`r2> streambuff_t<`r2> astb = newstb;
    let &StreamBuff{<`j> .numbufs=nn,.bufs=bufsn,...} = astb;
    let fatbufs = Core::mkfat(bufsn,sizeof(databuf_t<\RC>),nn);
    fatbufs[0].buf = nbuf;
    for (unsigned int i = 0; i<n; i++) {
      bufs[i].buf :=: buf;
      char ? @nozeroterm `RC buf2 = Core::alias_refptr(buf);
      bufs[i].buf :=: buf;
      fatbufs[i+1].buf = buf2;
      fatbufs[i+1].ofs = bufs[i].ofs;
    }
  }
  return newstb;  
}

int stb_num_bufs(streambuff_t stb) {
  let &StreamBuff{<`i> .numbufs=n,...} = stb;
  return (int)n;
}

int stb_with_buffer(streambuff_t stb, int idx,
		    int (@f)<`r::E>(`a env, char ? @nozeroterm `r),
		    `a env) {
  int retv;
  char ? @nozeroterm `RC buf = NULL;
  let &StreamBuff{.numbufs=n, .bufs=bufs,...} = stb;
  if (idx < n) {
    int retval;
    buf :=: bufs[idx].buf;
    { let alias <`r2>char ? @nozeroterm `r2 abuf = buf;
      retval = f(env, abuf + bufs[idx].ofs);
    }
    buf :=: bufs[idx].buf;
    return retval;
  }
  else
    throw new Core::Invalid_argument("bad index");
}
