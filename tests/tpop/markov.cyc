/* Copyright (C) 1999 Lucent Technologies */
/* Excerpted from 'The Practice of Programming' */
/* by Brian W. Kernighan and Rob Pike */
/* Prted to Cyclone by James Cheney, April 2001 */

/*
 * Markov chain random text generator.
 */

#include "string.h"
#include "stdio.h"
#include "time.h"
#include "stdlib.h"

using Stdio;
using Core;
using String;
using Stdlib;
using Time;

#define NPREF	(2)	/* number of prefix words */
#define NHASH	(4093)	/* size of state hash table array */
#define MAXGEN	(10000)	/* maximum words generated */



struct _Suffix {	/* list of suffixes */
  string_t word;			/* suffix */
  struct _Suffix * next;			/* next in list of suffixes */
};

struct _State {	/* prefix + suffix list */
  string_t pref[NPREF];	/* prefix words */
  struct _Suffix * suf;			/* list of suffixes */
  struct _State	* next;			/* next in hash table */
};

typedef struct _State State;
typedef struct _Suffix Suffix;


State* lookup(string_t<`H> *{NPREF} prefix, int create);
void build(string_t<`H>*{NPREF} prefix, FILE@);
void generate(int nwords);
void add(string_t<`H>*{NPREF} prefix, string_t<`H> word);

State	??statetab = NULL;

const char NONWORD[] = "\n";  /* cannot appear as real word */

/* temporary stubs */
`a ?`r memmove(`a ?`r dest, `a ? src, size_t n)
{/* minor assumption: n is a multiple of sizeof('a) == 4  */
  /* Here n is a number of bytes to copy.  
     It's hard to duplicate this behavior exactly. */
  /* FIX: this.  I assume whoever ports stdlib will figure this out */
  int i;
  int m = n / 4;
  if(src < dest && dest < src + m)
    for(i = m-1; i >= 0; i--)
      dest[i] = src[i];
  else
    for(i = 0; i < n; i++)
      dest[i] = src[i];
  return dest;
}

/* end stubs */

/* markov main: markov-chain random text generation */
int main(void)
{
  int i, nwords = MAXGEN;
  string_t*{NPREF} prefix = new{for i < NPREF:(string_t)NULL};  /* current input prefix */

  statetab = new {for i < NHASH : NULL};	/*initialize*/
  
  int c;
  long seed;

  seed = Time::time(NULL);
  
  srand(seed);
  for (i = 0; i < NPREF; i++)	/* set up initial prefix */
    prefix[i] = NONWORD;
  build(prefix, stdin);
  add(prefix, NONWORD);
  generate(nwords);
  return 0;
}   

const int MULTIPLIER = 31;  /* for hash() */

/* hash: compute hash value for array of NPREF strings */
/* uses underlying c string implementation; fix */
unsigned int hash(string_t*{NPREF} s)
{
  unsigned int h;
  const unsigned char ? p;
  int i;

  h = 0;
  for (i = 0; i < NPREF; i++)
    {
      for (p = (const unsigned char * ) s[i]; *p != '\0'; p++)
	h = MULTIPLIER * h + *p;
    }
      return h % NHASH;
}

/* lookup: search for prefix; create if requested. */
/*  returns pointer if present or created; NULL if not. */
/*  creation doesn't strdup so strings mustn't change later. */
State* lookup(string_t<`H> *{NPREF} prefix, int create)
{
  int i, h;
  State *sp;

  h = hash(prefix);
  for (sp = (State *)statetab[h]; sp != NULL; sp = sp->next) {
    for (i = 0; i < NPREF; i++)
      if (strcmp(prefix[i], sp->pref[i]) != 0)
	break;
    if (i == NPREF)		/* found it */
      return sp;
  }
  if (create) {
    sp = new _State{.pref={prefix[0],prefix[1]},.suf=NULL,.next=statetab[h]};
    statetab[h] = sp;
  }
  return sp;
}

/* addsuffix: add to state. suffix must not change later */
void addsuffix(State *`H sp, string_t<`H> suffix)
{
  Suffix *suf;

  suf = new _Suffix{.word=suffix,.next=sp->suf};

  sp->suf = suf;
}

/* add: add word to suffix list, update prefix */
void add(string_t<`H>*{NPREF} prefix, string_t<`H> suffix)
{
  State *sp;

  sp = lookup(prefix, 1);  /* create if not found */
  addsuffix(sp, suffix);
  /* move the words down the prefix */
  memmove(&prefix[0], &prefix[1], (NPREF-1)*sizeof(prefix[0]));
  prefix[NPREF-1] = suffix;
}

/* build: read input, build prefix table */
void build(string_t<`H> *{NPREF} prefix, FILE @f)
{
  mstring_t buf = String::expand("",100);

  /* create a format string; %s could overflow buf */
  /* FIX: this doesn't work in Cyclone; no sprintf */
  /* sprintf(fmt, "%%%ds", sizeof(buf)-1); */
  /* this terminates on error/EOF, not just EOF, like the fscanf version did */
  while (fgets(buf,100,f) != NULL)
    add(prefix, strdup(buf));
}

/* generate: produce output, one word per line */
void generate(int nwords)
{
  State *sp;
  Suffix *suf;
  string_t*{NPREF} prefix = new {for i < NPREF:(string_t)NULL};
  string_t w = "";
  int i, nmatch;

  for (i = 0; i < NPREF; i++)	/* reset initial prefix */
    prefix[i] = (string_t)NONWORD;

  for (i = 0; i < nwords; i++) {
    sp = lookup(prefix, 0);
    if (sp == NULL)
      printf("internal error: lookup failed\n");
    nmatch = 0;
    for (suf = sp->suf; suf != NULL; suf = suf->next)
      if (rand() % ++nmatch == 0) /* prob = 1/nmatch */
	w = suf->word;
    if (nmatch == 0)
      printf("internal error: no suffix %d %s\n", i, prefix[0]);
    if (strcmp(w, NONWORD) == 0)
      break;
    printf("%s\n", w);
    memmove(&prefix[0], &prefix[1], (NPREF-1)*sizeof(prefix[0]));
    prefix[NPREF-1] = (string_t)w;
  }
}
