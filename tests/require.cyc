#include <stdio.h>

// You can attach @requires clauses to union members, as long as
// they are simple conjunction of predicates that compare static
// expressions, including valueof(`i) where `i is an integer-kinded
// type variable.  Here's a simple example:
union U<`tag> {
  int i    @requires(valueof(`tag) == 1 + 0 - 2 + 2);  
  int *j   @requires(valueof(`tag) > 1);
  const char ?k  @requires(valueof(`tag) < 1);
};
// The type-checker ensures that you cannot read or write the
// members of U<`tag> unless you can prove the associated @requires
// clause is true.  


// Here's an example where we create a version of the union that
// can only allow access to the i field, since its type sets the
// `tag to 1.  
union U<valueof_t(1)> foo() {
  union U<valueof_t(1)> x = {.i = 42};
  x.i++;
  return x;
}

// Here's an example where we return a different U depending upon
// what a tag is.
union U<`i> bar(tag_t<`i> i) {
  union U<`i> res;
  if (i == 1)
    res = U{.i = 42};
  else if (i < 1)
    res.k = "Hello";
  else
    res = U{.j = new 3};
  return res;
}
    
// You can package up a U value with a run-time representation of the
// tag, using an existential to hide the type-name for the tag:
struct TaggedU {
  <`i>
  tag_t<`i>     tag;
  union U<`i>   @value;
};

typedef struct TaggedU tu_t;

// Here's an example using the union safely.  If you comment out
// any of the tests, except for the one that tests if tag==2, then
// you'll get a type-error.
void print_tu(tu_t tu) {
  let TaggedU{<`i> tag,value} = tu;
  if (tag == 1) 
    printf("it's an int: %d\n",value->i);
  else if (tag == 2)
    printf("it's a special int pointer: %d\n",*(value->j));
  else if (tag > 1)
    printf("it's a normal int pointer: %d\n",*(value->j));
  else 
    printf("it's a string: %s\n",value->k);
}

tu_t create_int(int i) {
  return TaggedU{.tag = 1, .value = new U{.i = i}};
}

tu_t create_intptr(int *`H j) {
  return TaggedU{.tag = 32, .value = new U{.j = j}};
}

tu_t create_string(const char ?`H k) {
  return TaggedU{.tag = 0, .value = new U{.k = k}};
}

int main() {
  tu_t x = create_int(42);
  tu_t y = create_intptr(new 3);
  tu_t z = create_string("hello");
  print_tu(x);
  print_tu(y);
  print_tu(TaggedU{.tag = 2, .value = new U{.j = new 2}});
  print_tu(z);
  union U w = foo();
  if (w.i == 43) return 0;
  return 1;
}
