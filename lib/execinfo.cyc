/* This file is part of the Cyclone Library.
   Copyright (C) 2001 Greg Morrisett

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>
#include <execinfo.h>
using Core;

#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

#ifdef __linux__
#include <unistd.h>
namespace Cexecinfo {
  extern "C" int backtrace(int *, int);
}
#endif

namespace Execinfo;

int backtrace(int ?array, int size) {
#ifdef __linux__
  if (size > numelts(array))
    throw new Failure("backtrace: size > numelts(array)");
  return Cexecinfo::backtrace((int*)array, size);
#else
  throw new Failure("backtrace: unsupported except under Linux");
  return 0;
#endif
}

#ifndef __linux__
int bt(void) { return 1; }
#else
int bt(void) {
  int bt[20] = { for i < 20 : 0 }; // should be able to omit bound
  pid_t pid, self_pid;

  int tochild[2] = {0,0}, fromchild[2] = {0,0};
  if (pipe(tochild) || pipe(fromchild)) return 1;

  self_pid = getpid(); // gotta get it before we fork

  if ((pid = fork()) == 0) { // we are child
    if (dup2(tochild[0], STDIN_FILENO) < 0) {
      perror("dup failed in backtrace");
      exit(1);
    }
    close(tochild[1]);
    if (dup2(fromchild[1], STDOUT_FILENO) < 0) {
      perror("dup failed in backtrace");
      exit(1);
    }
    close(fromchild[0]);

    const char *args[5]@zeroterm = { "addr2line", "--functions", "-e", "", 0 };
    args[3] = aprintf("/proc/%d/exe", self_pid);
    if (execvp("addr2line", args) == -1) {
      perror("execlp failed during backtrace");
    }
    exit(1);

  } else if (pid < 0) { // fork failed
    close(tochild[0]); close(tochild[1]);
    close(fromchild[0]); close(fromchild[1]);
    return 1;
  }

  /* In the parent */
  close(tochild[0]);
  close(fromchild[1]);
  int infd = fromchild[0];
  int outfd = tochild[1];

  /* Write out the addresses to look up */
  int n = backtrace(bt, numelts(bt));

  for (int c = 0; c < n; c++) {
    char buf[100];
    int len = sprintf(buf,"%#x\n", bt[c]);
    write(outfd,buf,len);
  }

  /* Print them out */
  printf("Backtrace:\n"
         "  Function          Location\n"
         "  ----------------  --------------------------------\n");
  for (int c = 0; c < n; c++) {
    bool unknown = true;
    char d;
    int ret, pos = 0;

    printf("  ");
    do {
      ret = read(infd,&d,1);
      if (d == '\n') break;
      if (d != '?') unknown = false;
      pos++;
      putchar(d);
    } while (true);

    if (unknown) {
      char buf[100];
      int len = sprintf(buf,"(%#x)", bt[c]);
      printf("%s",buf);
      pos += len;
    }

    while (pos++ < 16)
      putchar(' ');
    printf("  ");

    do {
      ret = read(infd,&d,1);
      if (d == '\n') break;
      putchar(d);
    } while (true);
    putchar('\n');
  }

  close(infd);
  if (infd != outfd)
    close(outfd);

  kill(pid, SIGTERM);
  waitpid(pid, NULL, 0);
  return 0;
}
#endif
