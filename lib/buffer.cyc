#include "buffer.h"
#include "string.h"

namespace Buffer;
using Core;
using Stdio; // for size_t

// ported from
//(***********************************************************************)
//(*                                                                     *)
//(*                           Objective Caml                            *)
//(*                                                                     *)
//(*   Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt  *)
//(*                                                                     *)
//(*  Copyright 1999 Institut National de Recherche en Informatique et   *)
//(*  en Automatique.  Distributed only by permission.                   *)
//(*                                                                     *)
//(***********************************************************************)

//(* Extensible buffers *)

abstract struct t
{ string buffer;
  uint position;
  uint length;
  string initial_buffer;
};

T create (uint n) {
  if (n < 1) n=1;
  string s = new_string(n);
  return new t(s, 0, n, s);
}

string contents(T b) {
  return (String::substring( b->buffer, 0, b->position));
}

size_t length (T b) {
  return b->position;
}

void clear (T b) {
   b->position = 0;
   return;
}

void reset (T b) {
  b->position = 0;
  b->buffer = b->initial_buffer;
  b->length = (b->buffer).size;
  return;
}

static void resize(T b, uint more) {
  size_t len = b->length;
  size_t new_len = len;
  string new_buffer;
  while (b->position + more > new_len) {
    new_len = 2 * new_len;
  }
  new_buffer = new_string(new_len);
  String::strncpy(new_buffer, 0, b->buffer, 0, b->position);
  b->buffer = new_buffer;
  b->length = new_len;
  return;
}

void add_char(T b, char c) {
  int pos = b->position;
  if (pos >= b->length) resize (b, 1);
  (b->buffer)[pos] = c;
  b->position = pos + 1;
  return;
}


// Note: like String::substring, this does not check for
// null terminators within the specified substring
void add_substring(T b, string s, int offset, int len) {
  if (offset < 0 || len < 0 || offset + len > s.size)
    throw InvalidArg("Buffer::add_substring");
  int new_position = b->position + len;
  if (new_position > b->length) resize (b, len);
  String::zstrncpy(b->buffer, b->position, s, offset, len);
  b->position = new_position;
  return;
}

// This DOES check for null terminators
void add_string (T b, string s) {
  int len = String::strlen(s);
  int new_position = b->position + len;
  if (new_position > b->length) resize(b, len);
  String::strncpy(b->buffer, b->position, s, 0, len);
  b->position = new_position;
  return;
}

void add_buffer (T b, T bs) {
  add_substring(b, bs->buffer, 0, bs->position);
  return;
}


