/* This file is part of the Cyclone Library.
   Copyright (C) 2001 Greg Morrisett, AT&T

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>
#include <xarray.h>

namespace Xarray;
using Core;

int length(xarray_t<`a> xarr) {
  return xarr->num_elmts;
}

`a get(xarray_t<`a> xarr, int i) {
  if (i < 0 || i >= xarr->num_elmts)
    throw new Invalid_argument("Xarray::get: bad index");
  return xarr->elmts[i];
}

void set(xarray_t<`a> xarr, int i, `a a) {
  if (i < 0 || i >= xarr->num_elmts)
    throw new Invalid_argument("Xarray::set: bad index");
  xarr->elmts[i] = a;
}

xarray_t<`a,`r> rcreate_empty(region_t<`r> r) {
  `a ?`U x = NULL;
  return rnew(r) Xarray{.elmts=x,.num_elmts=0};
}
xarray_t<`a> create_empty() { return rcreate_empty(Core::heap_region); }

 // create an xarray with zero elements, but space for len elements
xarray_t<`a,`r> rcreate(region_t<`r> r, int len, `a a) {
  if (len < 0)
    throw new Invalid_argument("xarrays must have a non-negative size buffer");
  return rnew(r) Xarray{.elmts=unew {for i < len : a}, .num_elmts=0};
}

xarray_t<`a> create(int len, `a a) {
  return rcreate(Core::heap_region, len, a);
}

xarray_t<`a,`r> rsingleton(region_t<`r> r, int len, `a a) {
  if(len<1) throw new Invalid_argument("singleton xarray must have size >=1");
  xarray_t<`a> x = rcreate(r,len,a);
  x->num_elmts=1;
  return x;
}

xarray_t<`a> singleton(int len, `a a) {
  return rsingleton(heap_region,len,a);
}

void add(xarray_t<`a> xarr, `a a) {
  if (xarr->num_elmts == numelts(xarr->elmts)) {
    if (xarr->num_elmts == 0)
      xarr->elmts = unew {for i < 10 : a};
    else {
      `a ?newarr = unew {for i < xarr->num_elmts*2 : xarr->elmts[0]};
      for (int i=1; i < xarr->num_elmts; ++i)
        newarr[i] = xarr->elmts[i];
      xarr->elmts :=: newarr;
      ufree(newarr);
    }
  }
  xarr->elmts[xarr->num_elmts++] = a;
}

int add_ind(xarray_t<`a> xarr, `a a) {
  add(xarr,a);
  return xarr->num_elmts-1;
}

`a ?`r rto_array(region_t<`r> r, xarray_t<`a> xarr) {
  if (xarr->num_elmts == 0)
    return rnew(r) {};
  `a ?ans = rnew(r) {for i < xarr->num_elmts : xarr->elmts[i]};
  return ans;
}

`a ?to_array(xarray_t<`a> xarr) {
  return rto_array(Core::heap_region, xarr);
}

xarray_t<`a,`r> rfrom_array(region_t<`r> r, `a ?arr) {
  if (numelts(arr) == 0)
    return rcreate_empty(r);
  xarray_t<`a> ans = rnew(r) Xarray{
                                    .elmts=unew {for i<numelts(arr) : arr[i]},
                                    .num_elmts=numelts(arr)};
  return ans;
}

xarray_t<`a> from_array(`a ?arr) {
  return rfrom_array(Core::heap_region,arr);
}

// append is functional -- it creates a new xarray every time
xarray_t<`a,`r> rappend(region_t<`r> r,xarray_t<`a> xarr1, xarray_t<`a> xarr2){
  int newsz = numelts(xarr1->elmts) + numelts(xarr2->elmts);
  if(newsz == 0)
    return rcreate_empty(r);
  `a init = numelts(xarr1->elmts) == 0 ? xarr2->elmts[0] : xarr1->elmts[0];
  xarray_t<`a> ans = rnew(r) Xarray{.elmts=unew {for i < newsz : init},
                                    .num_elmts=0};
  for(int i=0; i < xarr1->num_elmts; ++i)
    add(ans, xarr1->elmts[i]);
  for(int i=0; i < xarr2->num_elmts; ++i)
    add(ans, xarr2->elmts[i]);
  return ans;
}

xarray_t<`a> append(xarray_t<`a> xarr1, xarray_t<`a> xarr2) {
  return rappend(Core::heap_region,xarr1,xarr2);
}

void app(`b f(`a), xarray_t<`a> xarr) {
  for(int i=0; i<xarr->num_elmts; ++i)
    f(xarr->elmts[i]);
}

void app_c(`b f(`c,`a), `c env, xarray_t<`a> xarr) {
  for(int i=0; i<xarr->num_elmts; ++i)
    f(env, xarr->elmts[i]);
}

void iter(void f(`a), xarray_t<`a> xarr) {
  for(int i=0; i<xarr->num_elmts; ++i)
    f(xarr->elmts[i]);
}

void iter_c(void f(`c,`a), `c env, xarray_t<`a> xarr) {
  for(int i=0; i<xarr->num_elmts; ++i)
    f(env, xarr->elmts[i]);
}

xarray_t<`b,`r> rmap(region_t<`r> r, `b f(`a), xarray_t<`a> xarr) {
  if(xarr->num_elmts==0) return rcreate_empty(r);

  xarray_t<`b> ans =
    rnew(r) Xarray{.elmts=unew {for i< numelts(xarr->elmts) : f(xarr->elmts[0])},
                  .num_elmts=xarr->num_elmts};
  for(int i=1; i<xarr->num_elmts; ++i)
    ans->elmts[i] = f(xarr->elmts[i]);
  return ans;
}

xarray_t<`b> map(`b f(`a), xarray_t<`a> xarr) {
  return rmap(Core::heap_region,f,xarr);
}

xarray_t<`b,`r> rmap_c(region_t<`r> r, `b f(`c,`a), `c env, xarray_t<`a> xarr) {
  if(xarr->num_elmts==0) return rcreate_empty(r);

  xarray_t<`b> ans =
    rnew(r) Xarray{.elmts=unew {for i < numelts(xarr->elmts) : f(env,xarr->elmts[0])},
                  .num_elmts=xarr->num_elmts};
  for(int i=1; i<xarr->num_elmts; ++i)
    ans->elmts[i] = f(env, xarr->elmts[i]);
  return ans;
}

xarray_t<`b> map_c(`b f(`c,`a), `c env, xarray_t<`a> xarr) {
  return rmap_c(Core::heap_region, f, env, xarr);
}

void reuse(xarray_t<`a> xarr) {
  `a?`U newarr = NULL;
  newarr :=: xarr->elmts;
  xarr->num_elmts = 0;
  ufree(newarr);
}

void delete(xarray_t<`a> xarr, int num) {
  if (num > length(xarr))
    throw new Invalid_argument("number deleted is greater than length of xarray");
  xarr->num_elmts -= num;
}

void remove(xarray_t<`a> xarr, int i) {
  if (i < 0 || i > xarr->num_elmts-1)
    throw new Invalid_argument("xarray index out of bounds");
  for(int j = i; j < xarr->num_elmts-1; j++)
    xarr->elmts[j] = xarr->elmts[j+1];
  xarr->num_elmts--;
}
