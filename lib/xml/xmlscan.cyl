{
/* This file is part of the Cyclone Library.
   Copyright (C) 2001 AT&T

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>
#include <stdio.h>
#include <list.h>
#include <lexing.h>
#include <string.h>

#include <xml/xml.h>
#include <xml/xmlparse.h>
#include "xmlparse_tab.h"
#include "xmlscan.h"

using Core;
using List;
using XmlParse;
using Lexing;
  
namespace XmlScan {
@tagged union lv<`r> {
  string_t<`r> ATTVALUE1_LV;
  string_t<`r> ATTVALUE2_LV;
  string_t<`r> CDSECT_LV;
  string_t<`r> CHARDATA_LV;
  int          CLOSE_LV;
  string_t<`r> COMMENT_LV;
  int          ENDOFFILE_LV;
  int          EQ_LV;
  string_t<`r> NAME_LV;
  string_t<`r> OPEN_LV;
  string_t<`r> OPENSLASH_LV;
  $(string_t<`r>,string_t<`r>) PI_LV;
  string_t<`r> REFERENCE_LV;
  int          SLASHCLOSE_LV;
};
// Forward declarations of lexing functions 
extern union lv<`r> data(Lexbuf<`a>,region_t<`r>);
extern string_t<`yy> comment(Lexbuf<`a>,region_t<`yy>);
extern $(string_t<`yy>,string_t<`yy>) pi(Lexbuf<`a>,$(region_t<`yy>,string_t<`yy>));
extern string_t<`yy> cdsect(Lexbuf<`a>,region_t<`yy>);
extern string_t<`yy> attvalue1(Lexbuf<`a>,region_t<`yy>);
extern string_t<`yy> attvalue2(Lexbuf<`a>,region_t<`yy>);
extern union lv<`yy> intag(Lexbuf<`a>,region_t<`yy>);
}

// for parser -- must not be prefixed
int yylex(YYLEX_PARAM_ARG) { 
  let aa;
  int ans = 0;
  switch (getContext()) {
  case Normal: aa = XmlScan::data(lbuf->v,yyoutregion); break;
  case InTag: 
  default: aa = XmlScan::intag(lbuf->v,yyoutregion); break;
  }
  switch (aa) {
  case {.ATTVALUE1_LV = s}:
    ans = ATTVALUE1;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.ATTVALUE2_LV = s}:
    ans = ATTVALUE2;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.CDSECT_LV = s}:
    ans = CDSECT;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.CHARDATA_LV = s}:
    ans = CHARDATA;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.COMMENT_LV = s}:
    ans = COMMENT;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.NAME_LV = s}:
    ans = NAME;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.OPEN_LV = s}:
    ans = OPEN;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.OPENSLASH_LV = s}:
    ans = OPENSLASH;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.REFERENCE_LV = s}:
    ans = REFERENCE;
    *yylval_ptr = YYSTYPE{.String_tok = s};
    break;
  case {.PI_LV = x}:
    ans = PI;
    *yylval_ptr = YYSTYPE{.Pi_tok = rnew(yyoutregion) x};
    break;
  case {.CLOSE_LV = _}:
    ans = CLOSE;
    break;
  case {.SLASHCLOSE_LV = _}:
    ans = SLASHCLOSE;
    break;
  case {.ENDOFFILE_LV = _}:
    ans = ENDOFFILE;
    break;
  case {.EQ_LV = _}:
    ans = EQ;
    break;
  }
  return ans;
} 

namespace XmlScan;

void init() { setContext(Normal); }

static string_t<`r> get(region_t<`r> r,Lexbuf<`a> b) {
  return rlexeme(r,b);
}
//FIX: wastes a character or two...
static string_t<`r> after(region_t<`r> r, int n, Lexbuf<`a> lexbuf) {
  return get(r,lexbuf)+n;
}

/* Build a growable buffer in the unique region. */
// FIX: the buffer grows but never shrinks
int buf_pos = 0;
int buf_len = 0;
char ?`U buf_buf = NULL;

static void gobble(Lexbuf<`a> lbuf) {
  let howmuch = lbuf->lex_curr_pos - lbuf->lex_start_pos;
  if (buf_pos+howmuch > buf_len) {
    let newlen = (buf_len? buf_len*2: 17);
    while (newlen <= buf_pos+howmuch) newlen *= 2;
    //char ?`U newbuf = calloc(newlen,sizeof(char));
    char ?`U newbuf = qcalloc(heap_region, unique_qual, newlen, sizeof(char));
    for (int i = 0; i<buf_pos; i++)
      newbuf[i] = buf_buf[i];
    buf_len = newlen;
    buf_buf :=: newbuf;
    if (newbuf) ufree((char ?@nozeroterm)newbuf);
  }
  char ?from = lbuf->lex_buffer + lbuf->lex_start_pos;
  for (int i = 0; i < howmuch; i++,from++,buf_pos++)
    buf_buf[buf_pos] = *from;
}
static void purge() {
  buf_pos = 0;
  if (buf_buf) buf_buf[0] = '\0';
}
static string_t<`r> regurgitate(region_t<`r> r) {
  mstring_t<`r> x = rcalloc(r, (buf_pos+1), sizeof(char));
  for (int i = 0; i<buf_pos; i++)
    x[i] = buf_buf[i];
  x[buf_pos] = '\0';
  return x;
}

void warning(string_t msg) {
  fprintf(stderr,"%s",msg);
}

////////////////////////// LEXING RULES /////////////////////////////
}

let ws = [' ' '\t' '\r']
let name = ['a'-'z' 'A'-'Z' '_' ':'] 
            ['a'-'z' 'A'-'Z' '0'-'9' '.' '-' '_' ':']*

/* The normal lexer */
rule data "union lv<`yy>" "region_t<`yy>" "yyr" = parse
  '<' name            { return lv{.OPEN_LV = (after(yyr,1,lexbuf))}; } 
| "</" name           { return lv{.OPENSLASH_LV = (after(yyr,2,lexbuf))}; } 
| "&#" ['0'-'9']+ ';' { return lv{.REFERENCE_LV = (get(yyr,lexbuf))}; }
| '&' name ';'        { return lv{.REFERENCE_LV = (get(yyr,lexbuf))}; }
| "<![CDATA["         { purge();
                        return lv{.CDSECT_LV = (cdsect(lexbuf,yyr))}; }
| "<?" name           { let name = after(yyr,2,lexbuf);
                        purge();
                        return lv{.PI_LV = (pi(lexbuf,$(yyr,name)))}; }
| "<!--"              { purge(); return lv{.COMMENT_LV = (comment(lexbuf,yyr))}; }
| eof                 { return lv{.ENDOFFILE_LV = 0}; }
| [^ '<' '&' ']' ]*   { return lv{.CHARDATA_LV = (get(yyr,lexbuf))}; }

/* Lexing states called from the normal state */
and pi "$(string_t<`yy>,string_t<`yy>)" "$(region_t<`yy>,string_t<`yy>)" "x"= parse
  "?>"     { let $(yyr,name) = x;
             return $(name,regurgitate(yyr)); }
| eof      { warning("PI ends in eof");
             let $(yyr,name) = x;
             return $(name,regurgitate(yyr)); }
| '?'      { gobble(lexbuf); return pi(lexbuf,x); }
| [^ '?']+ { gobble(lexbuf); return pi(lexbuf,x); }

and cdsect "string_t<`yy>" "region_t<`yy>" "yyr" = parse
  "]]>"             { return regurgitate(yyr); }
| eof               { warning("CDATA ends in eof");
                      return regurgitate(yyr); }
| ']'               { gobble(lexbuf); return cdsect(lexbuf,yyr); }
| '<'               { warning("CDATA contains <");
                      gobble(lexbuf); return cdsect(lexbuf,yyr); }
| '&'               { warning("CDATA contains &");
                      gobble(lexbuf); return cdsect(lexbuf,yyr); }
| [^ '<' '&' ']' ]+ { gobble(lexbuf); return cdsect(lexbuf,yyr); }

and comment "string_t<`yy>" "region_t<`yy>" "yyr" = parse   
  "-->"    { return regurgitate(yyr); }
| eof      { warning("comment ends in eof");
             return regurgitate(yyr); }
| "--"     { warning("comment contains --");
             gobble(lexbuf); return comment(lexbuf,yyr); }
| '-'      { gobble(lexbuf); return comment(lexbuf,yyr); }
| [^ '-']+ { gobble(lexbuf); return comment(lexbuf,yyr); }

/* Lexing inside of tags */
and intag "union lv<`yy>" "region_t<`yy>" "yyr" = parse
  eof   { warning("tag ends in eof");
          return lv{.ENDOFFILE_LV = 0}; }
| '\n'  { return intag(lexbuf,yyr); }
| ws+   { return intag(lexbuf,yyr); }                
| name  { return lv{.NAME_LV = get(yyr,lexbuf)}; }
| '='   { return lv{.EQ_LV = 0}; }
| '\''  { purge(); return lv{.ATTVALUE1_LV = attvalue1(lexbuf,yyr)}; }
| "\""  { purge(); return lv{.ATTVALUE2_LV = attvalue2(lexbuf,yyr)}; }
| '>'   { return lv{.CLOSE_LV = 0}; }   
| "/>"  { return lv{.SLASHCLOSE_LV = 0}; }
| _     { region t;
          warning(rprintf(t,"illegal character '%s' in tag",get(t,lexbuf)));
          return intag(lexbuf,yyr); }

/* Other lexing states inside tags */
and attvalue1 "string_t<`yy>" "region_t<`yy>" "yyr" = parse
  "&#" ['0'-'9']+ ';'  { gobble(lexbuf); return attvalue1(lexbuf,yyr); }
| '&' name ';'         { gobble(lexbuf); return attvalue1(lexbuf,yyr);}
| '&'                  { warning("ill-formed reference in attribute");
                         gobble(lexbuf); return attvalue1(lexbuf,yyr); }
| '<'                  { warning("attribute contains <");
                         gobble(lexbuf); return attvalue1(lexbuf,yyr); }
| '\''                 { return regurgitate(yyr); }
| eof                  { warning("attribute ends in eof");
                         return regurgitate(yyr); }
| [^ '<' '&' '\'']+    { gobble(lexbuf); return attvalue1(lexbuf,yyr); }

and attvalue2 "string_t<`yy>" "region_t<`yy>" "yyr" = parse
  "&#" ['0'-'9']+ ';'  { gobble(lexbuf); return attvalue2(lexbuf,yyr); }
| '&' name ';'         { gobble(lexbuf); return attvalue2(lexbuf,yyr); }
| '&'                  { warning("ill-formed reference in attribute");
                         gobble(lexbuf); return attvalue2(lexbuf,yyr); }
| '<'                  { warning("attribute contains <");
                         gobble(lexbuf); return attvalue2(lexbuf,yyr); }
| "\""                 { return regurgitate(yyr); }
| eof                  { warning("attribute ends in eof");
                         return regurgitate(yyr); }
| [^ '<' '&' '"']+     { gobble(lexbuf); return attvalue2(lexbuf,yyr); }

{
}
