/* This file is part of the Cyclone Library.
   Copyright (C) 2001 AT&T

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#define _XML_CYC
#include "xml.h"
#include <string.h>

namespace Xml;

using Core;
using List;

/* [getElemData(doc,tag)] checks that the document [doc] is a single
   element with tag [tag], and returns the contents and attributes of
   that element.  On error, a [parseConfigFailed] exception is thrown.  */
$(list_t<content_t>,list_t<attribute_t>)
getElemData(content_t doc, string_t tagname)
{
  switch (doc) {
  case &Element(e):
    switch (e) {
    case &StartEnd(nm,atrs,content):
      if (!strcmp(nm,tagname)) {
	return $(content,atrs);
      }
      break;
    default:
      break;
    }
    break;
  default:
    break;
  }
  throw procXMLdocFailed;
}

/* [getAttributes(a,n)] returns the attribute values from [a] that
   match the names in [n].  The lists must match up exactly
   (i.e. order matters).  If order shouldn't matter, you can sort both
   lists first.  */
list_t<attvalue_t>
getAttributes(list_t<attribute_t> atrs,list_t<name @> names) 
{
  list_t<attvalue_t,`H> res = NULL;
  while (names != NULL) {
    if (atrs != NULL) {
      let &$(nm,val) = atrs->hd;
      if (!strcmp(nm,*(names->hd))) {
	res = new List(val,res);
      }
      else
	throw procXMLdocFailed;
    }
    else
      throw procXMLdocFailed;
    names = names->tl;
    atrs = atrs->tl;
  }
  return res;
}

/* [getAttribute(atr,nm)] returns the value associated with attribute
   [atr] if it has name [nm]; throws [procXMLdocFailed] if not.  */
attvalue_t getAttribute(attribute_t atr, name nm) {
  let &$(anm,aval) = atr;
  if (!strcmp(anm,nm))
    return aval;
  else
    throw procXMLdocFailed;
}
