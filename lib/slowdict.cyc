/* This file is part of the Cyclone Library.
   Copyright (C) 1999-2001 Greg Morrisett, Dan Grossman

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

// Port of the splay tree based dictionary implementation (c) Morrisett, Glew,
// Walker, Crary.
// Port by Dan, June 1999

#include <core.h>
#include <list.h>
#include <splay.h>
#include <slowdict.h>

namespace SlowDict;
using   Splay;

datatype exn @extensible {Absent,Present};

abstract struct Dict<`a,`b> {
  int       (@reln)(`a,`a);
  datatype tree<`a,`b,`H> tree;
};

// should be the commented out one, but unification is buggy
dict_t<`a,`b> empty(int (@`H comp)(`a,`a)) {
  datatype tree<`a,`b,`H> t = Leaf;
  return new Dict(comp, t);
}
//dict_t<`a,`b> empty(int comp(`a,`a)) {
//  return new Dict(comp, Leaf);
//}

bool is_empty(dict_t<`a,`b> d) {
  switch (d->tree) {
  case Leaf:    return true;
  case &Node(_): return false;
  }
}

bool member(dict_t<`a,`b> d, `a key) {
  return splay(d->reln, key, d->tree);
}

dict_t<`a,`b> insert(dict_t<`a,`b> d, `a key, `b data) {
  datatype tree<`a,`b,`H> newleft = Leaf, newright = Leaf;
  if (splay(d->reln, key, d->tree)) {
    // we're functional, so have to make a new root node?
    switch (d->tree) {
    case &Node(n):
      newleft     = n->v->left;
      newright    = n->v->right;
      break;
    default:
      break;
    }
  }
  else {
    switch (d->tree) {
    case &Node(nr):
      let n = nr->v;
      if (d->reln(key,n->key) < 0) {
	newleft  = n->left;
	newright = new Node(new noderef(new 
                                        node(n->key, n->data, 
                                             Leaf, n->right)));
      } else {
	newleft  = new Node(new noderef(new 
                                        node(n->key, n->data, n->left, Leaf)));
	newright = n->right;
      }
      break;
    case Leaf:
      break; // newleft and newright are already Leaf
    }
  }
  return new Dict(d->reln, new Node(new 
                                    noderef(new node(key,data,
                                                     newleft,newright))));
}

dict_t<`a,`b> insert_new(dict_t<`a,`b> d, `a key, `b data) {
  // somewhat wasteful this way (makes two new top nodes)
  if (splay(d->reln, key, d->tree))
    throw Present;
  return insert(d, key, data);
}

dict_t<`a,`b> inserts(dict_t<`a,`b> d,
                          List::list_t<$(`a,`b)@> kds) {  
  for (; kds != NULL; kds = kds->tl)
    d = insert(d, (*kds->hd)[0], (*kds->hd)[1]);
  return d;
}

dict_t<`a,`b> singleton(int (@`H comp)(`a,`a),`a key,`b data) {
  return new Dict(comp, new Node(new noderef(new node(key, data, Leaf, Leaf))));
}

`b lookup(dict_t<`a,`b> d,`a key) {
  if (splay(d->reln, key, d->tree))
    switch (d->tree) {
    case &Node(nr): return nr->v->data;
    case Leaf:     throw new Core::Impossible("Dict::lookup");
  }
  throw Absent;
}

Core::opt_t<`b> lookup_opt(dict_t<`a,`b> d,`a key) {
  if (splay(d->reln, key, d->tree))
    switch (d->tree) {
    case &Node(nr): return new Core::Opt(nr->v->data);
    case Leaf:     throw new Core::Impossible("Dict::lookup");
  }
  return NULL;
}

static int get_largest(`a x, `a y) { return 1; }

dict_t<`a,`b> delete(dict_t<`a,`b> d,`a key) {
  if (splay(d->reln, key, d->tree))
    switch (d->tree) {
    case Leaf: throw new Core::Impossible("Dict::lookup");
    case &Node(nr):
      struct node<`a,`b,`H> @n = nr->v;
      switch (n->left) {
      case Leaf:    return new Dict(d->reln, n->right);
      case &Node(noderef_left): 
	switch (n->right) {
	case Leaf:    return new Dict(d->reln, n->left);
	case &Node(node_ref_right): 
	  splay(get_largest, key, n->left);
	  struct node<`a,`b,`H> @newtop = noderef_left->v; // splay changes this
	  return new Dict(d->reln,
		       new Node(new noderef(new node(newtop->key, newtop->data,
                                                 newtop->left, n->right))));
	}
      }
  }
  else
    return d;
}
      
dict_t<`a,`b> delete_present(dict_t<`a,`b> d,`a key) {
  let d2 = delete(d,key);
  if (d == d2)
    throw Absent;
  return d2;
}

static `c fold_tree(`c f(`a,`b,`c), datatype tree<`a,`b,`H> t, `c accum) {
  switch (t) {
  case Leaf: 
    return accum;
  case &Node(nr): 
    struct node<`a,`b,`H> @n = nr->v;
    return f(n->key, n->data, fold_tree(f, n->left, 
                                        fold_tree(f, n->right, accum)));
  }
}
`c fold(`c f(`a,`b,`c),dict_t<`a,`b> d,`c accum) {
  return fold_tree(f, d->tree, accum);
}

static `c fold_tree_c(`c f(`d,`a,`b,`c),`d env, datatype tree<`a,`b,`H> t,`c accum) {
  switch (t) {
  case Leaf: 
    return accum;
  case &Node(nr): 
    struct node<`a,`b,`H> @n = nr->v;
    return f(env, n->key, n->data,
             fold_tree_c(f,env,n->left,fold_tree_c(f,env,n->right,accum)));
  }
}
`c fold_c(`c f(`d,`a,`b,`c),`d env, dict_t<`a,`b> dict,`c accum) {
  return fold_tree_c(f,env,dict->tree,accum);
}

static void app_tree(`c f(`a,`b),datatype tree<`a,`b,`H> t) {
  switch (t) {
  case Leaf: break;
  case &Node(nr):
    let n = nr->v;
    app_tree(f, n->left);
    f(n->key, n->data);
    app_tree(f, n->right);
    break;
  }
}
void app(`c f(`a,`b),dict_t<`a,`b> d) {
  app_tree(f,d->tree);
}

static void iter_tree(void f(`a,`b),datatype tree<`a,`b,`H> t) {
  switch (t) {
  case Leaf: break;
  case &Node(nr):
    struct node<`a,`b,`H> @n = nr->v;
    iter_tree(f, n->left);
    f(n->key, n->data);
    iter_tree(f, n->right);
    break;
  }
}
void iter(void f(`a,`b),dict_t<`a,`b> d) {
  iter_tree(f,d->tree);
}

static void app_tree_c(`c f(`d,`a,`b),`d env,datatype tree<`a,`b,`H> t) {
  switch (t) {
  case Leaf: break;
  case &Node(nr):
    struct node<`a,`b,`H> @n = nr->v;
    app_tree_c(f, env, n->left);
    f(env, n->key, n->data);
    app_tree_c(f, env, n->right);
    break;
  }
}
void app_c(`c f(`d,`a,`b),`d env,dict_t<`a,`b> d) {
  app_tree_c(f,env,d->tree);
}

static void iter_tree_c(void f(`c,`a,`b),`c env,datatype tree<`a,`b,`H> t) {
  switch (t) {
  case Leaf: break;
  case &Node(nr):
    struct node<`a,`b,`H> @n = nr->v;
    iter_tree_c(f, env, n->left);
    f(env, n->key, n->data);
    iter_tree_c(f, env, n->right);
    break;
  }
}
void iter_c(void f(`c,`a,`b),`c env,dict_t<`a,`b> d) {
  iter_tree_c(f,env,d->tree);
}

static datatype tree<`a,`c,`H> map_tree(`c f(`b), datatype tree<`a,`b,`H> t) {
  switch (t) {
  case Leaf: return Leaf;
  case &Node(nr):
    let n = nr->v;
    return new Node(new noderef(new node(n->key,
                                         f(n->data), 
                                         map_tree(f, n->left), 
                                         map_tree(f, n->right))));
  }
}
dict_t<`a,`c> map(`c f(`b), dict_t<`a,`b> d) {
  return new Dict(d->reln, map_tree(f, d->tree));
}

static datatype tree<`a,`c,`H> map_tree_c(`c f(`d,`b), `d env, datatype tree<`a,`b,`H> t) {
  switch (t) {
  case Leaf: return Leaf;
  case &Node(nr):
    struct node<`a,`b,`H> @n = nr->v;
    return new Node(new noderef(new node(n->key, f(env, n->data), 
                                         map_tree_c(f, env, n->left), 
                                         map_tree_c(f, env, n->right))));
  }
}
dict_t<`a,`c> map_c(`c f(`d,`b), `d env, dict_t<`a,`b> d) {
  return new Dict(d->reln, map_tree_c(f, env, d->tree));
}

$(`a,`b)@ choose(dict_t<`a,`b> d) {
  switch (d->tree) {
  case Leaf:      throw Absent;
  case &Node(nr): return new $(nr->v->key, nr->v->data);
  }
}

List::list_t<$(`a,`b)@> to_list_f(`a k, `b v, List::list_t<$(`a,`b)@`H,`H> accum) {
  return new List::List(new $(k,v),accum);
}

List::list_t<$(`a,`b)@> to_list(dict_t<`a,`b> d) {
  return fold(to_list_f, d, NULL);
}

