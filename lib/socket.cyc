#include <sys/socket.h>

namespace Std;

namespace Csocket {
  extern "C" {
    struct sockaddr;
    /* Later we'll add, e.g., accept_in6, bind_in6, etc. */
    int accept_in(int, const struct sockaddr_in @, socklen_t @);
    int bind_in(int, const struct sockaddr_in @, socklen_t);
    int connect_in(int, const struct sockaddr_in @, socklen_t);
    int getpeername_in(int, const struct sockaddr_in @, socklen_t @);
    int getsockname_in(int, const struct sockaddr_in @, socklen_t @);
    ssize_t recvfrom_in(int, char ?, size_t, int,
                        const struct sockaddr_in @, socklen_t @);
    ssize_t sendto_in(int, const char ?, size_t, int,
                      const struct sockaddr_in @, socklen_t);

    ssize_t send_wrapped(int, const char ?, size_t, int);
    ssize_t recv_wrapped(int, char ?, size_t, int);

    /* Add: _linger, _in_addr, _u_char, _ip_mreq, _sockaddr, etc. */
    int getsockopt_int(int, int, int, int @, socklen_t @);
    int setsockopt_int(int, int, int, const int @, socklen_t);
    int getsockopt_timeval(int, int, int, struct timeval @, socklen_t @);
    int setsockopt_timeval(int, int, int, const struct timeval @, socklen_t);
  }  
}

xtunion exn { SocketError };

int accept(int fd, ... inject SA ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
    return Csocket::accept_in(fd,x,y);
  default: throw SocketError;
  }
}

int bind(int fd, ... inject SA ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SA_sockaddr_in(x),&SA_socklen(y)):
    return Csocket::bind_in(fd,x,y);
  default: throw SocketError;
  }
}

int connect(int fd, ... inject SA ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SA_sockaddr_in(x),&SA_socklen(y)):
    return Csocket::connect_in(fd,x,y);
  default: throw SocketError;
  }
}

int getpeername(int fd, ... inject SA ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
    return Csocket::getpeername_in(fd,x,y);
  default: throw SocketError;
  }
}

int getsockname(int fd, ... inject SA ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
    return Csocket::getsockname_in(fd,x,y);
  default: throw SocketError;
  }
}

ssize_t recvfrom(int fd, char ?buf, size_t n, int flags, ... inject SA ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
    return Csocket::recvfrom_in(fd,buf,n,flags,x,y);
  default: throw SocketError;
  }
}

ssize_t sendto(int fd, const char ?buf, size_t n, int flags,
               ... inject SA ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SA_sockaddr_in(x),&SA_socklen(y)):
    return Csocket::sendto_in(fd,buf,n,flags,x,y);
  default: throw SocketError;
  }
}

ssize_t send(int fd, const char ?buf, size_t n, int flags) {
  return Csocket::send_wrapped(fd,buf,n,flags);
}

ssize_t recv(int fd, char ?buf, size_t n, int flags) {
  return Csocket::recv_wrapped(fd,buf,n,flags);
}

int getsockopt(int fd, int level, int optname, ... inject SO ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SO_int(x),&SO_socklenptr(y)):
    return Csocket::getsockopt_int(fd,level,optname,x,y);
  case $(&SO_timeval(x),&SO_socklenptr(y)):
    return Csocket::getsockopt_timeval(fd,level,optname,x,y);
  default: throw SocketError;
  }
}

int setsockopt(int fd, int level, int optname, ... inject SO ap) {
  if (ap.size != 2) throw SocketError;
  switch ($(ap[0],ap[1])) {
  case $(&SO_int(x),&SO_socklen(y)):
    return Csocket::setsockopt_int(fd,level,optname,x,y);
  case $(&SO_timeval(x),&SO_socklen(y)):
    return Csocket::setsockopt_timeval(fd,level,optname,x,y);
  default: throw SocketError;
  }
}
