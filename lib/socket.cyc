#include <core.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h> // see the hack below
using Core;

namespace Csocket {
  using Socket;
  /* This is really horrible.  We should fix these types somehow. */
  //extern struct Csockaddr;
#define Csockaddr Inet::sockaddr_in
  extern "C" {
    int bind(int fd, const struct Csockaddr *addr, socklen_t len);
    int connect(int fd, const struct Csockaddr *addr, socklen_t len);
    int accept(int fd, struct Csockaddr *`r addr, socklen_t *`r len);
    struct Csockaddr *sockaddr_to_Csockaddr(const xtunion sockaddr addr);
    xtunion sockaddr Csockaddr_to_sockaddr(const struct Csockaddr *`r, socklen_t);
  }
  $(struct Csockaddr *, socklen_t) sa2Csa(const xtunion sockaddr addr) {
    struct Csockaddr *ptr = sockaddr_to_Csockaddr(addr);
    switch (addr) {
    case &Inet::sockaddr_in(s):
      return $(ptr, (socklen_t)sizeof(struct Inet::sockaddr_in));
    default:
      throw new Failure("Unexpected xtunion sockaddr found");
    }
  }
  xtunion sockaddr Csa2sa(const struct Csockaddr *`r addr, socklen_t len) {
    return Csockaddr_to_sockaddr(addr, len);
  }
}

namespace Socket;

int bind(int fd, const xtunion sockaddr addr) {
  let $(Caddr, Clen) = Csocket::sa2Csa(addr);
  return Csocket::bind(fd, Caddr, Clen);
}

int connect(int fd, const xtunion sockaddr addr) {
  let $(Caddr, Clen) = Csocket::sa2Csa(addr);
  return Csocket::connect(fd, Caddr, Clen);
}

int setsockopt(int fd, int level, int optname, const char ?optval,
               socklen_t optlen) {
  // FIXME: Pretend we don't support any options for now
  errno = ENOPROTOOPT;
  return -1;
}

$(int, xtunion sockaddr) accept(int fd) {
  // We're assuming here that we won't need more space than
  // sizeof(sockaddr_in); this might be false if we support Unix
  // domain sockets later
  struct Inet::sockaddr_in Caddr = { 0, 0, {0}, { for i < 8: 0 }};
  socklen_t len = sizeof(struct Inet::sockaddr_in); // 16 for AF_INET
  int result = Csocket::accept(fd, &Caddr, &len);
  return $(result, Csocket::Csa2sa(&Caddr, len));
}
