/* This file is part of the Cyclone Library.
   Copyright (C) 2000-2001 Greg Morrisett

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <time.h>
#include <sys/time.h>
#include <core.h>
#include <string.h>

using Core;

namespace Ctime {
  extern "C" {
    Cstring<`H> asctime(const struct tm @`r timeptr);
    Cstring<`H> ctime(const time_t @`r timep);
    size_t strftime(Cstring s, size_t maxsize, const Cstring fmt,
                    const struct tm @`r t);
    Cstring<`r2> asctime_r(const struct tm @`r, Cstring<`r2>);
    Cstring<`r2> ctime_r(const time_t @`r, Cstring<`r2>);
  }
//  #define static_c2s(x) (Cstring_to_string(x))
#define static_c2s(x) (wrap_Cstring_as_string(x,-1))
}

namespace Std;

mstring_t asctime(const struct tm @`r timeptr) {
  return static_c2s(Ctime::asctime(timeptr));
}

mstring_t ctime(const time_t @`r timep) {
  return static_c2s(Ctime::ctime(timep));
}

size_t strftime(string_t s, size_t maxsize, string_t fmt,
                const struct tm @`r t) {
  size_t m = (s.size < maxsize) ? s.size : maxsize;
  return Ctime::strftime(underlying_Cstring(s),m,
                         underlying_Cstring(fmt),t);
}

// FIX: should check that s is long enough
mstring_t<`H> asctime_r(const struct tm @`r t, mstring_t<`H> s) {
//    if (s.size < 50) 
//      throw new Invalid_argument("Time::asctime_r: string too small (< 50)");
//    return Cstring_to_string(Ctime::asctime_r(t,underlying_Cstring(s)));
  let sr = static_c2s(Ctime::asctime(t));
  if (strlen(sr)+1 > s.size)
    throw new Invalid_argument("Time::asctime_r: string too small");
  else {
    strcpy(s,sr);
    return s;
  }
}

mstring_t<`H> ctime_r(const time_t @`r t, mstring_t<`H> s) {
  let sr = static_c2s(Ctime::ctime(t));
  if (strlen(sr)+1 > s.size)
    throw new Invalid_argument("Time::ctime_r: string too small");
  else {
    strcpy(s,sr);
    return s;
  }
//    if (s.size < 50) 
//      throw new Invalid_argument("Time::ctime_r: string too small (< 50)");
//    return Cstring_to_string(Ctime::ctime_r(t,underlying_Cstring(s)));
}
