/* This file is part of the Cyclone Library.
   Copyright (C) 2000-2001 Greg Morrisett

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <time.h>
#include <core.h>

using Core;

namespace Ctime {
  extern "C" {
    Cstring asctime(const struct tm @`r timeptr);
    Cstring ctime(const time_t @`r timep);
    size_t strftime(Cstring s, size_t maxsize, const Cstring fmt,
                    const struct tm @`r t);
    Cstring asctime_r(const struct tm @`r, Cstring);
    Cstring ctime_r(const time_t @`r, Cstring);
  }
}

namespace std;

mstring_t asctime(const struct tm @`r timeptr) {
  return Cstring_to_string(Ctime::asctime(timeptr));
}

mstring_t ctime(const time_t @`r timep) {
  return Cstring_to_string(Ctime::ctime(timep));
}

size_t strftime(string_t s, size_t maxsize, string_t fmt,
                const struct tm @`r t) {
  size_t m = (s.size < maxsize) ? s.size : maxsize;
  return Ctime::strftime(underlying_Cstring(s),m,
                         underlying_Cstring(fmt),t);
}

// FIX: should check that s is long enough
mstring_t asctime_r(const struct tm @`r t, mstring_t s) {
  if (s.size < 50) 
    throw new InvalidArg("Time::asctime_r: string too small (< 50)");
  return Cstring_to_string(Ctime::asctime_r(t,underlying_Cstring(s)));
}

mstring_t ctime_r(const time_t @`r t, mstring_t s) {
  if (s.size < 50) 
    throw new InvalidArg("Time::ctime_r: string too small (< 50)");
  return Cstring_to_string(Ctime::ctime_r(t,underlying_Cstring(s)));
}
