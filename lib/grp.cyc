/* This file is part of the Cyclone Library.
   Copyright (C) 2001 Greg Morrisett

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>
#include <cgrp.h>
using Core;

namespace Cgrp {
  abstract struct Cgroup {
    Cstring gr_name;
    Cstring gr_passwd;
    gid_t gr_gid;
    Cstring @gr_mem;
  };
  extern "C" {
    struct Cgroup *getgrnam(const Cstring name);
    struct Cgroup *getgrgid(gid_t gid);
    int initgroups(Cstring user, gid_t group);
  }
#define s2c(x) (string_to_Cstring(x))
#define c2s(x) (Cstring_to_string(x))
}

namespace std;

struct group *getgrnam(string_t name) {
  struct Cgrp::Cgroup *src = Cgrp::getgrnam(s2c(name));
  return src ? new group{.gr_name = c2s(src->gr_name),
                             .gr_passwd = c2s(src->gr_passwd),
                             .gr_gid = src->gr_gid,
                             .gr_mem = ntCsl_to_ntsl(src->gr_mem)}
    : NULL;
}

struct group *getgrgid(gid_t gid) {
  struct Cgrp::Cgroup *src = Cgrp::getgrgid(gid);
  return src ? new group{.gr_name = c2s(src->gr_name),
                             .gr_passwd = c2s(src->gr_passwd),
                             .gr_gid = src->gr_gid,
                             .gr_mem = ntCsl_to_ntsl(src->gr_mem)}
    : NULL;
}

int initgroups(string_t user, gid_t group) {
  return Cgrp::initgroups(s2c(user), group);
}
