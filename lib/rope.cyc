/* This file is part of the Cyclone Library.
   Copyright (C) 2001 Greg Morrisett

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <rope.h>
#include <string.h>

namespace Rope;
using Core;

static tunion R {
  String_rope(string_t),
  Array_rope(rope_t?)
};
abstract struct Rope_node {
  tunion R v;
};

rope_t from_string(string_t<`H> s) {
  return new Rope_node{new String_rope(s)};
}
rope_t concat(rope_t r1,rope_t r2) {
  return new Rope_node{new Array_rope(new {r1,r2})};
}
rope_t concata(rope_t ?`H rs) {
  return new Rope_node(new Array_rope(rs));
}
rope_t concatl(List::list_t<rope_t> l) {
  return new Rope_node(new Array_rope(new {for i < List::length(l) : 
    ({rope_t r = l->hd; l = l->tl; r;})}));
}

uint length(rope_t r) {
  switch (r->v) {
  case &String_rope(ss): return (uint)String::strlen(ss);
  case &Array_rope(rs):
    uint total = 0, sz = rs.size;
    for (uint i = 0; i < sz; i++)
      total += length(rs[i]);
    return total;
  }
}

static uint flatten_it(mstring_t s, uint i, rope_t r) {
  switch (r->v) {
  case &String_rope(ss):
    let len = String::strlen(ss);
    String::strncpy(s+i,ss,len);
    return i+len;
  case &Array_rope(rs):
    let len = rs.size;
    for (int j = 0; j < len; j++)
      i = flatten_it(s,i,rs[j]);
    return i;
  }
}

mstring_t to_string(rope_t r) {
  mstring_t s = new_string(length(r));
  flatten_it(s,0,r);
  // memoize the flattening
  r->v = new String_rope(s);
  return s;
}

int cmp(rope_t r1, rope_t r2) {
  return String::strcmp(to_string(r1), to_string(r2));
}
