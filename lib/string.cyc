// String library, base on code from Mike Hicks, modified by T. Jim

#include "core.h"
#include "list.h"
#include "character.h"
#include "string.h"

namespace String;
using Core;
using List;

///////////////////////// LENGTH
size_t strlen(string s) {
  size_t i;
  for (i = 0; i<s.size; i++) {
    if (s[i] == '\000')
      return i;
  }
  return i;
}

// Internal length after offset function, parameterized by what
// to throw if the offset is out of range.
static size_t int_strleno(string s, int ofs, string error) {
  if (ofs > s.size || ofs < 0) throw InvalidArg(error);
  int i;
  for (i = ofs; i<s.size; i++) {
    if (s[i] == '\000')
      break;
  }
  return (size_t)(i-ofs);
}

// Length after offset
size_t strleno(string s, int ofs) {
  return int_strleno(s,ofs,"String::strleno");
}


///////////////////////// COMPARISONS
static int case_cmp(char c1, char c2) {
  return (c1-c2);
}

static int nocase_cmp(char c1, char c2) {
  return case_cmp(Character::toupper(c1),Character::toupper(c2));
}

static int cmp(string s1, int ofs1, size_t len1,
               string s2, int ofs2, size_t len2,
               int f(char, char))
{
  size_t min_length = (len1 < len2) ? len1 : len2;
  int i = -1;
  while (++i < min_length) {
    int diff = f(s1[i+ofs1],s2[i+ofs2]);
    if (diff != 0)
      return diff;
  }
  return ((int)len1)-((int)len2);
}

// Compare two strings lexicographically.
// Return <0, 0, or >0 depending on whether s1<s2, s1==s2, or s1>s2.
int strcmp(string s1, string s2) {
  if(s1 == s2)
    return 0;
  size_t len1 = int_strleno(s1,0,"String::strcmp");
  size_t len2 = int_strleno(s2,0,"String::strcmp");
  return cmp(s1,0,len1,s2,0,len2,case_cmp);
}

// Like strcmp, but start comparing at offsets.
int strcmpo(string s1, int ofs1, string s2, int ofs2) {
  size_t len1 = int_strleno(s1,ofs1,"String::strcmp");
  size_t len2 = int_strleno(s2,ofs2,"String::strcmp");
  return cmp(s1,ofs1,len1,s2,ofs2,len2,case_cmp);
}

static int ncmp(string s1, int ofs1, size_t len1,
                string s2, int ofs2, size_t len2,
                size_t n, int f(char, char))
{
  if (n <= 0) return 0;

  size_t min_len = (len1 > len2) ? len2 : len1;
  size_t bound = (min_len > n) ? n : min_len;

  for (int i=0; i < bound; i++) {
    int retc;
    if ((retc = f(s1[i+ofs1],s2[i+ofs2])) != 0)
      return retc;
  }
  return(0);
}

// Like strcmpo but compare no more than n characters.
// If n<0 return 0 (equal).
// (The C version has no offsets)
int strncmp(string s1, int ofs1, string s2, int ofs2, size_t n) {
  size_t len1 = int_strleno(s1,ofs1,"String::strncmp");
  size_t len2 = int_strleno(s2,ofs2,"String::strncmp");
  return ncmp(s1,ofs1,len1,s2,ofs2,len2,n,case_cmp);
}

// Like strncmp, but case insensitive.
// (No C version; the GCC version has no offsets)
int strncasecmp(string s1, int ofs1, string s2, int ofs2, size_t n) {
  size_t len1 = int_strleno(s1,ofs1,"String::strncasecmp");
  size_t len2 = int_strleno(s2,ofs2,"String::strncasecmp");
  return ncmp(s1,ofs1,len1,s2,ofs2,len2,n,nocase_cmp);
}


// Like strcmp but don't consider zeros (null characters) as marking
// the end of strings.
int zstrcmp(string a, string b) {
  if(a == b)
    return 0;
  size_t as = a.size;
  size_t bs = b.size;
  size_t min_length = (as < bs) ? as : bs;
  int i  = -1;
  while (++i < min_length) {
    int diff = (int)(a[i]) - (int)(b[i]);
    if (diff != 0)
      return diff;
  }
  return ((int)as)-((int)bs);
}
// Like zstrcmp but consider at most n characters
int zstrncmp(string s1,string s2,size_t n) {
  if (n <= 0) return 0;

  size_t s1size = s1.size;
  size_t s2size = s2.size;
  size_t min_size = (s1size > s2size) ? s2size : s1size;
  size_t bound = (min_size > n) ? n : min_size;

  for (int i=0; i < bound; i++) {
    if (s1[i] < s2[i])
      return(-1);
    else if (s2[i] < s1[i])
      return(1);
  }
  if (min_size <= bound)
    return(0);
  if (s1size < s2size)
    return(-1);
  else 
    return(1);
}


///////////////////////// CONCATENATION

// Internal string concatenation function, parametized by what
// to throw on bounds error
static string int_strcato(string dest,string src,int srcOfs,string error) {
  int i;
  size_t dsize, slen, dlen;

  dsize = dest.size;
  dlen = strlen(dest);
  slen = int_strleno(src,srcOfs,error);
  
  if ((slen + dlen) <= dsize) {
    for (i = 0; i<slen; i++) {
      dest[i+dlen] = src[i+srcOfs];
    }
    if (i != dsize)
      dest[i+dlen] = '\000';
  }
  else
    throw InvalidArg(error);
  return dest;
}

// Destructive concatenation: the first argument is modified,
// and returned
string strcat(string dest,string src) {
  return int_strcato(dest,src,0,"String::strcat");
}
string strcato(string dest,string src,int srcOfs) {
  return int_strcato(dest,src,srcOfs,"String::strcato");
}

// Allocate a new string and fill it with the concatenation of a and b
string strconcat(string a, string b) {
  let alen = strlen(a);
  let blen = strlen(b);
  string ans = new_string(alen+blen+1);
  int i, j;
  for (i=0; i < alen; ++i) ans[i]   = a[i];
  for (j=0; j < blen; ++j) ans[i+j] = b[j];
  return ans;
}

// Allocate a new string and fill it with the concatenation of strs
string strconcat_l(list<string> strs) {
  list<string> p = strs;
  size_t total_len  = 0;
  while (p!=null) {
    total_len += strlen(p->hd);
    p = p->tl;
  }  
  string ans = new_string(total_len+1);
  size_t i = 0;
  while (strs != null) {
    string next    = strs->hd;
    size_t next_sz = strlen(strs->hd);  // FIX: inefficient to compute twice
    strncpy(ans,i,next,0,next_sz);
    i += next_sz;
    strs = strs->tl;
  }
  return ans;
}

// Allocate a new string and fill it with the concatenation of strs,
// using separator between each element
string str_sepstr(list<string> strs, string separator) {
  if (strs == null)    return "";
  if (strs->tl == null) return strdup(strs->hd);
  list<string> p = strs;
  size_t total_len  = 0;
  size_t list_len   = 0;
  while (p!=null) {
    total_len += strlen(p->hd);
    ++list_len;
    p = p->tl;
  }
  size_t seplen = strlen(separator);
  total_len += (list_len - 1)*seplen;
  string ans = new_string(total_len+1);
  size_t i = 0;
  while (strs->tl != null) {
    string next    = strs->hd;
    size_t next_sz = strlen(strs->hd); // FIX: inefficient to compute twice
    strncpy(ans,i,next,0,next_sz);
    i += next_sz;
    strncpy(ans,i,separator,0,seplen);
    i += seplen;
    strs = strs->tl;
  }
  strncpy(ans,i,strs->hd,0,strlen(strs->hd));
  return ans;
}

///////////////////////// COPYING
// Destructively copy at most n characters from src into dest, starting
// at the given offsets
// (C version does not take offsets)
string strncpy(string dest, int destOfs, string src, int srcOfs, size_t n) {
  // Range checking
  let destSz = dest.size;
  let srcSz = src.size;
  if (destOfs < 0)
    throw InvalidArg("String::strncpy");
  if (srcOfs < 0 || (n > 0 && srcOfs >= srcSz))
    throw InvalidArg("String::strncpy");
  if (n <= 0) return dest;
  if (destOfs + n > destSz || srcOfs + n > srcSz)
    throw InvalidArg("String::strncpy");
  int i;
  for (i=0; i<n; i++) {
    let srcChar = src[srcOfs+i];
    if (srcChar == '\000') break;
    dest[destOfs+i] = srcChar;
  }
  for (; i<n; i++)
    dest[destOfs+i] = '\000';

  return dest;

  // FIX: This isn't right.  src->contents and dest->contents
  // might be the same (e.g., from casting) !!
  // We don't currently have a way to detect this at the Cyclone level,
  // so we take C's approach and leave behavior ambiguous in this case.
//   if (src != dest
//      || destOfs + n < srcOfs 
//      || srcOfs  + n < destOfs)
//     for (int i=0; i<n; i++)
//       dest[destOfs+i] = src[srcOfs+i];
//   else {
//     // we could do better, but this is correct
//     string buffer = new_string(n);
//     for (int i=0; i<n; i++)
//       buffer[i] = src[srcOfs+i];
//     for (int i=0; i<n; i++)
//       dest[destOfs+i] = buffer[i];
//   }
}

// Strncpy that does not pay attention to zero chars
string zstrncpy(string dest, int destOfs, string src, int srcOfs, size_t n) {
  // Range checking
  let destSz = dest.size;
  let srcSz  = src.size;
  if (destOfs < 0)
    throw InvalidArg("String::zstrncpy");
  if (srcOfs < 0 || (n > 0 && srcOfs >= srcSz))
    throw InvalidArg("String::zstrncpy");
  if (n <= 0) return dest;
  if (destOfs + n > destSz || srcOfs + n > srcSz)
    throw InvalidArg("String::zstrncpy");
  int i;
  for (i=0; i<n; i++) 
    dest[destOfs+i] = src[srcOfs+i];
  return dest;
}
// Non-allocating string copy: first arg is returned
string strcpy(string dest,string src) {
  size_t len = strlen(src);
  strncpy(dest,0,src,0,len);
  if (len != dest.size)
    dest[len] = '\000';
  return dest;
}

// Allocating functions

// Not an ISO function, but available in gcc
string strdup(string src) {
  size_t len;
  string temp;

  len = strlen(src);
  temp = new_string(len+1);
  strncpy(temp,0,src,0,len);
  return temp;
}

string expand(string s, size_t sz) {
  string temp;
  size_t slen;

  slen = strlen(s);
  sz = (sz>slen)?sz:slen;
  temp = new_string(sz);

  strncpy(temp,0,s,0,slen);

  if (slen != s.size)
    temp[slen] = '\000';

  return temp;
}

string realloc_str(string str, size_t sz)
{
  size_t maxsizeP = str.size;

  if (maxsizeP == 0) {
    maxsizeP = (30>sz)?30:sz;	/* arbitrary */
    str = new_string(maxsizeP);
    str[0] = '\000';
  }
  else if (sz > maxsizeP) {
    maxsizeP = (maxsizeP * 2 > sz * 5 / 4)?(maxsizeP * 2):(sz * 5 / 4);
    str = expand(str, maxsizeP);
  }

  return str;
}


///////////////////////// TRANSFORMATIONS
// Return a substring of a string, by allocation.
string substring(string s, int start, size_t amt) {
  if (start < 0 || amt < 0 || start + ((int)amt) - 1 > (int)(s.size))
    throw InvalidArg("String::substring");
  string ans = new_string(amt+1);
  for(size_t i=0; i<amt; ++i)
    ans[i] = s[start+i];
  ans[amt] = '\000';
  return ans;
}

// replace last with second at end of first
// raise InvalidArg if second is not end of first.
string replace_suffix (string src, string curr_suffix, string new_suffix) {
  size_t m = src.size;
  size_t n = curr_suffix.size;
  string err = "String::replace_suffix";
  if (m < n) 
    throw InvalidArg(err);
  for (size_t i = 1; i <= n; ++i)
    if (src[m-i] != curr_suffix[n-i])
      throw InvalidArg(err);
  string ans = new_string(m-n+new_suffix.size);
  strncpy(ans,0,src,0,m-n);
  strncpy(ans,m-n,new_suffix,0,new_suffix.size);
  return ans;
}

////////////////////////// SEARCHING

// Search for character of accept in s, starting at ofs.
// Return the index in s of the first such character found, or -1 if none.
// (C returns a char *, has no offset, and returns the length of the
// string if no char is found)
int strpbrk(string s, int ofs, string accept) {
  int endOfs =
    int_strleno(s,ofs,"String::strpbrk") + ofs; // End of string after ofs

  for (int i=ofs; i<endOfs; i++)
    for (int j=0; j<accept.size; j++)
      if (s[i] == accept[j])
	return i;
  return -1;
}

// Return the first index after ofs in s that contains c,
// or the length of s after ofs if none.
// (C version has no offset and returns a pointer)
int strchr(string s, int ofs, char c) {
  int endOfs =
    int_strleno(s,ofs,"String::strchr") + ofs; // End of string after ofs

  for (int i = ofs; i<endOfs; i++) {
    if (s[i] == c)
      return i;
  }
  return -1;
}

// Return the greatest index of s > ofs that contains c,
// or the length of s after ofs if none.
// (C version has no offset and returns a pointer)
int strrchr(string s, int ofs, char c) {
  int endOfs =
    int_strleno(s,ofs,"String::strchr") + ofs; // End of string after ofs

  for (int i = endOfs-1; i>=ofs; i--) {
    if (s[i] == c)
      return i;
  }
  return -1;
}


// Search s for first occurrence of a character not in accept,
// starting from the offset; return its index from the start of s.
// If all characters of s starting at offset are in accept,
// then return the length of s after ofs.
// (C version has no offset arg, returns size_t=length of initial sequence
// that consists entirely of accept characters=length of string if no
// such char found)
int strspn(string s, int ofs, string accept) {
  int endOfs =
    int_strleno(s,ofs,"String::strspn") + ofs; // End of string after ofs

  for (int i=ofs; i<endOfs; i++) {
    int j;
    for (j=0; j<accept.size; j++)
      if (s[i] == accept[j])
	break; /* inner loop */
    if (j == accept.size) /* didn't find it */
      return i;
  }
      
  return -1;
}

////////////////////////// CONVERSIONS
list<Char> explode(string s) {
  list<Char> result = null;
  for (int i = s.size - 1; i >= 0; i--)
    result = &cons((Char)s[i],result);
  return result;
}

string implode(list<Char> chars) {
  string s = new_string(List::length(chars)+1);
  size_t i = 0;
  while (chars != null) {
    s[i++] = chars->hd;
    chars = chars->tl;
  }
  return(s);
}
