
////////////////////////////////////////////////////////////////////////////
// Popcorn library, file set.pop                                          //
// Copyright Greg Morrisett, Dan Grossman                                 //
// January 1999, all rights reserved                                      //
//                                                                        //
////////////////////////////////////////////////////////////////////////////

#include "list.h"
#include "set.h"

namespace Set;
using List;


/* Sets are a comparison function and a list of elements.
 * The comparison function should return 0 when elements are equal, i
 * < 0 if the first elt is less than the second, and i > 0 if the
 * first elt is greater than the second elt.  The list of nodes is
 * always maintained in sorted order with no duplicates.
 */
abstract
struct set<`a> {
  int (@compare)(`a,`a);
  int cardinality;
  list<`a> nodes;
};

/* Given a comparison function, return an empty set. */
Set<`a> empty<`a>(int (@comp)(`a,`a)) {
  return &set(comp,0,null);
}

Set<`a> singleton<`a>(int (@comp)(`a,`a),`a x) {
  return &set(comp,1,&cons(x,null));
}

int cardinality<`a>(Set<`a> s) {
  return(s->cardinality);
}

/* Determine whether a set is empty */
bool is_empty<`a>(Set<`a> s) {
  return(s->cardinality == 0);
}

/* Return true if element is present, false otherwise */
static bool member_b<`a>(int compare(`a,`a),list<`a> n,`a elt) {
  while (n != null) {
    int i = compare(elt,n->hd);
    if (i == 0) return(true);
    else if (i < 0) return(false);
    else n = n->tl;
  }
  return(false);
}

bool member<`a>(Set<`a> s,`a elt) {
  return(member_b(s->compare,s->nodes,elt));
}

/* Internal function to insert an elt into a sorted list of nodes,
 * returning a new list of nodes (that shares with the old one).
 * Assumes elt is not in the list.
 */
static list<`a> insert_b<`a>(int compare(`a,`a),list<`a> n,`a elt) {

  if (n == null)
    return &cons(elt,null);
  else {
    int i = compare(elt,n->hd);
    if (i < 0) 
      return &cons(elt,n);
    else {
      list<`a> result = &cons(n->hd,null);
      list<`a> prev = result;
      n = n->tl;
      while (n != null && (i = compare(n->hd,elt)) < 0) {
	prev->tl = &cons(n->hd,null);
	prev = prev->tl;
	n = n->tl;
      }
      prev->tl = &cons(elt,n);
      return(result);
    }
  }
}

/* Inserts an elt into a set. */
Set<`a> insert<`a>(Set<`a> s,`a elt) {
  if (member(s,elt)) return(s);
  else return &set(s->compare,s->cardinality+1,
                   insert_b(s->compare,s->nodes,elt));
}

/* Unions two sets by merging the nodes */
Set<`a> union_two<`a>(Set<`a> s1,Set<`a> s2) {
  if(s1 == s2)
    return s1;

  list<`a> nodes = null;
  int cardinality = 0;
  int (@comp)(`a,`a) = s1->compare;

  list<`a> x1 = s1->nodes;
  list<`a> x2 = s2->nodes;
  list<`a> curr = null;

  while ((x1 != null) && (x2 != null)) {
    int i = comp(x1->hd,x2->hd);
    if (i == 0) {
      // they're equal -- discard one copy
      x2 = x2->tl;
    } else if (i < 0) {
      // x1->hd <= x2->hd -- insert x1 into nodes
      if (curr == null) {
	nodes = &cons(x1->hd,null);
	curr = nodes;
      } else {
	curr->tl = &cons(x1->hd,null);
	curr = curr->tl;
      }
      x1 = x1->tl;
      ++cardinality;
    } else {
      // x2->hd <= x1->hd -- insert x2 into nodes
      if (curr == null) {
	nodes = &cons(x2->hd,null);
	curr = nodes;
      } else {
	curr->tl = &cons(x2->hd,null);
	curr = curr->tl;
      }
      x2 = x2->tl;
      ++cardinality;
    }
  }
  if (x1 != null) {
    // splice x1 into the tail
    if (curr == null)
      nodes = x1;
    else 
      curr->tl = x1;
    cardinality += List::length(x1);
  } else if (x2 != null) {
    // splice x2 into the tail
    if (curr == null)
      nodes = x2;
    else 
      curr->tl = x2;
    cardinality += List::length(x2);
  }
  return &set(comp,cardinality,nodes);
}
      
/* Internal function used to delete an elt from a list of nodes --
 * assumes the elt is in the list exactly once and that the nodes are sorted.
 */
static list<`a> delete_b<`a>(int compare(`a,`a),list<`a> n,`a elt) {
  if (compare(n->hd,elt) == 0) return(n->tl);

  list<`a> result = &cons(n->hd,null);
  list<`a> prev = result;
  n = n->tl;
  while (n != null && (compare(n->hd,elt) != 0)) {
    prev->tl = &cons(n->hd,null);
    prev = prev->tl;
    n = n->tl;
  }
  prev->tl = n->tl;
  return(result);
}

/* Delete a elt/pair from the set if present. */
Set<`a> delete<`a>(Set<`a> s,`a elt) {
  if (member(s,elt)) 
    return &set(s->compare,s->cardinality - 1,
                delete_b(s->compare,s->nodes,elt));
  else return(s);
}

list<`a> elements<`a>(Set<`a> s) {
  return(s->nodes);
}

/* Fold a function f across the set yielding an accumulator. */
`b fold<`a,`b>(`b f(`a,`b),Set<`a> s,`b accum) {
  list<`a> n = s->nodes;

  while (n != null) {
    accum = f(n->hd,accum);
    n = n->tl;
  }
  return(accum);
}
`b fold_c<`a,`b,`c>(`b f(`c,`a,`b),`c env,Set<`a> s,`b accum) {
  list<`a> n = s->nodes;

  while (n != null) {
    accum = f(env,n->hd,accum);
    n = n->tl;
  }
  return(accum);
}


/* Apply a function to each element in a set */
void app<`a,`b>(`b f(`a),Set<`a> s) {
  List::app(f,s->nodes);
}
void iter<`a>(void f(`a),Set<`a> s) {
  List::iter(f,s->nodes);
}
void iter_c<`a,`c>(void f(`c,`a),`c env,Set<`a> s) {
  List::iter_c(f,env,s->nodes);
}


/* return the intersection of two sets */
Set<`a> intersect<`a>(Set<`a> s1,Set<`a> s2) {
  int (@comp)(`a,`a) = s1->compare;
  list<`a> x1 = s1->nodes;
  list<`a> x2 = s2->nodes;
  list<`a> result=null,prev=null;
  int card = 0;

  while (x1 != null && x2 != null) {
    int i = comp(x1->hd,x2->hd);
    if (i == 0) {
      if (result == null) {
	result = &cons(x1->hd,null);
	prev = result;
      } else {
	prev->tl = &cons(x1->hd,null);
	prev = prev->tl;
      }
      ++card;
      x1 = x1->tl;
      x2 = x2->tl;
    } else if (i < 0) {
      x1 = x1->tl;
    } else {
      x2 = x2->tl;
    }
  }
  return &set(comp,card,result);
}

Set<`a> from_list<`a>(int comp(`a,`a),list<`a> x) {
  x = List::merge_sort(comp,x);
  // remove duplicates
  for (list<`a> y=x; y!=null; y=y->tl) {
    if ((y->tl != null) && (comp(y->hd,y->tl->hd) == 0))
      y->tl = y->tl->tl;
  }
  return &set(comp,List::length(x),x);
}

bool subset<`a>(Set<`a> s1,Set<`a> s2) {
  int (@comp)(`a,`a) = s1->compare;
  list<`a> x1 = s1->nodes;
  list<`a> x2 = s2->nodes;

  while (true) {
    if (x1 == null) return true;
    if (x2 == null) return false;
    int i = comp(x1->hd,x2->hd);
    if (i == 0) {
      x1 = x1->tl;
      x2 = x2->tl;
    } else if (i > 0) {
      x2 = x2->tl;
    } else return false;
  }
  return true;
}

Set<`a> diff<`a>(Set<`a> s1,Set<`a> s2) {
  int (@comp)(`a,`a) = s1->compare;
  list<`a> x1 = s1->nodes;
  list<`a> x2 = s2->nodes;
  int card = s1->cardinality;

  if (x2 == null) return(s1); 

  while (x2 != null) {
    `a elt = x2->hd;  

    if (member_b(comp,x1,elt)) {
      --card;
      x1 = delete_b(comp,x1,elt);
    }
    x2 = x2->tl;
  }
  return &set(comp,card,x1);
}

int compare<`a>(Set<`a> s1,Set<`a> s2) {
  if (s1 == s2) return 0;
  if (s1->cardinality != s2->cardinality) return s1->cardinality-s2->cardinality;

  list<`a> x1 = s1->nodes, x2 = s2->nodes;
  int (@comp)(`a,`a) = s1->compare;
  while (x1 != null) {
    int diff = comp(x1->hd,x2->hd);
    if (diff != 0) return diff;
    x1 = x1->tl;
    x2 = x2->tl;
  }
  return 0;
}

bool equals<`a>(Set<`a> s1, Set<`a> s2) {
  return compare(s1,s2) == 0;
}
    
xenum exn {Absent};

/* Return an elt (in this case -- the first one in the set).
 * If the set is empty, throw Absent.
 */
`a choose<`a>(Set<`a> s) {
  if (s->nodes == null) throw Absent();
  return(s->nodes->hd);
}
