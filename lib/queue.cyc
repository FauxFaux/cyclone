/* This file is part of the Cyclone Library.
   Copyright (C) 1999-2001 Greg Morrisett, Dan Grossman

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

// defines generic imperative queues and various operations
// following the conventions of the Ocaml queue library as much
// as possible.

#include <core.h>
#include <list.h>
#include <queue.h>

namespace Queue;

using List;

struct Queue<`a,`r,`q> { 
  list_t<`a,`r,`q> front; 
  list_t<`a,`r,`q> rear; 
  unsigned int len;
};

// true when the queue is empty
bool is_empty(queue_t<`a::B\T> q)  {
   return(q->front == NULL);
}

// raised by take and peek
datatype exn { Empty };
datatype exn.Empty Empty_val = Empty;

// create a new queue
queue_t<`a::B\T> create() {
  return new Queue(NULL,NULL,0);
}

queue_t<`a::B\T,`r> rcreate(region_t<`r> r) {
  return rnew (r) Queue(NULL,NULL,0);
}

// insert an element into the rear of the queue (side effect)
void radd(region_t<`r> r, queue_t<`a::B\T,`r> q,`a x) __attribute__((consume(3))) {
  list_t cell = rnew(r) List(x,NULL);

  if (q->front == NULL) {
    q->front = cell;
    q->rear = cell;
  } else {
    q->rear->tl = cell;
    q->rear = cell;
  }
  q->len++;
}

void add(queue_t<`a::B\T,`H> q, `a x) __attribute__((consume(2))) {
  radd(Core::heap_region,q,x);
}

// insert an element into the front of the queue (side effect)
void rpush(region_t<`r> r, queue_t<`a::B\T,`r> q,`a x) __attribute__((consume(3))) {
  q->front = rnew(r) List(x,q->front);
  if (q->rear == NULL)
    q->rear = q->front;
  q->len++;
}

void push(queue_t<`a::B\T,`H> q, `a x) __attribute__((consume(2))) {
  rpush(Core::heap_region,q,x);
}

// get and remove an element from the front of the queue (side effect)
`a take(queue_t<`a> q) {
  if (q->front == NULL)
    throw &Empty_val;
  let x = q->front->hd;
  q->front = q->front->tl;
  if (q->front == NULL)  // necessary to ensure last cell is
    q->rear = NULL;        // garbage collected
  q->len--;
  return x;
}

`a noalias_take(queue_t<`a::B\T> q, `a null_elem) __attribute__((consume(2))) {
  if (q->front == NULL)
    throw &Empty_val;
  null_elem :=: q->front->hd;
  q->front = q->front->tl;
  if (q->front == NULL)  // necessary to ensure last cell is
    q->rear = NULL;        // garbage collected
  q->len--;
  return null_elem;
}

`a *`U ptr_take(queue_t<`a::A\T *`U> q) {
  return noalias_take(q,NULL);
}

// return the first element in the queue without removing it
`a peek(queue_t<`a> q) {
  if (q->front == NULL)
    throw &Empty_val; 
  return q->front->hd;
}

// clear out the entire queue (side effect)
void clear(queue_t<`a::B\T> q) {
  q->front = NULL;
  q->rear = NULL;
  q->len = 0;
}

// remove a specific member (side effect)
void remove(queue_t<`a,`r> q,`a v) {
  list_t<`a,`r> x, y;
  for (x = q->front, y = NULL; x != NULL; y = x, x = x->tl)
    if (x->hd == v) {
      q->len--;
      // fix pointers at the front of the q
      if (q->front == x)
	q->front = x->tl;
      else
	y->tl = x->tl;
      // fix pointers at the rear
      if (q->rear == x)
	q->rear = y;
      break;
    }      
}

`a *`U take_match(region_t<`r> r, queue_t<`a::A\T *`U,`r> q,
		  bool (@f)(`b,`a *`U), `b env) {

  region g;
  queue_t<`a *\U,`g> saveq = rcreate(g);
  `a *\U x = NULL;
  bool ok = false;

  // look for a matching queue element
  if (is_empty(q))
    return NULL;

  do {
    x = ptr_take(q);
    if (f(env,x)) ok = true; 
    rpush(g,saveq,x);
    if (ok) break; 
  } while (!is_empty(q)); 

  x = ok ? ptr_take(saveq) : NULL;

  // put back any elements that didn't match and return
  while (!is_empty(saveq))
    rpush(r,q,ptr_take(saveq));
  return x;
}


// return the number of elements in the queue
int length(queue_t<`a::B\T> q) {
  return q->len;
}

// apply f to each element in the queue from the front to the back
void iter(void f(`a), queue_t<`a> q) {
  for (list_t<`a> x = q->front; x != NULL; x = x->tl)
    f(x->hd);
}
void app(`b f(`a), queue_t<`a> q) {
  for (list_t<`a> x = q->front; x != NULL; x = x->tl)
    f(x->hd);
}
