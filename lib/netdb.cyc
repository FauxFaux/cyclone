/* This file is part of the Cyclone Library.
   Copyright (C) 2000-2001 Greg Morrisett

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>
#include <config.h>
#include <netdb.h>
using Core;

namespace Cnetdb {
  abstract struct Cservent {
    Cstring s_name;
    Cstring @s_aliases;
    Inet::in_port_t s_port;
    Cstring s_proto;
  };
  abstract struct Chostent {
    Cstring h_name;
    Cstring @h_aliases;
#if defined(__CYGWIN32__) || defined(__CYGWIN__)
    short h_addrtype;
    short h_length;   // always 4
#else
    int h_addrtype;
    int h_length;     // always 4
#endif
    struct Inet::in_addr *@h_addr_list;
  };
  extern "C" {
    struct Cservent *getservbyname(const Cstring name, const Cstring proto);
    struct Chostent *gethostbyname(const Cstring name);
    void herror(Cstring);
    struct Inet::in_addr *?pntlp_toCyc(struct Inet::in_addr *@);
  }
#define s2c(x) (string_to_Cstring(x))
#define c2s(x) (Cstring_to_string(x))
}

namespace NetDB;

struct servent *getservbyname(string_t name, string_t proto) {
  struct Cnetdb::Cservent *src = Cnetdb::getservbyname(s2c(name),s2c(proto));
  return src ? new servent{.s_name = c2s(src->s_name),
                           .s_aliases = ntCsl_to_ntsl(src->s_aliases),
                           .s_port = src->s_port,
                           .s_proto = c2s(src->s_proto)}
    : NULL;
}

struct hostent *gethostbyname(string_t name) {
  struct Cnetdb::Chostent *src = Cnetdb::gethostbyname(s2c(name));
  return src ? new hostent{.h_name = c2s(src->h_name),
                           .h_aliases = ntCsl_to_ntsl(src->h_aliases),
                           .h_addrtype = src->h_addrtype,
                           .h_length = src->h_length,
                           .h_addr_list = Cnetdb::pntlp_toCyc(src->h_addr_list)}
    : NULL;
}

void herror(const char ?`r s) { Cnetdb::herror(s2c(s)); }
