/* This file is part of the Cyclone Library.
   Copyright (C) 1999-2001 Greg Morrisett, Dan Grossman, AT&T

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>

// The rest is all Cyclone
namespace Core;

datatype exn { Invalid_argument(string_t) };
datatype exn { SysError(int) };

/////////////////////////////Generally Useful Things//////////////
datatype exn { Failure(string_t) };
datatype exn { Impossible(string_t) };
datatype exn { Not_found };
datatype exn.Not_found Not_found_val = Not_found;
datatype exn { Unreachable(string_t) };
struct Opt<`a> { `a v; };
opt_t<`b,`H> opt_map(`b f(`a), opt_t<`a> o) {
  if (o==NULL)
    return NULL;
  return new Opt(f(o->v));
}

mstring_t<`H> new_string(unsigned int i) {
  return calloc(i,sizeof(char));
}

mstring_t<`r::TR> rnew_string(region_t<`r> r, unsigned int i) {
  return rcalloc(r,i,sizeof(char));
}

struct NewRegion _new_dynregion(const char @ file, int lineno) {
  return _rnew_dynregion(heap_region, file, lineno);
}

bool true_f(`a x)  {  return true;  }
bool false_f(`a x) {  return false; }

int intcmp(int a, int b)   { return a - b; }
int charcmp(char a,char b) { return (int)a - (int)b; }
int nptrcmp(`a::TA * `r a, `a * `r b) {
  if(a == b) return 0;
  if(a >  b) return 1;
  return -1;
}
int ptrcmp(`a::TA @ `r a, `a @ `r b) {
  if(a == b) return 0;
  if(a >  b) return 1;
  return -1;
}

`a fst($(`a,`b) @ pair) { return (*pair)[0]; }
`b snd($(`a,`b) @ pair) { return (*pair)[1]; }
`c third($(`a,`b,`c) @ triple) { return (*triple)[2];}

`a identity(`a::TB x) {
  return x;
}

/* convert a thin pointer, its element size, and the number of elements
 * to a fat pointer.  The interface for this is given in core.h. */
extern "C include" {
`a::A ? Cyc_Core_mkfat(void *arr, unsigned s, unsigned n) {
  struct _dyneither_ptr res;
  res.curr = arr;
  res.base = arr;
  res.last_plus_one = arr + s*n;
  return res;
}
} export {}

