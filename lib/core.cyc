#include "core.h"

////////////////////////////////////////////////////////////////////////////
// Popcorn library, file core.pop                                         //
// Copyright Greg Morrisett, Dan Grossman                                 //
// January 1999, all rights reserved                                      //
//                                                                        //
////////////////////////////////////////////////////////////////////////////

// These are supplied by C; they do not appear in core.h, we want them
// to be used only from the functions in this file.
extern FILE   *fopen(Cstring,Cstring);
extern int    f_close(FILE *);
extern int    cyc_argc;
extern void   start_args();
extern string next_arg();
namespace String {
extern string strconcat(string,string);
}

// The rest is all Cyclone
namespace Core;

xenum exn { FileOpenError(string) };
xenum exn { FileCloseError };
xenum exn { InvalidArg(string) };
xenum exn { SysError(int) };

FILE @ file_open(string fname, string mode) {
  FILE *f = fopen(string_to_Cstring(fname), string_to_Cstring(mode));
  if (f == null) throw FileOpenError(fname);
  return (FILE @)f;  // FIX: get rid of cast ??
}
void file_close(FILE @f) {
  if (f_close(f) != 0) throw FileCloseError();
}
int file_delete(string fname) { // this should be added to the runtime
  int i = system(string_to_Cstring(String::strconcat("rm ", fname))); 
  if (i != 0) throw SysError(i);
  return i;
}

/* Popcorn version of fgets; returns the # of chars read */
int file_gets(string buf,int ofs,FILE @f) {
  int i, len = size(buf), retc;
  if (ofs < 0 || ofs >= len)
    throw InvalidArg("file_gets");
  /* built on f_string_read; pretty inefficient but oh well */
  for (i = ofs; i<len; i++) {
    retc = f_string_read(f,buf,i,1);
    if (retc   !=   1 || /* assume EOF */ 
	buf[i] == '\n') { /* end-of-line */
      buf[i] = '\000';
      break;
    }
  }
  return i-ofs;
}

string std_args()[?] {
  string args[?] = new { for i < cyc_argc : (string)"" };
  start_args();
  for (int i = 0; i < cyc_argc; i++)
    args[i] = next_arg();
  return args;
}

/////////////////////////////Generally Useful Things//////////////
xenum exn { Failure(string) };
xenum exn { Impossible(string) };
xenum exn { Not_found };
xenum exn { Unreachable(string) };

Opt_t<`b> opt_map<`a,`b>(`b f(`a), Opt_t<`a> o) {
  if (o==null)
    return null;
  return &Opt(f(o->v));
}

string new_string(int i) {
  return (string)(new {for j < i : '\000'});
}

bool true_f<`a>(`a x)  {  return true;  }
bool false_f<`a>(`a x) {  return false; }

int intcmp(int a, int b)   { return a - b; }
int charcmp(char a,char b) { return (int)a - (int)b; }

`a fst<`a,`b>($(`a,`b) @pair) { return(pair[0]); }
`b snd<`a,`b>($(`a,`b) @pair) { return(pair[1]); }

`c third<`a,`b,`c>($(`a,`b,`c) @triple) {
  return(triple[2]);
}

`a identity<`a>(`a x) {
  return x;
}

bool is_space(char c) {
  switch ((int)c) {
  case  9: return true;
  case 10: return true;
  case 11: return true;
  case 12: return true;
  case 13: return true;
  case 32: return true;
  default: return false;
  }
}

static int int_of_char(char c) {
  if ('0'<=c && c<='9')      return c-'0';
  else if ('a'<=c && c<='f') return 10+c-'a';
  else if ('A'<=c && c<='F') return 10+c-'A';
  else throw InvalidArg("string to integer conversion");
}

int int_of_string(string s)
{
  int n, i, base;
  int sign = 1;

  // skip leading whitespace and eat the sign
  for(i=0; i<size(s) && is_space(s[i]); ++i)
    ;
  while (i<size(s) &&(s[i]=='-' || s[i]=='+')) {
    if (s[i]=='-') sign = - sign;
    i++;
  } 
  if (i==size(s)) 
    throw InvalidArg("string to integer conversion");

  // determine the base
  if (i+1 == size(s) || s[i]!='0') 
    base = 10;
  else {
    switch (s[++i]) {
    case 'x': base = 16;  ++i; break;
    case 'o': base =  8;  ++i; break;
    case 'b': base =  2;  ++i; break;
    default:  base = 10; break;
    }
  }
  // do the math
  for(n=0; i<size(s) && s[i] != '\000'; ++i) {
    int digit = int_of_char(s[i]);
    if (digit >= base) 
      throw InvalidArg("string to integer conversion");
    n = n*base+digit;
  }
  return sign*n;
}

string string_of_int_width(int n, int minWidth) {
  int i, len = 0;
  bool negative = false;
  if (n < 0) {
    negative=true;
    ++len;
    n = -n;
  }
  int m = n;
  do ++len; while ((m /= 10) > 0);
  len = len > minWidth ? len : minWidth;
  string ans = new_string(len+1);
  for(i=len-1; n > 0; --i) { 
    ans[i] = (char)('0' + (n % 10));
    n /= 10;
  }
  for (; i>=0; --i)
    ans[i] = '0';

  // this line should be here (Luke 11-10-99)
  if (negative) ans[0] = '-';
  return ans;
}

string string_of_int(int n) {
  return string_of_int_width(n,0);
}

string string_of_uint(unsigned int n) {
  int len = 0;
  unsigned int m = n;
  do ++len; while ((m /= 10) > 0);
  string ans = new_string(len+1);
  for(int i=len-1; i>=0; --i) {
    ans[i] = (char)('0' + n % 10);
    n /= 10;
  }
  return ans;
}

string string_of_char(char c) {
  string ans = new_string(2);
  ans[0] = c;
  return ans;
}
