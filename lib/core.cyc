/* This file is part of the Cyclone Library.
   Copyright (C) 1999-2001 Greg Morrisett, Dan Grossman, AT&T

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

#include <core.h>

// The rest is all Cyclone
namespace Core;

datatype exn { Invalid_argument(string_t) };
datatype exn { SysError(int) };

/////////////////////////////Generally Useful Things//////////////
datatype exn { Failure(string_t) };
datatype exn { Impossible(string_t) };
datatype exn { Not_found };
datatype exn.Not_found Not_found_val = Not_found;
datatype exn { Unreachable(string_t) };
struct Opt<`a> { `a v; };
opt_t<`b,`H,UNIQUE> opt_map(`b f(`a), opt_t<`a> o) {
  return (o==NULL) ? NULL : qnew(unique_qual) Opt(f(o->v));//new<unique_qual> Opt(f(o->v));//
}

mstring_t<`H> new_string(unsigned int i) {
  return calloc(i,sizeof(char));
}

mstring_t<`r::R> rnew_string(region_t<`r> r, unsigned int i) {
  return rcalloc(r,i,sizeof(char));
}
mstring_t<`r,`q> rqnew_string(region_t<`r> r, aqual_t<`q> q, unsigned int i) {
  return NULL;//qcalloc(r,q,i,sizeof(char));
}

bool true_f(`a x)  {  return true;  }
bool false_f(`a x) {  return false; }

int intcmp(int a, int b)   { return a - b; }
int charcmp(char a,char b) { return (int)a - (int)b; }
int nptrcmp(`a::A\T * `r a, `a * `r b) {
  if(a == b) return 0;
  if(a >  b) return 1;
  return -1;
}
int ptrcmp(`a::A\T @ `r a, `a @ `r b) {
  return nptrcmp(a,b);
}

`a fst($(`a,`b) @ pair) { return (*pair)[0]; }
`b snd($(`a,`b) @ pair) { return (*pair)[1]; }
`c third($(`a,`b,`c) @ triple) { return (*triple)[2];}

`a identity(`a x) { return x; }

`a ? @autoreleased `C autorelease(`a::A\T ?`RC ptr)  __attribute__((noliveunique(1))) {
  return Core::autorelease_handle(Core::current_handle(),ptr);
}

/* convert a thin pointer, its element size, and the number of elements
 * to a fat pointer.  The interface for this is given in core.h. */
extern "C include" {
  `a::A ? Cyc_Core_mkfat(__nn_cyclone_internal_array_t<`a,`i,`r> arr, sizeof_t<`a> s,
		__cyclone_internal_singleton<`i> n) {
    struct _fat_ptr res;
    res.curr = arr;
    res.base = arr;
    res.last_plus_one = arr + s*n;
    return res;
    } 
  __cyclone_internal_array_t<`a,`i,`r>
  Cyc_Core_arrcast(`a ?`r dyn, __cyclone_internal_singleton<`i> bd, sizeof_t<`a> sz) {
    // check that the multiplication cannot overflow
    // FIX: could be more lenient here!
    // (currently allows up to 1M-1 elements each of size up to 4K-1)
    if((bd >> 20) || (sz >> 12))
      return 0;
    unsigned char *ptrbd = dyn.curr + bd*sz;
    if((ptrbd < dyn.curr)              // check for overflow
       || (dyn.curr == 0)              // check for NULL
       || (dyn.curr < dyn.base)        // check large enough
       || (ptrbd > dyn.last_plus_one)) // check small enough
      return 0;
    return dyn.curr;
  } 
  struct ThinRes<`a,`r> Cyc_Core_mkthin(`a ?`r dyn, sizeof_t<`a> sz) {
    struct Cyc_Core_ThinRes res;
    res.arr = dyn.curr;
    res.nelts = _get_fat_size(dyn,sz);
    return res;
  } 
  // Returns the size of an array from the current pointer back to
  // its starting point.  If the curr pointer = start pointer, or 
  // the curr pointer is out of bounds, then this is 0.
  unsigned int Cyc_Core_arr_prevsize(`a ? arr, sizeof_t<`a> elt_sz) {
    unsigned char *_get_arr_size_curr=arr.curr;
    unsigned char *_get_arr_size_base=arr.base;
    return 
      (_get_arr_size_curr < _get_arr_size_base ||
       _get_arr_size_curr >= arr.last_plus_one) ? 0 :
      ((_get_arr_size_curr - _get_arr_size_base) / (elt_sz));
  }
} export { Cyc_Core_mkfat, Cyc_Core_arrcast, Cyc_Core_arr_prevsize; }

