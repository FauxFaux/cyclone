/* Array sorting algorithm using Quicksort.  Ported from: */

/******************************************************************/
/* qsort.c  --  Non-Recursive ANSI Quicksort function             */
/*                                                                */
/* Public domain by Raymond Gardner, Englewood CO  February 1991  */
/*                                                                */
/* Usage:                                                         */
/*     qsort(base, nbr_elements, width_bytes, compare_function);  */
/*        void *base;                                             */
/*        size_t nbr_elements, width_bytes;                       */
/*        int (*compare_function)(const void *, const void *);    */
/*                                                                */
/* Sorts an array starting at base, of length nbr_elements, each  */
/* element of size width_bytes, ordered via compare_function,     */
/* which is called as  (*compare_function)(ptr_to_element1,       */
/* ptr_to_element2) and returns < 0 if element1 < element2,       */
/* 0 if element1 = element2, > 0 if element1 > element2.          */
/* Most refinements are due to R. Sedgewick. See "Implementing    */
/* Quicksort Programs", Comm. ACM, Oct. 1978, and Corrigendum,    */
/* Comm. ACM, June 1979.                                          */
/******************************************************************/

#include "core.h"

namespace Array;

#define  SWAP(a, b)  { temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; }
#define  COMP(a, b)  (less_eq(arr[a], arr[b]))
#define  T           3    /* subfiles of T or fewer elements will */
                          /* be sorted by a simple insertion sort */
                          /* Note!  T must be at least 3          */


// FIX: had to lift this out of the qsort function.  The problem is,
// no default initializers, and translation of initializers within
// function does not give legal C.
static int sp[40] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

void qsort<`a>(int less_eq(`a,`a),`a arr[?],int base_ofs, int len)
{
  `a temp;
  // int sp[40]; // FIX: complains not initialized
  int sp_ofs;           /* stack and stack pointer        */
  int i, j, limit_ofs;         /* scan and limit pointers        */

  if (base_ofs < 0 || base_ofs + len > size(arr))
    throw Core::InvalidArg("Array::qsort");

  limit_ofs = base_ofs + len;
  sp_ofs = 0;

  for ( ;; ) {                  /* repeat until break...          */
    if ( limit_ofs - base_ofs > T ) { /* if more than T elements  */
                                      /*   swap base with middle  */
         SWAP((limit_ofs-base_ofs)/2 + base_ofs, base_ofs);
         i = base_ofs + 1;            /* i scans left to right    */
         j = limit_ofs - 1;           /* j scans right to left    */
         if ( COMP(i, j) > 0 )        /* Sedgewick's              */
            SWAP(i, j);               /*    three-element sort    */
         if ( COMP(base_ofs, j) > 0 ) /*        sets things up    */
            SWAP(base_ofs, j);        /*            so that       */
         if ( COMP(i, base_ofs) > 0 ) /*      *i <= *base <= *j   */
            SWAP(i, base_ofs);        /* *base is pivot element   */
         for ( ;; ) {                 /* loop until break         */
            do                        /* move i right             */
               i ++;                  /*        until *i >= pivot */
            while ( COMP(i, base_ofs) < 0 );
            do                        /* move j left              */
               j --;                  /*        until *j <= pivot */
            while ( COMP(j, base_ofs) > 0 );
            if ( i > j )              /* if pointers crossed      */
               break;                 /*     break loop           */
            SWAP(i, j);       /* else swap elements, keep scanning*/
         }
         SWAP(base_ofs, j);     /* move pivot into correct place  */
                                        /* if left subfile larger */
         if ( j - base_ofs > limit_ofs - i ) {  
            sp[sp_ofs] = base_ofs;    /* stack left subfile base  */
            sp[sp_ofs+1] = j;         /*    and limit             */
            base_ofs = i;             /* sort the right subfile   */
         } else {                     /* else right subfile larger*/
            sp[sp_ofs] = i;           /* stack right subfile base */
            sp[sp_ofs+1] = limit_ofs; /*    and limit             */
            limit_ofs = j;            /* sort the left subfile    */
         }
         sp_ofs += 2;                 /* increment stack pointer  */
      } else {      /* else subfile is small, use insertion sort  */
         for ( j = base_ofs, i = j+1; i < limit_ofs; j = i, i ++ )
            for ( ; COMP(j, j+1) > 0; j -- ) {
               SWAP(j, j+1);
               if ( j == base_ofs )
                  break;
            }
         if ( sp_ofs != 0 ) {         /* if any entries on stack  */
            sp_ofs -= 2;              /* pop the base and limit   */
            base_ofs = sp[sp_ofs];
            limit_ofs = sp[sp_ofs+1];
         } else                       /* else stack empty, done   */
            break;
      }
   }
}
