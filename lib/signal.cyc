#include <core.h>
#include <signal.h>
using Core;

namespace Csignal {
  extern "C" {
    extern struct Csig_func_ptr;
    typedef struct Csig_func_ptr *Csig_func_ptr;
    Csig_func_ptr signal(int sig, Csig_func_ptr func);
    Csig_func_ptr signal_toC(Signal::_sig_func_ptr);
    Signal::_sig_func_ptr signal_fromC(Csig_func_ptr func);
  }
#define toC(p) Csignal::signal_toC(p)
#define fromC(p) Csignal::signal_fromC(p)
}

namespace Signal;

void _SIG_DFL(int n;{}) {} // equate to 0
void _SIG_IGN(int n;{}) {} // equate to 1
void _SIG_ERR(int n;{}) {} // equate to -1

_sig_func_ptr signal(int sig, _sig_func_ptr func) {
  return fromC(Csignal::signal(sig, toC(func)));
}
