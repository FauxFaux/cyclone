/* This file is part of the Cyclone Library.
   Copyright (C) 1999-2001 Greg Morrisett, Dan Grossman

   This library is free software; you can redistribute it and/or it
   under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place, Suite
   330, Boston, MA 02111-1307 USA. */

// This implementation suffers two shortcomings:
// 1. It does no string sharing -- crucial for talc efficiency in the ocaml
//    implementation.
// 2. It does copy incoming strings, allowing for later mutation via external
//    code.  Could probably live without this one

#include <core.h>
#include <stdio.h>
#include <string.h>
#include <list.h>
#include <id.h>

using Core;
using List;

namespace Id;

abstract struct id {
  string_t s;
  int i;
};

Id id_make(string_t<`H> s,int i) {  return new id(s,i); }

static int counter = 0;

Id id_new(string_t<`H> s) {
  ++counter;
  return id_make(s,counter);
}

Id id_renew(Id i) {
  ++counter;
  return id_make(i->s,counter);
}

Id id_of_string(string_t<`H> s) { return id_make(s,-1); }
Id id_unique   (string_t<`H> s) { return id_new(s); }

mstring_t id_to_string(Id x) {
  if (x->i == -1)
    return strdup(x->s);
  return strconcat_l(new List(new {x->s},
                              new List(new ((string_t)"$"), 
                                       new List(new {(string_t)string_of_int(x->i)},
                                                NULL))));
}
void id_prn(FILE @f, Id x) { fprintf(f, "%s", id_to_string(x)); }

mstring_t id_to_source(Id x) { return strdup(x->s); }

int id_compare(Id x1,Id x2) {
  if (x1->i == x2->i)
    return(zstrcmp(x1->s,x2->s));
  else if (x1->i < x2->i) return(-1);
  else return(1);
}
