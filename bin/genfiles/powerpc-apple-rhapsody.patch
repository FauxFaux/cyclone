diff -rbBcN --exclude=CVS i686-unknown-linux/lib/execinfo.c powerpc-apple-rhapsody/lib/execinfo.c
*** i686-unknown-linux/lib/execinfo.c	Wed Oct 10 15:30:52 2001
--- powerpc-apple-rhapsody/lib/execinfo.c	Wed Oct 10 15:39:38 2001
***************
*** 230,333 ****
  extern struct _tagged_arr wrap_Cstring_as_string( unsigned char*, unsigned int);
  extern struct _tagged_arr ntCsl_to_ntsl( unsigned char**); int Cyc_Execinfo_backtrace(
  struct _tagged_arr, int); int Cyc_Execinfo_bt(); struct Cyc_Std___sFILE; extern
! struct Cyc_Std___sFILE* Cyc_Std_stdout; extern int Cyc_Std_fclose( struct Cyc_Std___sFILE*);
! extern int Cyc_Std_fflush( struct Cyc_Std___sFILE*); extern int Cyc_Std_getc(
! struct Cyc_Std___sFILE* __stream); extern int Cyc_Std_putc( int __c, struct Cyc_Std___sFILE*
! __stream); extern struct Cyc_Std___sFILE* Cyc_Std_fdopen( int __fd, struct
! _tagged_arr __modes); extern unsigned char Cyc_Std_FileCloseError[ 19u]; extern
! unsigned char Cyc_Std_FileOpenError[ 18u]; struct Cyc_Std_FileOpenError_struct{
! unsigned char* tag; struct _tagged_arr f1; } ; static const int Cyc_Std_String_pa=
! 0; struct Cyc_Std_String_pa_struct{ int tag; struct _tagged_arr f1; } ; static
! const int Cyc_Std_Int_pa= 1; struct Cyc_Std_Int_pa_struct{ int tag; unsigned int
! f1; } ; static const int Cyc_Std_Double_pa= 2; struct Cyc_Std_Double_pa_struct{
! int tag; double f1; } ; static const int Cyc_Std_ShortPtr_pa= 3; struct Cyc_Std_ShortPtr_pa_struct{
! int tag; short* f1; } ; static const int Cyc_Std_IntPtr_pa= 4; struct Cyc_Std_IntPtr_pa_struct{
! int tag; unsigned int* f1; } ; extern int Cyc_Std_fprintf( struct Cyc_Std___sFILE*,
! struct _tagged_arr fmt, struct _tagged_arr); extern int Cyc_Std_printf( struct
! _tagged_arr fmt, struct _tagged_arr); extern struct _tagged_arr Cyc_Std_aprintf(
! struct _tagged_arr fmt, struct _tagged_arr); static const int Cyc_Std_ShortPtr_sa=
! 0; struct Cyc_Std_ShortPtr_sa_struct{ int tag; short* f1; } ; static const int
! Cyc_Std_UShortPtr_sa= 1; struct Cyc_Std_UShortPtr_sa_struct{ int tag;
! unsigned short* f1; } ; static const int Cyc_Std_IntPtr_sa= 2; struct Cyc_Std_IntPtr_sa_struct{
! int tag; int* f1; } ; static const int Cyc_Std_UIntPtr_sa= 3; struct Cyc_Std_UIntPtr_sa_struct{
! int tag; unsigned int* f1; } ; static const int Cyc_Std_StringPtr_sa= 4; struct
! Cyc_Std_StringPtr_sa_struct{ int tag; struct _tagged_arr f1; } ; static const
! int Cyc_Std_DoublePtr_sa= 5; struct Cyc_Std_DoublePtr_sa_struct{ int tag; double*
! f1; } ; static const int Cyc_Std_FloatPtr_sa= 6; struct Cyc_Std_FloatPtr_sa_struct{
  int tag; float* f1; } ; extern int wait( int* status); extern int waitpid( int
  pid, int* status, int options); void(* Cyc_Std_signal( int sig, void(* func)(
! int)))( int); extern int raise( int sig); extern int kill( int, int); struct Cyc_Std_timeval{
! int tv_sec; int tv_usec; } ; struct Cyc_Std_timezone{ int tz_minuteswest; int
! tz_dsttime; } ; extern int gettimeofday( struct Cyc_Std_timeval* __p, struct Cyc_Std_timezone*
! __z); struct Cyc_Std_option{ struct _tagged_arr name; int has_arg; int* flag;
! int val; } ; extern unsigned int alarm( unsigned int seconds); extern int close(
! int); extern void _exit( int); extern int getpid(); extern int getppid(); extern
! int fork(); extern int fchdir( int); extern int fchown( int, unsigned int,
! unsigned int); extern int fsync( int); extern int ftruncate( int, int); extern
! int dup( int); extern int dup2( int, int); extern unsigned int getuid(); extern
! int setuid( unsigned int uid); extern unsigned int geteuid(); extern int seteuid(
! unsigned int euid); extern unsigned int getgid(); extern int setgid(
! unsigned int gid); extern unsigned int getegid(); extern int setegid(
! unsigned int egid); extern int nice( int); extern int pause(); extern int pipe(
! int* filedes); extern int lseek( int filedes, int offset, int whence); extern
! unsigned int sleep( unsigned int); int Cyc_Std_access( struct _tagged_arr, int);
! int Cyc_Std_chdir( struct _tagged_arr); int Cyc_Std_chown( struct _tagged_arr,
! unsigned int, unsigned int); struct _tagged_arr Cyc_Std_getcwd( struct
! _tagged_arr buf, unsigned int size); int Cyc_Std_execl( struct _tagged_arr path,
! struct _tagged_arr arg0, struct _tagged_arr argv); int Cyc_Std_execlp( struct
! _tagged_arr file, struct _tagged_arr arg0, struct _tagged_arr argv); int Cyc_Std_execve(
! struct _tagged_arr filename, struct _tagged_arr argv, struct _tagged_arr envp);
! int Cyc_Std_link( struct _tagged_arr, struct _tagged_arr); int Cyc_Std_read( int
! fd, struct _tagged_arr buf, unsigned int count); int Cyc_Std_rmdir( struct
! _tagged_arr); int Cyc_Std_symlink( struct _tagged_arr, struct _tagged_arr); int
! Cyc_Std_truncate( struct _tagged_arr, int); int Cyc_Std_write( int fd, struct
! _tagged_arr buf, unsigned int count); int Cyc_Std_unlink( struct _tagged_arr
! pathname); extern int backtrace( int*, int); int Cyc_Execinfo_backtrace( struct
! _tagged_arr array, int size){ if( size >  _get_arr_size( array, sizeof( int))){(
! int) _throw(( void*)({ struct Cyc_Core_Failure_struct* _temp0=( struct Cyc_Core_Failure_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Failure_struct)); _temp0[ 0]=({ struct Cyc_Core_Failure_struct
! _temp1; _temp1.tag= Cyc_Core_Failure; _temp1.f1= _tag_arr("backtrace: size > array.size",
! sizeof( unsigned char), 29u); _temp1;}); _temp0;}));} return backtrace(( int*)
! _check_null( _untag_arr( array, sizeof( int), 1u)), size);} int Cyc_Execinfo_bt(){
! int bt[ 20u];{ unsigned int _temp10= 20u; unsigned int i; for( i= 0; i < 
! _temp10; i ++){ bt[ i]= 0;}}{ int tochild[ 2u]={ 0, 0}; int fromchild[ 2u]={ 0,
! 0}; int pid; int self_pid; if( pipe( tochild)? 1: pipe( fromchild)){ return 1;}
! self_pid= getpid(); if(( pid= fork()) ==  0){ if( dup2( tochild[
! _check_known_subscript_notnull( 2u, 0)], 0) ==  - 1? 1: dup2( fromchild[
! _check_known_subscript_notnull( 2u, 1)], 1) ==  - 1){ return 1;}({ struct
! _tagged_arr _temp2[ 4u]; _temp2[ 3u]=( struct _tagged_arr) _tag_arr( 0u, 0u, 0u);
! _temp2[ 2u]=( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp4; _temp4.tag=
! Cyc_Std_Int_pa; _temp4.f1=( int)(( unsigned int) self_pid);{ void* _temp3[ 1u]={&
! _temp4}; Cyc_Std_aprintf( _tag_arr("/proc/%d/exe", sizeof( unsigned char), 13u),
! _tag_arr( _temp3, sizeof( void*), 1u));}}); _temp2[ 1u]= _tag_arr("-e", sizeof(
! unsigned char), 3u); _temp2[ 0u]= _tag_arr("--functions", sizeof( unsigned char),
! 12u); Cyc_Std_execlp( _tag_arr("addr2line", sizeof( unsigned char), 10u),
! _tag_arr("addr2line", sizeof( unsigned char), 10u), _tag_arr( _temp2, sizeof(
! struct _tagged_arr), 4u));}); return 1;} else{ if( pid <  0){ close( tochild[
! _check_known_subscript_notnull( 2u, 0)]); close( tochild[
! _check_known_subscript_notnull( 2u, 1)]); close( fromchild[
! _check_known_subscript_notnull( 2u, 0)]); close( fromchild[
! _check_known_subscript_notnull( 2u, 1)]); return 1;}}{ struct Cyc_Std___sFILE* w=({
! struct Cyc_Std___sFILE* f= Cyc_Std_fdopen( tochild[
! _check_known_subscript_notnull( 2u, 1)], _tag_arr("w", sizeof( unsigned char), 2u));
! if( !(( unsigned int) f)){ return 1;}( struct Cyc_Std___sFILE*) _check_null( f);});
! struct Cyc_Std___sFILE* r=({ struct Cyc_Std___sFILE* f= Cyc_Std_fdopen(
! fromchild[ _check_known_subscript_notnull( 2u, 0)], _tag_arr("r", sizeof(
! unsigned char), 2u)); if( !(( unsigned int) f)){ Cyc_Std_fclose( w); return 1;}(
! struct Cyc_Std___sFILE*) _check_null( f);}); int n= Cyc_Execinfo_backtrace(
! _tag_arr( bt, sizeof( int), 20u),( int) 20u);{ int c= 0; for( 0; c <  n; c ++){({
! struct Cyc_Std_Int_pa_struct _temp6; _temp6.tag= Cyc_Std_Int_pa; _temp6.f1=(
! unsigned int) bt[ _check_known_subscript_notnull( 20u, c)];{ void* _temp5[ 1u]={&
! _temp6}; Cyc_Std_fprintf( w, _tag_arr("%#x\n", sizeof( unsigned char), 5u),
! _tag_arr( _temp5, sizeof( void*), 1u));}});}} Cyc_Std_fflush(( struct Cyc_Std___sFILE*)
! w);({ void* _temp7[ 0u]={}; Cyc_Std_printf( _tag_arr("Backtrace:\n  Function          Location\n  ----------------  --------------------------------\n",
! sizeof( unsigned char), 94u), _tag_arr( _temp7, sizeof( void*), 0u));});{ int c=
! 0; for( 0; c <  n; c ++){ int d; int pos= 0;({ void* _temp8[ 0u]={}; Cyc_Std_printf(
! _tag_arr("  ", sizeof( unsigned char), 3u), _tag_arr( _temp8, sizeof( void*), 0u));});
! while(( d= Cyc_Std_getc( r)) != '\n') {( Cyc_Std_putc( d, Cyc_Std_stdout), pos
! ++);} while( pos ++ <  16) { Cyc_Std_putc(( int)' ', Cyc_Std_stdout);}({ void*
! _temp9[ 0u]={}; Cyc_Std_printf( _tag_arr("  ", sizeof( unsigned char), 3u),
! _tag_arr( _temp9, sizeof( void*), 0u));}); while(( d= Cyc_Std_getc( r)) != '\n') {
! Cyc_Std_putc( d, Cyc_Std_stdout);} Cyc_Std_putc(( int)'\n', Cyc_Std_stdout);}}
! Cyc_Std_fclose( r); Cyc_Std_fclose( w); kill( pid, 15); waitpid( pid, 0, 0);
! return 0;}}}
--- 230,257 ----
  extern struct _tagged_arr wrap_Cstring_as_string( unsigned char*, unsigned int);
  extern struct _tagged_arr ntCsl_to_ntsl( unsigned char**); int Cyc_Execinfo_backtrace(
  struct _tagged_arr, int); int Cyc_Execinfo_bt(); struct Cyc_Std___sFILE; extern
! unsigned char Cyc_Std_FileCloseError[ 19u]; extern unsigned char Cyc_Std_FileOpenError[
! 18u]; struct Cyc_Std_FileOpenError_struct{ unsigned char* tag; struct
! _tagged_arr f1; } ; static const int Cyc_Std_String_pa= 0; struct Cyc_Std_String_pa_struct{
! int tag; struct _tagged_arr f1; } ; static const int Cyc_Std_Int_pa= 1; struct
! Cyc_Std_Int_pa_struct{ int tag; unsigned int f1; } ; static const int Cyc_Std_Double_pa=
! 2; struct Cyc_Std_Double_pa_struct{ int tag; double f1; } ; static const int Cyc_Std_ShortPtr_pa=
! 3; struct Cyc_Std_ShortPtr_pa_struct{ int tag; short* f1; } ; static const int
! Cyc_Std_IntPtr_pa= 4; struct Cyc_Std_IntPtr_pa_struct{ int tag; unsigned int* f1;
! } ; static const int Cyc_Std_ShortPtr_sa= 0; struct Cyc_Std_ShortPtr_sa_struct{
! int tag; short* f1; } ; static const int Cyc_Std_UShortPtr_sa= 1; struct Cyc_Std_UShortPtr_sa_struct{
! int tag; unsigned short* f1; } ; static const int Cyc_Std_IntPtr_sa= 2; struct
! Cyc_Std_IntPtr_sa_struct{ int tag; int* f1; } ; static const int Cyc_Std_UIntPtr_sa=
! 3; struct Cyc_Std_UIntPtr_sa_struct{ int tag; unsigned int* f1; } ; static const
! int Cyc_Std_StringPtr_sa= 4; struct Cyc_Std_StringPtr_sa_struct{ int tag; struct
! _tagged_arr f1; } ; static const int Cyc_Std_DoublePtr_sa= 5; struct Cyc_Std_DoublePtr_sa_struct{
! int tag; double* f1; } ; static const int Cyc_Std_FloatPtr_sa= 6; struct Cyc_Std_FloatPtr_sa_struct{
  int tag; float* f1; } ; extern int wait( int* status); extern int waitpid( int
  pid, int* status, int options); void(* Cyc_Std_signal( int sig, void(* func)(
! int)))( int); extern int raise( int sig); extern int kill( int, int); int Cyc_Execinfo_backtrace(
! struct _tagged_arr array, int size){( int) _throw(( void*)({ struct Cyc_Core_Failure_struct*
! _temp0=( struct Cyc_Core_Failure_struct*) _cycalloc( sizeof( struct Cyc_Core_Failure_struct));
! _temp0[ 0]=({ struct Cyc_Core_Failure_struct _temp1; _temp1.tag= Cyc_Core_Failure;
! _temp1.f1= _tag_arr("backtrace: unsupported except under Linux", sizeof(
! unsigned char), 42u); _temp1;}); _temp0;})); return 0;} int Cyc_Execinfo_bt(){
! return 1;}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/absyn.c powerpc-apple-rhapsody/src/absyn.c
*** i686-unknown-linux/src/absyn.c	Wed Oct 10 15:39:54 2001
--- powerpc-apple-rhapsody/src/absyn.c	Wed Oct 10 15:39:28 2001
***************
*** 277,283 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 277,283 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 368,430 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 368,427 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 645,654 ****
  struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeoftyp_exp(
  void* t, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeofexp_exp(
  struct Cyc_Absyn_Exp* e, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
! Cyc_Absyn_offsetof_exp( void*, void*, struct Cyc_Position_Segment*); extern
! struct Cyc_Absyn_Exp* Cyc_Absyn_gentyp_exp( struct Cyc_List_List*, void*, struct
! Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_deref_exp( struct
! Cyc_Absyn_Exp*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_structmember_exp(
  struct Cyc_Absyn_Exp*, struct _tagged_arr*, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_structarrow_exp( struct Cyc_Absyn_Exp*,
  struct _tagged_arr*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
--- 642,651 ----
  struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeoftyp_exp(
  void* t, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeofexp_exp(
  struct Cyc_Absyn_Exp* e, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
! Cyc_Absyn_offsetof_exp( void*, struct _tagged_arr*, struct Cyc_Position_Segment*);
! extern struct Cyc_Absyn_Exp* Cyc_Absyn_gentyp_exp( void*, struct Cyc_Position_Segment*);
! extern struct Cyc_Absyn_Exp* Cyc_Absyn_deref_exp( struct Cyc_Absyn_Exp*, struct
! Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_structmember_exp(
  struct Cyc_Absyn_Exp*, struct _tagged_arr*, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_structarrow_exp( struct Cyc_Absyn_Exp*,
  struct _tagged_arr*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
***************
*** 920,926 ****
  Cyc_Absyn_exn_tud_v={( void*)(( void*) 3u),& Cyc_Absyn_exn_name_v, 0,( struct
  Cyc_Core_Opt*)& Cyc_Absyn_exn_ol, 1}; struct Cyc_Absyn_Tuniondecl* Cyc_Absyn_exn_tud=&
  Cyc_Absyn_exn_tud_v; static struct Cyc_Absyn_KnownTunion_struct Cyc_Absyn_exn_tinfou={
! 1u,& Cyc_Absyn_exn_tud}; static struct Cyc_Absyn_TunionType_struct Cyc_Absyn_exn_typ_tt={
  2u,{( void*)(( void*)& Cyc_Absyn_exn_tinfou), 0,( void*)(( void*) 3u)}}; void*
  Cyc_Absyn_exn_typ=( void*)& Cyc_Absyn_exn_typ_tt; static unsigned char _temp120[
  9u]="PrintArg"; static struct _tagged_arr Cyc_Absyn_printarg_str={ _temp120,
--- 917,923 ----
  Cyc_Absyn_exn_tud_v={( void*)(( void*) 3u),& Cyc_Absyn_exn_name_v, 0,( struct
  Cyc_Core_Opt*)& Cyc_Absyn_exn_ol, 1}; struct Cyc_Absyn_Tuniondecl* Cyc_Absyn_exn_tud=&
  Cyc_Absyn_exn_tud_v; static struct Cyc_Absyn_KnownTunion_struct Cyc_Absyn_exn_tinfou={
! 1u,& Cyc_Absyn_exn_tud_v}; static struct Cyc_Absyn_TunionType_struct Cyc_Absyn_exn_typ_tt={
  2u,{( void*)(( void*)& Cyc_Absyn_exn_tinfou), 0,( void*)(( void*) 3u)}}; void*
  Cyc_Absyn_exn_typ=( void*)& Cyc_Absyn_exn_typ_tt; static unsigned char _temp120[
  9u]="PrintArg"; static struct _tagged_arr Cyc_Absyn_printarg_str={ _temp120,
***************
*** 1232,1248 ****
  _temp215=( struct Cyc_Absyn_Sizeofexp_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Sizeofexp_e_struct));
  _temp215[ 0]=({ struct Cyc_Absyn_Sizeofexp_e_struct _temp216; _temp216.tag= Cyc_Absyn_Sizeofexp_e;
  _temp216.f1= e; _temp216;}); _temp215;}), loc);} struct Cyc_Absyn_Exp* Cyc_Absyn_offsetof_exp(
! void* t, void* of, struct Cyc_Position_Segment* loc){ return Cyc_Absyn_new_exp((
  void*)({ struct Cyc_Absyn_Offsetof_e_struct* _temp217=( struct Cyc_Absyn_Offsetof_e_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct)); _temp217[ 0]=({ struct
  Cyc_Absyn_Offsetof_e_struct _temp218; _temp218.tag= Cyc_Absyn_Offsetof_e;
! _temp218.f1=( void*) t; _temp218.f2=( void*) of; _temp218;}); _temp217;}), loc);}
! struct Cyc_Absyn_Exp* Cyc_Absyn_gentyp_exp( struct Cyc_List_List* tvs, void* t,
! struct Cyc_Position_Segment* loc){ return Cyc_Absyn_new_exp(( void*)({ struct
! Cyc_Absyn_Gentyp_e_struct* _temp219=( struct Cyc_Absyn_Gentyp_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Gentyp_e_struct)); _temp219[ 0]=({ struct
! Cyc_Absyn_Gentyp_e_struct _temp220; _temp220.tag= Cyc_Absyn_Gentyp_e; _temp220.f1=
! tvs; _temp220.f2=( void*) t; _temp220;}); _temp219;}), loc);} struct Cyc_Absyn_Exp*
  Cyc_Absyn_deref_exp( struct Cyc_Absyn_Exp* e, struct Cyc_Position_Segment* loc){
  return Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Deref_e_struct* _temp221=(
  struct Cyc_Absyn_Deref_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Deref_e_struct));
--- 1229,1244 ----
  _temp215=( struct Cyc_Absyn_Sizeofexp_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Sizeofexp_e_struct));
  _temp215[ 0]=({ struct Cyc_Absyn_Sizeofexp_e_struct _temp216; _temp216.tag= Cyc_Absyn_Sizeofexp_e;
  _temp216.f1= e; _temp216;}); _temp215;}), loc);} struct Cyc_Absyn_Exp* Cyc_Absyn_offsetof_exp(
! void* t, struct _tagged_arr* n, struct Cyc_Position_Segment* loc){ return Cyc_Absyn_new_exp((
  void*)({ struct Cyc_Absyn_Offsetof_e_struct* _temp217=( struct Cyc_Absyn_Offsetof_e_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct)); _temp217[ 0]=({ struct
  Cyc_Absyn_Offsetof_e_struct _temp218; _temp218.tag= Cyc_Absyn_Offsetof_e;
! _temp218.f1=( void*) t; _temp218.f2= n; _temp218;}); _temp217;}), loc);} struct
! Cyc_Absyn_Exp* Cyc_Absyn_gentyp_exp( void* t, struct Cyc_Position_Segment* loc){
! return Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Gentyp_e_struct* _temp219=(
! struct Cyc_Absyn_Gentyp_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Gentyp_e_struct));
! _temp219[ 0]=({ struct Cyc_Absyn_Gentyp_e_struct _temp220; _temp220.tag= Cyc_Absyn_Gentyp_e;
! _temp220.f1=( void*) t; _temp220;}); _temp219;}), loc);} struct Cyc_Absyn_Exp*
  Cyc_Absyn_deref_exp( struct Cyc_Absyn_Exp* e, struct Cyc_Position_Segment* loc){
  return Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Deref_e_struct* _temp221=(
  struct Cyc_Absyn_Deref_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Deref_e_struct));
diff -rbBcN --exclude=CVS i686-unknown-linux/src/absyndump.c powerpc-apple-rhapsody/src/absyndump.c
*** i686-unknown-linux/src/absyndump.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/absyndump.c	Wed Oct 10 15:39:28 2001
***************
*** 299,305 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 299,305 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 390,452 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 390,449 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 950,991 ****
  sizeof( unsigned char), 5u), _tag_arr( _temp296, sizeof( void*), 1u));}}));
  return; _LL134: Cyc_Absyndump_dumpntyp( _temp204); return; _LL136:{ void*
  _temp298= _temp214; struct Cyc_Absyn_UnknownTunionInfo _temp304; int _temp306;
! struct _tuple0* _temp308; struct Cyc_Absyn_Tuniondecl** _temp310; struct Cyc_Absyn_Tuniondecl*
! _temp312; struct Cyc_Absyn_Tuniondecl _temp313; int _temp314; struct _tuple0*
! _temp316; _LL300: if(*(( int*) _temp298) ==  Cyc_Absyn_UnknownTunion){ _LL305:
! _temp304=(( struct Cyc_Absyn_UnknownTunion_struct*) _temp298)->f1; _LL309:
! _temp308= _temp304.name; goto _LL307; _LL307: _temp306= _temp304.is_xtunion;
! goto _LL301;} else{ goto _LL302;} _LL302: if(*(( int*) _temp298) ==  Cyc_Absyn_KnownTunion){
! _LL311: _temp310=(( struct Cyc_Absyn_KnownTunion_struct*) _temp298)->f1;
! _temp312=* _temp310; _temp313=* _temp312; _LL317: _temp316= _temp313.name; goto
! _LL315; _LL315: _temp314= _temp313.is_xtunion; goto _LL303;} else{ goto _LL299;}
! _LL301: _temp316= _temp308; _temp314= _temp306; goto _LL303; _LL303: if(
! _temp314){ Cyc_Absyndump_dump( _tag_arr("xtunion ", sizeof( unsigned char), 9u));}
! else{ Cyc_Absyndump_dump( _tag_arr("tunion ", sizeof( unsigned char), 8u));}{
! void* _temp318= Cyc_Tcutil_compress( _temp210); _LL320: if( _temp318 == ( void*)
! Cyc_Absyn_HeapRgn){ goto _LL321;} else{ goto _LL322;} _LL322: goto _LL323;
! _LL321: goto _LL319; _LL323: Cyc_Absyndump_dumptyp( _temp210); Cyc_Absyndump_dump(
! _tag_arr(" ", sizeof( unsigned char), 2u)); goto _LL319; _LL319:;} Cyc_Absyndump_dumpqvar(
! _temp316); Cyc_Absyndump_dumptps( _temp212); goto _LL299; _LL299:;} goto _LL120;
! _LL138:{ void* _temp324= _temp220; struct Cyc_Absyn_UnknownTunionFieldInfo
! _temp330; int _temp332; struct _tuple0* _temp334; struct _tuple0* _temp336;
! struct Cyc_Absyn_Tunionfield* _temp338; struct Cyc_Absyn_Tunionfield _temp340;
! struct _tuple0* _temp341; struct Cyc_Absyn_Tuniondecl* _temp343; struct Cyc_Absyn_Tuniondecl
! _temp345; int _temp346; struct _tuple0* _temp348; _LL326: if(*(( int*) _temp324)
! ==  Cyc_Absyn_UnknownTunionfield){ _LL331: _temp330=(( struct Cyc_Absyn_UnknownTunionfield_struct*)
! _temp324)->f1; _LL337: _temp336= _temp330.tunion_name; goto _LL335; _LL335:
! _temp334= _temp330.field_name; goto _LL333; _LL333: _temp332= _temp330.is_xtunion;
! goto _LL327;} else{ goto _LL328;} _LL328: if(*(( int*) _temp324) ==  Cyc_Absyn_KnownTunionfield){
! _LL344: _temp343=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp324)->f1;
! _temp345=* _temp343; _LL349: _temp348= _temp345.name; goto _LL347; _LL347:
! _temp346= _temp345.is_xtunion; goto _LL339; _LL339: _temp338=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp324)->f2; _temp340=* _temp338; _LL342: _temp341= _temp340.name; goto _LL329;}
! else{ goto _LL325;} _LL327: _temp348= _temp336; _temp346= _temp332; _temp341=
! _temp334; goto _LL329; _LL329: if( _temp346){ Cyc_Absyndump_dump( _tag_arr("xtunion ",
  sizeof( unsigned char), 9u));} else{ Cyc_Absyndump_dump( _tag_arr("tunion ",
! sizeof( unsigned char), 8u));} Cyc_Absyndump_dumpqvar( _temp348); Cyc_Absyndump_dump(
! _tag_arr(".", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpqvar( _temp341);
! Cyc_Absyndump_dumptps( _temp218); goto _LL325; _LL325:;} goto _LL120; _LL140:
  Cyc_Absyndump_dump( _tag_arr("enum ", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpqvar(
  _temp222); return; _LL142: Cyc_Absyndump_dump( _tag_arr("int", sizeof(
  unsigned char), 4u)); return; _LL144: Cyc_Absyndump_dump( _tag_arr("signed char",
--- 947,987 ----
  sizeof( unsigned char), 5u), _tag_arr( _temp296, sizeof( void*), 1u));}}));
  return; _LL134: Cyc_Absyndump_dumpntyp( _temp204); return; _LL136:{ void*
  _temp298= _temp214; struct Cyc_Absyn_UnknownTunionInfo _temp304; int _temp306;
! struct _tuple0* _temp308; struct Cyc_Absyn_Tuniondecl* _temp310; struct Cyc_Absyn_Tuniondecl
! _temp312; int _temp313; struct _tuple0* _temp315; _LL300: if(*(( int*) _temp298)
! ==  Cyc_Absyn_UnknownTunion){ _LL305: _temp304=(( struct Cyc_Absyn_UnknownTunion_struct*)
! _temp298)->f1; _LL309: _temp308= _temp304.name; goto _LL307; _LL307: _temp306=
! _temp304.is_xtunion; goto _LL301;} else{ goto _LL302;} _LL302: if(*(( int*)
! _temp298) ==  Cyc_Absyn_KnownTunion){ _LL311: _temp310=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp298)->f1; _temp312=* _temp310; _LL316: _temp315= _temp312.name; goto _LL314;
! _LL314: _temp313= _temp312.is_xtunion; goto _LL303;} else{ goto _LL299;} _LL301:
! _temp315= _temp308; _temp313= _temp306; goto _LL303; _LL303: if( _temp313){ Cyc_Absyndump_dump(
! _tag_arr("xtunion ", sizeof( unsigned char), 9u));} else{ Cyc_Absyndump_dump(
! _tag_arr("tunion ", sizeof( unsigned char), 8u));}{ void* _temp317= Cyc_Tcutil_compress(
! _temp210); _LL319: if( _temp317 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL320;}
! else{ goto _LL321;} _LL321: goto _LL322; _LL320: goto _LL318; _LL322: Cyc_Absyndump_dumptyp(
! _temp210); Cyc_Absyndump_dump( _tag_arr(" ", sizeof( unsigned char), 2u)); goto
! _LL318; _LL318:;} Cyc_Absyndump_dumpqvar( _temp315); Cyc_Absyndump_dumptps(
! _temp212); goto _LL299; _LL299:;} goto _LL120; _LL138:{ void* _temp323= _temp220;
! struct Cyc_Absyn_UnknownTunionFieldInfo _temp329; int _temp331; struct _tuple0*
! _temp333; struct _tuple0* _temp335; struct Cyc_Absyn_Tunionfield* _temp337;
! struct Cyc_Absyn_Tunionfield _temp339; struct _tuple0* _temp340; struct Cyc_Absyn_Tuniondecl*
! _temp342; struct Cyc_Absyn_Tuniondecl _temp344; int _temp345; struct _tuple0*
! _temp347; _LL325: if(*(( int*) _temp323) ==  Cyc_Absyn_UnknownTunionfield){
! _LL330: _temp329=(( struct Cyc_Absyn_UnknownTunionfield_struct*) _temp323)->f1;
! _LL336: _temp335= _temp329.tunion_name; goto _LL334; _LL334: _temp333= _temp329.field_name;
! goto _LL332; _LL332: _temp331= _temp329.is_xtunion; goto _LL326;} else{ goto
! _LL327;} _LL327: if(*(( int*) _temp323) ==  Cyc_Absyn_KnownTunionfield){ _LL343:
! _temp342=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp323)->f1; _temp344=*
! _temp342; _LL348: _temp347= _temp344.name; goto _LL346; _LL346: _temp345=
! _temp344.is_xtunion; goto _LL338; _LL338: _temp337=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp323)->f2; _temp339=* _temp337; _LL341: _temp340= _temp339.name; goto _LL328;}
! else{ goto _LL324;} _LL326: _temp347= _temp335; _temp345= _temp331; _temp340=
! _temp333; goto _LL328; _LL328: if( _temp345){ Cyc_Absyndump_dump( _tag_arr("xtunion ",
  sizeof( unsigned char), 9u));} else{ Cyc_Absyndump_dump( _tag_arr("tunion ",
! sizeof( unsigned char), 8u));} Cyc_Absyndump_dumpqvar( _temp347); Cyc_Absyndump_dump(
! _tag_arr(".", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpqvar( _temp340);
! Cyc_Absyndump_dumptps( _temp218); goto _LL324; _LL324:;} goto _LL120; _LL140:
  Cyc_Absyndump_dump( _tag_arr("enum ", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpqvar(
  _temp222); return; _LL142: Cyc_Absyndump_dump( _tag_arr("int", sizeof(
  unsigned char), 4u)); return; _LL144: Cyc_Absyndump_dump( _tag_arr("signed char",
***************
*** 1021,1030 ****
  void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( struct Cyc_Core_Opt*), struct
  Cyc_Core_Opt*)) Cyc_Absyndump_dumptqtd)((* t).f2,(* t).f3, Cyc_Absyndump_dumpvaropt,(*
  t).f1);} struct _tuple7{ void* f1; void* f2; } ; void Cyc_Absyndump_dump_rgncmp(
! struct _tuple7* cmp){ struct _tuple7 _temp352; void* _temp353; void* _temp355;
! struct _tuple7* _temp350= cmp; _temp352=* _temp350; _LL356: _temp355= _temp352.f1;
! goto _LL354; _LL354: _temp353= _temp352.f2; goto _LL351; _LL351: Cyc_Absyndump_dumptyp(
! _temp355); Cyc_Absyndump_dump_char(( int)'<'); Cyc_Absyndump_dumptyp( _temp353);}
  void Cyc_Absyndump_dump_rgnpo( struct Cyc_List_List* rgn_po){(( void(*)( void(*
  f)( struct _tuple7*), struct Cyc_List_List* l, struct _tagged_arr sep)) Cyc_Absyndump_dump_sep)(
  Cyc_Absyndump_dump_rgncmp, rgn_po, _tag_arr(",", sizeof( unsigned char), 2u));}
--- 1017,1026 ----
  void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( struct Cyc_Core_Opt*), struct
  Cyc_Core_Opt*)) Cyc_Absyndump_dumptqtd)((* t).f2,(* t).f3, Cyc_Absyndump_dumpvaropt,(*
  t).f1);} struct _tuple7{ void* f1; void* f2; } ; void Cyc_Absyndump_dump_rgncmp(
! struct _tuple7* cmp){ struct _tuple7 _temp351; void* _temp352; void* _temp354;
! struct _tuple7* _temp349= cmp; _temp351=* _temp349; _LL355: _temp354= _temp351.f1;
! goto _LL353; _LL353: _temp352= _temp351.f2; goto _LL350; _LL350: Cyc_Absyndump_dumptyp(
! _temp354); Cyc_Absyndump_dump_char(( int)'<'); Cyc_Absyndump_dumptyp( _temp352);}
  void Cyc_Absyndump_dump_rgnpo( struct Cyc_List_List* rgn_po){(( void(*)( void(*
  f)( struct _tuple7*), struct Cyc_List_List* l, struct _tagged_arr sep)) Cyc_Absyndump_dump_sep)(
  Cyc_Absyndump_dump_rgncmp, rgn_po, _tag_arr(",", sizeof( unsigned char), 2u));}
***************
*** 1036,1065 ****
  struct Cyc_List_List*) _check_null( args))->tl !=  0? 1: c_varargs)? 1:
  cyc_varargs !=  0){ Cyc_Absyndump_dump_char(( int)',');}} if( c_varargs){ Cyc_Absyndump_dump(
  _tag_arr("...", sizeof( unsigned char), 4u));} else{ if( cyc_varargs !=  0){
! struct _tuple1* _temp357=({ struct _tuple1* _temp358=( struct _tuple1*)
! _cycalloc( sizeof( struct _tuple1)); _temp358->f1=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->name; _temp358->f2=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->tq; _temp358->f3=( void*)(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->type; _temp358;}); Cyc_Absyndump_dump( _tag_arr("...",
  sizeof( unsigned char), 4u)); if((( struct Cyc_Absyn_VarargInfo*) _check_null(
  cyc_varargs))->inject){ Cyc_Absyndump_dump( _tag_arr(" inject ", sizeof(
! unsigned char), 9u));} Cyc_Absyndump_dumpfunarg( _temp357);}} if( effopt !=  0){
  Cyc_Absyndump_dump_semi(); Cyc_Absyndump_dumpeff(( void*)(( struct Cyc_Core_Opt*)
  _check_null( effopt))->v);} if( rgn_po !=  0){ Cyc_Absyndump_dump_char(( int)':');
  Cyc_Absyndump_dump_rgnpo( rgn_po);} Cyc_Absyndump_dump_char(( int)')');} void
  Cyc_Absyndump_dumptyp( void* t){(( void(*)( struct Cyc_Absyn_Tqual, void*, void(*
! f)( int), int)) Cyc_Absyndump_dumptqtd)(({ struct Cyc_Absyn_Tqual _temp359;
! _temp359.q_const= 0; _temp359.q_volatile= 0; _temp359.q_restrict= 0; _temp359;}),
  t,( void(*)( int x)) Cyc_Absyndump_ignore, 0);} void Cyc_Absyndump_dumpdesignator(
! void* d){ void* _temp360= d; struct Cyc_Absyn_Exp* _temp366; struct _tagged_arr*
! _temp368; _LL362: if(*(( int*) _temp360) ==  Cyc_Absyn_ArrayElement){ _LL367:
! _temp366=(( struct Cyc_Absyn_ArrayElement_struct*) _temp360)->f1; goto _LL363;}
! else{ goto _LL364;} _LL364: if(*(( int*) _temp360) ==  Cyc_Absyn_FieldName){
! _LL369: _temp368=(( struct Cyc_Absyn_FieldName_struct*) _temp360)->f1; goto
! _LL365;} else{ goto _LL361;} _LL363: Cyc_Absyndump_dump( _tag_arr(".[", sizeof(
! unsigned char), 3u)); Cyc_Absyndump_dumpexp( _temp366); Cyc_Absyndump_dump_char((
! int)']'); goto _LL361; _LL365: Cyc_Absyndump_dump_char(( int)'.'); Cyc_Absyndump_dump_nospace(*
! _temp368); goto _LL361; _LL361:;} struct _tuple8{ struct Cyc_List_List* f1;
  struct Cyc_Absyn_Exp* f2; } ; void Cyc_Absyndump_dumpde( struct _tuple8* de){
  Cyc_Absyndump_egroup( Cyc_Absyndump_dumpdesignator,(* de).f1, _tag_arr("",
  sizeof( unsigned char), 1u), _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=",
--- 1032,1061 ----
  struct Cyc_List_List*) _check_null( args))->tl !=  0? 1: c_varargs)? 1:
  cyc_varargs !=  0){ Cyc_Absyndump_dump_char(( int)',');}} if( c_varargs){ Cyc_Absyndump_dump(
  _tag_arr("...", sizeof( unsigned char), 4u));} else{ if( cyc_varargs !=  0){
! struct _tuple1* _temp356=({ struct _tuple1* _temp357=( struct _tuple1*)
! _cycalloc( sizeof( struct _tuple1)); _temp357->f1=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->name; _temp357->f2=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->tq; _temp357->f3=( void*)(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->type; _temp357;}); Cyc_Absyndump_dump( _tag_arr("...",
  sizeof( unsigned char), 4u)); if((( struct Cyc_Absyn_VarargInfo*) _check_null(
  cyc_varargs))->inject){ Cyc_Absyndump_dump( _tag_arr(" inject ", sizeof(
! unsigned char), 9u));} Cyc_Absyndump_dumpfunarg( _temp356);}} if( effopt !=  0){
  Cyc_Absyndump_dump_semi(); Cyc_Absyndump_dumpeff(( void*)(( struct Cyc_Core_Opt*)
  _check_null( effopt))->v);} if( rgn_po !=  0){ Cyc_Absyndump_dump_char(( int)':');
  Cyc_Absyndump_dump_rgnpo( rgn_po);} Cyc_Absyndump_dump_char(( int)')');} void
  Cyc_Absyndump_dumptyp( void* t){(( void(*)( struct Cyc_Absyn_Tqual, void*, void(*
! f)( int), int)) Cyc_Absyndump_dumptqtd)(({ struct Cyc_Absyn_Tqual _temp358;
! _temp358.q_const= 0; _temp358.q_volatile= 0; _temp358.q_restrict= 0; _temp358;}),
  t,( void(*)( int x)) Cyc_Absyndump_ignore, 0);} void Cyc_Absyndump_dumpdesignator(
! void* d){ void* _temp359= d; struct Cyc_Absyn_Exp* _temp365; struct _tagged_arr*
! _temp367; _LL361: if(*(( int*) _temp359) ==  Cyc_Absyn_ArrayElement){ _LL366:
! _temp365=(( struct Cyc_Absyn_ArrayElement_struct*) _temp359)->f1; goto _LL362;}
! else{ goto _LL363;} _LL363: if(*(( int*) _temp359) ==  Cyc_Absyn_FieldName){
! _LL368: _temp367=(( struct Cyc_Absyn_FieldName_struct*) _temp359)->f1; goto
! _LL364;} else{ goto _LL360;} _LL362: Cyc_Absyndump_dump( _tag_arr(".[", sizeof(
! unsigned char), 3u)); Cyc_Absyndump_dumpexp( _temp365); Cyc_Absyndump_dump_char((
! int)']'); goto _LL360; _LL364: Cyc_Absyndump_dump_char(( int)'.'); Cyc_Absyndump_dump_nospace(*
! _temp367); goto _LL360; _LL360:;} struct _tuple8{ struct Cyc_List_List* f1;
  struct Cyc_Absyn_Exp* f2; } ; void Cyc_Absyndump_dumpde( struct _tuple8* de){
  Cyc_Absyndump_egroup( Cyc_Absyndump_dumpdesignator,(* de).f1, _tag_arr("",
  sizeof( unsigned char), 1u), _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=",
***************
*** 1071,1666 ****
  unsigned char), 1u), _tag_arr(",", sizeof( unsigned char), 2u));} void Cyc_Absyndump_dumpexp_prec(
  int inprec, struct Cyc_Absyn_Exp* e){ int myprec= Cyc_Absynpp_exp_prec( e); if(
  inprec >=  myprec){ Cyc_Absyndump_dump_nospace( _tag_arr("(", sizeof(
! unsigned char), 2u));}{ void* _temp370=( void*) e->r; void* _temp468;
! unsigned char _temp470; void* _temp472; void* _temp474; short _temp476; void*
! _temp478; void* _temp480; int _temp482; void* _temp484; void* _temp486; int
! _temp488; void* _temp490; void* _temp492; long long _temp494; void* _temp496;
! void* _temp498; struct _tagged_arr _temp500; void* _temp502; void* _temp504;
! struct _tagged_arr _temp506; struct _tuple0* _temp508; struct _tuple0* _temp510;
! struct Cyc_List_List* _temp512; void* _temp514; struct Cyc_Absyn_Exp* _temp516;
! struct Cyc_Core_Opt* _temp518; struct Cyc_Absyn_Exp* _temp520; void* _temp522;
! struct Cyc_Absyn_Exp* _temp524; void* _temp526; struct Cyc_Absyn_Exp* _temp528;
! void* _temp530; struct Cyc_Absyn_Exp* _temp532; void* _temp534; struct Cyc_Absyn_Exp*
! _temp536; struct Cyc_Absyn_Exp* _temp538; struct Cyc_Absyn_Exp* _temp540; struct
! Cyc_Absyn_Exp* _temp542; struct Cyc_Absyn_Exp* _temp544; struct Cyc_Absyn_Exp*
! _temp546; struct Cyc_List_List* _temp548; struct Cyc_Absyn_Exp* _temp550; struct
! Cyc_List_List* _temp552; struct Cyc_Absyn_Exp* _temp554; struct Cyc_Absyn_Exp*
! _temp556; struct Cyc_Absyn_Exp* _temp558; struct Cyc_Absyn_Exp* _temp560; struct
! Cyc_Absyn_Exp* _temp562; void* _temp564; struct Cyc_Absyn_Exp* _temp566; struct
! Cyc_Absyn_Exp* _temp568; struct Cyc_Absyn_Exp* _temp570; void* _temp572; struct
! Cyc_Absyn_Exp* _temp574; void* _temp576; struct _tagged_arr* _temp578; void*
! _temp580; void* _temp582; unsigned int _temp584; void* _temp586; void* _temp588;
! struct Cyc_List_List* _temp590; struct Cyc_Absyn_Exp* _temp592; struct
! _tagged_arr* _temp594; struct Cyc_Absyn_Exp* _temp596; struct _tagged_arr*
! _temp598; struct Cyc_Absyn_Exp* _temp600; struct Cyc_Absyn_Exp* _temp602; struct
! Cyc_Absyn_Exp* _temp604; struct Cyc_List_List* _temp606; struct Cyc_List_List*
! _temp608; struct _tuple1* _temp610; struct Cyc_List_List* _temp612; struct Cyc_Absyn_Exp*
! _temp614; struct Cyc_Absyn_Exp* _temp616; struct Cyc_Absyn_Vardecl* _temp618;
! struct Cyc_List_List* _temp620; struct _tuple0* _temp622; struct Cyc_List_List*
! _temp624; struct Cyc_Absyn_Tunionfield* _temp626; struct Cyc_List_List* _temp628;
! struct _tuple0* _temp630; void* _temp632; struct Cyc_Absyn_Exp* _temp634; struct
! Cyc_List_List* _temp636; struct Cyc_Core_Opt* _temp638; struct Cyc_Absyn_Stmt*
! _temp640; struct Cyc_Absyn_Fndecl* _temp642; struct Cyc_Absyn_Exp* _temp644;
! _LL372: if(*(( int*) _temp370) ==  Cyc_Absyn_Const_e){ _LL469: _temp468=( void*)((
! struct Cyc_Absyn_Const_e_struct*) _temp370)->f1; if(( unsigned int) _temp468 > 
! 1u?*(( int*) _temp468) ==  Cyc_Absyn_Char_c: 0){ _LL473: _temp472=( void*)((
! struct Cyc_Absyn_Char_c_struct*) _temp468)->f1; goto _LL471; _LL471: _temp470=((
! struct Cyc_Absyn_Char_c_struct*) _temp468)->f2; goto _LL373;} else{ goto _LL374;}}
! else{ goto _LL374;} _LL374: if(*(( int*) _temp370) ==  Cyc_Absyn_Const_e){
! _LL475: _temp474=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp370)->f1; if((
! unsigned int) _temp474 >  1u?*(( int*) _temp474) ==  Cyc_Absyn_Short_c: 0){
! _LL479: _temp478=( void*)(( struct Cyc_Absyn_Short_c_struct*) _temp474)->f1;
! goto _LL477; _LL477: _temp476=(( struct Cyc_Absyn_Short_c_struct*) _temp474)->f2;
! goto _LL375;} else{ goto _LL376;}} else{ goto _LL376;} _LL376: if(*(( int*)
! _temp370) ==  Cyc_Absyn_Const_e){ _LL481: _temp480=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp370)->f1; if(( unsigned int) _temp480 >  1u?*(( int*) _temp480) ==  Cyc_Absyn_Int_c:
! 0){ _LL485: _temp484=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp480)->f1;
! if( _temp484 == ( void*) Cyc_Absyn_Signed){ goto _LL483;} else{ goto _LL378;}
! _LL483: _temp482=(( struct Cyc_Absyn_Int_c_struct*) _temp480)->f2; goto _LL377;}
! else{ goto _LL378;}} else{ goto _LL378;} _LL378: if(*(( int*) _temp370) ==  Cyc_Absyn_Const_e){
! _LL487: _temp486=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp370)->f1; if((
! unsigned int) _temp486 >  1u?*(( int*) _temp486) ==  Cyc_Absyn_Int_c: 0){ _LL491:
! _temp490=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp486)->f1; if( _temp490
! == ( void*) Cyc_Absyn_Unsigned){ goto _LL489;} else{ goto _LL380;} _LL489:
! _temp488=(( struct Cyc_Absyn_Int_c_struct*) _temp486)->f2; goto _LL379;} else{
! goto _LL380;}} else{ goto _LL380;} _LL380: if(*(( int*) _temp370) ==  Cyc_Absyn_Const_e){
! _LL493: _temp492=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp370)->f1; if((
! unsigned int) _temp492 >  1u?*(( int*) _temp492) ==  Cyc_Absyn_LongLong_c: 0){
! _LL497: _temp496=( void*)(( struct Cyc_Absyn_LongLong_c_struct*) _temp492)->f1;
! goto _LL495; _LL495: _temp494=(( struct Cyc_Absyn_LongLong_c_struct*) _temp492)->f2;
! goto _LL381;} else{ goto _LL382;}} else{ goto _LL382;} _LL382: if(*(( int*)
! _temp370) ==  Cyc_Absyn_Const_e){ _LL499: _temp498=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp370)->f1; if(( unsigned int) _temp498 >  1u?*(( int*) _temp498) ==  Cyc_Absyn_Float_c:
! 0){ _LL501: _temp500=(( struct Cyc_Absyn_Float_c_struct*) _temp498)->f1; goto
! _LL383;} else{ goto _LL384;}} else{ goto _LL384;} _LL384: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Const_e){ _LL503: _temp502=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp370)->f1; if( _temp502 == ( void*) Cyc_Absyn_Null_c){ goto _LL385;} else{
! goto _LL386;}} else{ goto _LL386;} _LL386: if(*(( int*) _temp370) ==  Cyc_Absyn_Const_e){
! _LL505: _temp504=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp370)->f1; if((
! unsigned int) _temp504 >  1u?*(( int*) _temp504) ==  Cyc_Absyn_String_c: 0){
! _LL507: _temp506=(( struct Cyc_Absyn_String_c_struct*) _temp504)->f1; goto
! _LL387;} else{ goto _LL388;}} else{ goto _LL388;} _LL388: if(*(( int*) _temp370)
! ==  Cyc_Absyn_UnknownId_e){ _LL509: _temp508=(( struct Cyc_Absyn_UnknownId_e_struct*)
! _temp370)->f1; goto _LL389;} else{ goto _LL390;} _LL390: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Var_e){ _LL511: _temp510=(( struct Cyc_Absyn_Var_e_struct*)
! _temp370)->f1; goto _LL391;} else{ goto _LL392;} _LL392: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Primop_e){ _LL515: _temp514=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp370)->f1; goto _LL513; _LL513: _temp512=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp370)->f2; goto _LL393;} else{ goto _LL394;} _LL394: if(*(( int*) _temp370)
! ==  Cyc_Absyn_AssignOp_e){ _LL521: _temp520=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp370)->f1; goto _LL519; _LL519: _temp518=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp370)->f2; goto _LL517; _LL517: _temp516=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp370)->f3; goto _LL395;} else{ goto _LL396;} _LL396: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Increment_e){ _LL525: _temp524=(( struct Cyc_Absyn_Increment_e_struct*)
! _temp370)->f1; goto _LL523; _LL523: _temp522=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp370)->f2; if( _temp522 == ( void*) Cyc_Absyn_PreInc){ goto _LL397;} else{
! goto _LL398;}} else{ goto _LL398;} _LL398: if(*(( int*) _temp370) ==  Cyc_Absyn_Increment_e){
! _LL529: _temp528=(( struct Cyc_Absyn_Increment_e_struct*) _temp370)->f1; goto
! _LL527; _LL527: _temp526=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp370)->f2; if( _temp526 == ( void*) Cyc_Absyn_PreDec){ goto _LL399;} else{
! goto _LL400;}} else{ goto _LL400;} _LL400: if(*(( int*) _temp370) ==  Cyc_Absyn_Increment_e){
! _LL533: _temp532=(( struct Cyc_Absyn_Increment_e_struct*) _temp370)->f1; goto
! _LL531; _LL531: _temp530=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp370)->f2; if( _temp530 == ( void*) Cyc_Absyn_PostInc){ goto _LL401;} else{
! goto _LL402;}} else{ goto _LL402;} _LL402: if(*(( int*) _temp370) ==  Cyc_Absyn_Increment_e){
! _LL537: _temp536=(( struct Cyc_Absyn_Increment_e_struct*) _temp370)->f1; goto
! _LL535; _LL535: _temp534=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp370)->f2; if( _temp534 == ( void*) Cyc_Absyn_PostDec){ goto _LL403;} else{
! goto _LL404;}} else{ goto _LL404;} _LL404: if(*(( int*) _temp370) ==  Cyc_Absyn_Conditional_e){
! _LL543: _temp542=(( struct Cyc_Absyn_Conditional_e_struct*) _temp370)->f1; goto
! _LL541; _LL541: _temp540=(( struct Cyc_Absyn_Conditional_e_struct*) _temp370)->f2;
! goto _LL539; _LL539: _temp538=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp370)->f3; goto _LL405;} else{ goto _LL406;} _LL406: if(*(( int*) _temp370)
! ==  Cyc_Absyn_SeqExp_e){ _LL547: _temp546=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp370)->f1; goto _LL545; _LL545: _temp544=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp370)->f2; goto _LL407;} else{ goto _LL408;} _LL408: if(*(( int*) _temp370)
! ==  Cyc_Absyn_UnknownCall_e){ _LL551: _temp550=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp370)->f1; goto _LL549; _LL549: _temp548=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp370)->f2; goto _LL409;} else{ goto _LL410;} _LL410: if(*(( int*) _temp370)
! ==  Cyc_Absyn_FnCall_e){ _LL555: _temp554=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp370)->f1; goto _LL553; _LL553: _temp552=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp370)->f2; goto _LL411;} else{ goto _LL412;} _LL412: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Throw_e){ _LL557: _temp556=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp370)->f1; goto _LL413;} else{ goto _LL414;} _LL414: if(*(( int*) _temp370)
! ==  Cyc_Absyn_NoInstantiate_e){ _LL559: _temp558=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp370)->f1; goto _LL415;} else{ goto _LL416;} _LL416: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Instantiate_e){ _LL561: _temp560=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp370)->f1; goto _LL417;} else{ goto _LL418;} _LL418: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Cast_e){ _LL565: _temp564=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp370)->f1; goto _LL563; _LL563: _temp562=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp370)->f2; goto _LL419;} else{ goto _LL420;} _LL420: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Address_e){ _LL567: _temp566=(( struct Cyc_Absyn_Address_e_struct*)
! _temp370)->f1; goto _LL421;} else{ goto _LL422;} _LL422: if(*(( int*) _temp370)
! ==  Cyc_Absyn_New_e){ _LL571: _temp570=(( struct Cyc_Absyn_New_e_struct*)
! _temp370)->f1; goto _LL569; _LL569: _temp568=(( struct Cyc_Absyn_New_e_struct*)
! _temp370)->f2; goto _LL423;} else{ goto _LL424;} _LL424: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Sizeoftyp_e){ _LL573: _temp572=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp370)->f1; goto _LL425;} else{ goto _LL426;} _LL426: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Sizeofexp_e){ _LL575: _temp574=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp370)->f1; goto _LL427;} else{ goto _LL428;} _LL428: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Offsetof_e){ _LL581: _temp580=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp370)->f1; goto _LL577; _LL577: _temp576=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp370)->f2; if(*(( int*) _temp576) ==  Cyc_Absyn_StructField){ _LL579:
! _temp578=(( struct Cyc_Absyn_StructField_struct*) _temp576)->f1; goto _LL429;}
! else{ goto _LL430;}} else{ goto _LL430;} _LL430: if(*(( int*) _temp370) ==  Cyc_Absyn_Offsetof_e){
! _LL587: _temp586=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*) _temp370)->f1;
! goto _LL583; _LL583: _temp582=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp370)->f2; if(*(( int*) _temp582) ==  Cyc_Absyn_TupleIndex){ _LL585:
! _temp584=(( struct Cyc_Absyn_TupleIndex_struct*) _temp582)->f1; goto _LL431;}
! else{ goto _LL432;}} else{ goto _LL432;} _LL432: if(*(( int*) _temp370) ==  Cyc_Absyn_Gentyp_e){
! _LL591: _temp590=(( struct Cyc_Absyn_Gentyp_e_struct*) _temp370)->f1; goto
! _LL589; _LL589: _temp588=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*) _temp370)->f2;
! goto _LL433;} else{ goto _LL434;} _LL434: if(*(( int*) _temp370) ==  Cyc_Absyn_Deref_e){
! _LL593: _temp592=(( struct Cyc_Absyn_Deref_e_struct*) _temp370)->f1; goto _LL435;}
! else{ goto _LL436;} _LL436: if(*(( int*) _temp370) ==  Cyc_Absyn_StructMember_e){
! _LL597: _temp596=(( struct Cyc_Absyn_StructMember_e_struct*) _temp370)->f1; goto
! _LL595; _LL595: _temp594=(( struct Cyc_Absyn_StructMember_e_struct*) _temp370)->f2;
! goto _LL437;} else{ goto _LL438;} _LL438: if(*(( int*) _temp370) ==  Cyc_Absyn_StructArrow_e){
! _LL601: _temp600=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp370)->f1; goto
! _LL599; _LL599: _temp598=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp370)->f2;
! goto _LL439;} else{ goto _LL440;} _LL440: if(*(( int*) _temp370) ==  Cyc_Absyn_Subscript_e){
! _LL605: _temp604=(( struct Cyc_Absyn_Subscript_e_struct*) _temp370)->f1; goto
! _LL603; _LL603: _temp602=(( struct Cyc_Absyn_Subscript_e_struct*) _temp370)->f2;
! goto _LL441;} else{ goto _LL442;} _LL442: if(*(( int*) _temp370) ==  Cyc_Absyn_Tuple_e){
! _LL607: _temp606=(( struct Cyc_Absyn_Tuple_e_struct*) _temp370)->f1; goto _LL443;}
! else{ goto _LL444;} _LL444: if(*(( int*) _temp370) ==  Cyc_Absyn_CompoundLit_e){
! _LL611: _temp610=(( struct Cyc_Absyn_CompoundLit_e_struct*) _temp370)->f1; goto
! _LL609; _LL609: _temp608=(( struct Cyc_Absyn_CompoundLit_e_struct*) _temp370)->f2;
! goto _LL445;} else{ goto _LL446;} _LL446: if(*(( int*) _temp370) ==  Cyc_Absyn_Array_e){
! _LL613: _temp612=(( struct Cyc_Absyn_Array_e_struct*) _temp370)->f1; goto _LL447;}
! else{ goto _LL448;} _LL448: if(*(( int*) _temp370) ==  Cyc_Absyn_Comprehension_e){
! _LL619: _temp618=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp370)->f1;
! goto _LL617; _LL617: _temp616=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp370)->f2; goto _LL615; _LL615: _temp614=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp370)->f3; goto _LL449;} else{ goto _LL450;} _LL450: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Struct_e){ _LL623: _temp622=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp370)->f1; goto _LL621; _LL621: _temp620=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp370)->f3; goto _LL451;} else{ goto _LL452;} _LL452: if(*(( int*) _temp370)
! ==  Cyc_Absyn_AnonStruct_e){ _LL625: _temp624=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp370)->f2; goto _LL453;} else{ goto _LL454;} _LL454: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Tunion_e){ _LL629: _temp628=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp370)->f3; goto _LL627; _LL627: _temp626=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp370)->f5; goto _LL455;} else{ goto _LL456;} _LL456: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Enum_e){ _LL631: _temp630=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp370)->f1; goto _LL457;} else{ goto _LL458;} _LL458: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Malloc_e){ _LL635: _temp634=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp370)->f1; goto _LL633; _LL633: _temp632=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp370)->f2; goto _LL459;} else{ goto _LL460;} _LL460: if(*(( int*) _temp370)
! ==  Cyc_Absyn_UnresolvedMem_e){ _LL639: _temp638=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp370)->f1; goto _LL637; _LL637: _temp636=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp370)->f2; goto _LL461;} else{ goto _LL462;} _LL462: if(*(( int*) _temp370)
! ==  Cyc_Absyn_StmtExp_e){ _LL641: _temp640=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp370)->f1; goto _LL463;} else{ goto _LL464;} _LL464: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Codegen_e){ _LL643: _temp642=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp370)->f1; goto _LL465;} else{ goto _LL466;} _LL466: if(*(( int*) _temp370)
! ==  Cyc_Absyn_Fill_e){ _LL645: _temp644=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp370)->f1; goto _LL467;} else{ goto _LL371;} _LL373: Cyc_Absyndump_dump_char((
! int)'\''); Cyc_Absyndump_dump_nospace( Cyc_Absynpp_char_escape( _temp470)); Cyc_Absyndump_dump_char((
! int)'\''); goto _LL371; _LL375: Cyc_Absyndump_dump(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp647; _temp647.tag= Cyc_Std_Int_pa; _temp647.f1=(
! int)(( unsigned int)(( int) _temp476));{ void* _temp646[ 1u]={& _temp647}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp646, sizeof( void*),
! 1u));}})); goto _LL371; _LL377: Cyc_Absyndump_dump(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp649; _temp649.tag= Cyc_Std_Int_pa; _temp649.f1=(
! int)(( unsigned int) _temp482);{ void* _temp648[ 1u]={& _temp649}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp648, sizeof( void*),
! 1u));}})); goto _LL371; _LL379: Cyc_Absyndump_dump(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp651; _temp651.tag= Cyc_Std_Int_pa; _temp651.f1=(
! int)(( unsigned int) _temp488);{ void* _temp650[ 1u]={& _temp651}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp650, sizeof( void*),
  1u));}})); Cyc_Absyndump_dump_nospace( _tag_arr("u", sizeof( unsigned char), 2u));
! goto _LL371; _LL381: Cyc_Absyndump_dump( _tag_arr("<<FIX LONG LONG CONSTANT>>",
! sizeof( unsigned char), 27u)); goto _LL371; _LL383: Cyc_Absyndump_dump( _temp500);
! goto _LL371; _LL385: Cyc_Absyndump_dump( _tag_arr("NULL", sizeof( unsigned char),
! 5u)); goto _LL371; _LL387: Cyc_Absyndump_dump_char(( int)'"'); Cyc_Absyndump_dump_nospace(
! Cyc_Absynpp_string_escape( _temp506)); Cyc_Absyndump_dump_char(( int)'"'); goto
! _LL371; _LL389: _temp510= _temp508; goto _LL391; _LL391: Cyc_Absyndump_dumpqvar(
! _temp510); goto _LL371; _LL393: { struct _tagged_arr _temp652= Cyc_Absynpp_prim2str(
! _temp514); switch((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp512)){ case 1: _LL653: if( _temp514 == ( void*) Cyc_Absyn_Size){ Cyc_Absyndump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp512))->hd);
  Cyc_Absyndump_dump( _tag_arr(".size", sizeof( unsigned char), 6u));} else{ Cyc_Absyndump_dump(
! _temp652); Cyc_Absyndump_dumpexp_prec( myprec,( struct Cyc_Absyn_Exp*)(( struct
! Cyc_List_List*) _check_null( _temp512))->hd);} break; case 2: _LL654: Cyc_Absyndump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp512))->hd);
! Cyc_Absyndump_dump( _temp652); Cyc_Absyndump_dump_char(( int)' '); Cyc_Absyndump_dumpexp_prec(
  myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null((( struct
! Cyc_List_List*) _check_null( _temp512))->tl))->hd); break; default: _LL655:( int)
! _throw(( void*)({ struct Cyc_Core_Failure_struct* _temp657=( struct Cyc_Core_Failure_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Failure_struct)); _temp657[ 0]=({ struct Cyc_Core_Failure_struct
! _temp658; _temp658.tag= Cyc_Core_Failure; _temp658.f1= _tag_arr("Absyndump -- Bad number of arguments to primop",
! sizeof( unsigned char), 47u); _temp658;}); _temp657;}));} goto _LL371;} _LL395:
! Cyc_Absyndump_dumpexp_prec( myprec, _temp520); if( _temp518 !=  0){ Cyc_Absyndump_dump(
! Cyc_Absynpp_prim2str(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp518))->v));}
  Cyc_Absyndump_dump_nospace( _tag_arr("=", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp516); goto _LL371; _LL397: Cyc_Absyndump_dump( _tag_arr("++",
! sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpexp_prec( myprec, _temp524);
! goto _LL371; _LL399: Cyc_Absyndump_dump( _tag_arr("--", sizeof( unsigned char),
! 3u)); Cyc_Absyndump_dumpexp_prec( myprec, _temp528); goto _LL371; _LL401: Cyc_Absyndump_dumpexp_prec(
! myprec, _temp532); Cyc_Absyndump_dump( _tag_arr("++", sizeof( unsigned char), 3u));
! goto _LL371; _LL403: Cyc_Absyndump_dumpexp_prec( myprec, _temp536); Cyc_Absyndump_dump(
! _tag_arr("--", sizeof( unsigned char), 3u)); goto _LL371; _LL405: Cyc_Absyndump_dumpexp_prec(
! myprec, _temp542); Cyc_Absyndump_dump_char(( int)'?'); Cyc_Absyndump_dumpexp_prec(
! 0, _temp540); Cyc_Absyndump_dump_char(( int)':'); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp538); goto _LL371; _LL407: Cyc_Absyndump_dump_char(( int)'('); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp546); Cyc_Absyndump_dump_char(( int)','); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp544); Cyc_Absyndump_dump_char(( int)')'); goto _LL371; _LL409:
! _temp554= _temp550; _temp552= _temp548; goto _LL411; _LL411: Cyc_Absyndump_dumpexp_prec(
! myprec, _temp554); Cyc_Absyndump_dump_nospace( _tag_arr("(", sizeof(
! unsigned char), 2u)); Cyc_Absyndump_dumpexps_prec( 20, _temp552); Cyc_Absyndump_dump_nospace(
! _tag_arr(")", sizeof( unsigned char), 2u)); goto _LL371; _LL413: Cyc_Absyndump_dump(
  _tag_arr("throw", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp556); goto _LL371; _LL415: _temp560= _temp558; goto _LL417; _LL417:
! Cyc_Absyndump_dumpexp_prec( inprec, _temp560); goto _LL371; _LL419: Cyc_Absyndump_dump_char((
! int)'('); Cyc_Absyndump_dumptyp( _temp564); Cyc_Absyndump_dump_char(( int)')');
! Cyc_Absyndump_dumpexp_prec( myprec, _temp562); goto _LL371; _LL421: Cyc_Absyndump_dump_char((
! int)'&'); Cyc_Absyndump_dumpexp_prec( myprec, _temp566); goto _LL371; _LL423:
  Cyc_Absyndump_dump( _tag_arr("new ", sizeof( unsigned char), 5u)); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp568); goto _LL371; _LL425: Cyc_Absyndump_dump( _tag_arr("sizeof(",
! sizeof( unsigned char), 8u)); Cyc_Absyndump_dumptyp( _temp572); Cyc_Absyndump_dump_char((
! int)')'); goto _LL371; _LL427: Cyc_Absyndump_dump( _tag_arr("sizeof(", sizeof(
! unsigned char), 8u)); Cyc_Absyndump_dumpexp_prec( myprec, _temp574); Cyc_Absyndump_dump_char((
! int)')'); goto _LL371; _LL429: Cyc_Absyndump_dump( _tag_arr("offsetof(", sizeof(
! unsigned char), 10u)); Cyc_Absyndump_dumptyp( _temp580); Cyc_Absyndump_dump_char((
! int)','); Cyc_Absyndump_dump_nospace(* _temp578); Cyc_Absyndump_dump_char(( int)')');
! goto _LL371; _LL431: Cyc_Absyndump_dump( _tag_arr("offsetof(", sizeof(
! unsigned char), 10u)); Cyc_Absyndump_dumptyp( _temp586); Cyc_Absyndump_dump_char((
! int)','); Cyc_Absyndump_dump(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp660; _temp660.tag= Cyc_Std_Int_pa; _temp660.f1=( int) _temp584;{ void*
! _temp659[ 1u]={& _temp660}; Cyc_Std_aprintf( _tag_arr("%d", sizeof(
! unsigned char), 3u), _tag_arr( _temp659, sizeof( void*), 1u));}})); Cyc_Absyndump_dump_char((
! int)')'); goto _LL371; _LL433: Cyc_Absyndump_dump( _tag_arr("__gen(", sizeof(
! unsigned char), 7u)); Cyc_Absyndump_dumptvars( _temp590); Cyc_Absyndump_dumptyp(
! _temp588); Cyc_Absyndump_dump_char(( int)')'); goto _LL371; _LL435: Cyc_Absyndump_dump_char((
! int)'*'); Cyc_Absyndump_dumpexp_prec( myprec, _temp592); goto _LL371; _LL437:
! Cyc_Absyndump_dumpexp_prec( myprec, _temp596); Cyc_Absyndump_dump_char(( int)'.');
! Cyc_Absyndump_dump_nospace(* _temp594); goto _LL371; _LL439: Cyc_Absyndump_dumpexp_prec(
! myprec, _temp600); Cyc_Absyndump_dump_nospace( _tag_arr("->", sizeof(
! unsigned char), 3u)); Cyc_Absyndump_dump_nospace(* _temp598); goto _LL371;
! _LL441: Cyc_Absyndump_dumpexp_prec( myprec, _temp604); Cyc_Absyndump_dump_char((
! int)'['); Cyc_Absyndump_dumpexp( _temp602); Cyc_Absyndump_dump_char(( int)']');
! goto _LL371; _LL443: Cyc_Absyndump_dump( _tag_arr("$(", sizeof( unsigned char),
! 3u)); Cyc_Absyndump_dumpexps_prec( 20, _temp606); Cyc_Absyndump_dump_char(( int)')');
! goto _LL371; _LL445: Cyc_Absyndump_dump_char(( int)'('); Cyc_Absyndump_dumptyp((*
! _temp610).f3); Cyc_Absyndump_dump_char(( int)')');(( void(*)( void(* f)( struct
  _tuple8*), struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr
  end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumpde,
! _temp608, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL371;
! _LL447:(( void(*)( void(* f)( struct _tuple8*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpde, _temp612, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL371; _LL449: Cyc_Absyndump_dump( _tag_arr("new {for", sizeof(
! unsigned char), 9u)); Cyc_Absyndump_dump_str((* _temp618->name).f2); Cyc_Absyndump_dump_char((
! int)'<'); Cyc_Absyndump_dumpexp( _temp616); Cyc_Absyndump_dump_char(( int)':');
! Cyc_Absyndump_dumpexp( _temp614); Cyc_Absyndump_dump_char(( int)'}'); goto
! _LL371; _LL451: Cyc_Absyndump_dumpqvar( _temp622);(( void(*)( void(* f)( struct
  _tuple8*), struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr
  end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumpde,
! _temp620, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL371;
! _LL453:(( void(*)( void(* f)( struct _tuple8*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpde, _temp624, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL371; _LL455: Cyc_Absyndump_dumpqvar( _temp626->name); if( _temp628
  !=  0){(( void(*)( void(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpexp, _temp628, _tag_arr("(", sizeof( unsigned char), 2u),
  _tag_arr(")", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u));} goto _LL371; _LL457: Cyc_Absyndump_dumpqvar( _temp630); goto _LL371;
! _LL459: if( _temp634 !=  0){ Cyc_Absyndump_dump( _tag_arr("rmalloc(", sizeof(
  unsigned char), 9u)); Cyc_Absyndump_dumpexp(( struct Cyc_Absyn_Exp*) _check_null(
! _temp634)); Cyc_Absyndump_dump( _tag_arr(",", sizeof( unsigned char), 2u));}
  else{ Cyc_Absyndump_dump( _tag_arr("malloc(", sizeof( unsigned char), 8u));} Cyc_Absyndump_dump(
  _tag_arr("sizeof(", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumptyp(
! _temp632); Cyc_Absyndump_dump( _tag_arr("))", sizeof( unsigned char), 3u)); goto
! _LL371; _LL461:(( void(*)( void(* f)( struct _tuple8*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpde, _temp636, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL371; _LL463: Cyc_Absyndump_dump_nospace( _tag_arr("({", sizeof(
! unsigned char), 3u)); Cyc_Absyndump_dumpstmt( _temp640); Cyc_Absyndump_dump_nospace(
! _tag_arr("})", sizeof( unsigned char), 3u)); goto _LL371; _LL465: Cyc_Absyndump_dump(
  _tag_arr("codegen(", sizeof( unsigned char), 9u)); Cyc_Absyndump_dumpdecl(({
! struct Cyc_Absyn_Decl* _temp661=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof(
! struct Cyc_Absyn_Decl)); _temp661->r=( void*)(( void*)({ struct Cyc_Absyn_Fn_d_struct*
! _temp662=( struct Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp662[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp663; _temp663.tag= Cyc_Absyn_Fn_d;
! _temp663.f1= _temp642; _temp663;}); _temp662;})); _temp661->loc= e->loc;
! _temp661;})); Cyc_Absyndump_dump( _tag_arr(")", sizeof( unsigned char), 2u));
! goto _LL371; _LL467: Cyc_Absyndump_dump( _tag_arr("fill(", sizeof( unsigned char),
! 6u)); Cyc_Absyndump_dumpexp( _temp644); Cyc_Absyndump_dump( _tag_arr(")",
! sizeof( unsigned char), 2u)); goto _LL371; _LL371:;} if( inprec >=  myprec){ Cyc_Absyndump_dump_char((
  int)')');}} void Cyc_Absyndump_dumpexp( struct Cyc_Absyn_Exp* e){ Cyc_Absyndump_dumpexp_prec(
  0, e);} void Cyc_Absyndump_dumpswitchclauses( struct Cyc_List_List* scs){ for( 0;
  scs !=  0; scs=(( struct Cyc_List_List*) _check_null( scs))->tl){ struct Cyc_Absyn_Switch_clause*
! _temp664=( struct Cyc_Absyn_Switch_clause*)(( struct Cyc_List_List*) _check_null(
! scs))->hd; if( _temp664->where_clause ==  0?( void*)( _temp664->pattern)->r == (
  void*) Cyc_Absyn_Wild_p: 0){ Cyc_Absyndump_dump( _tag_arr("default:", sizeof(
  unsigned char), 9u));} else{ Cyc_Absyndump_dump( _tag_arr("case", sizeof(
! unsigned char), 5u)); Cyc_Absyndump_dumppat( _temp664->pattern); if( _temp664->where_clause
  !=  0){ Cyc_Absyndump_dump( _tag_arr("&&", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpexp((
! struct Cyc_Absyn_Exp*) _check_null( _temp664->where_clause));} Cyc_Absyndump_dump_nospace(
! _tag_arr(":", sizeof( unsigned char), 2u));} Cyc_Absyndump_dumpstmt( _temp664->body);}}
! void Cyc_Absyndump_dumpstmt( struct Cyc_Absyn_Stmt* s){ void* _temp665=( void*)
! s->r; struct Cyc_Absyn_Exp* _temp711; struct Cyc_Absyn_Stmt* _temp713; struct
! Cyc_Absyn_Stmt* _temp715; struct Cyc_Absyn_Exp* _temp717; struct Cyc_Absyn_Exp*
! _temp719; struct Cyc_Absyn_Stmt* _temp721; struct Cyc_Absyn_Stmt* _temp723;
! struct Cyc_Absyn_Exp* _temp725; struct Cyc_Absyn_Stmt* _temp727; struct _tuple2
! _temp729; struct Cyc_Absyn_Exp* _temp731; struct _tagged_arr* _temp733; struct
! Cyc_Absyn_Stmt* _temp735; struct _tuple2 _temp737; struct Cyc_Absyn_Exp*
! _temp739; struct _tuple2 _temp741; struct Cyc_Absyn_Exp* _temp743; struct Cyc_Absyn_Exp*
! _temp745; struct Cyc_List_List* _temp747; struct Cyc_Absyn_Exp* _temp749; struct
! Cyc_Absyn_Stmt* _temp751; struct Cyc_Absyn_Decl* _temp753; struct Cyc_Absyn_Stmt*
! _temp755; struct _tagged_arr* _temp757; struct _tuple2 _temp759; struct Cyc_Absyn_Exp*
! _temp761; struct Cyc_Absyn_Stmt* _temp763; struct Cyc_List_List* _temp765;
! struct Cyc_Absyn_Exp* _temp767; struct Cyc_List_List* _temp769; struct Cyc_List_List*
! _temp771; struct Cyc_List_List* _temp773; struct Cyc_Absyn_Stmt* _temp775;
! struct Cyc_Absyn_Stmt* _temp777; struct Cyc_Absyn_Vardecl* _temp779; struct Cyc_Absyn_Tvar*
! _temp781; struct Cyc_Absyn_Stmt* _temp783; struct Cyc_Absyn_Stmt* _temp785;
! _LL667: if( _temp665 == ( void*) Cyc_Absyn_Skip_s){ goto _LL668;} else{ goto
! _LL669;} _LL669: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Exp_s:
! 0){ _LL712: _temp711=(( struct Cyc_Absyn_Exp_s_struct*) _temp665)->f1; goto
! _LL670;} else{ goto _LL671;} _LL671: if(( unsigned int) _temp665 >  1u?*(( int*)
! _temp665) ==  Cyc_Absyn_Seq_s: 0){ _LL716: _temp715=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp665)->f1; goto _LL714; _LL714: _temp713=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp665)->f2; goto _LL672;} else{ goto _LL673;} _LL673: if(( unsigned int)
! _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Return_s: 0){ _LL718: _temp717=((
! struct Cyc_Absyn_Return_s_struct*) _temp665)->f1; if( _temp717 ==  0){ goto
! _LL674;} else{ goto _LL675;}} else{ goto _LL675;} _LL675: if(( unsigned int)
! _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Return_s: 0){ _LL720: _temp719=((
! struct Cyc_Absyn_Return_s_struct*) _temp665)->f1; goto _LL676;} else{ goto
! _LL677;} _LL677: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_IfThenElse_s:
! 0){ _LL726: _temp725=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp665)->f1;
! goto _LL724; _LL724: _temp723=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp665)->f2;
! goto _LL722; _LL722: _temp721=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp665)->f3;
! goto _LL678;} else{ goto _LL679;} _LL679: if(( unsigned int) _temp665 >  1u?*((
! int*) _temp665) ==  Cyc_Absyn_While_s: 0){ _LL730: _temp729=(( struct Cyc_Absyn_While_s_struct*)
! _temp665)->f1; _LL732: _temp731= _temp729.f1; goto _LL728; _LL728: _temp727=((
! struct Cyc_Absyn_While_s_struct*) _temp665)->f2; goto _LL680;} else{ goto _LL681;}
! _LL681: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Break_s:
! 0){ goto _LL682;} else{ goto _LL683;} _LL683: if(( unsigned int) _temp665 >  1u?*((
! int*) _temp665) ==  Cyc_Absyn_Continue_s: 0){ goto _LL684;} else{ goto _LL685;}
! _LL685: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Goto_s:
! 0){ _LL734: _temp733=(( struct Cyc_Absyn_Goto_s_struct*) _temp665)->f1; goto
! _LL686;} else{ goto _LL687;} _LL687: if(( unsigned int) _temp665 >  1u?*(( int*)
! _temp665) ==  Cyc_Absyn_For_s: 0){ _LL746: _temp745=(( struct Cyc_Absyn_For_s_struct*)
! _temp665)->f1; goto _LL742; _LL742: _temp741=(( struct Cyc_Absyn_For_s_struct*)
! _temp665)->f2; _LL744: _temp743= _temp741.f1; goto _LL738; _LL738: _temp737=((
! struct Cyc_Absyn_For_s_struct*) _temp665)->f3; _LL740: _temp739= _temp737.f1;
! goto _LL736; _LL736: _temp735=(( struct Cyc_Absyn_For_s_struct*) _temp665)->f4;
! goto _LL688;} else{ goto _LL689;} _LL689: if(( unsigned int) _temp665 >  1u?*((
! int*) _temp665) ==  Cyc_Absyn_Switch_s: 0){ _LL750: _temp749=(( struct Cyc_Absyn_Switch_s_struct*)
! _temp665)->f1; goto _LL748; _LL748: _temp747=(( struct Cyc_Absyn_Switch_s_struct*)
! _temp665)->f2; goto _LL690;} else{ goto _LL691;} _LL691: if(( unsigned int)
! _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Decl_s: 0){ _LL754: _temp753=((
! struct Cyc_Absyn_Decl_s_struct*) _temp665)->f1; goto _LL752; _LL752: _temp751=((
! struct Cyc_Absyn_Decl_s_struct*) _temp665)->f2; goto _LL692;} else{ goto _LL693;}
! _LL693: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Label_s:
! 0){ _LL758: _temp757=(( struct Cyc_Absyn_Label_s_struct*) _temp665)->f1; goto
! _LL756; _LL756: _temp755=(( struct Cyc_Absyn_Label_s_struct*) _temp665)->f2;
! goto _LL694;} else{ goto _LL695;} _LL695: if(( unsigned int) _temp665 >  1u?*((
! int*) _temp665) ==  Cyc_Absyn_Do_s: 0){ _LL764: _temp763=(( struct Cyc_Absyn_Do_s_struct*)
! _temp665)->f1; goto _LL760; _LL760: _temp759=(( struct Cyc_Absyn_Do_s_struct*)
! _temp665)->f2; _LL762: _temp761= _temp759.f1; goto _LL696;} else{ goto _LL697;}
! _LL697: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_SwitchC_s:
! 0){ _LL768: _temp767=(( struct Cyc_Absyn_SwitchC_s_struct*) _temp665)->f1; goto
! _LL766; _LL766: _temp765=(( struct Cyc_Absyn_SwitchC_s_struct*) _temp665)->f2;
! goto _LL698;} else{ goto _LL699;} _LL699: if(( unsigned int) _temp665 >  1u?*((
! int*) _temp665) ==  Cyc_Absyn_Fallthru_s: 0){ _LL770: _temp769=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp665)->f1; if( _temp769 ==  0){ goto _LL700;} else{ goto _LL701;}} else{
! goto _LL701;} _LL701: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) == 
! Cyc_Absyn_Fallthru_s: 0){ _LL772: _temp771=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp665)->f1; goto _LL702;} else{ goto _LL703;} _LL703: if(( unsigned int)
! _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_TryCatch_s: 0){ _LL776:
! _temp775=(( struct Cyc_Absyn_TryCatch_s_struct*) _temp665)->f1; goto _LL774;
! _LL774: _temp773=(( struct Cyc_Absyn_TryCatch_s_struct*) _temp665)->f2; goto
! _LL704;} else{ goto _LL705;} _LL705: if(( unsigned int) _temp665 >  1u?*(( int*)
! _temp665) ==  Cyc_Absyn_Region_s: 0){ _LL782: _temp781=(( struct Cyc_Absyn_Region_s_struct*)
! _temp665)->f1; goto _LL780; _LL780: _temp779=(( struct Cyc_Absyn_Region_s_struct*)
! _temp665)->f2; goto _LL778; _LL778: _temp777=(( struct Cyc_Absyn_Region_s_struct*)
! _temp665)->f3; goto _LL706;} else{ goto _LL707;} _LL707: if(( unsigned int)
! _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Cut_s: 0){ _LL784: _temp783=((
! struct Cyc_Absyn_Cut_s_struct*) _temp665)->f1; goto _LL708;} else{ goto _LL709;}
! _LL709: if(( unsigned int) _temp665 >  1u?*(( int*) _temp665) ==  Cyc_Absyn_Splice_s:
! 0){ _LL786: _temp785=(( struct Cyc_Absyn_Splice_s_struct*) _temp665)->f1; goto
! _LL710;} else{ goto _LL666;} _LL668: Cyc_Absyndump_dump_semi(); goto _LL666;
! _LL670: Cyc_Absyndump_dumpexp( _temp711); Cyc_Absyndump_dump_semi(); goto _LL666;
! _LL672: if( Cyc_Absynpp_is_declaration( _temp715)){ Cyc_Absyndump_dump_char((
! int)'{'); Cyc_Absyndump_dumpstmt( _temp715); Cyc_Absyndump_dump_char(( int)'}');}
! else{ Cyc_Absyndump_dumpstmt( _temp715);} if( Cyc_Absynpp_is_declaration(
! _temp713)){ Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstmt( _temp713);
! Cyc_Absyndump_dump_char(( int)'}');} else{ Cyc_Absyndump_dumpstmt( _temp713);}
! goto _LL666; _LL674: Cyc_Absyndump_dump( _tag_arr("return;", sizeof(
! unsigned char), 8u)); goto _LL666; _LL676: Cyc_Absyndump_dump( _tag_arr("return",
  sizeof( unsigned char), 7u)); Cyc_Absyndump_dumpexp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp719)); Cyc_Absyndump_dump_semi(); goto _LL666; _LL678: Cyc_Absyndump_dump(
! _tag_arr("if(", sizeof( unsigned char), 4u)); Cyc_Absyndump_dumpexp( _temp725);
  Cyc_Absyndump_dump_nospace( _tag_arr("){", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpstmt(
! _temp723); Cyc_Absyndump_dump_char(( int)'}');{ void* _temp787=( void*) _temp721->r;
! _LL789: if( _temp787 == ( void*) Cyc_Absyn_Skip_s){ goto _LL790;} else{ goto
! _LL791;} _LL791: goto _LL792; _LL790: goto _LL788; _LL792: Cyc_Absyndump_dump(
! _tag_arr("else{", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpstmt( _temp721);
! Cyc_Absyndump_dump_char(( int)'}'); goto _LL788; _LL788:;} goto _LL666; _LL680:
  Cyc_Absyndump_dump( _tag_arr("while(", sizeof( unsigned char), 7u)); Cyc_Absyndump_dumpexp(
! _temp731); Cyc_Absyndump_dump_nospace( _tag_arr(") {", sizeof( unsigned char), 4u));
! Cyc_Absyndump_dumpstmt( _temp727); Cyc_Absyndump_dump_char(( int)'}'); goto
! _LL666; _LL682: Cyc_Absyndump_dump( _tag_arr("break;", sizeof( unsigned char), 7u));
! goto _LL666; _LL684: Cyc_Absyndump_dump( _tag_arr("continue;", sizeof(
! unsigned char), 10u)); goto _LL666; _LL686: Cyc_Absyndump_dump( _tag_arr("goto",
! sizeof( unsigned char), 5u)); Cyc_Absyndump_dump_str( _temp733); Cyc_Absyndump_dump_semi();
! goto _LL666; _LL688: Cyc_Absyndump_dump( _tag_arr("for(", sizeof( unsigned char),
! 5u)); Cyc_Absyndump_dumpexp( _temp745); Cyc_Absyndump_dump_semi(); Cyc_Absyndump_dumpexp(
! _temp743); Cyc_Absyndump_dump_semi(); Cyc_Absyndump_dumpexp( _temp739); Cyc_Absyndump_dump_nospace(
! _tag_arr("){", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpstmt( _temp735);
! Cyc_Absyndump_dump_char(( int)'}'); goto _LL666; _LL690: Cyc_Absyndump_dump(
  _tag_arr("switch(", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumpexp(
! _temp749); Cyc_Absyndump_dump_nospace( _tag_arr("){", sizeof( unsigned char), 3u));
! Cyc_Absyndump_dumpswitchclauses( _temp747); Cyc_Absyndump_dump_char(( int)'}');
! goto _LL666; _LL692: Cyc_Absyndump_dumpdecl( _temp753); Cyc_Absyndump_dumpstmt(
! _temp751); goto _LL666; _LL694: if( Cyc_Absynpp_is_declaration( _temp755)){ Cyc_Absyndump_dump_str(
! _temp757); Cyc_Absyndump_dump_nospace( _tag_arr(": {", sizeof( unsigned char), 4u));
! Cyc_Absyndump_dumpstmt( _temp755); Cyc_Absyndump_dump_char(( int)'}');} else{
! Cyc_Absyndump_dump_str( _temp757); Cyc_Absyndump_dump_char(( int)':'); Cyc_Absyndump_dumpstmt(
! _temp755);} goto _LL666; _LL696: Cyc_Absyndump_dump( _tag_arr("do {", sizeof(
! unsigned char), 5u)); Cyc_Absyndump_dumpstmt( _temp763); Cyc_Absyndump_dump_nospace(
  _tag_arr("} while (", sizeof( unsigned char), 10u)); Cyc_Absyndump_dumpexp(
! _temp761); Cyc_Absyndump_dump_nospace( _tag_arr(");", sizeof( unsigned char), 3u));
! goto _LL666; _LL698: Cyc_Absyndump_dump( _tag_arr("switch \"C\" (", sizeof(
! unsigned char), 13u)); Cyc_Absyndump_dumpexp( _temp767); Cyc_Absyndump_dump_nospace(
! _tag_arr("){", sizeof( unsigned char), 3u)); for( 0; _temp765 !=  0; _temp765=((
! struct Cyc_List_List*) _check_null( _temp765))->tl){ struct Cyc_Absyn_SwitchC_clause
! _temp795; struct Cyc_Absyn_Stmt* _temp796; struct Cyc_Absyn_Exp* _temp798;
! struct Cyc_Absyn_SwitchC_clause* _temp793=( struct Cyc_Absyn_SwitchC_clause*)((
! struct Cyc_List_List*) _check_null( _temp765))->hd; _temp795=* _temp793; _LL799:
! _temp798= _temp795.cnst_exp; goto _LL797; _LL797: _temp796= _temp795.body; goto
! _LL794; _LL794: if( _temp798 ==  0){ Cyc_Absyndump_dump( _tag_arr("default: ",
  sizeof( unsigned char), 10u));} else{ Cyc_Absyndump_dump( _tag_arr("case ",
  sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpexp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp798)); Cyc_Absyndump_dump_char(( int)':');} Cyc_Absyndump_dumpstmt(
! _temp796);} Cyc_Absyndump_dump_char(( int)'}'); goto _LL666; _LL700: Cyc_Absyndump_dump(
! _tag_arr("fallthru;", sizeof( unsigned char), 10u)); goto _LL666; _LL702: Cyc_Absyndump_dump(
  _tag_arr("fallthru(", sizeof( unsigned char), 10u)); Cyc_Absyndump_dumpexps_prec(
! 20, _temp771); Cyc_Absyndump_dump_nospace( _tag_arr(");", sizeof( unsigned char),
! 3u)); goto _LL666; _LL704: Cyc_Absyndump_dump( _tag_arr("try", sizeof(
! unsigned char), 4u)); Cyc_Absyndump_dumpstmt( _temp775); Cyc_Absyndump_dump(
  _tag_arr("catch {", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumpswitchclauses(
! _temp773); Cyc_Absyndump_dump_char(( int)'}'); goto _LL666; _LL706: Cyc_Absyndump_dump(
  _tag_arr("region<", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumptvar(
! _temp781); Cyc_Absyndump_dump( _tag_arr("> ", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpqvar(
! _temp779->name); Cyc_Absyndump_dump( _tag_arr("{", sizeof( unsigned char), 2u));
! Cyc_Absyndump_dumpstmt( _temp777); Cyc_Absyndump_dump( _tag_arr("}", sizeof(
! unsigned char), 2u)); goto _LL666; _LL708: Cyc_Absyndump_dump( _tag_arr("cut",
! sizeof( unsigned char), 4u)); Cyc_Absyndump_dumpstmt( _temp783); goto _LL666;
! _LL710: Cyc_Absyndump_dump( _tag_arr("splice", sizeof( unsigned char), 7u)); Cyc_Absyndump_dumpstmt(
! _temp785); goto _LL666; _LL666:;} struct _tuple9{ struct Cyc_List_List* f1;
  struct Cyc_Absyn_Pat* f2; } ; void Cyc_Absyndump_dumpdp( struct _tuple9* dp){
  Cyc_Absyndump_egroup( Cyc_Absyndump_dumpdesignator,(* dp).f1, _tag_arr("",
  sizeof( unsigned char), 1u), _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=",
  sizeof( unsigned char), 2u)); Cyc_Absyndump_dumppat((* dp).f2);} void Cyc_Absyndump_dumppat(
! struct Cyc_Absyn_Pat* p){ void* _temp800=( void*) p->r; int _temp834; void*
! _temp836; int _temp838; void* _temp840; unsigned char _temp842; struct
! _tagged_arr _temp844; struct Cyc_Absyn_Vardecl* _temp846; struct Cyc_List_List*
! _temp848; struct Cyc_Absyn_Pat* _temp850; struct Cyc_Absyn_Vardecl* _temp852;
! struct _tuple0* _temp854; struct Cyc_List_List* _temp856; struct Cyc_List_List*
! _temp858; struct _tuple0* _temp860; struct Cyc_List_List* _temp862; struct Cyc_List_List*
! _temp864; struct _tuple0* _temp866; struct Cyc_List_List* _temp868; struct Cyc_List_List*
! _temp870; struct Cyc_Absyn_Structdecl* _temp872; struct Cyc_List_List* _temp874;
! struct Cyc_List_List* _temp876; struct Cyc_Absyn_Tunionfield* _temp878; struct
! Cyc_Absyn_Enumfield* _temp880; _LL802: if( _temp800 == ( void*) Cyc_Absyn_Wild_p){
! goto _LL803;} else{ goto _LL804;} _LL804: if( _temp800 == ( void*) Cyc_Absyn_Null_p){
! goto _LL805;} else{ goto _LL806;} _LL806: if(( unsigned int) _temp800 >  2u?*((
! int*) _temp800) ==  Cyc_Absyn_Int_p: 0){ _LL837: _temp836=( void*)(( struct Cyc_Absyn_Int_p_struct*)
! _temp800)->f1; if( _temp836 == ( void*) Cyc_Absyn_Signed){ goto _LL835;} else{
! goto _LL808;} _LL835: _temp834=(( struct Cyc_Absyn_Int_p_struct*) _temp800)->f2;
! goto _LL807;} else{ goto _LL808;} _LL808: if(( unsigned int) _temp800 >  2u?*((
! int*) _temp800) ==  Cyc_Absyn_Int_p: 0){ _LL841: _temp840=( void*)(( struct Cyc_Absyn_Int_p_struct*)
! _temp800)->f1; if( _temp840 == ( void*) Cyc_Absyn_Unsigned){ goto _LL839;} else{
! goto _LL810;} _LL839: _temp838=(( struct Cyc_Absyn_Int_p_struct*) _temp800)->f2;
! goto _LL809;} else{ goto _LL810;} _LL810: if(( unsigned int) _temp800 >  2u?*((
! int*) _temp800) ==  Cyc_Absyn_Char_p: 0){ _LL843: _temp842=(( struct Cyc_Absyn_Char_p_struct*)
! _temp800)->f1; goto _LL811;} else{ goto _LL812;} _LL812: if(( unsigned int)
! _temp800 >  2u?*(( int*) _temp800) ==  Cyc_Absyn_Float_p: 0){ _LL845: _temp844=((
! struct Cyc_Absyn_Float_p_struct*) _temp800)->f1; goto _LL813;} else{ goto _LL814;}
! _LL814: if(( unsigned int) _temp800 >  2u?*(( int*) _temp800) ==  Cyc_Absyn_Var_p:
! 0){ _LL847: _temp846=(( struct Cyc_Absyn_Var_p_struct*) _temp800)->f1; goto
! _LL815;} else{ goto _LL816;} _LL816: if(( unsigned int) _temp800 >  2u?*(( int*)
! _temp800) ==  Cyc_Absyn_Tuple_p: 0){ _LL849: _temp848=(( struct Cyc_Absyn_Tuple_p_struct*)
! _temp800)->f1; goto _LL817;} else{ goto _LL818;} _LL818: if(( unsigned int)
! _temp800 >  2u?*(( int*) _temp800) ==  Cyc_Absyn_Pointer_p: 0){ _LL851: _temp850=((
! struct Cyc_Absyn_Pointer_p_struct*) _temp800)->f1; goto _LL819;} else{ goto
! _LL820;} _LL820: if(( unsigned int) _temp800 >  2u?*(( int*) _temp800) ==  Cyc_Absyn_Reference_p:
! 0){ _LL853: _temp852=(( struct Cyc_Absyn_Reference_p_struct*) _temp800)->f1;
! goto _LL821;} else{ goto _LL822;} _LL822: if(( unsigned int) _temp800 >  2u?*((
! int*) _temp800) ==  Cyc_Absyn_UnknownId_p: 0){ _LL855: _temp854=(( struct Cyc_Absyn_UnknownId_p_struct*)
! _temp800)->f1; goto _LL823;} else{ goto _LL824;} _LL824: if(( unsigned int)
! _temp800 >  2u?*(( int*) _temp800) ==  Cyc_Absyn_UnknownCall_p: 0){ _LL861:
! _temp860=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp800)->f1; goto _LL859;
! _LL859: _temp858=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp800)->f2; goto
! _LL857; _LL857: _temp856=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp800)->f3;
! goto _LL825;} else{ goto _LL826;} _LL826: if(( unsigned int) _temp800 >  2u?*((
! int*) _temp800) ==  Cyc_Absyn_UnknownFields_p: 0){ _LL867: _temp866=(( struct
! Cyc_Absyn_UnknownFields_p_struct*) _temp800)->f1; goto _LL865; _LL865: _temp864=((
! struct Cyc_Absyn_UnknownFields_p_struct*) _temp800)->f2; goto _LL863; _LL863:
! _temp862=(( struct Cyc_Absyn_UnknownFields_p_struct*) _temp800)->f3; goto _LL827;}
! else{ goto _LL828;} _LL828: if(( unsigned int) _temp800 >  2u?*(( int*) _temp800)
! ==  Cyc_Absyn_Struct_p: 0){ _LL873: _temp872=(( struct Cyc_Absyn_Struct_p_struct*)
! _temp800)->f1; goto _LL871; _LL871: _temp870=(( struct Cyc_Absyn_Struct_p_struct*)
! _temp800)->f3; goto _LL869; _LL869: _temp868=(( struct Cyc_Absyn_Struct_p_struct*)
! _temp800)->f4; goto _LL829;} else{ goto _LL830;} _LL830: if(( unsigned int)
! _temp800 >  2u?*(( int*) _temp800) ==  Cyc_Absyn_Tunion_p: 0){ _LL879: _temp878=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp800)->f2; goto _LL877; _LL877: _temp876=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp800)->f3; goto _LL875; _LL875: _temp874=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp800)->f4; goto _LL831;} else{ goto
! _LL832;} _LL832: if(( unsigned int) _temp800 >  2u?*(( int*) _temp800) ==  Cyc_Absyn_Enum_p:
! 0){ _LL881: _temp880=(( struct Cyc_Absyn_Enum_p_struct*) _temp800)->f2; goto
! _LL833;} else{ goto _LL801;} _LL803: Cyc_Absyndump_dump_char(( int)'_'); goto
! _LL801; _LL805: Cyc_Absyndump_dump( _tag_arr("NULL", sizeof( unsigned char), 5u));
! goto _LL801; _LL807: Cyc_Absyndump_dump(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp883; _temp883.tag= Cyc_Std_Int_pa; _temp883.f1=( int)(( unsigned int)
! _temp834);{ void* _temp882[ 1u]={& _temp883}; Cyc_Std_aprintf( _tag_arr("%d",
! sizeof( unsigned char), 3u), _tag_arr( _temp882, sizeof( void*), 1u));}})); goto
! _LL801; _LL809: Cyc_Absyndump_dump(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp885; _temp885.tag= Cyc_Std_Int_pa; _temp885.f1=( unsigned int) _temp838;{
! void* _temp884[ 1u]={& _temp885}; Cyc_Std_aprintf( _tag_arr("%u", sizeof(
! unsigned char), 3u), _tag_arr( _temp884, sizeof( void*), 1u));}})); goto _LL801;
! _LL811: Cyc_Absyndump_dump( _tag_arr("'", sizeof( unsigned char), 2u)); Cyc_Absyndump_dump_nospace(
! Cyc_Absynpp_char_escape( _temp842)); Cyc_Absyndump_dump_nospace( _tag_arr("'",
! sizeof( unsigned char), 2u)); goto _LL801; _LL813: Cyc_Absyndump_dump( _temp844);
! goto _LL801; _LL815: Cyc_Absyndump_dumpqvar( _temp846->name); goto _LL801;
! _LL817:(( void(*)( void(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumppat, _temp848, _tag_arr("$(", sizeof( unsigned char), 3u),
  _tag_arr(")", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL801; _LL819: Cyc_Absyndump_dump( _tag_arr("&", sizeof(
! unsigned char), 2u)); Cyc_Absyndump_dumppat( _temp850); goto _LL801; _LL821: Cyc_Absyndump_dump(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpqvar( _temp852->name);
! goto _LL801; _LL823: Cyc_Absyndump_dumpqvar( _temp854); goto _LL801; _LL825: Cyc_Absyndump_dumpqvar(
! _temp860); Cyc_Absyndump_dumptvars( _temp858);(( void(*)( void(* f)( struct Cyc_Absyn_Pat*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumppat, _temp856,
  _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof( unsigned char),
! 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL801; _LL827: Cyc_Absyndump_dumpqvar(
! _temp866); Cyc_Absyndump_dumptvars( _temp864);(( void(*)( void(* f)( struct
  _tuple9*), struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr
  end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumpdp,
! _temp862, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL801;
! _LL829: if( _temp872->name !=  0){ Cyc_Absyndump_dumpqvar(( struct _tuple0*)((
! struct Cyc_Core_Opt*) _check_null( _temp872->name))->v);} Cyc_Absyndump_dumptvars(
! _temp870);(( void(*)( void(* f)( struct _tuple9*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpdp, _temp868, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL801; _LL831: Cyc_Absyndump_dumpqvar( _temp878->name); Cyc_Absyndump_dumptvars(
! _temp876); if( _temp874 !=  0){(( void(*)( void(* f)( struct Cyc_Absyn_Pat*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumppat, _temp874,
  _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof( unsigned char),
! 2u), _tag_arr(",", sizeof( unsigned char), 2u));} goto _LL801; _LL833: Cyc_Absyndump_dumpqvar(
! _temp880->name); goto _LL801; _LL801:;} void Cyc_Absyndump_dumptunionfield(
  struct Cyc_Absyn_Tunionfield* ef){ Cyc_Absyndump_dumpqvar( ef->name); if( ef->typs
  !=  0){ Cyc_Absyndump_dumpargs( ef->typs);}} void Cyc_Absyndump_dumptunionfields(
  struct Cyc_List_List* fields){(( void(*)( void(* f)( struct Cyc_Absyn_Tunionfield*),
--- 1067,1645 ----
  unsigned char), 1u), _tag_arr(",", sizeof( unsigned char), 2u));} void Cyc_Absyndump_dumpexp_prec(
  int inprec, struct Cyc_Absyn_Exp* e){ int myprec= Cyc_Absynpp_exp_prec( e); if(
  inprec >=  myprec){ Cyc_Absyndump_dump_nospace( _tag_arr("(", sizeof(
! unsigned char), 2u));}{ void* _temp369=( void*) e->r; void* _temp465;
! unsigned char _temp467; void* _temp469; void* _temp471; short _temp473; void*
! _temp475; void* _temp477; int _temp479; void* _temp481; void* _temp483; int
! _temp485; void* _temp487; void* _temp489; long long _temp491; void* _temp493;
! void* _temp495; struct _tagged_arr _temp497; void* _temp499; void* _temp501;
! struct _tagged_arr _temp503; struct _tuple0* _temp505; struct _tuple0* _temp507;
! struct Cyc_List_List* _temp509; void* _temp511; struct Cyc_Absyn_Exp* _temp513;
! struct Cyc_Core_Opt* _temp515; struct Cyc_Absyn_Exp* _temp517; void* _temp519;
! struct Cyc_Absyn_Exp* _temp521; void* _temp523; struct Cyc_Absyn_Exp* _temp525;
! void* _temp527; struct Cyc_Absyn_Exp* _temp529; void* _temp531; struct Cyc_Absyn_Exp*
! _temp533; struct Cyc_Absyn_Exp* _temp535; struct Cyc_Absyn_Exp* _temp537; struct
! Cyc_Absyn_Exp* _temp539; struct Cyc_Absyn_Exp* _temp541; struct Cyc_Absyn_Exp*
! _temp543; struct Cyc_List_List* _temp545; struct Cyc_Absyn_Exp* _temp547; struct
! Cyc_List_List* _temp549; struct Cyc_Absyn_Exp* _temp551; struct Cyc_Absyn_Exp*
! _temp553; struct Cyc_Absyn_Exp* _temp555; struct Cyc_Absyn_Exp* _temp557; struct
! Cyc_Absyn_Exp* _temp559; void* _temp561; struct Cyc_Absyn_Exp* _temp563; struct
! Cyc_Absyn_Exp* _temp565; struct Cyc_Absyn_Exp* _temp567; void* _temp569; struct
! Cyc_Absyn_Exp* _temp571; struct _tagged_arr* _temp573; void* _temp575; void*
! _temp577; struct Cyc_Absyn_Exp* _temp579; struct _tagged_arr* _temp581; struct
! Cyc_Absyn_Exp* _temp583; struct _tagged_arr* _temp585; struct Cyc_Absyn_Exp*
! _temp587; struct Cyc_Absyn_Exp* _temp589; struct Cyc_Absyn_Exp* _temp591; struct
! Cyc_List_List* _temp593; struct Cyc_List_List* _temp595; struct _tuple1*
! _temp597; struct Cyc_List_List* _temp599; struct Cyc_Absyn_Exp* _temp601; struct
! Cyc_Absyn_Exp* _temp603; struct Cyc_Absyn_Vardecl* _temp605; struct Cyc_List_List*
! _temp607; struct _tuple0* _temp609; struct Cyc_List_List* _temp611; struct Cyc_Absyn_Tunionfield*
! _temp613; struct Cyc_List_List* _temp615; struct _tuple0* _temp617; void*
! _temp619; struct Cyc_Absyn_Exp* _temp621; struct Cyc_List_List* _temp623; struct
! Cyc_Core_Opt* _temp625; struct Cyc_Absyn_Stmt* _temp627; struct Cyc_Absyn_Fndecl*
! _temp629; struct Cyc_Absyn_Exp* _temp631; _LL371: if(*(( int*) _temp369) ==  Cyc_Absyn_Const_e){
! _LL466: _temp465=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp369)->f1; if((
! unsigned int) _temp465 >  1u?*(( int*) _temp465) ==  Cyc_Absyn_Char_c: 0){
! _LL470: _temp469=( void*)(( struct Cyc_Absyn_Char_c_struct*) _temp465)->f1; goto
! _LL468; _LL468: _temp467=(( struct Cyc_Absyn_Char_c_struct*) _temp465)->f2; goto
! _LL372;} else{ goto _LL373;}} else{ goto _LL373;} _LL373: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Const_e){ _LL472: _temp471=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp369)->f1; if(( unsigned int) _temp471 >  1u?*(( int*) _temp471) ==  Cyc_Absyn_Short_c:
! 0){ _LL476: _temp475=( void*)(( struct Cyc_Absyn_Short_c_struct*) _temp471)->f1;
! goto _LL474; _LL474: _temp473=(( struct Cyc_Absyn_Short_c_struct*) _temp471)->f2;
! goto _LL374;} else{ goto _LL375;}} else{ goto _LL375;} _LL375: if(*(( int*)
! _temp369) ==  Cyc_Absyn_Const_e){ _LL478: _temp477=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp369)->f1; if(( unsigned int) _temp477 >  1u?*(( int*) _temp477) ==  Cyc_Absyn_Int_c:
! 0){ _LL482: _temp481=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp477)->f1;
! if( _temp481 == ( void*) Cyc_Absyn_Signed){ goto _LL480;} else{ goto _LL377;}
! _LL480: _temp479=(( struct Cyc_Absyn_Int_c_struct*) _temp477)->f2; goto _LL376;}
! else{ goto _LL377;}} else{ goto _LL377;} _LL377: if(*(( int*) _temp369) ==  Cyc_Absyn_Const_e){
! _LL484: _temp483=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp369)->f1; if((
! unsigned int) _temp483 >  1u?*(( int*) _temp483) ==  Cyc_Absyn_Int_c: 0){ _LL488:
! _temp487=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp483)->f1; if( _temp487
! == ( void*) Cyc_Absyn_Unsigned){ goto _LL486;} else{ goto _LL379;} _LL486:
! _temp485=(( struct Cyc_Absyn_Int_c_struct*) _temp483)->f2; goto _LL378;} else{
! goto _LL379;}} else{ goto _LL379;} _LL379: if(*(( int*) _temp369) ==  Cyc_Absyn_Const_e){
! _LL490: _temp489=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp369)->f1; if((
! unsigned int) _temp489 >  1u?*(( int*) _temp489) ==  Cyc_Absyn_LongLong_c: 0){
! _LL494: _temp493=( void*)(( struct Cyc_Absyn_LongLong_c_struct*) _temp489)->f1;
! goto _LL492; _LL492: _temp491=(( struct Cyc_Absyn_LongLong_c_struct*) _temp489)->f2;
! goto _LL380;} else{ goto _LL381;}} else{ goto _LL381;} _LL381: if(*(( int*)
! _temp369) ==  Cyc_Absyn_Const_e){ _LL496: _temp495=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp369)->f1; if(( unsigned int) _temp495 >  1u?*(( int*) _temp495) ==  Cyc_Absyn_Float_c:
! 0){ _LL498: _temp497=(( struct Cyc_Absyn_Float_c_struct*) _temp495)->f1; goto
! _LL382;} else{ goto _LL383;}} else{ goto _LL383;} _LL383: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Const_e){ _LL500: _temp499=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp369)->f1; if( _temp499 == ( void*) Cyc_Absyn_Null_c){ goto _LL384;} else{
! goto _LL385;}} else{ goto _LL385;} _LL385: if(*(( int*) _temp369) ==  Cyc_Absyn_Const_e){
! _LL502: _temp501=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp369)->f1; if((
! unsigned int) _temp501 >  1u?*(( int*) _temp501) ==  Cyc_Absyn_String_c: 0){
! _LL504: _temp503=(( struct Cyc_Absyn_String_c_struct*) _temp501)->f1; goto
! _LL386;} else{ goto _LL387;}} else{ goto _LL387;} _LL387: if(*(( int*) _temp369)
! ==  Cyc_Absyn_UnknownId_e){ _LL506: _temp505=(( struct Cyc_Absyn_UnknownId_e_struct*)
! _temp369)->f1; goto _LL388;} else{ goto _LL389;} _LL389: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Var_e){ _LL508: _temp507=(( struct Cyc_Absyn_Var_e_struct*)
! _temp369)->f1; goto _LL390;} else{ goto _LL391;} _LL391: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Primop_e){ _LL512: _temp511=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp369)->f1; goto _LL510; _LL510: _temp509=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp369)->f2; goto _LL392;} else{ goto _LL393;} _LL393: if(*(( int*) _temp369)
! ==  Cyc_Absyn_AssignOp_e){ _LL518: _temp517=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp369)->f1; goto _LL516; _LL516: _temp515=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp369)->f2; goto _LL514; _LL514: _temp513=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp369)->f3; goto _LL394;} else{ goto _LL395;} _LL395: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Increment_e){ _LL522: _temp521=(( struct Cyc_Absyn_Increment_e_struct*)
! _temp369)->f1; goto _LL520; _LL520: _temp519=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp369)->f2; if( _temp519 == ( void*) Cyc_Absyn_PreInc){ goto _LL396;} else{
! goto _LL397;}} else{ goto _LL397;} _LL397: if(*(( int*) _temp369) ==  Cyc_Absyn_Increment_e){
! _LL526: _temp525=(( struct Cyc_Absyn_Increment_e_struct*) _temp369)->f1; goto
! _LL524; _LL524: _temp523=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp369)->f2; if( _temp523 == ( void*) Cyc_Absyn_PreDec){ goto _LL398;} else{
! goto _LL399;}} else{ goto _LL399;} _LL399: if(*(( int*) _temp369) ==  Cyc_Absyn_Increment_e){
! _LL530: _temp529=(( struct Cyc_Absyn_Increment_e_struct*) _temp369)->f1; goto
! _LL528; _LL528: _temp527=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp369)->f2; if( _temp527 == ( void*) Cyc_Absyn_PostInc){ goto _LL400;} else{
! goto _LL401;}} else{ goto _LL401;} _LL401: if(*(( int*) _temp369) ==  Cyc_Absyn_Increment_e){
! _LL534: _temp533=(( struct Cyc_Absyn_Increment_e_struct*) _temp369)->f1; goto
! _LL532; _LL532: _temp531=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp369)->f2; if( _temp531 == ( void*) Cyc_Absyn_PostDec){ goto _LL402;} else{
! goto _LL403;}} else{ goto _LL403;} _LL403: if(*(( int*) _temp369) ==  Cyc_Absyn_Conditional_e){
! _LL540: _temp539=(( struct Cyc_Absyn_Conditional_e_struct*) _temp369)->f1; goto
! _LL538; _LL538: _temp537=(( struct Cyc_Absyn_Conditional_e_struct*) _temp369)->f2;
! goto _LL536; _LL536: _temp535=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp369)->f3; goto _LL404;} else{ goto _LL405;} _LL405: if(*(( int*) _temp369)
! ==  Cyc_Absyn_SeqExp_e){ _LL544: _temp543=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp369)->f1; goto _LL542; _LL542: _temp541=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp369)->f2; goto _LL406;} else{ goto _LL407;} _LL407: if(*(( int*) _temp369)
! ==  Cyc_Absyn_UnknownCall_e){ _LL548: _temp547=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp369)->f1; goto _LL546; _LL546: _temp545=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp369)->f2; goto _LL408;} else{ goto _LL409;} _LL409: if(*(( int*) _temp369)
! ==  Cyc_Absyn_FnCall_e){ _LL552: _temp551=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp369)->f1; goto _LL550; _LL550: _temp549=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp369)->f2; goto _LL410;} else{ goto _LL411;} _LL411: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Throw_e){ _LL554: _temp553=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp369)->f1; goto _LL412;} else{ goto _LL413;} _LL413: if(*(( int*) _temp369)
! ==  Cyc_Absyn_NoInstantiate_e){ _LL556: _temp555=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp369)->f1; goto _LL414;} else{ goto _LL415;} _LL415: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Instantiate_e){ _LL558: _temp557=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp369)->f1; goto _LL416;} else{ goto _LL417;} _LL417: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Cast_e){ _LL562: _temp561=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp369)->f1; goto _LL560; _LL560: _temp559=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp369)->f2; goto _LL418;} else{ goto _LL419;} _LL419: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Address_e){ _LL564: _temp563=(( struct Cyc_Absyn_Address_e_struct*)
! _temp369)->f1; goto _LL420;} else{ goto _LL421;} _LL421: if(*(( int*) _temp369)
! ==  Cyc_Absyn_New_e){ _LL568: _temp567=(( struct Cyc_Absyn_New_e_struct*)
! _temp369)->f1; goto _LL566; _LL566: _temp565=(( struct Cyc_Absyn_New_e_struct*)
! _temp369)->f2; goto _LL422;} else{ goto _LL423;} _LL423: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Sizeoftyp_e){ _LL570: _temp569=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp369)->f1; goto _LL424;} else{ goto _LL425;} _LL425: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Sizeofexp_e){ _LL572: _temp571=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp369)->f1; goto _LL426;} else{ goto _LL427;} _LL427: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Offsetof_e){ _LL576: _temp575=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp369)->f1; goto _LL574; _LL574: _temp573=(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp369)->f2; goto _LL428;} else{ goto _LL429;} _LL429: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Gentyp_e){ _LL578: _temp577=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*)
! _temp369)->f1; goto _LL430;} else{ goto _LL431;} _LL431: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Deref_e){ _LL580: _temp579=(( struct Cyc_Absyn_Deref_e_struct*)
! _temp369)->f1; goto _LL432;} else{ goto _LL433;} _LL433: if(*(( int*) _temp369)
! ==  Cyc_Absyn_StructMember_e){ _LL584: _temp583=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp369)->f1; goto _LL582; _LL582: _temp581=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp369)->f2; goto _LL434;} else{ goto _LL435;} _LL435: if(*(( int*) _temp369)
! ==  Cyc_Absyn_StructArrow_e){ _LL588: _temp587=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp369)->f1; goto _LL586; _LL586: _temp585=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp369)->f2; goto _LL436;} else{ goto _LL437;} _LL437: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Subscript_e){ _LL592: _temp591=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp369)->f1; goto _LL590; _LL590: _temp589=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp369)->f2; goto _LL438;} else{ goto _LL439;} _LL439: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Tuple_e){ _LL594: _temp593=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp369)->f1; goto _LL440;} else{ goto _LL441;} _LL441: if(*(( int*) _temp369)
! ==  Cyc_Absyn_CompoundLit_e){ _LL598: _temp597=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp369)->f1; goto _LL596; _LL596: _temp595=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp369)->f2; goto _LL442;} else{ goto _LL443;} _LL443: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Array_e){ _LL600: _temp599=(( struct Cyc_Absyn_Array_e_struct*)
! _temp369)->f1; goto _LL444;} else{ goto _LL445;} _LL445: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Comprehension_e){ _LL606: _temp605=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp369)->f1; goto _LL604; _LL604: _temp603=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp369)->f2; goto _LL602; _LL602: _temp601=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp369)->f3; goto _LL446;} else{ goto _LL447;} _LL447: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Struct_e){ _LL610: _temp609=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp369)->f1; goto _LL608; _LL608: _temp607=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp369)->f3; goto _LL448;} else{ goto _LL449;} _LL449: if(*(( int*) _temp369)
! ==  Cyc_Absyn_AnonStruct_e){ _LL612: _temp611=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp369)->f2; goto _LL450;} else{ goto _LL451;} _LL451: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Tunion_e){ _LL616: _temp615=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp369)->f3; goto _LL614; _LL614: _temp613=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp369)->f5; goto _LL452;} else{ goto _LL453;} _LL453: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Enum_e){ _LL618: _temp617=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp369)->f1; goto _LL454;} else{ goto _LL455;} _LL455: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Malloc_e){ _LL622: _temp621=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp369)->f1; goto _LL620; _LL620: _temp619=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp369)->f2; goto _LL456;} else{ goto _LL457;} _LL457: if(*(( int*) _temp369)
! ==  Cyc_Absyn_UnresolvedMem_e){ _LL626: _temp625=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp369)->f1; goto _LL624; _LL624: _temp623=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp369)->f2; goto _LL458;} else{ goto _LL459;} _LL459: if(*(( int*) _temp369)
! ==  Cyc_Absyn_StmtExp_e){ _LL628: _temp627=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp369)->f1; goto _LL460;} else{ goto _LL461;} _LL461: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Codegen_e){ _LL630: _temp629=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp369)->f1; goto _LL462;} else{ goto _LL463;} _LL463: if(*(( int*) _temp369)
! ==  Cyc_Absyn_Fill_e){ _LL632: _temp631=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp369)->f1; goto _LL464;} else{ goto _LL370;} _LL372: Cyc_Absyndump_dump_char((
! int)'\''); Cyc_Absyndump_dump_nospace( Cyc_Absynpp_char_escape( _temp467)); Cyc_Absyndump_dump_char((
! int)'\''); goto _LL370; _LL374: Cyc_Absyndump_dump(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp634; _temp634.tag= Cyc_Std_Int_pa; _temp634.f1=(
! int)(( unsigned int)(( int) _temp473));{ void* _temp633[ 1u]={& _temp634}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp633, sizeof( void*),
! 1u));}})); goto _LL370; _LL376: Cyc_Absyndump_dump(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp636; _temp636.tag= Cyc_Std_Int_pa; _temp636.f1=(
! int)(( unsigned int) _temp479);{ void* _temp635[ 1u]={& _temp636}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp635, sizeof( void*),
! 1u));}})); goto _LL370; _LL378: Cyc_Absyndump_dump(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp638; _temp638.tag= Cyc_Std_Int_pa; _temp638.f1=(
! int)(( unsigned int) _temp485);{ void* _temp637[ 1u]={& _temp638}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp637, sizeof( void*),
  1u));}})); Cyc_Absyndump_dump_nospace( _tag_arr("u", sizeof( unsigned char), 2u));
! goto _LL370; _LL380: Cyc_Absyndump_dump( _tag_arr("<<FIX LONG LONG CONSTANT>>",
! sizeof( unsigned char), 27u)); goto _LL370; _LL382: Cyc_Absyndump_dump( _temp497);
! goto _LL370; _LL384: Cyc_Absyndump_dump( _tag_arr("NULL", sizeof( unsigned char),
! 5u)); goto _LL370; _LL386: Cyc_Absyndump_dump_char(( int)'"'); Cyc_Absyndump_dump_nospace(
! Cyc_Absynpp_string_escape( _temp503)); Cyc_Absyndump_dump_char(( int)'"'); goto
! _LL370; _LL388: _temp507= _temp505; goto _LL390; _LL390: Cyc_Absyndump_dumpqvar(
! _temp507); goto _LL370; _LL392: { struct _tagged_arr _temp639= Cyc_Absynpp_prim2str(
! _temp511); switch((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp509)){ case 1: _LL640: if( _temp511 == ( void*) Cyc_Absyn_Size){ Cyc_Absyndump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp509))->hd);
  Cyc_Absyndump_dump( _tag_arr(".size", sizeof( unsigned char), 6u));} else{ Cyc_Absyndump_dump(
! _temp639); Cyc_Absyndump_dumpexp_prec( myprec,( struct Cyc_Absyn_Exp*)(( struct
! Cyc_List_List*) _check_null( _temp509))->hd);} break; case 2: _LL641: Cyc_Absyndump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp509))->hd);
! Cyc_Absyndump_dump( _temp639); Cyc_Absyndump_dump_char(( int)' '); Cyc_Absyndump_dumpexp_prec(
  myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null((( struct
! Cyc_List_List*) _check_null( _temp509))->tl))->hd); break; default: _LL642:( int)
! _throw(( void*)({ struct Cyc_Core_Failure_struct* _temp644=( struct Cyc_Core_Failure_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Failure_struct)); _temp644[ 0]=({ struct Cyc_Core_Failure_struct
! _temp645; _temp645.tag= Cyc_Core_Failure; _temp645.f1= _tag_arr("Absyndump -- Bad number of arguments to primop",
! sizeof( unsigned char), 47u); _temp645;}); _temp644;}));} goto _LL370;} _LL394:
! Cyc_Absyndump_dumpexp_prec( myprec, _temp517); if( _temp515 !=  0){ Cyc_Absyndump_dump(
! Cyc_Absynpp_prim2str(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp515))->v));}
  Cyc_Absyndump_dump_nospace( _tag_arr("=", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp513); goto _LL370; _LL396: Cyc_Absyndump_dump( _tag_arr("++",
! sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpexp_prec( myprec, _temp521);
! goto _LL370; _LL398: Cyc_Absyndump_dump( _tag_arr("--", sizeof( unsigned char),
! 3u)); Cyc_Absyndump_dumpexp_prec( myprec, _temp525); goto _LL370; _LL400: Cyc_Absyndump_dumpexp_prec(
! myprec, _temp529); Cyc_Absyndump_dump( _tag_arr("++", sizeof( unsigned char), 3u));
! goto _LL370; _LL402: Cyc_Absyndump_dumpexp_prec( myprec, _temp533); Cyc_Absyndump_dump(
! _tag_arr("--", sizeof( unsigned char), 3u)); goto _LL370; _LL404: Cyc_Absyndump_dumpexp_prec(
! myprec, _temp539); Cyc_Absyndump_dump_char(( int)'?'); Cyc_Absyndump_dumpexp_prec(
! 0, _temp537); Cyc_Absyndump_dump_char(( int)':'); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp535); goto _LL370; _LL406: Cyc_Absyndump_dump_char(( int)'('); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp543); Cyc_Absyndump_dump_char(( int)','); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp541); Cyc_Absyndump_dump_char(( int)')'); goto _LL370; _LL408:
! _temp551= _temp547; _temp549= _temp545; goto _LL410; _LL410: Cyc_Absyndump_dumpexp_prec(
! myprec, _temp551); Cyc_Absyndump_dump_nospace( _tag_arr("(", sizeof(
! unsigned char), 2u)); Cyc_Absyndump_dumpexps_prec( 20, _temp549); Cyc_Absyndump_dump_nospace(
! _tag_arr(")", sizeof( unsigned char), 2u)); goto _LL370; _LL412: Cyc_Absyndump_dump(
  _tag_arr("throw", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp553); goto _LL370; _LL414: _temp557= _temp555; goto _LL416; _LL416:
! Cyc_Absyndump_dumpexp_prec( inprec, _temp557); goto _LL370; _LL418: Cyc_Absyndump_dump_char((
! int)'('); Cyc_Absyndump_dumptyp( _temp561); Cyc_Absyndump_dump_char(( int)')');
! Cyc_Absyndump_dumpexp_prec( myprec, _temp559); goto _LL370; _LL420: Cyc_Absyndump_dump_char((
! int)'&'); Cyc_Absyndump_dumpexp_prec( myprec, _temp563); goto _LL370; _LL422:
  Cyc_Absyndump_dump( _tag_arr("new ", sizeof( unsigned char), 5u)); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp565); goto _LL370; _LL424: Cyc_Absyndump_dump( _tag_arr("sizeof(",
! sizeof( unsigned char), 8u)); Cyc_Absyndump_dumptyp( _temp569); Cyc_Absyndump_dump_char((
! int)')'); goto _LL370; _LL426: Cyc_Absyndump_dump( _tag_arr("sizeof(", sizeof(
! unsigned char), 8u)); Cyc_Absyndump_dumpexp_prec( myprec, _temp571); Cyc_Absyndump_dump_char((
! int)')'); goto _LL370; _LL428: Cyc_Absyndump_dump( _tag_arr("offsetof(", sizeof(
! unsigned char), 10u)); Cyc_Absyndump_dumptyp( _temp575); Cyc_Absyndump_dump_char((
! int)','); Cyc_Absyndump_dump_nospace(* _temp573); Cyc_Absyndump_dump_char(( int)')');
! goto _LL370; _LL430: Cyc_Absyndump_dump( _tag_arr("__gen(", sizeof(
! unsigned char), 7u)); Cyc_Absyndump_dumptyp( _temp577); Cyc_Absyndump_dump_char((
! int)')'); goto _LL370; _LL432: Cyc_Absyndump_dump_char(( int)'*'); Cyc_Absyndump_dumpexp_prec(
! myprec, _temp579); goto _LL370; _LL434: Cyc_Absyndump_dumpexp_prec( myprec,
! _temp583); Cyc_Absyndump_dump_char(( int)'.'); Cyc_Absyndump_dump_nospace(*
! _temp581); goto _LL370; _LL436: Cyc_Absyndump_dumpexp_prec( myprec, _temp587);
! Cyc_Absyndump_dump_nospace( _tag_arr("->", sizeof( unsigned char), 3u)); Cyc_Absyndump_dump_nospace(*
! _temp585); goto _LL370; _LL438: Cyc_Absyndump_dumpexp_prec( myprec, _temp591);
! Cyc_Absyndump_dump_char(( int)'['); Cyc_Absyndump_dumpexp( _temp589); Cyc_Absyndump_dump_char((
! int)']'); goto _LL370; _LL440: Cyc_Absyndump_dump( _tag_arr("$(", sizeof(
! unsigned char), 3u)); Cyc_Absyndump_dumpexps_prec( 20, _temp593); Cyc_Absyndump_dump_char((
! int)')'); goto _LL370; _LL442: Cyc_Absyndump_dump_char(( int)'('); Cyc_Absyndump_dumptyp((*
! _temp597).f3); Cyc_Absyndump_dump_char(( int)')');(( void(*)( void(* f)( struct
  _tuple8*), struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr
  end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumpde,
! _temp595, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL370;
! _LL444:(( void(*)( void(* f)( struct _tuple8*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpde, _temp599, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL370; _LL446: Cyc_Absyndump_dump( _tag_arr("new {for", sizeof(
! unsigned char), 9u)); Cyc_Absyndump_dump_str((* _temp605->name).f2); Cyc_Absyndump_dump_char((
! int)'<'); Cyc_Absyndump_dumpexp( _temp603); Cyc_Absyndump_dump_char(( int)':');
! Cyc_Absyndump_dumpexp( _temp601); Cyc_Absyndump_dump_char(( int)'}'); goto
! _LL370; _LL448: Cyc_Absyndump_dumpqvar( _temp609);(( void(*)( void(* f)( struct
  _tuple8*), struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr
  end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumpde,
! _temp607, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL370;
! _LL450:(( void(*)( void(* f)( struct _tuple8*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpde, _temp611, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL370; _LL452: Cyc_Absyndump_dumpqvar( _temp613->name); if( _temp615
  !=  0){(( void(*)( void(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpexp, _temp615, _tag_arr("(", sizeof( unsigned char), 2u),
  _tag_arr(")", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u));} goto _LL370; _LL454: Cyc_Absyndump_dumpqvar( _temp617); goto _LL370;
! _LL456: if( _temp621 !=  0){ Cyc_Absyndump_dump( _tag_arr("rmalloc(", sizeof(
  unsigned char), 9u)); Cyc_Absyndump_dumpexp(( struct Cyc_Absyn_Exp*) _check_null(
! _temp621)); Cyc_Absyndump_dump( _tag_arr(",", sizeof( unsigned char), 2u));}
  else{ Cyc_Absyndump_dump( _tag_arr("malloc(", sizeof( unsigned char), 8u));} Cyc_Absyndump_dump(
  _tag_arr("sizeof(", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumptyp(
! _temp619); Cyc_Absyndump_dump( _tag_arr("))", sizeof( unsigned char), 3u)); goto
! _LL370; _LL458:(( void(*)( void(* f)( struct _tuple8*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpde, _temp623, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL370; _LL460: Cyc_Absyndump_dump_nospace( _tag_arr("({", sizeof(
! unsigned char), 3u)); Cyc_Absyndump_dumpstmt( _temp627); Cyc_Absyndump_dump_nospace(
! _tag_arr("})", sizeof( unsigned char), 3u)); goto _LL370; _LL462: Cyc_Absyndump_dump(
  _tag_arr("codegen(", sizeof( unsigned char), 9u)); Cyc_Absyndump_dumpdecl(({
! struct Cyc_Absyn_Decl* _temp646=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof(
! struct Cyc_Absyn_Decl)); _temp646->r=( void*)(( void*)({ struct Cyc_Absyn_Fn_d_struct*
! _temp647=( struct Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp647[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp648; _temp648.tag= Cyc_Absyn_Fn_d;
! _temp648.f1= _temp629; _temp648;}); _temp647;})); _temp646->loc= e->loc;
! _temp646;})); Cyc_Absyndump_dump( _tag_arr(")", sizeof( unsigned char), 2u));
! goto _LL370; _LL464: Cyc_Absyndump_dump( _tag_arr("fill(", sizeof( unsigned char),
! 6u)); Cyc_Absyndump_dumpexp( _temp631); Cyc_Absyndump_dump( _tag_arr(")",
! sizeof( unsigned char), 2u)); goto _LL370; _LL370:;} if( inprec >=  myprec){ Cyc_Absyndump_dump_char((
  int)')');}} void Cyc_Absyndump_dumpexp( struct Cyc_Absyn_Exp* e){ Cyc_Absyndump_dumpexp_prec(
  0, e);} void Cyc_Absyndump_dumpswitchclauses( struct Cyc_List_List* scs){ for( 0;
  scs !=  0; scs=(( struct Cyc_List_List*) _check_null( scs))->tl){ struct Cyc_Absyn_Switch_clause*
! _temp649=( struct Cyc_Absyn_Switch_clause*)(( struct Cyc_List_List*) _check_null(
! scs))->hd; if( _temp649->where_clause ==  0?( void*)( _temp649->pattern)->r == (
  void*) Cyc_Absyn_Wild_p: 0){ Cyc_Absyndump_dump( _tag_arr("default:", sizeof(
  unsigned char), 9u));} else{ Cyc_Absyndump_dump( _tag_arr("case", sizeof(
! unsigned char), 5u)); Cyc_Absyndump_dumppat( _temp649->pattern); if( _temp649->where_clause
  !=  0){ Cyc_Absyndump_dump( _tag_arr("&&", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpexp((
! struct Cyc_Absyn_Exp*) _check_null( _temp649->where_clause));} Cyc_Absyndump_dump_nospace(
! _tag_arr(":", sizeof( unsigned char), 2u));} Cyc_Absyndump_dumpstmt( _temp649->body);}}
! void Cyc_Absyndump_dumpstmt( struct Cyc_Absyn_Stmt* s){ void* _temp650=( void*)
! s->r; struct Cyc_Absyn_Exp* _temp696; struct Cyc_Absyn_Stmt* _temp698; struct
! Cyc_Absyn_Stmt* _temp700; struct Cyc_Absyn_Exp* _temp702; struct Cyc_Absyn_Exp*
! _temp704; struct Cyc_Absyn_Stmt* _temp706; struct Cyc_Absyn_Stmt* _temp708;
! struct Cyc_Absyn_Exp* _temp710; struct Cyc_Absyn_Stmt* _temp712; struct _tuple2
! _temp714; struct Cyc_Absyn_Exp* _temp716; struct _tagged_arr* _temp718; struct
! Cyc_Absyn_Stmt* _temp720; struct _tuple2 _temp722; struct Cyc_Absyn_Exp*
! _temp724; struct _tuple2 _temp726; struct Cyc_Absyn_Exp* _temp728; struct Cyc_Absyn_Exp*
! _temp730; struct Cyc_List_List* _temp732; struct Cyc_Absyn_Exp* _temp734; struct
! Cyc_Absyn_Stmt* _temp736; struct Cyc_Absyn_Decl* _temp738; struct Cyc_Absyn_Stmt*
! _temp740; struct _tagged_arr* _temp742; struct _tuple2 _temp744; struct Cyc_Absyn_Exp*
! _temp746; struct Cyc_Absyn_Stmt* _temp748; struct Cyc_List_List* _temp750;
! struct Cyc_Absyn_Exp* _temp752; struct Cyc_List_List* _temp754; struct Cyc_List_List*
! _temp756; struct Cyc_List_List* _temp758; struct Cyc_Absyn_Stmt* _temp760;
! struct Cyc_Absyn_Stmt* _temp762; struct Cyc_Absyn_Vardecl* _temp764; struct Cyc_Absyn_Tvar*
! _temp766; struct Cyc_Absyn_Stmt* _temp768; struct Cyc_Absyn_Stmt* _temp770;
! _LL652: if( _temp650 == ( void*) Cyc_Absyn_Skip_s){ goto _LL653;} else{ goto
! _LL654;} _LL654: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Exp_s:
! 0){ _LL697: _temp696=(( struct Cyc_Absyn_Exp_s_struct*) _temp650)->f1; goto
! _LL655;} else{ goto _LL656;} _LL656: if(( unsigned int) _temp650 >  1u?*(( int*)
! _temp650) ==  Cyc_Absyn_Seq_s: 0){ _LL701: _temp700=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp650)->f1; goto _LL699; _LL699: _temp698=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp650)->f2; goto _LL657;} else{ goto _LL658;} _LL658: if(( unsigned int)
! _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Return_s: 0){ _LL703: _temp702=((
! struct Cyc_Absyn_Return_s_struct*) _temp650)->f1; if( _temp702 ==  0){ goto
! _LL659;} else{ goto _LL660;}} else{ goto _LL660;} _LL660: if(( unsigned int)
! _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Return_s: 0){ _LL705: _temp704=((
! struct Cyc_Absyn_Return_s_struct*) _temp650)->f1; goto _LL661;} else{ goto
! _LL662;} _LL662: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_IfThenElse_s:
! 0){ _LL711: _temp710=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp650)->f1;
! goto _LL709; _LL709: _temp708=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp650)->f2;
! goto _LL707; _LL707: _temp706=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp650)->f3;
! goto _LL663;} else{ goto _LL664;} _LL664: if(( unsigned int) _temp650 >  1u?*((
! int*) _temp650) ==  Cyc_Absyn_While_s: 0){ _LL715: _temp714=(( struct Cyc_Absyn_While_s_struct*)
! _temp650)->f1; _LL717: _temp716= _temp714.f1; goto _LL713; _LL713: _temp712=((
! struct Cyc_Absyn_While_s_struct*) _temp650)->f2; goto _LL665;} else{ goto _LL666;}
! _LL666: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Break_s:
! 0){ goto _LL667;} else{ goto _LL668;} _LL668: if(( unsigned int) _temp650 >  1u?*((
! int*) _temp650) ==  Cyc_Absyn_Continue_s: 0){ goto _LL669;} else{ goto _LL670;}
! _LL670: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Goto_s:
! 0){ _LL719: _temp718=(( struct Cyc_Absyn_Goto_s_struct*) _temp650)->f1; goto
! _LL671;} else{ goto _LL672;} _LL672: if(( unsigned int) _temp650 >  1u?*(( int*)
! _temp650) ==  Cyc_Absyn_For_s: 0){ _LL731: _temp730=(( struct Cyc_Absyn_For_s_struct*)
! _temp650)->f1; goto _LL727; _LL727: _temp726=(( struct Cyc_Absyn_For_s_struct*)
! _temp650)->f2; _LL729: _temp728= _temp726.f1; goto _LL723; _LL723: _temp722=((
! struct Cyc_Absyn_For_s_struct*) _temp650)->f3; _LL725: _temp724= _temp722.f1;
! goto _LL721; _LL721: _temp720=(( struct Cyc_Absyn_For_s_struct*) _temp650)->f4;
! goto _LL673;} else{ goto _LL674;} _LL674: if(( unsigned int) _temp650 >  1u?*((
! int*) _temp650) ==  Cyc_Absyn_Switch_s: 0){ _LL735: _temp734=(( struct Cyc_Absyn_Switch_s_struct*)
! _temp650)->f1; goto _LL733; _LL733: _temp732=(( struct Cyc_Absyn_Switch_s_struct*)
! _temp650)->f2; goto _LL675;} else{ goto _LL676;} _LL676: if(( unsigned int)
! _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Decl_s: 0){ _LL739: _temp738=((
! struct Cyc_Absyn_Decl_s_struct*) _temp650)->f1; goto _LL737; _LL737: _temp736=((
! struct Cyc_Absyn_Decl_s_struct*) _temp650)->f2; goto _LL677;} else{ goto _LL678;}
! _LL678: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Label_s:
! 0){ _LL743: _temp742=(( struct Cyc_Absyn_Label_s_struct*) _temp650)->f1; goto
! _LL741; _LL741: _temp740=(( struct Cyc_Absyn_Label_s_struct*) _temp650)->f2;
! goto _LL679;} else{ goto _LL680;} _LL680: if(( unsigned int) _temp650 >  1u?*((
! int*) _temp650) ==  Cyc_Absyn_Do_s: 0){ _LL749: _temp748=(( struct Cyc_Absyn_Do_s_struct*)
! _temp650)->f1; goto _LL745; _LL745: _temp744=(( struct Cyc_Absyn_Do_s_struct*)
! _temp650)->f2; _LL747: _temp746= _temp744.f1; goto _LL681;} else{ goto _LL682;}
! _LL682: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_SwitchC_s:
! 0){ _LL753: _temp752=(( struct Cyc_Absyn_SwitchC_s_struct*) _temp650)->f1; goto
! _LL751; _LL751: _temp750=(( struct Cyc_Absyn_SwitchC_s_struct*) _temp650)->f2;
! goto _LL683;} else{ goto _LL684;} _LL684: if(( unsigned int) _temp650 >  1u?*((
! int*) _temp650) ==  Cyc_Absyn_Fallthru_s: 0){ _LL755: _temp754=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp650)->f1; if( _temp754 ==  0){ goto _LL685;} else{ goto _LL686;}} else{
! goto _LL686;} _LL686: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) == 
! Cyc_Absyn_Fallthru_s: 0){ _LL757: _temp756=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp650)->f1; goto _LL687;} else{ goto _LL688;} _LL688: if(( unsigned int)
! _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_TryCatch_s: 0){ _LL761:
! _temp760=(( struct Cyc_Absyn_TryCatch_s_struct*) _temp650)->f1; goto _LL759;
! _LL759: _temp758=(( struct Cyc_Absyn_TryCatch_s_struct*) _temp650)->f2; goto
! _LL689;} else{ goto _LL690;} _LL690: if(( unsigned int) _temp650 >  1u?*(( int*)
! _temp650) ==  Cyc_Absyn_Region_s: 0){ _LL767: _temp766=(( struct Cyc_Absyn_Region_s_struct*)
! _temp650)->f1; goto _LL765; _LL765: _temp764=(( struct Cyc_Absyn_Region_s_struct*)
! _temp650)->f2; goto _LL763; _LL763: _temp762=(( struct Cyc_Absyn_Region_s_struct*)
! _temp650)->f3; goto _LL691;} else{ goto _LL692;} _LL692: if(( unsigned int)
! _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Cut_s: 0){ _LL769: _temp768=((
! struct Cyc_Absyn_Cut_s_struct*) _temp650)->f1; goto _LL693;} else{ goto _LL694;}
! _LL694: if(( unsigned int) _temp650 >  1u?*(( int*) _temp650) ==  Cyc_Absyn_Splice_s:
! 0){ _LL771: _temp770=(( struct Cyc_Absyn_Splice_s_struct*) _temp650)->f1; goto
! _LL695;} else{ goto _LL651;} _LL653: Cyc_Absyndump_dump_semi(); goto _LL651;
! _LL655: Cyc_Absyndump_dumpexp( _temp696); Cyc_Absyndump_dump_semi(); goto _LL651;
! _LL657: if( Cyc_Absynpp_is_declaration( _temp700)){ Cyc_Absyndump_dump_char((
! int)'{'); Cyc_Absyndump_dumpstmt( _temp700); Cyc_Absyndump_dump_char(( int)'}');}
! else{ Cyc_Absyndump_dumpstmt( _temp700);} if( Cyc_Absynpp_is_declaration(
! _temp698)){ Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstmt( _temp698);
! Cyc_Absyndump_dump_char(( int)'}');} else{ Cyc_Absyndump_dumpstmt( _temp698);}
! goto _LL651; _LL659: Cyc_Absyndump_dump( _tag_arr("return;", sizeof(
! unsigned char), 8u)); goto _LL651; _LL661: Cyc_Absyndump_dump( _tag_arr("return",
  sizeof( unsigned char), 7u)); Cyc_Absyndump_dumpexp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp704)); Cyc_Absyndump_dump_semi(); goto _LL651; _LL663: Cyc_Absyndump_dump(
! _tag_arr("if(", sizeof( unsigned char), 4u)); Cyc_Absyndump_dumpexp( _temp710);
  Cyc_Absyndump_dump_nospace( _tag_arr("){", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpstmt(
! _temp708); Cyc_Absyndump_dump_char(( int)'}');{ void* _temp772=( void*) _temp706->r;
! _LL774: if( _temp772 == ( void*) Cyc_Absyn_Skip_s){ goto _LL775;} else{ goto
! _LL776;} _LL776: goto _LL777; _LL775: goto _LL773; _LL777: Cyc_Absyndump_dump(
! _tag_arr("else{", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpstmt( _temp706);
! Cyc_Absyndump_dump_char(( int)'}'); goto _LL773; _LL773:;} goto _LL651; _LL665:
  Cyc_Absyndump_dump( _tag_arr("while(", sizeof( unsigned char), 7u)); Cyc_Absyndump_dumpexp(
! _temp716); Cyc_Absyndump_dump_nospace( _tag_arr(") {", sizeof( unsigned char), 4u));
! Cyc_Absyndump_dumpstmt( _temp712); Cyc_Absyndump_dump_char(( int)'}'); goto
! _LL651; _LL667: Cyc_Absyndump_dump( _tag_arr("break;", sizeof( unsigned char), 7u));
! goto _LL651; _LL669: Cyc_Absyndump_dump( _tag_arr("continue;", sizeof(
! unsigned char), 10u)); goto _LL651; _LL671: Cyc_Absyndump_dump( _tag_arr("goto",
! sizeof( unsigned char), 5u)); Cyc_Absyndump_dump_str( _temp718); Cyc_Absyndump_dump_semi();
! goto _LL651; _LL673: Cyc_Absyndump_dump( _tag_arr("for(", sizeof( unsigned char),
! 5u)); Cyc_Absyndump_dumpexp( _temp730); Cyc_Absyndump_dump_semi(); Cyc_Absyndump_dumpexp(
! _temp728); Cyc_Absyndump_dump_semi(); Cyc_Absyndump_dumpexp( _temp724); Cyc_Absyndump_dump_nospace(
! _tag_arr("){", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpstmt( _temp720);
! Cyc_Absyndump_dump_char(( int)'}'); goto _LL651; _LL675: Cyc_Absyndump_dump(
  _tag_arr("switch(", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumpexp(
! _temp734); Cyc_Absyndump_dump_nospace( _tag_arr("){", sizeof( unsigned char), 3u));
! Cyc_Absyndump_dumpswitchclauses( _temp732); Cyc_Absyndump_dump_char(( int)'}');
! goto _LL651; _LL677: Cyc_Absyndump_dumpdecl( _temp738); Cyc_Absyndump_dumpstmt(
! _temp736); goto _LL651; _LL679: if( Cyc_Absynpp_is_declaration( _temp740)){ Cyc_Absyndump_dump_str(
! _temp742); Cyc_Absyndump_dump_nospace( _tag_arr(": {", sizeof( unsigned char), 4u));
! Cyc_Absyndump_dumpstmt( _temp740); Cyc_Absyndump_dump_char(( int)'}');} else{
! Cyc_Absyndump_dump_str( _temp742); Cyc_Absyndump_dump_char(( int)':'); Cyc_Absyndump_dumpstmt(
! _temp740);} goto _LL651; _LL681: Cyc_Absyndump_dump( _tag_arr("do {", sizeof(
! unsigned char), 5u)); Cyc_Absyndump_dumpstmt( _temp748); Cyc_Absyndump_dump_nospace(
  _tag_arr("} while (", sizeof( unsigned char), 10u)); Cyc_Absyndump_dumpexp(
! _temp746); Cyc_Absyndump_dump_nospace( _tag_arr(");", sizeof( unsigned char), 3u));
! goto _LL651; _LL683: Cyc_Absyndump_dump( _tag_arr("switch \"C\" (", sizeof(
! unsigned char), 13u)); Cyc_Absyndump_dumpexp( _temp752); Cyc_Absyndump_dump_nospace(
! _tag_arr("){", sizeof( unsigned char), 3u)); for( 0; _temp750 !=  0; _temp750=((
! struct Cyc_List_List*) _check_null( _temp750))->tl){ struct Cyc_Absyn_SwitchC_clause
! _temp780; struct Cyc_Absyn_Stmt* _temp781; struct Cyc_Absyn_Exp* _temp783;
! struct Cyc_Absyn_SwitchC_clause* _temp778=( struct Cyc_Absyn_SwitchC_clause*)((
! struct Cyc_List_List*) _check_null( _temp750))->hd; _temp780=* _temp778; _LL784:
! _temp783= _temp780.cnst_exp; goto _LL782; _LL782: _temp781= _temp780.body; goto
! _LL779; _LL779: if( _temp783 ==  0){ Cyc_Absyndump_dump( _tag_arr("default: ",
  sizeof( unsigned char), 10u));} else{ Cyc_Absyndump_dump( _tag_arr("case ",
  sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpexp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp783)); Cyc_Absyndump_dump_char(( int)':');} Cyc_Absyndump_dumpstmt(
! _temp781);} Cyc_Absyndump_dump_char(( int)'}'); goto _LL651; _LL685: Cyc_Absyndump_dump(
! _tag_arr("fallthru;", sizeof( unsigned char), 10u)); goto _LL651; _LL687: Cyc_Absyndump_dump(
  _tag_arr("fallthru(", sizeof( unsigned char), 10u)); Cyc_Absyndump_dumpexps_prec(
! 20, _temp756); Cyc_Absyndump_dump_nospace( _tag_arr(");", sizeof( unsigned char),
! 3u)); goto _LL651; _LL689: Cyc_Absyndump_dump( _tag_arr("try", sizeof(
! unsigned char), 4u)); Cyc_Absyndump_dumpstmt( _temp760); Cyc_Absyndump_dump(
  _tag_arr("catch {", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumpswitchclauses(
! _temp758); Cyc_Absyndump_dump_char(( int)'}'); goto _LL651; _LL691: Cyc_Absyndump_dump(
  _tag_arr("region<", sizeof( unsigned char), 8u)); Cyc_Absyndump_dumptvar(
! _temp766); Cyc_Absyndump_dump( _tag_arr("> ", sizeof( unsigned char), 3u)); Cyc_Absyndump_dumpqvar(
! _temp764->name); Cyc_Absyndump_dump( _tag_arr("{", sizeof( unsigned char), 2u));
! Cyc_Absyndump_dumpstmt( _temp762); Cyc_Absyndump_dump( _tag_arr("}", sizeof(
! unsigned char), 2u)); goto _LL651; _LL693: Cyc_Absyndump_dump( _tag_arr("cut",
! sizeof( unsigned char), 4u)); Cyc_Absyndump_dumpstmt( _temp768); goto _LL651;
! _LL695: Cyc_Absyndump_dump( _tag_arr("splice", sizeof( unsigned char), 7u)); Cyc_Absyndump_dumpstmt(
! _temp770); goto _LL651; _LL651:;} struct _tuple9{ struct Cyc_List_List* f1;
  struct Cyc_Absyn_Pat* f2; } ; void Cyc_Absyndump_dumpdp( struct _tuple9* dp){
  Cyc_Absyndump_egroup( Cyc_Absyndump_dumpdesignator,(* dp).f1, _tag_arr("",
  sizeof( unsigned char), 1u), _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=",
  sizeof( unsigned char), 2u)); Cyc_Absyndump_dumppat((* dp).f2);} void Cyc_Absyndump_dumppat(
! struct Cyc_Absyn_Pat* p){ void* _temp785=( void*) p->r; int _temp819; void*
! _temp821; int _temp823; void* _temp825; unsigned char _temp827; struct
! _tagged_arr _temp829; struct Cyc_Absyn_Vardecl* _temp831; struct Cyc_List_List*
! _temp833; struct Cyc_Absyn_Pat* _temp835; struct Cyc_Absyn_Vardecl* _temp837;
! struct _tuple0* _temp839; struct Cyc_List_List* _temp841; struct Cyc_List_List*
! _temp843; struct _tuple0* _temp845; struct Cyc_List_List* _temp847; struct Cyc_List_List*
! _temp849; struct _tuple0* _temp851; struct Cyc_List_List* _temp853; struct Cyc_List_List*
! _temp855; struct Cyc_Absyn_Structdecl* _temp857; struct Cyc_List_List* _temp859;
! struct Cyc_List_List* _temp861; struct Cyc_Absyn_Tunionfield* _temp863; struct
! Cyc_Absyn_Enumfield* _temp865; _LL787: if( _temp785 == ( void*) Cyc_Absyn_Wild_p){
! goto _LL788;} else{ goto _LL789;} _LL789: if( _temp785 == ( void*) Cyc_Absyn_Null_p){
! goto _LL790;} else{ goto _LL791;} _LL791: if(( unsigned int) _temp785 >  2u?*((
! int*) _temp785) ==  Cyc_Absyn_Int_p: 0){ _LL822: _temp821=( void*)(( struct Cyc_Absyn_Int_p_struct*)
! _temp785)->f1; if( _temp821 == ( void*) Cyc_Absyn_Signed){ goto _LL820;} else{
! goto _LL793;} _LL820: _temp819=(( struct Cyc_Absyn_Int_p_struct*) _temp785)->f2;
! goto _LL792;} else{ goto _LL793;} _LL793: if(( unsigned int) _temp785 >  2u?*((
! int*) _temp785) ==  Cyc_Absyn_Int_p: 0){ _LL826: _temp825=( void*)(( struct Cyc_Absyn_Int_p_struct*)
! _temp785)->f1; if( _temp825 == ( void*) Cyc_Absyn_Unsigned){ goto _LL824;} else{
! goto _LL795;} _LL824: _temp823=(( struct Cyc_Absyn_Int_p_struct*) _temp785)->f2;
! goto _LL794;} else{ goto _LL795;} _LL795: if(( unsigned int) _temp785 >  2u?*((
! int*) _temp785) ==  Cyc_Absyn_Char_p: 0){ _LL828: _temp827=(( struct Cyc_Absyn_Char_p_struct*)
! _temp785)->f1; goto _LL796;} else{ goto _LL797;} _LL797: if(( unsigned int)
! _temp785 >  2u?*(( int*) _temp785) ==  Cyc_Absyn_Float_p: 0){ _LL830: _temp829=((
! struct Cyc_Absyn_Float_p_struct*) _temp785)->f1; goto _LL798;} else{ goto _LL799;}
! _LL799: if(( unsigned int) _temp785 >  2u?*(( int*) _temp785) ==  Cyc_Absyn_Var_p:
! 0){ _LL832: _temp831=(( struct Cyc_Absyn_Var_p_struct*) _temp785)->f1; goto
! _LL800;} else{ goto _LL801;} _LL801: if(( unsigned int) _temp785 >  2u?*(( int*)
! _temp785) ==  Cyc_Absyn_Tuple_p: 0){ _LL834: _temp833=(( struct Cyc_Absyn_Tuple_p_struct*)
! _temp785)->f1; goto _LL802;} else{ goto _LL803;} _LL803: if(( unsigned int)
! _temp785 >  2u?*(( int*) _temp785) ==  Cyc_Absyn_Pointer_p: 0){ _LL836: _temp835=((
! struct Cyc_Absyn_Pointer_p_struct*) _temp785)->f1; goto _LL804;} else{ goto
! _LL805;} _LL805: if(( unsigned int) _temp785 >  2u?*(( int*) _temp785) ==  Cyc_Absyn_Reference_p:
! 0){ _LL838: _temp837=(( struct Cyc_Absyn_Reference_p_struct*) _temp785)->f1;
! goto _LL806;} else{ goto _LL807;} _LL807: if(( unsigned int) _temp785 >  2u?*((
! int*) _temp785) ==  Cyc_Absyn_UnknownId_p: 0){ _LL840: _temp839=(( struct Cyc_Absyn_UnknownId_p_struct*)
! _temp785)->f1; goto _LL808;} else{ goto _LL809;} _LL809: if(( unsigned int)
! _temp785 >  2u?*(( int*) _temp785) ==  Cyc_Absyn_UnknownCall_p: 0){ _LL846:
! _temp845=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp785)->f1; goto _LL844;
! _LL844: _temp843=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp785)->f2; goto
! _LL842; _LL842: _temp841=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp785)->f3;
! goto _LL810;} else{ goto _LL811;} _LL811: if(( unsigned int) _temp785 >  2u?*((
! int*) _temp785) ==  Cyc_Absyn_UnknownFields_p: 0){ _LL852: _temp851=(( struct
! Cyc_Absyn_UnknownFields_p_struct*) _temp785)->f1; goto _LL850; _LL850: _temp849=((
! struct Cyc_Absyn_UnknownFields_p_struct*) _temp785)->f2; goto _LL848; _LL848:
! _temp847=(( struct Cyc_Absyn_UnknownFields_p_struct*) _temp785)->f3; goto _LL812;}
! else{ goto _LL813;} _LL813: if(( unsigned int) _temp785 >  2u?*(( int*) _temp785)
! ==  Cyc_Absyn_Struct_p: 0){ _LL858: _temp857=(( struct Cyc_Absyn_Struct_p_struct*)
! _temp785)->f1; goto _LL856; _LL856: _temp855=(( struct Cyc_Absyn_Struct_p_struct*)
! _temp785)->f3; goto _LL854; _LL854: _temp853=(( struct Cyc_Absyn_Struct_p_struct*)
! _temp785)->f4; goto _LL814;} else{ goto _LL815;} _LL815: if(( unsigned int)
! _temp785 >  2u?*(( int*) _temp785) ==  Cyc_Absyn_Tunion_p: 0){ _LL864: _temp863=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp785)->f2; goto _LL862; _LL862: _temp861=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp785)->f3; goto _LL860; _LL860: _temp859=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp785)->f4; goto _LL816;} else{ goto
! _LL817;} _LL817: if(( unsigned int) _temp785 >  2u?*(( int*) _temp785) ==  Cyc_Absyn_Enum_p:
! 0){ _LL866: _temp865=(( struct Cyc_Absyn_Enum_p_struct*) _temp785)->f2; goto
! _LL818;} else{ goto _LL786;} _LL788: Cyc_Absyndump_dump_char(( int)'_'); goto
! _LL786; _LL790: Cyc_Absyndump_dump( _tag_arr("NULL", sizeof( unsigned char), 5u));
! goto _LL786; _LL792: Cyc_Absyndump_dump(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp868; _temp868.tag= Cyc_Std_Int_pa; _temp868.f1=( int)(( unsigned int)
! _temp819);{ void* _temp867[ 1u]={& _temp868}; Cyc_Std_aprintf( _tag_arr("%d",
! sizeof( unsigned char), 3u), _tag_arr( _temp867, sizeof( void*), 1u));}})); goto
! _LL786; _LL794: Cyc_Absyndump_dump(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp870; _temp870.tag= Cyc_Std_Int_pa; _temp870.f1=( unsigned int) _temp823;{
! void* _temp869[ 1u]={& _temp870}; Cyc_Std_aprintf( _tag_arr("%u", sizeof(
! unsigned char), 3u), _tag_arr( _temp869, sizeof( void*), 1u));}})); goto _LL786;
! _LL796: Cyc_Absyndump_dump( _tag_arr("'", sizeof( unsigned char), 2u)); Cyc_Absyndump_dump_nospace(
! Cyc_Absynpp_char_escape( _temp827)); Cyc_Absyndump_dump_nospace( _tag_arr("'",
! sizeof( unsigned char), 2u)); goto _LL786; _LL798: Cyc_Absyndump_dump( _temp829);
! goto _LL786; _LL800: Cyc_Absyndump_dumpqvar( _temp831->name); goto _LL786;
! _LL802:(( void(*)( void(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumppat, _temp833, _tag_arr("$(", sizeof( unsigned char), 3u),
  _tag_arr(")", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL786; _LL804: Cyc_Absyndump_dump( _tag_arr("&", sizeof(
! unsigned char), 2u)); Cyc_Absyndump_dumppat( _temp835); goto _LL786; _LL806: Cyc_Absyndump_dump(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpqvar( _temp837->name);
! goto _LL786; _LL808: Cyc_Absyndump_dumpqvar( _temp839); goto _LL786; _LL810: Cyc_Absyndump_dumpqvar(
! _temp845); Cyc_Absyndump_dumptvars( _temp843);(( void(*)( void(* f)( struct Cyc_Absyn_Pat*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumppat, _temp841,
  _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof( unsigned char),
! 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL786; _LL812: Cyc_Absyndump_dumpqvar(
! _temp851); Cyc_Absyndump_dumptvars( _temp849);(( void(*)( void(* f)( struct
  _tuple9*), struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr
  end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumpdp,
! _temp847, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL786;
! _LL814: if( _temp857->name !=  0){ Cyc_Absyndump_dumpqvar(( struct _tuple0*)((
! struct Cyc_Core_Opt*) _check_null( _temp857->name))->v);} Cyc_Absyndump_dumptvars(
! _temp855);(( void(*)( void(* f)( struct _tuple9*), struct Cyc_List_List* l,
  struct _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)(
! Cyc_Absyndump_dumpdp, _temp853, _tag_arr("{", sizeof( unsigned char), 2u),
  _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
! 2u)); goto _LL786; _LL816: Cyc_Absyndump_dumpqvar( _temp863->name); Cyc_Absyndump_dumptvars(
! _temp861); if( _temp859 !=  0){(( void(*)( void(* f)( struct Cyc_Absyn_Pat*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dumppat, _temp859,
  _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof( unsigned char),
! 2u), _tag_arr(",", sizeof( unsigned char), 2u));} goto _LL786; _LL818: Cyc_Absyndump_dumpqvar(
! _temp865->name); goto _LL786; _LL786:;} void Cyc_Absyndump_dumptunionfield(
  struct Cyc_Absyn_Tunionfield* ef){ Cyc_Absyndump_dumpqvar( ef->name); if( ef->typs
  !=  0){ Cyc_Absyndump_dumpargs( ef->typs);}} void Cyc_Absyndump_dumptunionfields(
  struct Cyc_List_List* fields){(( void(*)( void(* f)( struct Cyc_Absyn_Tunionfield*),
***************
*** 1673,2006 ****
  struct Cyc_List_List* l, struct _tagged_arr sep)) Cyc_Absyndump_dump_sep)( Cyc_Absyndump_dumpenumfield,
  fields, _tag_arr(",", sizeof( unsigned char), 2u));} void Cyc_Absyndump_dumpstructfields(
  struct Cyc_List_List* fields){ for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
! _check_null( fields))->tl){ struct Cyc_Absyn_Structfield _temp888; struct Cyc_List_List*
! _temp889; struct Cyc_Absyn_Exp* _temp891; void* _temp893; struct Cyc_Absyn_Tqual
! _temp895; struct _tagged_arr* _temp897; struct Cyc_Absyn_Structfield* _temp886=(
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fields))->hd;
! _temp888=* _temp886; _LL898: _temp897= _temp888.name; goto _LL896; _LL896:
! _temp895= _temp888.tq; goto _LL894; _LL894: _temp893=( void*) _temp888.type;
! goto _LL892; _LL892: _temp891= _temp888.width; goto _LL890; _LL890: _temp889=
! _temp888.attributes; goto _LL887; _LL887:(( void(*)( struct Cyc_Absyn_Tqual,
  void*, void(* f)( struct _tagged_arr*), struct _tagged_arr*)) Cyc_Absyndump_dumptqtd)(
! _temp895, _temp893, Cyc_Absyndump_dump_str, _temp897); Cyc_Absyndump_dumpatts(
! _temp889); if( _temp891 !=  0){ Cyc_Absyndump_dump_char(( int)':'); Cyc_Absyndump_dumpexp((
! struct Cyc_Absyn_Exp*) _check_null( _temp891));} Cyc_Absyndump_dump_semi();}}
  void Cyc_Absyndump_dumptypedefname( struct Cyc_Absyn_Typedefdecl* td){ Cyc_Absyndump_dumpqvar(
  td->name); Cyc_Absyndump_dumptvars( td->tvs);} static void Cyc_Absyndump_dump_atts_qvar(
  struct Cyc_Absyn_Fndecl* fd){ Cyc_Absyndump_dumpatts( fd->attributes); Cyc_Absyndump_dumpqvar(
  fd->name);} struct _tuple10{ void* f1; struct _tuple0* f2; } ; static void Cyc_Absyndump_dump_callconv_qvar(
! struct _tuple10* pr){{ void* _temp899=(* pr).f1; _LL901: if( _temp899 == ( void*)
! Cyc_Absyn_Unused_att){ goto _LL902;} else{ goto _LL903;} _LL903: if( _temp899 == (
! void*) Cyc_Absyn_Stdcall_att){ goto _LL904;} else{ goto _LL905;} _LL905: if(
! _temp899 == ( void*) Cyc_Absyn_Cdecl_att){ goto _LL906;} else{ goto _LL907;}
! _LL907: if( _temp899 == ( void*) Cyc_Absyn_Fastcall_att){ goto _LL908;} else{
! goto _LL909;} _LL909: goto _LL910; _LL902: goto _LL900; _LL904: Cyc_Absyndump_dump(
! _tag_arr("_stdcall", sizeof( unsigned char), 9u)); goto _LL900; _LL906: Cyc_Absyndump_dump(
! _tag_arr("_cdecl", sizeof( unsigned char), 7u)); goto _LL900; _LL908: Cyc_Absyndump_dump(
! _tag_arr("_fastcall", sizeof( unsigned char), 10u)); goto _LL900; _LL910: goto
! _LL900; _LL900:;} Cyc_Absyndump_dumpqvar((* pr).f2);} static void Cyc_Absyndump_dump_callconv_fdqvar(
  struct Cyc_Absyn_Fndecl* fd){ Cyc_Absyndump_dump_callconv( fd->attributes); Cyc_Absyndump_dumpqvar(
  fd->name);} static void Cyc_Absyndump_dumpids( struct Cyc_List_List* vds){ for(
  0; vds !=  0; vds=(( struct Cyc_List_List*) _check_null( vds))->tl){ Cyc_Absyndump_dumpqvar(((
  struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null( vds))->hd)->name);
  if((( struct Cyc_List_List*) _check_null( vds))->tl !=  0){ Cyc_Absyndump_dump_char((
  int)',');}}} void Cyc_Absyndump_dumpdecl( struct Cyc_Absyn_Decl* d){ void*
! _temp911=( void*) d->r; struct Cyc_Absyn_Fndecl* _temp937; struct Cyc_Absyn_Structdecl*
! _temp939; struct Cyc_Absyn_Uniondecl* _temp941; struct Cyc_Absyn_Vardecl*
! _temp943; struct Cyc_Absyn_Vardecl _temp945; struct Cyc_List_List* _temp946;
! struct Cyc_Absyn_Exp* _temp948; void* _temp950; struct Cyc_Absyn_Tqual _temp952;
! struct _tuple0* _temp954; void* _temp956; struct Cyc_Absyn_Tuniondecl* _temp958;
! struct Cyc_Absyn_Tuniondecl _temp960; int _temp961; struct Cyc_Core_Opt*
! _temp963; struct Cyc_List_List* _temp965; struct _tuple0* _temp967; void*
! _temp969; struct Cyc_Absyn_Enumdecl* _temp971; struct Cyc_Absyn_Enumdecl
! _temp973; struct Cyc_Core_Opt* _temp974; struct _tuple0* _temp976; void*
! _temp978; struct Cyc_Absyn_Exp* _temp980; struct Cyc_Absyn_Pat* _temp982; struct
! Cyc_List_List* _temp984; struct Cyc_Absyn_Typedefdecl* _temp986; struct Cyc_List_List*
! _temp988; struct _tagged_arr* _temp990; struct Cyc_List_List* _temp992; struct
! _tuple0* _temp994; struct Cyc_List_List* _temp996; _LL913: if(*(( int*) _temp911)
! ==  Cyc_Absyn_Fn_d){ _LL938: _temp937=(( struct Cyc_Absyn_Fn_d_struct*) _temp911)->f1;
! goto _LL914;} else{ goto _LL915;} _LL915: if(*(( int*) _temp911) ==  Cyc_Absyn_Struct_d){
! _LL940: _temp939=(( struct Cyc_Absyn_Struct_d_struct*) _temp911)->f1; goto
! _LL916;} else{ goto _LL917;} _LL917: if(*(( int*) _temp911) ==  Cyc_Absyn_Union_d){
! _LL942: _temp941=(( struct Cyc_Absyn_Union_d_struct*) _temp911)->f1; goto _LL918;}
! else{ goto _LL919;} _LL919: if(*(( int*) _temp911) ==  Cyc_Absyn_Var_d){ _LL944:
! _temp943=(( struct Cyc_Absyn_Var_d_struct*) _temp911)->f1; _temp945=* _temp943;
! _LL957: _temp956=( void*) _temp945.sc; goto _LL955; _LL955: _temp954= _temp945.name;
! goto _LL953; _LL953: _temp952= _temp945.tq; goto _LL951; _LL951: _temp950=( void*)
! _temp945.type; goto _LL949; _LL949: _temp948= _temp945.initializer; goto _LL947;
! _LL947: _temp946= _temp945.attributes; goto _LL920;} else{ goto _LL921;} _LL921:
! if(*(( int*) _temp911) ==  Cyc_Absyn_Tunion_d){ _LL959: _temp958=(( struct Cyc_Absyn_Tunion_d_struct*)
! _temp911)->f1; _temp960=* _temp958; _LL970: _temp969=( void*) _temp960.sc; goto
! _LL968; _LL968: _temp967= _temp960.name; goto _LL966; _LL966: _temp965= _temp960.tvs;
! goto _LL964; _LL964: _temp963= _temp960.fields; goto _LL962; _LL962: _temp961=
! _temp960.is_xtunion; goto _LL922;} else{ goto _LL923;} _LL923: if(*(( int*)
! _temp911) ==  Cyc_Absyn_Enum_d){ _LL972: _temp971=(( struct Cyc_Absyn_Enum_d_struct*)
! _temp911)->f1; _temp973=* _temp971; _LL979: _temp978=( void*) _temp973.sc; goto
! _LL977; _LL977: _temp976= _temp973.name; goto _LL975; _LL975: _temp974= _temp973.fields;
! goto _LL924;} else{ goto _LL925;} _LL925: if(*(( int*) _temp911) ==  Cyc_Absyn_Let_d){
! _LL983: _temp982=(( struct Cyc_Absyn_Let_d_struct*) _temp911)->f1; goto _LL981;
! _LL981: _temp980=(( struct Cyc_Absyn_Let_d_struct*) _temp911)->f4; goto _LL926;}
! else{ goto _LL927;} _LL927: if(*(( int*) _temp911) ==  Cyc_Absyn_Letv_d){ _LL985:
! _temp984=(( struct Cyc_Absyn_Letv_d_struct*) _temp911)->f1; goto _LL928;} else{
! goto _LL929;} _LL929: if(*(( int*) _temp911) ==  Cyc_Absyn_Typedef_d){ _LL987:
! _temp986=(( struct Cyc_Absyn_Typedef_d_struct*) _temp911)->f1; goto _LL930;}
! else{ goto _LL931;} _LL931: if(*(( int*) _temp911) ==  Cyc_Absyn_Namespace_d){
! _LL991: _temp990=(( struct Cyc_Absyn_Namespace_d_struct*) _temp911)->f1; goto
! _LL989; _LL989: _temp988=(( struct Cyc_Absyn_Namespace_d_struct*) _temp911)->f2;
! goto _LL932;} else{ goto _LL933;} _LL933: if(*(( int*) _temp911) ==  Cyc_Absyn_Using_d){
! _LL995: _temp994=(( struct Cyc_Absyn_Using_d_struct*) _temp911)->f1; goto _LL993;
! _LL993: _temp992=(( struct Cyc_Absyn_Using_d_struct*) _temp911)->f2; goto _LL934;}
! else{ goto _LL935;} _LL935: if(*(( int*) _temp911) ==  Cyc_Absyn_ExternC_d){
! _LL997: _temp996=(( struct Cyc_Absyn_ExternC_d_struct*) _temp911)->f1; goto
! _LL936;} else{ goto _LL912;} _LL914: if( Cyc_Absyndump_to_VC){ Cyc_Absyndump_dumpatts(
! _temp937->attributes);} if( _temp937->is_inline){ if( Cyc_Absyndump_to_VC){ Cyc_Absyndump_dump(
  _tag_arr("__inline", sizeof( unsigned char), 9u));} else{ Cyc_Absyndump_dump(
  _tag_arr("inline", sizeof( unsigned char), 7u));}} Cyc_Absyndump_dumpscope((
! void*) _temp937->sc);{ void* t=( void*)({ struct Cyc_Absyn_FnType_struct*
! _temp999=( struct Cyc_Absyn_FnType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct));
! _temp999[ 0]=({ struct Cyc_Absyn_FnType_struct _temp1000; _temp1000.tag= Cyc_Absyn_FnType;
! _temp1000.f1=({ struct Cyc_Absyn_FnInfo _temp1001; _temp1001.tvars= _temp937->tvs;
! _temp1001.effect= _temp937->effect; _temp1001.ret_typ=( void*)(( void*) _temp937->ret_type);
! _temp1001.args=(( struct Cyc_List_List*(*)( struct _tuple1*(* f)( struct _tuple3*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_arg_mk_opt, _temp937->args);
! _temp1001.c_varargs= _temp937->c_varargs; _temp1001.cyc_varargs= _temp937->cyc_varargs;
! _temp1001.rgn_po= _temp937->rgn_po; _temp1001.attributes= 0; _temp1001;});
! _temp1000;}); _temp999;});(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)(
! struct Cyc_Absyn_Fndecl*), struct Cyc_Absyn_Fndecl*)) Cyc_Absyndump_dumptqtd)(({
! struct Cyc_Absyn_Tqual _temp998; _temp998.q_const= 0; _temp998.q_volatile= 0;
! _temp998.q_restrict= 0; _temp998;}), t, Cyc_Absyndump_to_VC? Cyc_Absyndump_dump_callconv_fdqvar:
! Cyc_Absyndump_dump_atts_qvar, _temp937); Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstmt(
! _temp937->body); Cyc_Absyndump_dump_char(( int)'}'); goto _LL912;} _LL916: Cyc_Absyndump_dumpscope((
! void*) _temp939->sc); Cyc_Absyndump_dump( _tag_arr("struct", sizeof(
! unsigned char), 7u)); if( _temp939->name !=  0){ Cyc_Absyndump_dumpqvar(( struct
! _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp939->name))->v);} Cyc_Absyndump_dumptvars(
! _temp939->tvs); if( _temp939->fields ==  0){ Cyc_Absyndump_dump_semi();} else{
  Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp939->fields))->v); Cyc_Absyndump_dump(
! _tag_arr("}", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpatts( _temp939->attributes);
! Cyc_Absyndump_dump( _tag_arr(";", sizeof( unsigned char), 2u));} goto _LL912;
! _LL918: Cyc_Absyndump_dumpscope(( void*) _temp941->sc); Cyc_Absyndump_dump(
! _tag_arr("union", sizeof( unsigned char), 6u)); if( _temp941->name !=  0){ Cyc_Absyndump_dumpqvar((
! struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp941->name))->v);} Cyc_Absyndump_dumptvars(
! _temp941->tvs); if( _temp941->fields ==  0){ Cyc_Absyndump_dump_semi();} else{
  Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp941->fields))->v); Cyc_Absyndump_dump(
! _tag_arr("}", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpatts( _temp941->attributes);
! Cyc_Absyndump_dump( _tag_arr(";", sizeof( unsigned char), 2u));} goto _LL912;
! _LL920: if( Cyc_Absyndump_to_VC){ Cyc_Absyndump_dumpatts( _temp946); Cyc_Absyndump_dumpscope(
! _temp956);{ struct Cyc_List_List* _temp1004; void* _temp1006; struct Cyc_Absyn_Tqual
! _temp1008; struct _tuple4 _temp1002= Cyc_Absynpp_to_tms( _temp952, _temp950);
! _LL1009: _temp1008= _temp1002.f1; goto _LL1007; _LL1007: _temp1006= _temp1002.f2;
! goto _LL1005; _LL1005: _temp1004= _temp1002.f3; goto _LL1003; _LL1003: { void*
! call_conv=( void*) Cyc_Absyn_Unused_att;{ struct Cyc_List_List* tms2= _temp1004;
! for( 0; tms2 !=  0; tms2=(( struct Cyc_List_List*) _check_null( tms2))->tl){
! void* _temp1010=( void*)(( struct Cyc_List_List*) _check_null( tms2))->hd;
! struct Cyc_List_List* _temp1016; _LL1012: if(( unsigned int) _temp1010 >  1u?*((
! int*) _temp1010) ==  Cyc_Absyn_Attributes_mod: 0){ _LL1017: _temp1016=(( struct
! Cyc_Absyn_Attributes_mod_struct*) _temp1010)->f2; goto _LL1013;} else{ goto
! _LL1014;} _LL1014: goto _LL1015; _LL1013: for( 0; _temp1016 !=  0; _temp1016=((
! struct Cyc_List_List*) _check_null( _temp1016))->tl){ void* _temp1018=( void*)((
! struct Cyc_List_List*) _check_null( _temp1016))->hd; _LL1020: if( _temp1018 == (
! void*) Cyc_Absyn_Stdcall_att){ goto _LL1021;} else{ goto _LL1022;} _LL1022: if(
! _temp1018 == ( void*) Cyc_Absyn_Cdecl_att){ goto _LL1023;} else{ goto _LL1024;}
! _LL1024: if( _temp1018 == ( void*) Cyc_Absyn_Fastcall_att){ goto _LL1025;} else{
! goto _LL1026;} _LL1026: goto _LL1027; _LL1021: call_conv=( void*) Cyc_Absyn_Stdcall_att;
! goto _LL1019; _LL1023: call_conv=( void*) Cyc_Absyn_Cdecl_att; goto _LL1019;
! _LL1025: call_conv=( void*) Cyc_Absyn_Fastcall_att; goto _LL1019; _LL1027: goto
! _LL1019; _LL1019:;} goto _LL1011; _LL1015: goto _LL1011; _LL1011:;}} Cyc_Absyndump_dumptq(
! _temp1008); Cyc_Absyndump_dumpntyp( _temp1006);{ struct _tuple10 _temp1028=({
! struct _tuple10 _temp1029; _temp1029.f1= call_conv; _temp1029.f2= _temp954;
! _temp1029;});(( void(*)( struct Cyc_List_List* tms, void(* f)( struct _tuple10*),
! struct _tuple10* a)) Cyc_Absyndump_dumptms)( Cyc_List_imp_rev( _temp1004), Cyc_Absyndump_dump_callconv_qvar,&
! _temp1028);}}}} else{ Cyc_Absyndump_dumpscope( _temp956);(( void(*)( struct Cyc_Absyn_Tqual,
! void*, void(* f)( struct _tuple0*), struct _tuple0*)) Cyc_Absyndump_dumptqtd)(
! _temp952, _temp950, Cyc_Absyndump_dumpqvar, _temp954); Cyc_Absyndump_dumpatts(
! _temp946);} if( _temp948 !=  0){ Cyc_Absyndump_dump_char(( int)'='); Cyc_Absyndump_dumpexp((
! struct Cyc_Absyn_Exp*) _check_null( _temp948));} Cyc_Absyndump_dump_semi(); goto
! _LL912; _LL922: Cyc_Absyndump_dumpscope( _temp969); if( _temp961){ Cyc_Absyndump_dump(
! _tag_arr("xtunion ", sizeof( unsigned char), 9u));} else{ Cyc_Absyndump_dump(
! _tag_arr("tunion ", sizeof( unsigned char), 8u));} Cyc_Absyndump_dumpqvar(
! _temp967); Cyc_Absyndump_dumptvars( _temp965); if( _temp963 ==  0){ Cyc_Absyndump_dump_semi();}
! else{ Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumptunionfields((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp963))->v); Cyc_Absyndump_dump_nospace(
! _tag_arr("};", sizeof( unsigned char), 3u));} goto _LL912; _LL924: Cyc_Absyndump_dumpscope(
! _temp978); Cyc_Absyndump_dump( _tag_arr("enum ", sizeof( unsigned char), 6u));
! Cyc_Absyndump_dumpqvar( _temp976); if( _temp974 ==  0){ Cyc_Absyndump_dump_semi();}
! else{ Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpenumfields(( struct
! Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp974))->v); Cyc_Absyndump_dump_nospace(
! _tag_arr("};", sizeof( unsigned char), 3u));} return; _LL926: Cyc_Absyndump_dump(
! _tag_arr("let", sizeof( unsigned char), 4u)); Cyc_Absyndump_dumppat( _temp982);
! Cyc_Absyndump_dump_char(( int)'='); Cyc_Absyndump_dumpexp( _temp980); Cyc_Absyndump_dump_semi();
! goto _LL912; _LL928: Cyc_Absyndump_dump( _tag_arr("let ", sizeof( unsigned char),
! 5u)); Cyc_Absyndump_dumpids( _temp984); Cyc_Absyndump_dump_semi(); goto _LL912;
! _LL930: if( ! Cyc_Absyndump_expand_typedefs){ Cyc_Absyndump_dump( _tag_arr("typedef",
  sizeof( unsigned char), 8u));(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)(
  struct Cyc_Absyn_Typedefdecl*), struct Cyc_Absyn_Typedefdecl*)) Cyc_Absyndump_dumptqtd)(({
! struct Cyc_Absyn_Tqual _temp1030; _temp1030.q_const= 0; _temp1030.q_volatile= 0;
! _temp1030.q_restrict= 0; _temp1030;}),( void*) _temp986->defn, Cyc_Absyndump_dumptypedefname,
! _temp986); Cyc_Absyndump_dump_semi();} goto _LL912; _LL932: Cyc_Absyndump_dump(
  _tag_arr("namespace", sizeof( unsigned char), 10u)); Cyc_Absyndump_dump_str(
! _temp990); Cyc_Absyndump_dump_char(( int)'{'); for( 0; _temp988 !=  0; _temp988=((
! struct Cyc_List_List*) _check_null( _temp988))->tl){ Cyc_Absyndump_dumpdecl((
! struct Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( _temp988))->hd);}
! Cyc_Absyndump_dump_char(( int)'}'); goto _LL912; _LL934: Cyc_Absyndump_dump(
! _tag_arr("using", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpqvar( _temp994);
! Cyc_Absyndump_dump_char(( int)'{'); for( 0; _temp992 !=  0; _temp992=(( struct
! Cyc_List_List*) _check_null( _temp992))->tl){ Cyc_Absyndump_dumpdecl(( struct
! Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( _temp992))->hd);} Cyc_Absyndump_dump_char((
! int)'}'); goto _LL912; _LL936: Cyc_Absyndump_dump( _tag_arr("extern \"C\" {",
! sizeof( unsigned char), 13u)); for( 0; _temp996 !=  0; _temp996=(( struct Cyc_List_List*)
! _check_null( _temp996))->tl){ Cyc_Absyndump_dumpdecl(( struct Cyc_Absyn_Decl*)((
! struct Cyc_List_List*) _check_null( _temp996))->hd);} Cyc_Absyndump_dump_char((
! int)'}'); goto _LL912; _LL912:;} static void Cyc_Absyndump_dump_upperbound(
  struct Cyc_Absyn_Exp* e){ unsigned int i= Cyc_Evexp_eval_const_uint_exp( e); if(
  i !=  1){ Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpexp( e); Cyc_Absyndump_dump_char((
  int)'}');}} void Cyc_Absyndump_dumptms( struct Cyc_List_List* tms, void(* f)(
! void*), void* a){ if( tms ==  0){ f( a); return;}{ void* _temp1031=( void*)((
! struct Cyc_List_List*) _check_null( tms))->hd; struct Cyc_Absyn_Tqual _temp1049;
! void* _temp1051; void* _temp1053; struct Cyc_Absyn_Exp* _temp1055; struct Cyc_Absyn_Tqual
! _temp1057; void* _temp1059; void* _temp1061; struct Cyc_Absyn_Exp* _temp1063;
! struct Cyc_Absyn_Tqual _temp1065; void* _temp1067; void* _temp1069; struct Cyc_Absyn_Tqual
! _temp1071; void* _temp1073; struct Cyc_Absyn_Tvar* _temp1075; void* _temp1077;
! struct Cyc_Absyn_Exp* _temp1079; struct Cyc_Absyn_Tqual _temp1081; void*
! _temp1083; struct Cyc_Absyn_Tvar* _temp1085; void* _temp1087; struct Cyc_Absyn_Exp*
! _temp1089; struct Cyc_Absyn_Tqual _temp1091; void* _temp1093; struct Cyc_Absyn_Tvar*
! _temp1095; void* _temp1097; _LL1033: if(( unsigned int) _temp1031 >  1u?*(( int*)
! _temp1031) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1054: _temp1053=( void*)(( struct
! Cyc_Absyn_Pointer_mod_struct*) _temp1031)->f1; if(( unsigned int) _temp1053 >  1u?*((
! int*) _temp1053) ==  Cyc_Absyn_Nullable_ps: 0){ _LL1056: _temp1055=(( struct Cyc_Absyn_Nullable_ps_struct*)
! _temp1053)->f1; goto _LL1052;} else{ goto _LL1035;} _LL1052: _temp1051=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp1031)->f2; if( _temp1051 == ( void*)
! Cyc_Absyn_HeapRgn){ goto _LL1050;} else{ goto _LL1035;} _LL1050: _temp1049=((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp1031)->f3; goto _LL1034;} else{ goto
! _LL1035;} _LL1035: if(( unsigned int) _temp1031 >  1u?*(( int*) _temp1031) == 
! Cyc_Absyn_Pointer_mod: 0){ _LL1062: _temp1061=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f1; if(( unsigned int) _temp1061 >  1u?*(( int*) _temp1061) ==  Cyc_Absyn_NonNullable_ps:
! 0){ _LL1064: _temp1063=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp1061)->f1;
! goto _LL1060;} else{ goto _LL1037;} _LL1060: _temp1059=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f2; if( _temp1059 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL1058;}
! else{ goto _LL1037;} _LL1058: _temp1057=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f3; goto _LL1036;} else{ goto _LL1037;} _LL1037: if(( unsigned int)
! _temp1031 >  1u?*(( int*) _temp1031) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1070:
! _temp1069=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1031)->f1; if(
! _temp1069 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL1068;} else{ goto
! _LL1039;} _LL1068: _temp1067=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f2; if( _temp1067 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL1066;}
! else{ goto _LL1039;} _LL1066: _temp1065=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f3; goto _LL1038;} else{ goto _LL1039;} _LL1039: if(( unsigned int)
! _temp1031 >  1u?*(( int*) _temp1031) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1078:
! _temp1077=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1031)->f1; if((
! unsigned int) _temp1077 >  1u?*(( int*) _temp1077) ==  Cyc_Absyn_Nullable_ps: 0){
! _LL1080: _temp1079=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp1077)->f1; goto
! _LL1074;} else{ goto _LL1041;} _LL1074: _temp1073=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f2; if(( unsigned int) _temp1073 >  4u?*(( int*) _temp1073) ==  Cyc_Absyn_VarType:
! 0){ _LL1076: _temp1075=(( struct Cyc_Absyn_VarType_struct*) _temp1073)->f1; goto
! _LL1072;} else{ goto _LL1041;} _LL1072: _temp1071=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f3; goto _LL1040;} else{ goto _LL1041;} _LL1041: if(( unsigned int)
! _temp1031 >  1u?*(( int*) _temp1031) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1088:
! _temp1087=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1031)->f1; if((
! unsigned int) _temp1087 >  1u?*(( int*) _temp1087) ==  Cyc_Absyn_NonNullable_ps:
! 0){ _LL1090: _temp1089=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp1087)->f1;
! goto _LL1084;} else{ goto _LL1043;} _LL1084: _temp1083=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f2; if(( unsigned int) _temp1083 >  4u?*(( int*) _temp1083) ==  Cyc_Absyn_VarType:
! 0){ _LL1086: _temp1085=(( struct Cyc_Absyn_VarType_struct*) _temp1083)->f1; goto
! _LL1082;} else{ goto _LL1043;} _LL1082: _temp1081=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f3; goto _LL1042;} else{ goto _LL1043;} _LL1043: if(( unsigned int)
! _temp1031 >  1u?*(( int*) _temp1031) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1098:
! _temp1097=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1031)->f1; if(
! _temp1097 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL1094;} else{ goto
! _LL1045;} _LL1094: _temp1093=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f2; if(( unsigned int) _temp1093 >  4u?*(( int*) _temp1093) ==  Cyc_Absyn_VarType:
! 0){ _LL1096: _temp1095=(( struct Cyc_Absyn_VarType_struct*) _temp1093)->f1; goto
! _LL1092;} else{ goto _LL1045;} _LL1092: _temp1091=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1031)->f3; goto _LL1044;} else{ goto _LL1045;} _LL1045: if(( unsigned int)
! _temp1031 >  1u?*(( int*) _temp1031) ==  Cyc_Absyn_Pointer_mod: 0){ goto _LL1046;}
! else{ goto _LL1047;} _LL1047: goto _LL1048; _LL1034: Cyc_Absyndump_dump_char((
! int)'*'); Cyc_Absyndump_dump_upperbound( _temp1055); Cyc_Absyndump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL1036: Cyc_Absyndump_dump_char((
! int)'@'); Cyc_Absyndump_dump_upperbound( _temp1063); Cyc_Absyndump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL1038: Cyc_Absyndump_dump_char((
  int)'?'); Cyc_Absyndump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl,
! f, a); return; _LL1040: Cyc_Absyndump_dump_char(( int)'*'); Cyc_Absyndump_dump_upperbound(
! _temp1079); Cyc_Absyndump_dump_str( _temp1075->name); Cyc_Absyndump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL1042: Cyc_Absyndump_dump_char((
! int)'@'); Cyc_Absyndump_dump_upperbound( _temp1089); Cyc_Absyndump_dump_str(
! _temp1085->name); Cyc_Absyndump_dumptms((( struct Cyc_List_List*) _check_null(
! tms))->tl, f, a); return; _LL1044: Cyc_Absyndump_dump_char(( int)'?'); Cyc_Absyndump_dump_str(
! _temp1095->name); Cyc_Absyndump_dumptms((( struct Cyc_List_List*) _check_null(
! tms))->tl, f, a); return; _LL1046:( int) _throw(( void*)({ struct Cyc_Core_Impossible_struct*
! _temp1099=( struct Cyc_Core_Impossible_struct*) _cycalloc( sizeof( struct Cyc_Core_Impossible_struct));
! _temp1099[ 0]=({ struct Cyc_Core_Impossible_struct _temp1100; _temp1100.tag= Cyc_Core_Impossible;
! _temp1100.f1= _tag_arr("dumptms: bad Pointer_mod", sizeof( unsigned char), 25u);
! _temp1100;}); _temp1099;})); _LL1048: { int next_is_pointer= 0; if((( struct Cyc_List_List*)
! _check_null( tms))->tl !=  0){ void* _temp1101=( void*)(( struct Cyc_List_List*)
! _check_null((( struct Cyc_List_List*) _check_null( tms))->tl))->hd; _LL1103: if((
! unsigned int) _temp1101 >  1u?*(( int*) _temp1101) ==  Cyc_Absyn_Pointer_mod: 0){
! goto _LL1104;} else{ goto _LL1105;} _LL1105: goto _LL1106; _LL1104:
! next_is_pointer= 1; goto _LL1102; _LL1106: goto _LL1102; _LL1102:;} if(
  next_is_pointer){ Cyc_Absyndump_dump_char(( int)'(');} Cyc_Absyndump_dumptms(((
  struct Cyc_List_List*) _check_null( tms))->tl, f, a); if( next_is_pointer){ Cyc_Absyndump_dump_char((
! int)')');}{ void* _temp1107=( void*)(( struct Cyc_List_List*) _check_null( tms))->hd;
! struct Cyc_Absyn_Exp* _temp1123; void* _temp1125; struct Cyc_List_List*
! _temp1127; struct Cyc_Core_Opt* _temp1129; struct Cyc_Absyn_VarargInfo*
! _temp1131; int _temp1133; struct Cyc_List_List* _temp1135; void* _temp1137;
! struct Cyc_Position_Segment* _temp1139; struct Cyc_List_List* _temp1141; int
! _temp1143; struct Cyc_Position_Segment* _temp1145; struct Cyc_List_List*
! _temp1147; struct Cyc_List_List* _temp1149; void* _temp1151; void* _temp1153;
! _LL1109: if( _temp1107 == ( void*) Cyc_Absyn_Carray_mod){ goto _LL1110;} else{
! goto _LL1111;} _LL1111: if(( unsigned int) _temp1107 >  1u?*(( int*) _temp1107)
! ==  Cyc_Absyn_ConstArray_mod: 0){ _LL1124: _temp1123=(( struct Cyc_Absyn_ConstArray_mod_struct*)
! _temp1107)->f1; goto _LL1112;} else{ goto _LL1113;} _LL1113: if(( unsigned int)
! _temp1107 >  1u?*(( int*) _temp1107) ==  Cyc_Absyn_Function_mod: 0){ _LL1126:
! _temp1125=( void*)(( struct Cyc_Absyn_Function_mod_struct*) _temp1107)->f1; if(*((
! int*) _temp1125) ==  Cyc_Absyn_WithTypes){ _LL1136: _temp1135=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1125)->f1; goto _LL1134; _LL1134: _temp1133=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1125)->f2; goto _LL1132; _LL1132: _temp1131=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1125)->f3; goto _LL1130; _LL1130: _temp1129=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1125)->f4; goto _LL1128; _LL1128: _temp1127=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1125)->f5; goto _LL1114;} else{ goto _LL1115;}} else{ goto _LL1115;}
! _LL1115: if(( unsigned int) _temp1107 >  1u?*(( int*) _temp1107) ==  Cyc_Absyn_Function_mod:
! 0){ _LL1138: _temp1137=( void*)(( struct Cyc_Absyn_Function_mod_struct*)
! _temp1107)->f1; if(*(( int*) _temp1137) ==  Cyc_Absyn_NoTypes){ _LL1142:
! _temp1141=(( struct Cyc_Absyn_NoTypes_struct*) _temp1137)->f1; goto _LL1140;
! _LL1140: _temp1139=(( struct Cyc_Absyn_NoTypes_struct*) _temp1137)->f2; goto
! _LL1116;} else{ goto _LL1117;}} else{ goto _LL1117;} _LL1117: if(( unsigned int)
! _temp1107 >  1u?*(( int*) _temp1107) ==  Cyc_Absyn_TypeParams_mod: 0){ _LL1148:
! _temp1147=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp1107)->f1; goto
! _LL1146; _LL1146: _temp1145=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp1107)->f2; goto _LL1144; _LL1144: _temp1143=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp1107)->f3; goto _LL1118;} else{ goto _LL1119;} _LL1119: if(( unsigned int)
! _temp1107 >  1u?*(( int*) _temp1107) ==  Cyc_Absyn_Attributes_mod: 0){ _LL1150:
! _temp1149=(( struct Cyc_Absyn_Attributes_mod_struct*) _temp1107)->f2; goto
! _LL1120;} else{ goto _LL1121;} _LL1121: if(( unsigned int) _temp1107 >  1u?*((
! int*) _temp1107) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1154: _temp1153=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp1107)->f1; goto _LL1152; _LL1152:
! _temp1151=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1107)->f2; goto
! _LL1122;} else{ goto _LL1108;} _LL1110: Cyc_Absyndump_dump( _tag_arr("[]",
! sizeof( unsigned char), 3u)); goto _LL1108; _LL1112: Cyc_Absyndump_dump_char((
! int)'['); Cyc_Absyndump_dumpexp( _temp1123); Cyc_Absyndump_dump_char(( int)']');
! goto _LL1108; _LL1114: Cyc_Absyndump_dumpfunargs( _temp1135, _temp1133,
! _temp1131, _temp1129, _temp1127); goto _LL1108; _LL1116:(( void(*)( void(* f)(
  struct _tagged_arr*), struct Cyc_List_List* l, struct _tagged_arr start, struct
  _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dump_str,
! _temp1141, _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL1108;
! _LL1118: if( _temp1143){ Cyc_Absyndump_dumpkindedtvars( _temp1147);} else{ Cyc_Absyndump_dumptvars(
! _temp1147);} goto _LL1108; _LL1120: Cyc_Absyndump_dumpatts( _temp1149); goto
! _LL1108; _LL1122:( int) _throw(( void*)({ struct Cyc_Core_Impossible_struct*
! _temp1155=( struct Cyc_Core_Impossible_struct*) _cycalloc( sizeof( struct Cyc_Core_Impossible_struct));
! _temp1155[ 0]=({ struct Cyc_Core_Impossible_struct _temp1156; _temp1156.tag= Cyc_Core_Impossible;
! _temp1156.f1= _tag_arr("dumptms", sizeof( unsigned char), 8u); _temp1156;});
! _temp1155;})); _LL1108:;} return;} _LL1032:;}} void Cyc_Absyndump_dumptqtd(
  struct Cyc_Absyn_Tqual tq, void* t, void(* f)( void*), void* a){ struct Cyc_List_List*
! _temp1159; void* _temp1161; struct Cyc_Absyn_Tqual _temp1163; struct _tuple4
! _temp1157= Cyc_Absynpp_to_tms( tq, t); _LL1164: _temp1163= _temp1157.f1; goto
! _LL1162; _LL1162: _temp1161= _temp1157.f2; goto _LL1160; _LL1160: _temp1159=
! _temp1157.f3; goto _LL1158; _LL1158: Cyc_Absyndump_dumptq( _temp1163); Cyc_Absyndump_dumpntyp(
! _temp1161); Cyc_Absyndump_dumptms( Cyc_List_imp_rev( _temp1159), f, a);} void
  Cyc_Absyndump_dumpdecllist2file( struct Cyc_List_List* tdl, struct Cyc_Std___sFILE*
  f){ Cyc_Absyndump_pos= 0;* Cyc_Absyndump_dump_file= f; for( 0; tdl !=  0; tdl=((
  struct Cyc_List_List*) _check_null( tdl))->tl){ Cyc_Absyndump_dumpdecl(( struct
  Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( tdl))->hd);}({ void*
! _temp1165[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n", sizeof( unsigned char), 2u),
! _tag_arr( _temp1165, sizeof( void*), 0u));});}
--- 1652,1985 ----
  struct Cyc_List_List* l, struct _tagged_arr sep)) Cyc_Absyndump_dump_sep)( Cyc_Absyndump_dumpenumfield,
  fields, _tag_arr(",", sizeof( unsigned char), 2u));} void Cyc_Absyndump_dumpstructfields(
  struct Cyc_List_List* fields){ for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
! _check_null( fields))->tl){ struct Cyc_Absyn_Structfield _temp873; struct Cyc_List_List*
! _temp874; struct Cyc_Absyn_Exp* _temp876; void* _temp878; struct Cyc_Absyn_Tqual
! _temp880; struct _tagged_arr* _temp882; struct Cyc_Absyn_Structfield* _temp871=(
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fields))->hd;
! _temp873=* _temp871; _LL883: _temp882= _temp873.name; goto _LL881; _LL881:
! _temp880= _temp873.tq; goto _LL879; _LL879: _temp878=( void*) _temp873.type;
! goto _LL877; _LL877: _temp876= _temp873.width; goto _LL875; _LL875: _temp874=
! _temp873.attributes; goto _LL872; _LL872:(( void(*)( struct Cyc_Absyn_Tqual,
  void*, void(* f)( struct _tagged_arr*), struct _tagged_arr*)) Cyc_Absyndump_dumptqtd)(
! _temp880, _temp878, Cyc_Absyndump_dump_str, _temp882); Cyc_Absyndump_dumpatts(
! _temp874); if( _temp876 !=  0){ Cyc_Absyndump_dump_char(( int)':'); Cyc_Absyndump_dumpexp((
! struct Cyc_Absyn_Exp*) _check_null( _temp876));} Cyc_Absyndump_dump_semi();}}
  void Cyc_Absyndump_dumptypedefname( struct Cyc_Absyn_Typedefdecl* td){ Cyc_Absyndump_dumpqvar(
  td->name); Cyc_Absyndump_dumptvars( td->tvs);} static void Cyc_Absyndump_dump_atts_qvar(
  struct Cyc_Absyn_Fndecl* fd){ Cyc_Absyndump_dumpatts( fd->attributes); Cyc_Absyndump_dumpqvar(
  fd->name);} struct _tuple10{ void* f1; struct _tuple0* f2; } ; static void Cyc_Absyndump_dump_callconv_qvar(
! struct _tuple10* pr){{ void* _temp884=(* pr).f1; _LL886: if( _temp884 == ( void*)
! Cyc_Absyn_Unused_att){ goto _LL887;} else{ goto _LL888;} _LL888: if( _temp884 == (
! void*) Cyc_Absyn_Stdcall_att){ goto _LL889;} else{ goto _LL890;} _LL890: if(
! _temp884 == ( void*) Cyc_Absyn_Cdecl_att){ goto _LL891;} else{ goto _LL892;}
! _LL892: if( _temp884 == ( void*) Cyc_Absyn_Fastcall_att){ goto _LL893;} else{
! goto _LL894;} _LL894: goto _LL895; _LL887: goto _LL885; _LL889: Cyc_Absyndump_dump(
! _tag_arr("_stdcall", sizeof( unsigned char), 9u)); goto _LL885; _LL891: Cyc_Absyndump_dump(
! _tag_arr("_cdecl", sizeof( unsigned char), 7u)); goto _LL885; _LL893: Cyc_Absyndump_dump(
! _tag_arr("_fastcall", sizeof( unsigned char), 10u)); goto _LL885; _LL895: goto
! _LL885; _LL885:;} Cyc_Absyndump_dumpqvar((* pr).f2);} static void Cyc_Absyndump_dump_callconv_fdqvar(
  struct Cyc_Absyn_Fndecl* fd){ Cyc_Absyndump_dump_callconv( fd->attributes); Cyc_Absyndump_dumpqvar(
  fd->name);} static void Cyc_Absyndump_dumpids( struct Cyc_List_List* vds){ for(
  0; vds !=  0; vds=(( struct Cyc_List_List*) _check_null( vds))->tl){ Cyc_Absyndump_dumpqvar(((
  struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null( vds))->hd)->name);
  if((( struct Cyc_List_List*) _check_null( vds))->tl !=  0){ Cyc_Absyndump_dump_char((
  int)',');}}} void Cyc_Absyndump_dumpdecl( struct Cyc_Absyn_Decl* d){ void*
! _temp896=( void*) d->r; struct Cyc_Absyn_Fndecl* _temp922; struct Cyc_Absyn_Structdecl*
! _temp924; struct Cyc_Absyn_Uniondecl* _temp926; struct Cyc_Absyn_Vardecl*
! _temp928; struct Cyc_Absyn_Vardecl _temp930; struct Cyc_List_List* _temp931;
! struct Cyc_Absyn_Exp* _temp933; void* _temp935; struct Cyc_Absyn_Tqual _temp937;
! struct _tuple0* _temp939; void* _temp941; struct Cyc_Absyn_Tuniondecl* _temp943;
! struct Cyc_Absyn_Tuniondecl _temp945; int _temp946; struct Cyc_Core_Opt*
! _temp948; struct Cyc_List_List* _temp950; struct _tuple0* _temp952; void*
! _temp954; struct Cyc_Absyn_Enumdecl* _temp956; struct Cyc_Absyn_Enumdecl
! _temp958; struct Cyc_Core_Opt* _temp959; struct _tuple0* _temp961; void*
! _temp963; struct Cyc_Absyn_Exp* _temp965; struct Cyc_Absyn_Pat* _temp967; struct
! Cyc_List_List* _temp969; struct Cyc_Absyn_Typedefdecl* _temp971; struct Cyc_List_List*
! _temp973; struct _tagged_arr* _temp975; struct Cyc_List_List* _temp977; struct
! _tuple0* _temp979; struct Cyc_List_List* _temp981; _LL898: if(*(( int*) _temp896)
! ==  Cyc_Absyn_Fn_d){ _LL923: _temp922=(( struct Cyc_Absyn_Fn_d_struct*) _temp896)->f1;
! goto _LL899;} else{ goto _LL900;} _LL900: if(*(( int*) _temp896) ==  Cyc_Absyn_Struct_d){
! _LL925: _temp924=(( struct Cyc_Absyn_Struct_d_struct*) _temp896)->f1; goto
! _LL901;} else{ goto _LL902;} _LL902: if(*(( int*) _temp896) ==  Cyc_Absyn_Union_d){
! _LL927: _temp926=(( struct Cyc_Absyn_Union_d_struct*) _temp896)->f1; goto _LL903;}
! else{ goto _LL904;} _LL904: if(*(( int*) _temp896) ==  Cyc_Absyn_Var_d){ _LL929:
! _temp928=(( struct Cyc_Absyn_Var_d_struct*) _temp896)->f1; _temp930=* _temp928;
! _LL942: _temp941=( void*) _temp930.sc; goto _LL940; _LL940: _temp939= _temp930.name;
! goto _LL938; _LL938: _temp937= _temp930.tq; goto _LL936; _LL936: _temp935=( void*)
! _temp930.type; goto _LL934; _LL934: _temp933= _temp930.initializer; goto _LL932;
! _LL932: _temp931= _temp930.attributes; goto _LL905;} else{ goto _LL906;} _LL906:
! if(*(( int*) _temp896) ==  Cyc_Absyn_Tunion_d){ _LL944: _temp943=(( struct Cyc_Absyn_Tunion_d_struct*)
! _temp896)->f1; _temp945=* _temp943; _LL955: _temp954=( void*) _temp945.sc; goto
! _LL953; _LL953: _temp952= _temp945.name; goto _LL951; _LL951: _temp950= _temp945.tvs;
! goto _LL949; _LL949: _temp948= _temp945.fields; goto _LL947; _LL947: _temp946=
! _temp945.is_xtunion; goto _LL907;} else{ goto _LL908;} _LL908: if(*(( int*)
! _temp896) ==  Cyc_Absyn_Enum_d){ _LL957: _temp956=(( struct Cyc_Absyn_Enum_d_struct*)
! _temp896)->f1; _temp958=* _temp956; _LL964: _temp963=( void*) _temp958.sc; goto
! _LL962; _LL962: _temp961= _temp958.name; goto _LL960; _LL960: _temp959= _temp958.fields;
! goto _LL909;} else{ goto _LL910;} _LL910: if(*(( int*) _temp896) ==  Cyc_Absyn_Let_d){
! _LL968: _temp967=(( struct Cyc_Absyn_Let_d_struct*) _temp896)->f1; goto _LL966;
! _LL966: _temp965=(( struct Cyc_Absyn_Let_d_struct*) _temp896)->f4; goto _LL911;}
! else{ goto _LL912;} _LL912: if(*(( int*) _temp896) ==  Cyc_Absyn_Letv_d){ _LL970:
! _temp969=(( struct Cyc_Absyn_Letv_d_struct*) _temp896)->f1; goto _LL913;} else{
! goto _LL914;} _LL914: if(*(( int*) _temp896) ==  Cyc_Absyn_Typedef_d){ _LL972:
! _temp971=(( struct Cyc_Absyn_Typedef_d_struct*) _temp896)->f1; goto _LL915;}
! else{ goto _LL916;} _LL916: if(*(( int*) _temp896) ==  Cyc_Absyn_Namespace_d){
! _LL976: _temp975=(( struct Cyc_Absyn_Namespace_d_struct*) _temp896)->f1; goto
! _LL974; _LL974: _temp973=(( struct Cyc_Absyn_Namespace_d_struct*) _temp896)->f2;
! goto _LL917;} else{ goto _LL918;} _LL918: if(*(( int*) _temp896) ==  Cyc_Absyn_Using_d){
! _LL980: _temp979=(( struct Cyc_Absyn_Using_d_struct*) _temp896)->f1; goto _LL978;
! _LL978: _temp977=(( struct Cyc_Absyn_Using_d_struct*) _temp896)->f2; goto _LL919;}
! else{ goto _LL920;} _LL920: if(*(( int*) _temp896) ==  Cyc_Absyn_ExternC_d){
! _LL982: _temp981=(( struct Cyc_Absyn_ExternC_d_struct*) _temp896)->f1; goto
! _LL921;} else{ goto _LL897;} _LL899: if( Cyc_Absyndump_to_VC){ Cyc_Absyndump_dumpatts(
! _temp922->attributes);} if( _temp922->is_inline){ if( Cyc_Absyndump_to_VC){ Cyc_Absyndump_dump(
  _tag_arr("__inline", sizeof( unsigned char), 9u));} else{ Cyc_Absyndump_dump(
  _tag_arr("inline", sizeof( unsigned char), 7u));}} Cyc_Absyndump_dumpscope((
! void*) _temp922->sc);{ void* t=( void*)({ struct Cyc_Absyn_FnType_struct*
! _temp984=( struct Cyc_Absyn_FnType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct));
! _temp984[ 0]=({ struct Cyc_Absyn_FnType_struct _temp985; _temp985.tag= Cyc_Absyn_FnType;
! _temp985.f1=({ struct Cyc_Absyn_FnInfo _temp986; _temp986.tvars= _temp922->tvs;
! _temp986.effect= _temp922->effect; _temp986.ret_typ=( void*)(( void*) _temp922->ret_type);
! _temp986.args=(( struct Cyc_List_List*(*)( struct _tuple1*(* f)( struct _tuple3*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_arg_mk_opt, _temp922->args);
! _temp986.c_varargs= _temp922->c_varargs; _temp986.cyc_varargs= _temp922->cyc_varargs;
! _temp986.rgn_po= _temp922->rgn_po; _temp986.attributes= 0; _temp986;}); _temp985;});
! _temp984;});(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( struct Cyc_Absyn_Fndecl*),
! struct Cyc_Absyn_Fndecl*)) Cyc_Absyndump_dumptqtd)(({ struct Cyc_Absyn_Tqual
! _temp983; _temp983.q_const= 0; _temp983.q_volatile= 0; _temp983.q_restrict= 0;
! _temp983;}), t, Cyc_Absyndump_to_VC? Cyc_Absyndump_dump_callconv_fdqvar: Cyc_Absyndump_dump_atts_qvar,
! _temp922); Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstmt( _temp922->body);
! Cyc_Absyndump_dump_char(( int)'}'); goto _LL897;} _LL901: Cyc_Absyndump_dumpscope((
! void*) _temp924->sc); Cyc_Absyndump_dump( _tag_arr("struct", sizeof(
! unsigned char), 7u)); if( _temp924->name !=  0){ Cyc_Absyndump_dumpqvar(( struct
! _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp924->name))->v);} Cyc_Absyndump_dumptvars(
! _temp924->tvs); if( _temp924->fields ==  0){ Cyc_Absyndump_dump_semi();} else{
  Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp924->fields))->v); Cyc_Absyndump_dump(
! _tag_arr("}", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpatts( _temp924->attributes);
! Cyc_Absyndump_dump( _tag_arr(";", sizeof( unsigned char), 2u));} goto _LL897;
! _LL903: Cyc_Absyndump_dumpscope(( void*) _temp926->sc); Cyc_Absyndump_dump(
! _tag_arr("union", sizeof( unsigned char), 6u)); if( _temp926->name !=  0){ Cyc_Absyndump_dumpqvar((
! struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp926->name))->v);} Cyc_Absyndump_dumptvars(
! _temp926->tvs); if( _temp926->fields ==  0){ Cyc_Absyndump_dump_semi();} else{
  Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp926->fields))->v); Cyc_Absyndump_dump(
! _tag_arr("}", sizeof( unsigned char), 2u)); Cyc_Absyndump_dumpatts( _temp926->attributes);
! Cyc_Absyndump_dump( _tag_arr(";", sizeof( unsigned char), 2u));} goto _LL897;
! _LL905: if( Cyc_Absyndump_to_VC){ Cyc_Absyndump_dumpatts( _temp931); Cyc_Absyndump_dumpscope(
! _temp941);{ struct Cyc_List_List* _temp989; void* _temp991; struct Cyc_Absyn_Tqual
! _temp993; struct _tuple4 _temp987= Cyc_Absynpp_to_tms( _temp937, _temp935);
! _LL994: _temp993= _temp987.f1; goto _LL992; _LL992: _temp991= _temp987.f2; goto
! _LL990; _LL990: _temp989= _temp987.f3; goto _LL988; _LL988: { void* call_conv=(
! void*) Cyc_Absyn_Unused_att;{ struct Cyc_List_List* tms2= _temp989; for( 0; tms2
! !=  0; tms2=(( struct Cyc_List_List*) _check_null( tms2))->tl){ void* _temp995=(
! void*)(( struct Cyc_List_List*) _check_null( tms2))->hd; struct Cyc_List_List*
! _temp1001; _LL997: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Attributes_mod:
! 0){ _LL1002: _temp1001=(( struct Cyc_Absyn_Attributes_mod_struct*) _temp995)->f2;
! goto _LL998;} else{ goto _LL999;} _LL999: goto _LL1000; _LL998: for( 0;
! _temp1001 !=  0; _temp1001=(( struct Cyc_List_List*) _check_null( _temp1001))->tl){
! void* _temp1003=( void*)(( struct Cyc_List_List*) _check_null( _temp1001))->hd;
! _LL1005: if( _temp1003 == ( void*) Cyc_Absyn_Stdcall_att){ goto _LL1006;} else{
! goto _LL1007;} _LL1007: if( _temp1003 == ( void*) Cyc_Absyn_Cdecl_att){ goto
! _LL1008;} else{ goto _LL1009;} _LL1009: if( _temp1003 == ( void*) Cyc_Absyn_Fastcall_att){
! goto _LL1010;} else{ goto _LL1011;} _LL1011: goto _LL1012; _LL1006: call_conv=(
! void*) Cyc_Absyn_Stdcall_att; goto _LL1004; _LL1008: call_conv=( void*) Cyc_Absyn_Cdecl_att;
! goto _LL1004; _LL1010: call_conv=( void*) Cyc_Absyn_Fastcall_att; goto _LL1004;
! _LL1012: goto _LL1004; _LL1004:;} goto _LL996; _LL1000: goto _LL996; _LL996:;}}
! Cyc_Absyndump_dumptq( _temp993); Cyc_Absyndump_dumpntyp( _temp991);{ struct
! _tuple10 _temp1013=({ struct _tuple10 _temp1014; _temp1014.f1= call_conv;
! _temp1014.f2= _temp939; _temp1014;});(( void(*)( struct Cyc_List_List* tms, void(*
! f)( struct _tuple10*), struct _tuple10* a)) Cyc_Absyndump_dumptms)( Cyc_List_imp_rev(
! _temp989), Cyc_Absyndump_dump_callconv_qvar,& _temp1013);}}}} else{ Cyc_Absyndump_dumpscope(
! _temp941);(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( struct _tuple0*),
! struct _tuple0*)) Cyc_Absyndump_dumptqtd)( _temp937, _temp935, Cyc_Absyndump_dumpqvar,
! _temp939); Cyc_Absyndump_dumpatts( _temp931);} if( _temp933 !=  0){ Cyc_Absyndump_dump_char((
! int)'='); Cyc_Absyndump_dumpexp(( struct Cyc_Absyn_Exp*) _check_null( _temp933));}
! Cyc_Absyndump_dump_semi(); goto _LL897; _LL907: Cyc_Absyndump_dumpscope(
! _temp954); if( _temp946){ Cyc_Absyndump_dump( _tag_arr("xtunion ", sizeof(
! unsigned char), 9u));} else{ Cyc_Absyndump_dump( _tag_arr("tunion ", sizeof(
! unsigned char), 8u));} Cyc_Absyndump_dumpqvar( _temp952); Cyc_Absyndump_dumptvars(
! _temp950); if( _temp948 ==  0){ Cyc_Absyndump_dump_semi();} else{ Cyc_Absyndump_dump_char((
! int)'{'); Cyc_Absyndump_dumptunionfields(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp948))->v); Cyc_Absyndump_dump_nospace( _tag_arr("};", sizeof(
! unsigned char), 3u));} goto _LL897; _LL909: Cyc_Absyndump_dumpscope( _temp963);
! Cyc_Absyndump_dump( _tag_arr("enum ", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpqvar(
! _temp961); if( _temp959 ==  0){ Cyc_Absyndump_dump_semi();} else{ Cyc_Absyndump_dump_char((
! int)'{'); Cyc_Absyndump_dumpenumfields(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp959))->v); Cyc_Absyndump_dump_nospace( _tag_arr("};", sizeof(
! unsigned char), 3u));} return; _LL911: Cyc_Absyndump_dump( _tag_arr("let",
! sizeof( unsigned char), 4u)); Cyc_Absyndump_dumppat( _temp967); Cyc_Absyndump_dump_char((
! int)'='); Cyc_Absyndump_dumpexp( _temp965); Cyc_Absyndump_dump_semi(); goto
! _LL897; _LL913: Cyc_Absyndump_dump( _tag_arr("let ", sizeof( unsigned char), 5u));
! Cyc_Absyndump_dumpids( _temp969); Cyc_Absyndump_dump_semi(); goto _LL897; _LL915:
! if( ! Cyc_Absyndump_expand_typedefs){ Cyc_Absyndump_dump( _tag_arr("typedef",
  sizeof( unsigned char), 8u));(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)(
  struct Cyc_Absyn_Typedefdecl*), struct Cyc_Absyn_Typedefdecl*)) Cyc_Absyndump_dumptqtd)(({
! struct Cyc_Absyn_Tqual _temp1015; _temp1015.q_const= 0; _temp1015.q_volatile= 0;
! _temp1015.q_restrict= 0; _temp1015;}),( void*) _temp971->defn, Cyc_Absyndump_dumptypedefname,
! _temp971); Cyc_Absyndump_dump_semi();} goto _LL897; _LL917: Cyc_Absyndump_dump(
  _tag_arr("namespace", sizeof( unsigned char), 10u)); Cyc_Absyndump_dump_str(
! _temp975); Cyc_Absyndump_dump_char(( int)'{'); for( 0; _temp973 !=  0; _temp973=((
! struct Cyc_List_List*) _check_null( _temp973))->tl){ Cyc_Absyndump_dumpdecl((
! struct Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( _temp973))->hd);}
! Cyc_Absyndump_dump_char(( int)'}'); goto _LL897; _LL919: Cyc_Absyndump_dump(
! _tag_arr("using", sizeof( unsigned char), 6u)); Cyc_Absyndump_dumpqvar( _temp979);
! Cyc_Absyndump_dump_char(( int)'{'); for( 0; _temp977 !=  0; _temp977=(( struct
! Cyc_List_List*) _check_null( _temp977))->tl){ Cyc_Absyndump_dumpdecl(( struct
! Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( _temp977))->hd);} Cyc_Absyndump_dump_char((
! int)'}'); goto _LL897; _LL921: Cyc_Absyndump_dump( _tag_arr("extern \"C\" {",
! sizeof( unsigned char), 13u)); for( 0; _temp981 !=  0; _temp981=(( struct Cyc_List_List*)
! _check_null( _temp981))->tl){ Cyc_Absyndump_dumpdecl(( struct Cyc_Absyn_Decl*)((
! struct Cyc_List_List*) _check_null( _temp981))->hd);} Cyc_Absyndump_dump_char((
! int)'}'); goto _LL897; _LL897:;} static void Cyc_Absyndump_dump_upperbound(
  struct Cyc_Absyn_Exp* e){ unsigned int i= Cyc_Evexp_eval_const_uint_exp( e); if(
  i !=  1){ Cyc_Absyndump_dump_char(( int)'{'); Cyc_Absyndump_dumpexp( e); Cyc_Absyndump_dump_char((
  int)'}');}} void Cyc_Absyndump_dumptms( struct Cyc_List_List* tms, void(* f)(
! void*), void* a){ if( tms ==  0){ f( a); return;}{ void* _temp1016=( void*)((
! struct Cyc_List_List*) _check_null( tms))->hd; struct Cyc_Absyn_Tqual _temp1034;
! void* _temp1036; void* _temp1038; struct Cyc_Absyn_Exp* _temp1040; struct Cyc_Absyn_Tqual
! _temp1042; void* _temp1044; void* _temp1046; struct Cyc_Absyn_Exp* _temp1048;
! struct Cyc_Absyn_Tqual _temp1050; void* _temp1052; void* _temp1054; struct Cyc_Absyn_Tqual
! _temp1056; void* _temp1058; struct Cyc_Absyn_Tvar* _temp1060; void* _temp1062;
! struct Cyc_Absyn_Exp* _temp1064; struct Cyc_Absyn_Tqual _temp1066; void*
! _temp1068; struct Cyc_Absyn_Tvar* _temp1070; void* _temp1072; struct Cyc_Absyn_Exp*
! _temp1074; struct Cyc_Absyn_Tqual _temp1076; void* _temp1078; struct Cyc_Absyn_Tvar*
! _temp1080; void* _temp1082; _LL1018: if(( unsigned int) _temp1016 >  1u?*(( int*)
! _temp1016) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1039: _temp1038=( void*)(( struct
! Cyc_Absyn_Pointer_mod_struct*) _temp1016)->f1; if(( unsigned int) _temp1038 >  1u?*((
! int*) _temp1038) ==  Cyc_Absyn_Nullable_ps: 0){ _LL1041: _temp1040=(( struct Cyc_Absyn_Nullable_ps_struct*)
! _temp1038)->f1; goto _LL1037;} else{ goto _LL1020;} _LL1037: _temp1036=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp1016)->f2; if( _temp1036 == ( void*)
! Cyc_Absyn_HeapRgn){ goto _LL1035;} else{ goto _LL1020;} _LL1035: _temp1034=((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp1016)->f3; goto _LL1019;} else{ goto
! _LL1020;} _LL1020: if(( unsigned int) _temp1016 >  1u?*(( int*) _temp1016) == 
! Cyc_Absyn_Pointer_mod: 0){ _LL1047: _temp1046=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f1; if(( unsigned int) _temp1046 >  1u?*(( int*) _temp1046) ==  Cyc_Absyn_NonNullable_ps:
! 0){ _LL1049: _temp1048=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp1046)->f1;
! goto _LL1045;} else{ goto _LL1022;} _LL1045: _temp1044=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f2; if( _temp1044 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL1043;}
! else{ goto _LL1022;} _LL1043: _temp1042=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f3; goto _LL1021;} else{ goto _LL1022;} _LL1022: if(( unsigned int)
! _temp1016 >  1u?*(( int*) _temp1016) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1055:
! _temp1054=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1016)->f1; if(
! _temp1054 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL1053;} else{ goto
! _LL1024;} _LL1053: _temp1052=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f2; if( _temp1052 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL1051;}
! else{ goto _LL1024;} _LL1051: _temp1050=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f3; goto _LL1023;} else{ goto _LL1024;} _LL1024: if(( unsigned int)
! _temp1016 >  1u?*(( int*) _temp1016) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1063:
! _temp1062=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1016)->f1; if((
! unsigned int) _temp1062 >  1u?*(( int*) _temp1062) ==  Cyc_Absyn_Nullable_ps: 0){
! _LL1065: _temp1064=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp1062)->f1; goto
! _LL1059;} else{ goto _LL1026;} _LL1059: _temp1058=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f2; if(( unsigned int) _temp1058 >  4u?*(( int*) _temp1058) ==  Cyc_Absyn_VarType:
! 0){ _LL1061: _temp1060=(( struct Cyc_Absyn_VarType_struct*) _temp1058)->f1; goto
! _LL1057;} else{ goto _LL1026;} _LL1057: _temp1056=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f3; goto _LL1025;} else{ goto _LL1026;} _LL1026: if(( unsigned int)
! _temp1016 >  1u?*(( int*) _temp1016) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1073:
! _temp1072=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1016)->f1; if((
! unsigned int) _temp1072 >  1u?*(( int*) _temp1072) ==  Cyc_Absyn_NonNullable_ps:
! 0){ _LL1075: _temp1074=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp1072)->f1;
! goto _LL1069;} else{ goto _LL1028;} _LL1069: _temp1068=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f2; if(( unsigned int) _temp1068 >  4u?*(( int*) _temp1068) ==  Cyc_Absyn_VarType:
! 0){ _LL1071: _temp1070=(( struct Cyc_Absyn_VarType_struct*) _temp1068)->f1; goto
! _LL1067;} else{ goto _LL1028;} _LL1067: _temp1066=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f3; goto _LL1027;} else{ goto _LL1028;} _LL1028: if(( unsigned int)
! _temp1016 >  1u?*(( int*) _temp1016) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1083:
! _temp1082=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1016)->f1; if(
! _temp1082 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL1079;} else{ goto
! _LL1030;} _LL1079: _temp1078=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f2; if(( unsigned int) _temp1078 >  4u?*(( int*) _temp1078) ==  Cyc_Absyn_VarType:
! 0){ _LL1081: _temp1080=(( struct Cyc_Absyn_VarType_struct*) _temp1078)->f1; goto
! _LL1077;} else{ goto _LL1030;} _LL1077: _temp1076=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp1016)->f3; goto _LL1029;} else{ goto _LL1030;} _LL1030: if(( unsigned int)
! _temp1016 >  1u?*(( int*) _temp1016) ==  Cyc_Absyn_Pointer_mod: 0){ goto _LL1031;}
! else{ goto _LL1032;} _LL1032: goto _LL1033; _LL1019: Cyc_Absyndump_dump_char((
! int)'*'); Cyc_Absyndump_dump_upperbound( _temp1040); Cyc_Absyndump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL1021: Cyc_Absyndump_dump_char((
! int)'@'); Cyc_Absyndump_dump_upperbound( _temp1048); Cyc_Absyndump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL1023: Cyc_Absyndump_dump_char((
  int)'?'); Cyc_Absyndump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl,
! f, a); return; _LL1025: Cyc_Absyndump_dump_char(( int)'*'); Cyc_Absyndump_dump_upperbound(
! _temp1064); Cyc_Absyndump_dump_str( _temp1060->name); Cyc_Absyndump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL1027: Cyc_Absyndump_dump_char((
! int)'@'); Cyc_Absyndump_dump_upperbound( _temp1074); Cyc_Absyndump_dump_str(
! _temp1070->name); Cyc_Absyndump_dumptms((( struct Cyc_List_List*) _check_null(
! tms))->tl, f, a); return; _LL1029: Cyc_Absyndump_dump_char(( int)'?'); Cyc_Absyndump_dump_str(
! _temp1080->name); Cyc_Absyndump_dumptms((( struct Cyc_List_List*) _check_null(
! tms))->tl, f, a); return; _LL1031:( int) _throw(( void*)({ struct Cyc_Core_Impossible_struct*
! _temp1084=( struct Cyc_Core_Impossible_struct*) _cycalloc( sizeof( struct Cyc_Core_Impossible_struct));
! _temp1084[ 0]=({ struct Cyc_Core_Impossible_struct _temp1085; _temp1085.tag= Cyc_Core_Impossible;
! _temp1085.f1= _tag_arr("dumptms: bad Pointer_mod", sizeof( unsigned char), 25u);
! _temp1085;}); _temp1084;})); _LL1033: { int next_is_pointer= 0; if((( struct Cyc_List_List*)
! _check_null( tms))->tl !=  0){ void* _temp1086=( void*)(( struct Cyc_List_List*)
! _check_null((( struct Cyc_List_List*) _check_null( tms))->tl))->hd; _LL1088: if((
! unsigned int) _temp1086 >  1u?*(( int*) _temp1086) ==  Cyc_Absyn_Pointer_mod: 0){
! goto _LL1089;} else{ goto _LL1090;} _LL1090: goto _LL1091; _LL1089:
! next_is_pointer= 1; goto _LL1087; _LL1091: goto _LL1087; _LL1087:;} if(
  next_is_pointer){ Cyc_Absyndump_dump_char(( int)'(');} Cyc_Absyndump_dumptms(((
  struct Cyc_List_List*) _check_null( tms))->tl, f, a); if( next_is_pointer){ Cyc_Absyndump_dump_char((
! int)')');}{ void* _temp1092=( void*)(( struct Cyc_List_List*) _check_null( tms))->hd;
! struct Cyc_Absyn_Exp* _temp1108; void* _temp1110; struct Cyc_List_List*
! _temp1112; struct Cyc_Core_Opt* _temp1114; struct Cyc_Absyn_VarargInfo*
! _temp1116; int _temp1118; struct Cyc_List_List* _temp1120; void* _temp1122;
! struct Cyc_Position_Segment* _temp1124; struct Cyc_List_List* _temp1126; int
! _temp1128; struct Cyc_Position_Segment* _temp1130; struct Cyc_List_List*
! _temp1132; struct Cyc_List_List* _temp1134; void* _temp1136; void* _temp1138;
! _LL1094: if( _temp1092 == ( void*) Cyc_Absyn_Carray_mod){ goto _LL1095;} else{
! goto _LL1096;} _LL1096: if(( unsigned int) _temp1092 >  1u?*(( int*) _temp1092)
! ==  Cyc_Absyn_ConstArray_mod: 0){ _LL1109: _temp1108=(( struct Cyc_Absyn_ConstArray_mod_struct*)
! _temp1092)->f1; goto _LL1097;} else{ goto _LL1098;} _LL1098: if(( unsigned int)
! _temp1092 >  1u?*(( int*) _temp1092) ==  Cyc_Absyn_Function_mod: 0){ _LL1111:
! _temp1110=( void*)(( struct Cyc_Absyn_Function_mod_struct*) _temp1092)->f1; if(*((
! int*) _temp1110) ==  Cyc_Absyn_WithTypes){ _LL1121: _temp1120=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1110)->f1; goto _LL1119; _LL1119: _temp1118=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1110)->f2; goto _LL1117; _LL1117: _temp1116=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1110)->f3; goto _LL1115; _LL1115: _temp1114=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1110)->f4; goto _LL1113; _LL1113: _temp1112=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp1110)->f5; goto _LL1099;} else{ goto _LL1100;}} else{ goto _LL1100;}
! _LL1100: if(( unsigned int) _temp1092 >  1u?*(( int*) _temp1092) ==  Cyc_Absyn_Function_mod:
! 0){ _LL1123: _temp1122=( void*)(( struct Cyc_Absyn_Function_mod_struct*)
! _temp1092)->f1; if(*(( int*) _temp1122) ==  Cyc_Absyn_NoTypes){ _LL1127:
! _temp1126=(( struct Cyc_Absyn_NoTypes_struct*) _temp1122)->f1; goto _LL1125;
! _LL1125: _temp1124=(( struct Cyc_Absyn_NoTypes_struct*) _temp1122)->f2; goto
! _LL1101;} else{ goto _LL1102;}} else{ goto _LL1102;} _LL1102: if(( unsigned int)
! _temp1092 >  1u?*(( int*) _temp1092) ==  Cyc_Absyn_TypeParams_mod: 0){ _LL1133:
! _temp1132=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp1092)->f1; goto
! _LL1131; _LL1131: _temp1130=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp1092)->f2; goto _LL1129; _LL1129: _temp1128=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp1092)->f3; goto _LL1103;} else{ goto _LL1104;} _LL1104: if(( unsigned int)
! _temp1092 >  1u?*(( int*) _temp1092) ==  Cyc_Absyn_Attributes_mod: 0){ _LL1135:
! _temp1134=(( struct Cyc_Absyn_Attributes_mod_struct*) _temp1092)->f2; goto
! _LL1105;} else{ goto _LL1106;} _LL1106: if(( unsigned int) _temp1092 >  1u?*((
! int*) _temp1092) ==  Cyc_Absyn_Pointer_mod: 0){ _LL1139: _temp1138=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp1092)->f1; goto _LL1137; _LL1137:
! _temp1136=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp1092)->f2; goto
! _LL1107;} else{ goto _LL1093;} _LL1095: Cyc_Absyndump_dump( _tag_arr("[]",
! sizeof( unsigned char), 3u)); goto _LL1093; _LL1097: Cyc_Absyndump_dump_char((
! int)'['); Cyc_Absyndump_dumpexp( _temp1108); Cyc_Absyndump_dump_char(( int)']');
! goto _LL1093; _LL1099: Cyc_Absyndump_dumpfunargs( _temp1120, _temp1118,
! _temp1116, _temp1114, _temp1112); goto _LL1093; _LL1101:(( void(*)( void(* f)(
  struct _tagged_arr*), struct Cyc_List_List* l, struct _tagged_arr start, struct
  _tagged_arr end, struct _tagged_arr sep)) Cyc_Absyndump_group)( Cyc_Absyndump_dump_str,
! _temp1126, _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL1093;
! _LL1103: if( _temp1128){ Cyc_Absyndump_dumpkindedtvars( _temp1132);} else{ Cyc_Absyndump_dumptvars(
! _temp1132);} goto _LL1093; _LL1105: Cyc_Absyndump_dumpatts( _temp1134); goto
! _LL1093; _LL1107:( int) _throw(( void*)({ struct Cyc_Core_Impossible_struct*
! _temp1140=( struct Cyc_Core_Impossible_struct*) _cycalloc( sizeof( struct Cyc_Core_Impossible_struct));
! _temp1140[ 0]=({ struct Cyc_Core_Impossible_struct _temp1141; _temp1141.tag= Cyc_Core_Impossible;
! _temp1141.f1= _tag_arr("dumptms", sizeof( unsigned char), 8u); _temp1141;});
! _temp1140;})); _LL1093:;} return;} _LL1017:;}} void Cyc_Absyndump_dumptqtd(
  struct Cyc_Absyn_Tqual tq, void* t, void(* f)( void*), void* a){ struct Cyc_List_List*
! _temp1144; void* _temp1146; struct Cyc_Absyn_Tqual _temp1148; struct _tuple4
! _temp1142= Cyc_Absynpp_to_tms( tq, t); _LL1149: _temp1148= _temp1142.f1; goto
! _LL1147; _LL1147: _temp1146= _temp1142.f2; goto _LL1145; _LL1145: _temp1144=
! _temp1142.f3; goto _LL1143; _LL1143: Cyc_Absyndump_dumptq( _temp1148); Cyc_Absyndump_dumpntyp(
! _temp1146); Cyc_Absyndump_dumptms( Cyc_List_imp_rev( _temp1144), f, a);} void
  Cyc_Absyndump_dumpdecllist2file( struct Cyc_List_List* tdl, struct Cyc_Std___sFILE*
  f){ Cyc_Absyndump_pos= 0;* Cyc_Absyndump_dump_file= f; for( 0; tdl !=  0; tdl=((
  struct Cyc_List_List*) _check_null( tdl))->tl){ Cyc_Absyndump_dumpdecl(( struct
  Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( tdl))->hd);}({ void*
! _temp1150[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n", sizeof( unsigned char), 2u),
! _tag_arr( _temp1150, sizeof( void*), 0u));});}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/absynpp.c powerpc-apple-rhapsody/src/absynpp.c
*** i686-unknown-linux/src/absynpp.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/absynpp.c	Wed Oct 10 15:39:28 2001
***************
*** 317,323 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 317,323 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 408,470 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 408,467 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 1130,2330 ****
  _tag_arr("_ /* ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp351,
  sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL246; _LL260:{ void* _temp352=
  _temp309; struct Cyc_Absyn_UnknownTunionInfo _temp358; int _temp360; struct
! _tuple0* _temp362; struct Cyc_Absyn_Tuniondecl** _temp364; struct Cyc_Absyn_Tuniondecl*
! _temp366; struct Cyc_Absyn_Tuniondecl _temp367; int _temp368; struct _tuple0*
! _temp370; _LL354: if(*(( int*) _temp352) ==  Cyc_Absyn_UnknownTunion){ _LL359:
! _temp358=(( struct Cyc_Absyn_UnknownTunion_struct*) _temp352)->f1; _LL363:
! _temp362= _temp358.name; goto _LL361; _LL361: _temp360= _temp358.is_xtunion;
! goto _LL355;} else{ goto _LL356;} _LL356: if(*(( int*) _temp352) ==  Cyc_Absyn_KnownTunion){
! _LL365: _temp364=(( struct Cyc_Absyn_KnownTunion_struct*) _temp352)->f1;
! _temp366=* _temp364; _temp367=* _temp366; _LL371: _temp370= _temp367.name; goto
! _LL369; _LL369: _temp368= _temp367.is_xtunion; goto _LL357;} else{ goto _LL353;}
! _LL355: _temp370= _temp362; _temp368= _temp360; goto _LL357; _LL357: { struct
! Cyc_PP_Doc* _temp372= Cyc_PP_text( _temp368? _tag_arr("xtunion ", sizeof(
! unsigned char), 9u): _tag_arr("tunion ", sizeof( unsigned char), 8u));{ void*
! _temp373= Cyc_Tcutil_compress( _temp305); _LL375: if( _temp373 == ( void*) Cyc_Absyn_HeapRgn){
! goto _LL376;} else{ goto _LL377;} _LL377: goto _LL378; _LL376: s=({ struct Cyc_PP_Doc*
! _temp379[ 3u]; _temp379[ 2u]= Cyc_Absynpp_tps2doc( _temp307); _temp379[ 1u]= Cyc_Absynpp_qvar2doc(
! _temp370); _temp379[ 0u]= _temp372; Cyc_PP_cat( _tag_arr( _temp379, sizeof(
! struct Cyc_PP_Doc*), 3u));}); goto _LL374; _LL378: s=({ struct Cyc_PP_Doc*
! _temp380[ 5u]; _temp380[ 4u]= Cyc_Absynpp_tps2doc( _temp307); _temp380[ 3u]= Cyc_Absynpp_qvar2doc(
! _temp370); _temp380[ 2u]= Cyc_PP_text( _tag_arr(" ", sizeof( unsigned char), 2u));
! _temp380[ 1u]= Cyc_Absynpp_typ2doc( _temp305); _temp380[ 0u]= _temp372; Cyc_PP_cat(
! _tag_arr( _temp380, sizeof( struct Cyc_PP_Doc*), 5u));}); goto _LL374; _LL374:;}
! goto _LL353;} _LL353:;} goto _LL246; _LL262:{ void* _temp381= _temp315; struct
! Cyc_Absyn_UnknownTunionFieldInfo _temp387; int _temp389; struct _tuple0*
! _temp391; struct _tuple0* _temp393; struct Cyc_Absyn_Tunionfield* _temp395;
! struct Cyc_Absyn_Tunionfield _temp397; struct _tuple0* _temp398; struct Cyc_Absyn_Tuniondecl*
! _temp400; struct Cyc_Absyn_Tuniondecl _temp402; int _temp403; struct _tuple0*
! _temp405; _LL383: if(*(( int*) _temp381) ==  Cyc_Absyn_UnknownTunionfield){
! _LL388: _temp387=(( struct Cyc_Absyn_UnknownTunionfield_struct*) _temp381)->f1;
! _LL394: _temp393= _temp387.tunion_name; goto _LL392; _LL392: _temp391= _temp387.field_name;
! goto _LL390; _LL390: _temp389= _temp387.is_xtunion; goto _LL384;} else{ goto
! _LL385;} _LL385: if(*(( int*) _temp381) ==  Cyc_Absyn_KnownTunionfield){ _LL401:
! _temp400=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp381)->f1; _temp402=*
! _temp400; _LL406: _temp405= _temp402.name; goto _LL404; _LL404: _temp403=
! _temp402.is_xtunion; goto _LL396; _LL396: _temp395=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp381)->f2; _temp397=* _temp395; _LL399: _temp398= _temp397.name; goto _LL386;}
! else{ goto _LL382;} _LL384: _temp405= _temp393; _temp403= _temp389; _temp398=
! _temp391; goto _LL386; _LL386: { struct Cyc_PP_Doc* _temp407= Cyc_PP_text(
! _temp403? _tag_arr("xtunion ", sizeof( unsigned char), 9u): _tag_arr("tunion ",
! sizeof( unsigned char), 8u)); s=({ struct Cyc_PP_Doc* _temp408[ 4u]; _temp408[ 3u]=
! Cyc_Absynpp_qvar2doc( _temp398); _temp408[ 2u]= Cyc_PP_text( _tag_arr(".",
! sizeof( unsigned char), 2u)); _temp408[ 1u]= Cyc_Absynpp_qvar2doc( _temp405);
! _temp408[ 0u]= _temp407; Cyc_PP_cat( _tag_arr( _temp408, sizeof( struct Cyc_PP_Doc*),
! 4u));}); goto _LL382;} _LL382:;} goto _LL246; _LL264: { struct _tagged_arr sns;
! struct _tagged_arr ts;{ void* _temp409= _temp319; _LL411: if( _temp409 == ( void*)
! Cyc_Absyn_Signed){ goto _LL412;} else{ goto _LL413;} _LL413: if( _temp409 == (
! void*) Cyc_Absyn_Unsigned){ goto _LL414;} else{ goto _LL410;} _LL412: sns=
! _tag_arr("", sizeof( unsigned char), 1u); goto _LL410; _LL414: sns= _tag_arr("unsigned ",
! sizeof( unsigned char), 10u); goto _LL410; _LL410:;}{ void* _temp415= _temp317;
! _LL417: if( _temp415 == ( void*) Cyc_Absyn_B1){ goto _LL418;} else{ goto _LL419;}
! _LL419: if( _temp415 == ( void*) Cyc_Absyn_B2){ goto _LL420;} else{ goto _LL421;}
! _LL421: if( _temp415 == ( void*) Cyc_Absyn_B4){ goto _LL422;} else{ goto _LL423;}
! _LL423: if( _temp415 == ( void*) Cyc_Absyn_B8){ goto _LL424;} else{ goto _LL416;}
! _LL418:{ void* _temp425= _temp319; _LL427: if( _temp425 == ( void*) Cyc_Absyn_Signed){
! goto _LL428;} else{ goto _LL429;} _LL429: if( _temp425 == ( void*) Cyc_Absyn_Unsigned){
! goto _LL430;} else{ goto _LL426;} _LL428: sns= _tag_arr("signed ", sizeof(
! unsigned char), 8u); goto _LL426; _LL430: goto _LL426; _LL426:;} ts= _tag_arr("char",
! sizeof( unsigned char), 5u); goto _LL416; _LL420: ts= _tag_arr("short", sizeof(
! unsigned char), 6u); goto _LL416; _LL422: ts= _tag_arr("int", sizeof(
! unsigned char), 4u); goto _LL416; _LL424: ts= Cyc_Absynpp_to_VC? _tag_arr("__int64",
  sizeof( unsigned char), 8u): _tag_arr("long long", sizeof( unsigned char), 10u);
! goto _LL416; _LL416:;} s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp433; _temp433.tag= Cyc_Std_String_pa; _temp433.f1=( struct _tagged_arr) ts;{
! struct Cyc_Std_String_pa_struct _temp432; _temp432.tag= Cyc_Std_String_pa;
! _temp432.f1=( struct _tagged_arr) sns;{ void* _temp431[ 2u]={& _temp432,&
! _temp433}; Cyc_Std_aprintf( _tag_arr("%s%s", sizeof( unsigned char), 5u),
! _tag_arr( _temp431, sizeof( void*), 2u));}}})); goto _LL246;} _LL266: s= Cyc_PP_text(
  _tag_arr("float", sizeof( unsigned char), 6u)); goto _LL246; _LL268: s= Cyc_PP_text(
  _tag_arr("double", sizeof( unsigned char), 7u)); goto _LL246; _LL270: s=({
! struct Cyc_PP_Doc* _temp434[ 2u]; _temp434[ 1u]= Cyc_Absynpp_args2doc( _temp321);
! _temp434[ 0u]= Cyc_PP_text( _tag_arr("$", sizeof( unsigned char), 2u)); Cyc_PP_cat(
! _tag_arr( _temp434, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL246; _LL272:
! if( _temp325 ==  0){ s=({ struct Cyc_PP_Doc* _temp435[ 2u]; _temp435[ 1u]= Cyc_Absynpp_tps2doc(
! _temp323); _temp435[ 0u]= Cyc_PP_text( _tag_arr("struct ", sizeof( unsigned char),
! 8u)); Cyc_PP_cat( _tag_arr( _temp435, sizeof( struct Cyc_PP_Doc*), 2u));});}
! else{ s=({ struct Cyc_PP_Doc* _temp436[ 3u]; _temp436[ 2u]= Cyc_Absynpp_tps2doc(
! _temp323); _temp436[ 1u]= _temp325 ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_qvar2doc((
! struct _tuple0*) _check_null( _temp325)); _temp436[ 0u]= Cyc_PP_text( _tag_arr("struct ",
! sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp436, sizeof( struct Cyc_PP_Doc*),
  3u));});} goto _LL246; _LL274: if( _temp329 ==  0){ s=({ struct Cyc_PP_Doc*
! _temp437[ 2u]; _temp437[ 1u]= Cyc_Absynpp_tps2doc( _temp327); _temp437[ 0u]= Cyc_PP_text(
! _tag_arr("union ", sizeof( unsigned char), 7u)); Cyc_PP_cat( _tag_arr( _temp437,
! sizeof( struct Cyc_PP_Doc*), 2u));});} else{ s=({ struct Cyc_PP_Doc* _temp438[ 3u];
! _temp438[ 2u]= Cyc_Absynpp_tps2doc( _temp327); _temp438[ 1u]= _temp329 ==  0?
  Cyc_PP_nil_doc(): Cyc_Absynpp_qvar2doc(( struct _tuple0*) _check_null( _temp329));
! _temp438[ 0u]= Cyc_PP_text( _tag_arr("union ", sizeof( unsigned char), 7u)); Cyc_PP_cat(
! _tag_arr( _temp438, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL246; _LL276:
! s=({ struct Cyc_PP_Doc* _temp439[ 3u]; _temp439[ 2u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp439[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_structfields2doc(
! _temp331)); _temp439[ 0u]= Cyc_PP_text( _tag_arr("struct {", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp439, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL246; _LL278: s=({ struct Cyc_PP_Doc* _temp440[ 3u]; _temp440[ 2u]=
! Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u)); _temp440[ 1u]= Cyc_PP_nest(
! 2, Cyc_Absynpp_structfields2doc( _temp333)); _temp440[ 0u]= Cyc_PP_text(
! _tag_arr("union {", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp440,
  sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL246; _LL280: s=({ struct Cyc_PP_Doc*
! _temp441[ 2u]; _temp441[ 1u]= Cyc_Absynpp_qvar2doc( _temp335); _temp441[ 0u]=
  Cyc_PP_text( _tag_arr("enum ", sizeof( unsigned char), 6u)); Cyc_PP_cat(
! _tag_arr( _temp441, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL246; _LL282: s=({
! struct Cyc_PP_Doc* _temp442[ 2u]; _temp442[ 1u]= Cyc_Absynpp_tps2doc( _temp339);
! _temp442[ 0u]= Cyc_Absynpp_qvar2doc( _temp341); Cyc_PP_cat( _tag_arr( _temp442,
  sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL246; _LL284: s=({ struct Cyc_PP_Doc*
! _temp443[ 3u]; _temp443[ 2u]= Cyc_PP_text( _tag_arr(">", sizeof( unsigned char),
! 2u)); _temp443[ 1u]= Cyc_Absynpp_rgn2doc( _temp343); _temp443[ 0u]= Cyc_PP_text(
  _tag_arr("region_t<", sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr(
! _temp443, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL246; _LL286: s= Cyc_Absynpp_rgn2doc(
! t); goto _LL246; _LL288: s=({ struct Cyc_PP_Doc* _temp444[ 3u]; _temp444[ 2u]=
! Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u)); _temp444[ 1u]= Cyc_Absynpp_typ2doc(
! _temp345); _temp444[ 0u]= Cyc_PP_text( _tag_arr("regions(", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp444, sizeof( struct Cyc_PP_Doc*),
  3u));}); goto _LL246; _LL290: goto _LL292; _LL292: s= Cyc_Absynpp_eff2doc( t);
  goto _LL246; _LL246:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_vo2doc( struct
  Cyc_Core_Opt* vo){ return vo ==  0? Cyc_PP_nil_doc(): Cyc_PP_text(*(( struct
  _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null( vo))->v));} struct _tuple8{
  void* f1; void* f2; } ; struct Cyc_PP_Doc* Cyc_Absynpp_rgn_cmp2doc( struct
! _tuple8* cmp){ struct _tuple8 _temp447; void* _temp448; void* _temp450; struct
! _tuple8* _temp445= cmp; _temp447=* _temp445; _LL451: _temp450= _temp447.f1; goto
! _LL449; _LL449: _temp448= _temp447.f2; goto _LL446; _LL446: return({ struct Cyc_PP_Doc*
! _temp452[ 3u]; _temp452[ 2u]= Cyc_Absynpp_rgn2doc( _temp448); _temp452[ 1u]= Cyc_PP_text(
! _tag_arr(" < ", sizeof( unsigned char), 4u)); _temp452[ 0u]= Cyc_Absynpp_rgn2doc(
! _temp450); Cyc_PP_cat( _tag_arr( _temp452, sizeof( struct Cyc_PP_Doc*), 3u));});}
  struct Cyc_PP_Doc* Cyc_Absynpp_rgnpo2doc( struct Cyc_List_List* po){ return Cyc_PP_group(
  _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("", sizeof( unsigned char), 1u),
  _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)( struct
  Cyc_PP_Doc*(* f)( struct _tuple8*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_rgn_cmp2doc,
  po));} struct Cyc_PP_Doc* Cyc_Absynpp_funarg2doc( struct _tuple1* t){ struct Cyc_Core_Opt*
! dopt=(* t).f1 ==  0? 0:({ struct Cyc_Core_Opt* _temp453=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp453->v=( void*) Cyc_PP_text(*((
  struct _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null((* t).f1))->v));
! _temp453;}); return Cyc_Absynpp_tqtd2doc((* t).f2,(* t).f3, dopt);} struct Cyc_PP_Doc*
  Cyc_Absynpp_funargs2doc( struct Cyc_List_List* args, int c_varargs, struct Cyc_Absyn_VarargInfo*
  cyc_varargs, struct Cyc_Core_Opt* effopt, struct Cyc_List_List* rgn_po){ struct
! Cyc_List_List* _temp454=(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)(
  struct _tuple1*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_funarg2doc,
! args); struct Cyc_PP_Doc* eff_doc; if( c_varargs){ _temp454=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp454,({
! struct Cyc_List_List* _temp455=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp455->hd=( void*) Cyc_PP_text( _tag_arr("...",
! sizeof( unsigned char), 4u)); _temp455->tl= 0; _temp455;}));} else{ if(
! cyc_varargs !=  0){ struct Cyc_PP_Doc* _temp456=({ struct Cyc_PP_Doc* _temp458[
! 3u]; _temp458[ 2u]= Cyc_Absynpp_funarg2doc(({ struct _tuple1* _temp459=( struct
! _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp459->f1=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->name; _temp459->f2=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->tq; _temp459->f3=( void*)(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->type; _temp459;})); _temp458[ 1u]=(( struct Cyc_Absyn_VarargInfo*)
  _check_null( cyc_varargs))->inject? Cyc_PP_text( _tag_arr(" inject ", sizeof(
  unsigned char), 9u)): Cyc_PP_text( _tag_arr(" ", sizeof( unsigned char), 2u));
! _temp458[ 0u]= Cyc_PP_text( _tag_arr("...", sizeof( unsigned char), 4u)); Cyc_PP_cat(
! _tag_arr( _temp458, sizeof( struct Cyc_PP_Doc*), 3u));}); _temp454=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp454,({
! struct Cyc_List_List* _temp457=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp457->hd=( void*) _temp456; _temp457->tl= 0;
! _temp457;}));}}{ struct Cyc_PP_Doc* _temp460= Cyc_PP_group( _tag_arr("", sizeof(
  unsigned char), 1u), _tag_arr("", sizeof( unsigned char), 1u), _tag_arr(",",
! sizeof( unsigned char), 2u), _temp454); if( effopt !=  0){ _temp460=({ struct
! Cyc_PP_Doc* _temp461[ 3u]; _temp461[ 2u]= Cyc_Absynpp_eff2doc(( void*)(( struct
! Cyc_Core_Opt*) _check_null( effopt))->v); _temp461[ 1u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp461[ 0u]= _temp460; Cyc_PP_cat( _tag_arr(
! _temp461, sizeof( struct Cyc_PP_Doc*), 3u));});} if( rgn_po !=  0){ _temp460=({
! struct Cyc_PP_Doc* _temp462[ 3u]; _temp462[ 2u]= Cyc_Absynpp_rgnpo2doc( rgn_po);
! _temp462[ 1u]= Cyc_PP_text( _tag_arr(":", sizeof( unsigned char), 2u)); _temp462[
! 0u]= _temp460; Cyc_PP_cat( _tag_arr( _temp462, sizeof( struct Cyc_PP_Doc*), 3u));});}
! return({ struct Cyc_PP_Doc* _temp463[ 3u]; _temp463[ 2u]= Cyc_PP_text( _tag_arr(")",
! sizeof( unsigned char), 2u)); _temp463[ 1u]= _temp460; _temp463[ 0u]= Cyc_PP_text(
! _tag_arr("(", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp463,
  sizeof( struct Cyc_PP_Doc*), 3u));});}} struct _tuple1* Cyc_Absynpp_arg_mk_opt(
! struct _tuple3* arg){ return({ struct _tuple1* _temp464=( struct _tuple1*)
! _cycalloc( sizeof( struct _tuple1)); _temp464->f1=({ struct Cyc_Core_Opt*
! _temp465=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp465->v=( void*)(* arg).f1; _temp465;}); _temp464->f2=(* arg).f2; _temp464->f3=(*
! arg).f3; _temp464;});} struct Cyc_PP_Doc* Cyc_Absynpp_var2doc( struct
  _tagged_arr* v){ return Cyc_PP_text(* v);} struct Cyc_PP_Doc* Cyc_Absynpp_qvar2doc(
! struct _tuple0* q){ struct Cyc_List_List* _temp466= 0; int match;{ void*
! _temp467=(* q).f1; struct Cyc_List_List* _temp475; struct Cyc_List_List*
! _temp477; _LL469: if( _temp467 == ( void*) Cyc_Absyn_Loc_n){ goto _LL470;} else{
! goto _LL471;} _LL471: if(( unsigned int) _temp467 >  1u?*(( int*) _temp467) == 
! Cyc_Absyn_Rel_n: 0){ _LL476: _temp475=(( struct Cyc_Absyn_Rel_n_struct*)
! _temp467)->f1; goto _LL472;} else{ goto _LL473;} _LL473: if(( unsigned int)
! _temp467 >  1u?*(( int*) _temp467) ==  Cyc_Absyn_Abs_n: 0){ _LL478: _temp477=((
! struct Cyc_Absyn_Abs_n_struct*) _temp467)->f1; goto _LL474;} else{ goto _LL468;}
! _LL470: _temp475= 0; goto _LL472; _LL472: match= 0; _temp466= _temp475; goto
! _LL468; _LL474: match= Cyc_Absynpp_use_curr_namespace?(( int(*)( int(* cmp)(
  struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l1, struct Cyc_List_List*
! l2)) Cyc_List_list_prefix)( Cyc_Std_strptrcmp, _temp477, Cyc_Absynpp_curr_namespace):
! 0; _temp466=( Cyc_Absynpp_qvar_to_Cids? Cyc_Absynpp_add_cyc_prefix: 0)?({ struct
! Cyc_List_List* _temp479=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp479->hd=( void*) Cyc_Absynpp_cyc_stringptr; _temp479->tl= _temp477;
! _temp479;}): _temp477; goto _LL468; _LL468:;} if( Cyc_Absynpp_qvar_to_Cids){
  return Cyc_PP_text(( struct _tagged_arr) Cyc_Std_str_sepstr((( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp466,({
! struct Cyc_List_List* _temp480=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp480->hd=( void*)(* q).f2; _temp480->tl= 0; _temp480;})),
  _tag_arr("_", sizeof( unsigned char), 2u)));} else{ if( match){ return Cyc_Absynpp_var2doc((*
  q).f2);} else{ return Cyc_PP_text(( struct _tagged_arr) Cyc_Std_str_sepstr(((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! _temp466,({ struct Cyc_List_List* _temp481=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp481->hd=( void*)(* q).f2; _temp481->tl= 0;
! _temp481;})), _tag_arr("::", sizeof( unsigned char), 3u)));}}} struct Cyc_PP_Doc*
  Cyc_Absynpp_typedef_name2doc( struct _tuple0* v){ if( Cyc_Absynpp_qvar_to_Cids){
  return Cyc_Absynpp_qvar2doc( v);} if( Cyc_Absynpp_use_curr_namespace){ void*
! _temp482=(* v).f1; struct Cyc_List_List* _temp492; struct Cyc_List_List*
! _temp494; _LL484: if( _temp482 == ( void*) Cyc_Absyn_Loc_n){ goto _LL485;} else{
! goto _LL486;} _LL486: if(( unsigned int) _temp482 >  1u?*(( int*) _temp482) == 
! Cyc_Absyn_Rel_n: 0){ _LL493: _temp492=(( struct Cyc_Absyn_Rel_n_struct*)
! _temp482)->f1; if( _temp492 ==  0){ goto _LL487;} else{ goto _LL488;}} else{
! goto _LL488;} _LL488: if(( unsigned int) _temp482 >  1u?*(( int*) _temp482) == 
! Cyc_Absyn_Abs_n: 0){ _LL495: _temp494=(( struct Cyc_Absyn_Abs_n_struct*)
! _temp482)->f1; goto _LL489;} else{ goto _LL490;} _LL490: goto _LL491; _LL485:
! goto _LL487; _LL487: return Cyc_Absynpp_var2doc((* v).f2); _LL489: if((( int(*)(
  int(* cmp)( struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l1,
! struct Cyc_List_List* l2)) Cyc_List_list_cmp)( Cyc_Std_strptrcmp, _temp494, Cyc_Absynpp_curr_namespace)
! ==  0){ return Cyc_Absynpp_var2doc((* v).f2);} else{ goto _LL491;} _LL491:
! return({ struct Cyc_PP_Doc* _temp496[ 2u]; _temp496[ 1u]= Cyc_Absynpp_qvar2doc(
! v); _temp496[ 0u]= Cyc_PP_text( _tag_arr("/* bad namespace : */ ", sizeof(
! unsigned char), 23u)); Cyc_PP_cat( _tag_arr( _temp496, sizeof( struct Cyc_PP_Doc*),
! 2u));}); _LL483:;} else{ return Cyc_Absynpp_var2doc((* v).f2);}} struct Cyc_PP_Doc*
  Cyc_Absynpp_typ2doc( void* t){ return Cyc_Absynpp_tqtd2doc( Cyc_Absyn_empty_tqual(),
! t, 0);} int Cyc_Absynpp_exp_prec( struct Cyc_Absyn_Exp* e){ void* _temp497=(
! void*) e->r; void* _temp573; struct Cyc_Absyn_Exp* _temp575; struct Cyc_Absyn_Exp*
! _temp577; _LL499: if(*(( int*) _temp497) ==  Cyc_Absyn_Const_e){ goto _LL500;}
! else{ goto _LL501;} _LL501: if(*(( int*) _temp497) ==  Cyc_Absyn_Var_e){ goto
! _LL502;} else{ goto _LL503;} _LL503: if(*(( int*) _temp497) ==  Cyc_Absyn_UnknownId_e){
! goto _LL504;} else{ goto _LL505;} _LL505: if(*(( int*) _temp497) ==  Cyc_Absyn_Primop_e){
! _LL574: _temp573=( void*)(( struct Cyc_Absyn_Primop_e_struct*) _temp497)->f1;
! goto _LL506;} else{ goto _LL507;} _LL507: if(*(( int*) _temp497) ==  Cyc_Absyn_AssignOp_e){
! goto _LL508;} else{ goto _LL509;} _LL509: if(*(( int*) _temp497) ==  Cyc_Absyn_Increment_e){
! goto _LL510;} else{ goto _LL511;} _LL511: if(*(( int*) _temp497) ==  Cyc_Absyn_Conditional_e){
! goto _LL512;} else{ goto _LL513;} _LL513: if(*(( int*) _temp497) ==  Cyc_Absyn_SeqExp_e){
! goto _LL514;} else{ goto _LL515;} _LL515: if(*(( int*) _temp497) ==  Cyc_Absyn_UnknownCall_e){
! goto _LL516;} else{ goto _LL517;} _LL517: if(*(( int*) _temp497) ==  Cyc_Absyn_FnCall_e){
! goto _LL518;} else{ goto _LL519;} _LL519: if(*(( int*) _temp497) ==  Cyc_Absyn_Throw_e){
! goto _LL520;} else{ goto _LL521;} _LL521: if(*(( int*) _temp497) ==  Cyc_Absyn_NoInstantiate_e){
! _LL576: _temp575=(( struct Cyc_Absyn_NoInstantiate_e_struct*) _temp497)->f1;
! goto _LL522;} else{ goto _LL523;} _LL523: if(*(( int*) _temp497) ==  Cyc_Absyn_Instantiate_e){
! _LL578: _temp577=(( struct Cyc_Absyn_Instantiate_e_struct*) _temp497)->f1; goto
! _LL524;} else{ goto _LL525;} _LL525: if(*(( int*) _temp497) ==  Cyc_Absyn_Cast_e){
! goto _LL526;} else{ goto _LL527;} _LL527: if(*(( int*) _temp497) ==  Cyc_Absyn_New_e){
! goto _LL528;} else{ goto _LL529;} _LL529: if(*(( int*) _temp497) ==  Cyc_Absyn_Address_e){
! goto _LL530;} else{ goto _LL531;} _LL531: if(*(( int*) _temp497) ==  Cyc_Absyn_Sizeoftyp_e){
! goto _LL532;} else{ goto _LL533;} _LL533: if(*(( int*) _temp497) ==  Cyc_Absyn_Sizeofexp_e){
! goto _LL534;} else{ goto _LL535;} _LL535: if(*(( int*) _temp497) ==  Cyc_Absyn_Offsetof_e){
! goto _LL536;} else{ goto _LL537;} _LL537: if(*(( int*) _temp497) ==  Cyc_Absyn_Gentyp_e){
! goto _LL538;} else{ goto _LL539;} _LL539: if(*(( int*) _temp497) ==  Cyc_Absyn_Deref_e){
! goto _LL540;} else{ goto _LL541;} _LL541: if(*(( int*) _temp497) ==  Cyc_Absyn_StructMember_e){
! goto _LL542;} else{ goto _LL543;} _LL543: if(*(( int*) _temp497) ==  Cyc_Absyn_StructArrow_e){
! goto _LL544;} else{ goto _LL545;} _LL545: if(*(( int*) _temp497) ==  Cyc_Absyn_Subscript_e){
! goto _LL546;} else{ goto _LL547;} _LL547: if(*(( int*) _temp497) ==  Cyc_Absyn_Tuple_e){
! goto _LL548;} else{ goto _LL549;} _LL549: if(*(( int*) _temp497) ==  Cyc_Absyn_CompoundLit_e){
! goto _LL550;} else{ goto _LL551;} _LL551: if(*(( int*) _temp497) ==  Cyc_Absyn_Array_e){
! goto _LL552;} else{ goto _LL553;} _LL553: if(*(( int*) _temp497) ==  Cyc_Absyn_Comprehension_e){
! goto _LL554;} else{ goto _LL555;} _LL555: if(*(( int*) _temp497) ==  Cyc_Absyn_Struct_e){
! goto _LL556;} else{ goto _LL557;} _LL557: if(*(( int*) _temp497) ==  Cyc_Absyn_AnonStruct_e){
! goto _LL558;} else{ goto _LL559;} _LL559: if(*(( int*) _temp497) ==  Cyc_Absyn_Tunion_e){
! goto _LL560;} else{ goto _LL561;} _LL561: if(*(( int*) _temp497) ==  Cyc_Absyn_Enum_e){
! goto _LL562;} else{ goto _LL563;} _LL563: if(*(( int*) _temp497) ==  Cyc_Absyn_Malloc_e){
! goto _LL564;} else{ goto _LL565;} _LL565: if(*(( int*) _temp497) ==  Cyc_Absyn_UnresolvedMem_e){
! goto _LL566;} else{ goto _LL567;} _LL567: if(*(( int*) _temp497) ==  Cyc_Absyn_StmtExp_e){
! goto _LL568;} else{ goto _LL569;} _LL569: if(*(( int*) _temp497) ==  Cyc_Absyn_Codegen_e){
! goto _LL570;} else{ goto _LL571;} _LL571: if(*(( int*) _temp497) ==  Cyc_Absyn_Fill_e){
! goto _LL572;} else{ goto _LL498;} _LL500: return 10000; _LL502: return 10000;
! _LL504: return 10000; _LL506: { void* _temp579= _temp573; _LL581: if( _temp579
! == ( void*) Cyc_Absyn_Plus){ goto _LL582;} else{ goto _LL583;} _LL583: if(
! _temp579 == ( void*) Cyc_Absyn_Times){ goto _LL584;} else{ goto _LL585;} _LL585:
! if( _temp579 == ( void*) Cyc_Absyn_Minus){ goto _LL586;} else{ goto _LL587;}
! _LL587: if( _temp579 == ( void*) Cyc_Absyn_Div){ goto _LL588;} else{ goto _LL589;}
! _LL589: if( _temp579 == ( void*) Cyc_Absyn_Mod){ goto _LL590;} else{ goto _LL591;}
! _LL591: if( _temp579 == ( void*) Cyc_Absyn_Eq){ goto _LL592;} else{ goto _LL593;}
! _LL593: if( _temp579 == ( void*) Cyc_Absyn_Neq){ goto _LL594;} else{ goto _LL595;}
! _LL595: if( _temp579 == ( void*) Cyc_Absyn_Gt){ goto _LL596;} else{ goto _LL597;}
! _LL597: if( _temp579 == ( void*) Cyc_Absyn_Lt){ goto _LL598;} else{ goto _LL599;}
! _LL599: if( _temp579 == ( void*) Cyc_Absyn_Gte){ goto _LL600;} else{ goto _LL601;}
! _LL601: if( _temp579 == ( void*) Cyc_Absyn_Lte){ goto _LL602;} else{ goto _LL603;}
! _LL603: if( _temp579 == ( void*) Cyc_Absyn_Not){ goto _LL604;} else{ goto _LL605;}
! _LL605: if( _temp579 == ( void*) Cyc_Absyn_Bitnot){ goto _LL606;} else{ goto
! _LL607;} _LL607: if( _temp579 == ( void*) Cyc_Absyn_Bitand){ goto _LL608;} else{
! goto _LL609;} _LL609: if( _temp579 == ( void*) Cyc_Absyn_Bitor){ goto _LL610;}
! else{ goto _LL611;} _LL611: if( _temp579 == ( void*) Cyc_Absyn_Bitxor){ goto
! _LL612;} else{ goto _LL613;} _LL613: if( _temp579 == ( void*) Cyc_Absyn_Bitlshift){
! goto _LL614;} else{ goto _LL615;} _LL615: if( _temp579 == ( void*) Cyc_Absyn_Bitlrshift){
! goto _LL616;} else{ goto _LL617;} _LL617: if( _temp579 == ( void*) Cyc_Absyn_Bitarshift){
! goto _LL618;} else{ goto _LL619;} _LL619: if( _temp579 == ( void*) Cyc_Absyn_Size){
! goto _LL620;} else{ goto _LL580;} _LL582: return 100; _LL584: return 110; _LL586:
! return 100; _LL588: return 110; _LL590: return 110; _LL592: return 70; _LL594:
! return 70; _LL596: return 80; _LL598: return 80; _LL600: return 80; _LL602:
! return 80; _LL604: return 130; _LL606: return 130; _LL608: return 60; _LL610:
! return 40; _LL612: return 50; _LL614: return 90; _LL616: return 80; _LL618:
! return 80; _LL620: return 140; _LL580:;} _LL508: return 20; _LL510: return 130;
! _LL512: return 30; _LL514: return 10; _LL516: return 140; _LL518: return 140;
! _LL520: return 130; _LL522: return Cyc_Absynpp_exp_prec( _temp575); _LL524:
! return Cyc_Absynpp_exp_prec( _temp577); _LL526: return 120; _LL528: return 15;
! _LL530: return 130; _LL532: return 130; _LL534: return 130; _LL536: return 130;
! _LL538: return 130; _LL540: return 130; _LL542: return 140; _LL544: return 140;
! _LL546: return 140; _LL548: return 150; _LL550: goto _LL552; _LL552: goto _LL554;
! _LL554: goto _LL556; _LL556: goto _LL558; _LL558: goto _LL560; _LL560: goto
! _LL562; _LL562: goto _LL564; _LL564: return 140; _LL566: return 140; _LL568:
! return 10000; _LL570: return 140; _LL572: return 140; _LL498:;} struct Cyc_PP_Doc*
  Cyc_Absynpp_exp2doc( struct Cyc_Absyn_Exp* e){ return Cyc_Absynpp_exp2doc_prec(
  0, e);} struct Cyc_PP_Doc* Cyc_Absynpp_exp2doc_prec( int inprec, struct Cyc_Absyn_Exp*
! e){ int myprec= Cyc_Absynpp_exp_prec( e); struct Cyc_PP_Doc* s;{ void* _temp621=(
! void*) e->r; void* _temp699; struct _tuple0* _temp701; struct _tuple0* _temp703;
! struct Cyc_List_List* _temp705; void* _temp707; struct Cyc_Absyn_Exp* _temp709;
! struct Cyc_Core_Opt* _temp711; struct Cyc_Absyn_Exp* _temp713; void* _temp715;
! struct Cyc_Absyn_Exp* _temp717; struct Cyc_Absyn_Exp* _temp719; struct Cyc_Absyn_Exp*
! _temp721; struct Cyc_Absyn_Exp* _temp723; struct Cyc_Absyn_Exp* _temp725; struct
! Cyc_Absyn_Exp* _temp727; struct Cyc_List_List* _temp729; struct Cyc_Absyn_Exp*
! _temp731; struct Cyc_List_List* _temp733; struct Cyc_Absyn_Exp* _temp735; struct
! Cyc_Absyn_Exp* _temp737; struct Cyc_Absyn_Exp* _temp739; struct Cyc_Absyn_Exp*
! _temp741; struct Cyc_Absyn_Exp* _temp743; void* _temp745; struct Cyc_Absyn_Exp*
! _temp747; struct Cyc_Absyn_Exp* _temp749; struct Cyc_Absyn_Exp* _temp751; void*
! _temp753; struct Cyc_Absyn_Exp* _temp755; void* _temp757; struct _tagged_arr*
! _temp759; void* _temp761; void* _temp763; unsigned int _temp765; void* _temp767;
! void* _temp769; struct Cyc_List_List* _temp771; struct Cyc_Absyn_Exp* _temp773;
! struct _tagged_arr* _temp775; struct Cyc_Absyn_Exp* _temp777; struct _tagged_arr*
! _temp779; struct Cyc_Absyn_Exp* _temp781; struct Cyc_Absyn_Exp* _temp783; struct
! Cyc_Absyn_Exp* _temp785; struct Cyc_List_List* _temp787; struct Cyc_List_List*
! _temp789; struct _tuple1* _temp791; struct Cyc_List_List* _temp793; struct Cyc_Absyn_Exp*
! _temp795; struct Cyc_Absyn_Exp* _temp797; struct Cyc_Absyn_Vardecl* _temp799;
! struct Cyc_List_List* _temp801; struct _tuple0* _temp803; struct Cyc_List_List*
! _temp805; struct Cyc_Absyn_Tunionfield* _temp807; struct Cyc_List_List* _temp809;
! struct _tuple0* _temp811; void* _temp813; struct Cyc_Absyn_Exp* _temp815; struct
! Cyc_List_List* _temp817; struct Cyc_Core_Opt* _temp819; struct Cyc_Absyn_Stmt*
! _temp821; struct Cyc_Absyn_Fndecl* _temp823; struct Cyc_Absyn_Exp* _temp825;
! _LL623: if(*(( int*) _temp621) ==  Cyc_Absyn_Const_e){ _LL700: _temp699=( void*)((
! struct Cyc_Absyn_Const_e_struct*) _temp621)->f1; goto _LL624;} else{ goto _LL625;}
! _LL625: if(*(( int*) _temp621) ==  Cyc_Absyn_Var_e){ _LL702: _temp701=(( struct
! Cyc_Absyn_Var_e_struct*) _temp621)->f1; goto _LL626;} else{ goto _LL627;} _LL627:
! if(*(( int*) _temp621) ==  Cyc_Absyn_UnknownId_e){ _LL704: _temp703=(( struct
! Cyc_Absyn_UnknownId_e_struct*) _temp621)->f1; goto _LL628;} else{ goto _LL629;}
! _LL629: if(*(( int*) _temp621) ==  Cyc_Absyn_Primop_e){ _LL708: _temp707=( void*)((
! struct Cyc_Absyn_Primop_e_struct*) _temp621)->f1; goto _LL706; _LL706: _temp705=((
! struct Cyc_Absyn_Primop_e_struct*) _temp621)->f2; goto _LL630;} else{ goto
! _LL631;} _LL631: if(*(( int*) _temp621) ==  Cyc_Absyn_AssignOp_e){ _LL714:
! _temp713=(( struct Cyc_Absyn_AssignOp_e_struct*) _temp621)->f1; goto _LL712;
! _LL712: _temp711=(( struct Cyc_Absyn_AssignOp_e_struct*) _temp621)->f2; goto
! _LL710; _LL710: _temp709=(( struct Cyc_Absyn_AssignOp_e_struct*) _temp621)->f3;
! goto _LL632;} else{ goto _LL633;} _LL633: if(*(( int*) _temp621) ==  Cyc_Absyn_Increment_e){
! _LL718: _temp717=(( struct Cyc_Absyn_Increment_e_struct*) _temp621)->f1; goto
! _LL716; _LL716: _temp715=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp621)->f2; goto _LL634;} else{ goto _LL635;} _LL635: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Conditional_e){ _LL724: _temp723=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp621)->f1; goto _LL722; _LL722: _temp721=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp621)->f2; goto _LL720; _LL720: _temp719=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp621)->f3; goto _LL636;} else{ goto _LL637;} _LL637: if(*(( int*) _temp621)
! ==  Cyc_Absyn_SeqExp_e){ _LL728: _temp727=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp621)->f1; goto _LL726; _LL726: _temp725=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp621)->f2; goto _LL638;} else{ goto _LL639;} _LL639: if(*(( int*) _temp621)
! ==  Cyc_Absyn_UnknownCall_e){ _LL732: _temp731=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp621)->f1; goto _LL730; _LL730: _temp729=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp621)->f2; goto _LL640;} else{ goto _LL641;} _LL641: if(*(( int*) _temp621)
! ==  Cyc_Absyn_FnCall_e){ _LL736: _temp735=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp621)->f1; goto _LL734; _LL734: _temp733=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp621)->f2; goto _LL642;} else{ goto _LL643;} _LL643: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Throw_e){ _LL738: _temp737=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp621)->f1; goto _LL644;} else{ goto _LL645;} _LL645: if(*(( int*) _temp621)
! ==  Cyc_Absyn_NoInstantiate_e){ _LL740: _temp739=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp621)->f1; goto _LL646;} else{ goto _LL647;} _LL647: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Instantiate_e){ _LL742: _temp741=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp621)->f1; goto _LL648;} else{ goto _LL649;} _LL649: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Cast_e){ _LL746: _temp745=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp621)->f1; goto _LL744; _LL744: _temp743=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp621)->f2; goto _LL650;} else{ goto _LL651;} _LL651: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Address_e){ _LL748: _temp747=(( struct Cyc_Absyn_Address_e_struct*)
! _temp621)->f1; goto _LL652;} else{ goto _LL653;} _LL653: if(*(( int*) _temp621)
! ==  Cyc_Absyn_New_e){ _LL752: _temp751=(( struct Cyc_Absyn_New_e_struct*)
! _temp621)->f1; goto _LL750; _LL750: _temp749=(( struct Cyc_Absyn_New_e_struct*)
! _temp621)->f2; goto _LL654;} else{ goto _LL655;} _LL655: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Sizeoftyp_e){ _LL754: _temp753=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp621)->f1; goto _LL656;} else{ goto _LL657;} _LL657: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Sizeofexp_e){ _LL756: _temp755=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp621)->f1; goto _LL658;} else{ goto _LL659;} _LL659: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Offsetof_e){ _LL762: _temp761=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp621)->f1; goto _LL758; _LL758: _temp757=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp621)->f2; if(*(( int*) _temp757) ==  Cyc_Absyn_StructField){ _LL760:
! _temp759=(( struct Cyc_Absyn_StructField_struct*) _temp757)->f1; goto _LL660;}
! else{ goto _LL661;}} else{ goto _LL661;} _LL661: if(*(( int*) _temp621) ==  Cyc_Absyn_Offsetof_e){
! _LL768: _temp767=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*) _temp621)->f1;
! goto _LL764; _LL764: _temp763=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp621)->f2; if(*(( int*) _temp763) ==  Cyc_Absyn_TupleIndex){ _LL766:
! _temp765=(( struct Cyc_Absyn_TupleIndex_struct*) _temp763)->f1; goto _LL662;}
! else{ goto _LL663;}} else{ goto _LL663;} _LL663: if(*(( int*) _temp621) ==  Cyc_Absyn_Gentyp_e){
! _LL772: _temp771=(( struct Cyc_Absyn_Gentyp_e_struct*) _temp621)->f1; goto
! _LL770; _LL770: _temp769=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*) _temp621)->f2;
! goto _LL664;} else{ goto _LL665;} _LL665: if(*(( int*) _temp621) ==  Cyc_Absyn_Deref_e){
! _LL774: _temp773=(( struct Cyc_Absyn_Deref_e_struct*) _temp621)->f1; goto _LL666;}
! else{ goto _LL667;} _LL667: if(*(( int*) _temp621) ==  Cyc_Absyn_StructMember_e){
! _LL778: _temp777=(( struct Cyc_Absyn_StructMember_e_struct*) _temp621)->f1; goto
! _LL776; _LL776: _temp775=(( struct Cyc_Absyn_StructMember_e_struct*) _temp621)->f2;
! goto _LL668;} else{ goto _LL669;} _LL669: if(*(( int*) _temp621) ==  Cyc_Absyn_StructArrow_e){
! _LL782: _temp781=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp621)->f1; goto
! _LL780; _LL780: _temp779=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp621)->f2;
! goto _LL670;} else{ goto _LL671;} _LL671: if(*(( int*) _temp621) ==  Cyc_Absyn_Subscript_e){
! _LL786: _temp785=(( struct Cyc_Absyn_Subscript_e_struct*) _temp621)->f1; goto
! _LL784; _LL784: _temp783=(( struct Cyc_Absyn_Subscript_e_struct*) _temp621)->f2;
! goto _LL672;} else{ goto _LL673;} _LL673: if(*(( int*) _temp621) ==  Cyc_Absyn_Tuple_e){
! _LL788: _temp787=(( struct Cyc_Absyn_Tuple_e_struct*) _temp621)->f1; goto _LL674;}
! else{ goto _LL675;} _LL675: if(*(( int*) _temp621) ==  Cyc_Absyn_CompoundLit_e){
! _LL792: _temp791=(( struct Cyc_Absyn_CompoundLit_e_struct*) _temp621)->f1; goto
! _LL790; _LL790: _temp789=(( struct Cyc_Absyn_CompoundLit_e_struct*) _temp621)->f2;
! goto _LL676;} else{ goto _LL677;} _LL677: if(*(( int*) _temp621) ==  Cyc_Absyn_Array_e){
! _LL794: _temp793=(( struct Cyc_Absyn_Array_e_struct*) _temp621)->f1; goto _LL678;}
! else{ goto _LL679;} _LL679: if(*(( int*) _temp621) ==  Cyc_Absyn_Comprehension_e){
! _LL800: _temp799=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp621)->f1;
! goto _LL798; _LL798: _temp797=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp621)->f2; goto _LL796; _LL796: _temp795=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp621)->f3; goto _LL680;} else{ goto _LL681;} _LL681: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Struct_e){ _LL804: _temp803=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp621)->f1; goto _LL802; _LL802: _temp801=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp621)->f3; goto _LL682;} else{ goto _LL683;} _LL683: if(*(( int*) _temp621)
! ==  Cyc_Absyn_AnonStruct_e){ _LL806: _temp805=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp621)->f2; goto _LL684;} else{ goto _LL685;} _LL685: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Tunion_e){ _LL810: _temp809=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp621)->f3; goto _LL808; _LL808: _temp807=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp621)->f5; goto _LL686;} else{ goto _LL687;} _LL687: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Enum_e){ _LL812: _temp811=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp621)->f1; goto _LL688;} else{ goto _LL689;} _LL689: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Malloc_e){ _LL816: _temp815=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp621)->f1; goto _LL814; _LL814: _temp813=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp621)->f2; goto _LL690;} else{ goto _LL691;} _LL691: if(*(( int*) _temp621)
! ==  Cyc_Absyn_UnresolvedMem_e){ _LL820: _temp819=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp621)->f1; goto _LL818; _LL818: _temp817=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp621)->f2; goto _LL692;} else{ goto _LL693;} _LL693: if(*(( int*) _temp621)
! ==  Cyc_Absyn_StmtExp_e){ _LL822: _temp821=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp621)->f1; goto _LL694;} else{ goto _LL695;} _LL695: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Codegen_e){ _LL824: _temp823=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp621)->f1; goto _LL696;} else{ goto _LL697;} _LL697: if(*(( int*) _temp621)
! ==  Cyc_Absyn_Fill_e){ _LL826: _temp825=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp621)->f1; goto _LL698;} else{ goto _LL622;} _LL624: s= Cyc_Absynpp_cnst2doc(
! _temp699); goto _LL622; _LL626: _temp703= _temp701; goto _LL628; _LL628: s= Cyc_Absynpp_qvar2doc(
! _temp703); goto _LL622; _LL630: s= Cyc_Absynpp_primapp2doc( myprec, _temp707,
! _temp705); goto _LL622; _LL632: s=({ struct Cyc_PP_Doc* _temp827[ 5u]; _temp827[
! 4u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp709); _temp827[ 3u]= Cyc_PP_text(
! _tag_arr("= ", sizeof( unsigned char), 3u)); _temp827[ 2u]= _temp711 ==  0? Cyc_PP_text(
  _tag_arr("", sizeof( unsigned char), 1u)): Cyc_Absynpp_prim2doc(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp711))->v); _temp827[ 1u]= Cyc_PP_text(
! _tag_arr(" ", sizeof( unsigned char), 2u)); _temp827[ 0u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp713); Cyc_PP_cat( _tag_arr( _temp827, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL622; _LL634: { struct Cyc_PP_Doc* _temp828= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp717);{ void* _temp829= _temp715; _LL831: if( _temp829 == ( void*)
! Cyc_Absyn_PreInc){ goto _LL832;} else{ goto _LL833;} _LL833: if( _temp829 == (
! void*) Cyc_Absyn_PreDec){ goto _LL834;} else{ goto _LL835;} _LL835: if( _temp829
! == ( void*) Cyc_Absyn_PostInc){ goto _LL836;} else{ goto _LL837;} _LL837: if(
! _temp829 == ( void*) Cyc_Absyn_PostDec){ goto _LL838;} else{ goto _LL830;}
! _LL832: s=({ struct Cyc_PP_Doc* _temp839[ 2u]; _temp839[ 1u]= _temp828; _temp839[
  0u]= Cyc_PP_text( _tag_arr("++", sizeof( unsigned char), 3u)); Cyc_PP_cat(
! _tag_arr( _temp839, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL830; _LL834: s=({
! struct Cyc_PP_Doc* _temp840[ 2u]; _temp840[ 1u]= _temp828; _temp840[ 0u]= Cyc_PP_text(
! _tag_arr("--", sizeof( unsigned char), 3u)); Cyc_PP_cat( _tag_arr( _temp840,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL830; _LL836: s=({ struct Cyc_PP_Doc*
! _temp841[ 2u]; _temp841[ 1u]= Cyc_PP_text( _tag_arr("++", sizeof( unsigned char),
! 3u)); _temp841[ 0u]= _temp828; Cyc_PP_cat( _tag_arr( _temp841, sizeof( struct
! Cyc_PP_Doc*), 2u));}); goto _LL830; _LL838: s=({ struct Cyc_PP_Doc* _temp842[ 2u];
! _temp842[ 1u]= Cyc_PP_text( _tag_arr("--", sizeof( unsigned char), 3u));
! _temp842[ 0u]= _temp828; Cyc_PP_cat( _tag_arr( _temp842, sizeof( struct Cyc_PP_Doc*),
! 2u));}); goto _LL830; _LL830:;} goto _LL622;} _LL636:{ struct _tuple8 _temp844=({
! struct _tuple8 _temp843; _temp843.f1=( void*) _temp721->r; _temp843.f2=( void*)
! _temp719->r; _temp843;}); _LL846: goto _LL847; _LL847: s=({ struct Cyc_PP_Doc*
! _temp848[ 5u]; _temp848[ 4u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp719);
! _temp848[ 3u]= Cyc_PP_text( _tag_arr(" : ", sizeof( unsigned char), 4u));
! _temp848[ 2u]= Cyc_Absynpp_exp2doc_prec( 0, _temp721); _temp848[ 1u]= Cyc_PP_text(
! _tag_arr(" ? ", sizeof( unsigned char), 4u)); _temp848[ 0u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp723); Cyc_PP_cat( _tag_arr( _temp848, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL845; _LL845:;} goto _LL622; _LL638: s=({ struct Cyc_PP_Doc*
! _temp849[ 5u]; _temp849[ 4u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp849[ 3u]= Cyc_Absynpp_exp2doc( _temp725); _temp849[ 2u]= Cyc_PP_text(
! _tag_arr(", ", sizeof( unsigned char), 3u)); _temp849[ 1u]= Cyc_Absynpp_exp2doc(
! _temp727); _temp849[ 0u]= Cyc_PP_text( _tag_arr("(", sizeof( unsigned char), 2u));
! Cyc_PP_cat( _tag_arr( _temp849, sizeof( struct Cyc_PP_Doc*), 5u));}); goto
! _LL622; _LL640: s=({ struct Cyc_PP_Doc* _temp850[ 4u]; _temp850[ 3u]= Cyc_PP_text(
! _tag_arr(")", sizeof( unsigned char), 2u)); _temp850[ 2u]= Cyc_Absynpp_exps2doc_prec(
! 20, _temp729); _temp850[ 1u]= Cyc_PP_text( _tag_arr("(", sizeof( unsigned char),
! 2u)); _temp850[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp731); Cyc_PP_cat(
! _tag_arr( _temp850, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL622; _LL642: s=({
! struct Cyc_PP_Doc* _temp851[ 4u]; _temp851[ 3u]= Cyc_PP_text( _tag_arr(")",
! sizeof( unsigned char), 2u)); _temp851[ 2u]= Cyc_Absynpp_exps2doc_prec( 20,
! _temp733); _temp851[ 1u]= Cyc_PP_text( _tag_arr("(", sizeof( unsigned char), 2u));
! _temp851[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp735); Cyc_PP_cat( _tag_arr(
! _temp851, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL622; _LL644: s=({ struct
! Cyc_PP_Doc* _temp852[ 2u]; _temp852[ 1u]= Cyc_Absynpp_exp2doc_prec( myprec,
! _temp737); _temp852[ 0u]= Cyc_PP_text( _tag_arr("throw ", sizeof( unsigned char),
! 7u)); Cyc_PP_cat( _tag_arr( _temp852, sizeof( struct Cyc_PP_Doc*), 2u));}); goto
! _LL622; _LL646: s= Cyc_Absynpp_exp2doc_prec( inprec, _temp739); goto _LL622;
! _LL648: s= Cyc_Absynpp_exp2doc_prec( inprec, _temp741); goto _LL622; _LL650: s=({
! struct Cyc_PP_Doc* _temp853[ 4u]; _temp853[ 3u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp743); _temp853[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof(
! unsigned char), 2u)); _temp853[ 1u]= Cyc_Absynpp_typ2doc( _temp745); _temp853[ 0u]=
  Cyc_PP_text( _tag_arr("(", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr(
! _temp853, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL622; _LL652: s=({ struct
! Cyc_PP_Doc* _temp854[ 2u]; _temp854[ 1u]= Cyc_Absynpp_exp2doc_prec( myprec,
! _temp747); _temp854[ 0u]= Cyc_PP_text( _tag_arr("&", sizeof( unsigned char), 2u));
! Cyc_PP_cat( _tag_arr( _temp854, sizeof( struct Cyc_PP_Doc*), 2u));}); goto
! _LL622; _LL654: if( _temp751 ==  0){ s=({ struct Cyc_PP_Doc* _temp855[ 2u];
! _temp855[ 1u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp749); _temp855[ 0u]= Cyc_PP_text(
! _tag_arr("new ", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp855,
! sizeof( struct Cyc_PP_Doc*), 2u));});} else{ s=({ struct Cyc_PP_Doc* _temp856[ 4u];
! _temp856[ 3u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp749); _temp856[ 2u]= Cyc_PP_text(
! _tag_arr(") ", sizeof( unsigned char), 3u)); _temp856[ 1u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( _temp751)); _temp856[ 0u]= Cyc_PP_text(
! _tag_arr("rnew(", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp856,
! sizeof( struct Cyc_PP_Doc*), 4u));});} goto _LL622; _LL656: s=({ struct Cyc_PP_Doc*
! _temp857[ 3u]; _temp857[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp857[ 1u]= Cyc_Absynpp_typ2doc( _temp753); _temp857[ 0u]= Cyc_PP_text(
! _tag_arr("sizeof(", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp857,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL622; _LL658: s=({ struct Cyc_PP_Doc*
! _temp858[ 3u]; _temp858[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp858[ 1u]= Cyc_Absynpp_exp2doc( _temp755); _temp858[ 0u]= Cyc_PP_text(
! _tag_arr("sizeof(", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp858,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL622; _LL660: s=({ struct Cyc_PP_Doc*
! _temp859[ 5u]; _temp859[ 4u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp859[ 3u]= Cyc_PP_textptr( _temp759); _temp859[ 2u]= Cyc_PP_text(
! _tag_arr(",", sizeof( unsigned char), 2u)); _temp859[ 1u]= Cyc_Absynpp_typ2doc(
! _temp761); _temp859[ 0u]= Cyc_PP_text( _tag_arr("offsetof(", sizeof(
! unsigned char), 10u)); Cyc_PP_cat( _tag_arr( _temp859, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL622; _LL662: s=({ struct Cyc_PP_Doc* _temp860[ 5u]; _temp860[ 4u]=
! Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u)); _temp860[ 3u]= Cyc_PP_text((
! struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp862; _temp862.tag= Cyc_Std_Int_pa;
! _temp862.f1=( int) _temp765;{ void* _temp861[ 1u]={& _temp862}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp861, sizeof( void*),
! 1u));}})); _temp860[ 2u]= Cyc_PP_text( _tag_arr(",", sizeof( unsigned char), 2u));
! _temp860[ 1u]= Cyc_Absynpp_typ2doc( _temp767); _temp860[ 0u]= Cyc_PP_text(
! _tag_arr("offsetof(", sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr(
! _temp860, sizeof( struct Cyc_PP_Doc*), 5u));}); goto _LL622; _LL664: s=({ struct
! Cyc_PP_Doc* _temp863[ 4u]; _temp863[ 3u]= Cyc_PP_text( _tag_arr(")", sizeof(
! unsigned char), 2u)); _temp863[ 2u]= Cyc_Absynpp_typ2doc( _temp769); _temp863[ 1u]=
! Cyc_Absynpp_tvars2doc( _temp771); _temp863[ 0u]= Cyc_PP_text( _tag_arr("__gen(",
! sizeof( unsigned char), 7u)); Cyc_PP_cat( _tag_arr( _temp863, sizeof( struct Cyc_PP_Doc*),
! 4u));}); goto _LL622; _LL666: s=({ struct Cyc_PP_Doc* _temp864[ 2u]; _temp864[ 1u]=
! Cyc_Absynpp_exp2doc_prec( myprec, _temp773); _temp864[ 0u]= Cyc_PP_text(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp864,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL622; _LL668: s=({ struct Cyc_PP_Doc*
! _temp865[ 3u]; _temp865[ 2u]= Cyc_PP_textptr( _temp775); _temp865[ 1u]= Cyc_PP_text(
! _tag_arr(".", sizeof( unsigned char), 2u)); _temp865[ 0u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp777); Cyc_PP_cat( _tag_arr( _temp865, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL622; _LL670: s=({ struct Cyc_PP_Doc* _temp866[ 3u]; _temp866[ 2u]=
! Cyc_PP_textptr( _temp779); _temp866[ 1u]= Cyc_PP_text( _tag_arr("->", sizeof(
! unsigned char), 3u)); _temp866[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp781);
! Cyc_PP_cat( _tag_arr( _temp866, sizeof( struct Cyc_PP_Doc*), 3u));}); goto
! _LL622; _LL672: s=({ struct Cyc_PP_Doc* _temp867[ 4u]; _temp867[ 3u]= Cyc_PP_text(
! _tag_arr("]", sizeof( unsigned char), 2u)); _temp867[ 2u]= Cyc_Absynpp_exp2doc(
! _temp783); _temp867[ 1u]= Cyc_PP_text( _tag_arr("[", sizeof( unsigned char), 2u));
! _temp867[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp785); Cyc_PP_cat( _tag_arr(
! _temp867, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL622; _LL674: s=({ struct
! Cyc_PP_Doc* _temp868[ 3u]; _temp868[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof(
! unsigned char), 2u)); _temp868[ 1u]= Cyc_Absynpp_exps2doc_prec( 20, _temp787);
! _temp868[ 0u]= Cyc_PP_text( _tag_arr("$(", sizeof( unsigned char), 3u)); Cyc_PP_cat(
! _tag_arr( _temp868, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL622; _LL676: s=({
! struct Cyc_PP_Doc* _temp869[ 4u]; _temp869[ 3u]= Cyc_PP_group( _tag_arr("{",
! sizeof( unsigned char), 2u), _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",",
! sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)(
! struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_de2doc,
! _temp789)); _temp869[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u));
! _temp869[ 1u]= Cyc_Absynpp_typ2doc((* _temp791).f3); _temp869[ 0u]= Cyc_PP_text(
! _tag_arr("(", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp869,
! sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL622; _LL678: s= Cyc_PP_group(
  _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof( unsigned char),
  2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_de2doc, _temp793)); goto _LL622; _LL680: s=({ struct Cyc_PP_Doc*
! _temp870[ 7u]; _temp870[ 6u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char),
! 2u)); _temp870[ 5u]= Cyc_Absynpp_exp2doc( _temp795); _temp870[ 4u]= Cyc_PP_text(
! _tag_arr(" : ", sizeof( unsigned char), 4u)); _temp870[ 3u]= Cyc_Absynpp_exp2doc(
! _temp797); _temp870[ 2u]= Cyc_PP_text( _tag_arr(" < ", sizeof( unsigned char), 4u));
! _temp870[ 1u]= Cyc_PP_text(*(* _temp799->name).f2); _temp870[ 0u]= Cyc_PP_text(
! _tag_arr("{for ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp870,
! sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL622; _LL682: s=({ struct Cyc_PP_Doc*
! _temp871[ 2u]; _temp871[ 1u]= Cyc_PP_group( _tag_arr("{", sizeof( unsigned char),
  2u), _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof(
  unsigned char), 2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( struct
! _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_de2doc, _temp801));
! _temp871[ 0u]= Cyc_Absynpp_qvar2doc( _temp803); Cyc_PP_cat( _tag_arr( _temp871,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL622; _LL684: s= Cyc_PP_group(
  _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof( unsigned char),
  2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_de2doc, _temp805)); goto _LL622; _LL686: if( _temp809 ==  0){ s= Cyc_Absynpp_qvar2doc(
! _temp807->name);} else{ s=({ struct Cyc_PP_Doc* _temp872[ 2u]; _temp872[ 1u]=
  Cyc_PP_egroup( _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
  unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_exp2doc, _temp809)); _temp872[ 0u]= Cyc_Absynpp_qvar2doc( _temp807->name);
! Cyc_PP_cat( _tag_arr( _temp872, sizeof( struct Cyc_PP_Doc*), 2u));});} goto
! _LL622; _LL688: s= Cyc_Absynpp_qvar2doc( _temp811); goto _LL622; _LL690: if(
! _temp815 ==  0){ s=({ struct Cyc_PP_Doc* _temp873[ 3u]; _temp873[ 2u]= Cyc_PP_text(
! _tag_arr("))", sizeof( unsigned char), 3u)); _temp873[ 1u]= Cyc_Absynpp_typ2doc(
! _temp813); _temp873[ 0u]= Cyc_PP_text( _tag_arr("malloc(sizeof(", sizeof(
! unsigned char), 15u)); Cyc_PP_cat( _tag_arr( _temp873, sizeof( struct Cyc_PP_Doc*),
! 3u));});} else{ s=({ struct Cyc_PP_Doc* _temp874[ 6u]; _temp874[ 5u]= Cyc_PP_text(
! _tag_arr("))", sizeof( unsigned char), 3u)); _temp874[ 4u]= Cyc_Absynpp_typ2doc(
! _temp813); _temp874[ 3u]= Cyc_PP_text( _tag_arr("sizeof(", sizeof( unsigned char),
! 8u)); _temp874[ 2u]= Cyc_PP_text( _tag_arr(",", sizeof( unsigned char), 2u));
! _temp874[ 1u]= Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null(
! _temp815)); _temp874[ 0u]= Cyc_PP_text( _tag_arr("rmalloc(", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp874, sizeof( struct Cyc_PP_Doc*),
! 6u));});} goto _LL622; _LL692: s= Cyc_PP_group( _tag_arr("{", sizeof(
  unsigned char), 2u), _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",",
  sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)(
  struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_de2doc,
! _temp817)); goto _LL622; _LL694: s=({ struct Cyc_PP_Doc* _temp875[ 3u]; _temp875[
! 2u]= Cyc_PP_text( _tag_arr(" })", sizeof( unsigned char), 4u)); _temp875[ 1u]=
! Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp821)); _temp875[ 0u]= Cyc_PP_text(
! _tag_arr("({ ", sizeof( unsigned char), 4u)); Cyc_PP_cat( _tag_arr( _temp875,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL622; _LL696: s=({ struct Cyc_PP_Doc*
! _temp876[ 3u]; _temp876[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp876[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_decl2doc(({ struct Cyc_Absyn_Decl*
! _temp877=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp877->r=( void*)(( void*)({ struct Cyc_Absyn_Fn_d_struct* _temp878=( struct
  Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp878[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp879; _temp879.tag= Cyc_Absyn_Fn_d;
! _temp879.f1= _temp823; _temp879;}); _temp878;})); _temp877->loc= e->loc;
! _temp877;}))); _temp876[ 0u]= Cyc_PP_text( _tag_arr("codegen(", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp876, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL622; _LL698: s=({ struct Cyc_PP_Doc* _temp880[ 3u]; _temp880[ 2u]=
! Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u)); _temp880[ 1u]= Cyc_PP_nest(
! 2, Cyc_Absynpp_exp2doc( _temp825)); _temp880[ 0u]= Cyc_PP_text( _tag_arr("fill(",
! sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp880, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL622; _LL622:;} if( inprec >=  myprec){ s=({ struct Cyc_PP_Doc*
! _temp881[ 3u]; _temp881[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp881[ 1u]= s; _temp881[ 0u]= Cyc_PP_text( _tag_arr("(", sizeof(
! unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp881, sizeof( struct Cyc_PP_Doc*),
  3u));});} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_designator2doc( void* d){
! void* _temp882= d; struct Cyc_Absyn_Exp* _temp888; struct _tagged_arr* _temp890;
! _LL884: if(*(( int*) _temp882) ==  Cyc_Absyn_ArrayElement){ _LL889: _temp888=((
! struct Cyc_Absyn_ArrayElement_struct*) _temp882)->f1; goto _LL885;} else{ goto
! _LL886;} _LL886: if(*(( int*) _temp882) ==  Cyc_Absyn_FieldName){ _LL891:
! _temp890=(( struct Cyc_Absyn_FieldName_struct*) _temp882)->f1; goto _LL887;}
! else{ goto _LL883;} _LL885: return({ struct Cyc_PP_Doc* _temp892[ 3u]; _temp892[
! 2u]= Cyc_PP_text( _tag_arr("]", sizeof( unsigned char), 2u)); _temp892[ 1u]= Cyc_Absynpp_exp2doc(
! _temp888); _temp892[ 0u]= Cyc_PP_text( _tag_arr(".[", sizeof( unsigned char), 3u));
! Cyc_PP_cat( _tag_arr( _temp892, sizeof( struct Cyc_PP_Doc*), 3u));}); _LL887:
! return({ struct Cyc_PP_Doc* _temp893[ 2u]; _temp893[ 1u]= Cyc_PP_textptr(
! _temp890); _temp893[ 0u]= Cyc_PP_text( _tag_arr(".", sizeof( unsigned char), 2u));
! Cyc_PP_cat( _tag_arr( _temp893, sizeof( struct Cyc_PP_Doc*), 2u));}); _LL883:;}
  struct Cyc_PP_Doc* Cyc_Absynpp_de2doc( struct _tuple6* de){ if((* de).f1 ==  0){
  return Cyc_Absynpp_exp2doc((* de).f2);} else{ return({ struct Cyc_PP_Doc*
! _temp894[ 2u]; _temp894[ 1u]= Cyc_Absynpp_exp2doc((* de).f2); _temp894[ 0u]= Cyc_PP_egroup(
  _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("=", sizeof( unsigned char),
  2u), _tag_arr("=", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( void*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_designator2doc,(*
! de).f1)); Cyc_PP_cat( _tag_arr( _temp894, sizeof( struct Cyc_PP_Doc*), 2u));});}}
  struct Cyc_PP_Doc* Cyc_Absynpp_exps2doc_prec( int inprec, struct Cyc_List_List*
  es){ return Cyc_PP_group( _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("",
  sizeof( unsigned char), 1u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct
  Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( int, struct Cyc_Absyn_Exp*), int env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Absynpp_exp2doc_prec, inprec, es));}
! struct Cyc_PP_Doc* Cyc_Absynpp_cnst2doc( void* c){ void* _temp895= c;
! unsigned char _temp913; void* _temp915; short _temp917; void* _temp919; int
! _temp921; void* _temp923; int _temp925; void* _temp927; long long _temp929; void*
! _temp931; struct _tagged_arr _temp933; struct _tagged_arr _temp935; _LL897: if((
! unsigned int) _temp895 >  1u?*(( int*) _temp895) ==  Cyc_Absyn_Char_c: 0){
! _LL916: _temp915=( void*)(( struct Cyc_Absyn_Char_c_struct*) _temp895)->f1; goto
! _LL914; _LL914: _temp913=(( struct Cyc_Absyn_Char_c_struct*) _temp895)->f2; goto
! _LL898;} else{ goto _LL899;} _LL899: if(( unsigned int) _temp895 >  1u?*(( int*)
! _temp895) ==  Cyc_Absyn_Short_c: 0){ _LL920: _temp919=( void*)(( struct Cyc_Absyn_Short_c_struct*)
! _temp895)->f1; goto _LL918; _LL918: _temp917=(( struct Cyc_Absyn_Short_c_struct*)
! _temp895)->f2; goto _LL900;} else{ goto _LL901;} _LL901: if(( unsigned int)
! _temp895 >  1u?*(( int*) _temp895) ==  Cyc_Absyn_Int_c: 0){ _LL924: _temp923=(
! void*)(( struct Cyc_Absyn_Int_c_struct*) _temp895)->f1; if( _temp923 == ( void*)
! Cyc_Absyn_Signed){ goto _LL922;} else{ goto _LL903;} _LL922: _temp921=(( struct
! Cyc_Absyn_Int_c_struct*) _temp895)->f2; goto _LL902;} else{ goto _LL903;} _LL903:
! if(( unsigned int) _temp895 >  1u?*(( int*) _temp895) ==  Cyc_Absyn_Int_c: 0){
! _LL928: _temp927=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp895)->f1; if(
! _temp927 == ( void*) Cyc_Absyn_Unsigned){ goto _LL926;} else{ goto _LL905;}
! _LL926: _temp925=(( struct Cyc_Absyn_Int_c_struct*) _temp895)->f2; goto _LL904;}
! else{ goto _LL905;} _LL905: if(( unsigned int) _temp895 >  1u?*(( int*) _temp895)
! ==  Cyc_Absyn_LongLong_c: 0){ _LL932: _temp931=( void*)(( struct Cyc_Absyn_LongLong_c_struct*)
! _temp895)->f1; goto _LL930; _LL930: _temp929=(( struct Cyc_Absyn_LongLong_c_struct*)
! _temp895)->f2; goto _LL906;} else{ goto _LL907;} _LL907: if(( unsigned int)
! _temp895 >  1u?*(( int*) _temp895) ==  Cyc_Absyn_Float_c: 0){ _LL934: _temp933=((
! struct Cyc_Absyn_Float_c_struct*) _temp895)->f1; goto _LL908;} else{ goto _LL909;}
! _LL909: if( _temp895 == ( void*) Cyc_Absyn_Null_c){ goto _LL910;} else{ goto
! _LL911;} _LL911: if(( unsigned int) _temp895 >  1u?*(( int*) _temp895) ==  Cyc_Absyn_String_c:
! 0){ _LL936: _temp935=(( struct Cyc_Absyn_String_c_struct*) _temp895)->f1; goto
! _LL912;} else{ goto _LL896;} _LL898: return Cyc_PP_text(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp938; _temp938.tag= Cyc_Std_String_pa;
! _temp938.f1=( struct _tagged_arr) Cyc_Absynpp_char_escape( _temp913);{ void*
! _temp937[ 1u]={& _temp938}; Cyc_Std_aprintf( _tag_arr("'%s'", sizeof(
! unsigned char), 5u), _tag_arr( _temp937, sizeof( void*), 1u));}})); _LL900:
! return Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp940;
! _temp940.tag= Cyc_Std_Int_pa; _temp940.f1=( int)(( unsigned int)(( int) _temp917));{
! void* _temp939[ 1u]={& _temp940}; Cyc_Std_aprintf( _tag_arr("%d", sizeof(
! unsigned char), 3u), _tag_arr( _temp939, sizeof( void*), 1u));}})); _LL902:
! return Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp942;
! _temp942.tag= Cyc_Std_Int_pa; _temp942.f1=( int)(( unsigned int) _temp921);{
! void* _temp941[ 1u]={& _temp942}; Cyc_Std_aprintf( _tag_arr("%d", sizeof(
! unsigned char), 3u), _tag_arr( _temp941, sizeof( void*), 1u));}})); _LL904:
! return Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp944;
! _temp944.tag= Cyc_Std_Int_pa; _temp944.f1=( unsigned int) _temp925;{ void*
! _temp943[ 1u]={& _temp944}; Cyc_Std_aprintf( _tag_arr("%u", sizeof(
! unsigned char), 3u), _tag_arr( _temp943, sizeof( void*), 1u));}})); _LL906:
  return Cyc_PP_text( _tag_arr("<<FIX LONG LONG CONSTANT>>", sizeof( unsigned char),
! 27u)); _LL908: return Cyc_PP_text( _temp933); _LL910: return Cyc_PP_text(
! _tag_arr("NULL", sizeof( unsigned char), 5u)); _LL912: return({ struct Cyc_PP_Doc*
! _temp945[ 3u]; _temp945[ 2u]= Cyc_PP_text( _tag_arr("\"", sizeof( unsigned char),
! 2u)); _temp945[ 1u]= Cyc_PP_text( Cyc_Absynpp_string_escape( _temp935));
! _temp945[ 0u]= Cyc_PP_text( _tag_arr("\"", sizeof( unsigned char), 2u)); Cyc_PP_cat(
! _tag_arr( _temp945, sizeof( struct Cyc_PP_Doc*), 3u));}); _LL896:;} struct Cyc_PP_Doc*
  Cyc_Absynpp_primapp2doc( int inprec, void* p, struct Cyc_List_List* es){ struct
  Cyc_PP_Doc* ps= Cyc_Absynpp_prim2doc( p); if( p == ( void*) Cyc_Absyn_Size){ if(
  es ==  0? 1:(( struct Cyc_List_List*) _check_null( es))->tl !=  0){( int) _throw((
! void*)({ struct Cyc_Core_Failure_struct* _temp946=( struct Cyc_Core_Failure_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Failure_struct)); _temp946[ 0]=({ struct Cyc_Core_Failure_struct
! _temp947; _temp947.tag= Cyc_Core_Failure; _temp947.f1=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp949; _temp949.tag= Cyc_Std_String_pa;
! _temp949.f1=( struct _tagged_arr) Cyc_PP_string_of_doc( ps, 72);{ void* _temp948[
! 1u]={& _temp949}; Cyc_Std_aprintf( _tag_arr("Absynpp::primapp2doc Size: %s with bad args",
! sizeof( unsigned char), 44u), _tag_arr( _temp948, sizeof( void*), 1u));}});
! _temp947;}); _temp946;}));}{ struct Cyc_PP_Doc* _temp950= Cyc_Absynpp_exp2doc_prec(
  inprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd);
! return({ struct Cyc_PP_Doc* _temp951[ 2u]; _temp951[ 1u]= Cyc_PP_text( _tag_arr(".size",
! sizeof( unsigned char), 6u)); _temp951[ 0u]= _temp950; Cyc_PP_cat( _tag_arr(
! _temp951, sizeof( struct Cyc_PP_Doc*), 2u));});}} else{ struct Cyc_List_List* ds=((
  struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( int, struct Cyc_Absyn_Exp*),
  int env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Absynpp_exp2doc_prec,
  inprec, es); if( ds ==  0){( int) _throw(( void*)({ struct Cyc_Core_Failure_struct*
! _temp952=( struct Cyc_Core_Failure_struct*) _cycalloc( sizeof( struct Cyc_Core_Failure_struct));
! _temp952[ 0]=({ struct Cyc_Core_Failure_struct _temp953; _temp953.tag= Cyc_Core_Failure;
! _temp953.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp955;
! _temp955.tag= Cyc_Std_String_pa; _temp955.f1=( struct _tagged_arr) Cyc_PP_string_of_doc(
! ps, 72);{ void* _temp954[ 1u]={& _temp955}; Cyc_Std_aprintf( _tag_arr("Absynpp::primapp2doc: %s with no args",
! sizeof( unsigned char), 38u), _tag_arr( _temp954, sizeof( void*), 1u));}});
! _temp953;}); _temp952;}));} else{ if((( struct Cyc_List_List*) _check_null( ds))->tl
! ==  0){ return({ struct Cyc_PP_Doc* _temp956[ 3u]; _temp956[ 2u]=( struct Cyc_PP_Doc*)((
! struct Cyc_List_List*) _check_null( ds))->hd; _temp956[ 1u]= Cyc_PP_text(
! _tag_arr(" ", sizeof( unsigned char), 2u)); _temp956[ 0u]= ps; Cyc_PP_cat(
! _tag_arr( _temp956, sizeof( struct Cyc_PP_Doc*), 3u));});} else{ if((( struct
  Cyc_List_List*) _check_null((( struct Cyc_List_List*) _check_null( ds))->tl))->tl
! !=  0){( int) _throw(( void*)({ struct Cyc_Core_Failure_struct* _temp957=(
  struct Cyc_Core_Failure_struct*) _cycalloc( sizeof( struct Cyc_Core_Failure_struct));
! _temp957[ 0]=({ struct Cyc_Core_Failure_struct _temp958; _temp958.tag= Cyc_Core_Failure;
! _temp958.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp960;
! _temp960.tag= Cyc_Std_String_pa; _temp960.f1=( struct _tagged_arr) Cyc_PP_string_of_doc(
! ps, 72);{ void* _temp959[ 1u]={& _temp960}; Cyc_Std_aprintf( _tag_arr("Absynpp::primapp2doc: %s with more than 2 args",
! sizeof( unsigned char), 47u), _tag_arr( _temp959, sizeof( void*), 1u));}});
! _temp958;}); _temp957;}));} else{ return({ struct Cyc_PP_Doc* _temp961[ 5u];
! _temp961[ 4u]=( struct Cyc_PP_Doc*)(( struct Cyc_List_List*) _check_null(((
! struct Cyc_List_List*) _check_null( ds))->tl))->hd; _temp961[ 3u]= Cyc_PP_text(
! _tag_arr(" ", sizeof( unsigned char), 2u)); _temp961[ 2u]= ps; _temp961[ 1u]=
! Cyc_PP_text( _tag_arr(" ", sizeof( unsigned char), 2u)); _temp961[ 0u]=( struct
  Cyc_PP_Doc*)(( struct Cyc_List_List*) _check_null( ds))->hd; Cyc_PP_cat(
! _tag_arr( _temp961, sizeof( struct Cyc_PP_Doc*), 5u));});}}}}} struct
! _tagged_arr Cyc_Absynpp_prim2str( void* p){ void* _temp962= p; _LL964: if(
! _temp962 == ( void*) Cyc_Absyn_Plus){ goto _LL965;} else{ goto _LL966;} _LL966:
! if( _temp962 == ( void*) Cyc_Absyn_Times){ goto _LL967;} else{ goto _LL968;}
! _LL968: if( _temp962 == ( void*) Cyc_Absyn_Minus){ goto _LL969;} else{ goto
! _LL970;} _LL970: if( _temp962 == ( void*) Cyc_Absyn_Div){ goto _LL971;} else{
! goto _LL972;} _LL972: if( _temp962 == ( void*) Cyc_Absyn_Mod){ goto _LL973;}
! else{ goto _LL974;} _LL974: if( _temp962 == ( void*) Cyc_Absyn_Eq){ goto _LL975;}
! else{ goto _LL976;} _LL976: if( _temp962 == ( void*) Cyc_Absyn_Neq){ goto _LL977;}
! else{ goto _LL978;} _LL978: if( _temp962 == ( void*) Cyc_Absyn_Gt){ goto _LL979;}
! else{ goto _LL980;} _LL980: if( _temp962 == ( void*) Cyc_Absyn_Lt){ goto _LL981;}
! else{ goto _LL982;} _LL982: if( _temp962 == ( void*) Cyc_Absyn_Gte){ goto _LL983;}
! else{ goto _LL984;} _LL984: if( _temp962 == ( void*) Cyc_Absyn_Lte){ goto _LL985;}
! else{ goto _LL986;} _LL986: if( _temp962 == ( void*) Cyc_Absyn_Not){ goto _LL987;}
! else{ goto _LL988;} _LL988: if( _temp962 == ( void*) Cyc_Absyn_Bitnot){ goto
! _LL989;} else{ goto _LL990;} _LL990: if( _temp962 == ( void*) Cyc_Absyn_Bitand){
! goto _LL991;} else{ goto _LL992;} _LL992: if( _temp962 == ( void*) Cyc_Absyn_Bitor){
! goto _LL993;} else{ goto _LL994;} _LL994: if( _temp962 == ( void*) Cyc_Absyn_Bitxor){
! goto _LL995;} else{ goto _LL996;} _LL996: if( _temp962 == ( void*) Cyc_Absyn_Bitlshift){
! goto _LL997;} else{ goto _LL998;} _LL998: if( _temp962 == ( void*) Cyc_Absyn_Bitlrshift){
! goto _LL999;} else{ goto _LL1000;} _LL1000: if( _temp962 == ( void*) Cyc_Absyn_Bitarshift){
! goto _LL1001;} else{ goto _LL1002;} _LL1002: if( _temp962 == ( void*) Cyc_Absyn_Size){
! goto _LL1003;} else{ goto _LL963;} _LL965: return _tag_arr("+", sizeof(
! unsigned char), 2u); _LL967: return _tag_arr("*", sizeof( unsigned char), 2u);
! _LL969: return _tag_arr("-", sizeof( unsigned char), 2u); _LL971: return
! _tag_arr("/", sizeof( unsigned char), 2u); _LL973: return _tag_arr("%", sizeof(
! unsigned char), 2u); _LL975: return _tag_arr("==", sizeof( unsigned char), 3u);
! _LL977: return _tag_arr("!=", sizeof( unsigned char), 3u); _LL979: return
! _tag_arr(">", sizeof( unsigned char), 2u); _LL981: return _tag_arr("<", sizeof(
! unsigned char), 2u); _LL983: return _tag_arr(">=", sizeof( unsigned char), 3u);
! _LL985: return _tag_arr("<=", sizeof( unsigned char), 3u); _LL987: return
! _tag_arr("!", sizeof( unsigned char), 2u); _LL989: return _tag_arr("~", sizeof(
! unsigned char), 2u); _LL991: return _tag_arr("&", sizeof( unsigned char), 2u);
! _LL993: return _tag_arr("|", sizeof( unsigned char), 2u); _LL995: return
! _tag_arr("^", sizeof( unsigned char), 2u); _LL997: return _tag_arr("<<", sizeof(
! unsigned char), 3u); _LL999: return _tag_arr(">>", sizeof( unsigned char), 3u);
! _LL1001: return _tag_arr(">>>", sizeof( unsigned char), 4u); _LL1003: return
! _tag_arr("size", sizeof( unsigned char), 5u); _LL963:;} struct Cyc_PP_Doc* Cyc_Absynpp_prim2doc(
  void* p){ return Cyc_PP_text( Cyc_Absynpp_prim2str( p));} struct _tuple9{ struct
  Cyc_Core_Opt* f1; struct Cyc_Absyn_Exp* f2; } ; struct Cyc_PP_Doc* Cyc_Absynpp_structarg2doc(
  struct _tuple9* t){ if((* t).f1 ==  0){ return Cyc_Absynpp_exp2doc((* t).f2);}
! else{ return({ struct Cyc_PP_Doc* _temp1004[ 3u]; _temp1004[ 2u]= Cyc_Absynpp_exp2doc((*
! t).f2); _temp1004[ 1u]= Cyc_PP_text( _tag_arr(" = ", sizeof( unsigned char), 4u));
! _temp1004[ 0u]= Cyc_PP_textptr(( struct _tagged_arr*)(( struct Cyc_Core_Opt*)
! _check_null((* t).f1))->v); Cyc_PP_cat( _tag_arr( _temp1004, sizeof( struct Cyc_PP_Doc*),
  3u));});}} int Cyc_Absynpp_is_declaration( struct Cyc_Absyn_Stmt* s){ void*
! _temp1005=( void*) s->r; _LL1007: if(( unsigned int) _temp1005 >  1u?*(( int*)
! _temp1005) ==  Cyc_Absyn_Decl_s: 0){ goto _LL1008;} else{ goto _LL1009;} _LL1009:
! goto _LL1010; _LL1008: return 1; _LL1010: return 0; _LL1006:;} struct Cyc_PP_Doc*
  Cyc_Absynpp_stmt2doc( struct Cyc_Absyn_Stmt* st){ struct Cyc_PP_Doc* s;{ void*
! _temp1011=( void*) st->r; struct Cyc_Absyn_Exp* _temp1055; struct Cyc_Absyn_Stmt*
! _temp1057; struct Cyc_Absyn_Stmt* _temp1059; struct Cyc_Absyn_Exp* _temp1061;
! struct Cyc_Absyn_Stmt* _temp1063; struct Cyc_Absyn_Stmt* _temp1065; struct Cyc_Absyn_Exp*
! _temp1067; struct Cyc_Absyn_Stmt* _temp1069; struct _tuple2 _temp1071; struct
! Cyc_Absyn_Exp* _temp1073; struct _tagged_arr* _temp1075; struct Cyc_Absyn_Stmt*
! _temp1077; struct _tuple2 _temp1079; struct Cyc_Absyn_Exp* _temp1081; struct
! _tuple2 _temp1083; struct Cyc_Absyn_Exp* _temp1085; struct Cyc_Absyn_Exp*
! _temp1087; struct Cyc_List_List* _temp1089; struct Cyc_Absyn_Exp* _temp1091;
! struct Cyc_List_List* _temp1093; struct Cyc_Absyn_Exp* _temp1095; struct Cyc_List_List*
! _temp1097; struct Cyc_List_List* _temp1099; struct Cyc_Absyn_Stmt* _temp1101;
! struct Cyc_Absyn_Decl* _temp1103; struct Cyc_Absyn_Stmt* _temp1105; struct Cyc_Absyn_Stmt*
! _temp1107; struct Cyc_Absyn_Stmt* _temp1109; struct _tagged_arr* _temp1111;
! struct _tuple2 _temp1113; struct Cyc_Absyn_Exp* _temp1115; struct Cyc_Absyn_Stmt*
! _temp1117; struct Cyc_List_List* _temp1119; struct Cyc_Absyn_Stmt* _temp1121;
! struct Cyc_Absyn_Stmt* _temp1123; struct Cyc_Absyn_Vardecl* _temp1125; struct
! Cyc_Absyn_Tvar* _temp1127; _LL1013: if( _temp1011 == ( void*) Cyc_Absyn_Skip_s){
! goto _LL1014;} else{ goto _LL1015;} _LL1015: if(( unsigned int) _temp1011 >  1u?*((
! int*) _temp1011) ==  Cyc_Absyn_Exp_s: 0){ _LL1056: _temp1055=(( struct Cyc_Absyn_Exp_s_struct*)
! _temp1011)->f1; goto _LL1016;} else{ goto _LL1017;} _LL1017: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Seq_s: 0){ _LL1060: _temp1059=((
! struct Cyc_Absyn_Seq_s_struct*) _temp1011)->f1; goto _LL1058; _LL1058: _temp1057=((
! struct Cyc_Absyn_Seq_s_struct*) _temp1011)->f2; goto _LL1018;} else{ goto
! _LL1019;} _LL1019: if(( unsigned int) _temp1011 >  1u?*(( int*) _temp1011) == 
! Cyc_Absyn_Return_s: 0){ _LL1062: _temp1061=(( struct Cyc_Absyn_Return_s_struct*)
! _temp1011)->f1; goto _LL1020;} else{ goto _LL1021;} _LL1021: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_IfThenElse_s: 0){ _LL1068:
! _temp1067=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp1011)->f1; goto _LL1066;
! _LL1066: _temp1065=(( struct Cyc_Absyn_IfThenElse_s_struct*) _temp1011)->f2;
! goto _LL1064; _LL1064: _temp1063=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp1011)->f3; goto _LL1022;} else{ goto _LL1023;} _LL1023: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_While_s: 0){ _LL1072:
! _temp1071=(( struct Cyc_Absyn_While_s_struct*) _temp1011)->f1; _LL1074:
! _temp1073= _temp1071.f1; goto _LL1070; _LL1070: _temp1069=(( struct Cyc_Absyn_While_s_struct*)
! _temp1011)->f2; goto _LL1024;} else{ goto _LL1025;} _LL1025: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Break_s: 0){ goto _LL1026;}
! else{ goto _LL1027;} _LL1027: if(( unsigned int) _temp1011 >  1u?*(( int*)
! _temp1011) ==  Cyc_Absyn_Continue_s: 0){ goto _LL1028;} else{ goto _LL1029;}
! _LL1029: if(( unsigned int) _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Goto_s:
! 0){ _LL1076: _temp1075=(( struct Cyc_Absyn_Goto_s_struct*) _temp1011)->f1; goto
! _LL1030;} else{ goto _LL1031;} _LL1031: if(( unsigned int) _temp1011 >  1u?*((
! int*) _temp1011) ==  Cyc_Absyn_For_s: 0){ _LL1088: _temp1087=(( struct Cyc_Absyn_For_s_struct*)
! _temp1011)->f1; goto _LL1084; _LL1084: _temp1083=(( struct Cyc_Absyn_For_s_struct*)
! _temp1011)->f2; _LL1086: _temp1085= _temp1083.f1; goto _LL1080; _LL1080:
! _temp1079=(( struct Cyc_Absyn_For_s_struct*) _temp1011)->f3; _LL1082: _temp1081=
! _temp1079.f1; goto _LL1078; _LL1078: _temp1077=(( struct Cyc_Absyn_For_s_struct*)
! _temp1011)->f4; goto _LL1032;} else{ goto _LL1033;} _LL1033: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Switch_s: 0){ _LL1092:
! _temp1091=(( struct Cyc_Absyn_Switch_s_struct*) _temp1011)->f1; goto _LL1090;
! _LL1090: _temp1089=(( struct Cyc_Absyn_Switch_s_struct*) _temp1011)->f2; goto
! _LL1034;} else{ goto _LL1035;} _LL1035: if(( unsigned int) _temp1011 >  1u?*((
! int*) _temp1011) ==  Cyc_Absyn_SwitchC_s: 0){ _LL1096: _temp1095=(( struct Cyc_Absyn_SwitchC_s_struct*)
! _temp1011)->f1; goto _LL1094; _LL1094: _temp1093=(( struct Cyc_Absyn_SwitchC_s_struct*)
! _temp1011)->f2; goto _LL1036;} else{ goto _LL1037;} _LL1037: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Fallthru_s: 0){ _LL1098:
! _temp1097=(( struct Cyc_Absyn_Fallthru_s_struct*) _temp1011)->f1; if( _temp1097
! ==  0){ goto _LL1038;} else{ goto _LL1039;}} else{ goto _LL1039;} _LL1039: if((
! unsigned int) _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Fallthru_s: 0){
! _LL1100: _temp1099=(( struct Cyc_Absyn_Fallthru_s_struct*) _temp1011)->f1; goto
! _LL1040;} else{ goto _LL1041;} _LL1041: if(( unsigned int) _temp1011 >  1u?*((
! int*) _temp1011) ==  Cyc_Absyn_Decl_s: 0){ _LL1104: _temp1103=(( struct Cyc_Absyn_Decl_s_struct*)
! _temp1011)->f1; goto _LL1102; _LL1102: _temp1101=(( struct Cyc_Absyn_Decl_s_struct*)
! _temp1011)->f2; goto _LL1042;} else{ goto _LL1043;} _LL1043: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Cut_s: 0){ _LL1106: _temp1105=((
! struct Cyc_Absyn_Cut_s_struct*) _temp1011)->f1; goto _LL1044;} else{ goto
! _LL1045;} _LL1045: if(( unsigned int) _temp1011 >  1u?*(( int*) _temp1011) == 
! Cyc_Absyn_Splice_s: 0){ _LL1108: _temp1107=(( struct Cyc_Absyn_Splice_s_struct*)
! _temp1011)->f1; goto _LL1046;} else{ goto _LL1047;} _LL1047: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Label_s: 0){ _LL1112:
! _temp1111=(( struct Cyc_Absyn_Label_s_struct*) _temp1011)->f1; goto _LL1110;
! _LL1110: _temp1109=(( struct Cyc_Absyn_Label_s_struct*) _temp1011)->f2; goto
! _LL1048;} else{ goto _LL1049;} _LL1049: if(( unsigned int) _temp1011 >  1u?*((
! int*) _temp1011) ==  Cyc_Absyn_Do_s: 0){ _LL1118: _temp1117=(( struct Cyc_Absyn_Do_s_struct*)
! _temp1011)->f1; goto _LL1114; _LL1114: _temp1113=(( struct Cyc_Absyn_Do_s_struct*)
! _temp1011)->f2; _LL1116: _temp1115= _temp1113.f1; goto _LL1050;} else{ goto
! _LL1051;} _LL1051: if(( unsigned int) _temp1011 >  1u?*(( int*) _temp1011) == 
! Cyc_Absyn_TryCatch_s: 0){ _LL1122: _temp1121=(( struct Cyc_Absyn_TryCatch_s_struct*)
! _temp1011)->f1; goto _LL1120; _LL1120: _temp1119=(( struct Cyc_Absyn_TryCatch_s_struct*)
! _temp1011)->f2; goto _LL1052;} else{ goto _LL1053;} _LL1053: if(( unsigned int)
! _temp1011 >  1u?*(( int*) _temp1011) ==  Cyc_Absyn_Region_s: 0){ _LL1128:
! _temp1127=(( struct Cyc_Absyn_Region_s_struct*) _temp1011)->f1; goto _LL1126;
! _LL1126: _temp1125=(( struct Cyc_Absyn_Region_s_struct*) _temp1011)->f2; goto
! _LL1124; _LL1124: _temp1123=(( struct Cyc_Absyn_Region_s_struct*) _temp1011)->f3;
! goto _LL1054;} else{ goto _LL1012;} _LL1014: s= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); goto _LL1012; _LL1016: s=({ struct Cyc_PP_Doc*
! _temp1129[ 2u]; _temp1129[ 1u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1129[ 0u]= Cyc_Absynpp_exp2doc( _temp1055); Cyc_PP_cat( _tag_arr(
! _temp1129, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL1012; _LL1018: if( Cyc_Absynpp_decls_first){
! if( Cyc_Absynpp_is_declaration( _temp1059)){ s=({ struct Cyc_PP_Doc* _temp1130[
! 6u]; _temp1130[ 5u]= Cyc_Absynpp_is_declaration( _temp1057)?({ struct Cyc_PP_Doc*
! _temp1131[ 4u]; _temp1131[ 3u]= Cyc_PP_line_doc(); _temp1131[ 2u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1131[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1057)); _temp1131[ 0u]= Cyc_PP_text( _tag_arr("{ ", sizeof( unsigned char),
! 3u)); Cyc_PP_cat( _tag_arr( _temp1131, sizeof( struct Cyc_PP_Doc*), 4u));}): Cyc_Absynpp_stmt2doc(
! _temp1057); _temp1130[ 4u]= Cyc_PP_line_doc(); _temp1130[ 3u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1130[ 2u]= Cyc_PP_line_doc();
! _temp1130[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1059)); _temp1130[ 0u]=
  Cyc_PP_text( _tag_arr("{ ", sizeof( unsigned char), 3u)); Cyc_PP_cat( _tag_arr(
! _temp1130, sizeof( struct Cyc_PP_Doc*), 6u));});} else{ if( Cyc_Absynpp_is_declaration(
! _temp1057)){ s=({ struct Cyc_PP_Doc* _temp1132[ 6u]; _temp1132[ 5u]= Cyc_PP_line_doc();
! _temp1132[ 4u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1132[ 3u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1057)); _temp1132[ 2u]=
! Cyc_PP_text( _tag_arr("{ ", sizeof( unsigned char), 3u)); _temp1132[ 1u]= Cyc_PP_line_doc();
! _temp1132[ 0u]= Cyc_Absynpp_stmt2doc( _temp1059); Cyc_PP_cat( _tag_arr(
! _temp1132, sizeof( struct Cyc_PP_Doc*), 6u));});} else{ s=(( struct Cyc_PP_Doc*(*)(
  struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Stmt*), struct _tagged_arr sep,
  struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_stmt2doc, _tag_arr("",
! sizeof( unsigned char), 1u),({ struct Cyc_List_List* _temp1133=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1133->hd=( void*) _temp1059;
! _temp1133->tl=({ struct Cyc_List_List* _temp1134=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1134->hd=( void*) _temp1057;
! _temp1134->tl= 0; _temp1134;}); _temp1133;}));}}} else{ s=(( struct Cyc_PP_Doc*(*)(
  struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Stmt*), struct _tagged_arr sep,
  struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_stmt2doc, _tag_arr("",
! sizeof( unsigned char), 1u),({ struct Cyc_List_List* _temp1135=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1135->hd=( void*) _temp1059;
! _temp1135->tl=({ struct Cyc_List_List* _temp1136=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1136->hd=( void*) _temp1057;
! _temp1136->tl= 0; _temp1136;}); _temp1135;}));} goto _LL1012; _LL1020: if(
! _temp1061 ==  0){ s= Cyc_PP_text( _tag_arr("return;", sizeof( unsigned char), 8u));}
! else{ s=({ struct Cyc_PP_Doc* _temp1137[ 3u]; _temp1137[ 2u]= Cyc_PP_text(
! _tag_arr(";", sizeof( unsigned char), 2u)); _temp1137[ 1u]= _temp1061 ==  0? Cyc_PP_nil_doc():
! Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null( _temp1061)); _temp1137[
  0u]= Cyc_PP_text( _tag_arr("return ", sizeof( unsigned char), 8u)); Cyc_PP_cat(
! _tag_arr( _temp1137, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL1012;
! _LL1022: { int print_else;{ void* _temp1138=( void*) _temp1063->r; _LL1140: if(
! _temp1138 == ( void*) Cyc_Absyn_Skip_s){ goto _LL1141;} else{ goto _LL1142;}
! _LL1142: goto _LL1143; _LL1141: print_else= 0; goto _LL1139; _LL1143: print_else=
! 1; goto _LL1139; _LL1139:;} s=({ struct Cyc_PP_Doc* _temp1144[ 7u]; _temp1144[ 6u]=
! print_else?({ struct Cyc_PP_Doc* _temp1146[ 5u]; _temp1146[ 4u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1146[ 3u]= Cyc_PP_line_doc();
! _temp1146[ 2u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1147[ 2u]; _temp1147[
! 1u]= Cyc_Absynpp_stmt2doc( _temp1063); _temp1147[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat(
! _tag_arr( _temp1147, sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1146[ 1u]= Cyc_PP_text(
! _tag_arr("else {", sizeof( unsigned char), 7u)); _temp1146[ 0u]= Cyc_PP_line_doc();
! Cyc_PP_cat( _tag_arr( _temp1146, sizeof( struct Cyc_PP_Doc*), 5u));}): Cyc_PP_nil_doc();
! _temp1144[ 5u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1144[ 4u]= Cyc_PP_line_doc(); _temp1144[ 3u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc*
! _temp1145[ 2u]; _temp1145[ 1u]= Cyc_Absynpp_stmt2doc( _temp1065); _temp1145[ 0u]=
! Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1145, sizeof( struct Cyc_PP_Doc*),
! 2u));})); _temp1144[ 2u]= Cyc_PP_text( _tag_arr(") {", sizeof( unsigned char), 4u));
! _temp1144[ 1u]= Cyc_Absynpp_exp2doc( _temp1067); _temp1144[ 0u]= Cyc_PP_text(
! _tag_arr("if (", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1144,
! sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL1012;} _LL1024: s=({ struct Cyc_PP_Doc*
! _temp1148[ 6u]; _temp1148[ 5u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char),
! 2u)); _temp1148[ 4u]= Cyc_PP_line_doc(); _temp1148[ 3u]= Cyc_PP_nest( 2,({
! struct Cyc_PP_Doc* _temp1149[ 2u]; _temp1149[ 1u]= Cyc_Absynpp_stmt2doc(
! _temp1069); _temp1149[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1149,
! sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1148[ 2u]= Cyc_PP_text( _tag_arr(") {",
! sizeof( unsigned char), 4u)); _temp1148[ 1u]= Cyc_Absynpp_exp2doc( _temp1073);
! _temp1148[ 0u]= Cyc_PP_text( _tag_arr("while (", sizeof( unsigned char), 8u));
! Cyc_PP_cat( _tag_arr( _temp1148, sizeof( struct Cyc_PP_Doc*), 6u));}); goto
! _LL1012; _LL1026: s= Cyc_PP_text( _tag_arr("break;", sizeof( unsigned char), 7u));
! goto _LL1012; _LL1028: s= Cyc_PP_text( _tag_arr("continue;", sizeof(
! unsigned char), 10u)); goto _LL1012; _LL1030: s= Cyc_PP_text(( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp1151; _temp1151.tag= Cyc_Std_String_pa;
! _temp1151.f1=( struct _tagged_arr)* _temp1075;{ void* _temp1150[ 1u]={&
! _temp1151}; Cyc_Std_aprintf( _tag_arr("goto %s;", sizeof( unsigned char), 9u),
! _tag_arr( _temp1150, sizeof( void*), 1u));}})); goto _LL1012; _LL1032: s=({
! struct Cyc_PP_Doc* _temp1152[ 10u]; _temp1152[ 9u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1152[ 8u]= Cyc_PP_line_doc(); _temp1152[ 7u]=
! Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1153[ 2u]; _temp1153[ 1u]= Cyc_Absynpp_stmt2doc(
! _temp1077); _temp1153[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1153,
! sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1152[ 6u]= Cyc_PP_text( _tag_arr(") {",
! sizeof( unsigned char), 4u)); _temp1152[ 5u]= Cyc_Absynpp_exp2doc( _temp1081);
! _temp1152[ 4u]= Cyc_PP_text( _tag_arr("; ", sizeof( unsigned char), 3u));
! _temp1152[ 3u]= Cyc_Absynpp_exp2doc( _temp1085); _temp1152[ 2u]= Cyc_PP_text(
! _tag_arr("; ", sizeof( unsigned char), 3u)); _temp1152[ 1u]= Cyc_Absynpp_exp2doc(
! _temp1087); _temp1152[ 0u]= Cyc_PP_text( _tag_arr("for(", sizeof( unsigned char),
! 5u)); Cyc_PP_cat( _tag_arr( _temp1152, sizeof( struct Cyc_PP_Doc*), 10u));});
! goto _LL1012; _LL1034: s=({ struct Cyc_PP_Doc* _temp1154[ 7u]; _temp1154[ 6u]=
! Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u)); _temp1154[ 5u]= Cyc_PP_line_doc();
! _temp1154[ 4u]= Cyc_Absynpp_switchclauses2doc( _temp1089); _temp1154[ 3u]= Cyc_PP_line_doc();
! _temp1154[ 2u]= Cyc_PP_text( _tag_arr(") {", sizeof( unsigned char), 4u));
! _temp1154[ 1u]= Cyc_Absynpp_exp2doc( _temp1091); _temp1154[ 0u]= Cyc_PP_text(
  _tag_arr("switch (", sizeof( unsigned char), 9u)); Cyc_PP_cat( _tag_arr(
! _temp1154, sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL1012; _LL1036: s=({
! struct Cyc_PP_Doc* _temp1155[ 7u]; _temp1155[ 6u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1155[ 5u]= Cyc_PP_line_doc(); _temp1155[ 4u]=
! Cyc_Absynpp_switchCclauses2doc( _temp1093); _temp1155[ 3u]= Cyc_PP_line_doc();
! _temp1155[ 2u]= Cyc_PP_text( _tag_arr(") {", sizeof( unsigned char), 4u));
! _temp1155[ 1u]= Cyc_Absynpp_exp2doc( _temp1095); _temp1155[ 0u]= Cyc_PP_text(
  _tag_arr("switch \"C\" (", sizeof( unsigned char), 13u)); Cyc_PP_cat( _tag_arr(
! _temp1155, sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL1012; _LL1038: s= Cyc_PP_text(
! _tag_arr("fallthru;", sizeof( unsigned char), 10u)); goto _LL1012; _LL1040: s=({
! struct Cyc_PP_Doc* _temp1156[ 3u]; _temp1156[ 2u]= Cyc_PP_text( _tag_arr(");",
! sizeof( unsigned char), 3u)); _temp1156[ 1u]= Cyc_Absynpp_exps2doc_prec( 20,
! _temp1099); _temp1156[ 0u]= Cyc_PP_text( _tag_arr("fallthru(", sizeof(
! unsigned char), 10u)); Cyc_PP_cat( _tag_arr( _temp1156, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL1012; _LL1042: s=({ struct Cyc_PP_Doc* _temp1157[ 3u];
! _temp1157[ 2u]= Cyc_Absynpp_stmt2doc( _temp1101); _temp1157[ 1u]= Cyc_PP_line_doc();
! _temp1157[ 0u]= Cyc_Absynpp_decl2doc( _temp1103); Cyc_PP_cat( _tag_arr(
! _temp1157, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL1012; _LL1044: s=({
! struct Cyc_PP_Doc* _temp1158[ 2u]; _temp1158[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1105)); _temp1158[ 0u]= Cyc_PP_text( _tag_arr("cut ", sizeof( unsigned char),
! 5u)); Cyc_PP_cat( _tag_arr( _temp1158, sizeof( struct Cyc_PP_Doc*), 2u));});
! goto _LL1012; _LL1046: s=({ struct Cyc_PP_Doc* _temp1159[ 2u]; _temp1159[ 1u]=
! Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1107)); _temp1159[ 0u]= Cyc_PP_text(
  _tag_arr("splice ", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr(
! _temp1159, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL1012; _LL1048: if( Cyc_Absynpp_decls_first?
! Cyc_Absynpp_is_declaration( _temp1109): 0){ s=({ struct Cyc_PP_Doc* _temp1160[ 6u];
! _temp1160[ 5u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1160[ 4u]= Cyc_PP_line_doc(); _temp1160[ 3u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1109)); _temp1160[ 2u]= Cyc_PP_line_doc(); _temp1160[ 1u]= Cyc_PP_text(
! _tag_arr(": {", sizeof( unsigned char), 4u)); _temp1160[ 0u]= Cyc_PP_textptr(
! _temp1111); Cyc_PP_cat( _tag_arr( _temp1160, sizeof( struct Cyc_PP_Doc*), 6u));});}
! else{ s=({ struct Cyc_PP_Doc* _temp1161[ 3u]; _temp1161[ 2u]= Cyc_Absynpp_stmt2doc(
! _temp1109); _temp1161[ 1u]= Cyc_PP_text( _tag_arr(": ", sizeof( unsigned char),
! 3u)); _temp1161[ 0u]= Cyc_PP_textptr( _temp1111); Cyc_PP_cat( _tag_arr(
! _temp1161, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL1012; _LL1050: s=({
! struct Cyc_PP_Doc* _temp1162[ 7u]; _temp1162[ 6u]= Cyc_PP_text( _tag_arr(");",
! sizeof( unsigned char), 3u)); _temp1162[ 5u]= Cyc_Absynpp_exp2doc( _temp1115);
! _temp1162[ 4u]= Cyc_PP_text( _tag_arr("} while (", sizeof( unsigned char), 10u));
! _temp1162[ 3u]= Cyc_PP_line_doc(); _temp1162[ 2u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1117)); _temp1162[ 1u]= Cyc_PP_line_doc(); _temp1162[ 0u]= Cyc_PP_text(
! _tag_arr("do {", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1162,
! sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL1012; _LL1052: s=({ struct Cyc_PP_Doc*
! _temp1163[ 9u]; _temp1163[ 8u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char),
! 2u)); _temp1163[ 7u]= Cyc_PP_line_doc(); _temp1163[ 6u]= Cyc_PP_nest( 2, Cyc_Absynpp_switchclauses2doc(
! _temp1119)); _temp1163[ 5u]= Cyc_PP_line_doc(); _temp1163[ 4u]= Cyc_PP_text(
! _tag_arr("} catch {", sizeof( unsigned char), 10u)); _temp1163[ 3u]= Cyc_PP_line_doc();
! _temp1163[ 2u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1121)); _temp1163[ 1u]=
! Cyc_PP_line_doc(); _temp1163[ 0u]= Cyc_PP_text( _tag_arr("try {", sizeof(
! unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp1163, sizeof( struct Cyc_PP_Doc*),
! 9u));}); goto _LL1012; _LL1054: s=({ struct Cyc_PP_Doc* _temp1164[ 9u];
! _temp1164[ 8u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1164[ 7u]= Cyc_PP_line_doc(); _temp1164[ 6u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1123)); _temp1164[ 5u]= Cyc_PP_line_doc(); _temp1164[ 4u]= Cyc_PP_text(
! _tag_arr("{", sizeof( unsigned char), 2u)); _temp1164[ 3u]= Cyc_Absynpp_qvar2doc(
! _temp1125->name); _temp1164[ 2u]= Cyc_PP_text( _tag_arr(">", sizeof(
! unsigned char), 2u)); _temp1164[ 1u]= Cyc_PP_textptr( Cyc_Absynpp_get_name(
! _temp1127)); _temp1164[ 0u]= Cyc_PP_text( _tag_arr("region<", sizeof(
! unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp1164, sizeof( struct Cyc_PP_Doc*),
! 9u));}); goto _LL1012; _LL1012:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_pat2doc(
! struct Cyc_Absyn_Pat* p){ struct Cyc_PP_Doc* s;{ void* _temp1165=( void*) p->r;
! int _temp1197; void* _temp1199; unsigned char _temp1201; struct _tagged_arr
! _temp1203; struct Cyc_Absyn_Vardecl* _temp1205; struct Cyc_List_List* _temp1207;
! struct Cyc_Absyn_Pat* _temp1209; struct Cyc_Absyn_Vardecl* _temp1211; struct
! _tuple0* _temp1213; struct Cyc_List_List* _temp1215; struct Cyc_List_List*
! _temp1217; struct _tuple0* _temp1219; struct Cyc_List_List* _temp1221; struct
! Cyc_List_List* _temp1223; struct _tuple0* _temp1225; struct Cyc_List_List*
! _temp1227; struct Cyc_List_List* _temp1229; struct Cyc_Absyn_Structdecl*
! _temp1231; struct Cyc_Absyn_Enumfield* _temp1233; struct Cyc_List_List*
! _temp1235; struct Cyc_List_List* _temp1237; struct Cyc_Absyn_Tunionfield*
! _temp1239; _LL1167: if( _temp1165 == ( void*) Cyc_Absyn_Wild_p){ goto _LL1168;}
! else{ goto _LL1169;} _LL1169: if( _temp1165 == ( void*) Cyc_Absyn_Null_p){ goto
! _LL1170;} else{ goto _LL1171;} _LL1171: if(( unsigned int) _temp1165 >  2u?*((
! int*) _temp1165) ==  Cyc_Absyn_Int_p: 0){ _LL1200: _temp1199=( void*)(( struct
! Cyc_Absyn_Int_p_struct*) _temp1165)->f1; goto _LL1198; _LL1198: _temp1197=((
! struct Cyc_Absyn_Int_p_struct*) _temp1165)->f2; goto _LL1172;} else{ goto
! _LL1173;} _LL1173: if(( unsigned int) _temp1165 >  2u?*(( int*) _temp1165) == 
! Cyc_Absyn_Char_p: 0){ _LL1202: _temp1201=(( struct Cyc_Absyn_Char_p_struct*)
! _temp1165)->f1; goto _LL1174;} else{ goto _LL1175;} _LL1175: if(( unsigned int)
! _temp1165 >  2u?*(( int*) _temp1165) ==  Cyc_Absyn_Float_p: 0){ _LL1204:
! _temp1203=(( struct Cyc_Absyn_Float_p_struct*) _temp1165)->f1; goto _LL1176;}
! else{ goto _LL1177;} _LL1177: if(( unsigned int) _temp1165 >  2u?*(( int*)
! _temp1165) ==  Cyc_Absyn_Var_p: 0){ _LL1206: _temp1205=(( struct Cyc_Absyn_Var_p_struct*)
! _temp1165)->f1; goto _LL1178;} else{ goto _LL1179;} _LL1179: if(( unsigned int)
! _temp1165 >  2u?*(( int*) _temp1165) ==  Cyc_Absyn_Tuple_p: 0){ _LL1208:
! _temp1207=(( struct Cyc_Absyn_Tuple_p_struct*) _temp1165)->f1; goto _LL1180;}
! else{ goto _LL1181;} _LL1181: if(( unsigned int) _temp1165 >  2u?*(( int*)
! _temp1165) ==  Cyc_Absyn_Pointer_p: 0){ _LL1210: _temp1209=(( struct Cyc_Absyn_Pointer_p_struct*)
! _temp1165)->f1; goto _LL1182;} else{ goto _LL1183;} _LL1183: if(( unsigned int)
! _temp1165 >  2u?*(( int*) _temp1165) ==  Cyc_Absyn_Reference_p: 0){ _LL1212:
! _temp1211=(( struct Cyc_Absyn_Reference_p_struct*) _temp1165)->f1; goto _LL1184;}
! else{ goto _LL1185;} _LL1185: if(( unsigned int) _temp1165 >  2u?*(( int*)
! _temp1165) ==  Cyc_Absyn_UnknownId_p: 0){ _LL1214: _temp1213=(( struct Cyc_Absyn_UnknownId_p_struct*)
! _temp1165)->f1; goto _LL1186;} else{ goto _LL1187;} _LL1187: if(( unsigned int)
! _temp1165 >  2u?*(( int*) _temp1165) ==  Cyc_Absyn_UnknownCall_p: 0){ _LL1220:
! _temp1219=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp1165)->f1; goto
! _LL1218; _LL1218: _temp1217=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp1165)->f2;
! goto _LL1216; _LL1216: _temp1215=(( struct Cyc_Absyn_UnknownCall_p_struct*)
! _temp1165)->f3; goto _LL1188;} else{ goto _LL1189;} _LL1189: if(( unsigned int)
! _temp1165 >  2u?*(( int*) _temp1165) ==  Cyc_Absyn_UnknownFields_p: 0){ _LL1226:
! _temp1225=(( struct Cyc_Absyn_UnknownFields_p_struct*) _temp1165)->f1; goto
! _LL1224; _LL1224: _temp1223=(( struct Cyc_Absyn_UnknownFields_p_struct*)
! _temp1165)->f2; goto _LL1222; _LL1222: _temp1221=(( struct Cyc_Absyn_UnknownFields_p_struct*)
! _temp1165)->f3; goto _LL1190;} else{ goto _LL1191;} _LL1191: if(( unsigned int)
! _temp1165 >  2u?*(( int*) _temp1165) ==  Cyc_Absyn_Struct_p: 0){ _LL1232:
! _temp1231=(( struct Cyc_Absyn_Struct_p_struct*) _temp1165)->f1; goto _LL1230;
! _LL1230: _temp1229=(( struct Cyc_Absyn_Struct_p_struct*) _temp1165)->f3; goto
! _LL1228; _LL1228: _temp1227=(( struct Cyc_Absyn_Struct_p_struct*) _temp1165)->f4;
! goto _LL1192;} else{ goto _LL1193;} _LL1193: if(( unsigned int) _temp1165 >  2u?*((
! int*) _temp1165) ==  Cyc_Absyn_Enum_p: 0){ _LL1234: _temp1233=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp1165)->f2; goto _LL1194;} else{ goto _LL1195;} _LL1195: if(( unsigned int)
! _temp1165 >  2u?*(( int*) _temp1165) ==  Cyc_Absyn_Tunion_p: 0){ _LL1240:
! _temp1239=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1165)->f2; goto _LL1238;
! _LL1238: _temp1237=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1165)->f3; goto
! _LL1236; _LL1236: _temp1235=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1165)->f4;
! goto _LL1196;} else{ goto _LL1166;} _LL1168: s= Cyc_PP_text( _tag_arr("_",
! sizeof( unsigned char), 2u)); goto _LL1166; _LL1170: s= Cyc_PP_text( _tag_arr("NULL",
! sizeof( unsigned char), 5u)); goto _LL1166; _LL1172: if( _temp1199 == ( void*)
  Cyc_Absyn_Signed){ s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp1242; _temp1242.tag= Cyc_Std_Int_pa; _temp1242.f1=( int)(( unsigned int)
! _temp1197);{ void* _temp1241[ 1u]={& _temp1242}; Cyc_Std_aprintf( _tag_arr("%d",
! sizeof( unsigned char), 3u), _tag_arr( _temp1241, sizeof( void*), 1u));}}));}
  else{ s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp1244; _temp1244.tag= Cyc_Std_Int_pa; _temp1244.f1=( unsigned int) _temp1197;{
! void* _temp1243[ 1u]={& _temp1244}; Cyc_Std_aprintf( _tag_arr("%u", sizeof(
! unsigned char), 3u), _tag_arr( _temp1243, sizeof( void*), 1u));}}));} goto
! _LL1166; _LL1174: s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp1246; _temp1246.tag= Cyc_Std_String_pa; _temp1246.f1=( struct _tagged_arr)
! Cyc_Absynpp_char_escape( _temp1201);{ void* _temp1245[ 1u]={& _temp1246}; Cyc_Std_aprintf(
! _tag_arr("'%s'", sizeof( unsigned char), 5u), _tag_arr( _temp1245, sizeof( void*),
! 1u));}})); goto _LL1166; _LL1176: s= Cyc_PP_text( _temp1203); goto _LL1166;
! _LL1178: s= Cyc_Absynpp_qvar2doc( _temp1205->name); goto _LL1166; _LL1180: s=({
! struct Cyc_PP_Doc* _temp1247[ 3u]; _temp1247[ 2u]= Cyc_PP_text( _tag_arr(")",
! sizeof( unsigned char), 2u)); _temp1247[ 1u]=(( struct Cyc_PP_Doc*(*)( struct
  Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Pat*), struct _tagged_arr sep, struct Cyc_List_List*
  l)) Cyc_PP_ppseq)( Cyc_Absynpp_pat2doc, _tag_arr(",", sizeof( unsigned char), 2u),
! _temp1207); _temp1247[ 0u]= Cyc_PP_text( _tag_arr("$(", sizeof( unsigned char),
! 3u)); Cyc_PP_cat( _tag_arr( _temp1247, sizeof( struct Cyc_PP_Doc*), 3u));});
! goto _LL1166; _LL1182: s=({ struct Cyc_PP_Doc* _temp1248[ 2u]; _temp1248[ 1u]=
! Cyc_Absynpp_pat2doc( _temp1209); _temp1248[ 0u]= Cyc_PP_text( _tag_arr("&",
! sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp1248, sizeof( struct
! Cyc_PP_Doc*), 2u));}); goto _LL1166; _LL1184: s=({ struct Cyc_PP_Doc* _temp1249[
! 2u]; _temp1249[ 1u]= Cyc_Absynpp_qvar2doc( _temp1211->name); _temp1249[ 0u]= Cyc_PP_text(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp1249,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL1166; _LL1186: s= Cyc_Absynpp_qvar2doc(
! _temp1213); goto _LL1166; _LL1188: s=({ struct Cyc_PP_Doc* _temp1250[ 3u];
! _temp1250[ 2u]= Cyc_PP_group( _tag_arr("(", sizeof( unsigned char), 2u),
  _tag_arr(")", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
  2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Pat*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_pat2doc, _temp1215));
! _temp1250[ 1u]= Cyc_Absynpp_tvars2doc( _temp1217); _temp1250[ 0u]= Cyc_Absynpp_qvar2doc(
! _temp1219); Cyc_PP_cat( _tag_arr( _temp1250, sizeof( struct Cyc_PP_Doc*), 3u));});
! goto _LL1166; _LL1190: s=({ struct Cyc_PP_Doc* _temp1251[ 3u]; _temp1251[ 2u]=
  Cyc_PP_group( _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
  unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_dp2doc, _temp1221)); _temp1251[ 1u]= Cyc_Absynpp_tvars2doc(
! _temp1223); _temp1251[ 0u]= Cyc_Absynpp_qvar2doc( _temp1225); Cyc_PP_cat(
! _tag_arr( _temp1251, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL1166; _LL1192:
! s=({ struct Cyc_PP_Doc* _temp1252[ 3u]; _temp1252[ 2u]= Cyc_PP_group( _tag_arr("{",
  sizeof( unsigned char), 2u), _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",",
  sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)(
  struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_dp2doc,
! _temp1227)); _temp1252[ 1u]= Cyc_Absynpp_tvars2doc( _temp1229); _temp1252[ 0u]=
! _temp1231->name ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_qvar2doc(( struct _tuple0*)((
! struct Cyc_Core_Opt*) _check_null( _temp1231->name))->v); Cyc_PP_cat( _tag_arr(
! _temp1252, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL1166; _LL1194: s= Cyc_Absynpp_qvar2doc(
! _temp1233->name); goto _LL1166; _LL1196: if( _temp1235 ==  0){ s= Cyc_Absynpp_qvar2doc(
! _temp1239->name);} else{ s=({ struct Cyc_PP_Doc* _temp1253[ 3u]; _temp1253[ 2u]=
  Cyc_PP_egroup( _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
  unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_pat2doc, _temp1235)); _temp1253[ 1u]= Cyc_Absynpp_tvars2doc(
! _temp1237); _temp1253[ 0u]= Cyc_Absynpp_qvar2doc( _temp1239->name); Cyc_PP_cat(
! _tag_arr( _temp1253, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL1166;
! _LL1166:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_dp2doc( struct _tuple5* dp){
! return({ struct Cyc_PP_Doc* _temp1254[ 2u]; _temp1254[ 1u]= Cyc_Absynpp_pat2doc((*
! dp).f2); _temp1254[ 0u]= Cyc_PP_egroup( _tag_arr("", sizeof( unsigned char), 1u),
  _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=", sizeof( unsigned char),
  2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( void*), struct Cyc_List_List*
  x)) Cyc_List_map)( Cyc_Absynpp_designator2doc,(* dp).f1)); Cyc_PP_cat( _tag_arr(
! _temp1254, sizeof( struct Cyc_PP_Doc*), 2u));});} struct Cyc_PP_Doc* Cyc_Absynpp_switchclause2doc(
  struct Cyc_Absyn_Switch_clause* c){ if( c->where_clause ==  0?( void*)( c->pattern)->r
! == ( void*) Cyc_Absyn_Wild_p: 0){ return({ struct Cyc_PP_Doc* _temp1255[ 2u];
! _temp1255[ 1u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1256[ 2u]; _temp1256[
! 1u]= Cyc_Absynpp_stmt2doc( c->body); _temp1256[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat(
! _tag_arr( _temp1256, sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1255[ 0u]= Cyc_PP_text(
  _tag_arr("default: ", sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr(
! _temp1255, sizeof( struct Cyc_PP_Doc*), 2u));});} else{ if( c->where_clause == 
! 0){ return({ struct Cyc_PP_Doc* _temp1257[ 4u]; _temp1257[ 3u]= Cyc_PP_nest( 2,({
! struct Cyc_PP_Doc* _temp1258[ 2u]; _temp1258[ 1u]= Cyc_Absynpp_stmt2doc( c->body);
! _temp1258[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1258, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1257[ 2u]= Cyc_PP_text( _tag_arr(": ",
! sizeof( unsigned char), 3u)); _temp1257[ 1u]= Cyc_Absynpp_pat2doc( c->pattern);
! _temp1257[ 0u]= Cyc_PP_text( _tag_arr("case ", sizeof( unsigned char), 6u)); Cyc_PP_cat(
! _tag_arr( _temp1257, sizeof( struct Cyc_PP_Doc*), 4u));});} else{ return({
! struct Cyc_PP_Doc* _temp1259[ 6u]; _temp1259[ 5u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc*
! _temp1260[ 2u]; _temp1260[ 1u]= Cyc_Absynpp_stmt2doc( c->body); _temp1260[ 0u]=
! Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1260, sizeof( struct Cyc_PP_Doc*),
! 2u));})); _temp1259[ 4u]= Cyc_PP_text( _tag_arr(": ", sizeof( unsigned char), 3u));
! _temp1259[ 3u]= Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null( c->where_clause));
! _temp1259[ 2u]= Cyc_PP_text( _tag_arr(" && ", sizeof( unsigned char), 5u));
! _temp1259[ 1u]= Cyc_Absynpp_pat2doc( c->pattern); _temp1259[ 0u]= Cyc_PP_text(
! _tag_arr("case ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp1259,
  sizeof( struct Cyc_PP_Doc*), 6u));});}}} struct Cyc_PP_Doc* Cyc_Absynpp_switchclauses2doc(
  struct Cyc_List_List* cs){ return(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(*
  pp)( struct Cyc_Absyn_Switch_clause*), struct _tagged_arr sep, struct Cyc_List_List*
  l)) Cyc_PP_ppseql)( Cyc_Absynpp_switchclause2doc, _tag_arr("", sizeof(
  unsigned char), 1u), cs);} struct Cyc_PP_Doc* Cyc_Absynpp_switchCclause2doc(
! struct Cyc_Absyn_SwitchC_clause* c){ struct Cyc_Absyn_SwitchC_clause _temp1263;
! struct Cyc_Absyn_Stmt* _temp1264; struct Cyc_Absyn_Exp* _temp1266; struct Cyc_Absyn_SwitchC_clause*
! _temp1261= c; _temp1263=* _temp1261; _LL1267: _temp1266= _temp1263.cnst_exp;
! goto _LL1265; _LL1265: _temp1264= _temp1263.body; goto _LL1262; _LL1262: if(
! _temp1266 ==  0){ return({ struct Cyc_PP_Doc* _temp1268[ 2u]; _temp1268[ 1u]=
! Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1269[ 2u]; _temp1269[ 1u]= Cyc_Absynpp_stmt2doc(
! c->body); _temp1269[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1269,
! sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1268[ 0u]= Cyc_PP_text( _tag_arr("default: ",
! sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr( _temp1268, sizeof( struct
! Cyc_PP_Doc*), 2u));});} else{ return({ struct Cyc_PP_Doc* _temp1270[ 4u];
! _temp1270[ 3u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1271[ 2u]; _temp1271[
! 1u]= Cyc_Absynpp_stmt2doc( _temp1264); _temp1271[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat(
! _tag_arr( _temp1271, sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1270[ 2u]= Cyc_PP_text(
! _tag_arr(": ", sizeof( unsigned char), 3u)); _temp1270[ 1u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( _temp1266)); _temp1270[ 0u]= Cyc_PP_text(
! _tag_arr("case ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp1270,
  sizeof( struct Cyc_PP_Doc*), 4u));});}} struct Cyc_PP_Doc* Cyc_Absynpp_switchCclauses2doc(
  struct Cyc_List_List* cs){ return(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(*
  pp)( struct Cyc_Absyn_SwitchC_clause*), struct _tagged_arr sep, struct Cyc_List_List*
  l)) Cyc_PP_ppseql)( Cyc_Absynpp_switchCclause2doc, _tag_arr("", sizeof(
  unsigned char), 1u), cs);} struct Cyc_PP_Doc* Cyc_Absynpp_enumfield2doc( struct
  Cyc_Absyn_Enumfield* f){ if( f->tag ==  0){ return Cyc_Absynpp_qvar2doc( f->name);}
! else{ return({ struct Cyc_PP_Doc* _temp1272[ 3u]; _temp1272[ 2u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( f->tag)); _temp1272[ 1u]= Cyc_PP_text(
! _tag_arr(" = ", sizeof( unsigned char), 4u)); _temp1272[ 0u]= Cyc_Absynpp_qvar2doc(
! f->name); Cyc_PP_cat( _tag_arr( _temp1272, sizeof( struct Cyc_PP_Doc*), 3u));});}}
  struct Cyc_PP_Doc* Cyc_Absynpp_enumfields2doc( struct Cyc_List_List* fs){ return((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Enumfield*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_enumfield2doc,
--- 1127,2305 ----
  _tag_arr("_ /* ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp351,
  sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL246; _LL260:{ void* _temp352=
  _temp309; struct Cyc_Absyn_UnknownTunionInfo _temp358; int _temp360; struct
! _tuple0* _temp362; struct Cyc_Absyn_Tuniondecl* _temp364; struct Cyc_Absyn_Tuniondecl
! _temp366; int _temp367; struct _tuple0* _temp369; _LL354: if(*(( int*) _temp352)
! ==  Cyc_Absyn_UnknownTunion){ _LL359: _temp358=(( struct Cyc_Absyn_UnknownTunion_struct*)
! _temp352)->f1; _LL363: _temp362= _temp358.name; goto _LL361; _LL361: _temp360=
! _temp358.is_xtunion; goto _LL355;} else{ goto _LL356;} _LL356: if(*(( int*)
! _temp352) ==  Cyc_Absyn_KnownTunion){ _LL365: _temp364=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp352)->f1; _temp366=* _temp364; _LL370: _temp369= _temp366.name; goto _LL368;
! _LL368: _temp367= _temp366.is_xtunion; goto _LL357;} else{ goto _LL353;} _LL355:
! _temp369= _temp362; _temp367= _temp360; goto _LL357; _LL357: { struct Cyc_PP_Doc*
! _temp371= Cyc_PP_text( _temp367? _tag_arr("xtunion ", sizeof( unsigned char), 9u):
! _tag_arr("tunion ", sizeof( unsigned char), 8u));{ void* _temp372= Cyc_Tcutil_compress(
! _temp305); _LL374: if( _temp372 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL375;}
! else{ goto _LL376;} _LL376: goto _LL377; _LL375: s=({ struct Cyc_PP_Doc*
! _temp378[ 3u]; _temp378[ 2u]= Cyc_Absynpp_tps2doc( _temp307); _temp378[ 1u]= Cyc_Absynpp_qvar2doc(
! _temp369); _temp378[ 0u]= _temp371; Cyc_PP_cat( _tag_arr( _temp378, sizeof(
! struct Cyc_PP_Doc*), 3u));}); goto _LL373; _LL377: s=({ struct Cyc_PP_Doc*
! _temp379[ 5u]; _temp379[ 4u]= Cyc_Absynpp_tps2doc( _temp307); _temp379[ 3u]= Cyc_Absynpp_qvar2doc(
! _temp369); _temp379[ 2u]= Cyc_PP_text( _tag_arr(" ", sizeof( unsigned char), 2u));
! _temp379[ 1u]= Cyc_Absynpp_typ2doc( _temp305); _temp379[ 0u]= _temp371; Cyc_PP_cat(
! _tag_arr( _temp379, sizeof( struct Cyc_PP_Doc*), 5u));}); goto _LL373; _LL373:;}
! goto _LL353;} _LL353:;} goto _LL246; _LL262:{ void* _temp380= _temp315; struct
! Cyc_Absyn_UnknownTunionFieldInfo _temp386; int _temp388; struct _tuple0*
! _temp390; struct _tuple0* _temp392; struct Cyc_Absyn_Tunionfield* _temp394;
! struct Cyc_Absyn_Tunionfield _temp396; struct _tuple0* _temp397; struct Cyc_Absyn_Tuniondecl*
! _temp399; struct Cyc_Absyn_Tuniondecl _temp401; int _temp402; struct _tuple0*
! _temp404; _LL382: if(*(( int*) _temp380) ==  Cyc_Absyn_UnknownTunionfield){
! _LL387: _temp386=(( struct Cyc_Absyn_UnknownTunionfield_struct*) _temp380)->f1;
! _LL393: _temp392= _temp386.tunion_name; goto _LL391; _LL391: _temp390= _temp386.field_name;
! goto _LL389; _LL389: _temp388= _temp386.is_xtunion; goto _LL383;} else{ goto
! _LL384;} _LL384: if(*(( int*) _temp380) ==  Cyc_Absyn_KnownTunionfield){ _LL400:
! _temp399=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp380)->f1; _temp401=*
! _temp399; _LL405: _temp404= _temp401.name; goto _LL403; _LL403: _temp402=
! _temp401.is_xtunion; goto _LL395; _LL395: _temp394=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp380)->f2; _temp396=* _temp394; _LL398: _temp397= _temp396.name; goto _LL385;}
! else{ goto _LL381;} _LL383: _temp404= _temp392; _temp402= _temp388; _temp397=
! _temp390; goto _LL385; _LL385: { struct Cyc_PP_Doc* _temp406= Cyc_PP_text(
! _temp402? _tag_arr("xtunion ", sizeof( unsigned char), 9u): _tag_arr("tunion ",
! sizeof( unsigned char), 8u)); s=({ struct Cyc_PP_Doc* _temp407[ 4u]; _temp407[ 3u]=
! Cyc_Absynpp_qvar2doc( _temp397); _temp407[ 2u]= Cyc_PP_text( _tag_arr(".",
! sizeof( unsigned char), 2u)); _temp407[ 1u]= Cyc_Absynpp_qvar2doc( _temp404);
! _temp407[ 0u]= _temp406; Cyc_PP_cat( _tag_arr( _temp407, sizeof( struct Cyc_PP_Doc*),
! 4u));}); goto _LL381;} _LL381:;} goto _LL246; _LL264: { struct _tagged_arr sns;
! struct _tagged_arr ts;{ void* _temp408= _temp319; _LL410: if( _temp408 == ( void*)
! Cyc_Absyn_Signed){ goto _LL411;} else{ goto _LL412;} _LL412: if( _temp408 == (
! void*) Cyc_Absyn_Unsigned){ goto _LL413;} else{ goto _LL409;} _LL411: sns=
! _tag_arr("", sizeof( unsigned char), 1u); goto _LL409; _LL413: sns= _tag_arr("unsigned ",
! sizeof( unsigned char), 10u); goto _LL409; _LL409:;}{ void* _temp414= _temp317;
! _LL416: if( _temp414 == ( void*) Cyc_Absyn_B1){ goto _LL417;} else{ goto _LL418;}
! _LL418: if( _temp414 == ( void*) Cyc_Absyn_B2){ goto _LL419;} else{ goto _LL420;}
! _LL420: if( _temp414 == ( void*) Cyc_Absyn_B4){ goto _LL421;} else{ goto _LL422;}
! _LL422: if( _temp414 == ( void*) Cyc_Absyn_B8){ goto _LL423;} else{ goto _LL415;}
! _LL417:{ void* _temp424= _temp319; _LL426: if( _temp424 == ( void*) Cyc_Absyn_Signed){
! goto _LL427;} else{ goto _LL428;} _LL428: if( _temp424 == ( void*) Cyc_Absyn_Unsigned){
! goto _LL429;} else{ goto _LL425;} _LL427: sns= _tag_arr("signed ", sizeof(
! unsigned char), 8u); goto _LL425; _LL429: goto _LL425; _LL425:;} ts= _tag_arr("char",
! sizeof( unsigned char), 5u); goto _LL415; _LL419: ts= _tag_arr("short", sizeof(
! unsigned char), 6u); goto _LL415; _LL421: ts= _tag_arr("int", sizeof(
! unsigned char), 4u); goto _LL415; _LL423: ts= Cyc_Absynpp_to_VC? _tag_arr("__int64",
  sizeof( unsigned char), 8u): _tag_arr("long long", sizeof( unsigned char), 10u);
! goto _LL415; _LL415:;} s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp432; _temp432.tag= Cyc_Std_String_pa; _temp432.f1=( struct _tagged_arr) ts;{
! struct Cyc_Std_String_pa_struct _temp431; _temp431.tag= Cyc_Std_String_pa;
! _temp431.f1=( struct _tagged_arr) sns;{ void* _temp430[ 2u]={& _temp431,&
! _temp432}; Cyc_Std_aprintf( _tag_arr("%s%s", sizeof( unsigned char), 5u),
! _tag_arr( _temp430, sizeof( void*), 2u));}}})); goto _LL246;} _LL266: s= Cyc_PP_text(
  _tag_arr("float", sizeof( unsigned char), 6u)); goto _LL246; _LL268: s= Cyc_PP_text(
  _tag_arr("double", sizeof( unsigned char), 7u)); goto _LL246; _LL270: s=({
! struct Cyc_PP_Doc* _temp433[ 2u]; _temp433[ 1u]= Cyc_Absynpp_args2doc( _temp321);
! _temp433[ 0u]= Cyc_PP_text( _tag_arr("$", sizeof( unsigned char), 2u)); Cyc_PP_cat(
! _tag_arr( _temp433, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL246; _LL272:
! if( _temp325 ==  0){ s=({ struct Cyc_PP_Doc* _temp434[ 2u]; _temp434[ 1u]= Cyc_Absynpp_tps2doc(
! _temp323); _temp434[ 0u]= Cyc_PP_text( _tag_arr("struct ", sizeof( unsigned char),
! 8u)); Cyc_PP_cat( _tag_arr( _temp434, sizeof( struct Cyc_PP_Doc*), 2u));});}
! else{ s=({ struct Cyc_PP_Doc* _temp435[ 3u]; _temp435[ 2u]= Cyc_Absynpp_tps2doc(
! _temp323); _temp435[ 1u]= _temp325 ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_qvar2doc((
! struct _tuple0*) _check_null( _temp325)); _temp435[ 0u]= Cyc_PP_text( _tag_arr("struct ",
! sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp435, sizeof( struct Cyc_PP_Doc*),
  3u));});} goto _LL246; _LL274: if( _temp329 ==  0){ s=({ struct Cyc_PP_Doc*
! _temp436[ 2u]; _temp436[ 1u]= Cyc_Absynpp_tps2doc( _temp327); _temp436[ 0u]= Cyc_PP_text(
! _tag_arr("union ", sizeof( unsigned char), 7u)); Cyc_PP_cat( _tag_arr( _temp436,
! sizeof( struct Cyc_PP_Doc*), 2u));});} else{ s=({ struct Cyc_PP_Doc* _temp437[ 3u];
! _temp437[ 2u]= Cyc_Absynpp_tps2doc( _temp327); _temp437[ 1u]= _temp329 ==  0?
  Cyc_PP_nil_doc(): Cyc_Absynpp_qvar2doc(( struct _tuple0*) _check_null( _temp329));
! _temp437[ 0u]= Cyc_PP_text( _tag_arr("union ", sizeof( unsigned char), 7u)); Cyc_PP_cat(
! _tag_arr( _temp437, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL246; _LL276:
! s=({ struct Cyc_PP_Doc* _temp438[ 3u]; _temp438[ 2u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp438[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_structfields2doc(
! _temp331)); _temp438[ 0u]= Cyc_PP_text( _tag_arr("struct {", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp438, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL246; _LL278: s=({ struct Cyc_PP_Doc* _temp439[ 3u]; _temp439[ 2u]=
! Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u)); _temp439[ 1u]= Cyc_PP_nest(
! 2, Cyc_Absynpp_structfields2doc( _temp333)); _temp439[ 0u]= Cyc_PP_text(
! _tag_arr("union {", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp439,
  sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL246; _LL280: s=({ struct Cyc_PP_Doc*
! _temp440[ 2u]; _temp440[ 1u]= Cyc_Absynpp_qvar2doc( _temp335); _temp440[ 0u]=
  Cyc_PP_text( _tag_arr("enum ", sizeof( unsigned char), 6u)); Cyc_PP_cat(
! _tag_arr( _temp440, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL246; _LL282: s=({
! struct Cyc_PP_Doc* _temp441[ 2u]; _temp441[ 1u]= Cyc_Absynpp_tps2doc( _temp339);
! _temp441[ 0u]= Cyc_Absynpp_qvar2doc( _temp341); Cyc_PP_cat( _tag_arr( _temp441,
  sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL246; _LL284: s=({ struct Cyc_PP_Doc*
! _temp442[ 3u]; _temp442[ 2u]= Cyc_PP_text( _tag_arr(">", sizeof( unsigned char),
! 2u)); _temp442[ 1u]= Cyc_Absynpp_rgn2doc( _temp343); _temp442[ 0u]= Cyc_PP_text(
  _tag_arr("region_t<", sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr(
! _temp442, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL246; _LL286: s= Cyc_Absynpp_rgn2doc(
! t); goto _LL246; _LL288: s=({ struct Cyc_PP_Doc* _temp443[ 3u]; _temp443[ 2u]=
! Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u)); _temp443[ 1u]= Cyc_Absynpp_typ2doc(
! _temp345); _temp443[ 0u]= Cyc_PP_text( _tag_arr("regions(", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp443, sizeof( struct Cyc_PP_Doc*),
  3u));}); goto _LL246; _LL290: goto _LL292; _LL292: s= Cyc_Absynpp_eff2doc( t);
  goto _LL246; _LL246:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_vo2doc( struct
  Cyc_Core_Opt* vo){ return vo ==  0? Cyc_PP_nil_doc(): Cyc_PP_text(*(( struct
  _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null( vo))->v));} struct _tuple8{
  void* f1; void* f2; } ; struct Cyc_PP_Doc* Cyc_Absynpp_rgn_cmp2doc( struct
! _tuple8* cmp){ struct _tuple8 _temp446; void* _temp447; void* _temp449; struct
! _tuple8* _temp444= cmp; _temp446=* _temp444; _LL450: _temp449= _temp446.f1; goto
! _LL448; _LL448: _temp447= _temp446.f2; goto _LL445; _LL445: return({ struct Cyc_PP_Doc*
! _temp451[ 3u]; _temp451[ 2u]= Cyc_Absynpp_rgn2doc( _temp447); _temp451[ 1u]= Cyc_PP_text(
! _tag_arr(" < ", sizeof( unsigned char), 4u)); _temp451[ 0u]= Cyc_Absynpp_rgn2doc(
! _temp449); Cyc_PP_cat( _tag_arr( _temp451, sizeof( struct Cyc_PP_Doc*), 3u));});}
  struct Cyc_PP_Doc* Cyc_Absynpp_rgnpo2doc( struct Cyc_List_List* po){ return Cyc_PP_group(
  _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("", sizeof( unsigned char), 1u),
  _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)( struct
  Cyc_PP_Doc*(* f)( struct _tuple8*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_rgn_cmp2doc,
  po));} struct Cyc_PP_Doc* Cyc_Absynpp_funarg2doc( struct _tuple1* t){ struct Cyc_Core_Opt*
! dopt=(* t).f1 ==  0? 0:({ struct Cyc_Core_Opt* _temp452=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp452->v=( void*) Cyc_PP_text(*((
  struct _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null((* t).f1))->v));
! _temp452;}); return Cyc_Absynpp_tqtd2doc((* t).f2,(* t).f3, dopt);} struct Cyc_PP_Doc*
  Cyc_Absynpp_funargs2doc( struct Cyc_List_List* args, int c_varargs, struct Cyc_Absyn_VarargInfo*
  cyc_varargs, struct Cyc_Core_Opt* effopt, struct Cyc_List_List* rgn_po){ struct
! Cyc_List_List* _temp453=(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)(
  struct _tuple1*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_funarg2doc,
! args); struct Cyc_PP_Doc* eff_doc; if( c_varargs){ _temp453=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp453,({
! struct Cyc_List_List* _temp454=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp454->hd=( void*) Cyc_PP_text( _tag_arr("...",
! sizeof( unsigned char), 4u)); _temp454->tl= 0; _temp454;}));} else{ if(
! cyc_varargs !=  0){ struct Cyc_PP_Doc* _temp455=({ struct Cyc_PP_Doc* _temp457[
! 3u]; _temp457[ 2u]= Cyc_Absynpp_funarg2doc(({ struct _tuple1* _temp458=( struct
! _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp458->f1=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->name; _temp458->f2=(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->tq; _temp458->f3=( void*)(( struct Cyc_Absyn_VarargInfo*)
! _check_null( cyc_varargs))->type; _temp458;})); _temp457[ 1u]=(( struct Cyc_Absyn_VarargInfo*)
  _check_null( cyc_varargs))->inject? Cyc_PP_text( _tag_arr(" inject ", sizeof(
  unsigned char), 9u)): Cyc_PP_text( _tag_arr(" ", sizeof( unsigned char), 2u));
! _temp457[ 0u]= Cyc_PP_text( _tag_arr("...", sizeof( unsigned char), 4u)); Cyc_PP_cat(
! _tag_arr( _temp457, sizeof( struct Cyc_PP_Doc*), 3u));}); _temp453=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp453,({
! struct Cyc_List_List* _temp456=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp456->hd=( void*) _temp455; _temp456->tl= 0;
! _temp456;}));}}{ struct Cyc_PP_Doc* _temp459= Cyc_PP_group( _tag_arr("", sizeof(
  unsigned char), 1u), _tag_arr("", sizeof( unsigned char), 1u), _tag_arr(",",
! sizeof( unsigned char), 2u), _temp453); if( effopt !=  0){ _temp459=({ struct
! Cyc_PP_Doc* _temp460[ 3u]; _temp460[ 2u]= Cyc_Absynpp_eff2doc(( void*)(( struct
! Cyc_Core_Opt*) _check_null( effopt))->v); _temp460[ 1u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp460[ 0u]= _temp459; Cyc_PP_cat( _tag_arr(
! _temp460, sizeof( struct Cyc_PP_Doc*), 3u));});} if( rgn_po !=  0){ _temp459=({
! struct Cyc_PP_Doc* _temp461[ 3u]; _temp461[ 2u]= Cyc_Absynpp_rgnpo2doc( rgn_po);
! _temp461[ 1u]= Cyc_PP_text( _tag_arr(":", sizeof( unsigned char), 2u)); _temp461[
! 0u]= _temp459; Cyc_PP_cat( _tag_arr( _temp461, sizeof( struct Cyc_PP_Doc*), 3u));});}
! return({ struct Cyc_PP_Doc* _temp462[ 3u]; _temp462[ 2u]= Cyc_PP_text( _tag_arr(")",
! sizeof( unsigned char), 2u)); _temp462[ 1u]= _temp459; _temp462[ 0u]= Cyc_PP_text(
! _tag_arr("(", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp462,
  sizeof( struct Cyc_PP_Doc*), 3u));});}} struct _tuple1* Cyc_Absynpp_arg_mk_opt(
! struct _tuple3* arg){ return({ struct _tuple1* _temp463=( struct _tuple1*)
! _cycalloc( sizeof( struct _tuple1)); _temp463->f1=({ struct Cyc_Core_Opt*
! _temp464=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp464->v=( void*)(* arg).f1; _temp464;}); _temp463->f2=(* arg).f2; _temp463->f3=(*
! arg).f3; _temp463;});} struct Cyc_PP_Doc* Cyc_Absynpp_var2doc( struct
  _tagged_arr* v){ return Cyc_PP_text(* v);} struct Cyc_PP_Doc* Cyc_Absynpp_qvar2doc(
! struct _tuple0* q){ struct Cyc_List_List* _temp465= 0; int match;{ void*
! _temp466=(* q).f1; struct Cyc_List_List* _temp474; struct Cyc_List_List*
! _temp476; _LL468: if( _temp466 == ( void*) Cyc_Absyn_Loc_n){ goto _LL469;} else{
! goto _LL470;} _LL470: if(( unsigned int) _temp466 >  1u?*(( int*) _temp466) == 
! Cyc_Absyn_Rel_n: 0){ _LL475: _temp474=(( struct Cyc_Absyn_Rel_n_struct*)
! _temp466)->f1; goto _LL471;} else{ goto _LL472;} _LL472: if(( unsigned int)
! _temp466 >  1u?*(( int*) _temp466) ==  Cyc_Absyn_Abs_n: 0){ _LL477: _temp476=((
! struct Cyc_Absyn_Abs_n_struct*) _temp466)->f1; goto _LL473;} else{ goto _LL467;}
! _LL469: _temp474= 0; goto _LL471; _LL471: match= 0; _temp465= _temp474; goto
! _LL467; _LL473: match= Cyc_Absynpp_use_curr_namespace?(( int(*)( int(* cmp)(
  struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l1, struct Cyc_List_List*
! l2)) Cyc_List_list_prefix)( Cyc_Std_strptrcmp, _temp476, Cyc_Absynpp_curr_namespace):
! 0; _temp465=( Cyc_Absynpp_qvar_to_Cids? Cyc_Absynpp_add_cyc_prefix: 0)?({ struct
! Cyc_List_List* _temp478=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp478->hd=( void*) Cyc_Absynpp_cyc_stringptr; _temp478->tl= _temp476;
! _temp478;}): _temp476; goto _LL467; _LL467:;} if( Cyc_Absynpp_qvar_to_Cids){
  return Cyc_PP_text(( struct _tagged_arr) Cyc_Std_str_sepstr((( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp465,({
! struct Cyc_List_List* _temp479=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp479->hd=( void*)(* q).f2; _temp479->tl= 0; _temp479;})),
  _tag_arr("_", sizeof( unsigned char), 2u)));} else{ if( match){ return Cyc_Absynpp_var2doc((*
  q).f2);} else{ return Cyc_PP_text(( struct _tagged_arr) Cyc_Std_str_sepstr(((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! _temp465,({ struct Cyc_List_List* _temp480=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp480->hd=( void*)(* q).f2; _temp480->tl= 0;
! _temp480;})), _tag_arr("::", sizeof( unsigned char), 3u)));}}} struct Cyc_PP_Doc*
  Cyc_Absynpp_typedef_name2doc( struct _tuple0* v){ if( Cyc_Absynpp_qvar_to_Cids){
  return Cyc_Absynpp_qvar2doc( v);} if( Cyc_Absynpp_use_curr_namespace){ void*
! _temp481=(* v).f1; struct Cyc_List_List* _temp491; struct Cyc_List_List*
! _temp493; _LL483: if( _temp481 == ( void*) Cyc_Absyn_Loc_n){ goto _LL484;} else{
! goto _LL485;} _LL485: if(( unsigned int) _temp481 >  1u?*(( int*) _temp481) == 
! Cyc_Absyn_Rel_n: 0){ _LL492: _temp491=(( struct Cyc_Absyn_Rel_n_struct*)
! _temp481)->f1; if( _temp491 ==  0){ goto _LL486;} else{ goto _LL487;}} else{
! goto _LL487;} _LL487: if(( unsigned int) _temp481 >  1u?*(( int*) _temp481) == 
! Cyc_Absyn_Abs_n: 0){ _LL494: _temp493=(( struct Cyc_Absyn_Abs_n_struct*)
! _temp481)->f1; goto _LL488;} else{ goto _LL489;} _LL489: goto _LL490; _LL484:
! goto _LL486; _LL486: return Cyc_Absynpp_var2doc((* v).f2); _LL488: if((( int(*)(
  int(* cmp)( struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l1,
! struct Cyc_List_List* l2)) Cyc_List_list_cmp)( Cyc_Std_strptrcmp, _temp493, Cyc_Absynpp_curr_namespace)
! ==  0){ return Cyc_Absynpp_var2doc((* v).f2);} else{ goto _LL490;} _LL490:
! return({ struct Cyc_PP_Doc* _temp495[ 2u]; _temp495[ 1u]= Cyc_Absynpp_qvar2doc(
! v); _temp495[ 0u]= Cyc_PP_text( _tag_arr("/* bad namespace : */ ", sizeof(
! unsigned char), 23u)); Cyc_PP_cat( _tag_arr( _temp495, sizeof( struct Cyc_PP_Doc*),
! 2u));}); _LL482:;} else{ return Cyc_Absynpp_var2doc((* v).f2);}} struct Cyc_PP_Doc*
  Cyc_Absynpp_typ2doc( void* t){ return Cyc_Absynpp_tqtd2doc( Cyc_Absyn_empty_tqual(),
! t, 0);} int Cyc_Absynpp_exp_prec( struct Cyc_Absyn_Exp* e){ void* _temp496=(
! void*) e->r; void* _temp572; struct Cyc_Absyn_Exp* _temp574; struct Cyc_Absyn_Exp*
! _temp576; _LL498: if(*(( int*) _temp496) ==  Cyc_Absyn_Const_e){ goto _LL499;}
! else{ goto _LL500;} _LL500: if(*(( int*) _temp496) ==  Cyc_Absyn_Var_e){ goto
! _LL501;} else{ goto _LL502;} _LL502: if(*(( int*) _temp496) ==  Cyc_Absyn_UnknownId_e){
! goto _LL503;} else{ goto _LL504;} _LL504: if(*(( int*) _temp496) ==  Cyc_Absyn_Primop_e){
! _LL573: _temp572=( void*)(( struct Cyc_Absyn_Primop_e_struct*) _temp496)->f1;
! goto _LL505;} else{ goto _LL506;} _LL506: if(*(( int*) _temp496) ==  Cyc_Absyn_AssignOp_e){
! goto _LL507;} else{ goto _LL508;} _LL508: if(*(( int*) _temp496) ==  Cyc_Absyn_Increment_e){
! goto _LL509;} else{ goto _LL510;} _LL510: if(*(( int*) _temp496) ==  Cyc_Absyn_Conditional_e){
! goto _LL511;} else{ goto _LL512;} _LL512: if(*(( int*) _temp496) ==  Cyc_Absyn_SeqExp_e){
! goto _LL513;} else{ goto _LL514;} _LL514: if(*(( int*) _temp496) ==  Cyc_Absyn_UnknownCall_e){
! goto _LL515;} else{ goto _LL516;} _LL516: if(*(( int*) _temp496) ==  Cyc_Absyn_FnCall_e){
! goto _LL517;} else{ goto _LL518;} _LL518: if(*(( int*) _temp496) ==  Cyc_Absyn_Throw_e){
! goto _LL519;} else{ goto _LL520;} _LL520: if(*(( int*) _temp496) ==  Cyc_Absyn_NoInstantiate_e){
! _LL575: _temp574=(( struct Cyc_Absyn_NoInstantiate_e_struct*) _temp496)->f1;
! goto _LL521;} else{ goto _LL522;} _LL522: if(*(( int*) _temp496) ==  Cyc_Absyn_Instantiate_e){
! _LL577: _temp576=(( struct Cyc_Absyn_Instantiate_e_struct*) _temp496)->f1; goto
! _LL523;} else{ goto _LL524;} _LL524: if(*(( int*) _temp496) ==  Cyc_Absyn_Cast_e){
! goto _LL525;} else{ goto _LL526;} _LL526: if(*(( int*) _temp496) ==  Cyc_Absyn_New_e){
! goto _LL527;} else{ goto _LL528;} _LL528: if(*(( int*) _temp496) ==  Cyc_Absyn_Address_e){
! goto _LL529;} else{ goto _LL530;} _LL530: if(*(( int*) _temp496) ==  Cyc_Absyn_Sizeoftyp_e){
! goto _LL531;} else{ goto _LL532;} _LL532: if(*(( int*) _temp496) ==  Cyc_Absyn_Sizeofexp_e){
! goto _LL533;} else{ goto _LL534;} _LL534: if(*(( int*) _temp496) ==  Cyc_Absyn_Offsetof_e){
! goto _LL535;} else{ goto _LL536;} _LL536: if(*(( int*) _temp496) ==  Cyc_Absyn_Gentyp_e){
! goto _LL537;} else{ goto _LL538;} _LL538: if(*(( int*) _temp496) ==  Cyc_Absyn_Deref_e){
! goto _LL539;} else{ goto _LL540;} _LL540: if(*(( int*) _temp496) ==  Cyc_Absyn_StructMember_e){
! goto _LL541;} else{ goto _LL542;} _LL542: if(*(( int*) _temp496) ==  Cyc_Absyn_StructArrow_e){
! goto _LL543;} else{ goto _LL544;} _LL544: if(*(( int*) _temp496) ==  Cyc_Absyn_Subscript_e){
! goto _LL545;} else{ goto _LL546;} _LL546: if(*(( int*) _temp496) ==  Cyc_Absyn_Tuple_e){
! goto _LL547;} else{ goto _LL548;} _LL548: if(*(( int*) _temp496) ==  Cyc_Absyn_CompoundLit_e){
! goto _LL549;} else{ goto _LL550;} _LL550: if(*(( int*) _temp496) ==  Cyc_Absyn_Array_e){
! goto _LL551;} else{ goto _LL552;} _LL552: if(*(( int*) _temp496) ==  Cyc_Absyn_Comprehension_e){
! goto _LL553;} else{ goto _LL554;} _LL554: if(*(( int*) _temp496) ==  Cyc_Absyn_Struct_e){
! goto _LL555;} else{ goto _LL556;} _LL556: if(*(( int*) _temp496) ==  Cyc_Absyn_AnonStruct_e){
! goto _LL557;} else{ goto _LL558;} _LL558: if(*(( int*) _temp496) ==  Cyc_Absyn_Tunion_e){
! goto _LL559;} else{ goto _LL560;} _LL560: if(*(( int*) _temp496) ==  Cyc_Absyn_Enum_e){
! goto _LL561;} else{ goto _LL562;} _LL562: if(*(( int*) _temp496) ==  Cyc_Absyn_Malloc_e){
! goto _LL563;} else{ goto _LL564;} _LL564: if(*(( int*) _temp496) ==  Cyc_Absyn_UnresolvedMem_e){
! goto _LL565;} else{ goto _LL566;} _LL566: if(*(( int*) _temp496) ==  Cyc_Absyn_StmtExp_e){
! goto _LL567;} else{ goto _LL568;} _LL568: if(*(( int*) _temp496) ==  Cyc_Absyn_Codegen_e){
! goto _LL569;} else{ goto _LL570;} _LL570: if(*(( int*) _temp496) ==  Cyc_Absyn_Fill_e){
! goto _LL571;} else{ goto _LL497;} _LL499: return 10000; _LL501: return 10000;
! _LL503: return 10000; _LL505: { void* _temp578= _temp572; _LL580: if( _temp578
! == ( void*) Cyc_Absyn_Plus){ goto _LL581;} else{ goto _LL582;} _LL582: if(
! _temp578 == ( void*) Cyc_Absyn_Times){ goto _LL583;} else{ goto _LL584;} _LL584:
! if( _temp578 == ( void*) Cyc_Absyn_Minus){ goto _LL585;} else{ goto _LL586;}
! _LL586: if( _temp578 == ( void*) Cyc_Absyn_Div){ goto _LL587;} else{ goto _LL588;}
! _LL588: if( _temp578 == ( void*) Cyc_Absyn_Mod){ goto _LL589;} else{ goto _LL590;}
! _LL590: if( _temp578 == ( void*) Cyc_Absyn_Eq){ goto _LL591;} else{ goto _LL592;}
! _LL592: if( _temp578 == ( void*) Cyc_Absyn_Neq){ goto _LL593;} else{ goto _LL594;}
! _LL594: if( _temp578 == ( void*) Cyc_Absyn_Gt){ goto _LL595;} else{ goto _LL596;}
! _LL596: if( _temp578 == ( void*) Cyc_Absyn_Lt){ goto _LL597;} else{ goto _LL598;}
! _LL598: if( _temp578 == ( void*) Cyc_Absyn_Gte){ goto _LL599;} else{ goto _LL600;}
! _LL600: if( _temp578 == ( void*) Cyc_Absyn_Lte){ goto _LL601;} else{ goto _LL602;}
! _LL602: if( _temp578 == ( void*) Cyc_Absyn_Not){ goto _LL603;} else{ goto _LL604;}
! _LL604: if( _temp578 == ( void*) Cyc_Absyn_Bitnot){ goto _LL605;} else{ goto
! _LL606;} _LL606: if( _temp578 == ( void*) Cyc_Absyn_Bitand){ goto _LL607;} else{
! goto _LL608;} _LL608: if( _temp578 == ( void*) Cyc_Absyn_Bitor){ goto _LL609;}
! else{ goto _LL610;} _LL610: if( _temp578 == ( void*) Cyc_Absyn_Bitxor){ goto
! _LL611;} else{ goto _LL612;} _LL612: if( _temp578 == ( void*) Cyc_Absyn_Bitlshift){
! goto _LL613;} else{ goto _LL614;} _LL614: if( _temp578 == ( void*) Cyc_Absyn_Bitlrshift){
! goto _LL615;} else{ goto _LL616;} _LL616: if( _temp578 == ( void*) Cyc_Absyn_Bitarshift){
! goto _LL617;} else{ goto _LL618;} _LL618: if( _temp578 == ( void*) Cyc_Absyn_Size){
! goto _LL619;} else{ goto _LL579;} _LL581: return 100; _LL583: return 110; _LL585:
! return 100; _LL587: return 110; _LL589: return 110; _LL591: return 70; _LL593:
! return 70; _LL595: return 80; _LL597: return 80; _LL599: return 80; _LL601:
! return 80; _LL603: return 130; _LL605: return 130; _LL607: return 60; _LL609:
! return 40; _LL611: return 50; _LL613: return 90; _LL615: return 80; _LL617:
! return 80; _LL619: return 140; _LL579:;} _LL507: return 20; _LL509: return 130;
! _LL511: return 30; _LL513: return 10; _LL515: return 140; _LL517: return 140;
! _LL519: return 130; _LL521: return Cyc_Absynpp_exp_prec( _temp574); _LL523:
! return Cyc_Absynpp_exp_prec( _temp576); _LL525: return 120; _LL527: return 15;
! _LL529: return 130; _LL531: return 130; _LL533: return 130; _LL535: return 130;
! _LL537: return 130; _LL539: return 130; _LL541: return 140; _LL543: return 140;
! _LL545: return 140; _LL547: return 150; _LL549: goto _LL551; _LL551: goto _LL553;
! _LL553: goto _LL555; _LL555: goto _LL557; _LL557: goto _LL559; _LL559: goto
! _LL561; _LL561: goto _LL563; _LL563: return 140; _LL565: return 140; _LL567:
! return 10000; _LL569: return 140; _LL571: return 140; _LL497:;} struct Cyc_PP_Doc*
  Cyc_Absynpp_exp2doc( struct Cyc_Absyn_Exp* e){ return Cyc_Absynpp_exp2doc_prec(
  0, e);} struct Cyc_PP_Doc* Cyc_Absynpp_exp2doc_prec( int inprec, struct Cyc_Absyn_Exp*
! e){ int myprec= Cyc_Absynpp_exp_prec( e); struct Cyc_PP_Doc* s;{ void* _temp620=(
! void*) e->r; void* _temp696; struct _tuple0* _temp698; struct _tuple0* _temp700;
! struct Cyc_List_List* _temp702; void* _temp704; struct Cyc_Absyn_Exp* _temp706;
! struct Cyc_Core_Opt* _temp708; struct Cyc_Absyn_Exp* _temp710; void* _temp712;
! struct Cyc_Absyn_Exp* _temp714; struct Cyc_Absyn_Exp* _temp716; struct Cyc_Absyn_Exp*
! _temp718; struct Cyc_Absyn_Exp* _temp720; struct Cyc_Absyn_Exp* _temp722; struct
! Cyc_Absyn_Exp* _temp724; struct Cyc_List_List* _temp726; struct Cyc_Absyn_Exp*
! _temp728; struct Cyc_List_List* _temp730; struct Cyc_Absyn_Exp* _temp732; struct
! Cyc_Absyn_Exp* _temp734; struct Cyc_Absyn_Exp* _temp736; struct Cyc_Absyn_Exp*
! _temp738; struct Cyc_Absyn_Exp* _temp740; void* _temp742; struct Cyc_Absyn_Exp*
! _temp744; struct Cyc_Absyn_Exp* _temp746; struct Cyc_Absyn_Exp* _temp748; void*
! _temp750; struct Cyc_Absyn_Exp* _temp752; struct _tagged_arr* _temp754; void*
! _temp756; void* _temp758; struct Cyc_Absyn_Exp* _temp760; struct _tagged_arr*
! _temp762; struct Cyc_Absyn_Exp* _temp764; struct _tagged_arr* _temp766; struct
! Cyc_Absyn_Exp* _temp768; struct Cyc_Absyn_Exp* _temp770; struct Cyc_Absyn_Exp*
! _temp772; struct Cyc_List_List* _temp774; struct Cyc_List_List* _temp776; struct
! _tuple1* _temp778; struct Cyc_List_List* _temp780; struct Cyc_Absyn_Exp*
! _temp782; struct Cyc_Absyn_Exp* _temp784; struct Cyc_Absyn_Vardecl* _temp786;
! struct Cyc_List_List* _temp788; struct _tuple0* _temp790; struct Cyc_List_List*
! _temp792; struct Cyc_Absyn_Tunionfield* _temp794; struct Cyc_List_List* _temp796;
! struct _tuple0* _temp798; void* _temp800; struct Cyc_Absyn_Exp* _temp802; struct
! Cyc_List_List* _temp804; struct Cyc_Core_Opt* _temp806; struct Cyc_Absyn_Stmt*
! _temp808; struct Cyc_Absyn_Fndecl* _temp810; struct Cyc_Absyn_Exp* _temp812;
! _LL622: if(*(( int*) _temp620) ==  Cyc_Absyn_Const_e){ _LL697: _temp696=( void*)((
! struct Cyc_Absyn_Const_e_struct*) _temp620)->f1; goto _LL623;} else{ goto _LL624;}
! _LL624: if(*(( int*) _temp620) ==  Cyc_Absyn_Var_e){ _LL699: _temp698=(( struct
! Cyc_Absyn_Var_e_struct*) _temp620)->f1; goto _LL625;} else{ goto _LL626;} _LL626:
! if(*(( int*) _temp620) ==  Cyc_Absyn_UnknownId_e){ _LL701: _temp700=(( struct
! Cyc_Absyn_UnknownId_e_struct*) _temp620)->f1; goto _LL627;} else{ goto _LL628;}
! _LL628: if(*(( int*) _temp620) ==  Cyc_Absyn_Primop_e){ _LL705: _temp704=( void*)((
! struct Cyc_Absyn_Primop_e_struct*) _temp620)->f1; goto _LL703; _LL703: _temp702=((
! struct Cyc_Absyn_Primop_e_struct*) _temp620)->f2; goto _LL629;} else{ goto
! _LL630;} _LL630: if(*(( int*) _temp620) ==  Cyc_Absyn_AssignOp_e){ _LL711:
! _temp710=(( struct Cyc_Absyn_AssignOp_e_struct*) _temp620)->f1; goto _LL709;
! _LL709: _temp708=(( struct Cyc_Absyn_AssignOp_e_struct*) _temp620)->f2; goto
! _LL707; _LL707: _temp706=(( struct Cyc_Absyn_AssignOp_e_struct*) _temp620)->f3;
! goto _LL631;} else{ goto _LL632;} _LL632: if(*(( int*) _temp620) ==  Cyc_Absyn_Increment_e){
! _LL715: _temp714=(( struct Cyc_Absyn_Increment_e_struct*) _temp620)->f1; goto
! _LL713; _LL713: _temp712=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp620)->f2; goto _LL633;} else{ goto _LL634;} _LL634: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Conditional_e){ _LL721: _temp720=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp620)->f1; goto _LL719; _LL719: _temp718=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp620)->f2; goto _LL717; _LL717: _temp716=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp620)->f3; goto _LL635;} else{ goto _LL636;} _LL636: if(*(( int*) _temp620)
! ==  Cyc_Absyn_SeqExp_e){ _LL725: _temp724=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp620)->f1; goto _LL723; _LL723: _temp722=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp620)->f2; goto _LL637;} else{ goto _LL638;} _LL638: if(*(( int*) _temp620)
! ==  Cyc_Absyn_UnknownCall_e){ _LL729: _temp728=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp620)->f1; goto _LL727; _LL727: _temp726=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp620)->f2; goto _LL639;} else{ goto _LL640;} _LL640: if(*(( int*) _temp620)
! ==  Cyc_Absyn_FnCall_e){ _LL733: _temp732=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp620)->f1; goto _LL731; _LL731: _temp730=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp620)->f2; goto _LL641;} else{ goto _LL642;} _LL642: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Throw_e){ _LL735: _temp734=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp620)->f1; goto _LL643;} else{ goto _LL644;} _LL644: if(*(( int*) _temp620)
! ==  Cyc_Absyn_NoInstantiate_e){ _LL737: _temp736=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp620)->f1; goto _LL645;} else{ goto _LL646;} _LL646: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Instantiate_e){ _LL739: _temp738=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp620)->f1; goto _LL647;} else{ goto _LL648;} _LL648: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Cast_e){ _LL743: _temp742=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp620)->f1; goto _LL741; _LL741: _temp740=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp620)->f2; goto _LL649;} else{ goto _LL650;} _LL650: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Address_e){ _LL745: _temp744=(( struct Cyc_Absyn_Address_e_struct*)
! _temp620)->f1; goto _LL651;} else{ goto _LL652;} _LL652: if(*(( int*) _temp620)
! ==  Cyc_Absyn_New_e){ _LL749: _temp748=(( struct Cyc_Absyn_New_e_struct*)
! _temp620)->f1; goto _LL747; _LL747: _temp746=(( struct Cyc_Absyn_New_e_struct*)
! _temp620)->f2; goto _LL653;} else{ goto _LL654;} _LL654: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Sizeoftyp_e){ _LL751: _temp750=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp620)->f1; goto _LL655;} else{ goto _LL656;} _LL656: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Sizeofexp_e){ _LL753: _temp752=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp620)->f1; goto _LL657;} else{ goto _LL658;} _LL658: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Offsetof_e){ _LL757: _temp756=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp620)->f1; goto _LL755; _LL755: _temp754=(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp620)->f2; goto _LL659;} else{ goto _LL660;} _LL660: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Gentyp_e){ _LL759: _temp758=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*)
! _temp620)->f1; goto _LL661;} else{ goto _LL662;} _LL662: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Deref_e){ _LL761: _temp760=(( struct Cyc_Absyn_Deref_e_struct*)
! _temp620)->f1; goto _LL663;} else{ goto _LL664;} _LL664: if(*(( int*) _temp620)
! ==  Cyc_Absyn_StructMember_e){ _LL765: _temp764=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp620)->f1; goto _LL763; _LL763: _temp762=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp620)->f2; goto _LL665;} else{ goto _LL666;} _LL666: if(*(( int*) _temp620)
! ==  Cyc_Absyn_StructArrow_e){ _LL769: _temp768=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp620)->f1; goto _LL767; _LL767: _temp766=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp620)->f2; goto _LL667;} else{ goto _LL668;} _LL668: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Subscript_e){ _LL773: _temp772=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp620)->f1; goto _LL771; _LL771: _temp770=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp620)->f2; goto _LL669;} else{ goto _LL670;} _LL670: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Tuple_e){ _LL775: _temp774=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp620)->f1; goto _LL671;} else{ goto _LL672;} _LL672: if(*(( int*) _temp620)
! ==  Cyc_Absyn_CompoundLit_e){ _LL779: _temp778=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp620)->f1; goto _LL777; _LL777: _temp776=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp620)->f2; goto _LL673;} else{ goto _LL674;} _LL674: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Array_e){ _LL781: _temp780=(( struct Cyc_Absyn_Array_e_struct*)
! _temp620)->f1; goto _LL675;} else{ goto _LL676;} _LL676: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Comprehension_e){ _LL787: _temp786=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp620)->f1; goto _LL785; _LL785: _temp784=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp620)->f2; goto _LL783; _LL783: _temp782=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp620)->f3; goto _LL677;} else{ goto _LL678;} _LL678: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Struct_e){ _LL791: _temp790=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp620)->f1; goto _LL789; _LL789: _temp788=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp620)->f3; goto _LL679;} else{ goto _LL680;} _LL680: if(*(( int*) _temp620)
! ==  Cyc_Absyn_AnonStruct_e){ _LL793: _temp792=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp620)->f2; goto _LL681;} else{ goto _LL682;} _LL682: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Tunion_e){ _LL797: _temp796=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp620)->f3; goto _LL795; _LL795: _temp794=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp620)->f5; goto _LL683;} else{ goto _LL684;} _LL684: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Enum_e){ _LL799: _temp798=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp620)->f1; goto _LL685;} else{ goto _LL686;} _LL686: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Malloc_e){ _LL803: _temp802=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp620)->f1; goto _LL801; _LL801: _temp800=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp620)->f2; goto _LL687;} else{ goto _LL688;} _LL688: if(*(( int*) _temp620)
! ==  Cyc_Absyn_UnresolvedMem_e){ _LL807: _temp806=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp620)->f1; goto _LL805; _LL805: _temp804=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp620)->f2; goto _LL689;} else{ goto _LL690;} _LL690: if(*(( int*) _temp620)
! ==  Cyc_Absyn_StmtExp_e){ _LL809: _temp808=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp620)->f1; goto _LL691;} else{ goto _LL692;} _LL692: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Codegen_e){ _LL811: _temp810=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp620)->f1; goto _LL693;} else{ goto _LL694;} _LL694: if(*(( int*) _temp620)
! ==  Cyc_Absyn_Fill_e){ _LL813: _temp812=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp620)->f1; goto _LL695;} else{ goto _LL621;} _LL623: s= Cyc_Absynpp_cnst2doc(
! _temp696); goto _LL621; _LL625: _temp700= _temp698; goto _LL627; _LL627: s= Cyc_Absynpp_qvar2doc(
! _temp700); goto _LL621; _LL629: s= Cyc_Absynpp_primapp2doc( myprec, _temp704,
! _temp702); goto _LL621; _LL631: s=({ struct Cyc_PP_Doc* _temp814[ 5u]; _temp814[
! 4u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp706); _temp814[ 3u]= Cyc_PP_text(
! _tag_arr("= ", sizeof( unsigned char), 3u)); _temp814[ 2u]= _temp708 ==  0? Cyc_PP_text(
  _tag_arr("", sizeof( unsigned char), 1u)): Cyc_Absynpp_prim2doc(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp708))->v); _temp814[ 1u]= Cyc_PP_text(
! _tag_arr(" ", sizeof( unsigned char), 2u)); _temp814[ 0u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp710); Cyc_PP_cat( _tag_arr( _temp814, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL621; _LL633: { struct Cyc_PP_Doc* _temp815= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp714);{ void* _temp816= _temp712; _LL818: if( _temp816 == ( void*)
! Cyc_Absyn_PreInc){ goto _LL819;} else{ goto _LL820;} _LL820: if( _temp816 == (
! void*) Cyc_Absyn_PreDec){ goto _LL821;} else{ goto _LL822;} _LL822: if( _temp816
! == ( void*) Cyc_Absyn_PostInc){ goto _LL823;} else{ goto _LL824;} _LL824: if(
! _temp816 == ( void*) Cyc_Absyn_PostDec){ goto _LL825;} else{ goto _LL817;}
! _LL819: s=({ struct Cyc_PP_Doc* _temp826[ 2u]; _temp826[ 1u]= _temp815; _temp826[
  0u]= Cyc_PP_text( _tag_arr("++", sizeof( unsigned char), 3u)); Cyc_PP_cat(
! _tag_arr( _temp826, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL817; _LL821: s=({
! struct Cyc_PP_Doc* _temp827[ 2u]; _temp827[ 1u]= _temp815; _temp827[ 0u]= Cyc_PP_text(
! _tag_arr("--", sizeof( unsigned char), 3u)); Cyc_PP_cat( _tag_arr( _temp827,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL817; _LL823: s=({ struct Cyc_PP_Doc*
! _temp828[ 2u]; _temp828[ 1u]= Cyc_PP_text( _tag_arr("++", sizeof( unsigned char),
! 3u)); _temp828[ 0u]= _temp815; Cyc_PP_cat( _tag_arr( _temp828, sizeof( struct
! Cyc_PP_Doc*), 2u));}); goto _LL817; _LL825: s=({ struct Cyc_PP_Doc* _temp829[ 2u];
! _temp829[ 1u]= Cyc_PP_text( _tag_arr("--", sizeof( unsigned char), 3u));
! _temp829[ 0u]= _temp815; Cyc_PP_cat( _tag_arr( _temp829, sizeof( struct Cyc_PP_Doc*),
! 2u));}); goto _LL817; _LL817:;} goto _LL621;} _LL635:{ struct _tuple8 _temp831=({
! struct _tuple8 _temp830; _temp830.f1=( void*) _temp718->r; _temp830.f2=( void*)
! _temp716->r; _temp830;}); _LL833: goto _LL834; _LL834: s=({ struct Cyc_PP_Doc*
! _temp835[ 5u]; _temp835[ 4u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp716);
! _temp835[ 3u]= Cyc_PP_text( _tag_arr(" : ", sizeof( unsigned char), 4u));
! _temp835[ 2u]= Cyc_Absynpp_exp2doc_prec( 0, _temp718); _temp835[ 1u]= Cyc_PP_text(
! _tag_arr(" ? ", sizeof( unsigned char), 4u)); _temp835[ 0u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp720); Cyc_PP_cat( _tag_arr( _temp835, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL832; _LL832:;} goto _LL621; _LL637: s=({ struct Cyc_PP_Doc*
! _temp836[ 5u]; _temp836[ 4u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp836[ 3u]= Cyc_Absynpp_exp2doc( _temp722); _temp836[ 2u]= Cyc_PP_text(
! _tag_arr(", ", sizeof( unsigned char), 3u)); _temp836[ 1u]= Cyc_Absynpp_exp2doc(
! _temp724); _temp836[ 0u]= Cyc_PP_text( _tag_arr("(", sizeof( unsigned char), 2u));
! Cyc_PP_cat( _tag_arr( _temp836, sizeof( struct Cyc_PP_Doc*), 5u));}); goto
! _LL621; _LL639: s=({ struct Cyc_PP_Doc* _temp837[ 4u]; _temp837[ 3u]= Cyc_PP_text(
! _tag_arr(")", sizeof( unsigned char), 2u)); _temp837[ 2u]= Cyc_Absynpp_exps2doc_prec(
! 20, _temp726); _temp837[ 1u]= Cyc_PP_text( _tag_arr("(", sizeof( unsigned char),
! 2u)); _temp837[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp728); Cyc_PP_cat(
! _tag_arr( _temp837, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL621; _LL641: s=({
! struct Cyc_PP_Doc* _temp838[ 4u]; _temp838[ 3u]= Cyc_PP_text( _tag_arr(")",
! sizeof( unsigned char), 2u)); _temp838[ 2u]= Cyc_Absynpp_exps2doc_prec( 20,
! _temp730); _temp838[ 1u]= Cyc_PP_text( _tag_arr("(", sizeof( unsigned char), 2u));
! _temp838[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp732); Cyc_PP_cat( _tag_arr(
! _temp838, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL621; _LL643: s=({ struct
! Cyc_PP_Doc* _temp839[ 2u]; _temp839[ 1u]= Cyc_Absynpp_exp2doc_prec( myprec,
! _temp734); _temp839[ 0u]= Cyc_PP_text( _tag_arr("throw ", sizeof( unsigned char),
! 7u)); Cyc_PP_cat( _tag_arr( _temp839, sizeof( struct Cyc_PP_Doc*), 2u));}); goto
! _LL621; _LL645: s= Cyc_Absynpp_exp2doc_prec( inprec, _temp736); goto _LL621;
! _LL647: s= Cyc_Absynpp_exp2doc_prec( inprec, _temp738); goto _LL621; _LL649: s=({
! struct Cyc_PP_Doc* _temp840[ 4u]; _temp840[ 3u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp740); _temp840[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof(
! unsigned char), 2u)); _temp840[ 1u]= Cyc_Absynpp_typ2doc( _temp742); _temp840[ 0u]=
  Cyc_PP_text( _tag_arr("(", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr(
! _temp840, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL621; _LL651: s=({ struct
! Cyc_PP_Doc* _temp841[ 2u]; _temp841[ 1u]= Cyc_Absynpp_exp2doc_prec( myprec,
! _temp744); _temp841[ 0u]= Cyc_PP_text( _tag_arr("&", sizeof( unsigned char), 2u));
! Cyc_PP_cat( _tag_arr( _temp841, sizeof( struct Cyc_PP_Doc*), 2u));}); goto
! _LL621; _LL653: if( _temp748 ==  0){ s=({ struct Cyc_PP_Doc* _temp842[ 2u];
! _temp842[ 1u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp746); _temp842[ 0u]= Cyc_PP_text(
! _tag_arr("new ", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp842,
! sizeof( struct Cyc_PP_Doc*), 2u));});} else{ s=({ struct Cyc_PP_Doc* _temp843[ 4u];
! _temp843[ 3u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp746); _temp843[ 2u]= Cyc_PP_text(
! _tag_arr(") ", sizeof( unsigned char), 3u)); _temp843[ 1u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( _temp748)); _temp843[ 0u]= Cyc_PP_text(
! _tag_arr("rnew(", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp843,
! sizeof( struct Cyc_PP_Doc*), 4u));});} goto _LL621; _LL655: s=({ struct Cyc_PP_Doc*
! _temp844[ 3u]; _temp844[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp844[ 1u]= Cyc_Absynpp_typ2doc( _temp750); _temp844[ 0u]= Cyc_PP_text(
! _tag_arr("sizeof(", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp844,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL621; _LL657: s=({ struct Cyc_PP_Doc*
! _temp845[ 3u]; _temp845[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp845[ 1u]= Cyc_Absynpp_exp2doc( _temp752); _temp845[ 0u]= Cyc_PP_text(
! _tag_arr("sizeof(", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp845,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL621; _LL659: s=({ struct Cyc_PP_Doc*
! _temp846[ 5u]; _temp846[ 4u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp846[ 3u]= Cyc_PP_textptr( _temp754); _temp846[ 2u]= Cyc_PP_text(
! _tag_arr(",", sizeof( unsigned char), 2u)); _temp846[ 1u]= Cyc_Absynpp_typ2doc(
! _temp756); _temp846[ 0u]= Cyc_PP_text( _tag_arr("offsetof(", sizeof(
! unsigned char), 10u)); Cyc_PP_cat( _tag_arr( _temp846, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL621; _LL661: s=({ struct Cyc_PP_Doc* _temp847[ 3u]; _temp847[ 2u]=
! Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u)); _temp847[ 1u]= Cyc_Absynpp_typ2doc(
! _temp758); _temp847[ 0u]= Cyc_PP_text( _tag_arr("__gen(", sizeof( unsigned char),
! 7u)); Cyc_PP_cat( _tag_arr( _temp847, sizeof( struct Cyc_PP_Doc*), 3u));}); goto
! _LL621; _LL663: s=({ struct Cyc_PP_Doc* _temp848[ 2u]; _temp848[ 1u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp760); _temp848[ 0u]= Cyc_PP_text( _tag_arr("*", sizeof(
! unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp848, sizeof( struct Cyc_PP_Doc*),
! 2u));}); goto _LL621; _LL665: s=({ struct Cyc_PP_Doc* _temp849[ 3u]; _temp849[ 2u]=
! Cyc_PP_textptr( _temp762); _temp849[ 1u]= Cyc_PP_text( _tag_arr(".", sizeof(
! unsigned char), 2u)); _temp849[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp764);
! Cyc_PP_cat( _tag_arr( _temp849, sizeof( struct Cyc_PP_Doc*), 3u));}); goto
! _LL621; _LL667: s=({ struct Cyc_PP_Doc* _temp850[ 3u]; _temp850[ 2u]= Cyc_PP_textptr(
! _temp766); _temp850[ 1u]= Cyc_PP_text( _tag_arr("->", sizeof( unsigned char), 3u));
! _temp850[ 0u]= Cyc_Absynpp_exp2doc_prec( myprec, _temp768); Cyc_PP_cat( _tag_arr(
! _temp850, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL621; _LL669: s=({ struct
! Cyc_PP_Doc* _temp851[ 4u]; _temp851[ 3u]= Cyc_PP_text( _tag_arr("]", sizeof(
! unsigned char), 2u)); _temp851[ 2u]= Cyc_Absynpp_exp2doc( _temp770); _temp851[ 1u]=
! Cyc_PP_text( _tag_arr("[", sizeof( unsigned char), 2u)); _temp851[ 0u]= Cyc_Absynpp_exp2doc_prec(
! myprec, _temp772); Cyc_PP_cat( _tag_arr( _temp851, sizeof( struct Cyc_PP_Doc*),
! 4u));}); goto _LL621; _LL671: s=({ struct Cyc_PP_Doc* _temp852[ 3u]; _temp852[ 2u]=
! Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u)); _temp852[ 1u]= Cyc_Absynpp_exps2doc_prec(
! 20, _temp774); _temp852[ 0u]= Cyc_PP_text( _tag_arr("$(", sizeof( unsigned char),
! 3u)); Cyc_PP_cat( _tag_arr( _temp852, sizeof( struct Cyc_PP_Doc*), 3u));}); goto
! _LL621; _LL673: s=({ struct Cyc_PP_Doc* _temp853[ 4u]; _temp853[ 3u]= Cyc_PP_group(
  _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof( unsigned char),
  2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_de2doc, _temp776)); _temp853[ 2u]= Cyc_PP_text( _tag_arr(")",
! sizeof( unsigned char), 2u)); _temp853[ 1u]= Cyc_Absynpp_typ2doc((* _temp778).f3);
! _temp853[ 0u]= Cyc_PP_text( _tag_arr("(", sizeof( unsigned char), 2u)); Cyc_PP_cat(
! _tag_arr( _temp853, sizeof( struct Cyc_PP_Doc*), 4u));}); goto _LL621; _LL675: s=
! Cyc_PP_group( _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
! struct Cyc_PP_Doc*(* f)( struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_de2doc, _temp780)); goto _LL621; _LL677: s=({ struct Cyc_PP_Doc*
! _temp854[ 7u]; _temp854[ 6u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char),
! 2u)); _temp854[ 5u]= Cyc_Absynpp_exp2doc( _temp782); _temp854[ 4u]= Cyc_PP_text(
! _tag_arr(" : ", sizeof( unsigned char), 4u)); _temp854[ 3u]= Cyc_Absynpp_exp2doc(
! _temp784); _temp854[ 2u]= Cyc_PP_text( _tag_arr(" < ", sizeof( unsigned char), 4u));
! _temp854[ 1u]= Cyc_PP_text(*(* _temp786->name).f2); _temp854[ 0u]= Cyc_PP_text(
! _tag_arr("{for ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp854,
! sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL621; _LL679: s=({ struct Cyc_PP_Doc*
! _temp855[ 2u]; _temp855[ 1u]= Cyc_PP_group( _tag_arr("{", sizeof( unsigned char),
  2u), _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",", sizeof(
  unsigned char), 2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( struct
! _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_de2doc, _temp788));
! _temp855[ 0u]= Cyc_Absynpp_qvar2doc( _temp790); Cyc_PP_cat( _tag_arr( _temp855,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL621; _LL681: s= Cyc_PP_group(
  _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof( unsigned char),
  2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_de2doc, _temp792)); goto _LL621; _LL683: if( _temp796 ==  0){ s= Cyc_Absynpp_qvar2doc(
! _temp794->name);} else{ s=({ struct Cyc_PP_Doc* _temp856[ 2u]; _temp856[ 1u]=
  Cyc_PP_egroup( _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
  unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_exp2doc, _temp796)); _temp856[ 0u]= Cyc_Absynpp_qvar2doc( _temp794->name);
! Cyc_PP_cat( _tag_arr( _temp856, sizeof( struct Cyc_PP_Doc*), 2u));});} goto
! _LL621; _LL685: s= Cyc_Absynpp_qvar2doc( _temp798); goto _LL621; _LL687: if(
! _temp802 ==  0){ s=({ struct Cyc_PP_Doc* _temp857[ 3u]; _temp857[ 2u]= Cyc_PP_text(
! _tag_arr("))", sizeof( unsigned char), 3u)); _temp857[ 1u]= Cyc_Absynpp_typ2doc(
! _temp800); _temp857[ 0u]= Cyc_PP_text( _tag_arr("malloc(sizeof(", sizeof(
! unsigned char), 15u)); Cyc_PP_cat( _tag_arr( _temp857, sizeof( struct Cyc_PP_Doc*),
! 3u));});} else{ s=({ struct Cyc_PP_Doc* _temp858[ 6u]; _temp858[ 5u]= Cyc_PP_text(
! _tag_arr("))", sizeof( unsigned char), 3u)); _temp858[ 4u]= Cyc_Absynpp_typ2doc(
! _temp800); _temp858[ 3u]= Cyc_PP_text( _tag_arr("sizeof(", sizeof( unsigned char),
! 8u)); _temp858[ 2u]= Cyc_PP_text( _tag_arr(",", sizeof( unsigned char), 2u));
! _temp858[ 1u]= Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null(
! _temp802)); _temp858[ 0u]= Cyc_PP_text( _tag_arr("rmalloc(", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp858, sizeof( struct Cyc_PP_Doc*),
! 6u));});} goto _LL621; _LL689: s= Cyc_PP_group( _tag_arr("{", sizeof(
  unsigned char), 2u), _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",",
  sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)(
  struct _tuple6*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_de2doc,
! _temp804)); goto _LL621; _LL691: s=({ struct Cyc_PP_Doc* _temp859[ 3u]; _temp859[
! 2u]= Cyc_PP_text( _tag_arr(" })", sizeof( unsigned char), 4u)); _temp859[ 1u]=
! Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp808)); _temp859[ 0u]= Cyc_PP_text(
! _tag_arr("({ ", sizeof( unsigned char), 4u)); Cyc_PP_cat( _tag_arr( _temp859,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL621; _LL693: s=({ struct Cyc_PP_Doc*
! _temp860[ 3u]; _temp860[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp860[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_decl2doc(({ struct Cyc_Absyn_Decl*
! _temp861=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp861->r=( void*)(( void*)({ struct Cyc_Absyn_Fn_d_struct* _temp862=( struct
  Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp862[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp863; _temp863.tag= Cyc_Absyn_Fn_d;
! _temp863.f1= _temp810; _temp863;}); _temp862;})); _temp861->loc= e->loc;
! _temp861;}))); _temp860[ 0u]= Cyc_PP_text( _tag_arr("codegen(", sizeof(
! unsigned char), 9u)); Cyc_PP_cat( _tag_arr( _temp860, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL621; _LL695: s=({ struct Cyc_PP_Doc* _temp864[ 3u]; _temp864[ 2u]=
! Cyc_PP_text( _tag_arr(")", sizeof( unsigned char), 2u)); _temp864[ 1u]= Cyc_PP_nest(
! 2, Cyc_Absynpp_exp2doc( _temp812)); _temp864[ 0u]= Cyc_PP_text( _tag_arr("fill(",
! sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp864, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL621; _LL621:;} if( inprec >=  myprec){ s=({ struct Cyc_PP_Doc*
! _temp865[ 3u]; _temp865[ 2u]= Cyc_PP_text( _tag_arr(")", sizeof( unsigned char),
! 2u)); _temp865[ 1u]= s; _temp865[ 0u]= Cyc_PP_text( _tag_arr("(", sizeof(
! unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp865, sizeof( struct Cyc_PP_Doc*),
  3u));});} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_designator2doc( void* d){
! void* _temp866= d; struct Cyc_Absyn_Exp* _temp872; struct _tagged_arr* _temp874;
! _LL868: if(*(( int*) _temp866) ==  Cyc_Absyn_ArrayElement){ _LL873: _temp872=((
! struct Cyc_Absyn_ArrayElement_struct*) _temp866)->f1; goto _LL869;} else{ goto
! _LL870;} _LL870: if(*(( int*) _temp866) ==  Cyc_Absyn_FieldName){ _LL875:
! _temp874=(( struct Cyc_Absyn_FieldName_struct*) _temp866)->f1; goto _LL871;}
! else{ goto _LL867;} _LL869: return({ struct Cyc_PP_Doc* _temp876[ 3u]; _temp876[
! 2u]= Cyc_PP_text( _tag_arr("]", sizeof( unsigned char), 2u)); _temp876[ 1u]= Cyc_Absynpp_exp2doc(
! _temp872); _temp876[ 0u]= Cyc_PP_text( _tag_arr(".[", sizeof( unsigned char), 3u));
! Cyc_PP_cat( _tag_arr( _temp876, sizeof( struct Cyc_PP_Doc*), 3u));}); _LL871:
! return({ struct Cyc_PP_Doc* _temp877[ 2u]; _temp877[ 1u]= Cyc_PP_textptr(
! _temp874); _temp877[ 0u]= Cyc_PP_text( _tag_arr(".", sizeof( unsigned char), 2u));
! Cyc_PP_cat( _tag_arr( _temp877, sizeof( struct Cyc_PP_Doc*), 2u));}); _LL867:;}
  struct Cyc_PP_Doc* Cyc_Absynpp_de2doc( struct _tuple6* de){ if((* de).f1 ==  0){
  return Cyc_Absynpp_exp2doc((* de).f2);} else{ return({ struct Cyc_PP_Doc*
! _temp878[ 2u]; _temp878[ 1u]= Cyc_Absynpp_exp2doc((* de).f2); _temp878[ 0u]= Cyc_PP_egroup(
  _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("=", sizeof( unsigned char),
  2u), _tag_arr("=", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( void*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_designator2doc,(*
! de).f1)); Cyc_PP_cat( _tag_arr( _temp878, sizeof( struct Cyc_PP_Doc*), 2u));});}}
  struct Cyc_PP_Doc* Cyc_Absynpp_exps2doc_prec( int inprec, struct Cyc_List_List*
  es){ return Cyc_PP_group( _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("",
  sizeof( unsigned char), 1u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct
  Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( int, struct Cyc_Absyn_Exp*), int env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Absynpp_exp2doc_prec, inprec, es));}
! struct Cyc_PP_Doc* Cyc_Absynpp_cnst2doc( void* c){ void* _temp879= c;
! unsigned char _temp897; void* _temp899; short _temp901; void* _temp903; int
! _temp905; void* _temp907; int _temp909; void* _temp911; long long _temp913; void*
! _temp915; struct _tagged_arr _temp917; struct _tagged_arr _temp919; _LL881: if((
! unsigned int) _temp879 >  1u?*(( int*) _temp879) ==  Cyc_Absyn_Char_c: 0){
! _LL900: _temp899=( void*)(( struct Cyc_Absyn_Char_c_struct*) _temp879)->f1; goto
! _LL898; _LL898: _temp897=(( struct Cyc_Absyn_Char_c_struct*) _temp879)->f2; goto
! _LL882;} else{ goto _LL883;} _LL883: if(( unsigned int) _temp879 >  1u?*(( int*)
! _temp879) ==  Cyc_Absyn_Short_c: 0){ _LL904: _temp903=( void*)(( struct Cyc_Absyn_Short_c_struct*)
! _temp879)->f1; goto _LL902; _LL902: _temp901=(( struct Cyc_Absyn_Short_c_struct*)
! _temp879)->f2; goto _LL884;} else{ goto _LL885;} _LL885: if(( unsigned int)
! _temp879 >  1u?*(( int*) _temp879) ==  Cyc_Absyn_Int_c: 0){ _LL908: _temp907=(
! void*)(( struct Cyc_Absyn_Int_c_struct*) _temp879)->f1; if( _temp907 == ( void*)
! Cyc_Absyn_Signed){ goto _LL906;} else{ goto _LL887;} _LL906: _temp905=(( struct
! Cyc_Absyn_Int_c_struct*) _temp879)->f2; goto _LL886;} else{ goto _LL887;} _LL887:
! if(( unsigned int) _temp879 >  1u?*(( int*) _temp879) ==  Cyc_Absyn_Int_c: 0){
! _LL912: _temp911=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp879)->f1; if(
! _temp911 == ( void*) Cyc_Absyn_Unsigned){ goto _LL910;} else{ goto _LL889;}
! _LL910: _temp909=(( struct Cyc_Absyn_Int_c_struct*) _temp879)->f2; goto _LL888;}
! else{ goto _LL889;} _LL889: if(( unsigned int) _temp879 >  1u?*(( int*) _temp879)
! ==  Cyc_Absyn_LongLong_c: 0){ _LL916: _temp915=( void*)(( struct Cyc_Absyn_LongLong_c_struct*)
! _temp879)->f1; goto _LL914; _LL914: _temp913=(( struct Cyc_Absyn_LongLong_c_struct*)
! _temp879)->f2; goto _LL890;} else{ goto _LL891;} _LL891: if(( unsigned int)
! _temp879 >  1u?*(( int*) _temp879) ==  Cyc_Absyn_Float_c: 0){ _LL918: _temp917=((
! struct Cyc_Absyn_Float_c_struct*) _temp879)->f1; goto _LL892;} else{ goto _LL893;}
! _LL893: if( _temp879 == ( void*) Cyc_Absyn_Null_c){ goto _LL894;} else{ goto
! _LL895;} _LL895: if(( unsigned int) _temp879 >  1u?*(( int*) _temp879) ==  Cyc_Absyn_String_c:
! 0){ _LL920: _temp919=(( struct Cyc_Absyn_String_c_struct*) _temp879)->f1; goto
! _LL896;} else{ goto _LL880;} _LL882: return Cyc_PP_text(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp922; _temp922.tag= Cyc_Std_String_pa;
! _temp922.f1=( struct _tagged_arr) Cyc_Absynpp_char_escape( _temp897);{ void*
! _temp921[ 1u]={& _temp922}; Cyc_Std_aprintf( _tag_arr("'%s'", sizeof(
! unsigned char), 5u), _tag_arr( _temp921, sizeof( void*), 1u));}})); _LL884:
! return Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp924;
! _temp924.tag= Cyc_Std_Int_pa; _temp924.f1=( int)(( unsigned int)(( int) _temp901));{
! void* _temp923[ 1u]={& _temp924}; Cyc_Std_aprintf( _tag_arr("%d", sizeof(
! unsigned char), 3u), _tag_arr( _temp923, sizeof( void*), 1u));}})); _LL886:
! return Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp926;
! _temp926.tag= Cyc_Std_Int_pa; _temp926.f1=( int)(( unsigned int) _temp905);{
! void* _temp925[ 1u]={& _temp926}; Cyc_Std_aprintf( _tag_arr("%d", sizeof(
! unsigned char), 3u), _tag_arr( _temp925, sizeof( void*), 1u));}})); _LL888:
! return Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp928;
! _temp928.tag= Cyc_Std_Int_pa; _temp928.f1=( unsigned int) _temp909;{ void*
! _temp927[ 1u]={& _temp928}; Cyc_Std_aprintf( _tag_arr("%u", sizeof(
! unsigned char), 3u), _tag_arr( _temp927, sizeof( void*), 1u));}})); _LL890:
  return Cyc_PP_text( _tag_arr("<<FIX LONG LONG CONSTANT>>", sizeof( unsigned char),
! 27u)); _LL892: return Cyc_PP_text( _temp917); _LL894: return Cyc_PP_text(
! _tag_arr("NULL", sizeof( unsigned char), 5u)); _LL896: return({ struct Cyc_PP_Doc*
! _temp929[ 3u]; _temp929[ 2u]= Cyc_PP_text( _tag_arr("\"", sizeof( unsigned char),
! 2u)); _temp929[ 1u]= Cyc_PP_text( Cyc_Absynpp_string_escape( _temp919));
! _temp929[ 0u]= Cyc_PP_text( _tag_arr("\"", sizeof( unsigned char), 2u)); Cyc_PP_cat(
! _tag_arr( _temp929, sizeof( struct Cyc_PP_Doc*), 3u));}); _LL880:;} struct Cyc_PP_Doc*
  Cyc_Absynpp_primapp2doc( int inprec, void* p, struct Cyc_List_List* es){ struct
  Cyc_PP_Doc* ps= Cyc_Absynpp_prim2doc( p); if( p == ( void*) Cyc_Absyn_Size){ if(
  es ==  0? 1:(( struct Cyc_List_List*) _check_null( es))->tl !=  0){( int) _throw((
! void*)({ struct Cyc_Core_Failure_struct* _temp930=( struct Cyc_Core_Failure_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Failure_struct)); _temp930[ 0]=({ struct Cyc_Core_Failure_struct
! _temp931; _temp931.tag= Cyc_Core_Failure; _temp931.f1=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp933; _temp933.tag= Cyc_Std_String_pa;
! _temp933.f1=( struct _tagged_arr) Cyc_PP_string_of_doc( ps, 72);{ void* _temp932[
! 1u]={& _temp933}; Cyc_Std_aprintf( _tag_arr("Absynpp::primapp2doc Size: %s with bad args",
! sizeof( unsigned char), 44u), _tag_arr( _temp932, sizeof( void*), 1u));}});
! _temp931;}); _temp930;}));}{ struct Cyc_PP_Doc* _temp934= Cyc_Absynpp_exp2doc_prec(
  inprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd);
! return({ struct Cyc_PP_Doc* _temp935[ 2u]; _temp935[ 1u]= Cyc_PP_text( _tag_arr(".size",
! sizeof( unsigned char), 6u)); _temp935[ 0u]= _temp934; Cyc_PP_cat( _tag_arr(
! _temp935, sizeof( struct Cyc_PP_Doc*), 2u));});}} else{ struct Cyc_List_List* ds=((
  struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( int, struct Cyc_Absyn_Exp*),
  int env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Absynpp_exp2doc_prec,
  inprec, es); if( ds ==  0){( int) _throw(( void*)({ struct Cyc_Core_Failure_struct*
! _temp936=( struct Cyc_Core_Failure_struct*) _cycalloc( sizeof( struct Cyc_Core_Failure_struct));
! _temp936[ 0]=({ struct Cyc_Core_Failure_struct _temp937; _temp937.tag= Cyc_Core_Failure;
! _temp937.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp939;
! _temp939.tag= Cyc_Std_String_pa; _temp939.f1=( struct _tagged_arr) Cyc_PP_string_of_doc(
! ps, 72);{ void* _temp938[ 1u]={& _temp939}; Cyc_Std_aprintf( _tag_arr("Absynpp::primapp2doc: %s with no args",
! sizeof( unsigned char), 38u), _tag_arr( _temp938, sizeof( void*), 1u));}});
! _temp937;}); _temp936;}));} else{ if((( struct Cyc_List_List*) _check_null( ds))->tl
! ==  0){ return({ struct Cyc_PP_Doc* _temp940[ 3u]; _temp940[ 2u]=( struct Cyc_PP_Doc*)((
! struct Cyc_List_List*) _check_null( ds))->hd; _temp940[ 1u]= Cyc_PP_text(
! _tag_arr(" ", sizeof( unsigned char), 2u)); _temp940[ 0u]= ps; Cyc_PP_cat(
! _tag_arr( _temp940, sizeof( struct Cyc_PP_Doc*), 3u));});} else{ if((( struct
  Cyc_List_List*) _check_null((( struct Cyc_List_List*) _check_null( ds))->tl))->tl
! !=  0){( int) _throw(( void*)({ struct Cyc_Core_Failure_struct* _temp941=(
  struct Cyc_Core_Failure_struct*) _cycalloc( sizeof( struct Cyc_Core_Failure_struct));
! _temp941[ 0]=({ struct Cyc_Core_Failure_struct _temp942; _temp942.tag= Cyc_Core_Failure;
! _temp942.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp944;
! _temp944.tag= Cyc_Std_String_pa; _temp944.f1=( struct _tagged_arr) Cyc_PP_string_of_doc(
! ps, 72);{ void* _temp943[ 1u]={& _temp944}; Cyc_Std_aprintf( _tag_arr("Absynpp::primapp2doc: %s with more than 2 args",
! sizeof( unsigned char), 47u), _tag_arr( _temp943, sizeof( void*), 1u));}});
! _temp942;}); _temp941;}));} else{ return({ struct Cyc_PP_Doc* _temp945[ 5u];
! _temp945[ 4u]=( struct Cyc_PP_Doc*)(( struct Cyc_List_List*) _check_null(((
! struct Cyc_List_List*) _check_null( ds))->tl))->hd; _temp945[ 3u]= Cyc_PP_text(
! _tag_arr(" ", sizeof( unsigned char), 2u)); _temp945[ 2u]= ps; _temp945[ 1u]=
! Cyc_PP_text( _tag_arr(" ", sizeof( unsigned char), 2u)); _temp945[ 0u]=( struct
  Cyc_PP_Doc*)(( struct Cyc_List_List*) _check_null( ds))->hd; Cyc_PP_cat(
! _tag_arr( _temp945, sizeof( struct Cyc_PP_Doc*), 5u));});}}}}} struct
! _tagged_arr Cyc_Absynpp_prim2str( void* p){ void* _temp946= p; _LL948: if(
! _temp946 == ( void*) Cyc_Absyn_Plus){ goto _LL949;} else{ goto _LL950;} _LL950:
! if( _temp946 == ( void*) Cyc_Absyn_Times){ goto _LL951;} else{ goto _LL952;}
! _LL952: if( _temp946 == ( void*) Cyc_Absyn_Minus){ goto _LL953;} else{ goto
! _LL954;} _LL954: if( _temp946 == ( void*) Cyc_Absyn_Div){ goto _LL955;} else{
! goto _LL956;} _LL956: if( _temp946 == ( void*) Cyc_Absyn_Mod){ goto _LL957;}
! else{ goto _LL958;} _LL958: if( _temp946 == ( void*) Cyc_Absyn_Eq){ goto _LL959;}
! else{ goto _LL960;} _LL960: if( _temp946 == ( void*) Cyc_Absyn_Neq){ goto _LL961;}
! else{ goto _LL962;} _LL962: if( _temp946 == ( void*) Cyc_Absyn_Gt){ goto _LL963;}
! else{ goto _LL964;} _LL964: if( _temp946 == ( void*) Cyc_Absyn_Lt){ goto _LL965;}
! else{ goto _LL966;} _LL966: if( _temp946 == ( void*) Cyc_Absyn_Gte){ goto _LL967;}
! else{ goto _LL968;} _LL968: if( _temp946 == ( void*) Cyc_Absyn_Lte){ goto _LL969;}
! else{ goto _LL970;} _LL970: if( _temp946 == ( void*) Cyc_Absyn_Not){ goto _LL971;}
! else{ goto _LL972;} _LL972: if( _temp946 == ( void*) Cyc_Absyn_Bitnot){ goto
! _LL973;} else{ goto _LL974;} _LL974: if( _temp946 == ( void*) Cyc_Absyn_Bitand){
! goto _LL975;} else{ goto _LL976;} _LL976: if( _temp946 == ( void*) Cyc_Absyn_Bitor){
! goto _LL977;} else{ goto _LL978;} _LL978: if( _temp946 == ( void*) Cyc_Absyn_Bitxor){
! goto _LL979;} else{ goto _LL980;} _LL980: if( _temp946 == ( void*) Cyc_Absyn_Bitlshift){
! goto _LL981;} else{ goto _LL982;} _LL982: if( _temp946 == ( void*) Cyc_Absyn_Bitlrshift){
! goto _LL983;} else{ goto _LL984;} _LL984: if( _temp946 == ( void*) Cyc_Absyn_Bitarshift){
! goto _LL985;} else{ goto _LL986;} _LL986: if( _temp946 == ( void*) Cyc_Absyn_Size){
! goto _LL987;} else{ goto _LL947;} _LL949: return _tag_arr("+", sizeof(
! unsigned char), 2u); _LL951: return _tag_arr("*", sizeof( unsigned char), 2u);
! _LL953: return _tag_arr("-", sizeof( unsigned char), 2u); _LL955: return
! _tag_arr("/", sizeof( unsigned char), 2u); _LL957: return _tag_arr("%", sizeof(
! unsigned char), 2u); _LL959: return _tag_arr("==", sizeof( unsigned char), 3u);
! _LL961: return _tag_arr("!=", sizeof( unsigned char), 3u); _LL963: return
! _tag_arr(">", sizeof( unsigned char), 2u); _LL965: return _tag_arr("<", sizeof(
! unsigned char), 2u); _LL967: return _tag_arr(">=", sizeof( unsigned char), 3u);
! _LL969: return _tag_arr("<=", sizeof( unsigned char), 3u); _LL971: return
! _tag_arr("!", sizeof( unsigned char), 2u); _LL973: return _tag_arr("~", sizeof(
! unsigned char), 2u); _LL975: return _tag_arr("&", sizeof( unsigned char), 2u);
! _LL977: return _tag_arr("|", sizeof( unsigned char), 2u); _LL979: return
! _tag_arr("^", sizeof( unsigned char), 2u); _LL981: return _tag_arr("<<", sizeof(
! unsigned char), 3u); _LL983: return _tag_arr(">>", sizeof( unsigned char), 3u);
! _LL985: return _tag_arr(">>>", sizeof( unsigned char), 4u); _LL987: return
! _tag_arr("size", sizeof( unsigned char), 5u); _LL947:;} struct Cyc_PP_Doc* Cyc_Absynpp_prim2doc(
  void* p){ return Cyc_PP_text( Cyc_Absynpp_prim2str( p));} struct _tuple9{ struct
  Cyc_Core_Opt* f1; struct Cyc_Absyn_Exp* f2; } ; struct Cyc_PP_Doc* Cyc_Absynpp_structarg2doc(
  struct _tuple9* t){ if((* t).f1 ==  0){ return Cyc_Absynpp_exp2doc((* t).f2);}
! else{ return({ struct Cyc_PP_Doc* _temp988[ 3u]; _temp988[ 2u]= Cyc_Absynpp_exp2doc((*
! t).f2); _temp988[ 1u]= Cyc_PP_text( _tag_arr(" = ", sizeof( unsigned char), 4u));
! _temp988[ 0u]= Cyc_PP_textptr(( struct _tagged_arr*)(( struct Cyc_Core_Opt*)
! _check_null((* t).f1))->v); Cyc_PP_cat( _tag_arr( _temp988, sizeof( struct Cyc_PP_Doc*),
  3u));});}} int Cyc_Absynpp_is_declaration( struct Cyc_Absyn_Stmt* s){ void*
! _temp989=( void*) s->r; _LL991: if(( unsigned int) _temp989 >  1u?*(( int*)
! _temp989) ==  Cyc_Absyn_Decl_s: 0){ goto _LL992;} else{ goto _LL993;} _LL993:
! goto _LL994; _LL992: return 1; _LL994: return 0; _LL990:;} struct Cyc_PP_Doc*
  Cyc_Absynpp_stmt2doc( struct Cyc_Absyn_Stmt* st){ struct Cyc_PP_Doc* s;{ void*
! _temp995=( void*) st->r; struct Cyc_Absyn_Exp* _temp1039; struct Cyc_Absyn_Stmt*
! _temp1041; struct Cyc_Absyn_Stmt* _temp1043; struct Cyc_Absyn_Exp* _temp1045;
! struct Cyc_Absyn_Stmt* _temp1047; struct Cyc_Absyn_Stmt* _temp1049; struct Cyc_Absyn_Exp*
! _temp1051; struct Cyc_Absyn_Stmt* _temp1053; struct _tuple2 _temp1055; struct
! Cyc_Absyn_Exp* _temp1057; struct _tagged_arr* _temp1059; struct Cyc_Absyn_Stmt*
! _temp1061; struct _tuple2 _temp1063; struct Cyc_Absyn_Exp* _temp1065; struct
! _tuple2 _temp1067; struct Cyc_Absyn_Exp* _temp1069; struct Cyc_Absyn_Exp*
! _temp1071; struct Cyc_List_List* _temp1073; struct Cyc_Absyn_Exp* _temp1075;
! struct Cyc_List_List* _temp1077; struct Cyc_Absyn_Exp* _temp1079; struct Cyc_List_List*
! _temp1081; struct Cyc_List_List* _temp1083; struct Cyc_Absyn_Stmt* _temp1085;
! struct Cyc_Absyn_Decl* _temp1087; struct Cyc_Absyn_Stmt* _temp1089; struct Cyc_Absyn_Stmt*
! _temp1091; struct Cyc_Absyn_Stmt* _temp1093; struct _tagged_arr* _temp1095;
! struct _tuple2 _temp1097; struct Cyc_Absyn_Exp* _temp1099; struct Cyc_Absyn_Stmt*
! _temp1101; struct Cyc_List_List* _temp1103; struct Cyc_Absyn_Stmt* _temp1105;
! struct Cyc_Absyn_Stmt* _temp1107; struct Cyc_Absyn_Vardecl* _temp1109; struct
! Cyc_Absyn_Tvar* _temp1111; _LL997: if( _temp995 == ( void*) Cyc_Absyn_Skip_s){
! goto _LL998;} else{ goto _LL999;} _LL999: if(( unsigned int) _temp995 >  1u?*((
! int*) _temp995) ==  Cyc_Absyn_Exp_s: 0){ _LL1040: _temp1039=(( struct Cyc_Absyn_Exp_s_struct*)
! _temp995)->f1; goto _LL1000;} else{ goto _LL1001;} _LL1001: if(( unsigned int)
! _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Seq_s: 0){ _LL1044: _temp1043=((
! struct Cyc_Absyn_Seq_s_struct*) _temp995)->f1; goto _LL1042; _LL1042: _temp1041=((
! struct Cyc_Absyn_Seq_s_struct*) _temp995)->f2; goto _LL1002;} else{ goto _LL1003;}
! _LL1003: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Return_s:
! 0){ _LL1046: _temp1045=(( struct Cyc_Absyn_Return_s_struct*) _temp995)->f1; goto
! _LL1004;} else{ goto _LL1005;} _LL1005: if(( unsigned int) _temp995 >  1u?*((
! int*) _temp995) ==  Cyc_Absyn_IfThenElse_s: 0){ _LL1052: _temp1051=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp995)->f1; goto _LL1050; _LL1050: _temp1049=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp995)->f2; goto _LL1048; _LL1048: _temp1047=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp995)->f3; goto _LL1006;} else{ goto _LL1007;} _LL1007: if(( unsigned int)
! _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_While_s: 0){ _LL1056: _temp1055=((
! struct Cyc_Absyn_While_s_struct*) _temp995)->f1; _LL1058: _temp1057= _temp1055.f1;
! goto _LL1054; _LL1054: _temp1053=(( struct Cyc_Absyn_While_s_struct*) _temp995)->f2;
! goto _LL1008;} else{ goto _LL1009;} _LL1009: if(( unsigned int) _temp995 >  1u?*((
! int*) _temp995) ==  Cyc_Absyn_Break_s: 0){ goto _LL1010;} else{ goto _LL1011;}
! _LL1011: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Continue_s:
! 0){ goto _LL1012;} else{ goto _LL1013;} _LL1013: if(( unsigned int) _temp995 > 
! 1u?*(( int*) _temp995) ==  Cyc_Absyn_Goto_s: 0){ _LL1060: _temp1059=(( struct
! Cyc_Absyn_Goto_s_struct*) _temp995)->f1; goto _LL1014;} else{ goto _LL1015;}
! _LL1015: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_For_s:
! 0){ _LL1072: _temp1071=(( struct Cyc_Absyn_For_s_struct*) _temp995)->f1; goto
! _LL1068; _LL1068: _temp1067=(( struct Cyc_Absyn_For_s_struct*) _temp995)->f2;
! _LL1070: _temp1069= _temp1067.f1; goto _LL1064; _LL1064: _temp1063=(( struct Cyc_Absyn_For_s_struct*)
! _temp995)->f3; _LL1066: _temp1065= _temp1063.f1; goto _LL1062; _LL1062:
! _temp1061=(( struct Cyc_Absyn_For_s_struct*) _temp995)->f4; goto _LL1016;} else{
! goto _LL1017;} _LL1017: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) == 
! Cyc_Absyn_Switch_s: 0){ _LL1076: _temp1075=(( struct Cyc_Absyn_Switch_s_struct*)
! _temp995)->f1; goto _LL1074; _LL1074: _temp1073=(( struct Cyc_Absyn_Switch_s_struct*)
! _temp995)->f2; goto _LL1018;} else{ goto _LL1019;} _LL1019: if(( unsigned int)
! _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_SwitchC_s: 0){ _LL1080:
! _temp1079=(( struct Cyc_Absyn_SwitchC_s_struct*) _temp995)->f1; goto _LL1078;
! _LL1078: _temp1077=(( struct Cyc_Absyn_SwitchC_s_struct*) _temp995)->f2; goto
! _LL1020;} else{ goto _LL1021;} _LL1021: if(( unsigned int) _temp995 >  1u?*((
! int*) _temp995) ==  Cyc_Absyn_Fallthru_s: 0){ _LL1082: _temp1081=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp995)->f1; if( _temp1081 ==  0){ goto _LL1022;} else{ goto _LL1023;}} else{
! goto _LL1023;} _LL1023: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) == 
! Cyc_Absyn_Fallthru_s: 0){ _LL1084: _temp1083=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp995)->f1; goto _LL1024;} else{ goto _LL1025;} _LL1025: if(( unsigned int)
! _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Decl_s: 0){ _LL1088: _temp1087=((
! struct Cyc_Absyn_Decl_s_struct*) _temp995)->f1; goto _LL1086; _LL1086: _temp1085=((
! struct Cyc_Absyn_Decl_s_struct*) _temp995)->f2; goto _LL1026;} else{ goto
! _LL1027;} _LL1027: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Cut_s:
! 0){ _LL1090: _temp1089=(( struct Cyc_Absyn_Cut_s_struct*) _temp995)->f1; goto
! _LL1028;} else{ goto _LL1029;} _LL1029: if(( unsigned int) _temp995 >  1u?*((
! int*) _temp995) ==  Cyc_Absyn_Splice_s: 0){ _LL1092: _temp1091=(( struct Cyc_Absyn_Splice_s_struct*)
! _temp995)->f1; goto _LL1030;} else{ goto _LL1031;} _LL1031: if(( unsigned int)
! _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Label_s: 0){ _LL1096: _temp1095=((
! struct Cyc_Absyn_Label_s_struct*) _temp995)->f1; goto _LL1094; _LL1094:
! _temp1093=(( struct Cyc_Absyn_Label_s_struct*) _temp995)->f2; goto _LL1032;}
! else{ goto _LL1033;} _LL1033: if(( unsigned int) _temp995 >  1u?*(( int*)
! _temp995) ==  Cyc_Absyn_Do_s: 0){ _LL1102: _temp1101=(( struct Cyc_Absyn_Do_s_struct*)
! _temp995)->f1; goto _LL1098; _LL1098: _temp1097=(( struct Cyc_Absyn_Do_s_struct*)
! _temp995)->f2; _LL1100: _temp1099= _temp1097.f1; goto _LL1034;} else{ goto
! _LL1035;} _LL1035: if(( unsigned int) _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_TryCatch_s:
! 0){ _LL1106: _temp1105=(( struct Cyc_Absyn_TryCatch_s_struct*) _temp995)->f1;
! goto _LL1104; _LL1104: _temp1103=(( struct Cyc_Absyn_TryCatch_s_struct*)
! _temp995)->f2; goto _LL1036;} else{ goto _LL1037;} _LL1037: if(( unsigned int)
! _temp995 >  1u?*(( int*) _temp995) ==  Cyc_Absyn_Region_s: 0){ _LL1112:
! _temp1111=(( struct Cyc_Absyn_Region_s_struct*) _temp995)->f1; goto _LL1110;
! _LL1110: _temp1109=(( struct Cyc_Absyn_Region_s_struct*) _temp995)->f2; goto
! _LL1108; _LL1108: _temp1107=(( struct Cyc_Absyn_Region_s_struct*) _temp995)->f3;
! goto _LL1038;} else{ goto _LL996;} _LL998: s= Cyc_PP_text( _tag_arr(";", sizeof(
! unsigned char), 2u)); goto _LL996; _LL1000: s=({ struct Cyc_PP_Doc* _temp1113[ 2u];
! _temp1113[ 1u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char), 2u));
! _temp1113[ 0u]= Cyc_Absynpp_exp2doc( _temp1039); Cyc_PP_cat( _tag_arr( _temp1113,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL996; _LL1002: if( Cyc_Absynpp_decls_first){
! if( Cyc_Absynpp_is_declaration( _temp1043)){ s=({ struct Cyc_PP_Doc* _temp1114[
! 6u]; _temp1114[ 5u]= Cyc_Absynpp_is_declaration( _temp1041)?({ struct Cyc_PP_Doc*
! _temp1115[ 4u]; _temp1115[ 3u]= Cyc_PP_line_doc(); _temp1115[ 2u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1115[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1041)); _temp1115[ 0u]= Cyc_PP_text( _tag_arr("{ ", sizeof( unsigned char),
! 3u)); Cyc_PP_cat( _tag_arr( _temp1115, sizeof( struct Cyc_PP_Doc*), 4u));}): Cyc_Absynpp_stmt2doc(
! _temp1041); _temp1114[ 4u]= Cyc_PP_line_doc(); _temp1114[ 3u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1114[ 2u]= Cyc_PP_line_doc();
! _temp1114[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1043)); _temp1114[ 0u]=
  Cyc_PP_text( _tag_arr("{ ", sizeof( unsigned char), 3u)); Cyc_PP_cat( _tag_arr(
! _temp1114, sizeof( struct Cyc_PP_Doc*), 6u));});} else{ if( Cyc_Absynpp_is_declaration(
! _temp1041)){ s=({ struct Cyc_PP_Doc* _temp1116[ 6u]; _temp1116[ 5u]= Cyc_PP_line_doc();
! _temp1116[ 4u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1116[ 3u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1041)); _temp1116[ 2u]=
! Cyc_PP_text( _tag_arr("{ ", sizeof( unsigned char), 3u)); _temp1116[ 1u]= Cyc_PP_line_doc();
! _temp1116[ 0u]= Cyc_Absynpp_stmt2doc( _temp1043); Cyc_PP_cat( _tag_arr(
! _temp1116, sizeof( struct Cyc_PP_Doc*), 6u));});} else{ s=(( struct Cyc_PP_Doc*(*)(
  struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Stmt*), struct _tagged_arr sep,
  struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_stmt2doc, _tag_arr("",
! sizeof( unsigned char), 1u),({ struct Cyc_List_List* _temp1117=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1117->hd=( void*) _temp1043;
! _temp1117->tl=({ struct Cyc_List_List* _temp1118=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1118->hd=( void*) _temp1041;
! _temp1118->tl= 0; _temp1118;}); _temp1117;}));}}} else{ s=(( struct Cyc_PP_Doc*(*)(
  struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Stmt*), struct _tagged_arr sep,
  struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_stmt2doc, _tag_arr("",
! sizeof( unsigned char), 1u),({ struct Cyc_List_List* _temp1119=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1119->hd=( void*) _temp1043;
! _temp1119->tl=({ struct Cyc_List_List* _temp1120=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1120->hd=( void*) _temp1041;
! _temp1120->tl= 0; _temp1120;}); _temp1119;}));} goto _LL996; _LL1004: if(
! _temp1045 ==  0){ s= Cyc_PP_text( _tag_arr("return;", sizeof( unsigned char), 8u));}
! else{ s=({ struct Cyc_PP_Doc* _temp1121[ 3u]; _temp1121[ 2u]= Cyc_PP_text(
! _tag_arr(";", sizeof( unsigned char), 2u)); _temp1121[ 1u]= _temp1045 ==  0? Cyc_PP_nil_doc():
! Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null( _temp1045)); _temp1121[
  0u]= Cyc_PP_text( _tag_arr("return ", sizeof( unsigned char), 8u)); Cyc_PP_cat(
! _tag_arr( _temp1121, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL996; _LL1006: {
! int print_else;{ void* _temp1122=( void*) _temp1047->r; _LL1124: if( _temp1122
! == ( void*) Cyc_Absyn_Skip_s){ goto _LL1125;} else{ goto _LL1126;} _LL1126: goto
! _LL1127; _LL1125: print_else= 0; goto _LL1123; _LL1127: print_else= 1; goto
! _LL1123; _LL1123:;} s=({ struct Cyc_PP_Doc* _temp1128[ 7u]; _temp1128[ 6u]=
! print_else?({ struct Cyc_PP_Doc* _temp1130[ 5u]; _temp1130[ 4u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1130[ 3u]= Cyc_PP_line_doc();
! _temp1130[ 2u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1131[ 2u]; _temp1131[
! 1u]= Cyc_Absynpp_stmt2doc( _temp1047); _temp1131[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat(
! _tag_arr( _temp1131, sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1130[ 1u]= Cyc_PP_text(
! _tag_arr("else {", sizeof( unsigned char), 7u)); _temp1130[ 0u]= Cyc_PP_line_doc();
! Cyc_PP_cat( _tag_arr( _temp1130, sizeof( struct Cyc_PP_Doc*), 5u));}): Cyc_PP_nil_doc();
! _temp1128[ 5u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1128[ 4u]= Cyc_PP_line_doc(); _temp1128[ 3u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc*
! _temp1129[ 2u]; _temp1129[ 1u]= Cyc_Absynpp_stmt2doc( _temp1049); _temp1129[ 0u]=
! Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1129, sizeof( struct Cyc_PP_Doc*),
! 2u));})); _temp1128[ 2u]= Cyc_PP_text( _tag_arr(") {", sizeof( unsigned char), 4u));
! _temp1128[ 1u]= Cyc_Absynpp_exp2doc( _temp1051); _temp1128[ 0u]= Cyc_PP_text(
! _tag_arr("if (", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1128,
! sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL996;} _LL1008: s=({ struct Cyc_PP_Doc*
! _temp1132[ 6u]; _temp1132[ 5u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char),
! 2u)); _temp1132[ 4u]= Cyc_PP_line_doc(); _temp1132[ 3u]= Cyc_PP_nest( 2,({
! struct Cyc_PP_Doc* _temp1133[ 2u]; _temp1133[ 1u]= Cyc_Absynpp_stmt2doc(
! _temp1053); _temp1133[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1133,
! sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1132[ 2u]= Cyc_PP_text( _tag_arr(") {",
! sizeof( unsigned char), 4u)); _temp1132[ 1u]= Cyc_Absynpp_exp2doc( _temp1057);
! _temp1132[ 0u]= Cyc_PP_text( _tag_arr("while (", sizeof( unsigned char), 8u));
! Cyc_PP_cat( _tag_arr( _temp1132, sizeof( struct Cyc_PP_Doc*), 6u));}); goto
! _LL996; _LL1010: s= Cyc_PP_text( _tag_arr("break;", sizeof( unsigned char), 7u));
! goto _LL996; _LL1012: s= Cyc_PP_text( _tag_arr("continue;", sizeof(
! unsigned char), 10u)); goto _LL996; _LL1014: s= Cyc_PP_text(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp1135; _temp1135.tag= Cyc_Std_String_pa;
! _temp1135.f1=( struct _tagged_arr)* _temp1059;{ void* _temp1134[ 1u]={&
! _temp1135}; Cyc_Std_aprintf( _tag_arr("goto %s;", sizeof( unsigned char), 9u),
! _tag_arr( _temp1134, sizeof( void*), 1u));}})); goto _LL996; _LL1016: s=({
! struct Cyc_PP_Doc* _temp1136[ 10u]; _temp1136[ 9u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1136[ 8u]= Cyc_PP_line_doc(); _temp1136[ 7u]=
! Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1137[ 2u]; _temp1137[ 1u]= Cyc_Absynpp_stmt2doc(
! _temp1061); _temp1137[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1137,
! sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1136[ 6u]= Cyc_PP_text( _tag_arr(") {",
! sizeof( unsigned char), 4u)); _temp1136[ 5u]= Cyc_Absynpp_exp2doc( _temp1065);
! _temp1136[ 4u]= Cyc_PP_text( _tag_arr("; ", sizeof( unsigned char), 3u));
! _temp1136[ 3u]= Cyc_Absynpp_exp2doc( _temp1069); _temp1136[ 2u]= Cyc_PP_text(
! _tag_arr("; ", sizeof( unsigned char), 3u)); _temp1136[ 1u]= Cyc_Absynpp_exp2doc(
! _temp1071); _temp1136[ 0u]= Cyc_PP_text( _tag_arr("for(", sizeof( unsigned char),
! 5u)); Cyc_PP_cat( _tag_arr( _temp1136, sizeof( struct Cyc_PP_Doc*), 10u));});
! goto _LL996; _LL1018: s=({ struct Cyc_PP_Doc* _temp1138[ 7u]; _temp1138[ 6u]=
! Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u)); _temp1138[ 5u]= Cyc_PP_line_doc();
! _temp1138[ 4u]= Cyc_Absynpp_switchclauses2doc( _temp1073); _temp1138[ 3u]= Cyc_PP_line_doc();
! _temp1138[ 2u]= Cyc_PP_text( _tag_arr(") {", sizeof( unsigned char), 4u));
! _temp1138[ 1u]= Cyc_Absynpp_exp2doc( _temp1075); _temp1138[ 0u]= Cyc_PP_text(
  _tag_arr("switch (", sizeof( unsigned char), 9u)); Cyc_PP_cat( _tag_arr(
! _temp1138, sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL996; _LL1020: s=({
! struct Cyc_PP_Doc* _temp1139[ 7u]; _temp1139[ 6u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1139[ 5u]= Cyc_PP_line_doc(); _temp1139[ 4u]=
! Cyc_Absynpp_switchCclauses2doc( _temp1077); _temp1139[ 3u]= Cyc_PP_line_doc();
! _temp1139[ 2u]= Cyc_PP_text( _tag_arr(") {", sizeof( unsigned char), 4u));
! _temp1139[ 1u]= Cyc_Absynpp_exp2doc( _temp1079); _temp1139[ 0u]= Cyc_PP_text(
  _tag_arr("switch \"C\" (", sizeof( unsigned char), 13u)); Cyc_PP_cat( _tag_arr(
! _temp1139, sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL996; _LL1022: s= Cyc_PP_text(
! _tag_arr("fallthru;", sizeof( unsigned char), 10u)); goto _LL996; _LL1024: s=({
! struct Cyc_PP_Doc* _temp1140[ 3u]; _temp1140[ 2u]= Cyc_PP_text( _tag_arr(");",
! sizeof( unsigned char), 3u)); _temp1140[ 1u]= Cyc_Absynpp_exps2doc_prec( 20,
! _temp1083); _temp1140[ 0u]= Cyc_PP_text( _tag_arr("fallthru(", sizeof(
! unsigned char), 10u)); Cyc_PP_cat( _tag_arr( _temp1140, sizeof( struct Cyc_PP_Doc*),
! 3u));}); goto _LL996; _LL1026: s=({ struct Cyc_PP_Doc* _temp1141[ 3u]; _temp1141[
! 2u]= Cyc_Absynpp_stmt2doc( _temp1085); _temp1141[ 1u]= Cyc_PP_line_doc();
! _temp1141[ 0u]= Cyc_Absynpp_decl2doc( _temp1087); Cyc_PP_cat( _tag_arr(
! _temp1141, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL996; _LL1028: s=({
! struct Cyc_PP_Doc* _temp1142[ 2u]; _temp1142[ 1u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1089)); _temp1142[ 0u]= Cyc_PP_text( _tag_arr("cut ", sizeof( unsigned char),
! 5u)); Cyc_PP_cat( _tag_arr( _temp1142, sizeof( struct Cyc_PP_Doc*), 2u));});
! goto _LL996; _LL1030: s=({ struct Cyc_PP_Doc* _temp1143[ 2u]; _temp1143[ 1u]=
! Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1091)); _temp1143[ 0u]= Cyc_PP_text(
  _tag_arr("splice ", sizeof( unsigned char), 8u)); Cyc_PP_cat( _tag_arr(
! _temp1143, sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL996; _LL1032: if( Cyc_Absynpp_decls_first?
! Cyc_Absynpp_is_declaration( _temp1093): 0){ s=({ struct Cyc_PP_Doc* _temp1144[ 6u];
! _temp1144[ 5u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1144[ 4u]= Cyc_PP_line_doc(); _temp1144[ 3u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1093)); _temp1144[ 2u]= Cyc_PP_line_doc(); _temp1144[ 1u]= Cyc_PP_text(
! _tag_arr(": {", sizeof( unsigned char), 4u)); _temp1144[ 0u]= Cyc_PP_textptr(
! _temp1095); Cyc_PP_cat( _tag_arr( _temp1144, sizeof( struct Cyc_PP_Doc*), 6u));});}
! else{ s=({ struct Cyc_PP_Doc* _temp1145[ 3u]; _temp1145[ 2u]= Cyc_Absynpp_stmt2doc(
! _temp1093); _temp1145[ 1u]= Cyc_PP_text( _tag_arr(": ", sizeof( unsigned char),
! 3u)); _temp1145[ 0u]= Cyc_PP_textptr( _temp1095); Cyc_PP_cat( _tag_arr(
! _temp1145, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL996; _LL1034: s=({
! struct Cyc_PP_Doc* _temp1146[ 7u]; _temp1146[ 6u]= Cyc_PP_text( _tag_arr(");",
! sizeof( unsigned char), 3u)); _temp1146[ 5u]= Cyc_Absynpp_exp2doc( _temp1099);
! _temp1146[ 4u]= Cyc_PP_text( _tag_arr("} while (", sizeof( unsigned char), 10u));
! _temp1146[ 3u]= Cyc_PP_line_doc(); _temp1146[ 2u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1101)); _temp1146[ 1u]= Cyc_PP_line_doc(); _temp1146[ 0u]= Cyc_PP_text(
! _tag_arr("do {", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1146,
! sizeof( struct Cyc_PP_Doc*), 7u));}); goto _LL996; _LL1036: s=({ struct Cyc_PP_Doc*
! _temp1147[ 9u]; _temp1147[ 8u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char),
! 2u)); _temp1147[ 7u]= Cyc_PP_line_doc(); _temp1147[ 6u]= Cyc_PP_nest( 2, Cyc_Absynpp_switchclauses2doc(
! _temp1103)); _temp1147[ 5u]= Cyc_PP_line_doc(); _temp1147[ 4u]= Cyc_PP_text(
! _tag_arr("} catch {", sizeof( unsigned char), 10u)); _temp1147[ 3u]= Cyc_PP_line_doc();
! _temp1147[ 2u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc( _temp1105)); _temp1147[ 1u]=
! Cyc_PP_line_doc(); _temp1147[ 0u]= Cyc_PP_text( _tag_arr("try {", sizeof(
! unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp1147, sizeof( struct Cyc_PP_Doc*),
! 9u));}); goto _LL996; _LL1038: s=({ struct Cyc_PP_Doc* _temp1148[ 9u]; _temp1148[
! 8u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u)); _temp1148[ 7u]=
! Cyc_PP_line_doc(); _temp1148[ 6u]= Cyc_PP_nest( 2, Cyc_Absynpp_stmt2doc(
! _temp1107)); _temp1148[ 5u]= Cyc_PP_line_doc(); _temp1148[ 4u]= Cyc_PP_text(
! _tag_arr("{", sizeof( unsigned char), 2u)); _temp1148[ 3u]= Cyc_Absynpp_qvar2doc(
! _temp1109->name); _temp1148[ 2u]= Cyc_PP_text( _tag_arr(">", sizeof(
! unsigned char), 2u)); _temp1148[ 1u]= Cyc_PP_textptr( Cyc_Absynpp_get_name(
! _temp1111)); _temp1148[ 0u]= Cyc_PP_text( _tag_arr("region<", sizeof(
! unsigned char), 8u)); Cyc_PP_cat( _tag_arr( _temp1148, sizeof( struct Cyc_PP_Doc*),
! 9u));}); goto _LL996; _LL996:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_pat2doc(
! struct Cyc_Absyn_Pat* p){ struct Cyc_PP_Doc* s;{ void* _temp1149=( void*) p->r;
! int _temp1181; void* _temp1183; unsigned char _temp1185; struct _tagged_arr
! _temp1187; struct Cyc_Absyn_Vardecl* _temp1189; struct Cyc_List_List* _temp1191;
! struct Cyc_Absyn_Pat* _temp1193; struct Cyc_Absyn_Vardecl* _temp1195; struct
! _tuple0* _temp1197; struct Cyc_List_List* _temp1199; struct Cyc_List_List*
! _temp1201; struct _tuple0* _temp1203; struct Cyc_List_List* _temp1205; struct
! Cyc_List_List* _temp1207; struct _tuple0* _temp1209; struct Cyc_List_List*
! _temp1211; struct Cyc_List_List* _temp1213; struct Cyc_Absyn_Structdecl*
! _temp1215; struct Cyc_Absyn_Enumfield* _temp1217; struct Cyc_List_List*
! _temp1219; struct Cyc_List_List* _temp1221; struct Cyc_Absyn_Tunionfield*
! _temp1223; _LL1151: if( _temp1149 == ( void*) Cyc_Absyn_Wild_p){ goto _LL1152;}
! else{ goto _LL1153;} _LL1153: if( _temp1149 == ( void*) Cyc_Absyn_Null_p){ goto
! _LL1154;} else{ goto _LL1155;} _LL1155: if(( unsigned int) _temp1149 >  2u?*((
! int*) _temp1149) ==  Cyc_Absyn_Int_p: 0){ _LL1184: _temp1183=( void*)(( struct
! Cyc_Absyn_Int_p_struct*) _temp1149)->f1; goto _LL1182; _LL1182: _temp1181=((
! struct Cyc_Absyn_Int_p_struct*) _temp1149)->f2; goto _LL1156;} else{ goto
! _LL1157;} _LL1157: if(( unsigned int) _temp1149 >  2u?*(( int*) _temp1149) == 
! Cyc_Absyn_Char_p: 0){ _LL1186: _temp1185=(( struct Cyc_Absyn_Char_p_struct*)
! _temp1149)->f1; goto _LL1158;} else{ goto _LL1159;} _LL1159: if(( unsigned int)
! _temp1149 >  2u?*(( int*) _temp1149) ==  Cyc_Absyn_Float_p: 0){ _LL1188:
! _temp1187=(( struct Cyc_Absyn_Float_p_struct*) _temp1149)->f1; goto _LL1160;}
! else{ goto _LL1161;} _LL1161: if(( unsigned int) _temp1149 >  2u?*(( int*)
! _temp1149) ==  Cyc_Absyn_Var_p: 0){ _LL1190: _temp1189=(( struct Cyc_Absyn_Var_p_struct*)
! _temp1149)->f1; goto _LL1162;} else{ goto _LL1163;} _LL1163: if(( unsigned int)
! _temp1149 >  2u?*(( int*) _temp1149) ==  Cyc_Absyn_Tuple_p: 0){ _LL1192:
! _temp1191=(( struct Cyc_Absyn_Tuple_p_struct*) _temp1149)->f1; goto _LL1164;}
! else{ goto _LL1165;} _LL1165: if(( unsigned int) _temp1149 >  2u?*(( int*)
! _temp1149) ==  Cyc_Absyn_Pointer_p: 0){ _LL1194: _temp1193=(( struct Cyc_Absyn_Pointer_p_struct*)
! _temp1149)->f1; goto _LL1166;} else{ goto _LL1167;} _LL1167: if(( unsigned int)
! _temp1149 >  2u?*(( int*) _temp1149) ==  Cyc_Absyn_Reference_p: 0){ _LL1196:
! _temp1195=(( struct Cyc_Absyn_Reference_p_struct*) _temp1149)->f1; goto _LL1168;}
! else{ goto _LL1169;} _LL1169: if(( unsigned int) _temp1149 >  2u?*(( int*)
! _temp1149) ==  Cyc_Absyn_UnknownId_p: 0){ _LL1198: _temp1197=(( struct Cyc_Absyn_UnknownId_p_struct*)
! _temp1149)->f1; goto _LL1170;} else{ goto _LL1171;} _LL1171: if(( unsigned int)
! _temp1149 >  2u?*(( int*) _temp1149) ==  Cyc_Absyn_UnknownCall_p: 0){ _LL1204:
! _temp1203=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp1149)->f1; goto
! _LL1202; _LL1202: _temp1201=(( struct Cyc_Absyn_UnknownCall_p_struct*) _temp1149)->f2;
! goto _LL1200; _LL1200: _temp1199=(( struct Cyc_Absyn_UnknownCall_p_struct*)
! _temp1149)->f3; goto _LL1172;} else{ goto _LL1173;} _LL1173: if(( unsigned int)
! _temp1149 >  2u?*(( int*) _temp1149) ==  Cyc_Absyn_UnknownFields_p: 0){ _LL1210:
! _temp1209=(( struct Cyc_Absyn_UnknownFields_p_struct*) _temp1149)->f1; goto
! _LL1208; _LL1208: _temp1207=(( struct Cyc_Absyn_UnknownFields_p_struct*)
! _temp1149)->f2; goto _LL1206; _LL1206: _temp1205=(( struct Cyc_Absyn_UnknownFields_p_struct*)
! _temp1149)->f3; goto _LL1174;} else{ goto _LL1175;} _LL1175: if(( unsigned int)
! _temp1149 >  2u?*(( int*) _temp1149) ==  Cyc_Absyn_Struct_p: 0){ _LL1216:
! _temp1215=(( struct Cyc_Absyn_Struct_p_struct*) _temp1149)->f1; goto _LL1214;
! _LL1214: _temp1213=(( struct Cyc_Absyn_Struct_p_struct*) _temp1149)->f3; goto
! _LL1212; _LL1212: _temp1211=(( struct Cyc_Absyn_Struct_p_struct*) _temp1149)->f4;
! goto _LL1176;} else{ goto _LL1177;} _LL1177: if(( unsigned int) _temp1149 >  2u?*((
! int*) _temp1149) ==  Cyc_Absyn_Enum_p: 0){ _LL1218: _temp1217=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp1149)->f2; goto _LL1178;} else{ goto _LL1179;} _LL1179: if(( unsigned int)
! _temp1149 >  2u?*(( int*) _temp1149) ==  Cyc_Absyn_Tunion_p: 0){ _LL1224:
! _temp1223=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1149)->f2; goto _LL1222;
! _LL1222: _temp1221=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1149)->f3; goto
! _LL1220; _LL1220: _temp1219=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1149)->f4;
! goto _LL1180;} else{ goto _LL1150;} _LL1152: s= Cyc_PP_text( _tag_arr("_",
! sizeof( unsigned char), 2u)); goto _LL1150; _LL1154: s= Cyc_PP_text( _tag_arr("NULL",
! sizeof( unsigned char), 5u)); goto _LL1150; _LL1156: if( _temp1183 == ( void*)
  Cyc_Absyn_Signed){ s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp1226; _temp1226.tag= Cyc_Std_Int_pa; _temp1226.f1=( int)(( unsigned int)
! _temp1181);{ void* _temp1225[ 1u]={& _temp1226}; Cyc_Std_aprintf( _tag_arr("%d",
! sizeof( unsigned char), 3u), _tag_arr( _temp1225, sizeof( void*), 1u));}}));}
  else{ s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp1228; _temp1228.tag= Cyc_Std_Int_pa; _temp1228.f1=( unsigned int) _temp1181;{
! void* _temp1227[ 1u]={& _temp1228}; Cyc_Std_aprintf( _tag_arr("%u", sizeof(
! unsigned char), 3u), _tag_arr( _temp1227, sizeof( void*), 1u));}}));} goto
! _LL1150; _LL1158: s= Cyc_PP_text(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp1230; _temp1230.tag= Cyc_Std_String_pa; _temp1230.f1=( struct _tagged_arr)
! Cyc_Absynpp_char_escape( _temp1185);{ void* _temp1229[ 1u]={& _temp1230}; Cyc_Std_aprintf(
! _tag_arr("'%s'", sizeof( unsigned char), 5u), _tag_arr( _temp1229, sizeof( void*),
! 1u));}})); goto _LL1150; _LL1160: s= Cyc_PP_text( _temp1187); goto _LL1150;
! _LL1162: s= Cyc_Absynpp_qvar2doc( _temp1189->name); goto _LL1150; _LL1164: s=({
! struct Cyc_PP_Doc* _temp1231[ 3u]; _temp1231[ 2u]= Cyc_PP_text( _tag_arr(")",
! sizeof( unsigned char), 2u)); _temp1231[ 1u]=(( struct Cyc_PP_Doc*(*)( struct
  Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Pat*), struct _tagged_arr sep, struct Cyc_List_List*
  l)) Cyc_PP_ppseq)( Cyc_Absynpp_pat2doc, _tag_arr(",", sizeof( unsigned char), 2u),
! _temp1191); _temp1231[ 0u]= Cyc_PP_text( _tag_arr("$(", sizeof( unsigned char),
! 3u)); Cyc_PP_cat( _tag_arr( _temp1231, sizeof( struct Cyc_PP_Doc*), 3u));});
! goto _LL1150; _LL1166: s=({ struct Cyc_PP_Doc* _temp1232[ 2u]; _temp1232[ 1u]=
! Cyc_Absynpp_pat2doc( _temp1193); _temp1232[ 0u]= Cyc_PP_text( _tag_arr("&",
! sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp1232, sizeof( struct
! Cyc_PP_Doc*), 2u));}); goto _LL1150; _LL1168: s=({ struct Cyc_PP_Doc* _temp1233[
! 2u]; _temp1233[ 1u]= Cyc_Absynpp_qvar2doc( _temp1195->name); _temp1233[ 0u]= Cyc_PP_text(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_PP_cat( _tag_arr( _temp1233,
! sizeof( struct Cyc_PP_Doc*), 2u));}); goto _LL1150; _LL1170: s= Cyc_Absynpp_qvar2doc(
! _temp1197); goto _LL1150; _LL1172: s=({ struct Cyc_PP_Doc* _temp1234[ 3u];
! _temp1234[ 2u]= Cyc_PP_group( _tag_arr("(", sizeof( unsigned char), 2u),
  _tag_arr(")", sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char),
  2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Pat*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_pat2doc, _temp1199));
! _temp1234[ 1u]= Cyc_Absynpp_tvars2doc( _temp1201); _temp1234[ 0u]= Cyc_Absynpp_qvar2doc(
! _temp1203); Cyc_PP_cat( _tag_arr( _temp1234, sizeof( struct Cyc_PP_Doc*), 3u));});
! goto _LL1150; _LL1174: s=({ struct Cyc_PP_Doc* _temp1235[ 3u]; _temp1235[ 2u]=
  Cyc_PP_group( _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
  unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_dp2doc, _temp1205)); _temp1235[ 1u]= Cyc_Absynpp_tvars2doc(
! _temp1207); _temp1235[ 0u]= Cyc_Absynpp_qvar2doc( _temp1209); Cyc_PP_cat(
! _tag_arr( _temp1235, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL1150; _LL1176:
! s=({ struct Cyc_PP_Doc* _temp1236[ 3u]; _temp1236[ 2u]= Cyc_PP_group( _tag_arr("{",
  sizeof( unsigned char), 2u), _tag_arr("}", sizeof( unsigned char), 2u), _tag_arr(",",
  sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)(
  struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Absynpp_dp2doc,
! _temp1211)); _temp1236[ 1u]= Cyc_Absynpp_tvars2doc( _temp1213); _temp1236[ 0u]=
! _temp1215->name ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_qvar2doc(( struct _tuple0*)((
! struct Cyc_Core_Opt*) _check_null( _temp1215->name))->v); Cyc_PP_cat( _tag_arr(
! _temp1236, sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL1150; _LL1178: s= Cyc_Absynpp_qvar2doc(
! _temp1217->name); goto _LL1150; _LL1180: if( _temp1219 ==  0){ s= Cyc_Absynpp_qvar2doc(
! _temp1223->name);} else{ s=({ struct Cyc_PP_Doc* _temp1237[ 3u]; _temp1237[ 2u]=
  Cyc_PP_egroup( _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
  unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Absynpp_pat2doc, _temp1219)); _temp1237[ 1u]= Cyc_Absynpp_tvars2doc(
! _temp1221); _temp1237[ 0u]= Cyc_Absynpp_qvar2doc( _temp1223->name); Cyc_PP_cat(
! _tag_arr( _temp1237, sizeof( struct Cyc_PP_Doc*), 3u));});} goto _LL1150;
! _LL1150:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_dp2doc( struct _tuple5* dp){
! return({ struct Cyc_PP_Doc* _temp1238[ 2u]; _temp1238[ 1u]= Cyc_Absynpp_pat2doc((*
! dp).f2); _temp1238[ 0u]= Cyc_PP_egroup( _tag_arr("", sizeof( unsigned char), 1u),
  _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=", sizeof( unsigned char),
  2u),(( struct Cyc_List_List*(*)( struct Cyc_PP_Doc*(* f)( void*), struct Cyc_List_List*
  x)) Cyc_List_map)( Cyc_Absynpp_designator2doc,(* dp).f1)); Cyc_PP_cat( _tag_arr(
! _temp1238, sizeof( struct Cyc_PP_Doc*), 2u));});} struct Cyc_PP_Doc* Cyc_Absynpp_switchclause2doc(
  struct Cyc_Absyn_Switch_clause* c){ if( c->where_clause ==  0?( void*)( c->pattern)->r
! == ( void*) Cyc_Absyn_Wild_p: 0){ return({ struct Cyc_PP_Doc* _temp1239[ 2u];
! _temp1239[ 1u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1240[ 2u]; _temp1240[
! 1u]= Cyc_Absynpp_stmt2doc( c->body); _temp1240[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat(
! _tag_arr( _temp1240, sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1239[ 0u]= Cyc_PP_text(
  _tag_arr("default: ", sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr(
! _temp1239, sizeof( struct Cyc_PP_Doc*), 2u));});} else{ if( c->where_clause == 
! 0){ return({ struct Cyc_PP_Doc* _temp1241[ 4u]; _temp1241[ 3u]= Cyc_PP_nest( 2,({
! struct Cyc_PP_Doc* _temp1242[ 2u]; _temp1242[ 1u]= Cyc_Absynpp_stmt2doc( c->body);
! _temp1242[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1242, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1241[ 2u]= Cyc_PP_text( _tag_arr(": ",
! sizeof( unsigned char), 3u)); _temp1241[ 1u]= Cyc_Absynpp_pat2doc( c->pattern);
! _temp1241[ 0u]= Cyc_PP_text( _tag_arr("case ", sizeof( unsigned char), 6u)); Cyc_PP_cat(
! _tag_arr( _temp1241, sizeof( struct Cyc_PP_Doc*), 4u));});} else{ return({
! struct Cyc_PP_Doc* _temp1243[ 6u]; _temp1243[ 5u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc*
! _temp1244[ 2u]; _temp1244[ 1u]= Cyc_Absynpp_stmt2doc( c->body); _temp1244[ 0u]=
! Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1244, sizeof( struct Cyc_PP_Doc*),
! 2u));})); _temp1243[ 4u]= Cyc_PP_text( _tag_arr(": ", sizeof( unsigned char), 3u));
! _temp1243[ 3u]= Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null( c->where_clause));
! _temp1243[ 2u]= Cyc_PP_text( _tag_arr(" && ", sizeof( unsigned char), 5u));
! _temp1243[ 1u]= Cyc_Absynpp_pat2doc( c->pattern); _temp1243[ 0u]= Cyc_PP_text(
! _tag_arr("case ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp1243,
  sizeof( struct Cyc_PP_Doc*), 6u));});}}} struct Cyc_PP_Doc* Cyc_Absynpp_switchclauses2doc(
  struct Cyc_List_List* cs){ return(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(*
  pp)( struct Cyc_Absyn_Switch_clause*), struct _tagged_arr sep, struct Cyc_List_List*
  l)) Cyc_PP_ppseql)( Cyc_Absynpp_switchclause2doc, _tag_arr("", sizeof(
  unsigned char), 1u), cs);} struct Cyc_PP_Doc* Cyc_Absynpp_switchCclause2doc(
! struct Cyc_Absyn_SwitchC_clause* c){ struct Cyc_Absyn_SwitchC_clause _temp1247;
! struct Cyc_Absyn_Stmt* _temp1248; struct Cyc_Absyn_Exp* _temp1250; struct Cyc_Absyn_SwitchC_clause*
! _temp1245= c; _temp1247=* _temp1245; _LL1251: _temp1250= _temp1247.cnst_exp;
! goto _LL1249; _LL1249: _temp1248= _temp1247.body; goto _LL1246; _LL1246: if(
! _temp1250 ==  0){ return({ struct Cyc_PP_Doc* _temp1252[ 2u]; _temp1252[ 1u]=
! Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1253[ 2u]; _temp1253[ 1u]= Cyc_Absynpp_stmt2doc(
! c->body); _temp1253[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1253,
! sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1252[ 0u]= Cyc_PP_text( _tag_arr("default: ",
! sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr( _temp1252, sizeof( struct
! Cyc_PP_Doc*), 2u));});} else{ return({ struct Cyc_PP_Doc* _temp1254[ 4u];
! _temp1254[ 3u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1255[ 2u]; _temp1255[
! 1u]= Cyc_Absynpp_stmt2doc( _temp1248); _temp1255[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat(
! _tag_arr( _temp1255, sizeof( struct Cyc_PP_Doc*), 2u));})); _temp1254[ 2u]= Cyc_PP_text(
! _tag_arr(": ", sizeof( unsigned char), 3u)); _temp1254[ 1u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( _temp1250)); _temp1254[ 0u]= Cyc_PP_text(
! _tag_arr("case ", sizeof( unsigned char), 6u)); Cyc_PP_cat( _tag_arr( _temp1254,
  sizeof( struct Cyc_PP_Doc*), 4u));});}} struct Cyc_PP_Doc* Cyc_Absynpp_switchCclauses2doc(
  struct Cyc_List_List* cs){ return(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(*
  pp)( struct Cyc_Absyn_SwitchC_clause*), struct _tagged_arr sep, struct Cyc_List_List*
  l)) Cyc_PP_ppseql)( Cyc_Absynpp_switchCclause2doc, _tag_arr("", sizeof(
  unsigned char), 1u), cs);} struct Cyc_PP_Doc* Cyc_Absynpp_enumfield2doc( struct
  Cyc_Absyn_Enumfield* f){ if( f->tag ==  0){ return Cyc_Absynpp_qvar2doc( f->name);}
! else{ return({ struct Cyc_PP_Doc* _temp1256[ 3u]; _temp1256[ 2u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( f->tag)); _temp1256[ 1u]= Cyc_PP_text(
! _tag_arr(" = ", sizeof( unsigned char), 4u)); _temp1256[ 0u]= Cyc_Absynpp_qvar2doc(
! f->name); Cyc_PP_cat( _tag_arr( _temp1256, sizeof( struct Cyc_PP_Doc*), 3u));});}}
  struct Cyc_PP_Doc* Cyc_Absynpp_enumfields2doc( struct Cyc_List_List* fs){ return((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Enumfield*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_enumfield2doc,
***************
*** 2334,2799 ****
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Vardecl*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseq)( Cyc_Absynpp_id2doc,
  _tag_arr(",", sizeof( unsigned char), 2u), vds);} struct Cyc_PP_Doc* Cyc_Absynpp_decl2doc(
! struct Cyc_Absyn_Decl* d){ struct Cyc_PP_Doc* s;{ void* _temp1273=( void*) d->r;
! struct Cyc_Absyn_Fndecl* _temp1299; struct Cyc_Absyn_Structdecl* _temp1301;
! struct Cyc_Absyn_Uniondecl* _temp1303; struct Cyc_Absyn_Vardecl* _temp1305;
! struct Cyc_Absyn_Vardecl _temp1307; struct Cyc_List_List* _temp1308; struct Cyc_Absyn_Exp*
! _temp1310; void* _temp1312; struct Cyc_Absyn_Tqual _temp1314; struct _tuple0*
! _temp1316; void* _temp1318; struct Cyc_Absyn_Tuniondecl* _temp1320; struct Cyc_Absyn_Tuniondecl
! _temp1322; int _temp1323; struct Cyc_Core_Opt* _temp1325; struct Cyc_List_List*
! _temp1327; struct _tuple0* _temp1329; void* _temp1331; struct Cyc_Absyn_Exp*
! _temp1333; struct Cyc_Absyn_Pat* _temp1335; struct Cyc_List_List* _temp1337;
! struct Cyc_Absyn_Enumdecl* _temp1339; struct Cyc_Absyn_Enumdecl _temp1341;
! struct Cyc_Core_Opt* _temp1342; struct _tuple0* _temp1344; void* _temp1346;
! struct Cyc_Absyn_Typedefdecl* _temp1348; struct Cyc_List_List* _temp1350; struct
! _tagged_arr* _temp1352; struct Cyc_List_List* _temp1354; struct _tuple0*
! _temp1356; struct Cyc_List_List* _temp1358; _LL1275: if(*(( int*) _temp1273) == 
! Cyc_Absyn_Fn_d){ _LL1300: _temp1299=(( struct Cyc_Absyn_Fn_d_struct*) _temp1273)->f1;
! goto _LL1276;} else{ goto _LL1277;} _LL1277: if(*(( int*) _temp1273) ==  Cyc_Absyn_Struct_d){
! _LL1302: _temp1301=(( struct Cyc_Absyn_Struct_d_struct*) _temp1273)->f1; goto
! _LL1278;} else{ goto _LL1279;} _LL1279: if(*(( int*) _temp1273) ==  Cyc_Absyn_Union_d){
! _LL1304: _temp1303=(( struct Cyc_Absyn_Union_d_struct*) _temp1273)->f1; goto
! _LL1280;} else{ goto _LL1281;} _LL1281: if(*(( int*) _temp1273) ==  Cyc_Absyn_Var_d){
! _LL1306: _temp1305=(( struct Cyc_Absyn_Var_d_struct*) _temp1273)->f1; _temp1307=*
! _temp1305; _LL1319: _temp1318=( void*) _temp1307.sc; goto _LL1317; _LL1317:
! _temp1316= _temp1307.name; goto _LL1315; _LL1315: _temp1314= _temp1307.tq; goto
! _LL1313; _LL1313: _temp1312=( void*) _temp1307.type; goto _LL1311; _LL1311:
! _temp1310= _temp1307.initializer; goto _LL1309; _LL1309: _temp1308= _temp1307.attributes;
! goto _LL1282;} else{ goto _LL1283;} _LL1283: if(*(( int*) _temp1273) ==  Cyc_Absyn_Tunion_d){
! _LL1321: _temp1320=(( struct Cyc_Absyn_Tunion_d_struct*) _temp1273)->f1;
! _temp1322=* _temp1320; _LL1332: _temp1331=( void*) _temp1322.sc; goto _LL1330;
! _LL1330: _temp1329= _temp1322.name; goto _LL1328; _LL1328: _temp1327= _temp1322.tvs;
! goto _LL1326; _LL1326: _temp1325= _temp1322.fields; goto _LL1324; _LL1324:
! _temp1323= _temp1322.is_xtunion; goto _LL1284;} else{ goto _LL1285;} _LL1285:
! if(*(( int*) _temp1273) ==  Cyc_Absyn_Let_d){ _LL1336: _temp1335=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1273)->f1; goto _LL1334; _LL1334: _temp1333=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1273)->f4; goto _LL1286;} else{ goto _LL1287;} _LL1287: if(*(( int*)
! _temp1273) ==  Cyc_Absyn_Letv_d){ _LL1338: _temp1337=(( struct Cyc_Absyn_Letv_d_struct*)
! _temp1273)->f1; goto _LL1288;} else{ goto _LL1289;} _LL1289: if(*(( int*)
! _temp1273) ==  Cyc_Absyn_Enum_d){ _LL1340: _temp1339=(( struct Cyc_Absyn_Enum_d_struct*)
! _temp1273)->f1; _temp1341=* _temp1339; _LL1347: _temp1346=( void*) _temp1341.sc;
! goto _LL1345; _LL1345: _temp1344= _temp1341.name; goto _LL1343; _LL1343:
! _temp1342= _temp1341.fields; goto _LL1290;} else{ goto _LL1291;} _LL1291: if(*((
! int*) _temp1273) ==  Cyc_Absyn_Typedef_d){ _LL1349: _temp1348=(( struct Cyc_Absyn_Typedef_d_struct*)
! _temp1273)->f1; goto _LL1292;} else{ goto _LL1293;} _LL1293: if(*(( int*)
! _temp1273) ==  Cyc_Absyn_Namespace_d){ _LL1353: _temp1352=(( struct Cyc_Absyn_Namespace_d_struct*)
! _temp1273)->f1; goto _LL1351; _LL1351: _temp1350=(( struct Cyc_Absyn_Namespace_d_struct*)
! _temp1273)->f2; goto _LL1294;} else{ goto _LL1295;} _LL1295: if(*(( int*)
! _temp1273) ==  Cyc_Absyn_Using_d){ _LL1357: _temp1356=(( struct Cyc_Absyn_Using_d_struct*)
! _temp1273)->f1; goto _LL1355; _LL1355: _temp1354=(( struct Cyc_Absyn_Using_d_struct*)
! _temp1273)->f2; goto _LL1296;} else{ goto _LL1297;} _LL1297: if(*(( int*)
! _temp1273) ==  Cyc_Absyn_ExternC_d){ _LL1359: _temp1358=(( struct Cyc_Absyn_ExternC_d_struct*)
! _temp1273)->f1; goto _LL1298;} else{ goto _LL1274;} _LL1276: { void* t=( void*)({
! struct Cyc_Absyn_FnType_struct* _temp1367=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1367[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1368; _temp1368.tag= Cyc_Absyn_FnType; _temp1368.f1=({ struct Cyc_Absyn_FnInfo
! _temp1369; _temp1369.tvars= _temp1299->tvs; _temp1369.effect= _temp1299->effect;
! _temp1369.ret_typ=( void*)(( void*) _temp1299->ret_type); _temp1369.args=((
  struct Cyc_List_List*(*)( struct _tuple1*(* f)( struct _tuple3*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Absynpp_arg_mk_opt, _temp1299->args); _temp1369.c_varargs=
! _temp1299->c_varargs; _temp1369.cyc_varargs= _temp1299->cyc_varargs; _temp1369.rgn_po=
! _temp1299->rgn_po; _temp1369.attributes= 0; _temp1369;}); _temp1368;});
! _temp1367;}); struct Cyc_PP_Doc* attsdoc= Cyc_Absynpp_atts2doc( _temp1299->attributes);
! struct Cyc_PP_Doc* inlinedoc; if( _temp1299->is_inline){ if( Cyc_Absynpp_to_VC){
  inlinedoc= Cyc_PP_text( _tag_arr("__inline ", sizeof( unsigned char), 10u));}
  else{ inlinedoc= Cyc_PP_text( _tag_arr("inline ", sizeof( unsigned char), 8u));}}
  else{ inlinedoc= Cyc_PP_nil_doc();}{ struct Cyc_PP_Doc* scopedoc= Cyc_Absynpp_scope2doc((
! void*) _temp1299->sc); struct Cyc_PP_Doc* beforenamedoc= Cyc_Absynpp_to_VC? Cyc_Absynpp_callconv2doc(
! _temp1299->attributes): attsdoc; struct Cyc_PP_Doc* namedoc= Cyc_Absynpp_typedef_name2doc(
! _temp1299->name); struct Cyc_PP_Doc* tqtddoc= Cyc_Absynpp_tqtd2doc(({ struct Cyc_Absyn_Tqual
! _temp1364; _temp1364.q_const= 0; _temp1364.q_volatile= 0; _temp1364.q_restrict=
! 0; _temp1364;}), t,({ struct Cyc_Core_Opt* _temp1365=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1365->v=( void*)({ struct Cyc_PP_Doc*
! _temp1366[ 2u]; _temp1366[ 1u]= namedoc; _temp1366[ 0u]= beforenamedoc; Cyc_PP_cat(
! _tag_arr( _temp1366, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1365;})); struct
! Cyc_PP_Doc* bodydoc=({ struct Cyc_PP_Doc* _temp1362[ 4u]; _temp1362[ 3u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1362[ 2u]= Cyc_PP_line_doc();
! _temp1362[ 1u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1363[ 2u]; _temp1363[
! 1u]= Cyc_Absynpp_stmt2doc( _temp1299->body); _temp1363[ 0u]= Cyc_PP_line_doc();
! Cyc_PP_cat( _tag_arr( _temp1363, sizeof( struct Cyc_PP_Doc*), 2u));}));
! _temp1362[ 0u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u)); Cyc_PP_cat(
! _tag_arr( _temp1362, sizeof( struct Cyc_PP_Doc*), 4u));}); s=({ struct Cyc_PP_Doc*
! _temp1360[ 4u]; _temp1360[ 3u]= bodydoc; _temp1360[ 2u]= tqtddoc; _temp1360[ 1u]=
! scopedoc; _temp1360[ 0u]= inlinedoc; Cyc_PP_cat( _tag_arr( _temp1360, sizeof(
  struct Cyc_PP_Doc*), 4u));}); if( Cyc_Absynpp_to_VC){ s=({ struct Cyc_PP_Doc*
! _temp1361[ 2u]; _temp1361[ 1u]= s; _temp1361[ 0u]= attsdoc; Cyc_PP_cat( _tag_arr(
! _temp1361, sizeof( struct Cyc_PP_Doc*), 2u));});} goto _LL1274;}} _LL1278: if(
! _temp1301->fields ==  0){ s=({ struct Cyc_PP_Doc* _temp1370[ 5u]; _temp1370[ 4u]=
! Cyc_PP_text( _tag_arr(";", sizeof( unsigned char), 2u)); _temp1370[ 3u]= Cyc_Absynpp_ktvars2doc(
! _temp1301->tvs); _temp1370[ 2u]= _temp1301->name ==  0? Cyc_PP_text( _tag_arr("",
  sizeof( unsigned char), 1u)): Cyc_Absynpp_typedef_name2doc(( struct _tuple0*)((
! struct Cyc_Core_Opt*) _check_null( _temp1301->name))->v); _temp1370[ 1u]= Cyc_PP_text(
! _tag_arr("struct ", sizeof( unsigned char), 8u)); _temp1370[ 0u]= Cyc_Absynpp_scope2doc((
! void*) _temp1301->sc); Cyc_PP_cat( _tag_arr( _temp1370, sizeof( struct Cyc_PP_Doc*),
! 5u));});} else{ s=({ struct Cyc_PP_Doc* _temp1371[ 10u]; _temp1371[ 9u]= Cyc_PP_text(
! _tag_arr(";", sizeof( unsigned char), 2u)); _temp1371[ 8u]= Cyc_Absynpp_atts2doc(
! _temp1301->attributes); _temp1371[ 7u]= Cyc_PP_text( _tag_arr("}", sizeof(
! unsigned char), 2u)); _temp1371[ 6u]= Cyc_PP_line_doc(); _temp1371[ 5u]= Cyc_PP_nest(
! 2,({ struct Cyc_PP_Doc* _temp1372[ 2u]; _temp1372[ 1u]= Cyc_Absynpp_structfields2doc((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1301->fields))->v);
! _temp1372[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1372, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1371[ 4u]= Cyc_PP_text( _tag_arr(" {",
! sizeof( unsigned char), 3u)); _temp1371[ 3u]= Cyc_Absynpp_ktvars2doc( _temp1301->tvs);
! _temp1371[ 2u]= _temp1301->name ==  0? Cyc_PP_text( _tag_arr("", sizeof(
  unsigned char), 1u)): Cyc_Absynpp_typedef_name2doc(( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( _temp1301->name))->v); _temp1371[ 1u]= Cyc_PP_text(
! _tag_arr("struct ", sizeof( unsigned char), 8u)); _temp1371[ 0u]= Cyc_Absynpp_scope2doc((
! void*) _temp1301->sc); Cyc_PP_cat( _tag_arr( _temp1371, sizeof( struct Cyc_PP_Doc*),
! 10u));});} goto _LL1274; _LL1280: if( _temp1303->fields ==  0){ s=({ struct Cyc_PP_Doc*
! _temp1373[ 5u]; _temp1373[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1373[ 3u]= Cyc_Absynpp_tvars2doc( _temp1303->tvs); _temp1373[ 2u]=
! _temp1303->name ==  0? Cyc_PP_text( _tag_arr("", sizeof( unsigned char), 1u)):
  Cyc_Absynpp_qvar2doc(( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp1303->name))->v); _temp1373[ 1u]= Cyc_PP_text( _tag_arr("union ", sizeof(
! unsigned char), 7u)); _temp1373[ 0u]= Cyc_Absynpp_scope2doc(( void*) _temp1303->sc);
! Cyc_PP_cat( _tag_arr( _temp1373, sizeof( struct Cyc_PP_Doc*), 5u));});} else{ s=({
! struct Cyc_PP_Doc* _temp1374[ 10u]; _temp1374[ 9u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1374[ 8u]= Cyc_Absynpp_atts2doc( _temp1303->attributes);
! _temp1374[ 7u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1374[ 6u]= Cyc_PP_line_doc(); _temp1374[ 5u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc*
! _temp1375[ 2u]; _temp1375[ 1u]= Cyc_Absynpp_structfields2doc(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp1303->fields))->v); _temp1375[ 0u]= Cyc_PP_line_doc();
! Cyc_PP_cat( _tag_arr( _temp1375, sizeof( struct Cyc_PP_Doc*), 2u));}));
! _temp1374[ 4u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u));
! _temp1374[ 3u]= Cyc_Absynpp_tvars2doc( _temp1303->tvs); _temp1374[ 2u]=
! _temp1303->name ==  0? Cyc_PP_text( _tag_arr("", sizeof( unsigned char), 1u)):
  Cyc_Absynpp_qvar2doc(( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp1303->name))->v); _temp1374[ 1u]= Cyc_PP_text( _tag_arr("union ", sizeof(
! unsigned char), 7u)); _temp1374[ 0u]= Cyc_Absynpp_scope2doc(( void*) _temp1303->sc);
! Cyc_PP_cat( _tag_arr( _temp1374, sizeof( struct Cyc_PP_Doc*), 10u));});} goto
! _LL1274; _LL1282: { struct Cyc_PP_Doc* sn= Cyc_Absynpp_typedef_name2doc(
! _temp1316); struct Cyc_PP_Doc* attsdoc= Cyc_Absynpp_atts2doc( _temp1308); struct
  Cyc_PP_Doc* beforenamedoc; if( ! Cyc_Absynpp_to_VC){ beforenamedoc= attsdoc;}
! else{ void* _temp1376= Cyc_Tcutil_compress( _temp1312); struct Cyc_Absyn_FnInfo
! _temp1382; struct Cyc_List_List* _temp1384; _LL1378: if(( unsigned int)
! _temp1376 >  4u?*(( int*) _temp1376) ==  Cyc_Absyn_FnType: 0){ _LL1383:
! _temp1382=(( struct Cyc_Absyn_FnType_struct*) _temp1376)->f1; _LL1385: _temp1384=
! _temp1382.attributes; goto _LL1379;} else{ goto _LL1380;} _LL1380: goto _LL1381;
! _LL1379: beforenamedoc= Cyc_Absynpp_callconv2doc( _temp1384); goto _LL1377;
! _LL1381: beforenamedoc= Cyc_PP_nil_doc(); goto _LL1377; _LL1377:;} s=({ struct
! Cyc_PP_Doc* _temp1386[ 5u]; _temp1386[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof(
! unsigned char), 2u)); _temp1386[ 3u]= _temp1310 ==  0? Cyc_PP_text( _tag_arr("",
! sizeof( unsigned char), 1u)):({ struct Cyc_PP_Doc* _temp1389[ 2u]; _temp1389[ 1u]=
! Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null( _temp1310)); _temp1389[
  0u]= Cyc_PP_text( _tag_arr(" = ", sizeof( unsigned char), 4u)); Cyc_PP_cat(
! _tag_arr( _temp1389, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1386[ 2u]= Cyc_Absynpp_tqtd2doc(
! _temp1314, _temp1312,({ struct Cyc_Core_Opt* _temp1387=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1387->v=( void*)({ struct Cyc_PP_Doc*
! _temp1388[ 2u]; _temp1388[ 1u]= sn; _temp1388[ 0u]= beforenamedoc; Cyc_PP_cat(
! _tag_arr( _temp1388, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1387;}));
! _temp1386[ 1u]= Cyc_Absynpp_scope2doc( _temp1318); _temp1386[ 0u]= Cyc_Absynpp_to_VC?
! attsdoc: Cyc_PP_nil_doc(); Cyc_PP_cat( _tag_arr( _temp1386, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL1274;} _LL1284: if( _temp1325 ==  0){ s=({ struct Cyc_PP_Doc*
! _temp1390[ 5u]; _temp1390[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1390[ 3u]= Cyc_Absynpp_ktvars2doc( _temp1327); _temp1390[ 2u]=
! _temp1323? Cyc_Absynpp_qvar2doc( _temp1329): Cyc_Absynpp_typedef_name2doc(
! _temp1329); _temp1390[ 1u]= _temp1323? Cyc_PP_text( _tag_arr("xtunion ", sizeof(
  unsigned char), 9u)): Cyc_PP_text( _tag_arr("tunion ", sizeof( unsigned char), 8u));
! _temp1390[ 0u]= Cyc_Absynpp_scope2doc( _temp1331); Cyc_PP_cat( _tag_arr(
! _temp1390, sizeof( struct Cyc_PP_Doc*), 5u));});} else{ s=({ struct Cyc_PP_Doc*
! _temp1391[ 8u]; _temp1391[ 7u]= Cyc_PP_text( _tag_arr("};", sizeof(
! unsigned char), 3u)); _temp1391[ 6u]= Cyc_PP_line_doc(); _temp1391[ 5u]= Cyc_PP_nest(
! 2,({ struct Cyc_PP_Doc* _temp1392[ 2u]; _temp1392[ 1u]= Cyc_Absynpp_tunionfields2doc((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1325))->v);
! _temp1392[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1392, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1391[ 4u]= Cyc_PP_text( _tag_arr(" {",
! sizeof( unsigned char), 3u)); _temp1391[ 3u]= Cyc_Absynpp_ktvars2doc( _temp1327);
! _temp1391[ 2u]= _temp1323? Cyc_Absynpp_qvar2doc( _temp1329): Cyc_Absynpp_typedef_name2doc(
! _temp1329); _temp1391[ 1u]= _temp1323? Cyc_PP_text( _tag_arr("xtunion ", sizeof(
  unsigned char), 9u)): Cyc_PP_text( _tag_arr("tunion ", sizeof( unsigned char), 8u));
! _temp1391[ 0u]= Cyc_Absynpp_scope2doc( _temp1331); Cyc_PP_cat( _tag_arr(
! _temp1391, sizeof( struct Cyc_PP_Doc*), 8u));});} goto _LL1274; _LL1286: s=({
! struct Cyc_PP_Doc* _temp1393[ 5u]; _temp1393[ 4u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1393[ 3u]= Cyc_Absynpp_exp2doc( _temp1333);
! _temp1393[ 2u]= Cyc_PP_text( _tag_arr(" = ", sizeof( unsigned char), 4u));
! _temp1393[ 1u]= Cyc_Absynpp_pat2doc( _temp1335); _temp1393[ 0u]= Cyc_PP_text(
! _tag_arr("let ", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1393,
! sizeof( struct Cyc_PP_Doc*), 5u));}); goto _LL1274; _LL1288: s=({ struct Cyc_PP_Doc*
! _temp1394[ 3u]; _temp1394[ 2u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1394[ 1u]= Cyc_Absynpp_ids2doc( _temp1337); _temp1394[ 0u]= Cyc_PP_text(
! _tag_arr("let ", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1394,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL1274; _LL1290: if( _temp1342 ==  0){
! s=({ struct Cyc_PP_Doc* _temp1395[ 4u]; _temp1395[ 3u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1395[ 2u]= Cyc_Absynpp_typedef_name2doc(
! _temp1344); _temp1395[ 1u]= Cyc_PP_text( _tag_arr("enum ", sizeof( unsigned char),
! 6u)); _temp1395[ 0u]= Cyc_Absynpp_scope2doc( _temp1346); Cyc_PP_cat( _tag_arr(
! _temp1395, sizeof( struct Cyc_PP_Doc*), 4u));});} else{ s=({ struct Cyc_PP_Doc*
! _temp1396[ 7u]; _temp1396[ 6u]= Cyc_PP_text( _tag_arr("};", sizeof(
! unsigned char), 3u)); _temp1396[ 5u]= Cyc_PP_line_doc(); _temp1396[ 4u]= Cyc_PP_nest(
! 2,({ struct Cyc_PP_Doc* _temp1397[ 2u]; _temp1397[ 1u]= Cyc_Absynpp_enumfields2doc((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1342))->v);
! _temp1397[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1397, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1396[ 3u]= Cyc_PP_text( _tag_arr(" {",
! sizeof( unsigned char), 3u)); _temp1396[ 2u]= Cyc_Absynpp_qvar2doc( _temp1344);
! _temp1396[ 1u]= Cyc_PP_text( _tag_arr("enum ", sizeof( unsigned char), 6u));
! _temp1396[ 0u]= Cyc_Absynpp_scope2doc( _temp1346); Cyc_PP_cat( _tag_arr(
! _temp1396, sizeof( struct Cyc_PP_Doc*), 7u));});} goto _LL1274; _LL1292: s=({
! struct Cyc_PP_Doc* _temp1398[ 3u]; _temp1398[ 2u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1398[ 1u]= Cyc_Absynpp_tqtd2doc(({ struct Cyc_Absyn_Tqual
! _temp1399; _temp1399.q_const= 0; _temp1399.q_volatile= 0; _temp1399.q_restrict=
! 0; _temp1399;}),( void*) _temp1348->defn,({ struct Cyc_Core_Opt* _temp1400=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1400->v=(
! void*)({ struct Cyc_PP_Doc* _temp1401[ 2u]; _temp1401[ 1u]= Cyc_Absynpp_tvars2doc(
! _temp1348->tvs); _temp1401[ 0u]= Cyc_Absynpp_typedef_name2doc( _temp1348->name);
! Cyc_PP_cat( _tag_arr( _temp1401, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1400;}));
! _temp1398[ 0u]= Cyc_PP_text( _tag_arr("typedef ", sizeof( unsigned char), 9u));
! Cyc_PP_cat( _tag_arr( _temp1398, sizeof( struct Cyc_PP_Doc*), 3u));}); goto
! _LL1274; _LL1294: if( Cyc_Absynpp_use_curr_namespace){ Cyc_Absynpp_curr_namespace_add(
! _temp1352);} s=({ struct Cyc_PP_Doc* _temp1402[ 7u]; _temp1402[ 6u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1402[ 5u]= Cyc_PP_line_doc();
! _temp1402[ 4u]=(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1350); _temp1402[ 3u]= Cyc_PP_line_doc();
! _temp1402[ 2u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u));
! _temp1402[ 1u]= Cyc_PP_textptr( _temp1352); _temp1402[ 0u]= Cyc_PP_text(
  _tag_arr("namespace ", sizeof( unsigned char), 11u)); Cyc_PP_cat( _tag_arr(
! _temp1402, sizeof( struct Cyc_PP_Doc*), 7u));}); if( Cyc_Absynpp_use_curr_namespace){
! Cyc_Absynpp_curr_namespace_drop();} goto _LL1274; _LL1296: if( Cyc_Absynpp_print_using_stmts){
! s=({ struct Cyc_PP_Doc* _temp1403[ 7u]; _temp1403[ 6u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1403[ 5u]= Cyc_PP_line_doc(); _temp1403[ 4u]=((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*), struct
  _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1354); _temp1403[ 3u]= Cyc_PP_line_doc();
! _temp1403[ 2u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u));
! _temp1403[ 1u]= Cyc_Absynpp_qvar2doc( _temp1356); _temp1403[ 0u]= Cyc_PP_text(
! _tag_arr("using ", sizeof( unsigned char), 7u)); Cyc_PP_cat( _tag_arr( _temp1403,
! sizeof( struct Cyc_PP_Doc*), 7u));});} else{ s=({ struct Cyc_PP_Doc* _temp1404[
! 7u]; _temp1404[ 6u]= Cyc_PP_text( _tag_arr("/* } */", sizeof( unsigned char), 8u));
! _temp1404[ 5u]= Cyc_PP_line_doc(); _temp1404[ 4u]=(( struct Cyc_PP_Doc*(*)(
  struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*), struct _tagged_arr sep,
  struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc, _tag_arr("",
! sizeof( unsigned char), 1u), _temp1354); _temp1404[ 3u]= Cyc_PP_line_doc();
! _temp1404[ 2u]= Cyc_PP_text( _tag_arr(" { */", sizeof( unsigned char), 6u));
! _temp1404[ 1u]= Cyc_Absynpp_qvar2doc( _temp1356); _temp1404[ 0u]= Cyc_PP_text(
  _tag_arr("/* using ", sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr(
! _temp1404, sizeof( struct Cyc_PP_Doc*), 7u));});} goto _LL1274; _LL1298: if( Cyc_Absynpp_print_externC_stmts){
! s=({ struct Cyc_PP_Doc* _temp1405[ 5u]; _temp1405[ 4u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1405[ 3u]= Cyc_PP_line_doc(); _temp1405[ 2u]=((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*), struct
  _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1358); _temp1405[ 1u]= Cyc_PP_line_doc();
! _temp1405[ 0u]= Cyc_PP_text( _tag_arr("extern \"C\" {", sizeof( unsigned char),
! 13u)); Cyc_PP_cat( _tag_arr( _temp1405, sizeof( struct Cyc_PP_Doc*), 5u));});}
! else{ s=({ struct Cyc_PP_Doc* _temp1406[ 5u]; _temp1406[ 4u]= Cyc_PP_text(
! _tag_arr("/* } */", sizeof( unsigned char), 8u)); _temp1406[ 3u]= Cyc_PP_line_doc();
! _temp1406[ 2u]=(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1358); _temp1406[ 1u]= Cyc_PP_line_doc();
! _temp1406[ 0u]= Cyc_PP_text( _tag_arr("/* extern \"C\" { */", sizeof(
! unsigned char), 19u)); Cyc_PP_cat( _tag_arr( _temp1406, sizeof( struct Cyc_PP_Doc*),
! 5u));});} goto _LL1274; _LL1274:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_scope2doc(
! void* sc){ void* _temp1407= sc; _LL1409: if( _temp1407 == ( void*) Cyc_Absyn_Static){
! goto _LL1410;} else{ goto _LL1411;} _LL1411: if( _temp1407 == ( void*) Cyc_Absyn_Public){
! goto _LL1412;} else{ goto _LL1413;} _LL1413: if( _temp1407 == ( void*) Cyc_Absyn_Extern){
! goto _LL1414;} else{ goto _LL1415;} _LL1415: if( _temp1407 == ( void*) Cyc_Absyn_ExternC){
! goto _LL1416;} else{ goto _LL1417;} _LL1417: if( _temp1407 == ( void*) Cyc_Absyn_Abstract){
! goto _LL1418;} else{ goto _LL1408;} _LL1410: return Cyc_PP_text( _tag_arr("static ",
! sizeof( unsigned char), 8u)); _LL1412: return Cyc_PP_nil_doc(); _LL1414: return
! Cyc_PP_text( _tag_arr("extern ", sizeof( unsigned char), 8u)); _LL1416: return
! Cyc_PP_text( _tag_arr("extern \"C\" ", sizeof( unsigned char), 12u)); _LL1418:
! return Cyc_PP_text( _tag_arr("abstract ", sizeof( unsigned char), 10u)); _LL1408:;}
! int Cyc_Absynpp_exists_temp_tvar_in_effect( void* t){ void* _temp1419= t; struct
! Cyc_Absyn_Tvar* _temp1427; struct Cyc_List_List* _temp1429; _LL1421: if((
! unsigned int) _temp1419 >  4u?*(( int*) _temp1419) ==  Cyc_Absyn_VarType: 0){
! _LL1428: _temp1427=(( struct Cyc_Absyn_VarType_struct*) _temp1419)->f1; goto
! _LL1422;} else{ goto _LL1423;} _LL1423: if(( unsigned int) _temp1419 >  4u?*((
! int*) _temp1419) ==  Cyc_Absyn_JoinEff: 0){ _LL1430: _temp1429=(( struct Cyc_Absyn_JoinEff_struct*)
! _temp1419)->f1; goto _LL1424;} else{ goto _LL1425;} _LL1425: goto _LL1426;
! _LL1422: return Cyc_Tcutil_is_temp_tvar( _temp1427); _LL1424: return Cyc_List_exists(
! Cyc_Absynpp_exists_temp_tvar_in_effect, _temp1429); _LL1426: return 0; _LL1420:;}
  struct _tuple4 Cyc_Absynpp_to_tms( struct Cyc_Absyn_Tqual tq, void* t){ void*
! _temp1431= t; struct Cyc_Absyn_Exp* _temp1445; struct Cyc_Absyn_Tqual _temp1447;
! void* _temp1449; struct Cyc_Absyn_PtrInfo _temp1451; struct Cyc_Absyn_Conref*
! _temp1453; struct Cyc_Absyn_Tqual _temp1455; struct Cyc_Absyn_Conref* _temp1457;
! void* _temp1459; void* _temp1461; struct Cyc_Absyn_FnInfo _temp1463; struct Cyc_List_List*
! _temp1465; struct Cyc_List_List* _temp1467; struct Cyc_Absyn_VarargInfo*
! _temp1469; int _temp1471; struct Cyc_List_List* _temp1473; void* _temp1475;
! struct Cyc_Core_Opt* _temp1477; struct Cyc_List_List* _temp1479; int _temp1481;
! struct Cyc_Core_Opt* _temp1483; struct Cyc_Core_Opt* _temp1485; struct Cyc_Core_Opt*
! _temp1487; struct Cyc_List_List* _temp1489; struct _tuple0* _temp1491; _LL1433:
! if(( unsigned int) _temp1431 >  4u?*(( int*) _temp1431) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1450: _temp1449=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1431)->f1;
! goto _LL1448; _LL1448: _temp1447=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1431)->f2; goto _LL1446; _LL1446: _temp1445=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1431)->f3; goto _LL1434;} else{ goto _LL1435;} _LL1435: if(( unsigned int)
! _temp1431 >  4u?*(( int*) _temp1431) ==  Cyc_Absyn_PointerType: 0){ _LL1452:
! _temp1451=(( struct Cyc_Absyn_PointerType_struct*) _temp1431)->f1; _LL1462:
! _temp1461=( void*) _temp1451.elt_typ; goto _LL1460; _LL1460: _temp1459=( void*)
! _temp1451.rgn_typ; goto _LL1458; _LL1458: _temp1457= _temp1451.nullable; goto
! _LL1456; _LL1456: _temp1455= _temp1451.tq; goto _LL1454; _LL1454: _temp1453=
! _temp1451.bounds; goto _LL1436;} else{ goto _LL1437;} _LL1437: if(( unsigned int)
! _temp1431 >  4u?*(( int*) _temp1431) ==  Cyc_Absyn_FnType: 0){ _LL1464:
! _temp1463=(( struct Cyc_Absyn_FnType_struct*) _temp1431)->f1; _LL1480: _temp1479=
! _temp1463.tvars; goto _LL1478; _LL1478: _temp1477= _temp1463.effect; goto
! _LL1476; _LL1476: _temp1475=( void*) _temp1463.ret_typ; goto _LL1474; _LL1474:
! _temp1473= _temp1463.args; goto _LL1472; _LL1472: _temp1471= _temp1463.c_varargs;
! goto _LL1470; _LL1470: _temp1469= _temp1463.cyc_varargs; goto _LL1468; _LL1468:
! _temp1467= _temp1463.rgn_po; goto _LL1466; _LL1466: _temp1465= _temp1463.attributes;
! goto _LL1438;} else{ goto _LL1439;} _LL1439: if(( unsigned int) _temp1431 >  4u?*((
! int*) _temp1431) ==  Cyc_Absyn_Evar: 0){ _LL1486: _temp1485=(( struct Cyc_Absyn_Evar_struct*)
! _temp1431)->f1; goto _LL1484; _LL1484: _temp1483=(( struct Cyc_Absyn_Evar_struct*)
! _temp1431)->f2; goto _LL1482; _LL1482: _temp1481=(( struct Cyc_Absyn_Evar_struct*)
! _temp1431)->f3; goto _LL1440;} else{ goto _LL1441;} _LL1441: if(( unsigned int)
! _temp1431 >  4u?*(( int*) _temp1431) ==  Cyc_Absyn_TypedefType: 0){ _LL1492:
! _temp1491=(( struct Cyc_Absyn_TypedefType_struct*) _temp1431)->f1; goto _LL1490;
! _LL1490: _temp1489=(( struct Cyc_Absyn_TypedefType_struct*) _temp1431)->f2; goto
! _LL1488; _LL1488: _temp1487=(( struct Cyc_Absyn_TypedefType_struct*) _temp1431)->f3;
! goto _LL1442;} else{ goto _LL1443;} _LL1443: goto _LL1444; _LL1434: { struct Cyc_List_List*
! _temp1495; void* _temp1497; struct Cyc_Absyn_Tqual _temp1499; struct _tuple4
! _temp1493= Cyc_Absynpp_to_tms( _temp1447, _temp1449); _LL1500: _temp1499=
! _temp1493.f1; goto _LL1498; _LL1498: _temp1497= _temp1493.f2; goto _LL1496;
! _LL1496: _temp1495= _temp1493.f3; goto _LL1494; _LL1494: { void* tm; if(
! _temp1445 ==  0){ tm=( void*) Cyc_Absyn_Carray_mod;} else{ tm=( void*)({ struct
! Cyc_Absyn_ConstArray_mod_struct* _temp1501=( struct Cyc_Absyn_ConstArray_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ConstArray_mod_struct)); _temp1501[ 0]=({
! struct Cyc_Absyn_ConstArray_mod_struct _temp1502; _temp1502.tag= Cyc_Absyn_ConstArray_mod;
! _temp1502.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1445); _temp1502;});
! _temp1501;});} return({ struct _tuple4 _temp1503; _temp1503.f1= _temp1499;
! _temp1503.f2= _temp1497; _temp1503.f3=({ struct Cyc_List_List* _temp1504=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1504->hd=(
! void*) tm; _temp1504->tl= _temp1495; _temp1504;}); _temp1503;});}} _LL1436: {
! struct Cyc_List_List* _temp1507; void* _temp1509; struct Cyc_Absyn_Tqual
! _temp1511; struct _tuple4 _temp1505= Cyc_Absynpp_to_tms( _temp1455, _temp1461);
! _LL1512: _temp1511= _temp1505.f1; goto _LL1510; _LL1510: _temp1509= _temp1505.f2;
! goto _LL1508; _LL1508: _temp1507= _temp1505.f3; goto _LL1506; _LL1506: { void*
! ps;{ struct _tuple8 _temp1514=({ struct _tuple8 _temp1513; _temp1513.f1=( void*)(((
  struct Cyc_Absyn_Conref*(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_compress_conref)(
! _temp1457))->v; _temp1513.f2=( void*)( Cyc_Absyn_compress_conref( _temp1453))->v;
! _temp1513;}); void* _temp1524; void* _temp1526; struct Cyc_Absyn_Exp* _temp1528;
! void* _temp1530; int _temp1532; void* _temp1534; void* _temp1536; struct Cyc_Absyn_Exp*
! _temp1538; void* _temp1540; int _temp1542; void* _temp1544; void* _temp1546;
! _LL1516: _LL1531: _temp1530= _temp1514.f1; if(( unsigned int) _temp1530 >  1u?*((
! int*) _temp1530) ==  Cyc_Absyn_Eq_constr: 0){ _LL1533: _temp1532=( int)(( struct
! Cyc_Absyn_Eq_constr_struct*) _temp1530)->f1; if( _temp1532 ==  1){ goto _LL1525;}
! else{ goto _LL1518;}} else{ goto _LL1518;} _LL1525: _temp1524= _temp1514.f2; if((
! unsigned int) _temp1524 >  1u?*(( int*) _temp1524) ==  Cyc_Absyn_Eq_constr: 0){
! _LL1527: _temp1526=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1524)->f1;
! if(( unsigned int) _temp1526 >  1u?*(( int*) _temp1526) ==  Cyc_Absyn_Upper_b: 0){
! _LL1529: _temp1528=(( struct Cyc_Absyn_Upper_b_struct*) _temp1526)->f1; goto
! _LL1517;} else{ goto _LL1518;}} else{ goto _LL1518;} _LL1518: _LL1541: _temp1540=
! _temp1514.f1; if(( unsigned int) _temp1540 >  1u?*(( int*) _temp1540) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1543: _temp1542=( int)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1540)->f1;
! if( _temp1542 ==  0){ goto _LL1535;} else{ goto _LL1520;}} else{ goto _LL1520;}
! _LL1535: _temp1534= _temp1514.f2; if(( unsigned int) _temp1534 >  1u?*(( int*)
! _temp1534) ==  Cyc_Absyn_Eq_constr: 0){ _LL1537: _temp1536=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp1534)->f1; if(( unsigned int) _temp1536 >  1u?*(( int*) _temp1536) ==  Cyc_Absyn_Upper_b:
! 0){ _LL1539: _temp1538=(( struct Cyc_Absyn_Upper_b_struct*) _temp1536)->f1; goto
! _LL1519;} else{ goto _LL1520;}} else{ goto _LL1520;} _LL1520: _LL1545: _temp1544=
! _temp1514.f2; if(( unsigned int) _temp1544 >  1u?*(( int*) _temp1544) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1547: _temp1546=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1544)->f1;
! if( _temp1546 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1521;} else{ goto
! _LL1522;}} else{ goto _LL1522;} _LL1522: goto _LL1523; _LL1517: ps=( void*)({
! struct Cyc_Absyn_Nullable_ps_struct* _temp1548=( struct Cyc_Absyn_Nullable_ps_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Nullable_ps_struct)); _temp1548[ 0]=({
! struct Cyc_Absyn_Nullable_ps_struct _temp1549; _temp1549.tag= Cyc_Absyn_Nullable_ps;
! _temp1549.f1= _temp1528; _temp1549;}); _temp1548;}); goto _LL1515; _LL1519: ps=(
! void*)({ struct Cyc_Absyn_NonNullable_ps_struct* _temp1550=( struct Cyc_Absyn_NonNullable_ps_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_NonNullable_ps_struct)); _temp1550[ 0]=({
! struct Cyc_Absyn_NonNullable_ps_struct _temp1551; _temp1551.tag= Cyc_Absyn_NonNullable_ps;
! _temp1551.f1= _temp1538; _temp1551;}); _temp1550;}); goto _LL1515; _LL1521: ps=(
! void*) Cyc_Absyn_TaggedArray_ps; goto _LL1515; _LL1523: ps=( void*) Cyc_Absyn_TaggedArray_ps;
! goto _LL1515; _LL1515:;}{ void* tm=( void*)({ struct Cyc_Absyn_Pointer_mod_struct*
! _temp1554=( struct Cyc_Absyn_Pointer_mod_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct));
! _temp1554[ 0]=({ struct Cyc_Absyn_Pointer_mod_struct _temp1555; _temp1555.tag=
! Cyc_Absyn_Pointer_mod; _temp1555.f1=( void*) ps; _temp1555.f2=( void*) _temp1459;
! _temp1555.f3= tq; _temp1555;}); _temp1554;}); return({ struct _tuple4 _temp1552;
! _temp1552.f1= _temp1511; _temp1552.f2= _temp1509; _temp1552.f3=({ struct Cyc_List_List*
! _temp1553=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1553->hd=( void*) tm; _temp1553->tl= _temp1507; _temp1553;}); _temp1552;});}}}
! _LL1438: if( ! Cyc_Absynpp_print_all_tvars){ if( _temp1477 ==  0? 1: Cyc_Absynpp_exists_temp_tvar_in_effect((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp1477))->v)){ _temp1477= 0;
! _temp1479= 0;}} else{ if( Cyc_Absynpp_rewrite_temp_tvars){(( void(*)( void(* f)(
  struct Cyc_Absyn_Tvar*), struct Cyc_List_List* x)) Cyc_List_iter)( Cyc_Tcutil_rewrite_temp_tvar,
! _temp1479);}}{ struct Cyc_List_List* _temp1558; void* _temp1560; struct Cyc_Absyn_Tqual
! _temp1562; struct _tuple4 _temp1556= Cyc_Absynpp_to_tms( Cyc_Absyn_empty_tqual(),
! _temp1475); _LL1563: _temp1562= _temp1556.f1; goto _LL1561; _LL1561: _temp1560=
! _temp1556.f2; goto _LL1559; _LL1559: _temp1558= _temp1556.f3; goto _LL1557;
! _LL1557: { struct Cyc_List_List* tms= _temp1558; if( _temp1465 !=  0? ! Cyc_Absynpp_to_VC:
! 0){ tms=({ struct Cyc_List_List* _temp1564=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1564->hd=( void*)(( void*)({ struct Cyc_Absyn_Attributes_mod_struct*
! _temp1565=( struct Cyc_Absyn_Attributes_mod_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_Attributes_mod_struct)); _temp1565[ 0]=({ struct Cyc_Absyn_Attributes_mod_struct
! _temp1566; _temp1566.tag= Cyc_Absyn_Attributes_mod; _temp1566.f1= 0; _temp1566.f2=
! _temp1465; _temp1566;}); _temp1565;})); _temp1564->tl= tms; _temp1564;});} tms=({
! struct Cyc_List_List* _temp1567=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1567->hd=( void*)(( void*)({ struct Cyc_Absyn_Function_mod_struct*
! _temp1568=( struct Cyc_Absyn_Function_mod_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct));
! _temp1568[ 0]=({ struct Cyc_Absyn_Function_mod_struct _temp1569; _temp1569.tag=
! Cyc_Absyn_Function_mod; _temp1569.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct*
! _temp1570=( struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp1570[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp1571; _temp1571.tag= Cyc_Absyn_WithTypes;
! _temp1571.f1= _temp1473; _temp1571.f2= _temp1471; _temp1571.f3= _temp1469;
! _temp1571.f4= _temp1477; _temp1571.f5= _temp1467; _temp1571;}); _temp1570;}));
! _temp1569;}); _temp1568;})); _temp1567->tl= tms; _temp1567;}); if( Cyc_Absynpp_to_VC){
! for( 0; _temp1465 !=  0; _temp1465=(( struct Cyc_List_List*) _check_null(
! _temp1465))->tl){ void* _temp1572=( void*)(( struct Cyc_List_List*) _check_null(
! _temp1465))->hd; _LL1574: if( _temp1572 == ( void*) Cyc_Absyn_Stdcall_att){ goto
! _LL1575;} else{ goto _LL1576;} _LL1576: if( _temp1572 == ( void*) Cyc_Absyn_Cdecl_att){
! goto _LL1577;} else{ goto _LL1578;} _LL1578: if( _temp1572 == ( void*) Cyc_Absyn_Fastcall_att){
! goto _LL1579;} else{ goto _LL1580;} _LL1580: goto _LL1581; _LL1575: goto _LL1577;
! _LL1577: goto _LL1579; _LL1579: tms=({ struct Cyc_List_List* _temp1582=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1582->hd=( void*)((
! void*)({ struct Cyc_Absyn_Attributes_mod_struct* _temp1583=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp1583[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp1584; _temp1584.tag= Cyc_Absyn_Attributes_mod;
! _temp1584.f1= 0; _temp1584.f2=({ struct Cyc_List_List* _temp1585=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1585->hd=( void*)(( void*)((
! struct Cyc_List_List*) _check_null( _temp1465))->hd); _temp1585->tl= 0;
! _temp1585;}); _temp1584;}); _temp1583;})); _temp1582->tl= tms; _temp1582;});
! goto AfterAtts; _LL1581: goto _LL1573; _LL1573:;}} AfterAtts: if( _temp1479 != 
! 0){ tms=({ struct Cyc_List_List* _temp1586=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1586->hd=( void*)(( void*)({ struct Cyc_Absyn_TypeParams_mod_struct*
! _temp1587=( struct Cyc_Absyn_TypeParams_mod_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_TypeParams_mod_struct)); _temp1587[ 0]=({ struct Cyc_Absyn_TypeParams_mod_struct
! _temp1588; _temp1588.tag= Cyc_Absyn_TypeParams_mod; _temp1588.f1= _temp1479;
! _temp1588.f2= 0; _temp1588.f3= 1; _temp1588;}); _temp1587;})); _temp1586->tl=
! tms; _temp1586;});} return({ struct _tuple4 _temp1589; _temp1589.f1= _temp1562;
! _temp1589.f2= _temp1560; _temp1589.f3= tms; _temp1589;});}} _LL1440: if(
! _temp1483 ==  0){ return({ struct _tuple4 _temp1590; _temp1590.f1= tq; _temp1590.f2=
! t; _temp1590.f3= 0; _temp1590;});} else{ return Cyc_Absynpp_to_tms( tq,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1483))->v);} _LL1442: if( _temp1487 == 
! 0? 1: ! Cyc_Absynpp_expand_typedefs){ return({ struct _tuple4 _temp1591;
! _temp1591.f1= tq; _temp1591.f2= t; _temp1591.f3= 0; _temp1591;});} else{ return
! Cyc_Absynpp_to_tms( tq,( void*)(( struct Cyc_Core_Opt*) _check_null( _temp1487))->v);}
! _LL1444: return({ struct _tuple4 _temp1592; _temp1592.f1= tq; _temp1592.f2= t;
! _temp1592.f3= 0; _temp1592;}); _LL1432:;} struct Cyc_PP_Doc* Cyc_Absynpp_tqtd2doc(
  struct Cyc_Absyn_Tqual tq, void* t, struct Cyc_Core_Opt* dopt){ struct Cyc_List_List*
! _temp1595; void* _temp1597; struct Cyc_Absyn_Tqual _temp1599; struct _tuple4
! _temp1593= Cyc_Absynpp_to_tms( tq, t); _LL1600: _temp1599= _temp1593.f1; goto
! _LL1598; _LL1598: _temp1597= _temp1593.f2; goto _LL1596; _LL1596: _temp1595=
! _temp1593.f3; goto _LL1594; _LL1594: _temp1595= Cyc_List_imp_rev( _temp1595);
! if( _temp1595 ==  0? dopt ==  0: 0){ return({ struct Cyc_PP_Doc* _temp1601[ 2u];
! _temp1601[ 1u]= Cyc_Absynpp_ntyp2doc( _temp1597); _temp1601[ 0u]= Cyc_Absynpp_tqual2doc(
! _temp1599); Cyc_PP_cat( _tag_arr( _temp1601, sizeof( struct Cyc_PP_Doc*), 2u));});}
! else{ return({ struct Cyc_PP_Doc* _temp1602[ 4u]; _temp1602[ 3u]= Cyc_Absynpp_dtms2doc(
  dopt ==  0? Cyc_PP_nil_doc():( struct Cyc_PP_Doc*)(( struct Cyc_Core_Opt*)
! _check_null( dopt))->v, _temp1595); _temp1602[ 2u]= Cyc_PP_text( _tag_arr(" ",
! sizeof( unsigned char), 2u)); _temp1602[ 1u]= Cyc_Absynpp_ntyp2doc( _temp1597);
! _temp1602[ 0u]= Cyc_Absynpp_tqual2doc( _temp1599); Cyc_PP_cat( _tag_arr(
! _temp1602, sizeof( struct Cyc_PP_Doc*), 4u));});}} struct Cyc_PP_Doc* Cyc_Absynpp_structfield2doc(
  struct Cyc_Absyn_Structfield* f){ if( f->width !=  0){ return({ struct Cyc_PP_Doc*
! _temp1603[ 5u]; _temp1603[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1603[ 3u]= Cyc_Absynpp_atts2doc( f->attributes); _temp1603[ 2u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( f->width)); _temp1603[ 1u]= Cyc_PP_text(
! _tag_arr(":", sizeof( unsigned char), 2u)); _temp1603[ 0u]= Cyc_Absynpp_tqtd2doc(
! f->tq,( void*) f->type,({ struct Cyc_Core_Opt* _temp1604=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1604->v=( void*) Cyc_PP_textptr(
! f->name); _temp1604;})); Cyc_PP_cat( _tag_arr( _temp1603, sizeof( struct Cyc_PP_Doc*),
! 5u));});} else{ return({ struct Cyc_PP_Doc* _temp1605[ 3u]; _temp1605[ 2u]= Cyc_PP_text(
! _tag_arr(";", sizeof( unsigned char), 2u)); _temp1605[ 1u]= Cyc_Absynpp_atts2doc(
! f->attributes); _temp1605[ 0u]= Cyc_Absynpp_tqtd2doc( f->tq,( void*) f->type,({
! struct Cyc_Core_Opt* _temp1606=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1606->v=( void*) Cyc_PP_textptr( f->name); _temp1606;}));
! Cyc_PP_cat( _tag_arr( _temp1605, sizeof( struct Cyc_PP_Doc*), 3u));});}} struct
  Cyc_PP_Doc* Cyc_Absynpp_structfields2doc( struct Cyc_List_List* fields){ return((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Structfield*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_structfield2doc,
  _tag_arr("", sizeof( unsigned char), 1u), fields);} struct Cyc_PP_Doc* Cyc_Absynpp_tunionfield2doc(
! struct Cyc_Absyn_Tunionfield* f){ return({ struct Cyc_PP_Doc* _temp1607[ 4u];
! _temp1607[ 3u]= f->typs ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_args2doc( f->typs);
! _temp1607[ 2u]= f->tvs ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_ktvars2doc( f->tvs);
! _temp1607[ 1u]= Cyc_Absynpp_typedef_name2doc( f->name); _temp1607[ 0u]= Cyc_Absynpp_scope2doc((
! void*) f->sc); Cyc_PP_cat( _tag_arr( _temp1607, sizeof( struct Cyc_PP_Doc*), 4u));});}
  struct Cyc_PP_Doc* Cyc_Absynpp_tunionfields2doc( struct Cyc_List_List* fields){
  return(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Tunionfield*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_tunionfield2doc,
--- 2309,2774 ----
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Vardecl*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseq)( Cyc_Absynpp_id2doc,
  _tag_arr(",", sizeof( unsigned char), 2u), vds);} struct Cyc_PP_Doc* Cyc_Absynpp_decl2doc(
! struct Cyc_Absyn_Decl* d){ struct Cyc_PP_Doc* s;{ void* _temp1257=( void*) d->r;
! struct Cyc_Absyn_Fndecl* _temp1283; struct Cyc_Absyn_Structdecl* _temp1285;
! struct Cyc_Absyn_Uniondecl* _temp1287; struct Cyc_Absyn_Vardecl* _temp1289;
! struct Cyc_Absyn_Vardecl _temp1291; struct Cyc_List_List* _temp1292; struct Cyc_Absyn_Exp*
! _temp1294; void* _temp1296; struct Cyc_Absyn_Tqual _temp1298; struct _tuple0*
! _temp1300; void* _temp1302; struct Cyc_Absyn_Tuniondecl* _temp1304; struct Cyc_Absyn_Tuniondecl
! _temp1306; int _temp1307; struct Cyc_Core_Opt* _temp1309; struct Cyc_List_List*
! _temp1311; struct _tuple0* _temp1313; void* _temp1315; struct Cyc_Absyn_Exp*
! _temp1317; struct Cyc_Absyn_Pat* _temp1319; struct Cyc_List_List* _temp1321;
! struct Cyc_Absyn_Enumdecl* _temp1323; struct Cyc_Absyn_Enumdecl _temp1325;
! struct Cyc_Core_Opt* _temp1326; struct _tuple0* _temp1328; void* _temp1330;
! struct Cyc_Absyn_Typedefdecl* _temp1332; struct Cyc_List_List* _temp1334; struct
! _tagged_arr* _temp1336; struct Cyc_List_List* _temp1338; struct _tuple0*
! _temp1340; struct Cyc_List_List* _temp1342; _LL1259: if(*(( int*) _temp1257) == 
! Cyc_Absyn_Fn_d){ _LL1284: _temp1283=(( struct Cyc_Absyn_Fn_d_struct*) _temp1257)->f1;
! goto _LL1260;} else{ goto _LL1261;} _LL1261: if(*(( int*) _temp1257) ==  Cyc_Absyn_Struct_d){
! _LL1286: _temp1285=(( struct Cyc_Absyn_Struct_d_struct*) _temp1257)->f1; goto
! _LL1262;} else{ goto _LL1263;} _LL1263: if(*(( int*) _temp1257) ==  Cyc_Absyn_Union_d){
! _LL1288: _temp1287=(( struct Cyc_Absyn_Union_d_struct*) _temp1257)->f1; goto
! _LL1264;} else{ goto _LL1265;} _LL1265: if(*(( int*) _temp1257) ==  Cyc_Absyn_Var_d){
! _LL1290: _temp1289=(( struct Cyc_Absyn_Var_d_struct*) _temp1257)->f1; _temp1291=*
! _temp1289; _LL1303: _temp1302=( void*) _temp1291.sc; goto _LL1301; _LL1301:
! _temp1300= _temp1291.name; goto _LL1299; _LL1299: _temp1298= _temp1291.tq; goto
! _LL1297; _LL1297: _temp1296=( void*) _temp1291.type; goto _LL1295; _LL1295:
! _temp1294= _temp1291.initializer; goto _LL1293; _LL1293: _temp1292= _temp1291.attributes;
! goto _LL1266;} else{ goto _LL1267;} _LL1267: if(*(( int*) _temp1257) ==  Cyc_Absyn_Tunion_d){
! _LL1305: _temp1304=(( struct Cyc_Absyn_Tunion_d_struct*) _temp1257)->f1;
! _temp1306=* _temp1304; _LL1316: _temp1315=( void*) _temp1306.sc; goto _LL1314;
! _LL1314: _temp1313= _temp1306.name; goto _LL1312; _LL1312: _temp1311= _temp1306.tvs;
! goto _LL1310; _LL1310: _temp1309= _temp1306.fields; goto _LL1308; _LL1308:
! _temp1307= _temp1306.is_xtunion; goto _LL1268;} else{ goto _LL1269;} _LL1269:
! if(*(( int*) _temp1257) ==  Cyc_Absyn_Let_d){ _LL1320: _temp1319=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1257)->f1; goto _LL1318; _LL1318: _temp1317=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1257)->f4; goto _LL1270;} else{ goto _LL1271;} _LL1271: if(*(( int*)
! _temp1257) ==  Cyc_Absyn_Letv_d){ _LL1322: _temp1321=(( struct Cyc_Absyn_Letv_d_struct*)
! _temp1257)->f1; goto _LL1272;} else{ goto _LL1273;} _LL1273: if(*(( int*)
! _temp1257) ==  Cyc_Absyn_Enum_d){ _LL1324: _temp1323=(( struct Cyc_Absyn_Enum_d_struct*)
! _temp1257)->f1; _temp1325=* _temp1323; _LL1331: _temp1330=( void*) _temp1325.sc;
! goto _LL1329; _LL1329: _temp1328= _temp1325.name; goto _LL1327; _LL1327:
! _temp1326= _temp1325.fields; goto _LL1274;} else{ goto _LL1275;} _LL1275: if(*((
! int*) _temp1257) ==  Cyc_Absyn_Typedef_d){ _LL1333: _temp1332=(( struct Cyc_Absyn_Typedef_d_struct*)
! _temp1257)->f1; goto _LL1276;} else{ goto _LL1277;} _LL1277: if(*(( int*)
! _temp1257) ==  Cyc_Absyn_Namespace_d){ _LL1337: _temp1336=(( struct Cyc_Absyn_Namespace_d_struct*)
! _temp1257)->f1; goto _LL1335; _LL1335: _temp1334=(( struct Cyc_Absyn_Namespace_d_struct*)
! _temp1257)->f2; goto _LL1278;} else{ goto _LL1279;} _LL1279: if(*(( int*)
! _temp1257) ==  Cyc_Absyn_Using_d){ _LL1341: _temp1340=(( struct Cyc_Absyn_Using_d_struct*)
! _temp1257)->f1; goto _LL1339; _LL1339: _temp1338=(( struct Cyc_Absyn_Using_d_struct*)
! _temp1257)->f2; goto _LL1280;} else{ goto _LL1281;} _LL1281: if(*(( int*)
! _temp1257) ==  Cyc_Absyn_ExternC_d){ _LL1343: _temp1342=(( struct Cyc_Absyn_ExternC_d_struct*)
! _temp1257)->f1; goto _LL1282;} else{ goto _LL1258;} _LL1260: { void* t=( void*)({
! struct Cyc_Absyn_FnType_struct* _temp1351=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1351[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1352; _temp1352.tag= Cyc_Absyn_FnType; _temp1352.f1=({ struct Cyc_Absyn_FnInfo
! _temp1353; _temp1353.tvars= _temp1283->tvs; _temp1353.effect= _temp1283->effect;
! _temp1353.ret_typ=( void*)(( void*) _temp1283->ret_type); _temp1353.args=((
  struct Cyc_List_List*(*)( struct _tuple1*(* f)( struct _tuple3*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Absynpp_arg_mk_opt, _temp1283->args); _temp1353.c_varargs=
! _temp1283->c_varargs; _temp1353.cyc_varargs= _temp1283->cyc_varargs; _temp1353.rgn_po=
! _temp1283->rgn_po; _temp1353.attributes= 0; _temp1353;}); _temp1352;});
! _temp1351;}); struct Cyc_PP_Doc* attsdoc= Cyc_Absynpp_atts2doc( _temp1283->attributes);
! struct Cyc_PP_Doc* inlinedoc; if( _temp1283->is_inline){ if( Cyc_Absynpp_to_VC){
  inlinedoc= Cyc_PP_text( _tag_arr("__inline ", sizeof( unsigned char), 10u));}
  else{ inlinedoc= Cyc_PP_text( _tag_arr("inline ", sizeof( unsigned char), 8u));}}
  else{ inlinedoc= Cyc_PP_nil_doc();}{ struct Cyc_PP_Doc* scopedoc= Cyc_Absynpp_scope2doc((
! void*) _temp1283->sc); struct Cyc_PP_Doc* beforenamedoc= Cyc_Absynpp_to_VC? Cyc_Absynpp_callconv2doc(
! _temp1283->attributes): attsdoc; struct Cyc_PP_Doc* namedoc= Cyc_Absynpp_typedef_name2doc(
! _temp1283->name); struct Cyc_PP_Doc* tqtddoc= Cyc_Absynpp_tqtd2doc(({ struct Cyc_Absyn_Tqual
! _temp1348; _temp1348.q_const= 0; _temp1348.q_volatile= 0; _temp1348.q_restrict=
! 0; _temp1348;}), t,({ struct Cyc_Core_Opt* _temp1349=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1349->v=( void*)({ struct Cyc_PP_Doc*
! _temp1350[ 2u]; _temp1350[ 1u]= namedoc; _temp1350[ 0u]= beforenamedoc; Cyc_PP_cat(
! _tag_arr( _temp1350, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1349;})); struct
! Cyc_PP_Doc* bodydoc=({ struct Cyc_PP_Doc* _temp1346[ 4u]; _temp1346[ 3u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1346[ 2u]= Cyc_PP_line_doc();
! _temp1346[ 1u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc* _temp1347[ 2u]; _temp1347[
! 1u]= Cyc_Absynpp_stmt2doc( _temp1283->body); _temp1347[ 0u]= Cyc_PP_line_doc();
! Cyc_PP_cat( _tag_arr( _temp1347, sizeof( struct Cyc_PP_Doc*), 2u));}));
! _temp1346[ 0u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u)); Cyc_PP_cat(
! _tag_arr( _temp1346, sizeof( struct Cyc_PP_Doc*), 4u));}); s=({ struct Cyc_PP_Doc*
! _temp1344[ 4u]; _temp1344[ 3u]= bodydoc; _temp1344[ 2u]= tqtddoc; _temp1344[ 1u]=
! scopedoc; _temp1344[ 0u]= inlinedoc; Cyc_PP_cat( _tag_arr( _temp1344, sizeof(
  struct Cyc_PP_Doc*), 4u));}); if( Cyc_Absynpp_to_VC){ s=({ struct Cyc_PP_Doc*
! _temp1345[ 2u]; _temp1345[ 1u]= s; _temp1345[ 0u]= attsdoc; Cyc_PP_cat( _tag_arr(
! _temp1345, sizeof( struct Cyc_PP_Doc*), 2u));});} goto _LL1258;}} _LL1262: if(
! _temp1285->fields ==  0){ s=({ struct Cyc_PP_Doc* _temp1354[ 5u]; _temp1354[ 4u]=
! Cyc_PP_text( _tag_arr(";", sizeof( unsigned char), 2u)); _temp1354[ 3u]= Cyc_Absynpp_ktvars2doc(
! _temp1285->tvs); _temp1354[ 2u]= _temp1285->name ==  0? Cyc_PP_text( _tag_arr("",
  sizeof( unsigned char), 1u)): Cyc_Absynpp_typedef_name2doc(( struct _tuple0*)((
! struct Cyc_Core_Opt*) _check_null( _temp1285->name))->v); _temp1354[ 1u]= Cyc_PP_text(
! _tag_arr("struct ", sizeof( unsigned char), 8u)); _temp1354[ 0u]= Cyc_Absynpp_scope2doc((
! void*) _temp1285->sc); Cyc_PP_cat( _tag_arr( _temp1354, sizeof( struct Cyc_PP_Doc*),
! 5u));});} else{ s=({ struct Cyc_PP_Doc* _temp1355[ 10u]; _temp1355[ 9u]= Cyc_PP_text(
! _tag_arr(";", sizeof( unsigned char), 2u)); _temp1355[ 8u]= Cyc_Absynpp_atts2doc(
! _temp1285->attributes); _temp1355[ 7u]= Cyc_PP_text( _tag_arr("}", sizeof(
! unsigned char), 2u)); _temp1355[ 6u]= Cyc_PP_line_doc(); _temp1355[ 5u]= Cyc_PP_nest(
! 2,({ struct Cyc_PP_Doc* _temp1356[ 2u]; _temp1356[ 1u]= Cyc_Absynpp_structfields2doc((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1285->fields))->v);
! _temp1356[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1356, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1355[ 4u]= Cyc_PP_text( _tag_arr(" {",
! sizeof( unsigned char), 3u)); _temp1355[ 3u]= Cyc_Absynpp_ktvars2doc( _temp1285->tvs);
! _temp1355[ 2u]= _temp1285->name ==  0? Cyc_PP_text( _tag_arr("", sizeof(
  unsigned char), 1u)): Cyc_Absynpp_typedef_name2doc(( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( _temp1285->name))->v); _temp1355[ 1u]= Cyc_PP_text(
! _tag_arr("struct ", sizeof( unsigned char), 8u)); _temp1355[ 0u]= Cyc_Absynpp_scope2doc((
! void*) _temp1285->sc); Cyc_PP_cat( _tag_arr( _temp1355, sizeof( struct Cyc_PP_Doc*),
! 10u));});} goto _LL1258; _LL1264: if( _temp1287->fields ==  0){ s=({ struct Cyc_PP_Doc*
! _temp1357[ 5u]; _temp1357[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1357[ 3u]= Cyc_Absynpp_tvars2doc( _temp1287->tvs); _temp1357[ 2u]=
! _temp1287->name ==  0? Cyc_PP_text( _tag_arr("", sizeof( unsigned char), 1u)):
  Cyc_Absynpp_qvar2doc(( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp1287->name))->v); _temp1357[ 1u]= Cyc_PP_text( _tag_arr("union ", sizeof(
! unsigned char), 7u)); _temp1357[ 0u]= Cyc_Absynpp_scope2doc(( void*) _temp1287->sc);
! Cyc_PP_cat( _tag_arr( _temp1357, sizeof( struct Cyc_PP_Doc*), 5u));});} else{ s=({
! struct Cyc_PP_Doc* _temp1358[ 10u]; _temp1358[ 9u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1358[ 8u]= Cyc_Absynpp_atts2doc( _temp1287->attributes);
! _temp1358[ 7u]= Cyc_PP_text( _tag_arr("}", sizeof( unsigned char), 2u));
! _temp1358[ 6u]= Cyc_PP_line_doc(); _temp1358[ 5u]= Cyc_PP_nest( 2,({ struct Cyc_PP_Doc*
! _temp1359[ 2u]; _temp1359[ 1u]= Cyc_Absynpp_structfields2doc(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp1287->fields))->v); _temp1359[ 0u]= Cyc_PP_line_doc();
! Cyc_PP_cat( _tag_arr( _temp1359, sizeof( struct Cyc_PP_Doc*), 2u));}));
! _temp1358[ 4u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u));
! _temp1358[ 3u]= Cyc_Absynpp_tvars2doc( _temp1287->tvs); _temp1358[ 2u]=
! _temp1287->name ==  0? Cyc_PP_text( _tag_arr("", sizeof( unsigned char), 1u)):
  Cyc_Absynpp_qvar2doc(( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp1287->name))->v); _temp1358[ 1u]= Cyc_PP_text( _tag_arr("union ", sizeof(
! unsigned char), 7u)); _temp1358[ 0u]= Cyc_Absynpp_scope2doc(( void*) _temp1287->sc);
! Cyc_PP_cat( _tag_arr( _temp1358, sizeof( struct Cyc_PP_Doc*), 10u));});} goto
! _LL1258; _LL1266: { struct Cyc_PP_Doc* sn= Cyc_Absynpp_typedef_name2doc(
! _temp1300); struct Cyc_PP_Doc* attsdoc= Cyc_Absynpp_atts2doc( _temp1292); struct
  Cyc_PP_Doc* beforenamedoc; if( ! Cyc_Absynpp_to_VC){ beforenamedoc= attsdoc;}
! else{ void* _temp1360= Cyc_Tcutil_compress( _temp1296); struct Cyc_Absyn_FnInfo
! _temp1366; struct Cyc_List_List* _temp1368; _LL1362: if(( unsigned int)
! _temp1360 >  4u?*(( int*) _temp1360) ==  Cyc_Absyn_FnType: 0){ _LL1367:
! _temp1366=(( struct Cyc_Absyn_FnType_struct*) _temp1360)->f1; _LL1369: _temp1368=
! _temp1366.attributes; goto _LL1363;} else{ goto _LL1364;} _LL1364: goto _LL1365;
! _LL1363: beforenamedoc= Cyc_Absynpp_callconv2doc( _temp1368); goto _LL1361;
! _LL1365: beforenamedoc= Cyc_PP_nil_doc(); goto _LL1361; _LL1361:;} s=({ struct
! Cyc_PP_Doc* _temp1370[ 5u]; _temp1370[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof(
! unsigned char), 2u)); _temp1370[ 3u]= _temp1294 ==  0? Cyc_PP_text( _tag_arr("",
! sizeof( unsigned char), 1u)):({ struct Cyc_PP_Doc* _temp1373[ 2u]; _temp1373[ 1u]=
! Cyc_Absynpp_exp2doc(( struct Cyc_Absyn_Exp*) _check_null( _temp1294)); _temp1373[
  0u]= Cyc_PP_text( _tag_arr(" = ", sizeof( unsigned char), 4u)); Cyc_PP_cat(
! _tag_arr( _temp1373, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1370[ 2u]= Cyc_Absynpp_tqtd2doc(
! _temp1298, _temp1296,({ struct Cyc_Core_Opt* _temp1371=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1371->v=( void*)({ struct Cyc_PP_Doc*
! _temp1372[ 2u]; _temp1372[ 1u]= sn; _temp1372[ 0u]= beforenamedoc; Cyc_PP_cat(
! _tag_arr( _temp1372, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1371;}));
! _temp1370[ 1u]= Cyc_Absynpp_scope2doc( _temp1302); _temp1370[ 0u]= Cyc_Absynpp_to_VC?
! attsdoc: Cyc_PP_nil_doc(); Cyc_PP_cat( _tag_arr( _temp1370, sizeof( struct Cyc_PP_Doc*),
! 5u));}); goto _LL1258;} _LL1268: if( _temp1309 ==  0){ s=({ struct Cyc_PP_Doc*
! _temp1374[ 5u]; _temp1374[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1374[ 3u]= Cyc_Absynpp_ktvars2doc( _temp1311); _temp1374[ 2u]=
! _temp1307? Cyc_Absynpp_qvar2doc( _temp1313): Cyc_Absynpp_typedef_name2doc(
! _temp1313); _temp1374[ 1u]= _temp1307? Cyc_PP_text( _tag_arr("xtunion ", sizeof(
  unsigned char), 9u)): Cyc_PP_text( _tag_arr("tunion ", sizeof( unsigned char), 8u));
! _temp1374[ 0u]= Cyc_Absynpp_scope2doc( _temp1315); Cyc_PP_cat( _tag_arr(
! _temp1374, sizeof( struct Cyc_PP_Doc*), 5u));});} else{ s=({ struct Cyc_PP_Doc*
! _temp1375[ 8u]; _temp1375[ 7u]= Cyc_PP_text( _tag_arr("};", sizeof(
! unsigned char), 3u)); _temp1375[ 6u]= Cyc_PP_line_doc(); _temp1375[ 5u]= Cyc_PP_nest(
! 2,({ struct Cyc_PP_Doc* _temp1376[ 2u]; _temp1376[ 1u]= Cyc_Absynpp_tunionfields2doc((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1309))->v);
! _temp1376[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1376, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1375[ 4u]= Cyc_PP_text( _tag_arr(" {",
! sizeof( unsigned char), 3u)); _temp1375[ 3u]= Cyc_Absynpp_ktvars2doc( _temp1311);
! _temp1375[ 2u]= _temp1307? Cyc_Absynpp_qvar2doc( _temp1313): Cyc_Absynpp_typedef_name2doc(
! _temp1313); _temp1375[ 1u]= _temp1307? Cyc_PP_text( _tag_arr("xtunion ", sizeof(
  unsigned char), 9u)): Cyc_PP_text( _tag_arr("tunion ", sizeof( unsigned char), 8u));
! _temp1375[ 0u]= Cyc_Absynpp_scope2doc( _temp1315); Cyc_PP_cat( _tag_arr(
! _temp1375, sizeof( struct Cyc_PP_Doc*), 8u));});} goto _LL1258; _LL1270: s=({
! struct Cyc_PP_Doc* _temp1377[ 5u]; _temp1377[ 4u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1377[ 3u]= Cyc_Absynpp_exp2doc( _temp1317);
! _temp1377[ 2u]= Cyc_PP_text( _tag_arr(" = ", sizeof( unsigned char), 4u));
! _temp1377[ 1u]= Cyc_Absynpp_pat2doc( _temp1319); _temp1377[ 0u]= Cyc_PP_text(
! _tag_arr("let ", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1377,
! sizeof( struct Cyc_PP_Doc*), 5u));}); goto _LL1258; _LL1272: s=({ struct Cyc_PP_Doc*
! _temp1378[ 3u]; _temp1378[ 2u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1378[ 1u]= Cyc_Absynpp_ids2doc( _temp1321); _temp1378[ 0u]= Cyc_PP_text(
! _tag_arr("let ", sizeof( unsigned char), 5u)); Cyc_PP_cat( _tag_arr( _temp1378,
! sizeof( struct Cyc_PP_Doc*), 3u));}); goto _LL1258; _LL1274: if( _temp1326 ==  0){
! s=({ struct Cyc_PP_Doc* _temp1379[ 4u]; _temp1379[ 3u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1379[ 2u]= Cyc_Absynpp_typedef_name2doc(
! _temp1328); _temp1379[ 1u]= Cyc_PP_text( _tag_arr("enum ", sizeof( unsigned char),
! 6u)); _temp1379[ 0u]= Cyc_Absynpp_scope2doc( _temp1330); Cyc_PP_cat( _tag_arr(
! _temp1379, sizeof( struct Cyc_PP_Doc*), 4u));});} else{ s=({ struct Cyc_PP_Doc*
! _temp1380[ 7u]; _temp1380[ 6u]= Cyc_PP_text( _tag_arr("};", sizeof(
! unsigned char), 3u)); _temp1380[ 5u]= Cyc_PP_line_doc(); _temp1380[ 4u]= Cyc_PP_nest(
! 2,({ struct Cyc_PP_Doc* _temp1381[ 2u]; _temp1381[ 1u]= Cyc_Absynpp_enumfields2doc((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1326))->v);
! _temp1381[ 0u]= Cyc_PP_line_doc(); Cyc_PP_cat( _tag_arr( _temp1381, sizeof(
! struct Cyc_PP_Doc*), 2u));})); _temp1380[ 3u]= Cyc_PP_text( _tag_arr(" {",
! sizeof( unsigned char), 3u)); _temp1380[ 2u]= Cyc_Absynpp_qvar2doc( _temp1328);
! _temp1380[ 1u]= Cyc_PP_text( _tag_arr("enum ", sizeof( unsigned char), 6u));
! _temp1380[ 0u]= Cyc_Absynpp_scope2doc( _temp1330); Cyc_PP_cat( _tag_arr(
! _temp1380, sizeof( struct Cyc_PP_Doc*), 7u));});} goto _LL1258; _LL1276: s=({
! struct Cyc_PP_Doc* _temp1382[ 3u]; _temp1382[ 2u]= Cyc_PP_text( _tag_arr(";",
! sizeof( unsigned char), 2u)); _temp1382[ 1u]= Cyc_Absynpp_tqtd2doc(({ struct Cyc_Absyn_Tqual
! _temp1383; _temp1383.q_const= 0; _temp1383.q_volatile= 0; _temp1383.q_restrict=
! 0; _temp1383;}),( void*) _temp1332->defn,({ struct Cyc_Core_Opt* _temp1384=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1384->v=(
! void*)({ struct Cyc_PP_Doc* _temp1385[ 2u]; _temp1385[ 1u]= Cyc_Absynpp_tvars2doc(
! _temp1332->tvs); _temp1385[ 0u]= Cyc_Absynpp_typedef_name2doc( _temp1332->name);
! Cyc_PP_cat( _tag_arr( _temp1385, sizeof( struct Cyc_PP_Doc*), 2u));}); _temp1384;}));
! _temp1382[ 0u]= Cyc_PP_text( _tag_arr("typedef ", sizeof( unsigned char), 9u));
! Cyc_PP_cat( _tag_arr( _temp1382, sizeof( struct Cyc_PP_Doc*), 3u));}); goto
! _LL1258; _LL1278: if( Cyc_Absynpp_use_curr_namespace){ Cyc_Absynpp_curr_namespace_add(
! _temp1336);} s=({ struct Cyc_PP_Doc* _temp1386[ 7u]; _temp1386[ 6u]= Cyc_PP_text(
! _tag_arr("}", sizeof( unsigned char), 2u)); _temp1386[ 5u]= Cyc_PP_line_doc();
! _temp1386[ 4u]=(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1334); _temp1386[ 3u]= Cyc_PP_line_doc();
! _temp1386[ 2u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u));
! _temp1386[ 1u]= Cyc_PP_textptr( _temp1336); _temp1386[ 0u]= Cyc_PP_text(
  _tag_arr("namespace ", sizeof( unsigned char), 11u)); Cyc_PP_cat( _tag_arr(
! _temp1386, sizeof( struct Cyc_PP_Doc*), 7u));}); if( Cyc_Absynpp_use_curr_namespace){
! Cyc_Absynpp_curr_namespace_drop();} goto _LL1258; _LL1280: if( Cyc_Absynpp_print_using_stmts){
! s=({ struct Cyc_PP_Doc* _temp1387[ 7u]; _temp1387[ 6u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1387[ 5u]= Cyc_PP_line_doc(); _temp1387[ 4u]=((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*), struct
  _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1338); _temp1387[ 3u]= Cyc_PP_line_doc();
! _temp1387[ 2u]= Cyc_PP_text( _tag_arr(" {", sizeof( unsigned char), 3u));
! _temp1387[ 1u]= Cyc_Absynpp_qvar2doc( _temp1340); _temp1387[ 0u]= Cyc_PP_text(
! _tag_arr("using ", sizeof( unsigned char), 7u)); Cyc_PP_cat( _tag_arr( _temp1387,
! sizeof( struct Cyc_PP_Doc*), 7u));});} else{ s=({ struct Cyc_PP_Doc* _temp1388[
! 7u]; _temp1388[ 6u]= Cyc_PP_text( _tag_arr("/* } */", sizeof( unsigned char), 8u));
! _temp1388[ 5u]= Cyc_PP_line_doc(); _temp1388[ 4u]=(( struct Cyc_PP_Doc*(*)(
  struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*), struct _tagged_arr sep,
  struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc, _tag_arr("",
! sizeof( unsigned char), 1u), _temp1338); _temp1388[ 3u]= Cyc_PP_line_doc();
! _temp1388[ 2u]= Cyc_PP_text( _tag_arr(" { */", sizeof( unsigned char), 6u));
! _temp1388[ 1u]= Cyc_Absynpp_qvar2doc( _temp1340); _temp1388[ 0u]= Cyc_PP_text(
  _tag_arr("/* using ", sizeof( unsigned char), 10u)); Cyc_PP_cat( _tag_arr(
! _temp1388, sizeof( struct Cyc_PP_Doc*), 7u));});} goto _LL1258; _LL1282: if( Cyc_Absynpp_print_externC_stmts){
! s=({ struct Cyc_PP_Doc* _temp1389[ 5u]; _temp1389[ 4u]= Cyc_PP_text( _tag_arr("}",
! sizeof( unsigned char), 2u)); _temp1389[ 3u]= Cyc_PP_line_doc(); _temp1389[ 2u]=((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*), struct
  _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1342); _temp1389[ 1u]= Cyc_PP_line_doc();
! _temp1389[ 0u]= Cyc_PP_text( _tag_arr("extern \"C\" {", sizeof( unsigned char),
! 13u)); Cyc_PP_cat( _tag_arr( _temp1389, sizeof( struct Cyc_PP_Doc*), 5u));});}
! else{ s=({ struct Cyc_PP_Doc* _temp1390[ 5u]; _temp1390[ 4u]= Cyc_PP_text(
! _tag_arr("/* } */", sizeof( unsigned char), 8u)); _temp1390[ 3u]= Cyc_PP_line_doc();
! _temp1390[ 2u]=(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Decl*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_decl2doc,
! _tag_arr("", sizeof( unsigned char), 1u), _temp1342); _temp1390[ 1u]= Cyc_PP_line_doc();
! _temp1390[ 0u]= Cyc_PP_text( _tag_arr("/* extern \"C\" { */", sizeof(
! unsigned char), 19u)); Cyc_PP_cat( _tag_arr( _temp1390, sizeof( struct Cyc_PP_Doc*),
! 5u));});} goto _LL1258; _LL1258:;} return s;} struct Cyc_PP_Doc* Cyc_Absynpp_scope2doc(
! void* sc){ void* _temp1391= sc; _LL1393: if( _temp1391 == ( void*) Cyc_Absyn_Static){
! goto _LL1394;} else{ goto _LL1395;} _LL1395: if( _temp1391 == ( void*) Cyc_Absyn_Public){
! goto _LL1396;} else{ goto _LL1397;} _LL1397: if( _temp1391 == ( void*) Cyc_Absyn_Extern){
! goto _LL1398;} else{ goto _LL1399;} _LL1399: if( _temp1391 == ( void*) Cyc_Absyn_ExternC){
! goto _LL1400;} else{ goto _LL1401;} _LL1401: if( _temp1391 == ( void*) Cyc_Absyn_Abstract){
! goto _LL1402;} else{ goto _LL1392;} _LL1394: return Cyc_PP_text( _tag_arr("static ",
! sizeof( unsigned char), 8u)); _LL1396: return Cyc_PP_nil_doc(); _LL1398: return
! Cyc_PP_text( _tag_arr("extern ", sizeof( unsigned char), 8u)); _LL1400: return
! Cyc_PP_text( _tag_arr("extern \"C\" ", sizeof( unsigned char), 12u)); _LL1402:
! return Cyc_PP_text( _tag_arr("abstract ", sizeof( unsigned char), 10u)); _LL1392:;}
! int Cyc_Absynpp_exists_temp_tvar_in_effect( void* t){ void* _temp1403= t; struct
! Cyc_Absyn_Tvar* _temp1411; struct Cyc_List_List* _temp1413; _LL1405: if((
! unsigned int) _temp1403 >  4u?*(( int*) _temp1403) ==  Cyc_Absyn_VarType: 0){
! _LL1412: _temp1411=(( struct Cyc_Absyn_VarType_struct*) _temp1403)->f1; goto
! _LL1406;} else{ goto _LL1407;} _LL1407: if(( unsigned int) _temp1403 >  4u?*((
! int*) _temp1403) ==  Cyc_Absyn_JoinEff: 0){ _LL1414: _temp1413=(( struct Cyc_Absyn_JoinEff_struct*)
! _temp1403)->f1; goto _LL1408;} else{ goto _LL1409;} _LL1409: goto _LL1410;
! _LL1406: return Cyc_Tcutil_is_temp_tvar( _temp1411); _LL1408: return Cyc_List_exists(
! Cyc_Absynpp_exists_temp_tvar_in_effect, _temp1413); _LL1410: return 0; _LL1404:;}
  struct _tuple4 Cyc_Absynpp_to_tms( struct Cyc_Absyn_Tqual tq, void* t){ void*
! _temp1415= t; struct Cyc_Absyn_Exp* _temp1429; struct Cyc_Absyn_Tqual _temp1431;
! void* _temp1433; struct Cyc_Absyn_PtrInfo _temp1435; struct Cyc_Absyn_Conref*
! _temp1437; struct Cyc_Absyn_Tqual _temp1439; struct Cyc_Absyn_Conref* _temp1441;
! void* _temp1443; void* _temp1445; struct Cyc_Absyn_FnInfo _temp1447; struct Cyc_List_List*
! _temp1449; struct Cyc_List_List* _temp1451; struct Cyc_Absyn_VarargInfo*
! _temp1453; int _temp1455; struct Cyc_List_List* _temp1457; void* _temp1459;
! struct Cyc_Core_Opt* _temp1461; struct Cyc_List_List* _temp1463; int _temp1465;
! struct Cyc_Core_Opt* _temp1467; struct Cyc_Core_Opt* _temp1469; struct Cyc_Core_Opt*
! _temp1471; struct Cyc_List_List* _temp1473; struct _tuple0* _temp1475; _LL1417:
! if(( unsigned int) _temp1415 >  4u?*(( int*) _temp1415) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1434: _temp1433=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1415)->f1;
! goto _LL1432; _LL1432: _temp1431=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1415)->f2; goto _LL1430; _LL1430: _temp1429=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1415)->f3; goto _LL1418;} else{ goto _LL1419;} _LL1419: if(( unsigned int)
! _temp1415 >  4u?*(( int*) _temp1415) ==  Cyc_Absyn_PointerType: 0){ _LL1436:
! _temp1435=(( struct Cyc_Absyn_PointerType_struct*) _temp1415)->f1; _LL1446:
! _temp1445=( void*) _temp1435.elt_typ; goto _LL1444; _LL1444: _temp1443=( void*)
! _temp1435.rgn_typ; goto _LL1442; _LL1442: _temp1441= _temp1435.nullable; goto
! _LL1440; _LL1440: _temp1439= _temp1435.tq; goto _LL1438; _LL1438: _temp1437=
! _temp1435.bounds; goto _LL1420;} else{ goto _LL1421;} _LL1421: if(( unsigned int)
! _temp1415 >  4u?*(( int*) _temp1415) ==  Cyc_Absyn_FnType: 0){ _LL1448:
! _temp1447=(( struct Cyc_Absyn_FnType_struct*) _temp1415)->f1; _LL1464: _temp1463=
! _temp1447.tvars; goto _LL1462; _LL1462: _temp1461= _temp1447.effect; goto
! _LL1460; _LL1460: _temp1459=( void*) _temp1447.ret_typ; goto _LL1458; _LL1458:
! _temp1457= _temp1447.args; goto _LL1456; _LL1456: _temp1455= _temp1447.c_varargs;
! goto _LL1454; _LL1454: _temp1453= _temp1447.cyc_varargs; goto _LL1452; _LL1452:
! _temp1451= _temp1447.rgn_po; goto _LL1450; _LL1450: _temp1449= _temp1447.attributes;
! goto _LL1422;} else{ goto _LL1423;} _LL1423: if(( unsigned int) _temp1415 >  4u?*((
! int*) _temp1415) ==  Cyc_Absyn_Evar: 0){ _LL1470: _temp1469=(( struct Cyc_Absyn_Evar_struct*)
! _temp1415)->f1; goto _LL1468; _LL1468: _temp1467=(( struct Cyc_Absyn_Evar_struct*)
! _temp1415)->f2; goto _LL1466; _LL1466: _temp1465=(( struct Cyc_Absyn_Evar_struct*)
! _temp1415)->f3; goto _LL1424;} else{ goto _LL1425;} _LL1425: if(( unsigned int)
! _temp1415 >  4u?*(( int*) _temp1415) ==  Cyc_Absyn_TypedefType: 0){ _LL1476:
! _temp1475=(( struct Cyc_Absyn_TypedefType_struct*) _temp1415)->f1; goto _LL1474;
! _LL1474: _temp1473=(( struct Cyc_Absyn_TypedefType_struct*) _temp1415)->f2; goto
! _LL1472; _LL1472: _temp1471=(( struct Cyc_Absyn_TypedefType_struct*) _temp1415)->f3;
! goto _LL1426;} else{ goto _LL1427;} _LL1427: goto _LL1428; _LL1418: { struct Cyc_List_List*
! _temp1479; void* _temp1481; struct Cyc_Absyn_Tqual _temp1483; struct _tuple4
! _temp1477= Cyc_Absynpp_to_tms( _temp1431, _temp1433); _LL1484: _temp1483=
! _temp1477.f1; goto _LL1482; _LL1482: _temp1481= _temp1477.f2; goto _LL1480;
! _LL1480: _temp1479= _temp1477.f3; goto _LL1478; _LL1478: { void* tm; if(
! _temp1429 ==  0){ tm=( void*) Cyc_Absyn_Carray_mod;} else{ tm=( void*)({ struct
! Cyc_Absyn_ConstArray_mod_struct* _temp1485=( struct Cyc_Absyn_ConstArray_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ConstArray_mod_struct)); _temp1485[ 0]=({
! struct Cyc_Absyn_ConstArray_mod_struct _temp1486; _temp1486.tag= Cyc_Absyn_ConstArray_mod;
! _temp1486.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1429); _temp1486;});
! _temp1485;});} return({ struct _tuple4 _temp1487; _temp1487.f1= _temp1483;
! _temp1487.f2= _temp1481; _temp1487.f3=({ struct Cyc_List_List* _temp1488=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1488->hd=(
! void*) tm; _temp1488->tl= _temp1479; _temp1488;}); _temp1487;});}} _LL1420: {
! struct Cyc_List_List* _temp1491; void* _temp1493; struct Cyc_Absyn_Tqual
! _temp1495; struct _tuple4 _temp1489= Cyc_Absynpp_to_tms( _temp1439, _temp1445);
! _LL1496: _temp1495= _temp1489.f1; goto _LL1494; _LL1494: _temp1493= _temp1489.f2;
! goto _LL1492; _LL1492: _temp1491= _temp1489.f3; goto _LL1490; _LL1490: { void*
! ps;{ struct _tuple8 _temp1498=({ struct _tuple8 _temp1497; _temp1497.f1=( void*)(((
  struct Cyc_Absyn_Conref*(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_compress_conref)(
! _temp1441))->v; _temp1497.f2=( void*)( Cyc_Absyn_compress_conref( _temp1437))->v;
! _temp1497;}); void* _temp1508; void* _temp1510; struct Cyc_Absyn_Exp* _temp1512;
! void* _temp1514; int _temp1516; void* _temp1518; void* _temp1520; struct Cyc_Absyn_Exp*
! _temp1522; void* _temp1524; int _temp1526; void* _temp1528; void* _temp1530;
! _LL1500: _LL1515: _temp1514= _temp1498.f1; if(( unsigned int) _temp1514 >  1u?*((
! int*) _temp1514) ==  Cyc_Absyn_Eq_constr: 0){ _LL1517: _temp1516=( int)(( struct
! Cyc_Absyn_Eq_constr_struct*) _temp1514)->f1; if( _temp1516 ==  1){ goto _LL1509;}
! else{ goto _LL1502;}} else{ goto _LL1502;} _LL1509: _temp1508= _temp1498.f2; if((
! unsigned int) _temp1508 >  1u?*(( int*) _temp1508) ==  Cyc_Absyn_Eq_constr: 0){
! _LL1511: _temp1510=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1508)->f1;
! if(( unsigned int) _temp1510 >  1u?*(( int*) _temp1510) ==  Cyc_Absyn_Upper_b: 0){
! _LL1513: _temp1512=(( struct Cyc_Absyn_Upper_b_struct*) _temp1510)->f1; goto
! _LL1501;} else{ goto _LL1502;}} else{ goto _LL1502;} _LL1502: _LL1525: _temp1524=
! _temp1498.f1; if(( unsigned int) _temp1524 >  1u?*(( int*) _temp1524) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1527: _temp1526=( int)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1524)->f1;
! if( _temp1526 ==  0){ goto _LL1519;} else{ goto _LL1504;}} else{ goto _LL1504;}
! _LL1519: _temp1518= _temp1498.f2; if(( unsigned int) _temp1518 >  1u?*(( int*)
! _temp1518) ==  Cyc_Absyn_Eq_constr: 0){ _LL1521: _temp1520=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp1518)->f1; if(( unsigned int) _temp1520 >  1u?*(( int*) _temp1520) ==  Cyc_Absyn_Upper_b:
! 0){ _LL1523: _temp1522=(( struct Cyc_Absyn_Upper_b_struct*) _temp1520)->f1; goto
! _LL1503;} else{ goto _LL1504;}} else{ goto _LL1504;} _LL1504: _LL1529: _temp1528=
! _temp1498.f2; if(( unsigned int) _temp1528 >  1u?*(( int*) _temp1528) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1531: _temp1530=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1528)->f1;
! if( _temp1530 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1505;} else{ goto
! _LL1506;}} else{ goto _LL1506;} _LL1506: goto _LL1507; _LL1501: ps=( void*)({
! struct Cyc_Absyn_Nullable_ps_struct* _temp1532=( struct Cyc_Absyn_Nullable_ps_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Nullable_ps_struct)); _temp1532[ 0]=({
! struct Cyc_Absyn_Nullable_ps_struct _temp1533; _temp1533.tag= Cyc_Absyn_Nullable_ps;
! _temp1533.f1= _temp1512; _temp1533;}); _temp1532;}); goto _LL1499; _LL1503: ps=(
! void*)({ struct Cyc_Absyn_NonNullable_ps_struct* _temp1534=( struct Cyc_Absyn_NonNullable_ps_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_NonNullable_ps_struct)); _temp1534[ 0]=({
! struct Cyc_Absyn_NonNullable_ps_struct _temp1535; _temp1535.tag= Cyc_Absyn_NonNullable_ps;
! _temp1535.f1= _temp1522; _temp1535;}); _temp1534;}); goto _LL1499; _LL1505: ps=(
! void*) Cyc_Absyn_TaggedArray_ps; goto _LL1499; _LL1507: ps=( void*) Cyc_Absyn_TaggedArray_ps;
! goto _LL1499; _LL1499:;}{ void* tm=( void*)({ struct Cyc_Absyn_Pointer_mod_struct*
! _temp1538=( struct Cyc_Absyn_Pointer_mod_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct));
! _temp1538[ 0]=({ struct Cyc_Absyn_Pointer_mod_struct _temp1539; _temp1539.tag=
! Cyc_Absyn_Pointer_mod; _temp1539.f1=( void*) ps; _temp1539.f2=( void*) _temp1443;
! _temp1539.f3= tq; _temp1539;}); _temp1538;}); return({ struct _tuple4 _temp1536;
! _temp1536.f1= _temp1495; _temp1536.f2= _temp1493; _temp1536.f3=({ struct Cyc_List_List*
! _temp1537=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1537->hd=( void*) tm; _temp1537->tl= _temp1491; _temp1537;}); _temp1536;});}}}
! _LL1422: if( ! Cyc_Absynpp_print_all_tvars){ if( _temp1461 ==  0? 1: Cyc_Absynpp_exists_temp_tvar_in_effect((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp1461))->v)){ _temp1461= 0;
! _temp1463= 0;}} else{ if( Cyc_Absynpp_rewrite_temp_tvars){(( void(*)( void(* f)(
  struct Cyc_Absyn_Tvar*), struct Cyc_List_List* x)) Cyc_List_iter)( Cyc_Tcutil_rewrite_temp_tvar,
! _temp1463);}}{ struct Cyc_List_List* _temp1542; void* _temp1544; struct Cyc_Absyn_Tqual
! _temp1546; struct _tuple4 _temp1540= Cyc_Absynpp_to_tms( Cyc_Absyn_empty_tqual(),
! _temp1459); _LL1547: _temp1546= _temp1540.f1; goto _LL1545; _LL1545: _temp1544=
! _temp1540.f2; goto _LL1543; _LL1543: _temp1542= _temp1540.f3; goto _LL1541;
! _LL1541: { struct Cyc_List_List* tms= _temp1542; if( _temp1449 !=  0? ! Cyc_Absynpp_to_VC:
! 0){ tms=({ struct Cyc_List_List* _temp1548=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1548->hd=( void*)(( void*)({ struct Cyc_Absyn_Attributes_mod_struct*
! _temp1549=( struct Cyc_Absyn_Attributes_mod_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_Attributes_mod_struct)); _temp1549[ 0]=({ struct Cyc_Absyn_Attributes_mod_struct
! _temp1550; _temp1550.tag= Cyc_Absyn_Attributes_mod; _temp1550.f1= 0; _temp1550.f2=
! _temp1449; _temp1550;}); _temp1549;})); _temp1548->tl= tms; _temp1548;});} tms=({
! struct Cyc_List_List* _temp1551=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1551->hd=( void*)(( void*)({ struct Cyc_Absyn_Function_mod_struct*
! _temp1552=( struct Cyc_Absyn_Function_mod_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct));
! _temp1552[ 0]=({ struct Cyc_Absyn_Function_mod_struct _temp1553; _temp1553.tag=
! Cyc_Absyn_Function_mod; _temp1553.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct*
! _temp1554=( struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp1554[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp1555; _temp1555.tag= Cyc_Absyn_WithTypes;
! _temp1555.f1= _temp1457; _temp1555.f2= _temp1455; _temp1555.f3= _temp1453;
! _temp1555.f4= _temp1461; _temp1555.f5= _temp1451; _temp1555;}); _temp1554;}));
! _temp1553;}); _temp1552;})); _temp1551->tl= tms; _temp1551;}); if( Cyc_Absynpp_to_VC){
! for( 0; _temp1449 !=  0; _temp1449=(( struct Cyc_List_List*) _check_null(
! _temp1449))->tl){ void* _temp1556=( void*)(( struct Cyc_List_List*) _check_null(
! _temp1449))->hd; _LL1558: if( _temp1556 == ( void*) Cyc_Absyn_Stdcall_att){ goto
! _LL1559;} else{ goto _LL1560;} _LL1560: if( _temp1556 == ( void*) Cyc_Absyn_Cdecl_att){
! goto _LL1561;} else{ goto _LL1562;} _LL1562: if( _temp1556 == ( void*) Cyc_Absyn_Fastcall_att){
! goto _LL1563;} else{ goto _LL1564;} _LL1564: goto _LL1565; _LL1559: goto _LL1561;
! _LL1561: goto _LL1563; _LL1563: tms=({ struct Cyc_List_List* _temp1566=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1566->hd=( void*)((
! void*)({ struct Cyc_Absyn_Attributes_mod_struct* _temp1567=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp1567[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp1568; _temp1568.tag= Cyc_Absyn_Attributes_mod;
! _temp1568.f1= 0; _temp1568.f2=({ struct Cyc_List_List* _temp1569=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1569->hd=( void*)(( void*)((
! struct Cyc_List_List*) _check_null( _temp1449))->hd); _temp1569->tl= 0;
! _temp1569;}); _temp1568;}); _temp1567;})); _temp1566->tl= tms; _temp1566;});
! goto AfterAtts; _LL1565: goto _LL1557; _LL1557:;}} AfterAtts: if( _temp1463 != 
! 0){ tms=({ struct Cyc_List_List* _temp1570=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1570->hd=( void*)(( void*)({ struct Cyc_Absyn_TypeParams_mod_struct*
! _temp1571=( struct Cyc_Absyn_TypeParams_mod_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_TypeParams_mod_struct)); _temp1571[ 0]=({ struct Cyc_Absyn_TypeParams_mod_struct
! _temp1572; _temp1572.tag= Cyc_Absyn_TypeParams_mod; _temp1572.f1= _temp1463;
! _temp1572.f2= 0; _temp1572.f3= 1; _temp1572;}); _temp1571;})); _temp1570->tl=
! tms; _temp1570;});} return({ struct _tuple4 _temp1573; _temp1573.f1= _temp1546;
! _temp1573.f2= _temp1544; _temp1573.f3= tms; _temp1573;});}} _LL1424: if(
! _temp1467 ==  0){ return({ struct _tuple4 _temp1574; _temp1574.f1= tq; _temp1574.f2=
! t; _temp1574.f3= 0; _temp1574;});} else{ return Cyc_Absynpp_to_tms( tq,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1467))->v);} _LL1426: if( _temp1471 == 
! 0? 1: ! Cyc_Absynpp_expand_typedefs){ return({ struct _tuple4 _temp1575;
! _temp1575.f1= tq; _temp1575.f2= t; _temp1575.f3= 0; _temp1575;});} else{ return
! Cyc_Absynpp_to_tms( tq,( void*)(( struct Cyc_Core_Opt*) _check_null( _temp1471))->v);}
! _LL1428: return({ struct _tuple4 _temp1576; _temp1576.f1= tq; _temp1576.f2= t;
! _temp1576.f3= 0; _temp1576;}); _LL1416:;} struct Cyc_PP_Doc* Cyc_Absynpp_tqtd2doc(
  struct Cyc_Absyn_Tqual tq, void* t, struct Cyc_Core_Opt* dopt){ struct Cyc_List_List*
! _temp1579; void* _temp1581; struct Cyc_Absyn_Tqual _temp1583; struct _tuple4
! _temp1577= Cyc_Absynpp_to_tms( tq, t); _LL1584: _temp1583= _temp1577.f1; goto
! _LL1582; _LL1582: _temp1581= _temp1577.f2; goto _LL1580; _LL1580: _temp1579=
! _temp1577.f3; goto _LL1578; _LL1578: _temp1579= Cyc_List_imp_rev( _temp1579);
! if( _temp1579 ==  0? dopt ==  0: 0){ return({ struct Cyc_PP_Doc* _temp1585[ 2u];
! _temp1585[ 1u]= Cyc_Absynpp_ntyp2doc( _temp1581); _temp1585[ 0u]= Cyc_Absynpp_tqual2doc(
! _temp1583); Cyc_PP_cat( _tag_arr( _temp1585, sizeof( struct Cyc_PP_Doc*), 2u));});}
! else{ return({ struct Cyc_PP_Doc* _temp1586[ 4u]; _temp1586[ 3u]= Cyc_Absynpp_dtms2doc(
  dopt ==  0? Cyc_PP_nil_doc():( struct Cyc_PP_Doc*)(( struct Cyc_Core_Opt*)
! _check_null( dopt))->v, _temp1579); _temp1586[ 2u]= Cyc_PP_text( _tag_arr(" ",
! sizeof( unsigned char), 2u)); _temp1586[ 1u]= Cyc_Absynpp_ntyp2doc( _temp1581);
! _temp1586[ 0u]= Cyc_Absynpp_tqual2doc( _temp1583); Cyc_PP_cat( _tag_arr(
! _temp1586, sizeof( struct Cyc_PP_Doc*), 4u));});}} struct Cyc_PP_Doc* Cyc_Absynpp_structfield2doc(
  struct Cyc_Absyn_Structfield* f){ if( f->width !=  0){ return({ struct Cyc_PP_Doc*
! _temp1587[ 5u]; _temp1587[ 4u]= Cyc_PP_text( _tag_arr(";", sizeof( unsigned char),
! 2u)); _temp1587[ 3u]= Cyc_Absynpp_atts2doc( f->attributes); _temp1587[ 2u]= Cyc_Absynpp_exp2doc((
! struct Cyc_Absyn_Exp*) _check_null( f->width)); _temp1587[ 1u]= Cyc_PP_text(
! _tag_arr(":", sizeof( unsigned char), 2u)); _temp1587[ 0u]= Cyc_Absynpp_tqtd2doc(
! f->tq,( void*) f->type,({ struct Cyc_Core_Opt* _temp1588=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1588->v=( void*) Cyc_PP_textptr(
! f->name); _temp1588;})); Cyc_PP_cat( _tag_arr( _temp1587, sizeof( struct Cyc_PP_Doc*),
! 5u));});} else{ return({ struct Cyc_PP_Doc* _temp1589[ 3u]; _temp1589[ 2u]= Cyc_PP_text(
! _tag_arr(";", sizeof( unsigned char), 2u)); _temp1589[ 1u]= Cyc_Absynpp_atts2doc(
! f->attributes); _temp1589[ 0u]= Cyc_Absynpp_tqtd2doc( f->tq,( void*) f->type,({
! struct Cyc_Core_Opt* _temp1590=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1590->v=( void*) Cyc_PP_textptr( f->name); _temp1590;}));
! Cyc_PP_cat( _tag_arr( _temp1589, sizeof( struct Cyc_PP_Doc*), 3u));});}} struct
  Cyc_PP_Doc* Cyc_Absynpp_structfields2doc( struct Cyc_List_List* fields){ return((
  struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Structfield*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_structfield2doc,
  _tag_arr("", sizeof( unsigned char), 1u), fields);} struct Cyc_PP_Doc* Cyc_Absynpp_tunionfield2doc(
! struct Cyc_Absyn_Tunionfield* f){ return({ struct Cyc_PP_Doc* _temp1591[ 4u];
! _temp1591[ 3u]= f->typs ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_args2doc( f->typs);
! _temp1591[ 2u]= f->tvs ==  0? Cyc_PP_nil_doc(): Cyc_Absynpp_ktvars2doc( f->tvs);
! _temp1591[ 1u]= Cyc_Absynpp_typedef_name2doc( f->name); _temp1591[ 0u]= Cyc_Absynpp_scope2doc((
! void*) f->sc); Cyc_PP_cat( _tag_arr( _temp1591, sizeof( struct Cyc_PP_Doc*), 4u));});}
  struct Cyc_PP_Doc* Cyc_Absynpp_tunionfields2doc( struct Cyc_List_List* fields){
  return(( struct Cyc_PP_Doc*(*)( struct Cyc_PP_Doc*(* pp)( struct Cyc_Absyn_Tunionfield*),
  struct _tagged_arr sep, struct Cyc_List_List* l)) Cyc_PP_ppseql)( Cyc_Absynpp_tunionfield2doc,
***************
*** 2801,2808 ****
  struct Cyc_List_List* tdl, struct Cyc_Std___sFILE* f){ for( 0; tdl !=  0; tdl=((
  struct Cyc_List_List*) _check_null( tdl))->tl){ Cyc_PP_file_of_doc( Cyc_Absynpp_decl2doc((
  struct Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( tdl))->hd), 72, f);({
! void* _temp1608[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n", sizeof(
! unsigned char), 2u), _tag_arr( _temp1608, sizeof( void*), 0u));});}} struct
  _tagged_arr Cyc_Absynpp_decllist2string( struct Cyc_List_List* tdl){ return Cyc_PP_string_of_doc(
  Cyc_PP_seql( _tag_arr("", sizeof( unsigned char), 1u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Decl*), struct Cyc_List_List* x)) Cyc_List_map)(
--- 2776,2783 ----
  struct Cyc_List_List* tdl, struct Cyc_Std___sFILE* f){ for( 0; tdl !=  0; tdl=((
  struct Cyc_List_List*) _check_null( tdl))->tl){ Cyc_PP_file_of_doc( Cyc_Absynpp_decl2doc((
  struct Cyc_Absyn_Decl*)(( struct Cyc_List_List*) _check_null( tdl))->hd), 72, f);({
! void* _temp1592[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n", sizeof(
! unsigned char), 2u), _tag_arr( _temp1592, sizeof( void*), 0u));});}} struct
  _tagged_arr Cyc_Absynpp_decllist2string( struct Cyc_List_List* tdl){ return Cyc_PP_string_of_doc(
  Cyc_PP_seql( _tag_arr("", sizeof( unsigned char), 1u),(( struct Cyc_List_List*(*)(
  struct Cyc_PP_Doc*(* f)( struct Cyc_Absyn_Decl*), struct Cyc_List_List* x)) Cyc_List_map)(
***************
*** 2816,2828 ****
  void* p){ return Cyc_PP_string_of_doc( Cyc_Absynpp_prim2doc( p), 72);} struct
  _tagged_arr Cyc_Absynpp_pat2string( struct Cyc_Absyn_Pat* p){ return Cyc_PP_string_of_doc(
  Cyc_Absynpp_pat2doc( p), 72);} struct _tagged_arr Cyc_Absynpp_scope2string( void*
! sc){ void* _temp1609= sc; _LL1611: if( _temp1609 == ( void*) Cyc_Absyn_Static){
! goto _LL1612;} else{ goto _LL1613;} _LL1613: if( _temp1609 == ( void*) Cyc_Absyn_Public){
! goto _LL1614;} else{ goto _LL1615;} _LL1615: if( _temp1609 == ( void*) Cyc_Absyn_Extern){
! goto _LL1616;} else{ goto _LL1617;} _LL1617: if( _temp1609 == ( void*) Cyc_Absyn_ExternC){
! goto _LL1618;} else{ goto _LL1619;} _LL1619: if( _temp1609 == ( void*) Cyc_Absyn_Abstract){
! goto _LL1620;} else{ goto _LL1610;} _LL1612: return _tag_arr("static", sizeof(
! unsigned char), 7u); _LL1614: return _tag_arr("public", sizeof( unsigned char),
! 7u); _LL1616: return _tag_arr("extern", sizeof( unsigned char), 7u); _LL1618:
! return _tag_arr("extern \"C\"", sizeof( unsigned char), 11u); _LL1620: return
! _tag_arr("abstract", sizeof( unsigned char), 9u); _LL1610:;}
--- 2791,2803 ----
  void* p){ return Cyc_PP_string_of_doc( Cyc_Absynpp_prim2doc( p), 72);} struct
  _tagged_arr Cyc_Absynpp_pat2string( struct Cyc_Absyn_Pat* p){ return Cyc_PP_string_of_doc(
  Cyc_Absynpp_pat2doc( p), 72);} struct _tagged_arr Cyc_Absynpp_scope2string( void*
! sc){ void* _temp1593= sc; _LL1595: if( _temp1593 == ( void*) Cyc_Absyn_Static){
! goto _LL1596;} else{ goto _LL1597;} _LL1597: if( _temp1593 == ( void*) Cyc_Absyn_Public){
! goto _LL1598;} else{ goto _LL1599;} _LL1599: if( _temp1593 == ( void*) Cyc_Absyn_Extern){
! goto _LL1600;} else{ goto _LL1601;} _LL1601: if( _temp1593 == ( void*) Cyc_Absyn_ExternC){
! goto _LL1602;} else{ goto _LL1603;} _LL1603: if( _temp1593 == ( void*) Cyc_Absyn_Abstract){
! goto _LL1604;} else{ goto _LL1594;} _LL1596: return _tag_arr("static", sizeof(
! unsigned char), 7u); _LL1598: return _tag_arr("public", sizeof( unsigned char),
! 7u); _LL1600: return _tag_arr("extern", sizeof( unsigned char), 7u); _LL1602:
! return _tag_arr("extern \"C\"", sizeof( unsigned char), 11u); _LL1604: return
! _tag_arr("abstract", sizeof( unsigned char), 9u); _LL1594:;}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/cf_absexp.c powerpc-apple-rhapsody/src/cf_absexp.c
*** i686-unknown-linux/src/cf_absexp.c	Wed Oct 10 15:39:58 2001
--- powerpc-apple-rhapsody/src/cf_absexp.c	Wed Oct 10 15:39:28 2001
***************
*** 308,314 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 308,314 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 399,461 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 399,458 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/cf_flowinfo.c powerpc-apple-rhapsody/src/cf_flowinfo.c
*** i686-unknown-linux/src/cf_flowinfo.c	Wed Oct 10 15:39:58 2001
--- powerpc-apple-rhapsody/src/cf_flowinfo.c	Wed Oct 10 15:39:28 2001
***************
*** 295,301 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 295,301 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 386,448 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 386,445 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/cycdoc.c powerpc-apple-rhapsody/src/cycdoc.c
*** i686-unknown-linux/src/cycdoc.c	Wed Oct 10 15:40:04 2001
--- powerpc-apple-rhapsody/src/cycdoc.c	Wed Oct 10 15:39:38 2001
***************
*** 351,357 ****
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 351,357 ----
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 442,504 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple1* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple1* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple2{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple2* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 442,501 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple1* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple1* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple2{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple2* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple1* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 1158,1198 ****
  sizeof( unsigned char), 5u), _tag_arr( _temp298, sizeof( void*), 1u));}}));
  return; _LL136: Cyc_Dump_dumpntyp( _temp206); return; _LL138:{ void* _temp300=
  _temp216; struct Cyc_Absyn_UnknownTunionInfo _temp306; int _temp308; struct
! _tuple1* _temp310; struct Cyc_Absyn_Tuniondecl** _temp312; struct Cyc_Absyn_Tuniondecl*
! _temp314; struct Cyc_Absyn_Tuniondecl _temp315; int _temp316; struct _tuple1*
! _temp318; _LL302: if(*(( int*) _temp300) ==  Cyc_Absyn_UnknownTunion){ _LL307:
! _temp306=(( struct Cyc_Absyn_UnknownTunion_struct*) _temp300)->f1; _LL311:
! _temp310= _temp306.name; goto _LL309; _LL309: _temp308= _temp306.is_xtunion;
! goto _LL303;} else{ goto _LL304;} _LL304: if(*(( int*) _temp300) ==  Cyc_Absyn_KnownTunion){
! _LL313: _temp312=(( struct Cyc_Absyn_KnownTunion_struct*) _temp300)->f1;
! _temp314=* _temp312; _temp315=* _temp314; _LL319: _temp318= _temp315.name; goto
! _LL317; _LL317: _temp316= _temp315.is_xtunion; goto _LL305;} else{ goto _LL301;}
! _LL303: _temp318= _temp310; _temp316= _temp308; goto _LL305; _LL305: if(
! _temp316){ Cyc_Dump_dump_alpha( _tag_arr("xtunion", sizeof( unsigned char), 8u));}
! else{ Cyc_Dump_dump_alpha( _tag_arr("tunion", sizeof( unsigned char), 7u));}{
! void* _temp320= Cyc_Tcutil_compress( _temp212); _LL322: if( _temp320 == ( void*)
! Cyc_Absyn_HeapRgn){ goto _LL323;} else{ goto _LL324;} _LL324: goto _LL325;
! _LL323: goto _LL321; _LL325: Cyc_Dump_dumptyp( _temp212); goto _LL321; _LL321:;}
! Cyc_Dump_dumpqvar( _temp318); Cyc_Dump_dumptps( _temp214); goto _LL301; _LL301:;}
! goto _LL122; _LL140:{ void* _temp326= _temp222; struct Cyc_Absyn_UnknownTunionFieldInfo
! _temp332; int _temp334; struct _tuple1* _temp336; struct _tuple1* _temp338;
! struct Cyc_Absyn_Tunionfield* _temp340; struct Cyc_Absyn_Tunionfield _temp342;
! struct _tuple1* _temp343; struct Cyc_Absyn_Tuniondecl* _temp345; struct Cyc_Absyn_Tuniondecl
! _temp347; int _temp348; struct _tuple1* _temp350; _LL328: if(*(( int*) _temp326)
! ==  Cyc_Absyn_UnknownTunionfield){ _LL333: _temp332=(( struct Cyc_Absyn_UnknownTunionfield_struct*)
! _temp326)->f1; _LL339: _temp338= _temp332.tunion_name; goto _LL337; _LL337:
! _temp336= _temp332.field_name; goto _LL335; _LL335: _temp334= _temp332.is_xtunion;
! goto _LL329;} else{ goto _LL330;} _LL330: if(*(( int*) _temp326) ==  Cyc_Absyn_KnownTunionfield){
! _LL346: _temp345=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp326)->f1;
! _temp347=* _temp345; _LL351: _temp350= _temp347.name; goto _LL349; _LL349:
! _temp348= _temp347.is_xtunion; goto _LL341; _LL341: _temp340=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp326)->f2; _temp342=* _temp340; _LL344: _temp343= _temp342.name; goto _LL331;}
! else{ goto _LL327;} _LL329: _temp350= _temp338; _temp348= _temp334; _temp343=
! _temp336; goto _LL331; _LL331: if( _temp348){ Cyc_Dump_dump_alpha( _tag_arr("xtunion",
  sizeof( unsigned char), 8u));} else{ Cyc_Dump_dump_alpha( _tag_arr("tunion",
! sizeof( unsigned char), 7u));} Cyc_Dump_dumpqvar( _temp350); Cyc_Dump_dump_char((
! int)'.'); Cyc_Dump_dumpqvar( _temp343); Cyc_Dump_dumptps( _temp220); goto _LL327;
! _LL327:;} goto _LL122; _LL142: Cyc_Dump_dump_alpha( _tag_arr("enum", sizeof(
  unsigned char), 5u)); Cyc_Dump_dumpqvar( _temp224); return; _LL144: Cyc_Dump_dump_alpha(
  _tag_arr("int", sizeof( unsigned char), 4u)); return; _LL146: Cyc_Dump_dump_alpha(
  _tag_arr("signed char", sizeof( unsigned char), 12u)); return; _LL148: Cyc_Dump_dump_alpha(
--- 1155,1194 ----
  sizeof( unsigned char), 5u), _tag_arr( _temp298, sizeof( void*), 1u));}}));
  return; _LL136: Cyc_Dump_dumpntyp( _temp206); return; _LL138:{ void* _temp300=
  _temp216; struct Cyc_Absyn_UnknownTunionInfo _temp306; int _temp308; struct
! _tuple1* _temp310; struct Cyc_Absyn_Tuniondecl* _temp312; struct Cyc_Absyn_Tuniondecl
! _temp314; int _temp315; struct _tuple1* _temp317; _LL302: if(*(( int*) _temp300)
! ==  Cyc_Absyn_UnknownTunion){ _LL307: _temp306=(( struct Cyc_Absyn_UnknownTunion_struct*)
! _temp300)->f1; _LL311: _temp310= _temp306.name; goto _LL309; _LL309: _temp308=
! _temp306.is_xtunion; goto _LL303;} else{ goto _LL304;} _LL304: if(*(( int*)
! _temp300) ==  Cyc_Absyn_KnownTunion){ _LL313: _temp312=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp300)->f1; _temp314=* _temp312; _LL318: _temp317= _temp314.name; goto _LL316;
! _LL316: _temp315= _temp314.is_xtunion; goto _LL305;} else{ goto _LL301;} _LL303:
! _temp317= _temp310; _temp315= _temp308; goto _LL305; _LL305: if( _temp315){ Cyc_Dump_dump_alpha(
! _tag_arr("xtunion", sizeof( unsigned char), 8u));} else{ Cyc_Dump_dump_alpha(
! _tag_arr("tunion", sizeof( unsigned char), 7u));}{ void* _temp319= Cyc_Tcutil_compress(
! _temp212); _LL321: if( _temp319 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL322;}
! else{ goto _LL323;} _LL323: goto _LL324; _LL322: goto _LL320; _LL324: Cyc_Dump_dumptyp(
! _temp212); goto _LL320; _LL320:;} Cyc_Dump_dumpqvar( _temp317); Cyc_Dump_dumptps(
! _temp214); goto _LL301; _LL301:;} goto _LL122; _LL140:{ void* _temp325= _temp222;
! struct Cyc_Absyn_UnknownTunionFieldInfo _temp331; int _temp333; struct _tuple1*
! _temp335; struct _tuple1* _temp337; struct Cyc_Absyn_Tunionfield* _temp339;
! struct Cyc_Absyn_Tunionfield _temp341; struct _tuple1* _temp342; struct Cyc_Absyn_Tuniondecl*
! _temp344; struct Cyc_Absyn_Tuniondecl _temp346; int _temp347; struct _tuple1*
! _temp349; _LL327: if(*(( int*) _temp325) ==  Cyc_Absyn_UnknownTunionfield){
! _LL332: _temp331=(( struct Cyc_Absyn_UnknownTunionfield_struct*) _temp325)->f1;
! _LL338: _temp337= _temp331.tunion_name; goto _LL336; _LL336: _temp335= _temp331.field_name;
! goto _LL334; _LL334: _temp333= _temp331.is_xtunion; goto _LL328;} else{ goto
! _LL329;} _LL329: if(*(( int*) _temp325) ==  Cyc_Absyn_KnownTunionfield){ _LL345:
! _temp344=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp325)->f1; _temp346=*
! _temp344; _LL350: _temp349= _temp346.name; goto _LL348; _LL348: _temp347=
! _temp346.is_xtunion; goto _LL340; _LL340: _temp339=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp325)->f2; _temp341=* _temp339; _LL343: _temp342= _temp341.name; goto _LL330;}
! else{ goto _LL326;} _LL328: _temp349= _temp337; _temp347= _temp333; _temp342=
! _temp335; goto _LL330; _LL330: if( _temp347){ Cyc_Dump_dump_alpha( _tag_arr("xtunion",
  sizeof( unsigned char), 8u));} else{ Cyc_Dump_dump_alpha( _tag_arr("tunion",
! sizeof( unsigned char), 7u));} Cyc_Dump_dumpqvar( _temp349); Cyc_Dump_dump_char((
! int)'.'); Cyc_Dump_dumpqvar( _temp342); Cyc_Dump_dumptps( _temp220); goto _LL326;
! _LL326:;} goto _LL122; _LL142: Cyc_Dump_dump_alpha( _tag_arr("enum", sizeof(
  unsigned char), 5u)); Cyc_Dump_dumpqvar( _temp224); return; _LL144: Cyc_Dump_dump_alpha(
  _tag_arr("int", sizeof( unsigned char), 4u)); return; _LL146: Cyc_Dump_dump_alpha(
  _tag_arr("signed char", sizeof( unsigned char), 12u)); return; _LL148: Cyc_Dump_dump_alpha(
***************
*** 1226,1235 ****
  struct _tuple2* t){(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( struct
  Cyc_Core_Opt*), struct Cyc_Core_Opt*)) Cyc_Dump_dumptqtd)((* t).f2,(* t).f3, Cyc_Dump_dumpvaropt,(*
  t).f1);} void Cyc_Dump_dump_rgncmp( struct _tuple0* cmp){ struct _tuple0
! _temp354; void* _temp355; void* _temp357; struct _tuple0* _temp352= cmp;
! _temp354=* _temp352; _LL358: _temp357= _temp354.f1; goto _LL356; _LL356:
! _temp355= _temp354.f2; goto _LL353; _LL353: Cyc_Dump_dumptyp( _temp357); Cyc_Dump_dump_char((
! int)'<'); Cyc_Dump_dumptyp( _temp355);} void Cyc_Dump_dump_rgnpo( struct Cyc_List_List*
  rgn_po){(( void(*)( void(* f)( struct _tuple0*), struct Cyc_List_List* l, struct
  _tagged_arr sep)) Cyc_Dump_dump_sep)( Cyc_Dump_dump_rgncmp, rgn_po, _tag_arr(",",
  sizeof( unsigned char), 2u));} void Cyc_Dump_dumpfunargs( struct Cyc_List_List*
--- 1222,1231 ----
  struct _tuple2* t){(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( struct
  Cyc_Core_Opt*), struct Cyc_Core_Opt*)) Cyc_Dump_dumptqtd)((* t).f2,(* t).f3, Cyc_Dump_dumpvaropt,(*
  t).f1);} void Cyc_Dump_dump_rgncmp( struct _tuple0* cmp){ struct _tuple0
! _temp353; void* _temp354; void* _temp356; struct _tuple0* _temp351= cmp;
! _temp353=* _temp351; _LL357: _temp356= _temp353.f1; goto _LL355; _LL355:
! _temp354= _temp353.f2; goto _LL352; _LL352: Cyc_Dump_dumptyp( _temp356); Cyc_Dump_dump_char((
! int)'<'); Cyc_Dump_dumptyp( _temp354);} void Cyc_Dump_dump_rgnpo( struct Cyc_List_List*
  rgn_po){(( void(*)( void(* f)( struct _tuple0*), struct Cyc_List_List* l, struct
  _tagged_arr sep)) Cyc_Dump_dump_sep)( Cyc_Dump_dump_rgncmp, rgn_po, _tag_arr(",",
  sizeof( unsigned char), 2u));} void Cyc_Dump_dumpfunargs( struct Cyc_List_List*
***************
*** 1240,1268 ****
  struct Cyc_List_List*) _check_null( args))->tl !=  0? 1: c_varargs)? 1:
  cyc_varargs !=  0){ Cyc_Dump_dump_symbol( _tag_arr(", ", sizeof( unsigned char),
  3u));}} if( c_varargs){ Cyc_Dump_dump_symbol( _tag_arr("...", sizeof(
! unsigned char), 4u));} else{ if( cyc_varargs !=  0){ struct _tuple2* _temp359=({
! struct _tuple2* _temp360=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp360->f1=(( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->name;
! _temp360->f2=(( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->tq;
! _temp360->f3=( void*)(( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->type;
! _temp360;}); Cyc_Dump_dump_symbol( _tag_arr("...", sizeof( unsigned char), 4u));
  if((( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->inject){ Cyc_Dump_dump_alpha(
! _tag_arr(" inject", sizeof( unsigned char), 8u));} Cyc_Dump_dumpfunarg( _temp359);}}
  if( effopt !=  0){ Cyc_Dump_dump_semi(); Cyc_Dump_dumpeff(( void*)(( struct Cyc_Core_Opt*)
  _check_null( effopt))->v);} if( rgn_po !=  0){ Cyc_Dump_dump_char(( int)':');
  Cyc_Dump_dump_rgnpo( rgn_po);} Cyc_Dump_dump_char(( int)')');} void Cyc_Dump_dumptyp(
  void* t){(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( int), int)) Cyc_Dump_dumptqtd)(({
! struct Cyc_Absyn_Tqual _temp361; _temp361.q_const= 0; _temp361.q_volatile= 0;
! _temp361.q_restrict= 0; _temp361;}), t,( void(*)( int x)) Cyc_Dump_ignore, 0);}
! void Cyc_Dump_dumpdesignator( void* d){ void* _temp362= d; struct Cyc_Absyn_Exp*
! _temp368; struct _tagged_arr* _temp370; _LL364: if(*(( int*) _temp362) ==  Cyc_Absyn_ArrayElement){
! _LL369: _temp368=(( struct Cyc_Absyn_ArrayElement_struct*) _temp362)->f1; goto
! _LL365;} else{ goto _LL366;} _LL366: if(*(( int*) _temp362) ==  Cyc_Absyn_FieldName){
! _LL371: _temp370=(( struct Cyc_Absyn_FieldName_struct*) _temp362)->f1; goto
! _LL367;} else{ goto _LL363;} _LL365: Cyc_Dump_dump_symbol( _tag_arr(".[",
! sizeof( unsigned char), 3u)); Cyc_Dump_dumpexp( _temp368); Cyc_Dump_dump_char((
! int)']'); goto _LL363; _LL367: Cyc_Dump_dump_char(( int)'.'); Cyc_Dump_dump_alpha(*
! _temp370); goto _LL363; _LL363:;} struct _tuple13{ struct Cyc_List_List* f1;
  struct Cyc_Absyn_Exp* f2; } ; void Cyc_Dump_dumpde( struct _tuple13* de){ Cyc_Dump_egroup(
  Cyc_Dump_dumpdesignator,(* de).f1, _tag_arr("", sizeof( unsigned char), 1u),
  _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=", sizeof( unsigned char),
--- 1236,1264 ----
  struct Cyc_List_List*) _check_null( args))->tl !=  0? 1: c_varargs)? 1:
  cyc_varargs !=  0){ Cyc_Dump_dump_symbol( _tag_arr(", ", sizeof( unsigned char),
  3u));}} if( c_varargs){ Cyc_Dump_dump_symbol( _tag_arr("...", sizeof(
! unsigned char), 4u));} else{ if( cyc_varargs !=  0){ struct _tuple2* _temp358=({
! struct _tuple2* _temp359=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp359->f1=(( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->name;
! _temp359->f2=(( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->tq;
! _temp359->f3=( void*)(( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->type;
! _temp359;}); Cyc_Dump_dump_symbol( _tag_arr("...", sizeof( unsigned char), 4u));
  if((( struct Cyc_Absyn_VarargInfo*) _check_null( cyc_varargs))->inject){ Cyc_Dump_dump_alpha(
! _tag_arr(" inject", sizeof( unsigned char), 8u));} Cyc_Dump_dumpfunarg( _temp358);}}
  if( effopt !=  0){ Cyc_Dump_dump_semi(); Cyc_Dump_dumpeff(( void*)(( struct Cyc_Core_Opt*)
  _check_null( effopt))->v);} if( rgn_po !=  0){ Cyc_Dump_dump_char(( int)':');
  Cyc_Dump_dump_rgnpo( rgn_po);} Cyc_Dump_dump_char(( int)')');} void Cyc_Dump_dumptyp(
  void* t){(( void(*)( struct Cyc_Absyn_Tqual, void*, void(* f)( int), int)) Cyc_Dump_dumptqtd)(({
! struct Cyc_Absyn_Tqual _temp360; _temp360.q_const= 0; _temp360.q_volatile= 0;
! _temp360.q_restrict= 0; _temp360;}), t,( void(*)( int x)) Cyc_Dump_ignore, 0);}
! void Cyc_Dump_dumpdesignator( void* d){ void* _temp361= d; struct Cyc_Absyn_Exp*
! _temp367; struct _tagged_arr* _temp369; _LL363: if(*(( int*) _temp361) ==  Cyc_Absyn_ArrayElement){
! _LL368: _temp367=(( struct Cyc_Absyn_ArrayElement_struct*) _temp361)->f1; goto
! _LL364;} else{ goto _LL365;} _LL365: if(*(( int*) _temp361) ==  Cyc_Absyn_FieldName){
! _LL370: _temp369=(( struct Cyc_Absyn_FieldName_struct*) _temp361)->f1; goto
! _LL366;} else{ goto _LL362;} _LL364: Cyc_Dump_dump_symbol( _tag_arr(".[",
! sizeof( unsigned char), 3u)); Cyc_Dump_dumpexp( _temp367); Cyc_Dump_dump_char((
! int)']'); goto _LL362; _LL366: Cyc_Dump_dump_char(( int)'.'); Cyc_Dump_dump_alpha(*
! _temp369); goto _LL362; _LL362:;} struct _tuple13{ struct Cyc_List_List* f1;
  struct Cyc_Absyn_Exp* f2; } ; void Cyc_Dump_dumpde( struct _tuple13* de){ Cyc_Dump_egroup(
  Cyc_Dump_dumpdesignator,(* de).f1, _tag_arr("", sizeof( unsigned char), 1u),
  _tag_arr("=", sizeof( unsigned char), 2u), _tag_arr("=", sizeof( unsigned char),
***************
*** 1273,1588 ****
  es, _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("", sizeof( unsigned char),
  1u), _tag_arr(",", sizeof( unsigned char), 2u));} void Cyc_Dump_dumpexp_prec(
  int inprec, struct Cyc_Absyn_Exp* e){ int myprec= Cyc_Absynpp_exp_prec( e); if(
! inprec >=  myprec){ Cyc_Dump_dump_char(( int)'(');}{ void* _temp372=( void*) e->r;
! void* _temp470; unsigned char _temp472; void* _temp474; void* _temp476; short
! _temp478; void* _temp480; void* _temp482; int _temp484; void* _temp486; void*
! _temp488; int _temp490; void* _temp492; void* _temp494; long long _temp496; void*
! _temp498; void* _temp500; struct _tagged_arr _temp502; void* _temp504; void*
! _temp506; struct _tagged_arr _temp508; struct _tuple1* _temp510; struct _tuple1*
! _temp512; struct Cyc_List_List* _temp514; void* _temp516; struct Cyc_Absyn_Exp*
! _temp518; struct Cyc_Core_Opt* _temp520; struct Cyc_Absyn_Exp* _temp522; void*
! _temp524; struct Cyc_Absyn_Exp* _temp526; void* _temp528; struct Cyc_Absyn_Exp*
! _temp530; void* _temp532; struct Cyc_Absyn_Exp* _temp534; void* _temp536; struct
! Cyc_Absyn_Exp* _temp538; struct Cyc_Absyn_Exp* _temp540; struct Cyc_Absyn_Exp*
! _temp542; struct Cyc_Absyn_Exp* _temp544; struct Cyc_Absyn_Exp* _temp546; struct
! Cyc_Absyn_Exp* _temp548; struct Cyc_List_List* _temp550; struct Cyc_Absyn_Exp*
! _temp552; struct Cyc_List_List* _temp554; struct Cyc_Absyn_Exp* _temp556; struct
! Cyc_Absyn_Exp* _temp558; struct Cyc_Absyn_Exp* _temp560; struct Cyc_Absyn_Exp*
! _temp562; struct Cyc_Absyn_Exp* _temp564; void* _temp566; struct Cyc_Absyn_Exp*
! _temp568; struct Cyc_Absyn_Exp* _temp570; struct Cyc_Absyn_Exp* _temp572; void*
! _temp574; struct Cyc_Absyn_Exp* _temp576; void* _temp578; struct _tagged_arr*
! _temp580; void* _temp582; void* _temp584; unsigned int _temp586; void* _temp588;
! void* _temp590; struct Cyc_List_List* _temp592; struct Cyc_Absyn_Exp* _temp594;
! struct _tagged_arr* _temp596; struct Cyc_Absyn_Exp* _temp598; struct _tagged_arr*
! _temp600; struct Cyc_Absyn_Exp* _temp602; struct Cyc_Absyn_Exp* _temp604; struct
! Cyc_Absyn_Exp* _temp606; struct Cyc_List_List* _temp608; struct Cyc_List_List*
! _temp610; struct _tuple2* _temp612; struct Cyc_List_List* _temp614; struct Cyc_Absyn_Exp*
! _temp616; struct Cyc_Absyn_Exp* _temp618; struct Cyc_Absyn_Vardecl* _temp620;
! struct Cyc_List_List* _temp622; struct _tuple1* _temp624; struct Cyc_List_List*
! _temp626; struct Cyc_Absyn_Tunionfield* _temp628; struct Cyc_List_List* _temp630;
! struct _tuple1* _temp632; void* _temp634; struct Cyc_Absyn_Exp* _temp636; struct
! Cyc_List_List* _temp638; struct Cyc_Core_Opt* _temp640; struct Cyc_Absyn_Stmt*
! _temp642; struct Cyc_Absyn_Fndecl* _temp644; struct Cyc_Absyn_Exp* _temp646;
! _LL374: if(*(( int*) _temp372) ==  Cyc_Absyn_Const_e){ _LL471: _temp470=( void*)((
! struct Cyc_Absyn_Const_e_struct*) _temp372)->f1; if(( unsigned int) _temp470 > 
! 1u?*(( int*) _temp470) ==  Cyc_Absyn_Char_c: 0){ _LL475: _temp474=( void*)((
! struct Cyc_Absyn_Char_c_struct*) _temp470)->f1; goto _LL473; _LL473: _temp472=((
! struct Cyc_Absyn_Char_c_struct*) _temp470)->f2; goto _LL375;} else{ goto _LL376;}}
! else{ goto _LL376;} _LL376: if(*(( int*) _temp372) ==  Cyc_Absyn_Const_e){
! _LL477: _temp476=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp372)->f1; if((
! unsigned int) _temp476 >  1u?*(( int*) _temp476) ==  Cyc_Absyn_Short_c: 0){
! _LL481: _temp480=( void*)(( struct Cyc_Absyn_Short_c_struct*) _temp476)->f1;
! goto _LL479; _LL479: _temp478=(( struct Cyc_Absyn_Short_c_struct*) _temp476)->f2;
! goto _LL377;} else{ goto _LL378;}} else{ goto _LL378;} _LL378: if(*(( int*)
! _temp372) ==  Cyc_Absyn_Const_e){ _LL483: _temp482=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp372)->f1; if(( unsigned int) _temp482 >  1u?*(( int*) _temp482) ==  Cyc_Absyn_Int_c:
! 0){ _LL487: _temp486=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp482)->f1;
! if( _temp486 == ( void*) Cyc_Absyn_Signed){ goto _LL485;} else{ goto _LL380;}
! _LL485: _temp484=(( struct Cyc_Absyn_Int_c_struct*) _temp482)->f2; goto _LL379;}
! else{ goto _LL380;}} else{ goto _LL380;} _LL380: if(*(( int*) _temp372) ==  Cyc_Absyn_Const_e){
! _LL489: _temp488=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp372)->f1; if((
! unsigned int) _temp488 >  1u?*(( int*) _temp488) ==  Cyc_Absyn_Int_c: 0){ _LL493:
! _temp492=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp488)->f1; if( _temp492
! == ( void*) Cyc_Absyn_Unsigned){ goto _LL491;} else{ goto _LL382;} _LL491:
! _temp490=(( struct Cyc_Absyn_Int_c_struct*) _temp488)->f2; goto _LL381;} else{
! goto _LL382;}} else{ goto _LL382;} _LL382: if(*(( int*) _temp372) ==  Cyc_Absyn_Const_e){
! _LL495: _temp494=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp372)->f1; if((
! unsigned int) _temp494 >  1u?*(( int*) _temp494) ==  Cyc_Absyn_LongLong_c: 0){
! _LL499: _temp498=( void*)(( struct Cyc_Absyn_LongLong_c_struct*) _temp494)->f1;
! goto _LL497; _LL497: _temp496=(( struct Cyc_Absyn_LongLong_c_struct*) _temp494)->f2;
! goto _LL383;} else{ goto _LL384;}} else{ goto _LL384;} _LL384: if(*(( int*)
! _temp372) ==  Cyc_Absyn_Const_e){ _LL501: _temp500=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp372)->f1; if(( unsigned int) _temp500 >  1u?*(( int*) _temp500) ==  Cyc_Absyn_Float_c:
! 0){ _LL503: _temp502=(( struct Cyc_Absyn_Float_c_struct*) _temp500)->f1; goto
! _LL385;} else{ goto _LL386;}} else{ goto _LL386;} _LL386: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Const_e){ _LL505: _temp504=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp372)->f1; if( _temp504 == ( void*) Cyc_Absyn_Null_c){ goto _LL387;} else{
! goto _LL388;}} else{ goto _LL388;} _LL388: if(*(( int*) _temp372) ==  Cyc_Absyn_Const_e){
! _LL507: _temp506=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp372)->f1; if((
! unsigned int) _temp506 >  1u?*(( int*) _temp506) ==  Cyc_Absyn_String_c: 0){
! _LL509: _temp508=(( struct Cyc_Absyn_String_c_struct*) _temp506)->f1; goto
! _LL389;} else{ goto _LL390;}} else{ goto _LL390;} _LL390: if(*(( int*) _temp372)
! ==  Cyc_Absyn_UnknownId_e){ _LL511: _temp510=(( struct Cyc_Absyn_UnknownId_e_struct*)
! _temp372)->f1; goto _LL391;} else{ goto _LL392;} _LL392: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Var_e){ _LL513: _temp512=(( struct Cyc_Absyn_Var_e_struct*)
! _temp372)->f1; goto _LL393;} else{ goto _LL394;} _LL394: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Primop_e){ _LL517: _temp516=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp372)->f1; goto _LL515; _LL515: _temp514=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp372)->f2; goto _LL395;} else{ goto _LL396;} _LL396: if(*(( int*) _temp372)
! ==  Cyc_Absyn_AssignOp_e){ _LL523: _temp522=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp372)->f1; goto _LL521; _LL521: _temp520=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp372)->f2; goto _LL519; _LL519: _temp518=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp372)->f3; goto _LL397;} else{ goto _LL398;} _LL398: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Increment_e){ _LL527: _temp526=(( struct Cyc_Absyn_Increment_e_struct*)
! _temp372)->f1; goto _LL525; _LL525: _temp524=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp372)->f2; if( _temp524 == ( void*) Cyc_Absyn_PreInc){ goto _LL399;} else{
! goto _LL400;}} else{ goto _LL400;} _LL400: if(*(( int*) _temp372) ==  Cyc_Absyn_Increment_e){
! _LL531: _temp530=(( struct Cyc_Absyn_Increment_e_struct*) _temp372)->f1; goto
! _LL529; _LL529: _temp528=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp372)->f2; if( _temp528 == ( void*) Cyc_Absyn_PreDec){ goto _LL401;} else{
! goto _LL402;}} else{ goto _LL402;} _LL402: if(*(( int*) _temp372) ==  Cyc_Absyn_Increment_e){
! _LL535: _temp534=(( struct Cyc_Absyn_Increment_e_struct*) _temp372)->f1; goto
! _LL533; _LL533: _temp532=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp372)->f2; if( _temp532 == ( void*) Cyc_Absyn_PostInc){ goto _LL403;} else{
! goto _LL404;}} else{ goto _LL404;} _LL404: if(*(( int*) _temp372) ==  Cyc_Absyn_Increment_e){
! _LL539: _temp538=(( struct Cyc_Absyn_Increment_e_struct*) _temp372)->f1; goto
! _LL537; _LL537: _temp536=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp372)->f2; if( _temp536 == ( void*) Cyc_Absyn_PostDec){ goto _LL405;} else{
! goto _LL406;}} else{ goto _LL406;} _LL406: if(*(( int*) _temp372) ==  Cyc_Absyn_Conditional_e){
! _LL545: _temp544=(( struct Cyc_Absyn_Conditional_e_struct*) _temp372)->f1; goto
! _LL543; _LL543: _temp542=(( struct Cyc_Absyn_Conditional_e_struct*) _temp372)->f2;
! goto _LL541; _LL541: _temp540=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp372)->f3; goto _LL407;} else{ goto _LL408;} _LL408: if(*(( int*) _temp372)
! ==  Cyc_Absyn_SeqExp_e){ _LL549: _temp548=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp372)->f1; goto _LL547; _LL547: _temp546=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp372)->f2; goto _LL409;} else{ goto _LL410;} _LL410: if(*(( int*) _temp372)
! ==  Cyc_Absyn_UnknownCall_e){ _LL553: _temp552=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp372)->f1; goto _LL551; _LL551: _temp550=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp372)->f2; goto _LL411;} else{ goto _LL412;} _LL412: if(*(( int*) _temp372)
! ==  Cyc_Absyn_FnCall_e){ _LL557: _temp556=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp372)->f1; goto _LL555; _LL555: _temp554=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp372)->f2; goto _LL413;} else{ goto _LL414;} _LL414: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Throw_e){ _LL559: _temp558=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp372)->f1; goto _LL415;} else{ goto _LL416;} _LL416: if(*(( int*) _temp372)
! ==  Cyc_Absyn_NoInstantiate_e){ _LL561: _temp560=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp372)->f1; goto _LL417;} else{ goto _LL418;} _LL418: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Instantiate_e){ _LL563: _temp562=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp372)->f1; goto _LL419;} else{ goto _LL420;} _LL420: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Cast_e){ _LL567: _temp566=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp372)->f1; goto _LL565; _LL565: _temp564=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp372)->f2; goto _LL421;} else{ goto _LL422;} _LL422: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Address_e){ _LL569: _temp568=(( struct Cyc_Absyn_Address_e_struct*)
! _temp372)->f1; goto _LL423;} else{ goto _LL424;} _LL424: if(*(( int*) _temp372)
! ==  Cyc_Absyn_New_e){ _LL573: _temp572=(( struct Cyc_Absyn_New_e_struct*)
! _temp372)->f1; goto _LL571; _LL571: _temp570=(( struct Cyc_Absyn_New_e_struct*)
! _temp372)->f2; goto _LL425;} else{ goto _LL426;} _LL426: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Sizeoftyp_e){ _LL575: _temp574=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp372)->f1; goto _LL427;} else{ goto _LL428;} _LL428: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Sizeofexp_e){ _LL577: _temp576=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp372)->f1; goto _LL429;} else{ goto _LL430;} _LL430: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Offsetof_e){ _LL583: _temp582=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp372)->f1; goto _LL579; _LL579: _temp578=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp372)->f2; if(*(( int*) _temp578) ==  Cyc_Absyn_StructField){ _LL581:
! _temp580=(( struct Cyc_Absyn_StructField_struct*) _temp578)->f1; goto _LL431;}
! else{ goto _LL432;}} else{ goto _LL432;} _LL432: if(*(( int*) _temp372) ==  Cyc_Absyn_Offsetof_e){
! _LL589: _temp588=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*) _temp372)->f1;
! goto _LL585; _LL585: _temp584=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp372)->f2; if(*(( int*) _temp584) ==  Cyc_Absyn_TupleIndex){ _LL587:
! _temp586=(( struct Cyc_Absyn_TupleIndex_struct*) _temp584)->f1; goto _LL433;}
! else{ goto _LL434;}} else{ goto _LL434;} _LL434: if(*(( int*) _temp372) ==  Cyc_Absyn_Gentyp_e){
! _LL593: _temp592=(( struct Cyc_Absyn_Gentyp_e_struct*) _temp372)->f1; goto
! _LL591; _LL591: _temp590=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*) _temp372)->f2;
! goto _LL435;} else{ goto _LL436;} _LL436: if(*(( int*) _temp372) ==  Cyc_Absyn_Deref_e){
! _LL595: _temp594=(( struct Cyc_Absyn_Deref_e_struct*) _temp372)->f1; goto _LL437;}
! else{ goto _LL438;} _LL438: if(*(( int*) _temp372) ==  Cyc_Absyn_StructMember_e){
! _LL599: _temp598=(( struct Cyc_Absyn_StructMember_e_struct*) _temp372)->f1; goto
! _LL597; _LL597: _temp596=(( struct Cyc_Absyn_StructMember_e_struct*) _temp372)->f2;
! goto _LL439;} else{ goto _LL440;} _LL440: if(*(( int*) _temp372) ==  Cyc_Absyn_StructArrow_e){
! _LL603: _temp602=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp372)->f1; goto
! _LL601; _LL601: _temp600=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp372)->f2;
! goto _LL441;} else{ goto _LL442;} _LL442: if(*(( int*) _temp372) ==  Cyc_Absyn_Subscript_e){
! _LL607: _temp606=(( struct Cyc_Absyn_Subscript_e_struct*) _temp372)->f1; goto
! _LL605; _LL605: _temp604=(( struct Cyc_Absyn_Subscript_e_struct*) _temp372)->f2;
! goto _LL443;} else{ goto _LL444;} _LL444: if(*(( int*) _temp372) ==  Cyc_Absyn_Tuple_e){
! _LL609: _temp608=(( struct Cyc_Absyn_Tuple_e_struct*) _temp372)->f1; goto _LL445;}
! else{ goto _LL446;} _LL446: if(*(( int*) _temp372) ==  Cyc_Absyn_CompoundLit_e){
! _LL613: _temp612=(( struct Cyc_Absyn_CompoundLit_e_struct*) _temp372)->f1; goto
! _LL611; _LL611: _temp610=(( struct Cyc_Absyn_CompoundLit_e_struct*) _temp372)->f2;
! goto _LL447;} else{ goto _LL448;} _LL448: if(*(( int*) _temp372) ==  Cyc_Absyn_Array_e){
! _LL615: _temp614=(( struct Cyc_Absyn_Array_e_struct*) _temp372)->f1; goto _LL449;}
! else{ goto _LL450;} _LL450: if(*(( int*) _temp372) ==  Cyc_Absyn_Comprehension_e){
! _LL621: _temp620=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp372)->f1;
! goto _LL619; _LL619: _temp618=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp372)->f2; goto _LL617; _LL617: _temp616=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp372)->f3; goto _LL451;} else{ goto _LL452;} _LL452: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Struct_e){ _LL625: _temp624=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp372)->f1; goto _LL623; _LL623: _temp622=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp372)->f3; goto _LL453;} else{ goto _LL454;} _LL454: if(*(( int*) _temp372)
! ==  Cyc_Absyn_AnonStruct_e){ _LL627: _temp626=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp372)->f2; goto _LL455;} else{ goto _LL456;} _LL456: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Tunion_e){ _LL631: _temp630=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp372)->f3; goto _LL629; _LL629: _temp628=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp372)->f5; goto _LL457;} else{ goto _LL458;} _LL458: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Enum_e){ _LL633: _temp632=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp372)->f1; goto _LL459;} else{ goto _LL460;} _LL460: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Malloc_e){ _LL637: _temp636=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp372)->f1; goto _LL635; _LL635: _temp634=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp372)->f2; goto _LL461;} else{ goto _LL462;} _LL462: if(*(( int*) _temp372)
! ==  Cyc_Absyn_UnresolvedMem_e){ _LL641: _temp640=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp372)->f1; goto _LL639; _LL639: _temp638=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp372)->f2; goto _LL463;} else{ goto _LL464;} _LL464: if(*(( int*) _temp372)
! ==  Cyc_Absyn_StmtExp_e){ _LL643: _temp642=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp372)->f1; goto _LL465;} else{ goto _LL466;} _LL466: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Codegen_e){ _LL645: _temp644=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp372)->f1; goto _LL467;} else{ goto _LL468;} _LL468: if(*(( int*) _temp372)
! ==  Cyc_Absyn_Fill_e){ _LL647: _temp646=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp372)->f1; goto _LL469;} else{ goto _LL373;} _LL375: Cyc_Dump_dump_char((
! int)'\''); Cyc_Dump_dump_alpha( Cyc_Absynpp_char_escape( _temp472)); Cyc_Dump_dump_char((
! int)'\''); goto _LL373; _LL377: Cyc_Dump_dump_alpha(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp649; _temp649.tag= Cyc_Std_Int_pa; _temp649.f1=(
! int)(( unsigned int)(( int) _temp478));{ void* _temp648[ 1u]={& _temp649}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp648, sizeof( void*),
! 1u));}})); goto _LL373; _LL379: Cyc_Dump_dump_alpha(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp651; _temp651.tag= Cyc_Std_Int_pa; _temp651.f1=(
! int)(( unsigned int) _temp484);{ void* _temp650[ 1u]={& _temp651}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp650, sizeof( void*),
! 1u));}})); goto _LL373; _LL381: Cyc_Dump_dump_alpha(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp653; _temp653.tag= Cyc_Std_Int_pa; _temp653.f1=(
! int)(( unsigned int) _temp490);{ void* _temp652[ 1u]={& _temp653}; Cyc_Std_aprintf(
! _tag_arr("%du", sizeof( unsigned char), 4u), _tag_arr( _temp652, sizeof( void*),
! 1u));}})); goto _LL373; _LL383: Cyc_Dump_dump_alpha( _tag_arr("<<FIX LONG LONG CONSTANT>>",
! sizeof( unsigned char), 27u)); goto _LL373; _LL385: Cyc_Dump_dump_alpha(
! _temp502); goto _LL373; _LL387: Cyc_Dump_dump_alpha( _tag_arr("NULL", sizeof(
! unsigned char), 5u)); goto _LL373; _LL389: Cyc_Dump_dump_char(( int)'"'); Cyc_Dump_dump_alpha(
! Cyc_Absynpp_string_escape( _temp508)); Cyc_Dump_dump_char(( int)'"'); goto
! _LL373; _LL391: _temp512= _temp510; goto _LL393; _LL393: Cyc_Dump_dumpqvar(
! _temp512); goto _LL373; _LL395: { struct _tagged_arr _temp654= Cyc_Absynpp_prim2str(
! _temp516); switch((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp514)){ case 1: _LL655: if( _temp516 == ( void*) Cyc_Absyn_Size){ Cyc_Dump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp514))->hd);
  Cyc_Dump_dump_char(( int)'.'); Cyc_Dump_dump_alpha( _tag_arr("size", sizeof(
! unsigned char), 5u));} else{ Cyc_Dump_dump_symbol( _temp654); Cyc_Dump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp514))->hd);}
! break; case 2: _LL656: Cyc_Dump_dumpexp_prec( myprec,( struct Cyc_Absyn_Exp*)((
! struct Cyc_List_List*) _check_null( _temp514))->hd); Cyc_Dump_dump_symbol(
! _temp654); Cyc_Dump_dump_char(( int)' '); Cyc_Dump_dumpexp_prec( myprec,( struct
  Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( _temp514))->tl))->hd); break; default: _LL657:( int) _throw(( void*)({
! struct Cyc_Core_Failure_struct* _temp659=( struct Cyc_Core_Failure_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Failure_struct)); _temp659[ 0]=({ struct Cyc_Core_Failure_struct
! _temp660; _temp660.tag= Cyc_Core_Failure; _temp660.f1= _tag_arr("Absyndump -- Bad number of arguments to primop",
! sizeof( unsigned char), 47u); _temp660;}); _temp659;}));} goto _LL373;} _LL397:
! Cyc_Dump_dumpexp_prec( myprec, _temp522); if( _temp520 !=  0){ Cyc_Dump_dump_symbol(
! Cyc_Absynpp_prim2str(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp520))->v));}
  Cyc_Dump_dump_symbol( _tag_arr("=", sizeof( unsigned char), 2u)); Cyc_Dump_dumpexp_prec(
! myprec, _temp518); goto _LL373; _LL399: Cyc_Dump_dump_symbol( _tag_arr("++",
! sizeof( unsigned char), 3u)); Cyc_Dump_dumpexp_prec( myprec, _temp526); goto
! _LL373; _LL401: Cyc_Dump_dump_symbol( _tag_arr("--", sizeof( unsigned char), 3u));
! Cyc_Dump_dumpexp_prec( myprec, _temp530); goto _LL373; _LL403: Cyc_Dump_dumpexp_prec(
! myprec, _temp534); Cyc_Dump_dump_symbol( _tag_arr("++", sizeof( unsigned char),
! 3u)); goto _LL373; _LL405: Cyc_Dump_dumpexp_prec( myprec, _temp538); Cyc_Dump_dump_symbol(
! _tag_arr("--", sizeof( unsigned char), 3u)); goto _LL373; _LL407: Cyc_Dump_dumpexp_prec(
! myprec, _temp544); Cyc_Dump_dump_char(( int)'?'); Cyc_Dump_dumpexp_prec( 0,
! _temp542); Cyc_Dump_dump_char(( int)':'); Cyc_Dump_dumpexp_prec( myprec,
! _temp540); goto _LL373; _LL409: Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumpexp_prec(
! myprec, _temp548); Cyc_Dump_dump_char(( int)','); Cyc_Dump_dumpexp_prec( myprec,
! _temp546); Cyc_Dump_dump_char(( int)')'); goto _LL373; _LL411: _temp556=
! _temp552; _temp554= _temp550; goto _LL413; _LL413: Cyc_Dump_dumpexp_prec( myprec,
! _temp556); Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumpexps_prec( 20, _temp554);
! Cyc_Dump_dump_char(( int)')'); goto _LL373; _LL415: Cyc_Dump_dump_alpha(
  _tag_arr("throw", sizeof( unsigned char), 6u)); Cyc_Dump_dumpexp_prec( myprec,
! _temp558); goto _LL373; _LL417: _temp562= _temp560; goto _LL419; _LL419: Cyc_Dump_dumpexp_prec(
! inprec, _temp562); goto _LL373; _LL421: Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumptyp(
! _temp566); Cyc_Dump_dump_char(( int)')'); Cyc_Dump_dumpexp_prec( myprec,
! _temp564); goto _LL373; _LL423: Cyc_Dump_dump_char(( int)'&'); Cyc_Dump_dumpexp_prec(
! myprec, _temp568); goto _LL373; _LL425: Cyc_Dump_dump_alpha( _tag_arr("new",
! sizeof( unsigned char), 4u)); Cyc_Dump_dumpexp_prec( myprec, _temp570); goto
! _LL373; _LL427: Cyc_Dump_dump_alpha( _tag_arr("sizeof", sizeof( unsigned char),
! 7u)); Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumptyp( _temp574); Cyc_Dump_dump_char((
! int)')'); goto _LL373; _LL429: Cyc_Dump_dump_alpha( _tag_arr("sizeof", sizeof(
  unsigned char), 7u)); Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumpexp_prec(
! myprec, _temp576); Cyc_Dump_dump_char(( int)')'); goto _LL373; _LL431: Cyc_Dump_dump_alpha(
  _tag_arr("offsetof", sizeof( unsigned char), 9u)); Cyc_Dump_dump_char(( int)'(');
! Cyc_Dump_dumptyp( _temp582); Cyc_Dump_dump_char(( int)','); Cyc_Dump_dump_alpha(*
! _temp580); Cyc_Dump_dump_char(( int)')'); goto _LL373; _LL433: Cyc_Dump_dump_alpha(
! _tag_arr("offsetof(", sizeof( unsigned char), 10u)); Cyc_Dump_dumptyp( _temp588);
! Cyc_Dump_dump_char(( int)','); Cyc_Dump_dump_alpha(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp662; _temp662.tag= Cyc_Std_Int_pa; _temp662.f1=(
! int) _temp586;{ void* _temp661[ 1u]={& _temp662}; Cyc_Std_aprintf( _tag_arr("%d",
! sizeof( unsigned char), 3u), _tag_arr( _temp661, sizeof( void*), 1u));}})); Cyc_Dump_dump_char((
! int)')'); goto _LL373; _LL435: Cyc_Dump_dump_alpha( _tag_arr("__gen", sizeof(
! unsigned char), 6u)); Cyc_Dump_dumptvars( _temp592); Cyc_Dump_dump_char(( int)'(');
! Cyc_Dump_dumptyp( _temp590); Cyc_Dump_dump_char(( int)')'); goto _LL373; _LL437:
! Cyc_Dump_dump_char(( int)'*'); Cyc_Dump_dumpexp_prec( myprec, _temp594); goto
! _LL373; _LL439: Cyc_Dump_dumpexp_prec( myprec, _temp598); Cyc_Dump_dump_char((
! int)'.'); Cyc_Dump_dump_alpha(* _temp596); goto _LL373; _LL441: Cyc_Dump_dumpexp_prec(
! myprec, _temp602); Cyc_Dump_dump_symbol( _tag_arr("->", sizeof( unsigned char),
! 3u)); Cyc_Dump_dump_alpha(* _temp600); goto _LL373; _LL443: Cyc_Dump_dumpexp_prec(
! myprec, _temp606); Cyc_Dump_dump_char(( int)'['); Cyc_Dump_dumpexp( _temp604);
! Cyc_Dump_dump_char(( int)']'); goto _LL373; _LL445: Cyc_Dump_dump_symbol(
  _tag_arr("\\$(", sizeof( unsigned char), 4u)); Cyc_Dump_dumpexps_prec( 20,
! _temp608); Cyc_Dump_dump_char(( int)')'); goto _LL373; _LL447: Cyc_Dump_dump_char((
! int)'('); Cyc_Dump_dumptyp((* _temp612).f3); Cyc_Dump_dump_char(( int)')');((
  void(*)( void(* f)( struct _tuple13*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)(
! Cyc_Dump_dumpde, _temp610, _tag_arr("{\\lb}", sizeof( unsigned char), 6u),
  _tag_arr("{\\rb}", sizeof( unsigned char), 6u), _tag_arr(",", sizeof(
! unsigned char), 2u)); goto _LL373; _LL449:(( void(*)( void(* f)( struct _tuple13*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpde, _temp614, _tag_arr("{\\lb}",
  sizeof( unsigned char), 6u), _tag_arr("{\\rb}", sizeof( unsigned char), 6u),
! _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL373; _LL451: Cyc_Dump_dump_alpha(
  _tag_arr("new", sizeof( unsigned char), 4u)); Cyc_Dump_dump_char(( int)'{'); Cyc_Dump_dump_alpha(
! _tag_arr("for", sizeof( unsigned char), 4u)); Cyc_Dump_dump_alphastr((* _temp620->name).f2);
! Cyc_Dump_dump_char(( int)'<'); Cyc_Dump_dumpexp( _temp618); Cyc_Dump_dump_char((
! int)':'); Cyc_Dump_dumpexp( _temp616); Cyc_Dump_dump_char(( int)'}'); goto
! _LL373; _LL453: Cyc_Dump_dumpqvar( _temp624);(( void(*)( void(* f)( struct
  _tuple13*), struct Cyc_List_List* l, struct _tagged_arr start, struct
  _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpde,
! _temp622, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL373;
! _LL455:(( void(*)( void(* f)( struct _tuple13*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)(
! Cyc_Dump_dumpde, _temp626, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}",
  sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto
! _LL373; _LL457: Cyc_Dump_dumpqvar( _temp628->name); if( _temp630 !=  0){(( void(*)(
  void(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* l, struct _tagged_arr
  start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpexp,
! _temp630, _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u));} goto _LL373;
! _LL459: Cyc_Dump_dumpqvar( _temp632); goto _LL373; _LL461: if( _temp636 !=  0){
  Cyc_Dump_dump_alpha( _tag_arr("rmalloc", sizeof( unsigned char), 8u)); Cyc_Dump_dump_char((
! int)'('); Cyc_Dump_dumpexp(( struct Cyc_Absyn_Exp*) _check_null( _temp636)); Cyc_Dump_dump_symbol(
  _tag_arr(", ", sizeof( unsigned char), 3u));} else{ Cyc_Dump_dump_alpha(
  _tag_arr("malloc", sizeof( unsigned char), 7u)); Cyc_Dump_dump_char(( int)'(');}
  Cyc_Dump_dump_alpha( _tag_arr("sizeof", sizeof( unsigned char), 7u)); Cyc_Dump_dump_char((
! int)'('); Cyc_Dump_dumptyp( _temp634); Cyc_Dump_dump_symbol( _tag_arr("))",
! sizeof( unsigned char), 3u)); goto _LL373; _LL463:(( void(*)( void(* f)( struct
  _tuple13*), struct Cyc_List_List* l, struct _tagged_arr start, struct
  _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpde,
! _temp638, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL373;
! _LL465: goto _LL373; _LL467: goto _LL373; _LL469: goto _LL373; _LL373:;} if(
  inprec >=  myprec){ Cyc_Dump_dump_char(( int)')');}} void Cyc_Dump_dumpexp(
  struct Cyc_Absyn_Exp* e){ Cyc_Dump_dumpexp_prec( 0, e);} void Cyc_Dump_dumptunionfield(
  struct Cyc_Absyn_Tunionfield* ef){ Cyc_Dump_dumpqvar( ef->name); if( ef->typs != 
--- 1269,1569 ----
  es, _tag_arr("", sizeof( unsigned char), 1u), _tag_arr("", sizeof( unsigned char),
  1u), _tag_arr(",", sizeof( unsigned char), 2u));} void Cyc_Dump_dumpexp_prec(
  int inprec, struct Cyc_Absyn_Exp* e){ int myprec= Cyc_Absynpp_exp_prec( e); if(
! inprec >=  myprec){ Cyc_Dump_dump_char(( int)'(');}{ void* _temp371=( void*) e->r;
! void* _temp467; unsigned char _temp469; void* _temp471; void* _temp473; short
! _temp475; void* _temp477; void* _temp479; int _temp481; void* _temp483; void*
! _temp485; int _temp487; void* _temp489; void* _temp491; long long _temp493; void*
! _temp495; void* _temp497; struct _tagged_arr _temp499; void* _temp501; void*
! _temp503; struct _tagged_arr _temp505; struct _tuple1* _temp507; struct _tuple1*
! _temp509; struct Cyc_List_List* _temp511; void* _temp513; struct Cyc_Absyn_Exp*
! _temp515; struct Cyc_Core_Opt* _temp517; struct Cyc_Absyn_Exp* _temp519; void*
! _temp521; struct Cyc_Absyn_Exp* _temp523; void* _temp525; struct Cyc_Absyn_Exp*
! _temp527; void* _temp529; struct Cyc_Absyn_Exp* _temp531; void* _temp533; struct
! Cyc_Absyn_Exp* _temp535; struct Cyc_Absyn_Exp* _temp537; struct Cyc_Absyn_Exp*
! _temp539; struct Cyc_Absyn_Exp* _temp541; struct Cyc_Absyn_Exp* _temp543; struct
! Cyc_Absyn_Exp* _temp545; struct Cyc_List_List* _temp547; struct Cyc_Absyn_Exp*
! _temp549; struct Cyc_List_List* _temp551; struct Cyc_Absyn_Exp* _temp553; struct
! Cyc_Absyn_Exp* _temp555; struct Cyc_Absyn_Exp* _temp557; struct Cyc_Absyn_Exp*
! _temp559; struct Cyc_Absyn_Exp* _temp561; void* _temp563; struct Cyc_Absyn_Exp*
! _temp565; struct Cyc_Absyn_Exp* _temp567; struct Cyc_Absyn_Exp* _temp569; void*
! _temp571; struct Cyc_Absyn_Exp* _temp573; struct _tagged_arr* _temp575; void*
! _temp577; void* _temp579; struct Cyc_Absyn_Exp* _temp581; struct _tagged_arr*
! _temp583; struct Cyc_Absyn_Exp* _temp585; struct _tagged_arr* _temp587; struct
! Cyc_Absyn_Exp* _temp589; struct Cyc_Absyn_Exp* _temp591; struct Cyc_Absyn_Exp*
! _temp593; struct Cyc_List_List* _temp595; struct Cyc_List_List* _temp597; struct
! _tuple2* _temp599; struct Cyc_List_List* _temp601; struct Cyc_Absyn_Exp*
! _temp603; struct Cyc_Absyn_Exp* _temp605; struct Cyc_Absyn_Vardecl* _temp607;
! struct Cyc_List_List* _temp609; struct _tuple1* _temp611; struct Cyc_List_List*
! _temp613; struct Cyc_Absyn_Tunionfield* _temp615; struct Cyc_List_List* _temp617;
! struct _tuple1* _temp619; void* _temp621; struct Cyc_Absyn_Exp* _temp623; struct
! Cyc_List_List* _temp625; struct Cyc_Core_Opt* _temp627; struct Cyc_Absyn_Stmt*
! _temp629; struct Cyc_Absyn_Fndecl* _temp631; struct Cyc_Absyn_Exp* _temp633;
! _LL373: if(*(( int*) _temp371) ==  Cyc_Absyn_Const_e){ _LL468: _temp467=( void*)((
! struct Cyc_Absyn_Const_e_struct*) _temp371)->f1; if(( unsigned int) _temp467 > 
! 1u?*(( int*) _temp467) ==  Cyc_Absyn_Char_c: 0){ _LL472: _temp471=( void*)((
! struct Cyc_Absyn_Char_c_struct*) _temp467)->f1; goto _LL470; _LL470: _temp469=((
! struct Cyc_Absyn_Char_c_struct*) _temp467)->f2; goto _LL374;} else{ goto _LL375;}}
! else{ goto _LL375;} _LL375: if(*(( int*) _temp371) ==  Cyc_Absyn_Const_e){
! _LL474: _temp473=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp371)->f1; if((
! unsigned int) _temp473 >  1u?*(( int*) _temp473) ==  Cyc_Absyn_Short_c: 0){
! _LL478: _temp477=( void*)(( struct Cyc_Absyn_Short_c_struct*) _temp473)->f1;
! goto _LL476; _LL476: _temp475=(( struct Cyc_Absyn_Short_c_struct*) _temp473)->f2;
! goto _LL376;} else{ goto _LL377;}} else{ goto _LL377;} _LL377: if(*(( int*)
! _temp371) ==  Cyc_Absyn_Const_e){ _LL480: _temp479=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp371)->f1; if(( unsigned int) _temp479 >  1u?*(( int*) _temp479) ==  Cyc_Absyn_Int_c:
! 0){ _LL484: _temp483=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp479)->f1;
! if( _temp483 == ( void*) Cyc_Absyn_Signed){ goto _LL482;} else{ goto _LL379;}
! _LL482: _temp481=(( struct Cyc_Absyn_Int_c_struct*) _temp479)->f2; goto _LL378;}
! else{ goto _LL379;}} else{ goto _LL379;} _LL379: if(*(( int*) _temp371) ==  Cyc_Absyn_Const_e){
! _LL486: _temp485=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp371)->f1; if((
! unsigned int) _temp485 >  1u?*(( int*) _temp485) ==  Cyc_Absyn_Int_c: 0){ _LL490:
! _temp489=( void*)(( struct Cyc_Absyn_Int_c_struct*) _temp485)->f1; if( _temp489
! == ( void*) Cyc_Absyn_Unsigned){ goto _LL488;} else{ goto _LL381;} _LL488:
! _temp487=(( struct Cyc_Absyn_Int_c_struct*) _temp485)->f2; goto _LL380;} else{
! goto _LL381;}} else{ goto _LL381;} _LL381: if(*(( int*) _temp371) ==  Cyc_Absyn_Const_e){
! _LL492: _temp491=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp371)->f1; if((
! unsigned int) _temp491 >  1u?*(( int*) _temp491) ==  Cyc_Absyn_LongLong_c: 0){
! _LL496: _temp495=( void*)(( struct Cyc_Absyn_LongLong_c_struct*) _temp491)->f1;
! goto _LL494; _LL494: _temp493=(( struct Cyc_Absyn_LongLong_c_struct*) _temp491)->f2;
! goto _LL382;} else{ goto _LL383;}} else{ goto _LL383;} _LL383: if(*(( int*)
! _temp371) ==  Cyc_Absyn_Const_e){ _LL498: _temp497=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp371)->f1; if(( unsigned int) _temp497 >  1u?*(( int*) _temp497) ==  Cyc_Absyn_Float_c:
! 0){ _LL500: _temp499=(( struct Cyc_Absyn_Float_c_struct*) _temp497)->f1; goto
! _LL384;} else{ goto _LL385;}} else{ goto _LL385;} _LL385: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Const_e){ _LL502: _temp501=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp371)->f1; if( _temp501 == ( void*) Cyc_Absyn_Null_c){ goto _LL386;} else{
! goto _LL387;}} else{ goto _LL387;} _LL387: if(*(( int*) _temp371) ==  Cyc_Absyn_Const_e){
! _LL504: _temp503=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp371)->f1; if((
! unsigned int) _temp503 >  1u?*(( int*) _temp503) ==  Cyc_Absyn_String_c: 0){
! _LL506: _temp505=(( struct Cyc_Absyn_String_c_struct*) _temp503)->f1; goto
! _LL388;} else{ goto _LL389;}} else{ goto _LL389;} _LL389: if(*(( int*) _temp371)
! ==  Cyc_Absyn_UnknownId_e){ _LL508: _temp507=(( struct Cyc_Absyn_UnknownId_e_struct*)
! _temp371)->f1; goto _LL390;} else{ goto _LL391;} _LL391: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Var_e){ _LL510: _temp509=(( struct Cyc_Absyn_Var_e_struct*)
! _temp371)->f1; goto _LL392;} else{ goto _LL393;} _LL393: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Primop_e){ _LL514: _temp513=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp371)->f1; goto _LL512; _LL512: _temp511=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp371)->f2; goto _LL394;} else{ goto _LL395;} _LL395: if(*(( int*) _temp371)
! ==  Cyc_Absyn_AssignOp_e){ _LL520: _temp519=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp371)->f1; goto _LL518; _LL518: _temp517=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp371)->f2; goto _LL516; _LL516: _temp515=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp371)->f3; goto _LL396;} else{ goto _LL397;} _LL397: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Increment_e){ _LL524: _temp523=(( struct Cyc_Absyn_Increment_e_struct*)
! _temp371)->f1; goto _LL522; _LL522: _temp521=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp371)->f2; if( _temp521 == ( void*) Cyc_Absyn_PreInc){ goto _LL398;} else{
! goto _LL399;}} else{ goto _LL399;} _LL399: if(*(( int*) _temp371) ==  Cyc_Absyn_Increment_e){
! _LL528: _temp527=(( struct Cyc_Absyn_Increment_e_struct*) _temp371)->f1; goto
! _LL526; _LL526: _temp525=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp371)->f2; if( _temp525 == ( void*) Cyc_Absyn_PreDec){ goto _LL400;} else{
! goto _LL401;}} else{ goto _LL401;} _LL401: if(*(( int*) _temp371) ==  Cyc_Absyn_Increment_e){
! _LL532: _temp531=(( struct Cyc_Absyn_Increment_e_struct*) _temp371)->f1; goto
! _LL530; _LL530: _temp529=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp371)->f2; if( _temp529 == ( void*) Cyc_Absyn_PostInc){ goto _LL402;} else{
! goto _LL403;}} else{ goto _LL403;} _LL403: if(*(( int*) _temp371) ==  Cyc_Absyn_Increment_e){
! _LL536: _temp535=(( struct Cyc_Absyn_Increment_e_struct*) _temp371)->f1; goto
! _LL534; _LL534: _temp533=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp371)->f2; if( _temp533 == ( void*) Cyc_Absyn_PostDec){ goto _LL404;} else{
! goto _LL405;}} else{ goto _LL405;} _LL405: if(*(( int*) _temp371) ==  Cyc_Absyn_Conditional_e){
! _LL542: _temp541=(( struct Cyc_Absyn_Conditional_e_struct*) _temp371)->f1; goto
! _LL540; _LL540: _temp539=(( struct Cyc_Absyn_Conditional_e_struct*) _temp371)->f2;
! goto _LL538; _LL538: _temp537=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp371)->f3; goto _LL406;} else{ goto _LL407;} _LL407: if(*(( int*) _temp371)
! ==  Cyc_Absyn_SeqExp_e){ _LL546: _temp545=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp371)->f1; goto _LL544; _LL544: _temp543=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp371)->f2; goto _LL408;} else{ goto _LL409;} _LL409: if(*(( int*) _temp371)
! ==  Cyc_Absyn_UnknownCall_e){ _LL550: _temp549=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp371)->f1; goto _LL548; _LL548: _temp547=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp371)->f2; goto _LL410;} else{ goto _LL411;} _LL411: if(*(( int*) _temp371)
! ==  Cyc_Absyn_FnCall_e){ _LL554: _temp553=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp371)->f1; goto _LL552; _LL552: _temp551=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp371)->f2; goto _LL412;} else{ goto _LL413;} _LL413: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Throw_e){ _LL556: _temp555=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp371)->f1; goto _LL414;} else{ goto _LL415;} _LL415: if(*(( int*) _temp371)
! ==  Cyc_Absyn_NoInstantiate_e){ _LL558: _temp557=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp371)->f1; goto _LL416;} else{ goto _LL417;} _LL417: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Instantiate_e){ _LL560: _temp559=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp371)->f1; goto _LL418;} else{ goto _LL419;} _LL419: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Cast_e){ _LL564: _temp563=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp371)->f1; goto _LL562; _LL562: _temp561=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp371)->f2; goto _LL420;} else{ goto _LL421;} _LL421: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Address_e){ _LL566: _temp565=(( struct Cyc_Absyn_Address_e_struct*)
! _temp371)->f1; goto _LL422;} else{ goto _LL423;} _LL423: if(*(( int*) _temp371)
! ==  Cyc_Absyn_New_e){ _LL570: _temp569=(( struct Cyc_Absyn_New_e_struct*)
! _temp371)->f1; goto _LL568; _LL568: _temp567=(( struct Cyc_Absyn_New_e_struct*)
! _temp371)->f2; goto _LL424;} else{ goto _LL425;} _LL425: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Sizeoftyp_e){ _LL572: _temp571=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp371)->f1; goto _LL426;} else{ goto _LL427;} _LL427: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Sizeofexp_e){ _LL574: _temp573=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp371)->f1; goto _LL428;} else{ goto _LL429;} _LL429: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Offsetof_e){ _LL578: _temp577=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp371)->f1; goto _LL576; _LL576: _temp575=(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp371)->f2; goto _LL430;} else{ goto _LL431;} _LL431: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Gentyp_e){ _LL580: _temp579=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*)
! _temp371)->f1; goto _LL432;} else{ goto _LL433;} _LL433: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Deref_e){ _LL582: _temp581=(( struct Cyc_Absyn_Deref_e_struct*)
! _temp371)->f1; goto _LL434;} else{ goto _LL435;} _LL435: if(*(( int*) _temp371)
! ==  Cyc_Absyn_StructMember_e){ _LL586: _temp585=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp371)->f1; goto _LL584; _LL584: _temp583=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp371)->f2; goto _LL436;} else{ goto _LL437;} _LL437: if(*(( int*) _temp371)
! ==  Cyc_Absyn_StructArrow_e){ _LL590: _temp589=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp371)->f1; goto _LL588; _LL588: _temp587=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp371)->f2; goto _LL438;} else{ goto _LL439;} _LL439: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Subscript_e){ _LL594: _temp593=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp371)->f1; goto _LL592; _LL592: _temp591=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp371)->f2; goto _LL440;} else{ goto _LL441;} _LL441: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Tuple_e){ _LL596: _temp595=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp371)->f1; goto _LL442;} else{ goto _LL443;} _LL443: if(*(( int*) _temp371)
! ==  Cyc_Absyn_CompoundLit_e){ _LL600: _temp599=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp371)->f1; goto _LL598; _LL598: _temp597=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp371)->f2; goto _LL444;} else{ goto _LL445;} _LL445: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Array_e){ _LL602: _temp601=(( struct Cyc_Absyn_Array_e_struct*)
! _temp371)->f1; goto _LL446;} else{ goto _LL447;} _LL447: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Comprehension_e){ _LL608: _temp607=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp371)->f1; goto _LL606; _LL606: _temp605=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp371)->f2; goto _LL604; _LL604: _temp603=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp371)->f3; goto _LL448;} else{ goto _LL449;} _LL449: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Struct_e){ _LL612: _temp611=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp371)->f1; goto _LL610; _LL610: _temp609=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp371)->f3; goto _LL450;} else{ goto _LL451;} _LL451: if(*(( int*) _temp371)
! ==  Cyc_Absyn_AnonStruct_e){ _LL614: _temp613=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp371)->f2; goto _LL452;} else{ goto _LL453;} _LL453: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Tunion_e){ _LL618: _temp617=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp371)->f3; goto _LL616; _LL616: _temp615=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp371)->f5; goto _LL454;} else{ goto _LL455;} _LL455: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Enum_e){ _LL620: _temp619=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp371)->f1; goto _LL456;} else{ goto _LL457;} _LL457: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Malloc_e){ _LL624: _temp623=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp371)->f1; goto _LL622; _LL622: _temp621=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp371)->f2; goto _LL458;} else{ goto _LL459;} _LL459: if(*(( int*) _temp371)
! ==  Cyc_Absyn_UnresolvedMem_e){ _LL628: _temp627=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp371)->f1; goto _LL626; _LL626: _temp625=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp371)->f2; goto _LL460;} else{ goto _LL461;} _LL461: if(*(( int*) _temp371)
! ==  Cyc_Absyn_StmtExp_e){ _LL630: _temp629=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp371)->f1; goto _LL462;} else{ goto _LL463;} _LL463: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Codegen_e){ _LL632: _temp631=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp371)->f1; goto _LL464;} else{ goto _LL465;} _LL465: if(*(( int*) _temp371)
! ==  Cyc_Absyn_Fill_e){ _LL634: _temp633=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp371)->f1; goto _LL466;} else{ goto _LL372;} _LL374: Cyc_Dump_dump_char((
! int)'\''); Cyc_Dump_dump_alpha( Cyc_Absynpp_char_escape( _temp469)); Cyc_Dump_dump_char((
! int)'\''); goto _LL372; _LL376: Cyc_Dump_dump_alpha(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp636; _temp636.tag= Cyc_Std_Int_pa; _temp636.f1=(
! int)(( unsigned int)(( int) _temp475));{ void* _temp635[ 1u]={& _temp636}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp635, sizeof( void*),
! 1u));}})); goto _LL372; _LL378: Cyc_Dump_dump_alpha(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp638; _temp638.tag= Cyc_Std_Int_pa; _temp638.f1=(
! int)(( unsigned int) _temp481);{ void* _temp637[ 1u]={& _temp638}; Cyc_Std_aprintf(
! _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr( _temp637, sizeof( void*),
! 1u));}})); goto _LL372; _LL380: Cyc_Dump_dump_alpha(( struct _tagged_arr)({
! struct Cyc_Std_Int_pa_struct _temp640; _temp640.tag= Cyc_Std_Int_pa; _temp640.f1=(
! int)(( unsigned int) _temp487);{ void* _temp639[ 1u]={& _temp640}; Cyc_Std_aprintf(
! _tag_arr("%du", sizeof( unsigned char), 4u), _tag_arr( _temp639, sizeof( void*),
! 1u));}})); goto _LL372; _LL382: Cyc_Dump_dump_alpha( _tag_arr("<<FIX LONG LONG CONSTANT>>",
! sizeof( unsigned char), 27u)); goto _LL372; _LL384: Cyc_Dump_dump_alpha(
! _temp499); goto _LL372; _LL386: Cyc_Dump_dump_alpha( _tag_arr("NULL", sizeof(
! unsigned char), 5u)); goto _LL372; _LL388: Cyc_Dump_dump_char(( int)'"'); Cyc_Dump_dump_alpha(
! Cyc_Absynpp_string_escape( _temp505)); Cyc_Dump_dump_char(( int)'"'); goto
! _LL372; _LL390: _temp509= _temp507; goto _LL392; _LL392: Cyc_Dump_dumpqvar(
! _temp509); goto _LL372; _LL394: { struct _tagged_arr _temp641= Cyc_Absynpp_prim2str(
! _temp513); switch((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp511)){ case 1: _LL642: if( _temp513 == ( void*) Cyc_Absyn_Size){ Cyc_Dump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp511))->hd);
  Cyc_Dump_dump_char(( int)'.'); Cyc_Dump_dump_alpha( _tag_arr("size", sizeof(
! unsigned char), 5u));} else{ Cyc_Dump_dump_symbol( _temp641); Cyc_Dump_dumpexp_prec(
! myprec,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp511))->hd);}
! break; case 2: _LL643: Cyc_Dump_dumpexp_prec( myprec,( struct Cyc_Absyn_Exp*)((
! struct Cyc_List_List*) _check_null( _temp511))->hd); Cyc_Dump_dump_symbol(
! _temp641); Cyc_Dump_dump_char(( int)' '); Cyc_Dump_dumpexp_prec( myprec,( struct
  Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( _temp511))->tl))->hd); break; default: _LL644:( int) _throw(( void*)({
! struct Cyc_Core_Failure_struct* _temp646=( struct Cyc_Core_Failure_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Failure_struct)); _temp646[ 0]=({ struct Cyc_Core_Failure_struct
! _temp647; _temp647.tag= Cyc_Core_Failure; _temp647.f1= _tag_arr("Absyndump -- Bad number of arguments to primop",
! sizeof( unsigned char), 47u); _temp647;}); _temp646;}));} goto _LL372;} _LL396:
! Cyc_Dump_dumpexp_prec( myprec, _temp519); if( _temp517 !=  0){ Cyc_Dump_dump_symbol(
! Cyc_Absynpp_prim2str(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp517))->v));}
  Cyc_Dump_dump_symbol( _tag_arr("=", sizeof( unsigned char), 2u)); Cyc_Dump_dumpexp_prec(
! myprec, _temp515); goto _LL372; _LL398: Cyc_Dump_dump_symbol( _tag_arr("++",
! sizeof( unsigned char), 3u)); Cyc_Dump_dumpexp_prec( myprec, _temp523); goto
! _LL372; _LL400: Cyc_Dump_dump_symbol( _tag_arr("--", sizeof( unsigned char), 3u));
! Cyc_Dump_dumpexp_prec( myprec, _temp527); goto _LL372; _LL402: Cyc_Dump_dumpexp_prec(
! myprec, _temp531); Cyc_Dump_dump_symbol( _tag_arr("++", sizeof( unsigned char),
! 3u)); goto _LL372; _LL404: Cyc_Dump_dumpexp_prec( myprec, _temp535); Cyc_Dump_dump_symbol(
! _tag_arr("--", sizeof( unsigned char), 3u)); goto _LL372; _LL406: Cyc_Dump_dumpexp_prec(
! myprec, _temp541); Cyc_Dump_dump_char(( int)'?'); Cyc_Dump_dumpexp_prec( 0,
! _temp539); Cyc_Dump_dump_char(( int)':'); Cyc_Dump_dumpexp_prec( myprec,
! _temp537); goto _LL372; _LL408: Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumpexp_prec(
! myprec, _temp545); Cyc_Dump_dump_char(( int)','); Cyc_Dump_dumpexp_prec( myprec,
! _temp543); Cyc_Dump_dump_char(( int)')'); goto _LL372; _LL410: _temp553=
! _temp549; _temp551= _temp547; goto _LL412; _LL412: Cyc_Dump_dumpexp_prec( myprec,
! _temp553); Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumpexps_prec( 20, _temp551);
! Cyc_Dump_dump_char(( int)')'); goto _LL372; _LL414: Cyc_Dump_dump_alpha(
  _tag_arr("throw", sizeof( unsigned char), 6u)); Cyc_Dump_dumpexp_prec( myprec,
! _temp555); goto _LL372; _LL416: _temp559= _temp557; goto _LL418; _LL418: Cyc_Dump_dumpexp_prec(
! inprec, _temp559); goto _LL372; _LL420: Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumptyp(
! _temp563); Cyc_Dump_dump_char(( int)')'); Cyc_Dump_dumpexp_prec( myprec,
! _temp561); goto _LL372; _LL422: Cyc_Dump_dump_char(( int)'&'); Cyc_Dump_dumpexp_prec(
! myprec, _temp565); goto _LL372; _LL424: Cyc_Dump_dump_alpha( _tag_arr("new",
! sizeof( unsigned char), 4u)); Cyc_Dump_dumpexp_prec( myprec, _temp567); goto
! _LL372; _LL426: Cyc_Dump_dump_alpha( _tag_arr("sizeof", sizeof( unsigned char),
! 7u)); Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumptyp( _temp571); Cyc_Dump_dump_char((
! int)')'); goto _LL372; _LL428: Cyc_Dump_dump_alpha( _tag_arr("sizeof", sizeof(
  unsigned char), 7u)); Cyc_Dump_dump_char(( int)'('); Cyc_Dump_dumpexp_prec(
! myprec, _temp573); Cyc_Dump_dump_char(( int)')'); goto _LL372; _LL430: Cyc_Dump_dump_alpha(
  _tag_arr("offsetof", sizeof( unsigned char), 9u)); Cyc_Dump_dump_char(( int)'(');
! Cyc_Dump_dumptyp( _temp577); Cyc_Dump_dump_char(( int)','); Cyc_Dump_dump_alpha(*
! _temp575); Cyc_Dump_dump_char(( int)')'); goto _LL372; _LL432: Cyc_Dump_dump_alpha(
! _tag_arr("__gen", sizeof( unsigned char), 6u)); Cyc_Dump_dump_char(( int)'(');
! Cyc_Dump_dumptyp( _temp579); Cyc_Dump_dump_char(( int)')'); goto _LL372; _LL434:
! Cyc_Dump_dump_char(( int)'*'); Cyc_Dump_dumpexp_prec( myprec, _temp581); goto
! _LL372; _LL436: Cyc_Dump_dumpexp_prec( myprec, _temp585); Cyc_Dump_dump_char((
! int)'.'); Cyc_Dump_dump_alpha(* _temp583); goto _LL372; _LL438: Cyc_Dump_dumpexp_prec(
! myprec, _temp589); Cyc_Dump_dump_symbol( _tag_arr("->", sizeof( unsigned char),
! 3u)); Cyc_Dump_dump_alpha(* _temp587); goto _LL372; _LL440: Cyc_Dump_dumpexp_prec(
! myprec, _temp593); Cyc_Dump_dump_char(( int)'['); Cyc_Dump_dumpexp( _temp591);
! Cyc_Dump_dump_char(( int)']'); goto _LL372; _LL442: Cyc_Dump_dump_symbol(
  _tag_arr("\\$(", sizeof( unsigned char), 4u)); Cyc_Dump_dumpexps_prec( 20,
! _temp595); Cyc_Dump_dump_char(( int)')'); goto _LL372; _LL444: Cyc_Dump_dump_char((
! int)'('); Cyc_Dump_dumptyp((* _temp599).f3); Cyc_Dump_dump_char(( int)')');((
  void(*)( void(* f)( struct _tuple13*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)(
! Cyc_Dump_dumpde, _temp597, _tag_arr("{\\lb}", sizeof( unsigned char), 6u),
  _tag_arr("{\\rb}", sizeof( unsigned char), 6u), _tag_arr(",", sizeof(
! unsigned char), 2u)); goto _LL372; _LL446:(( void(*)( void(* f)( struct _tuple13*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpde, _temp601, _tag_arr("{\\lb}",
  sizeof( unsigned char), 6u), _tag_arr("{\\rb}", sizeof( unsigned char), 6u),
! _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL372; _LL448: Cyc_Dump_dump_alpha(
  _tag_arr("new", sizeof( unsigned char), 4u)); Cyc_Dump_dump_char(( int)'{'); Cyc_Dump_dump_alpha(
! _tag_arr("for", sizeof( unsigned char), 4u)); Cyc_Dump_dump_alphastr((* _temp607->name).f2);
! Cyc_Dump_dump_char(( int)'<'); Cyc_Dump_dumpexp( _temp605); Cyc_Dump_dump_char((
! int)':'); Cyc_Dump_dumpexp( _temp603); Cyc_Dump_dump_char(( int)'}'); goto
! _LL372; _LL450: Cyc_Dump_dumpqvar( _temp611);(( void(*)( void(* f)( struct
  _tuple13*), struct Cyc_List_List* l, struct _tagged_arr start, struct
  _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpde,
! _temp609, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL372;
! _LL452:(( void(*)( void(* f)( struct _tuple13*), struct Cyc_List_List* l, struct
  _tagged_arr start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)(
! Cyc_Dump_dumpde, _temp613, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}",
  sizeof( unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto
! _LL372; _LL454: Cyc_Dump_dumpqvar( _temp615->name); if( _temp617 !=  0){(( void(*)(
  void(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* l, struct _tagged_arr
  start, struct _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpexp,
! _temp617, _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u));} goto _LL372;
! _LL456: Cyc_Dump_dumpqvar( _temp619); goto _LL372; _LL458: if( _temp623 !=  0){
  Cyc_Dump_dump_alpha( _tag_arr("rmalloc", sizeof( unsigned char), 8u)); Cyc_Dump_dump_char((
! int)'('); Cyc_Dump_dumpexp(( struct Cyc_Absyn_Exp*) _check_null( _temp623)); Cyc_Dump_dump_symbol(
  _tag_arr(", ", sizeof( unsigned char), 3u));} else{ Cyc_Dump_dump_alpha(
  _tag_arr("malloc", sizeof( unsigned char), 7u)); Cyc_Dump_dump_char(( int)'(');}
  Cyc_Dump_dump_alpha( _tag_arr("sizeof", sizeof( unsigned char), 7u)); Cyc_Dump_dump_char((
! int)'('); Cyc_Dump_dumptyp( _temp621); Cyc_Dump_dump_symbol( _tag_arr("))",
! sizeof( unsigned char), 3u)); goto _LL372; _LL460:(( void(*)( void(* f)( struct
  _tuple13*), struct Cyc_List_List* l, struct _tagged_arr start, struct
  _tagged_arr end, struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dumpde,
! _temp625, _tag_arr("{", sizeof( unsigned char), 2u), _tag_arr("}", sizeof(
! unsigned char), 2u), _tag_arr(",", sizeof( unsigned char), 2u)); goto _LL372;
! _LL462: goto _LL372; _LL464: goto _LL372; _LL466: goto _LL372; _LL372:;} if(
  inprec >=  myprec){ Cyc_Dump_dump_char(( int)')');}} void Cyc_Dump_dumpexp(
  struct Cyc_Absyn_Exp* e){ Cyc_Dump_dumpexp_prec( 0, e);} void Cyc_Dump_dumptunionfield(
  struct Cyc_Absyn_Tunionfield* ef){ Cyc_Dump_dumpqvar( ef->name); if( ef->typs != 
***************
*** 1598,1614 ****
  fields, _tag_arr(",\\\\\n~~", sizeof( unsigned char), 7u));} void Cyc_Dump_dumpstructfields(
  struct Cyc_List_List* fields){ for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
  _check_null( fields))->tl){ Cyc_Dump_dump_symbol( _tag_arr("~~", sizeof(
! unsigned char), 3u));{ struct Cyc_Absyn_Structfield _temp665; struct Cyc_List_List*
! _temp666; struct Cyc_Absyn_Exp* _temp668; void* _temp670; struct Cyc_Absyn_Tqual
! _temp672; struct _tagged_arr* _temp674; struct Cyc_Absyn_Structfield* _temp663=(
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fields))->hd;
! _temp665=* _temp663; _LL675: _temp674= _temp665.name; goto _LL673; _LL673:
! _temp672= _temp665.tq; goto _LL671; _LL671: _temp670=( void*) _temp665.type;
! goto _LL669; _LL669: _temp668= _temp665.width; goto _LL667; _LL667: _temp666=
! _temp665.attributes; goto _LL664; _LL664:(( void(*)( struct Cyc_Absyn_Tqual,
  void*, void(* f)( struct _tagged_arr*), struct _tagged_arr*)) Cyc_Dump_dumptqtd)(
! _temp672, _temp670, Cyc_Dump_dump_alphastr, _temp674); if( _temp668 !=  0){ Cyc_Dump_dump_char((
! int)':'); Cyc_Dump_dumpexp(( struct Cyc_Absyn_Exp*) _check_null( _temp668));}
  Cyc_Dump_dump_symbol( _tag_arr(";\\\\\n", sizeof( unsigned char), 5u));}}} void
  Cyc_Dump_dumptypedefname( struct Cyc_Absyn_Typedefdecl* td){ Cyc_Dump_dumpqvar(
  td->name); Cyc_Dump_dumptvars( td->tvs);} void Cyc_Dump_dump_boldtypedefname(
--- 1579,1595 ----
  fields, _tag_arr(",\\\\\n~~", sizeof( unsigned char), 7u));} void Cyc_Dump_dumpstructfields(
  struct Cyc_List_List* fields){ for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
  _check_null( fields))->tl){ Cyc_Dump_dump_symbol( _tag_arr("~~", sizeof(
! unsigned char), 3u));{ struct Cyc_Absyn_Structfield _temp650; struct Cyc_List_List*
! _temp651; struct Cyc_Absyn_Exp* _temp653; void* _temp655; struct Cyc_Absyn_Tqual
! _temp657; struct _tagged_arr* _temp659; struct Cyc_Absyn_Structfield* _temp648=(
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fields))->hd;
! _temp650=* _temp648; _LL660: _temp659= _temp650.name; goto _LL658; _LL658:
! _temp657= _temp650.tq; goto _LL656; _LL656: _temp655=( void*) _temp650.type;
! goto _LL654; _LL654: _temp653= _temp650.width; goto _LL652; _LL652: _temp651=
! _temp650.attributes; goto _LL649; _LL649:(( void(*)( struct Cyc_Absyn_Tqual,
  void*, void(* f)( struct _tagged_arr*), struct _tagged_arr*)) Cyc_Dump_dumptqtd)(
! _temp657, _temp655, Cyc_Dump_dump_alphastr, _temp659); if( _temp653 !=  0){ Cyc_Dump_dump_char((
! int)':'); Cyc_Dump_dumpexp(( struct Cyc_Absyn_Exp*) _check_null( _temp653));}
  Cyc_Dump_dump_symbol( _tag_arr(";\\\\\n", sizeof( unsigned char), 5u));}}} void
  Cyc_Dump_dumptypedefname( struct Cyc_Absyn_Typedefdecl* td){ Cyc_Dump_dumpqvar(
  td->name); Cyc_Dump_dumptvars( td->tvs);} void Cyc_Dump_dump_boldtypedefname(
***************
*** 1621,1787 ****
  unsigned int i= Cyc_Evexp_eval_const_uint_exp( e); if( i !=  1){ Cyc_Dump_dump_char((
  int)'{'); Cyc_Dump_dumpexp( e); Cyc_Dump_dump_char(( int)'}');}} void Cyc_Dump_dumptms(
  struct Cyc_List_List* tms, void(* f)( void*), void* a){ if( tms ==  0){ f( a);
! return;}{ void* _temp676=( void*)(( struct Cyc_List_List*) _check_null( tms))->hd;
! struct Cyc_Absyn_Tqual _temp698; void* _temp700; void* _temp702; struct Cyc_Absyn_Exp*
! _temp704; struct Cyc_Absyn_Tqual _temp706; void* _temp708; void* _temp710;
! struct Cyc_Absyn_Exp* _temp712; struct Cyc_Absyn_Tqual _temp714; void* _temp716;
! void* _temp718; struct Cyc_Absyn_Tqual _temp720; void* _temp722; struct Cyc_Absyn_Tvar*
! _temp724; void* _temp726; struct Cyc_Absyn_Exp* _temp728; struct Cyc_Absyn_Tqual
! _temp730; void* _temp732; struct Cyc_Absyn_Tvar* _temp734; void* _temp736;
! struct Cyc_Absyn_Exp* _temp738; struct Cyc_Absyn_Tqual _temp740; void* _temp742;
! struct Cyc_Absyn_Tvar* _temp744; void* _temp746; struct Cyc_Absyn_Tqual _temp748;
! void* _temp750; struct Cyc_Absyn_Exp* _temp752; struct Cyc_Absyn_Tqual _temp754;
! void* _temp756; struct Cyc_Absyn_Exp* _temp758; struct Cyc_Absyn_Tqual _temp760;
! void* _temp762; _LL678: if(( unsigned int) _temp676 >  1u?*(( int*) _temp676) == 
! Cyc_Absyn_Pointer_mod: 0){ _LL703: _temp702=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f1; if(( unsigned int) _temp702 >  1u?*(( int*) _temp702) ==  Cyc_Absyn_Nullable_ps:
! 0){ _LL705: _temp704=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp702)->f1;
! goto _LL701;} else{ goto _LL680;} _LL701: _temp700=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f2; if( _temp700 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL699;} else{
! goto _LL680;} _LL699: _temp698=(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f3;
! goto _LL679;} else{ goto _LL680;} _LL680: if(( unsigned int) _temp676 >  1u?*((
! int*) _temp676) ==  Cyc_Absyn_Pointer_mod: 0){ _LL711: _temp710=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1; if(( unsigned int) _temp710
! >  1u?*(( int*) _temp710) ==  Cyc_Absyn_NonNullable_ps: 0){ _LL713: _temp712=((
! struct Cyc_Absyn_NonNullable_ps_struct*) _temp710)->f1; goto _LL709;} else{ goto
! _LL682;} _LL709: _temp708=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f2; if( _temp708 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL707;} else{
! goto _LL682;} _LL707: _temp706=(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f3;
! goto _LL681;} else{ goto _LL682;} _LL682: if(( unsigned int) _temp676 >  1u?*((
! int*) _temp676) ==  Cyc_Absyn_Pointer_mod: 0){ _LL719: _temp718=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1; if( _temp718 == ( void*)
! Cyc_Absyn_TaggedArray_ps){ goto _LL717;} else{ goto _LL684;} _LL717: _temp716=(
! void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f2; if( _temp716 == (
! void*) Cyc_Absyn_HeapRgn){ goto _LL715;} else{ goto _LL684;} _LL715: _temp714=((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f3; goto _LL683;} else{ goto
! _LL684;} _LL684: if(( unsigned int) _temp676 >  1u?*(( int*) _temp676) ==  Cyc_Absyn_Pointer_mod:
! 0){ _LL727: _temp726=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1;
! if(( unsigned int) _temp726 >  1u?*(( int*) _temp726) ==  Cyc_Absyn_Nullable_ps:
! 0){ _LL729: _temp728=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp726)->f1;
! goto _LL723;} else{ goto _LL686;} _LL723: _temp722=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f2; if(( unsigned int) _temp722 >  4u?*(( int*) _temp722) ==  Cyc_Absyn_VarType:
! 0){ _LL725: _temp724=(( struct Cyc_Absyn_VarType_struct*) _temp722)->f1; goto
! _LL721;} else{ goto _LL686;} _LL721: _temp720=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f3; goto _LL685;} else{ goto _LL686;} _LL686: if(( unsigned int)
! _temp676 >  1u?*(( int*) _temp676) ==  Cyc_Absyn_Pointer_mod: 0){ _LL737:
! _temp736=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1; if((
! unsigned int) _temp736 >  1u?*(( int*) _temp736) ==  Cyc_Absyn_NonNullable_ps: 0){
! _LL739: _temp738=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp736)->f1; goto
! _LL733;} else{ goto _LL688;} _LL733: _temp732=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f2; if(( unsigned int) _temp732 >  4u?*(( int*) _temp732) ==  Cyc_Absyn_VarType:
! 0){ _LL735: _temp734=(( struct Cyc_Absyn_VarType_struct*) _temp732)->f1; goto
! _LL731;} else{ goto _LL688;} _LL731: _temp730=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f3; goto _LL687;} else{ goto _LL688;} _LL688: if(( unsigned int)
! _temp676 >  1u?*(( int*) _temp676) ==  Cyc_Absyn_Pointer_mod: 0){ _LL747:
! _temp746=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1; if(
! _temp746 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL743;} else{ goto _LL690;}
! _LL743: _temp742=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f2;
! if(( unsigned int) _temp742 >  4u?*(( int*) _temp742) ==  Cyc_Absyn_VarType: 0){
! _LL745: _temp744=(( struct Cyc_Absyn_VarType_struct*) _temp742)->f1; goto _LL741;}
! else{ goto _LL690;} _LL741: _temp740=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f3; goto _LL689;} else{ goto _LL690;} _LL690: if(( unsigned int)
! _temp676 >  1u?*(( int*) _temp676) ==  Cyc_Absyn_Pointer_mod: 0){ _LL751:
! _temp750=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1; if((
! unsigned int) _temp750 >  1u?*(( int*) _temp750) ==  Cyc_Absyn_Nullable_ps: 0){
! _LL753: _temp752=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp750)->f1; goto
! _LL749;} else{ goto _LL692;} _LL749: _temp748=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f3; goto _LL691;} else{ goto _LL692;} _LL692: if(( unsigned int)
! _temp676 >  1u?*(( int*) _temp676) ==  Cyc_Absyn_Pointer_mod: 0){ _LL757:
! _temp756=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1; if((
! unsigned int) _temp756 >  1u?*(( int*) _temp756) ==  Cyc_Absyn_NonNullable_ps: 0){
! _LL759: _temp758=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp756)->f1; goto
! _LL755;} else{ goto _LL694;} _LL755: _temp754=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp676)->f3; goto _LL693;} else{ goto _LL694;} _LL694: if(( unsigned int)
! _temp676 >  1u?*(( int*) _temp676) ==  Cyc_Absyn_Pointer_mod: 0){ _LL763:
! _temp762=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f1; if(
! _temp762 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL761;} else{ goto _LL696;}
! _LL761: _temp760=(( struct Cyc_Absyn_Pointer_mod_struct*) _temp676)->f3; goto
! _LL695;} else{ goto _LL696;} _LL696: goto _LL697; _LL679: Cyc_Dump_dump_pointer(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp704);
  Cyc_Dump_dump_alpha( _tag_arr("`H", sizeof( unsigned char), 3u)); Cyc_Dump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL681: Cyc_Dump_dump_pointer(
! _tag_arr("@", sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp712);
  Cyc_Dump_dump_alpha( _tag_arr("`H", sizeof( unsigned char), 3u)); Cyc_Dump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL683: Cyc_Dump_dump_pointer(
  _tag_arr("{?}", sizeof( unsigned char), 4u)); Cyc_Dump_dump_alpha( _tag_arr("`H",
  sizeof( unsigned char), 3u)); Cyc_Dump_dumptms((( struct Cyc_List_List*)
! _check_null( tms))->tl, f, a); return; _LL685: Cyc_Dump_dump_pointer( _tag_arr("*",
! sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp728); Cyc_Dump_dump_alphastr(
! _temp724->name); Cyc_Dump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl,
! f, a); return; _LL687: Cyc_Dump_dump_pointer( _tag_arr("@", sizeof(
! unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp738); Cyc_Dump_dump_alphastr(
! _temp734->name); Cyc_Dump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl,
! f, a); return; _LL689: Cyc_Dump_dump_pointer( _tag_arr("{?}", sizeof(
! unsigned char), 4u)); Cyc_Dump_dump_alphastr( _temp744->name); Cyc_Dump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL691: Cyc_Dump_dump_pointer(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp752);
  Cyc_Dump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl, f, a);
! return; _LL693: Cyc_Dump_dump_pointer( _tag_arr("@", sizeof( unsigned char), 2u));
! Cyc_Dump_dump_upperbound( _temp758); Cyc_Dump_dumptms((( struct Cyc_List_List*)
! _check_null( tms))->tl, f, a); return; _LL695: Cyc_Dump_dump_pointer( _tag_arr("{?}",
  sizeof( unsigned char), 4u)); Cyc_Dump_dumptms((( struct Cyc_List_List*)
! _check_null( tms))->tl, f, a); return; _LL697: { int next_is_pointer= 0; if(((
! struct Cyc_List_List*) _check_null( tms))->tl !=  0){ void* _temp764=( void*)((
  struct Cyc_List_List*) _check_null((( struct Cyc_List_List*) _check_null( tms))->tl))->hd;
! _LL766: if(( unsigned int) _temp764 >  1u?*(( int*) _temp764) ==  Cyc_Absyn_Pointer_mod:
! 0){ goto _LL767;} else{ goto _LL768;} _LL768: goto _LL769; _LL767:
! next_is_pointer= 1; goto _LL765; _LL769: goto _LL765; _LL765:;} if(
  next_is_pointer){ Cyc_Dump_dump_char(( int)'(');} Cyc_Dump_dumptms((( struct Cyc_List_List*)
  _check_null( tms))->tl, f, a); if( next_is_pointer){ Cyc_Dump_dump_char(( int)')');}{
! void* _temp770=( void*)(( struct Cyc_List_List*) _check_null( tms))->hd; struct
! Cyc_Absyn_Exp* _temp786; void* _temp788; struct Cyc_List_List* _temp790; struct
! Cyc_Core_Opt* _temp792; struct Cyc_Absyn_VarargInfo* _temp794; int _temp796;
! struct Cyc_List_List* _temp798; void* _temp800; struct Cyc_Position_Segment*
! _temp802; struct Cyc_List_List* _temp804; int _temp806; struct Cyc_Position_Segment*
! _temp808; struct Cyc_List_List* _temp810; void* _temp812; void* _temp814; _LL772:
! if( _temp770 == ( void*) Cyc_Absyn_Carray_mod){ goto _LL773;} else{ goto _LL774;}
! _LL774: if(( unsigned int) _temp770 >  1u?*(( int*) _temp770) ==  Cyc_Absyn_ConstArray_mod:
! 0){ _LL787: _temp786=(( struct Cyc_Absyn_ConstArray_mod_struct*) _temp770)->f1;
! goto _LL775;} else{ goto _LL776;} _LL776: if(( unsigned int) _temp770 >  1u?*((
! int*) _temp770) ==  Cyc_Absyn_Function_mod: 0){ _LL789: _temp788=( void*)((
! struct Cyc_Absyn_Function_mod_struct*) _temp770)->f1; if(*(( int*) _temp788) == 
! Cyc_Absyn_WithTypes){ _LL799: _temp798=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp788)->f1; goto _LL797; _LL797: _temp796=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp788)->f2; goto _LL795; _LL795: _temp794=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp788)->f3; goto _LL793; _LL793: _temp792=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp788)->f4; goto _LL791; _LL791: _temp790=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp788)->f5; goto _LL777;} else{ goto _LL778;}} else{ goto _LL778;} _LL778:
! if(( unsigned int) _temp770 >  1u?*(( int*) _temp770) ==  Cyc_Absyn_Function_mod:
! 0){ _LL801: _temp800=( void*)(( struct Cyc_Absyn_Function_mod_struct*) _temp770)->f1;
! if(*(( int*) _temp800) ==  Cyc_Absyn_NoTypes){ _LL805: _temp804=(( struct Cyc_Absyn_NoTypes_struct*)
! _temp800)->f1; goto _LL803; _LL803: _temp802=(( struct Cyc_Absyn_NoTypes_struct*)
! _temp800)->f2; goto _LL779;} else{ goto _LL780;}} else{ goto _LL780;} _LL780:
! if(( unsigned int) _temp770 >  1u?*(( int*) _temp770) ==  Cyc_Absyn_TypeParams_mod:
! 0){ _LL811: _temp810=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp770)->f1;
! goto _LL809; _LL809: _temp808=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp770)->f2; goto _LL807; _LL807: _temp806=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp770)->f3; goto _LL781;} else{ goto _LL782;} _LL782: if(( unsigned int)
! _temp770 >  1u?*(( int*) _temp770) ==  Cyc_Absyn_Attributes_mod: 0){ goto _LL783;}
! else{ goto _LL784;} _LL784: if(( unsigned int) _temp770 >  1u?*(( int*) _temp770)
! ==  Cyc_Absyn_Pointer_mod: 0){ _LL815: _temp814=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp770)->f1; goto _LL813; _LL813: _temp812=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp770)->f2; goto _LL785;} else{ goto _LL771;} _LL773: Cyc_Dump_dump_symbol(
! _tag_arr("[]", sizeof( unsigned char), 3u)); goto _LL771; _LL775: Cyc_Dump_dump_char((
! int)'['); Cyc_Dump_dumpexp( _temp786); Cyc_Dump_dump_char(( int)']'); goto
! _LL771; _LL777: Cyc_Dump_dumpfunargs( _temp798, _temp796, _temp794, _temp792,
! _temp790); goto _LL771; _LL779:(( void(*)( void(* f)( struct _tagged_arr*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dump_alphastr, _temp804,
  _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof( unsigned char),
! 2u), _tag_arr(", ", sizeof( unsigned char), 3u)); goto _LL771; _LL781: if(
! _temp806){ Cyc_Dump_dumpkindedtvars( _temp810);} else{ Cyc_Dump_dumptvars(
! _temp810);} goto _LL771; _LL783: goto _LL771; _LL785:( int) _throw(( void*)({
! struct Cyc_Core_Impossible_struct* _temp816=( struct Cyc_Core_Impossible_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Impossible_struct)); _temp816[ 0]=({ struct
! Cyc_Core_Impossible_struct _temp817; _temp817.tag= Cyc_Core_Impossible; _temp817.f1=
! _tag_arr("dumptms", sizeof( unsigned char), 8u); _temp817;}); _temp816;}));
! _LL771:;} return;} _LL677:;}} void Cyc_Dump_dumptqtd( struct Cyc_Absyn_Tqual tq,
! void* t, void(* f)( void*), void* a){ struct Cyc_List_List* _temp820; void*
! _temp822; struct Cyc_Absyn_Tqual _temp824; struct _tuple9 _temp818= Cyc_Absynpp_to_tms(
! tq, t); _LL825: _temp824= _temp818.f1; goto _LL823; _LL823: _temp822= _temp818.f2;
! goto _LL821; _LL821: _temp820= _temp818.f3; goto _LL819; _LL819: Cyc_Dump_dumptq(
! _temp824); Cyc_Dump_dumpntyp( _temp822); Cyc_Dump_dumptms( Cyc_List_imp_rev(
! _temp820), f, a);} void Cyc_Dump_pr_comment( struct Cyc_Std___sFILE* outf,
  struct _tagged_arr s){ int depth= 0; int len=( int) Cyc_Std_strlen( s); int i= 0;
  for( 0; i <  len; i ++){ unsigned char c=*(( const unsigned char*)
  _check_unknown_subscript( s, sizeof( unsigned char), i)); if( c != '['){ Cyc_Std_fputc((
--- 1602,1768 ----
  unsigned int i= Cyc_Evexp_eval_const_uint_exp( e); if( i !=  1){ Cyc_Dump_dump_char((
  int)'{'); Cyc_Dump_dumpexp( e); Cyc_Dump_dump_char(( int)'}');}} void Cyc_Dump_dumptms(
  struct Cyc_List_List* tms, void(* f)( void*), void* a){ if( tms ==  0){ f( a);
! return;}{ void* _temp661=( void*)(( struct Cyc_List_List*) _check_null( tms))->hd;
! struct Cyc_Absyn_Tqual _temp683; void* _temp685; void* _temp687; struct Cyc_Absyn_Exp*
! _temp689; struct Cyc_Absyn_Tqual _temp691; void* _temp693; void* _temp695;
! struct Cyc_Absyn_Exp* _temp697; struct Cyc_Absyn_Tqual _temp699; void* _temp701;
! void* _temp703; struct Cyc_Absyn_Tqual _temp705; void* _temp707; struct Cyc_Absyn_Tvar*
! _temp709; void* _temp711; struct Cyc_Absyn_Exp* _temp713; struct Cyc_Absyn_Tqual
! _temp715; void* _temp717; struct Cyc_Absyn_Tvar* _temp719; void* _temp721;
! struct Cyc_Absyn_Exp* _temp723; struct Cyc_Absyn_Tqual _temp725; void* _temp727;
! struct Cyc_Absyn_Tvar* _temp729; void* _temp731; struct Cyc_Absyn_Tqual _temp733;
! void* _temp735; struct Cyc_Absyn_Exp* _temp737; struct Cyc_Absyn_Tqual _temp739;
! void* _temp741; struct Cyc_Absyn_Exp* _temp743; struct Cyc_Absyn_Tqual _temp745;
! void* _temp747; _LL663: if(( unsigned int) _temp661 >  1u?*(( int*) _temp661) == 
! Cyc_Absyn_Pointer_mod: 0){ _LL688: _temp687=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f1; if(( unsigned int) _temp687 >  1u?*(( int*) _temp687) ==  Cyc_Absyn_Nullable_ps:
! 0){ _LL690: _temp689=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp687)->f1;
! goto _LL686;} else{ goto _LL665;} _LL686: _temp685=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f2; if( _temp685 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL684;} else{
! goto _LL665;} _LL684: _temp683=(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f3;
! goto _LL664;} else{ goto _LL665;} _LL665: if(( unsigned int) _temp661 >  1u?*((
! int*) _temp661) ==  Cyc_Absyn_Pointer_mod: 0){ _LL696: _temp695=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1; if(( unsigned int) _temp695
! >  1u?*(( int*) _temp695) ==  Cyc_Absyn_NonNullable_ps: 0){ _LL698: _temp697=((
! struct Cyc_Absyn_NonNullable_ps_struct*) _temp695)->f1; goto _LL694;} else{ goto
! _LL667;} _LL694: _temp693=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f2; if( _temp693 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL692;} else{
! goto _LL667;} _LL692: _temp691=(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f3;
! goto _LL666;} else{ goto _LL667;} _LL667: if(( unsigned int) _temp661 >  1u?*((
! int*) _temp661) ==  Cyc_Absyn_Pointer_mod: 0){ _LL704: _temp703=( void*)((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1; if( _temp703 == ( void*)
! Cyc_Absyn_TaggedArray_ps){ goto _LL702;} else{ goto _LL669;} _LL702: _temp701=(
! void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f2; if( _temp701 == (
! void*) Cyc_Absyn_HeapRgn){ goto _LL700;} else{ goto _LL669;} _LL700: _temp699=((
! struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f3; goto _LL668;} else{ goto
! _LL669;} _LL669: if(( unsigned int) _temp661 >  1u?*(( int*) _temp661) ==  Cyc_Absyn_Pointer_mod:
! 0){ _LL712: _temp711=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1;
! if(( unsigned int) _temp711 >  1u?*(( int*) _temp711) ==  Cyc_Absyn_Nullable_ps:
! 0){ _LL714: _temp713=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp711)->f1;
! goto _LL708;} else{ goto _LL671;} _LL708: _temp707=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f2; if(( unsigned int) _temp707 >  4u?*(( int*) _temp707) ==  Cyc_Absyn_VarType:
! 0){ _LL710: _temp709=(( struct Cyc_Absyn_VarType_struct*) _temp707)->f1; goto
! _LL706;} else{ goto _LL671;} _LL706: _temp705=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f3; goto _LL670;} else{ goto _LL671;} _LL671: if(( unsigned int)
! _temp661 >  1u?*(( int*) _temp661) ==  Cyc_Absyn_Pointer_mod: 0){ _LL722:
! _temp721=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1; if((
! unsigned int) _temp721 >  1u?*(( int*) _temp721) ==  Cyc_Absyn_NonNullable_ps: 0){
! _LL724: _temp723=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp721)->f1; goto
! _LL718;} else{ goto _LL673;} _LL718: _temp717=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f2; if(( unsigned int) _temp717 >  4u?*(( int*) _temp717) ==  Cyc_Absyn_VarType:
! 0){ _LL720: _temp719=(( struct Cyc_Absyn_VarType_struct*) _temp717)->f1; goto
! _LL716;} else{ goto _LL673;} _LL716: _temp715=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f3; goto _LL672;} else{ goto _LL673;} _LL673: if(( unsigned int)
! _temp661 >  1u?*(( int*) _temp661) ==  Cyc_Absyn_Pointer_mod: 0){ _LL732:
! _temp731=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1; if(
! _temp731 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL728;} else{ goto _LL675;}
! _LL728: _temp727=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f2;
! if(( unsigned int) _temp727 >  4u?*(( int*) _temp727) ==  Cyc_Absyn_VarType: 0){
! _LL730: _temp729=(( struct Cyc_Absyn_VarType_struct*) _temp727)->f1; goto _LL726;}
! else{ goto _LL675;} _LL726: _temp725=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f3; goto _LL674;} else{ goto _LL675;} _LL675: if(( unsigned int)
! _temp661 >  1u?*(( int*) _temp661) ==  Cyc_Absyn_Pointer_mod: 0){ _LL736:
! _temp735=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1; if((
! unsigned int) _temp735 >  1u?*(( int*) _temp735) ==  Cyc_Absyn_Nullable_ps: 0){
! _LL738: _temp737=(( struct Cyc_Absyn_Nullable_ps_struct*) _temp735)->f1; goto
! _LL734;} else{ goto _LL677;} _LL734: _temp733=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f3; goto _LL676;} else{ goto _LL677;} _LL677: if(( unsigned int)
! _temp661 >  1u?*(( int*) _temp661) ==  Cyc_Absyn_Pointer_mod: 0){ _LL742:
! _temp741=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1; if((
! unsigned int) _temp741 >  1u?*(( int*) _temp741) ==  Cyc_Absyn_NonNullable_ps: 0){
! _LL744: _temp743=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp741)->f1; goto
! _LL740;} else{ goto _LL679;} _LL740: _temp739=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp661)->f3; goto _LL678;} else{ goto _LL679;} _LL679: if(( unsigned int)
! _temp661 >  1u?*(( int*) _temp661) ==  Cyc_Absyn_Pointer_mod: 0){ _LL748:
! _temp747=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f1; if(
! _temp747 == ( void*) Cyc_Absyn_TaggedArray_ps){ goto _LL746;} else{ goto _LL681;}
! _LL746: _temp745=(( struct Cyc_Absyn_Pointer_mod_struct*) _temp661)->f3; goto
! _LL680;} else{ goto _LL681;} _LL681: goto _LL682; _LL664: Cyc_Dump_dump_pointer(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp689);
  Cyc_Dump_dump_alpha( _tag_arr("`H", sizeof( unsigned char), 3u)); Cyc_Dump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL666: Cyc_Dump_dump_pointer(
! _tag_arr("@", sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp697);
  Cyc_Dump_dump_alpha( _tag_arr("`H", sizeof( unsigned char), 3u)); Cyc_Dump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL668: Cyc_Dump_dump_pointer(
  _tag_arr("{?}", sizeof( unsigned char), 4u)); Cyc_Dump_dump_alpha( _tag_arr("`H",
  sizeof( unsigned char), 3u)); Cyc_Dump_dumptms((( struct Cyc_List_List*)
! _check_null( tms))->tl, f, a); return; _LL670: Cyc_Dump_dump_pointer( _tag_arr("*",
! sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp713); Cyc_Dump_dump_alphastr(
! _temp709->name); Cyc_Dump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl,
! f, a); return; _LL672: Cyc_Dump_dump_pointer( _tag_arr("@", sizeof(
! unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp723); Cyc_Dump_dump_alphastr(
! _temp719->name); Cyc_Dump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl,
! f, a); return; _LL674: Cyc_Dump_dump_pointer( _tag_arr("{?}", sizeof(
! unsigned char), 4u)); Cyc_Dump_dump_alphastr( _temp729->name); Cyc_Dump_dumptms(((
! struct Cyc_List_List*) _check_null( tms))->tl, f, a); return; _LL676: Cyc_Dump_dump_pointer(
! _tag_arr("*", sizeof( unsigned char), 2u)); Cyc_Dump_dump_upperbound( _temp737);
  Cyc_Dump_dumptms((( struct Cyc_List_List*) _check_null( tms))->tl, f, a);
! return; _LL678: Cyc_Dump_dump_pointer( _tag_arr("@", sizeof( unsigned char), 2u));
! Cyc_Dump_dump_upperbound( _temp743); Cyc_Dump_dumptms((( struct Cyc_List_List*)
! _check_null( tms))->tl, f, a); return; _LL680: Cyc_Dump_dump_pointer( _tag_arr("{?}",
  sizeof( unsigned char), 4u)); Cyc_Dump_dumptms((( struct Cyc_List_List*)
! _check_null( tms))->tl, f, a); return; _LL682: { int next_is_pointer= 0; if(((
! struct Cyc_List_List*) _check_null( tms))->tl !=  0){ void* _temp749=( void*)((
  struct Cyc_List_List*) _check_null((( struct Cyc_List_List*) _check_null( tms))->tl))->hd;
! _LL751: if(( unsigned int) _temp749 >  1u?*(( int*) _temp749) ==  Cyc_Absyn_Pointer_mod:
! 0){ goto _LL752;} else{ goto _LL753;} _LL753: goto _LL754; _LL752:
! next_is_pointer= 1; goto _LL750; _LL754: goto _LL750; _LL750:;} if(
  next_is_pointer){ Cyc_Dump_dump_char(( int)'(');} Cyc_Dump_dumptms((( struct Cyc_List_List*)
  _check_null( tms))->tl, f, a); if( next_is_pointer){ Cyc_Dump_dump_char(( int)')');}{
! void* _temp755=( void*)(( struct Cyc_List_List*) _check_null( tms))->hd; struct
! Cyc_Absyn_Exp* _temp771; void* _temp773; struct Cyc_List_List* _temp775; struct
! Cyc_Core_Opt* _temp777; struct Cyc_Absyn_VarargInfo* _temp779; int _temp781;
! struct Cyc_List_List* _temp783; void* _temp785; struct Cyc_Position_Segment*
! _temp787; struct Cyc_List_List* _temp789; int _temp791; struct Cyc_Position_Segment*
! _temp793; struct Cyc_List_List* _temp795; void* _temp797; void* _temp799; _LL757:
! if( _temp755 == ( void*) Cyc_Absyn_Carray_mod){ goto _LL758;} else{ goto _LL759;}
! _LL759: if(( unsigned int) _temp755 >  1u?*(( int*) _temp755) ==  Cyc_Absyn_ConstArray_mod:
! 0){ _LL772: _temp771=(( struct Cyc_Absyn_ConstArray_mod_struct*) _temp755)->f1;
! goto _LL760;} else{ goto _LL761;} _LL761: if(( unsigned int) _temp755 >  1u?*((
! int*) _temp755) ==  Cyc_Absyn_Function_mod: 0){ _LL774: _temp773=( void*)((
! struct Cyc_Absyn_Function_mod_struct*) _temp755)->f1; if(*(( int*) _temp773) == 
! Cyc_Absyn_WithTypes){ _LL784: _temp783=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp773)->f1; goto _LL782; _LL782: _temp781=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp773)->f2; goto _LL780; _LL780: _temp779=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp773)->f3; goto _LL778; _LL778: _temp777=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp773)->f4; goto _LL776; _LL776: _temp775=(( struct Cyc_Absyn_WithTypes_struct*)
! _temp773)->f5; goto _LL762;} else{ goto _LL763;}} else{ goto _LL763;} _LL763:
! if(( unsigned int) _temp755 >  1u?*(( int*) _temp755) ==  Cyc_Absyn_Function_mod:
! 0){ _LL786: _temp785=( void*)(( struct Cyc_Absyn_Function_mod_struct*) _temp755)->f1;
! if(*(( int*) _temp785) ==  Cyc_Absyn_NoTypes){ _LL790: _temp789=(( struct Cyc_Absyn_NoTypes_struct*)
! _temp785)->f1; goto _LL788; _LL788: _temp787=(( struct Cyc_Absyn_NoTypes_struct*)
! _temp785)->f2; goto _LL764;} else{ goto _LL765;}} else{ goto _LL765;} _LL765:
! if(( unsigned int) _temp755 >  1u?*(( int*) _temp755) ==  Cyc_Absyn_TypeParams_mod:
! 0){ _LL796: _temp795=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp755)->f1;
! goto _LL794; _LL794: _temp793=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp755)->f2; goto _LL792; _LL792: _temp791=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp755)->f3; goto _LL766;} else{ goto _LL767;} _LL767: if(( unsigned int)
! _temp755 >  1u?*(( int*) _temp755) ==  Cyc_Absyn_Attributes_mod: 0){ goto _LL768;}
! else{ goto _LL769;} _LL769: if(( unsigned int) _temp755 >  1u?*(( int*) _temp755)
! ==  Cyc_Absyn_Pointer_mod: 0){ _LL800: _temp799=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp755)->f1; goto _LL798; _LL798: _temp797=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp755)->f2; goto _LL770;} else{ goto _LL756;} _LL758: Cyc_Dump_dump_symbol(
! _tag_arr("[]", sizeof( unsigned char), 3u)); goto _LL756; _LL760: Cyc_Dump_dump_char((
! int)'['); Cyc_Dump_dumpexp( _temp771); Cyc_Dump_dump_char(( int)']'); goto
! _LL756; _LL762: Cyc_Dump_dumpfunargs( _temp783, _temp781, _temp779, _temp777,
! _temp775); goto _LL756; _LL764:(( void(*)( void(* f)( struct _tagged_arr*),
  struct Cyc_List_List* l, struct _tagged_arr start, struct _tagged_arr end,
! struct _tagged_arr sep)) Cyc_Dump_group)( Cyc_Dump_dump_alphastr, _temp789,
  _tag_arr("(", sizeof( unsigned char), 2u), _tag_arr(")", sizeof( unsigned char),
! 2u), _tag_arr(", ", sizeof( unsigned char), 3u)); goto _LL756; _LL766: if(
! _temp791){ Cyc_Dump_dumpkindedtvars( _temp795);} else{ Cyc_Dump_dumptvars(
! _temp795);} goto _LL756; _LL768: goto _LL756; _LL770:( int) _throw(( void*)({
! struct Cyc_Core_Impossible_struct* _temp801=( struct Cyc_Core_Impossible_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Impossible_struct)); _temp801[ 0]=({ struct
! Cyc_Core_Impossible_struct _temp802; _temp802.tag= Cyc_Core_Impossible; _temp802.f1=
! _tag_arr("dumptms", sizeof( unsigned char), 8u); _temp802;}); _temp801;}));
! _LL756:;} return;} _LL662:;}} void Cyc_Dump_dumptqtd( struct Cyc_Absyn_Tqual tq,
! void* t, void(* f)( void*), void* a){ struct Cyc_List_List* _temp805; void*
! _temp807; struct Cyc_Absyn_Tqual _temp809; struct _tuple9 _temp803= Cyc_Absynpp_to_tms(
! tq, t); _LL810: _temp809= _temp803.f1; goto _LL808; _LL808: _temp807= _temp803.f2;
! goto _LL806; _LL806: _temp805= _temp803.f3; goto _LL804; _LL804: Cyc_Dump_dumptq(
! _temp809); Cyc_Dump_dumpntyp( _temp807); Cyc_Dump_dumptms( Cyc_List_imp_rev(
! _temp805), f, a);} void Cyc_Dump_pr_comment( struct Cyc_Std___sFILE* outf,
  struct _tagged_arr s){ int depth= 0; int len=( int) Cyc_Std_strlen( s); int i= 0;
  for( 0; i <  len; i ++){ unsigned char c=*(( const unsigned char*)
  _check_unknown_subscript( s, sizeof( unsigned char), i)); if( c != '['){ Cyc_Std_fputc((
***************
*** 1792,2124 ****
  int)'}', outf); break;}} else{ if( c == '['){ depth ++;}} Cyc_Std_fputc(( int) c,
  outf);}}} void Cyc_Dump_dump_comment( struct _tagged_arr s){ Cyc_Dump_pr_comment(
  Cyc_Std_stdout, s);} void Cyc_Dump_dumpdecl( struct Cyc_Absyn_Decl* d, struct
! _tagged_arr comment){ void* _temp826=( void*) d->r; struct Cyc_Absyn_Structdecl*
! _temp852; struct Cyc_Absyn_Uniondecl* _temp854; struct Cyc_Absyn_Vardecl*
! _temp856; struct Cyc_Absyn_Vardecl _temp858; void* _temp859; struct Cyc_Absyn_Tqual
! _temp861; struct _tuple1* _temp863; struct Cyc_Absyn_Tuniondecl* _temp865;
! struct Cyc_Absyn_Tuniondecl _temp867; int _temp868; struct Cyc_Core_Opt*
! _temp870; struct Cyc_List_List* _temp872; struct _tuple1* _temp874; void*
! _temp876; struct Cyc_Absyn_Enumdecl* _temp878; struct Cyc_Absyn_Enumdecl
! _temp880; struct Cyc_Core_Opt* _temp881; struct _tuple1* _temp883; void*
! _temp885; struct Cyc_Absyn_Typedefdecl* _temp887; _LL828: if(*(( int*) _temp826)
! ==  Cyc_Absyn_Struct_d){ _LL853: _temp852=(( struct Cyc_Absyn_Struct_d_struct*)
! _temp826)->f1; goto _LL829;} else{ goto _LL830;} _LL830: if(*(( int*) _temp826)
! ==  Cyc_Absyn_Union_d){ _LL855: _temp854=(( struct Cyc_Absyn_Union_d_struct*)
! _temp826)->f1; goto _LL831;} else{ goto _LL832;} _LL832: if(*(( int*) _temp826)
! ==  Cyc_Absyn_Var_d){ _LL857: _temp856=(( struct Cyc_Absyn_Var_d_struct*)
! _temp826)->f1; _temp858=* _temp856; _LL864: _temp863= _temp858.name; goto _LL862;
! _LL862: _temp861= _temp858.tq; goto _LL860; _LL860: _temp859=( void*) _temp858.type;
! goto _LL833;} else{ goto _LL834;} _LL834: if(*(( int*) _temp826) ==  Cyc_Absyn_Tunion_d){
! _LL866: _temp865=(( struct Cyc_Absyn_Tunion_d_struct*) _temp826)->f1; _temp867=*
! _temp865; _LL877: _temp876=( void*) _temp867.sc; goto _LL875; _LL875: _temp874=
! _temp867.name; goto _LL873; _LL873: _temp872= _temp867.tvs; goto _LL871; _LL871:
! _temp870= _temp867.fields; goto _LL869; _LL869: _temp868= _temp867.is_xtunion;
! goto _LL835;} else{ goto _LL836;} _LL836: if(*(( int*) _temp826) ==  Cyc_Absyn_Enum_d){
! _LL879: _temp878=(( struct Cyc_Absyn_Enum_d_struct*) _temp826)->f1; _temp880=*
! _temp878; _LL886: _temp885=( void*) _temp880.sc; goto _LL884; _LL884: _temp883=
! _temp880.name; goto _LL882; _LL882: _temp881= _temp880.fields; goto _LL837;}
! else{ goto _LL838;} _LL838: if(*(( int*) _temp826) ==  Cyc_Absyn_Typedef_d){
! _LL888: _temp887=(( struct Cyc_Absyn_Typedef_d_struct*) _temp826)->f1; goto
! _LL839;} else{ goto _LL840;} _LL840: if(*(( int*) _temp826) ==  Cyc_Absyn_Fn_d){
! goto _LL841;} else{ goto _LL842;} _LL842: if(*(( int*) _temp826) ==  Cyc_Absyn_Let_d){
! goto _LL843;} else{ goto _LL844;} _LL844: if(*(( int*) _temp826) ==  Cyc_Absyn_Letv_d){
! goto _LL845;} else{ goto _LL846;} _LL846: if(*(( int*) _temp826) ==  Cyc_Absyn_Namespace_d){
! goto _LL847;} else{ goto _LL848;} _LL848: if(*(( int*) _temp826) ==  Cyc_Absyn_Using_d){
! goto _LL849;} else{ goto _LL850;} _LL850: if(*(( int*) _temp826) ==  Cyc_Absyn_ExternC_d){
! goto _LL851;} else{ goto _LL827;} _LL829: Cyc_Dump_dump_begin(); Cyc_Dump_dump_alpha(
! _tag_arr("struct", sizeof( unsigned char), 7u)); if( _temp852->name !=  0){ Cyc_Dump_dump_boldqvar((
! struct _tuple1*)(( struct Cyc_Core_Opt*) _check_null( _temp852->name))->v);} Cyc_Dump_dumptvars(
! _temp852->tvs); if( _temp852->fields ==  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n",
  sizeof( unsigned char), 3u));} else{ Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof(
  unsigned char), 2u)); Cyc_Dump_dump_lb(); Cyc_Dump_dump_symbol( _tag_arr("\\\\\n",
  sizeof( unsigned char), 4u)); Cyc_Dump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp852->fields))->v); Cyc_Dump_dump_rb();
  Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle();
  Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof(
! unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL827; _LL831: Cyc_Dump_dump_begin();
  Cyc_Dump_dump_alpha( _tag_arr("union", sizeof( unsigned char), 6u)); if(
! _temp854->name !=  0){ Cyc_Dump_dump_boldqvar(( struct _tuple1*)(( struct Cyc_Core_Opt*)
! _check_null( _temp854->name))->v);} Cyc_Dump_dumptvars( _temp854->tvs); if(
! _temp854->fields ==  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof(
  unsigned char), 3u));} else{ Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof(
  unsigned char), 2u)); Cyc_Dump_dump_lb(); Cyc_Dump_dump_symbol( _tag_arr("\\\\\n",
  sizeof( unsigned char), 4u)); Cyc_Dump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp854->fields))->v); Cyc_Dump_dump_rb();
  Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle();
  Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof(
! unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL827; _LL833: Cyc_Dump_dump_begin();((
  void(*)( struct Cyc_Absyn_Tqual tq, void* t, void(* f)( struct _tuple1*), struct
! _tuple1* a)) Cyc_Dump_dumptqtd)( _temp861, _temp859, Cyc_Dump_dump_boldqvar,
! _temp863); Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));
  Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol(
! _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL827;
! _LL835: Cyc_Dump_dump_begin(); if( _temp868){ Cyc_Dump_dump_alpha( _tag_arr("xtunion",
  sizeof( unsigned char), 8u));} else{ Cyc_Dump_dump_alpha( _tag_arr("tunion",
! sizeof( unsigned char), 7u));} Cyc_Dump_dump_boldqvar( _temp874); Cyc_Dump_dumptvars(
! _temp872); if( _temp870 ==  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof(
  unsigned char), 3u));} else{ Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof(
  unsigned char), 2u)); Cyc_Dump_dump_lb(); Cyc_Dump_dump_symbol( _tag_arr("\\\\\n~~",
  sizeof( unsigned char), 6u)); Cyc_Dump_dumptunionfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp870))->v); Cyc_Dump_dump_symbol(
  _tag_arr("\\\\\n", sizeof( unsigned char), 4u)); Cyc_Dump_dump_rb(); Cyc_Dump_dump_symbol(
  _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment(
  comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end();
! goto _LL827; _LL837: Cyc_Dump_dump_begin(); Cyc_Dump_dump_alpha( _tag_arr("enum",
! sizeof( unsigned char), 5u)); Cyc_Dump_dump_boldqvar( _temp883); if( _temp881 == 
  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));} else{
  Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof( unsigned char), 2u)); Cyc_Dump_dump_lb();
  Cyc_Dump_dump_symbol( _tag_arr("\\\\\n~~", sizeof( unsigned char), 6u)); Cyc_Dump_dumpenumfields((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp881))->v); Cyc_Dump_dump_symbol(
  _tag_arr("\\\\\n", sizeof( unsigned char), 4u)); Cyc_Dump_dump_rb(); Cyc_Dump_dump_symbol(
  _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment(
  comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end();
! goto _LL827; _LL839: Cyc_Dump_dump_begin(); Cyc_Dump_dump_alpha( _tag_arr("typedef",
  sizeof( unsigned char), 8u));(( void(*)( struct Cyc_Absyn_Tqual tq, void* t,
  void(* f)( struct Cyc_Absyn_Typedefdecl*), struct Cyc_Absyn_Typedefdecl* a)) Cyc_Dump_dumptqtd)(({
! struct Cyc_Absyn_Tqual _temp889; _temp889.q_const= 0; _temp889.q_volatile= 0;
! _temp889.q_restrict= 0; _temp889;}),( void*) _temp887->defn, Cyc_Dump_dump_boldtypedefname,
! _temp887); Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));
  Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol(
! _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL827;
! _LL841: goto _LL827; _LL843: goto _LL827; _LL845: goto _LL827; _LL847: goto
! _LL827; _LL849: goto _LL827; _LL851: goto _LL827; _LL827:;} static int Cyc_is_other_special(
! unsigned char c){ switch( c){ case '\\': _LL890: goto _LL891; case '"': _LL891:
! goto _LL892; case ';': _LL892: goto _LL893; case '&': _LL893: goto _LL894; case
! '(': _LL894: goto _LL895; case ')': _LL895: goto _LL896; case '|': _LL896: goto
! _LL897; case '^': _LL897: goto _LL898; case '<': _LL898: goto _LL899; case '>':
! _LL899: goto _LL900; case ' ': _LL900: goto _LL901; case '\n': _LL901: goto
! _LL902; case '\t': _LL902: return 1; default: _LL903: return 0;}} static struct
! _tagged_arr Cyc_sh_escape_string( struct _tagged_arr s){ unsigned int _temp905=
! Cyc_Std_strlen( s); int _temp906= 0; int _temp907= 0;{ int i= 0; for( 0; i < 
! _temp905; i ++){ unsigned char _temp908=*(( const unsigned char*)
! _check_unknown_subscript( s, sizeof( unsigned char), i)); if( _temp908 == '\''){
! _temp906 ++;} else{ if( Cyc_is_other_special( _temp908)){ _temp907 ++;}}}} if(
! _temp906 ==  0? _temp907 ==  0: 0){ return s;} if( _temp906 ==  0){ return(
! struct _tagged_arr) Cyc_Std_strconcat_l(({ struct _tagged_arr* _temp909[ 3u];
! _temp909[ 2u]= _init_tag_arr(( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)),"'", sizeof( unsigned char), 2u); _temp909[ 1u]=({ struct
! _tagged_arr* _temp910=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp910[ 0]=( struct _tagged_arr) s; _temp910;}); _temp909[ 0u]=
  _init_tag_arr(( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)),"'",
  sizeof( unsigned char), 2u);(( struct Cyc_List_List*(*)( struct _tagged_arr))
! Cyc_List_list)( _tag_arr( _temp909, sizeof( struct _tagged_arr*), 3u));}));}{
! unsigned int _temp911=( _temp905 +  _temp906) +  _temp907; struct _tagged_arr
! _temp912=({ unsigned int _temp916= _temp911 +  1; unsigned char* _temp917=(
! unsigned char*) _cycalloc_atomic( _check_times( sizeof( unsigned char), _temp916));
! struct _tagged_arr _temp919= _tag_arr( _temp917, sizeof( unsigned char),
! _temp911 +  1);{ unsigned int _temp918= _temp916; unsigned int i; for( i= 0; i < 
! _temp918; i ++){ _temp917[ i]='\000';}}; _temp919;}); int _temp913= 0; int
! _temp914= 0; for( 0; _temp913 <  _temp905; _temp913 ++){ unsigned char _temp915=*((
  const unsigned char*) _check_unknown_subscript( s, sizeof( unsigned char),
! _temp913)); if( _temp915 == '\''? 1: Cyc_is_other_special( _temp915)){*((
! unsigned char*) _check_unknown_subscript( _temp912, sizeof( unsigned char),
! _temp914 ++))='\\';}*(( unsigned char*) _check_unknown_subscript( _temp912,
! sizeof( unsigned char), _temp914 ++))= _temp915;} return( struct _tagged_arr)
! _temp912;}} static struct _tagged_arr* Cyc_sh_escape_stringptr( struct
! _tagged_arr* sp){ return({ struct _tagged_arr* _temp920=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp920[ 0]= Cyc_sh_escape_string(* sp);
! _temp920;});} static struct Cyc_Lineno_Pos* Cyc_new_pos(){ return({ struct Cyc_Lineno_Pos*
! _temp921=( struct Cyc_Lineno_Pos*) _cycalloc( sizeof( struct Cyc_Lineno_Pos));
! _temp921->logical_file= _tag_arr("", sizeof( unsigned char), 1u); _temp921->line=
! Cyc_Core_new_string( 0); _temp921->line_no= 0; _temp921->col= 0; _temp921;});}
  struct _tuple14{ int f1; struct Cyc_Lineno_Pos* f2; } ; static struct _tuple14*
! Cyc_start2pos( int x){ return({ struct _tuple14* _temp922=( struct _tuple14*)
! _cycalloc( sizeof( struct _tuple14)); _temp922->f1= x; _temp922->f2= Cyc_new_pos();
! _temp922;});} static int Cyc_decl2start( struct Cyc_Absyn_Decl* d){ return((
  struct Cyc_Position_Segment*) _check_null( d->loc))->start;} struct _tuple15{
  struct Cyc_Lineno_Pos* f1; void* f2; } ; static struct Cyc_List_List* Cyc_this_file(
  struct _tagged_arr file, struct Cyc_List_List* x){ struct Cyc_List_List*
! _temp923= 0; for( 0; x !=  0; x=(( struct Cyc_List_List*) _check_null( x))->tl){
  if( Cyc_Std_strcmp(((*(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! x))->hd)).f1)->logical_file, file) ==  0){ _temp923=({ struct Cyc_List_List*
! _temp924=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp924->hd=( void*)(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! x))->hd); _temp924->tl= _temp923; _temp924;});}} _temp923=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp923); return _temp923;} static
  int Cyc_lineno( struct Cyc_Lineno_Pos* p){ return p->line_no;} static struct Cyc_List_List*
! Cyc_flatten_decls( struct Cyc_List_List* decls){ struct Cyc_List_List* _temp925=
! 0; while( decls !=  0) { void* _temp926=( void*)(( struct Cyc_Absyn_Decl*)((
  struct Cyc_List_List*) _check_null( decls))->hd)->r; struct Cyc_List_List*
! _temp952; struct Cyc_List_List* _temp954; struct Cyc_List_List* _temp956; _LL928:
! if(*(( int*) _temp926) ==  Cyc_Absyn_Namespace_d){ _LL953: _temp952=(( struct
! Cyc_Absyn_Namespace_d_struct*) _temp926)->f2; goto _LL929;} else{ goto _LL930;}
! _LL930: if(*(( int*) _temp926) ==  Cyc_Absyn_Using_d){ _LL955: _temp954=((
! struct Cyc_Absyn_Using_d_struct*) _temp926)->f2; goto _LL931;} else{ goto _LL932;}
! _LL932: if(*(( int*) _temp926) ==  Cyc_Absyn_ExternC_d){ _LL957: _temp956=((
! struct Cyc_Absyn_ExternC_d_struct*) _temp926)->f1; goto _LL933;} else{ goto
! _LL934;} _LL934: if(*(( int*) _temp926) ==  Cyc_Absyn_Struct_d){ goto _LL935;}
! else{ goto _LL936;} _LL936: if(*(( int*) _temp926) ==  Cyc_Absyn_Union_d){ goto
! _LL937;} else{ goto _LL938;} _LL938: if(*(( int*) _temp926) ==  Cyc_Absyn_Var_d){
! goto _LL939;} else{ goto _LL940;} _LL940: if(*(( int*) _temp926) ==  Cyc_Absyn_Tunion_d){
! goto _LL941;} else{ goto _LL942;} _LL942: if(*(( int*) _temp926) ==  Cyc_Absyn_Enum_d){
! goto _LL943;} else{ goto _LL944;} _LL944: if(*(( int*) _temp926) ==  Cyc_Absyn_Typedef_d){
! goto _LL945;} else{ goto _LL946;} _LL946: if(*(( int*) _temp926) ==  Cyc_Absyn_Fn_d){
! goto _LL947;} else{ goto _LL948;} _LL948: if(*(( int*) _temp926) ==  Cyc_Absyn_Let_d){
! goto _LL949;} else{ goto _LL950;} _LL950: if(*(( int*) _temp926) ==  Cyc_Absyn_Letv_d){
! goto _LL951;} else{ goto _LL927;} _LL929: _temp954= _temp952; goto _LL931;
! _LL931: _temp956= _temp954; goto _LL933; _LL933: decls=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp956,((
! struct Cyc_List_List*) _check_null( decls))->tl); goto _LL927; _LL935: goto
! _LL937; _LL937: goto _LL939; _LL939: goto _LL941; _LL941: goto _LL943; _LL943:
! goto _LL945; _LL945: goto _LL947; _LL947: goto _LL949; _LL949: goto _LL951;
! _LL951: _temp925=({ struct Cyc_List_List* _temp958=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp958->hd=( void*)(( struct Cyc_Absyn_Decl*)((
! struct Cyc_List_List*) _check_null( decls))->hd); _temp958->tl= _temp925;
! _temp958;}); decls=(( struct Cyc_List_List*) _check_null( decls))->tl; goto
! _LL927; _LL927:;} return(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_imp_rev)( _temp925);} static struct Cyc_List_List* Cyc_cycdoc_files= 0;
  static void Cyc_add_other( struct _tagged_arr s){ Cyc_cycdoc_files=({ struct Cyc_List_List*
! _temp959=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp959->hd=( void*)({ struct _tagged_arr* _temp960=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp960[ 0]= s; _temp960;}); _temp959->tl=
! Cyc_cycdoc_files; _temp959;});} static struct Cyc_List_List* Cyc_cycargs= 0;
  static void Cyc_add_cycarg( struct _tagged_arr s){ Cyc_cycargs=({ struct Cyc_List_List*
! _temp961=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp961->hd=( void*)({ struct _tagged_arr* _temp962=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp962[ 0]= s; _temp962;}); _temp961->tl=
! Cyc_cycargs; _temp961;});} static unsigned char _temp963[ 8u]="cyclone"; static
! struct _tagged_arr Cyc_cyclone_file={ _temp963, _temp963, _temp963 +  8u};
  static void Cyc_set_cyclone_file( struct _tagged_arr s){ Cyc_cyclone_file= s;}
  struct _tuple16{ int f1; struct Cyc_Absyn_Decl* f2; } ; struct _tuple17{ struct
  Cyc_Lineno_Pos* f1; struct Cyc_Absyn_Decl* f2; } ; static void Cyc_process_file(
! struct _tagged_arr filename){ struct _tagged_arr _temp964= Cyc_Filename_chop_extension(
! filename); struct _tagged_arr _temp965= Cyc_Std_strconcat(( struct _tagged_arr)
! _temp964, _tag_arr(".cyp", sizeof( unsigned char), 5u)); struct _tagged_arr
! _temp966= Cyc_Std_str_sepstr(({ struct Cyc_List_List* _temp1014=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1014->hd=( void*) _init_tag_arr((
  struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)),"", sizeof(
! unsigned char), 1u); _temp1014->tl=(( struct Cyc_List_List*(*)( struct
  _tagged_arr*(* f)( struct _tagged_arr*), struct Cyc_List_List* x)) Cyc_List_map)(
  Cyc_sh_escape_stringptr,(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_rev)( Cyc_cycargs)); _temp1014;}), _tag_arr(" ", sizeof( unsigned char),
! 2u)); struct _tagged_arr _temp967=({ struct Cyc_Std_String_pa_struct _temp1013;
! _temp1013.tag= Cyc_Std_String_pa; _temp1013.f1=( struct _tagged_arr) Cyc_sh_escape_string(
! filename);{ struct Cyc_Std_String_pa_struct _temp1012; _temp1012.tag= Cyc_Std_String_pa;
! _temp1012.f1=( struct _tagged_arr) Cyc_sh_escape_string(( struct _tagged_arr)
! _temp965);{ struct Cyc_Std_String_pa_struct _temp1011; _temp1011.tag= Cyc_Std_String_pa;
! _temp1011.f1=( struct _tagged_arr) _temp966;{ struct Cyc_Std_String_pa_struct
! _temp1010; _temp1010.tag= Cyc_Std_String_pa; _temp1010.f1=( struct _tagged_arr)
! Cyc_cyclone_file;{ void* _temp1009[ 4u]={& _temp1010,& _temp1011,& _temp1012,&
! _temp1013}; Cyc_Std_aprintf( _tag_arr("%s %s -E -o %s -x cyc %s", sizeof(
! unsigned char), 25u), _tag_arr( _temp1009, sizeof( void*), 4u));}}}}}); if(
! system( string_to_Cstring(( struct _tagged_arr) _temp967)) !=  0){({ void*
! _temp968[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("\nError: preprocessing\n",
! sizeof( unsigned char), 23u), _tag_arr( _temp968, sizeof( void*), 0u));});
! return;} Cyc_Position_reset_position(( struct _tagged_arr) _temp965);{ struct
! Cyc_Std___sFILE* in_file=( struct Cyc_Std___sFILE*) _check_null( Cyc_Std_fopen((
! struct _tagged_arr) _temp965, _tag_arr("r", sizeof( unsigned char), 2u))); Cyc_Lex_lex_init();{
! struct Cyc_List_List* _temp969= Cyc_Parse_parse_file( in_file); Cyc_Lex_lex_init();
! Cyc_Std_file_close(( struct Cyc_Std___sFILE*) in_file); _temp969= Cyc_flatten_decls(
! _temp969);{ struct Cyc_List_List* _temp970=(( struct Cyc_List_List*(*)( struct
! _tuple14*(* f)( int), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_start2pos,((
! struct Cyc_List_List*(*)( int(* f)( struct Cyc_Absyn_Decl*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_decl2start, _temp969)); Cyc_Lineno_poss_of_abss(( struct
! _tagged_arr) _temp965, _temp970); Cyc_Std_remove(( struct _tagged_arr) _temp965);{
! struct Cyc_List_List* _temp971=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)((( struct Cyc_List_List*(*)( struct
! Cyc_Lineno_Pos*(* f)( struct _tuple14*), struct Cyc_List_List* x)) Cyc_List_map)((
! struct Cyc_Lineno_Pos*(*)( struct _tuple14*)) Cyc_Core_snd, _temp970), _temp969);
! _temp971=(( struct Cyc_List_List*(*)( struct _tagged_arr file, struct Cyc_List_List*
! x)) Cyc_this_file)( filename, _temp971);{ struct Cyc_List_List* _temp972=((
! struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)(((
! struct Cyc_List_List*(*)( int(* f)( struct Cyc_Lineno_Pos*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_lineno,(( struct Cyc_List_List*(*)( struct Cyc_Lineno_Pos*(*
! f)( struct _tuple17*), struct Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Lineno_Pos*(*)(
! struct _tuple17*)) Cyc_Core_fst, _temp971)),(( struct Cyc_List_List*(*)( struct
! Cyc_Absyn_Decl*(* f)( struct _tuple17*), struct Cyc_List_List* x)) Cyc_List_map)((
! struct Cyc_Absyn_Decl*(*)( struct _tuple17*)) Cyc_Core_snd, _temp971)); struct
! Cyc_Std___sFILE* _temp973=( struct Cyc_Std___sFILE*) _check_null( Cyc_Std_fopen(
! filename, _tag_arr("r", sizeof( unsigned char), 2u))); struct Cyc_Lexing_lexbuf*
! _temp974= Cyc_Lexing_from_file( _temp973); struct Cyc_List_List* _temp975= 0;
! struct _tuple10* comment; while(( comment=(( struct _tuple10*(*)( struct Cyc_Lexing_lexbuf*
! lexbuf)) Cyc_token)( _temp974)) !=  0) { _temp975=({ struct Cyc_List_List*
! _temp976=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp976->hd=( void*)(( struct _tuple10*) _check_null( comment)); _temp976->tl=
! _temp975; _temp976;});} Cyc_Std_fclose( _temp973); _temp975=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp975);{ struct Cyc_List_List*
! _temp977=(( struct Cyc_List_List*(*)( struct _tuple14*(* f)( int), struct Cyc_List_List*
  x)) Cyc_List_map)( Cyc_start2pos,(( struct Cyc_List_List*(*)( int(* f)( struct
! _tuple10*), struct Cyc_List_List* x)) Cyc_List_map)(( int(*)( struct _tuple10*))
! Cyc_Core_fst, _temp975)); Cyc_Lineno_poss_of_abss( filename, _temp977);{ struct
! Cyc_List_List* _temp978=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_zip)((( struct Cyc_List_List*(*)( struct Cyc_Lineno_Pos*(*
! f)( struct _tuple14*), struct Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Lineno_Pos*(*)(
! struct _tuple14*)) Cyc_Core_snd, _temp977),(( struct Cyc_List_List*(*)( void*(*
! f)( struct _tuple10*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
! struct _tuple10*)) Cyc_Core_snd, _temp975)); _temp978= Cyc_this_file( filename,
! _temp978);{ struct Cyc_List_List* _temp979=(( struct Cyc_List_List*(*)( struct
! Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)((( struct Cyc_List_List*(*)(
  int(* f)( struct Cyc_Lineno_Pos*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_lineno,((
  struct Cyc_List_List*(*)( struct Cyc_Lineno_Pos*(* f)( struct _tuple15*), struct
  Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Lineno_Pos*(*)( struct _tuple15*))
! Cyc_Core_fst, _temp978)),(( struct Cyc_List_List*(*)( void*(* f)( struct
  _tuple15*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)( struct _tuple15*))
! Cyc_Core_snd, _temp978)); while( _temp972 !=  0? _temp979 !=  0: 0) { struct
! _tuple16 _temp982; struct Cyc_Absyn_Decl* _temp983; int _temp985; struct
! _tuple16* _temp980=( struct _tuple16*)(( struct Cyc_List_List*) _check_null(
! _temp972))->hd; _temp982=* _temp980; _LL986: _temp985= _temp982.f1; goto _LL984;
! _LL984: _temp983= _temp982.f2; goto _LL981; _LL981: { struct _tuple10 _temp989;
! void* _temp990; int _temp992; struct _tuple10* _temp987=( struct _tuple10*)((
! struct Cyc_List_List*) _check_null( _temp979))->hd; _temp989=* _temp987; _LL993:
! _temp992= _temp989.f1; goto _LL991; _LL991: _temp990= _temp989.f2; goto _LL988;
! _LL988: { void* _temp994= _temp990; struct _tagged_arr _temp1000; struct
! _tagged_arr _temp1002; _LL996: if(*(( int*) _temp994) ==  Cyc_Standalone){
! _LL1001: _temp1000=(( struct Cyc_Standalone_struct*) _temp994)->f1; goto _LL997;}
! else{ goto _LL998;} _LL998: if(*(( int*) _temp994) ==  Cyc_MatchDecl){ _LL1003:
! _temp1002=(( struct Cyc_MatchDecl_struct*) _temp994)->f1; goto _LL999;} else{
! goto _LL995;} _LL997: Cyc_Dump_dump_comment(( struct _tagged_arr) _temp1000);
! Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof( unsigned char), 2u)); _temp979=((
! struct Cyc_List_List*) _check_null( _temp979))->tl; goto _LL995; _LL999: if(
! _temp992 <  _temp985){ _temp979=(( struct Cyc_List_List*) _check_null( _temp979))->tl;
! continue;} if((( struct Cyc_List_List*) _check_null( _temp972))->tl !=  0){
! struct _tuple16 _temp1006; int _temp1007; struct _tuple16* _temp1004=( struct
! _tuple16*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( _temp972))->tl))->hd; _temp1006=* _temp1004; _LL1008: _temp1007=
! _temp1006.f1; goto _LL1005; _LL1005: if( _temp1007 <  _temp992){ _temp972=((
! struct Cyc_List_List*) _check_null( _temp972))->tl; continue;}} Cyc_Dump_dumpdecl(
! _temp983,( struct _tagged_arr) _temp1002); Cyc_Std_fflush(( struct Cyc_Std___sFILE*)
! Cyc_Std_stdout); _temp972=(( struct Cyc_List_List*) _check_null( _temp972))->tl;
! _temp979=(( struct Cyc_List_List*) _check_null( _temp979))->tl; goto _LL995;
! _LL995:;}}}}}}}}}}}} struct _tuple18{ struct _tagged_arr f1; int f2; struct
! _tagged_arr f3; void* f4; struct _tagged_arr f5; } ; int Cyc_main( int argc,
! struct _tagged_arr argv){ struct Cyc_List_List* options=({ struct _tuple18*
! _temp1016[ 4u]; _temp1016[ 3u]=({ struct _tuple18* _temp1026=( struct _tuple18*)
! _cycalloc( sizeof( struct _tuple18)); _temp1026->f1= _tag_arr("-B", sizeof(
! unsigned char), 3u); _temp1026->f2= 1; _temp1026->f3= _tag_arr("<file>", sizeof(
! unsigned char), 7u); _temp1026->f4=( void*)({ struct Cyc_Arg_Flag_spec_struct*
! _temp1027=( struct Cyc_Arg_Flag_spec_struct*) _cycalloc( sizeof( struct Cyc_Arg_Flag_spec_struct));
! _temp1027[ 0]=({ struct Cyc_Arg_Flag_spec_struct _temp1028; _temp1028.tag= Cyc_Arg_Flag_spec;
! _temp1028.f1= Cyc_add_cycarg; _temp1028;}); _temp1027;}); _temp1026->f5=
! _tag_arr("Add to the list of directories to search for compiler files", sizeof(
! unsigned char), 60u); _temp1026;}); _temp1016[ 2u]=({ struct _tuple18* _temp1023=(
! struct _tuple18*) _cycalloc( sizeof( struct _tuple18)); _temp1023->f1= _tag_arr("-I",
! sizeof( unsigned char), 3u); _temp1023->f2= 1; _temp1023->f3= _tag_arr("<dir>",
! sizeof( unsigned char), 6u); _temp1023->f4=( void*)({ struct Cyc_Arg_Flag_spec_struct*
! _temp1024=( struct Cyc_Arg_Flag_spec_struct*) _cycalloc( sizeof( struct Cyc_Arg_Flag_spec_struct));
! _temp1024[ 0]=({ struct Cyc_Arg_Flag_spec_struct _temp1025; _temp1025.tag= Cyc_Arg_Flag_spec;
! _temp1025.f1= Cyc_add_cycarg; _temp1025;}); _temp1024;}); _temp1023->f5=
! _tag_arr("Add to the list of directories to search for include files", sizeof(
! unsigned char), 59u); _temp1023;}); _temp1016[ 1u]=({ struct _tuple18* _temp1020=(
! struct _tuple18*) _cycalloc( sizeof( struct _tuple18)); _temp1020->f1= _tag_arr("-D",
! sizeof( unsigned char), 3u); _temp1020->f2= 1; _temp1020->f3= _tag_arr("<name>[=<value>]",
! sizeof( unsigned char), 17u); _temp1020->f4=( void*)({ struct Cyc_Arg_Flag_spec_struct*
! _temp1021=( struct Cyc_Arg_Flag_spec_struct*) _cycalloc( sizeof( struct Cyc_Arg_Flag_spec_struct));
! _temp1021[ 0]=({ struct Cyc_Arg_Flag_spec_struct _temp1022; _temp1022.tag= Cyc_Arg_Flag_spec;
! _temp1022.f1= Cyc_add_cycarg; _temp1022;}); _temp1021;}); _temp1020->f5=
! _tag_arr("Pass definition to preprocessor", sizeof( unsigned char), 32u);
! _temp1020;}); _temp1016[ 0u]=({ struct _tuple18* _temp1017=( struct _tuple18*)
! _cycalloc( sizeof( struct _tuple18)); _temp1017->f1= _tag_arr("-cyclone",
! sizeof( unsigned char), 9u); _temp1017->f2= 0; _temp1017->f3= _tag_arr(" <file>",
! sizeof( unsigned char), 8u); _temp1017->f4=( void*)({ struct Cyc_Arg_String_spec_struct*
! _temp1018=( struct Cyc_Arg_String_spec_struct*) _cycalloc( sizeof( struct Cyc_Arg_String_spec_struct));
! _temp1018[ 0]=({ struct Cyc_Arg_String_spec_struct _temp1019; _temp1019.tag= Cyc_Arg_String_spec;
! _temp1019.f1= Cyc_set_cyclone_file; _temp1019;}); _temp1018;}); _temp1017->f5=
  _tag_arr("Use <file> as the cyclone compiler", sizeof( unsigned char), 35u);
! _temp1017;});(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1016, sizeof( struct _tuple18*), 4u));}); Cyc_Arg_parse( options,
  Cyc_add_other, _tag_arr("Options:", sizeof( unsigned char), 9u), argv);{ struct
! Cyc_List_List* _temp1015=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_rev)( Cyc_cycdoc_files); for( 0; _temp1015 !=  0; _temp1015=(( struct
! Cyc_List_List*) _check_null( _temp1015))->tl){ Cyc_process_file(*(( struct
! _tagged_arr*)(( struct Cyc_List_List*) _check_null( _temp1015))->hd));}} return
  0;}
--- 1773,2104 ----
  int)'}', outf); break;}} else{ if( c == '['){ depth ++;}} Cyc_Std_fputc(( int) c,
  outf);}}} void Cyc_Dump_dump_comment( struct _tagged_arr s){ Cyc_Dump_pr_comment(
  Cyc_Std_stdout, s);} void Cyc_Dump_dumpdecl( struct Cyc_Absyn_Decl* d, struct
! _tagged_arr comment){ void* _temp811=( void*) d->r; struct Cyc_Absyn_Structdecl*
! _temp837; struct Cyc_Absyn_Uniondecl* _temp839; struct Cyc_Absyn_Vardecl*
! _temp841; struct Cyc_Absyn_Vardecl _temp843; void* _temp844; struct Cyc_Absyn_Tqual
! _temp846; struct _tuple1* _temp848; struct Cyc_Absyn_Tuniondecl* _temp850;
! struct Cyc_Absyn_Tuniondecl _temp852; int _temp853; struct Cyc_Core_Opt*
! _temp855; struct Cyc_List_List* _temp857; struct _tuple1* _temp859; void*
! _temp861; struct Cyc_Absyn_Enumdecl* _temp863; struct Cyc_Absyn_Enumdecl
! _temp865; struct Cyc_Core_Opt* _temp866; struct _tuple1* _temp868; void*
! _temp870; struct Cyc_Absyn_Typedefdecl* _temp872; _LL813: if(*(( int*) _temp811)
! ==  Cyc_Absyn_Struct_d){ _LL838: _temp837=(( struct Cyc_Absyn_Struct_d_struct*)
! _temp811)->f1; goto _LL814;} else{ goto _LL815;} _LL815: if(*(( int*) _temp811)
! ==  Cyc_Absyn_Union_d){ _LL840: _temp839=(( struct Cyc_Absyn_Union_d_struct*)
! _temp811)->f1; goto _LL816;} else{ goto _LL817;} _LL817: if(*(( int*) _temp811)
! ==  Cyc_Absyn_Var_d){ _LL842: _temp841=(( struct Cyc_Absyn_Var_d_struct*)
! _temp811)->f1; _temp843=* _temp841; _LL849: _temp848= _temp843.name; goto _LL847;
! _LL847: _temp846= _temp843.tq; goto _LL845; _LL845: _temp844=( void*) _temp843.type;
! goto _LL818;} else{ goto _LL819;} _LL819: if(*(( int*) _temp811) ==  Cyc_Absyn_Tunion_d){
! _LL851: _temp850=(( struct Cyc_Absyn_Tunion_d_struct*) _temp811)->f1; _temp852=*
! _temp850; _LL862: _temp861=( void*) _temp852.sc; goto _LL860; _LL860: _temp859=
! _temp852.name; goto _LL858; _LL858: _temp857= _temp852.tvs; goto _LL856; _LL856:
! _temp855= _temp852.fields; goto _LL854; _LL854: _temp853= _temp852.is_xtunion;
! goto _LL820;} else{ goto _LL821;} _LL821: if(*(( int*) _temp811) ==  Cyc_Absyn_Enum_d){
! _LL864: _temp863=(( struct Cyc_Absyn_Enum_d_struct*) _temp811)->f1; _temp865=*
! _temp863; _LL871: _temp870=( void*) _temp865.sc; goto _LL869; _LL869: _temp868=
! _temp865.name; goto _LL867; _LL867: _temp866= _temp865.fields; goto _LL822;}
! else{ goto _LL823;} _LL823: if(*(( int*) _temp811) ==  Cyc_Absyn_Typedef_d){
! _LL873: _temp872=(( struct Cyc_Absyn_Typedef_d_struct*) _temp811)->f1; goto
! _LL824;} else{ goto _LL825;} _LL825: if(*(( int*) _temp811) ==  Cyc_Absyn_Fn_d){
! goto _LL826;} else{ goto _LL827;} _LL827: if(*(( int*) _temp811) ==  Cyc_Absyn_Let_d){
! goto _LL828;} else{ goto _LL829;} _LL829: if(*(( int*) _temp811) ==  Cyc_Absyn_Letv_d){
! goto _LL830;} else{ goto _LL831;} _LL831: if(*(( int*) _temp811) ==  Cyc_Absyn_Namespace_d){
! goto _LL832;} else{ goto _LL833;} _LL833: if(*(( int*) _temp811) ==  Cyc_Absyn_Using_d){
! goto _LL834;} else{ goto _LL835;} _LL835: if(*(( int*) _temp811) ==  Cyc_Absyn_ExternC_d){
! goto _LL836;} else{ goto _LL812;} _LL814: Cyc_Dump_dump_begin(); Cyc_Dump_dump_alpha(
! _tag_arr("struct", sizeof( unsigned char), 7u)); if( _temp837->name !=  0){ Cyc_Dump_dump_boldqvar((
! struct _tuple1*)(( struct Cyc_Core_Opt*) _check_null( _temp837->name))->v);} Cyc_Dump_dumptvars(
! _temp837->tvs); if( _temp837->fields ==  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n",
  sizeof( unsigned char), 3u));} else{ Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof(
  unsigned char), 2u)); Cyc_Dump_dump_lb(); Cyc_Dump_dump_symbol( _tag_arr("\\\\\n",
  sizeof( unsigned char), 4u)); Cyc_Dump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp837->fields))->v); Cyc_Dump_dump_rb();
  Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle();
  Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof(
! unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL812; _LL816: Cyc_Dump_dump_begin();
  Cyc_Dump_dump_alpha( _tag_arr("union", sizeof( unsigned char), 6u)); if(
! _temp839->name !=  0){ Cyc_Dump_dump_boldqvar(( struct _tuple1*)(( struct Cyc_Core_Opt*)
! _check_null( _temp839->name))->v);} Cyc_Dump_dumptvars( _temp839->tvs); if(
! _temp839->fields ==  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof(
  unsigned char), 3u));} else{ Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof(
  unsigned char), 2u)); Cyc_Dump_dump_lb(); Cyc_Dump_dump_symbol( _tag_arr("\\\\\n",
  sizeof( unsigned char), 4u)); Cyc_Dump_dumpstructfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp839->fields))->v); Cyc_Dump_dump_rb();
  Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle();
  Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof(
! unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL812; _LL818: Cyc_Dump_dump_begin();((
  void(*)( struct Cyc_Absyn_Tqual tq, void* t, void(* f)( struct _tuple1*), struct
! _tuple1* a)) Cyc_Dump_dumptqtd)( _temp846, _temp844, Cyc_Dump_dump_boldqvar,
! _temp848); Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));
  Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol(
! _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL812;
! _LL820: Cyc_Dump_dump_begin(); if( _temp853){ Cyc_Dump_dump_alpha( _tag_arr("xtunion",
  sizeof( unsigned char), 8u));} else{ Cyc_Dump_dump_alpha( _tag_arr("tunion",
! sizeof( unsigned char), 7u));} Cyc_Dump_dump_boldqvar( _temp859); Cyc_Dump_dumptvars(
! _temp857); if( _temp855 ==  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof(
  unsigned char), 3u));} else{ Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof(
  unsigned char), 2u)); Cyc_Dump_dump_lb(); Cyc_Dump_dump_symbol( _tag_arr("\\\\\n~~",
  sizeof( unsigned char), 6u)); Cyc_Dump_dumptunionfields(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp855))->v); Cyc_Dump_dump_symbol(
  _tag_arr("\\\\\n", sizeof( unsigned char), 4u)); Cyc_Dump_dump_rb(); Cyc_Dump_dump_symbol(
  _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment(
  comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end();
! goto _LL812; _LL822: Cyc_Dump_dump_begin(); Cyc_Dump_dump_alpha( _tag_arr("enum",
! sizeof( unsigned char), 5u)); Cyc_Dump_dump_boldqvar( _temp868); if( _temp866 == 
  0){ Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));} else{
  Cyc_Dump_dump_symbol( _tag_arr(" ", sizeof( unsigned char), 2u)); Cyc_Dump_dump_lb();
  Cyc_Dump_dump_symbol( _tag_arr("\\\\\n~~", sizeof( unsigned char), 6u)); Cyc_Dump_dumpenumfields((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp866))->v); Cyc_Dump_dump_symbol(
  _tag_arr("\\\\\n", sizeof( unsigned char), 4u)); Cyc_Dump_dump_rb(); Cyc_Dump_dump_symbol(
  _tag_arr(";\n", sizeof( unsigned char), 3u));} Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment(
  comment); Cyc_Dump_dump_symbol( _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end();
! goto _LL812; _LL824: Cyc_Dump_dump_begin(); Cyc_Dump_dump_alpha( _tag_arr("typedef",
  sizeof( unsigned char), 8u));(( void(*)( struct Cyc_Absyn_Tqual tq, void* t,
  void(* f)( struct Cyc_Absyn_Typedefdecl*), struct Cyc_Absyn_Typedefdecl* a)) Cyc_Dump_dumptqtd)(({
! struct Cyc_Absyn_Tqual _temp874; _temp874.q_const= 0; _temp874.q_volatile= 0;
! _temp874.q_restrict= 0; _temp874;}),( void*) _temp872->defn, Cyc_Dump_dump_boldtypedefname,
! _temp872); Cyc_Dump_dump_symbol( _tag_arr(";\n", sizeof( unsigned char), 3u));
  Cyc_Dump_dump_middle(); Cyc_Dump_dump_comment( comment); Cyc_Dump_dump_symbol(
! _tag_arr("\n", sizeof( unsigned char), 2u)); Cyc_Dump_dump_end(); goto _LL812;
! _LL826: goto _LL812; _LL828: goto _LL812; _LL830: goto _LL812; _LL832: goto
! _LL812; _LL834: goto _LL812; _LL836: goto _LL812; _LL812:;} static int Cyc_is_other_special(
! unsigned char c){ switch( c){ case '\\': _LL875: goto _LL876; case '"': _LL876:
! goto _LL877; case ';': _LL877: goto _LL878; case '&': _LL878: goto _LL879; case
! '(': _LL879: goto _LL880; case ')': _LL880: goto _LL881; case '|': _LL881: goto
! _LL882; case '^': _LL882: goto _LL883; case '<': _LL883: goto _LL884; case '>':
! _LL884: goto _LL885; case ' ': _LL885: goto _LL886; case '\n': _LL886: goto
! _LL887; case '\t': _LL887: return 1; default: _LL888: return 0;}} static struct
! _tagged_arr Cyc_sh_escape_string( struct _tagged_arr s){ unsigned int _temp890=
! Cyc_Std_strlen( s); int _temp891= 0; int _temp892= 0;{ int i= 0; for( 0; i < 
! _temp890; i ++){ unsigned char _temp893=*(( const unsigned char*)
! _check_unknown_subscript( s, sizeof( unsigned char), i)); if( _temp893 == '\''){
! _temp891 ++;} else{ if( Cyc_is_other_special( _temp893)){ _temp892 ++;}}}} if(
! _temp891 ==  0? _temp892 ==  0: 0){ return s;} if( _temp891 ==  0){ return(
! struct _tagged_arr) Cyc_Std_strconcat_l(({ struct _tagged_arr* _temp894[ 3u];
! _temp894[ 2u]= _init_tag_arr(( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)),"'", sizeof( unsigned char), 2u); _temp894[ 1u]=({ struct
! _tagged_arr* _temp895=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp895[ 0]=( struct _tagged_arr) s; _temp895;}); _temp894[ 0u]=
  _init_tag_arr(( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)),"'",
  sizeof( unsigned char), 2u);(( struct Cyc_List_List*(*)( struct _tagged_arr))
! Cyc_List_list)( _tag_arr( _temp894, sizeof( struct _tagged_arr*), 3u));}));}{
! unsigned int _temp896=( _temp890 +  _temp891) +  _temp892; struct _tagged_arr
! _temp897=({ unsigned int _temp901= _temp896 +  1; unsigned char* _temp902=(
! unsigned char*) _cycalloc_atomic( _check_times( sizeof( unsigned char), _temp901));
! struct _tagged_arr _temp904= _tag_arr( _temp902, sizeof( unsigned char),
! _temp896 +  1);{ unsigned int _temp903= _temp901; unsigned int i; for( i= 0; i < 
! _temp903; i ++){ _temp902[ i]='\000';}}; _temp904;}); int _temp898= 0; int
! _temp899= 0; for( 0; _temp898 <  _temp890; _temp898 ++){ unsigned char _temp900=*((
  const unsigned char*) _check_unknown_subscript( s, sizeof( unsigned char),
! _temp898)); if( _temp900 == '\''? 1: Cyc_is_other_special( _temp900)){*((
! unsigned char*) _check_unknown_subscript( _temp897, sizeof( unsigned char),
! _temp899 ++))='\\';}*(( unsigned char*) _check_unknown_subscript( _temp897,
! sizeof( unsigned char), _temp899 ++))= _temp900;} return( struct _tagged_arr)
! _temp897;}} static struct _tagged_arr* Cyc_sh_escape_stringptr( struct
! _tagged_arr* sp){ return({ struct _tagged_arr* _temp905=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp905[ 0]= Cyc_sh_escape_string(* sp);
! _temp905;});} static struct Cyc_Lineno_Pos* Cyc_new_pos(){ return({ struct Cyc_Lineno_Pos*
! _temp906=( struct Cyc_Lineno_Pos*) _cycalloc( sizeof( struct Cyc_Lineno_Pos));
! _temp906->logical_file= _tag_arr("", sizeof( unsigned char), 1u); _temp906->line=
! Cyc_Core_new_string( 0); _temp906->line_no= 0; _temp906->col= 0; _temp906;});}
  struct _tuple14{ int f1; struct Cyc_Lineno_Pos* f2; } ; static struct _tuple14*
! Cyc_start2pos( int x){ return({ struct _tuple14* _temp907=( struct _tuple14*)
! _cycalloc( sizeof( struct _tuple14)); _temp907->f1= x; _temp907->f2= Cyc_new_pos();
! _temp907;});} static int Cyc_decl2start( struct Cyc_Absyn_Decl* d){ return((
  struct Cyc_Position_Segment*) _check_null( d->loc))->start;} struct _tuple15{
  struct Cyc_Lineno_Pos* f1; void* f2; } ; static struct Cyc_List_List* Cyc_this_file(
  struct _tagged_arr file, struct Cyc_List_List* x){ struct Cyc_List_List*
! _temp908= 0; for( 0; x !=  0; x=(( struct Cyc_List_List*) _check_null( x))->tl){
  if( Cyc_Std_strcmp(((*(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! x))->hd)).f1)->logical_file, file) ==  0){ _temp908=({ struct Cyc_List_List*
! _temp909=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp909->hd=( void*)(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! x))->hd); _temp909->tl= _temp908; _temp909;});}} _temp908=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp908); return _temp908;} static
  int Cyc_lineno( struct Cyc_Lineno_Pos* p){ return p->line_no;} static struct Cyc_List_List*
! Cyc_flatten_decls( struct Cyc_List_List* decls){ struct Cyc_List_List* _temp910=
! 0; while( decls !=  0) { void* _temp911=( void*)(( struct Cyc_Absyn_Decl*)((
  struct Cyc_List_List*) _check_null( decls))->hd)->r; struct Cyc_List_List*
! _temp937; struct Cyc_List_List* _temp939; struct Cyc_List_List* _temp941; _LL913:
! if(*(( int*) _temp911) ==  Cyc_Absyn_Namespace_d){ _LL938: _temp937=(( struct
! Cyc_Absyn_Namespace_d_struct*) _temp911)->f2; goto _LL914;} else{ goto _LL915;}
! _LL915: if(*(( int*) _temp911) ==  Cyc_Absyn_Using_d){ _LL940: _temp939=((
! struct Cyc_Absyn_Using_d_struct*) _temp911)->f2; goto _LL916;} else{ goto _LL917;}
! _LL917: if(*(( int*) _temp911) ==  Cyc_Absyn_ExternC_d){ _LL942: _temp941=((
! struct Cyc_Absyn_ExternC_d_struct*) _temp911)->f1; goto _LL918;} else{ goto
! _LL919;} _LL919: if(*(( int*) _temp911) ==  Cyc_Absyn_Struct_d){ goto _LL920;}
! else{ goto _LL921;} _LL921: if(*(( int*) _temp911) ==  Cyc_Absyn_Union_d){ goto
! _LL922;} else{ goto _LL923;} _LL923: if(*(( int*) _temp911) ==  Cyc_Absyn_Var_d){
! goto _LL924;} else{ goto _LL925;} _LL925: if(*(( int*) _temp911) ==  Cyc_Absyn_Tunion_d){
! goto _LL926;} else{ goto _LL927;} _LL927: if(*(( int*) _temp911) ==  Cyc_Absyn_Enum_d){
! goto _LL928;} else{ goto _LL929;} _LL929: if(*(( int*) _temp911) ==  Cyc_Absyn_Typedef_d){
! goto _LL930;} else{ goto _LL931;} _LL931: if(*(( int*) _temp911) ==  Cyc_Absyn_Fn_d){
! goto _LL932;} else{ goto _LL933;} _LL933: if(*(( int*) _temp911) ==  Cyc_Absyn_Let_d){
! goto _LL934;} else{ goto _LL935;} _LL935: if(*(( int*) _temp911) ==  Cyc_Absyn_Letv_d){
! goto _LL936;} else{ goto _LL912;} _LL914: _temp939= _temp937; goto _LL916;
! _LL916: _temp941= _temp939; goto _LL918; _LL918: decls=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp941,((
! struct Cyc_List_List*) _check_null( decls))->tl); goto _LL912; _LL920: goto
! _LL922; _LL922: goto _LL924; _LL924: goto _LL926; _LL926: goto _LL928; _LL928:
! goto _LL930; _LL930: goto _LL932; _LL932: goto _LL934; _LL934: goto _LL936;
! _LL936: _temp910=({ struct Cyc_List_List* _temp943=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp943->hd=( void*)(( struct Cyc_Absyn_Decl*)((
! struct Cyc_List_List*) _check_null( decls))->hd); _temp943->tl= _temp910;
! _temp943;}); decls=(( struct Cyc_List_List*) _check_null( decls))->tl; goto
! _LL912; _LL912:;} return(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_imp_rev)( _temp910);} static struct Cyc_List_List* Cyc_cycdoc_files= 0;
  static void Cyc_add_other( struct _tagged_arr s){ Cyc_cycdoc_files=({ struct Cyc_List_List*
! _temp944=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp944->hd=( void*)({ struct _tagged_arr* _temp945=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp945[ 0]= s; _temp945;}); _temp944->tl=
! Cyc_cycdoc_files; _temp944;});} static struct Cyc_List_List* Cyc_cycargs= 0;
  static void Cyc_add_cycarg( struct _tagged_arr s){ Cyc_cycargs=({ struct Cyc_List_List*
! _temp946=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp946->hd=( void*)({ struct _tagged_arr* _temp947=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp947[ 0]= s; _temp947;}); _temp946->tl=
! Cyc_cycargs; _temp946;});} static unsigned char _temp948[ 8u]="cyclone"; static
! struct _tagged_arr Cyc_cyclone_file={ _temp948, _temp948, _temp948 +  8u};
  static void Cyc_set_cyclone_file( struct _tagged_arr s){ Cyc_cyclone_file= s;}
  struct _tuple16{ int f1; struct Cyc_Absyn_Decl* f2; } ; struct _tuple17{ struct
  Cyc_Lineno_Pos* f1; struct Cyc_Absyn_Decl* f2; } ; static void Cyc_process_file(
! struct _tagged_arr filename){ struct _tagged_arr _temp949= Cyc_Filename_chop_extension(
! filename); struct _tagged_arr _temp950= Cyc_Std_strconcat(( struct _tagged_arr)
! _temp949, _tag_arr(".cyp", sizeof( unsigned char), 5u)); struct _tagged_arr
! _temp951= Cyc_Std_str_sepstr(({ struct Cyc_List_List* _temp999=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp999->hd=( void*) _init_tag_arr((
  struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)),"", sizeof(
! unsigned char), 1u); _temp999->tl=(( struct Cyc_List_List*(*)( struct
  _tagged_arr*(* f)( struct _tagged_arr*), struct Cyc_List_List* x)) Cyc_List_map)(
  Cyc_sh_escape_stringptr,(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_rev)( Cyc_cycargs)); _temp999;}), _tag_arr(" ", sizeof( unsigned char),
! 2u)); struct _tagged_arr _temp952=({ struct Cyc_Std_String_pa_struct _temp998;
! _temp998.tag= Cyc_Std_String_pa; _temp998.f1=( struct _tagged_arr) Cyc_sh_escape_string(
! filename);{ struct Cyc_Std_String_pa_struct _temp997; _temp997.tag= Cyc_Std_String_pa;
! _temp997.f1=( struct _tagged_arr) Cyc_sh_escape_string(( struct _tagged_arr)
! _temp950);{ struct Cyc_Std_String_pa_struct _temp996; _temp996.tag= Cyc_Std_String_pa;
! _temp996.f1=( struct _tagged_arr) _temp951;{ struct Cyc_Std_String_pa_struct
! _temp995; _temp995.tag= Cyc_Std_String_pa; _temp995.f1=( struct _tagged_arr) Cyc_cyclone_file;{
! void* _temp994[ 4u]={& _temp995,& _temp996,& _temp997,& _temp998}; Cyc_Std_aprintf(
! _tag_arr("%s %s -E -o %s -x cyc %s", sizeof( unsigned char), 25u), _tag_arr(
! _temp994, sizeof( void*), 4u));}}}}}); if( system( string_to_Cstring(( struct
! _tagged_arr) _temp952)) !=  0){({ void* _temp953[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr,
! _tag_arr("\nError: preprocessing\n", sizeof( unsigned char), 23u), _tag_arr(
! _temp953, sizeof( void*), 0u));}); return;} Cyc_Position_reset_position(( struct
! _tagged_arr) _temp950);{ struct Cyc_Std___sFILE* in_file=( struct Cyc_Std___sFILE*)
! _check_null( Cyc_Std_fopen(( struct _tagged_arr) _temp950, _tag_arr("r", sizeof(
! unsigned char), 2u))); Cyc_Lex_lex_init();{ struct Cyc_List_List* _temp954= Cyc_Parse_parse_file(
! in_file); Cyc_Lex_lex_init(); Cyc_Std_file_close(( struct Cyc_Std___sFILE*)
! in_file); _temp954= Cyc_flatten_decls( _temp954);{ struct Cyc_List_List*
! _temp955=(( struct Cyc_List_List*(*)( struct _tuple14*(* f)( int), struct Cyc_List_List*
  x)) Cyc_List_map)( Cyc_start2pos,(( struct Cyc_List_List*(*)( int(* f)( struct
! Cyc_Absyn_Decl*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_decl2start,
! _temp954)); Cyc_Lineno_poss_of_abss(( struct _tagged_arr) _temp950, _temp955);
! Cyc_Std_remove(( struct _tagged_arr) _temp950);{ struct Cyc_List_List* _temp956=((
! struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)(((
! struct Cyc_List_List*(*)( struct Cyc_Lineno_Pos*(* f)( struct _tuple14*), struct
! Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Lineno_Pos*(*)( struct _tuple14*))
! Cyc_Core_snd, _temp955), _temp954); _temp956=(( struct Cyc_List_List*(*)( struct
! _tagged_arr file, struct Cyc_List_List* x)) Cyc_this_file)( filename, _temp956);{
! struct Cyc_List_List* _temp957=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)((( struct Cyc_List_List*(*)( int(* f)(
! struct Cyc_Lineno_Pos*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_lineno,((
! struct Cyc_List_List*(*)( struct Cyc_Lineno_Pos*(* f)( struct _tuple17*), struct
! Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Lineno_Pos*(*)( struct _tuple17*))
! Cyc_Core_fst, _temp956)),(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Decl*(* f)(
! struct _tuple17*), struct Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Absyn_Decl*(*)(
! struct _tuple17*)) Cyc_Core_snd, _temp956)); struct Cyc_Std___sFILE* _temp958=(
! struct Cyc_Std___sFILE*) _check_null( Cyc_Std_fopen( filename, _tag_arr("r",
! sizeof( unsigned char), 2u))); struct Cyc_Lexing_lexbuf* _temp959= Cyc_Lexing_from_file(
! _temp958); struct Cyc_List_List* _temp960= 0; struct _tuple10* comment; while((
! comment=(( struct _tuple10*(*)( struct Cyc_Lexing_lexbuf* lexbuf)) Cyc_token)(
! _temp959)) !=  0) { _temp960=({ struct Cyc_List_List* _temp961=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp961->hd=( void*)(( struct
! _tuple10*) _check_null( comment)); _temp961->tl= _temp960; _temp961;});} Cyc_Std_fclose(
! _temp958); _temp960=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
! _temp960);{ struct Cyc_List_List* _temp962=(( struct Cyc_List_List*(*)( struct
! _tuple14*(* f)( int), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_start2pos,((
! struct Cyc_List_List*(*)( int(* f)( struct _tuple10*), struct Cyc_List_List* x))
! Cyc_List_map)(( int(*)( struct _tuple10*)) Cyc_Core_fst, _temp960)); Cyc_Lineno_poss_of_abss(
! filename, _temp962);{ struct Cyc_List_List* _temp963=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)((( struct Cyc_List_List*(*)(
! struct Cyc_Lineno_Pos*(* f)( struct _tuple14*), struct Cyc_List_List* x)) Cyc_List_map)((
! struct Cyc_Lineno_Pos*(*)( struct _tuple14*)) Cyc_Core_snd, _temp962),(( struct
! Cyc_List_List*(*)( void*(* f)( struct _tuple10*), struct Cyc_List_List* x)) Cyc_List_map)((
! void*(*)( struct _tuple10*)) Cyc_Core_snd, _temp960)); _temp963= Cyc_this_file(
! filename, _temp963);{ struct Cyc_List_List* _temp964=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)((( struct Cyc_List_List*(*)(
  int(* f)( struct Cyc_Lineno_Pos*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_lineno,((
  struct Cyc_List_List*(*)( struct Cyc_Lineno_Pos*(* f)( struct _tuple15*), struct
  Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Lineno_Pos*(*)( struct _tuple15*))
! Cyc_Core_fst, _temp963)),(( struct Cyc_List_List*(*)( void*(* f)( struct
  _tuple15*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)( struct _tuple15*))
! Cyc_Core_snd, _temp963)); while( _temp957 !=  0? _temp964 !=  0: 0) { struct
! _tuple16 _temp967; struct Cyc_Absyn_Decl* _temp968; int _temp970; struct
! _tuple16* _temp965=( struct _tuple16*)(( struct Cyc_List_List*) _check_null(
! _temp957))->hd; _temp967=* _temp965; _LL971: _temp970= _temp967.f1; goto _LL969;
! _LL969: _temp968= _temp967.f2; goto _LL966; _LL966: { struct _tuple10 _temp974;
! void* _temp975; int _temp977; struct _tuple10* _temp972=( struct _tuple10*)((
! struct Cyc_List_List*) _check_null( _temp964))->hd; _temp974=* _temp972; _LL978:
! _temp977= _temp974.f1; goto _LL976; _LL976: _temp975= _temp974.f2; goto _LL973;
! _LL973: { void* _temp979= _temp975; struct _tagged_arr _temp985; struct
! _tagged_arr _temp987; _LL981: if(*(( int*) _temp979) ==  Cyc_Standalone){ _LL986:
! _temp985=(( struct Cyc_Standalone_struct*) _temp979)->f1; goto _LL982;} else{
! goto _LL983;} _LL983: if(*(( int*) _temp979) ==  Cyc_MatchDecl){ _LL988:
! _temp987=(( struct Cyc_MatchDecl_struct*) _temp979)->f1; goto _LL984;} else{
! goto _LL980;} _LL982: Cyc_Dump_dump_comment(( struct _tagged_arr) _temp985); Cyc_Dump_dump_symbol(
! _tag_arr("\n", sizeof( unsigned char), 2u)); _temp964=(( struct Cyc_List_List*)
! _check_null( _temp964))->tl; goto _LL980; _LL984: if( _temp977 <  _temp970){
! _temp964=(( struct Cyc_List_List*) _check_null( _temp964))->tl; continue;} if(((
! struct Cyc_List_List*) _check_null( _temp957))->tl !=  0){ struct _tuple16
! _temp991; int _temp992; struct _tuple16* _temp989=( struct _tuple16*)(( struct
! Cyc_List_List*) _check_null((( struct Cyc_List_List*) _check_null( _temp957))->tl))->hd;
! _temp991=* _temp989; _LL993: _temp992= _temp991.f1; goto _LL990; _LL990: if(
! _temp992 <  _temp977){ _temp957=(( struct Cyc_List_List*) _check_null( _temp957))->tl;
! continue;}} Cyc_Dump_dumpdecl( _temp968,( struct _tagged_arr) _temp987); Cyc_Std_fflush((
! struct Cyc_Std___sFILE*) Cyc_Std_stdout); _temp957=(( struct Cyc_List_List*)
! _check_null( _temp957))->tl; _temp964=(( struct Cyc_List_List*) _check_null(
! _temp964))->tl; goto _LL980; _LL980:;}}}}}}}}}}}} struct _tuple18{ struct
! _tagged_arr f1; int f2; struct _tagged_arr f3; void* f4; struct _tagged_arr f5;
! } ; int Cyc_main( int argc, struct _tagged_arr argv){ struct Cyc_List_List*
! options=({ struct _tuple18* _temp1001[ 4u]; _temp1001[ 3u]=({ struct _tuple18*
! _temp1011=( struct _tuple18*) _cycalloc( sizeof( struct _tuple18)); _temp1011->f1=
! _tag_arr("-B", sizeof( unsigned char), 3u); _temp1011->f2= 1; _temp1011->f3=
! _tag_arr("<file>", sizeof( unsigned char), 7u); _temp1011->f4=( void*)({ struct
! Cyc_Arg_Flag_spec_struct* _temp1012=( struct Cyc_Arg_Flag_spec_struct*)
! _cycalloc( sizeof( struct Cyc_Arg_Flag_spec_struct)); _temp1012[ 0]=({ struct
! Cyc_Arg_Flag_spec_struct _temp1013; _temp1013.tag= Cyc_Arg_Flag_spec; _temp1013.f1=
! Cyc_add_cycarg; _temp1013;}); _temp1012;}); _temp1011->f5= _tag_arr("Add to the list of directories to search for compiler files",
! sizeof( unsigned char), 60u); _temp1011;}); _temp1001[ 2u]=({ struct _tuple18*
! _temp1008=( struct _tuple18*) _cycalloc( sizeof( struct _tuple18)); _temp1008->f1=
! _tag_arr("-I", sizeof( unsigned char), 3u); _temp1008->f2= 1; _temp1008->f3=
! _tag_arr("<dir>", sizeof( unsigned char), 6u); _temp1008->f4=( void*)({ struct
! Cyc_Arg_Flag_spec_struct* _temp1009=( struct Cyc_Arg_Flag_spec_struct*)
! _cycalloc( sizeof( struct Cyc_Arg_Flag_spec_struct)); _temp1009[ 0]=({ struct
! Cyc_Arg_Flag_spec_struct _temp1010; _temp1010.tag= Cyc_Arg_Flag_spec; _temp1010.f1=
! Cyc_add_cycarg; _temp1010;}); _temp1009;}); _temp1008->f5= _tag_arr("Add to the list of directories to search for include files",
! sizeof( unsigned char), 59u); _temp1008;}); _temp1001[ 1u]=({ struct _tuple18*
! _temp1005=( struct _tuple18*) _cycalloc( sizeof( struct _tuple18)); _temp1005->f1=
! _tag_arr("-D", sizeof( unsigned char), 3u); _temp1005->f2= 1; _temp1005->f3=
! _tag_arr("<name>[=<value>]", sizeof( unsigned char), 17u); _temp1005->f4=( void*)({
! struct Cyc_Arg_Flag_spec_struct* _temp1006=( struct Cyc_Arg_Flag_spec_struct*)
! _cycalloc( sizeof( struct Cyc_Arg_Flag_spec_struct)); _temp1006[ 0]=({ struct
! Cyc_Arg_Flag_spec_struct _temp1007; _temp1007.tag= Cyc_Arg_Flag_spec; _temp1007.f1=
! Cyc_add_cycarg; _temp1007;}); _temp1006;}); _temp1005->f5= _tag_arr("Pass definition to preprocessor",
! sizeof( unsigned char), 32u); _temp1005;}); _temp1001[ 0u]=({ struct _tuple18*
! _temp1002=( struct _tuple18*) _cycalloc( sizeof( struct _tuple18)); _temp1002->f1=
! _tag_arr("-cyclone", sizeof( unsigned char), 9u); _temp1002->f2= 0; _temp1002->f3=
! _tag_arr(" <file>", sizeof( unsigned char), 8u); _temp1002->f4=( void*)({ struct
! Cyc_Arg_String_spec_struct* _temp1003=( struct Cyc_Arg_String_spec_struct*)
! _cycalloc( sizeof( struct Cyc_Arg_String_spec_struct)); _temp1003[ 0]=({ struct
! Cyc_Arg_String_spec_struct _temp1004; _temp1004.tag= Cyc_Arg_String_spec;
! _temp1004.f1= Cyc_set_cyclone_file; _temp1004;}); _temp1003;}); _temp1002->f5=
  _tag_arr("Use <file> as the cyclone compiler", sizeof( unsigned char), 35u);
! _temp1002;});(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1001, sizeof( struct _tuple18*), 4u));}); Cyc_Arg_parse( options,
  Cyc_add_other, _tag_arr("Options:", sizeof( unsigned char), 9u), argv);{ struct
! Cyc_List_List* _temp1000=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_rev)( Cyc_cycdoc_files); for( 0; _temp1000 !=  0; _temp1000=(( struct
! Cyc_List_List*) _check_null( _temp1000))->tl){ Cyc_process_file(*(( struct
! _tagged_arr*)(( struct Cyc_List_List*) _check_null( _temp1000))->hd));}} return
  0;}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/cyclone.c powerpc-apple-rhapsody/src/cyclone.c
*** i686-unknown-linux/src/cyclone.c	Wed Oct 10 15:40:00 2001
--- powerpc-apple-rhapsody/src/cyclone.c	Wed Oct 10 15:39:30 2001
***************
*** 344,350 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 344,350 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 435,497 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 435,494 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/evexp.c powerpc-apple-rhapsody/src/evexp.c
*** i686-unknown-linux/src/evexp.c	Wed Oct 10 15:39:58 2001
--- powerpc-apple-rhapsody/src/evexp.c	Wed Oct 10 15:39:30 2001
***************
*** 291,297 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 291,297 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 382,444 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 382,441 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/formatstr.c powerpc-apple-rhapsody/src/formatstr.c
*** i686-unknown-linux/src/formatstr.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/formatstr.c	Wed Oct 10 15:39:30 2001
***************
*** 299,305 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 299,305 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 390,452 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 390,449 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/interface.c powerpc-apple-rhapsody/src/interface.c
*** i686-unknown-linux/src/interface.c	Wed Oct 10 15:40:00 2001
--- powerpc-apple-rhapsody/src/interface.c	Wed Oct 10 15:39:30 2001
***************
*** 294,300 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 294,300 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 385,447 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 385,444 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 734,742 ****
  void* t); extern int Cyc_Tcutil_is_function_type( void* t); extern unsigned char
  Cyc_Tcdecl_Incompatible[ 17u]; struct Cyc_Tcdecl_Xtunionfielddecl{ struct Cyc_Absyn_Tuniondecl*
  base; struct Cyc_Absyn_Tunionfield* field; } ; extern void Cyc_Tcdecl_merr(
! struct Cyc_Position_Segment* loc, struct _tagged_arr* msg1, struct _tagged_arr
! fmt, struct _tagged_arr ap); extern struct Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_structdecl(
! struct Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* msg); extern struct Cyc_Absyn_Uniondecl* Cyc_Tcdecl_merge_uniondecl(
  struct Cyc_Absyn_Uniondecl* d0, struct Cyc_Absyn_Uniondecl* d1, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* msg); extern struct Cyc_Absyn_Tuniondecl* Cyc_Tcdecl_merge_tuniondecl(
--- 731,739 ----
  void* t); extern int Cyc_Tcutil_is_function_type( void* t); extern unsigned char
  Cyc_Tcdecl_Incompatible[ 17u]; struct Cyc_Tcdecl_Xtunionfielddecl{ struct Cyc_Absyn_Tuniondecl*
  base; struct Cyc_Absyn_Tunionfield* field; } ; extern void Cyc_Tcdecl_merr(
! struct Cyc_Position_Segment* loc, struct _tagged_arr* msg0, struct _tagged_arr
! msg1); extern struct Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_structdecl( struct
! Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* msg); extern struct Cyc_Absyn_Uniondecl* Cyc_Tcdecl_merge_uniondecl(
  struct Cyc_Absyn_Uniondecl* d0, struct Cyc_Absyn_Uniondecl* d1, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* msg); extern struct Cyc_Absyn_Tuniondecl* Cyc_Tcdecl_merge_tuniondecl(
***************
*** 975,1020 ****
  Cyc_Absyn_Structdecl* _temp137; struct Cyc_List_List* _temp138; struct Cyc_Absyn_Uniondecl**
  _temp140; struct Cyc_Absyn_Uniondecl* _temp142; struct Cyc_List_List* _temp143;
  struct _tuple0* _temp145; struct Cyc_Absyn_TunionInfo _temp147; struct Cyc_List_List*
! _temp149; void* _temp151; struct Cyc_Absyn_Tuniondecl** _temp153; struct Cyc_Absyn_Tuniondecl*
! _temp155; struct Cyc_Absyn_TunionFieldInfo _temp156; struct Cyc_List_List*
! _temp158; void* _temp160; struct Cyc_Absyn_Tunionfield* _temp162; struct Cyc_Absyn_Tuniondecl*
! _temp164; _LL92: if(( unsigned int) _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_PointerType:
! 0){ _LL115: _temp114=(( struct Cyc_Absyn_PointerType_struct*) _temp90)->f1;
! _LL117: _temp116=( void*) _temp114.elt_typ; goto _LL93;} else{ goto _LL94;}
! _LL94: if(( unsigned int) _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_ArrayType:
! 0){ _LL119: _temp118=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp90)->f1;
! goto _LL95;} else{ goto _LL96;} _LL96: if(( unsigned int) _temp90 >  4u?*(( int*)
! _temp90) ==  Cyc_Absyn_TypedefType: 0){ _LL121: _temp120=(( struct Cyc_Absyn_TypedefType_struct*)
! _temp90)->f3; if( _temp120 ==  0){ goto _LL98;} else{ _temp122=* _temp120;
! _LL124: _temp123=( void*) _temp122.v; goto _LL97;}} else{ goto _LL98;} _LL98:
! if(( unsigned int) _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_FnType: 0){
! _LL126: _temp125=(( struct Cyc_Absyn_FnType_struct*) _temp90)->f1; _LL132:
! _temp131=( void*) _temp125.ret_typ; goto _LL130; _LL130: _temp129= _temp125.args;
! goto _LL128; _LL128: _temp127= _temp125.cyc_varargs; goto _LL99;} else{ goto
! _LL100;} _LL100: if(( unsigned int) _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_TupleType:
! 0){ _LL134: _temp133=(( struct Cyc_Absyn_TupleType_struct*) _temp90)->f1; goto
! _LL101;} else{ goto _LL102;} _LL102: if(( unsigned int) _temp90 >  4u?*(( int*)
! _temp90) ==  Cyc_Absyn_StructType: 0){ _LL139: _temp138=(( struct Cyc_Absyn_StructType_struct*)
! _temp90)->f2; goto _LL136; _LL136: _temp135=(( struct Cyc_Absyn_StructType_struct*)
! _temp90)->f3; if( _temp135 ==  0){ goto _LL104;} else{ _temp137=* _temp135; goto
! _LL103;}} else{ goto _LL104;} _LL104: if(( unsigned int) _temp90 >  4u?*(( int*)
! _temp90) ==  Cyc_Absyn_UnionType: 0){ _LL144: _temp143=(( struct Cyc_Absyn_UnionType_struct*)
! _temp90)->f2; goto _LL141; _LL141: _temp140=(( struct Cyc_Absyn_UnionType_struct*)
! _temp90)->f3; if( _temp140 ==  0){ goto _LL106;} else{ _temp142=* _temp140; goto
! _LL105;}} else{ goto _LL106;} _LL106: if(( unsigned int) _temp90 >  4u?*(( int*)
! _temp90) ==  Cyc_Absyn_EnumType: 0){ _LL146: _temp145=(( struct Cyc_Absyn_EnumType_struct*)
  _temp90)->f1; goto _LL107;} else{ goto _LL108;} _LL108: if(( unsigned int)
  _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_TunionType: 0){ _LL148: _temp147=((
  struct Cyc_Absyn_TunionType_struct*) _temp90)->f1; _LL152: _temp151=( void*)
  _temp147.tunion_info; if(*(( int*) _temp151) ==  Cyc_Absyn_KnownTunion){ _LL154:
! _temp153=(( struct Cyc_Absyn_KnownTunion_struct*) _temp151)->f1; _temp155=*
! _temp153; goto _LL150;} else{ goto _LL110;} _LL150: _temp149= _temp147.targs;
! goto _LL109;} else{ goto _LL110;} _LL110: if(( unsigned int) _temp90 >  4u?*((
! int*) _temp90) ==  Cyc_Absyn_TunionFieldType: 0){ _LL157: _temp156=(( struct Cyc_Absyn_TunionFieldType_struct*)
! _temp90)->f1; _LL161: _temp160=( void*) _temp156.field_info; if(*(( int*)
! _temp160) ==  Cyc_Absyn_KnownTunionfield){ _LL165: _temp164=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp160)->f1; goto _LL163; _LL163: _temp162=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp160)->f2; goto _LL159;} else{ goto _LL112;} _LL159: _temp158= _temp156.targs;
  goto _LL111;} else{ goto _LL112;} _LL112: goto _LL113; _LL93: return Cyc_Interface_check_public_type(
  ae, seen, obj, name, _temp116); _LL95: return Cyc_Interface_check_public_type(
  ae, seen, obj, name, _temp118); _LL97: return Cyc_Interface_check_public_type(
--- 972,1017 ----
  Cyc_Absyn_Structdecl* _temp137; struct Cyc_List_List* _temp138; struct Cyc_Absyn_Uniondecl**
  _temp140; struct Cyc_Absyn_Uniondecl* _temp142; struct Cyc_List_List* _temp143;
  struct _tuple0* _temp145; struct Cyc_Absyn_TunionInfo _temp147; struct Cyc_List_List*
! _temp149; void* _temp151; struct Cyc_Absyn_Tuniondecl* _temp153; struct Cyc_Absyn_TunionFieldInfo
! _temp155; struct Cyc_List_List* _temp157; void* _temp159; struct Cyc_Absyn_Tunionfield*
! _temp161; struct Cyc_Absyn_Tuniondecl* _temp163; _LL92: if(( unsigned int)
! _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_PointerType: 0){ _LL115: _temp114=((
! struct Cyc_Absyn_PointerType_struct*) _temp90)->f1; _LL117: _temp116=( void*)
! _temp114.elt_typ; goto _LL93;} else{ goto _LL94;} _LL94: if(( unsigned int)
! _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_ArrayType: 0){ _LL119: _temp118=(
! void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp90)->f1; goto _LL95;} else{
! goto _LL96;} _LL96: if(( unsigned int) _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_TypedefType:
! 0){ _LL121: _temp120=(( struct Cyc_Absyn_TypedefType_struct*) _temp90)->f3; if(
! _temp120 ==  0){ goto _LL98;} else{ _temp122=* _temp120; _LL124: _temp123=( void*)
! _temp122.v; goto _LL97;}} else{ goto _LL98;} _LL98: if(( unsigned int) _temp90 > 
! 4u?*(( int*) _temp90) ==  Cyc_Absyn_FnType: 0){ _LL126: _temp125=(( struct Cyc_Absyn_FnType_struct*)
! _temp90)->f1; _LL132: _temp131=( void*) _temp125.ret_typ; goto _LL130; _LL130:
! _temp129= _temp125.args; goto _LL128; _LL128: _temp127= _temp125.cyc_varargs;
! goto _LL99;} else{ goto _LL100;} _LL100: if(( unsigned int) _temp90 >  4u?*((
! int*) _temp90) ==  Cyc_Absyn_TupleType: 0){ _LL134: _temp133=(( struct Cyc_Absyn_TupleType_struct*)
! _temp90)->f1; goto _LL101;} else{ goto _LL102;} _LL102: if(( unsigned int)
! _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_StructType: 0){ _LL139: _temp138=((
! struct Cyc_Absyn_StructType_struct*) _temp90)->f2; goto _LL136; _LL136: _temp135=((
! struct Cyc_Absyn_StructType_struct*) _temp90)->f3; if( _temp135 ==  0){ goto
! _LL104;} else{ _temp137=* _temp135; goto _LL103;}} else{ goto _LL104;} _LL104:
! if(( unsigned int) _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_UnionType: 0){
! _LL144: _temp143=(( struct Cyc_Absyn_UnionType_struct*) _temp90)->f2; goto
! _LL141; _LL141: _temp140=(( struct Cyc_Absyn_UnionType_struct*) _temp90)->f3;
! if( _temp140 ==  0){ goto _LL106;} else{ _temp142=* _temp140; goto _LL105;}}
! else{ goto _LL106;} _LL106: if(( unsigned int) _temp90 >  4u?*(( int*) _temp90)
! ==  Cyc_Absyn_EnumType: 0){ _LL146: _temp145=(( struct Cyc_Absyn_EnumType_struct*)
  _temp90)->f1; goto _LL107;} else{ goto _LL108;} _LL108: if(( unsigned int)
  _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_TunionType: 0){ _LL148: _temp147=((
  struct Cyc_Absyn_TunionType_struct*) _temp90)->f1; _LL152: _temp151=( void*)
  _temp147.tunion_info; if(*(( int*) _temp151) ==  Cyc_Absyn_KnownTunion){ _LL154:
! _temp153=(( struct Cyc_Absyn_KnownTunion_struct*) _temp151)->f1; goto _LL150;}
! else{ goto _LL110;} _LL150: _temp149= _temp147.targs; goto _LL109;} else{ goto
! _LL110;} _LL110: if(( unsigned int) _temp90 >  4u?*(( int*) _temp90) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL156: _temp155=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp90)->f1;
! _LL160: _temp159=( void*) _temp155.field_info; if(*(( int*) _temp159) ==  Cyc_Absyn_KnownTunionfield){
! _LL164: _temp163=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp159)->f1;
! goto _LL162; _LL162: _temp161=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp159)->f2; goto _LL158;} else{ goto _LL112;} _LL158: _temp157= _temp155.targs;
  goto _LL111;} else{ goto _LL112;} _LL112: goto _LL113; _LL93: return Cyc_Interface_check_public_type(
  ae, seen, obj, name, _temp116); _LL95: return Cyc_Interface_check_public_type(
  ae, seen, obj, name, _temp118); _LL97: return Cyc_Interface_check_public_type(
***************
*** 1022,1031 ****
  ae, struct Cyc_Interface_Seen* seen, struct _tagged_arr obj, struct _tuple0*
  name, void*(* f)( struct _tuple1*), struct Cyc_List_List* l)) Cyc_Interface_check_public_type_list)(
  ae, seen, obj, name, Cyc_Interface_get_type2, _temp129)? Cyc_Interface_check_public_type(
! ae, seen, obj, name, _temp131): 0; if( _temp127 !=  0){ void* _temp168; struct
! Cyc_Absyn_VarargInfo _temp166=*(( struct Cyc_Absyn_VarargInfo*) _check_null(
! _temp127)); _LL169: _temp168=( void*) _temp166.type; goto _LL167; _LL167: b= Cyc_Interface_check_public_type(
! ae, seen, obj, name, _temp168);} return b;} _LL101: return(( int(*)( struct Cyc_Dict_Dict*
  ae, struct Cyc_Interface_Seen* seen, struct _tagged_arr obj, struct _tuple0*
  name, void*(* f)( struct _tuple9*), struct Cyc_List_List* l)) Cyc_Interface_check_public_type_list)(
  ae, seen, obj, name, Cyc_Interface_get_type1, _temp133); _LL103: if(( void*)
--- 1019,1028 ----
  ae, struct Cyc_Interface_Seen* seen, struct _tagged_arr obj, struct _tuple0*
  name, void*(* f)( struct _tuple1*), struct Cyc_List_List* l)) Cyc_Interface_check_public_type_list)(
  ae, seen, obj, name, Cyc_Interface_get_type2, _temp129)? Cyc_Interface_check_public_type(
! ae, seen, obj, name, _temp131): 0; if( _temp127 !=  0){ void* _temp167; struct
! Cyc_Absyn_VarargInfo _temp165=*(( struct Cyc_Absyn_VarargInfo*) _check_null(
! _temp127)); _LL168: _temp167=( void*) _temp165.type; goto _LL166; _LL166: b= Cyc_Interface_check_public_type(
! ae, seen, obj, name, _temp167);} return b;} _LL101: return(( int(*)( struct Cyc_Dict_Dict*
  ae, struct Cyc_Interface_Seen* seen, struct _tagged_arr obj, struct _tuple0*
  name, void*(* f)( struct _tuple9*), struct Cyc_List_List* l)) Cyc_Interface_check_public_type_list)(
  ae, seen, obj, name, Cyc_Interface_get_type1, _temp133); _LL103: if(( void*)
***************
*** 1038,1561 ****
  struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp142->name))->v);
  return 0;} return Cyc_Interface_check_public_type_list( ae, seen, obj, name, Cyc_Core_identity,
  _temp143)? Cyc_Interface_check_public_uniondecl( ae, seen, _temp142): 0; _LL107: {
! struct _tuple0 _temp172; struct _tagged_arr* _temp173; void* _temp175; struct
! _tuple0* _temp170= _temp145; _temp172=* _temp170; _LL176: _temp175= _temp172.f1;
! goto _LL174; _LL174: _temp173= _temp172.f2; goto _LL171; _LL171: { struct Cyc_List_List*
! _temp177= Cyc_Interface_get_abs_ns( _temp175); struct Cyc_Absyn_Enumdecl* ed;{
! struct _handler_cons _temp178; _push_handler(& _temp178);{ int _temp180= 0; if(
! setjmp( _temp178.handler)){ _temp180= 1;} if( ! _temp180){{ struct Cyc_Tcenv_Genv*
! _temp181=(( struct Cyc_Tcenv_Genv*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k)) Cyc_Dict_lookup)( ae, _temp177); ed=*(( struct Cyc_Absyn_Enumdecl**(*)(
! struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)( _temp181->enumdecls,
! _temp173);}; _pop_handler();} else{ void* _temp179=( void*) _exn_thrown; void*
! _temp183= _temp179; _LL185: if( _temp183 ==  Cyc_Dict_Absent){ goto _LL186;}
! else{ goto _LL187;} _LL187: goto _LL188; _LL186:( int) _throw(( void*)({ struct
! Cyc_Core_Invalid_argument_struct* _temp189=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp189[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp190; _temp190.tag= Cyc_Core_Invalid_argument;
! _temp190.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp192;
! _temp192.tag= Cyc_Std_String_pa; _temp192.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp145);{ void* _temp191[ 1u]={& _temp192}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find enum %s)",
! sizeof( unsigned char), 39u), _tag_arr( _temp191, sizeof( void*), 1u));}});
! _temp190;}); _temp189;})); _LL188:( void) _throw( _temp183); _LL184:;}}} if((
  void*) ed->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err( obj,
  _temp145, _tag_arr("enum", sizeof( unsigned char), 5u), ed->name); return 0;}
! return 1;}} _LL109: { struct _tuple0 _temp195; struct _tagged_arr* _temp196;
! void* _temp198; struct _tuple0* _temp193= _temp155->name; _temp195=* _temp193;
! _LL199: _temp198= _temp195.f1; goto _LL197; _LL197: _temp196= _temp195.f2; goto
! _LL194; _LL194: { struct Cyc_List_List* _temp200= Cyc_Interface_get_abs_ns(
! _temp198); struct Cyc_Absyn_Tuniondecl* tud;{ struct _handler_cons _temp201;
! _push_handler(& _temp201);{ int _temp203= 0; if( setjmp( _temp201.handler)){
! _temp203= 1;} if( ! _temp203){{ struct Cyc_Tcenv_Genv* _temp204=(( struct Cyc_Tcenv_Genv*(*)(
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( ae,
! _temp200); tud=*(( struct Cyc_Absyn_Tuniondecl**(*)( struct Cyc_Dict_Dict* d,
! struct _tagged_arr* k)) Cyc_Dict_lookup)( _temp204->tuniondecls, _temp196);};
! _pop_handler();} else{ void* _temp202=( void*) _exn_thrown; void* _temp206=
! _temp202; _LL208: if( _temp206 ==  Cyc_Dict_Absent){ goto _LL209;} else{ goto
! _LL210;} _LL210: goto _LL211; _LL209:( int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct*
! _temp212=( struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct
! Cyc_Core_Invalid_argument_struct)); _temp212[ 0]=({ struct Cyc_Core_Invalid_argument_struct
! _temp213; _temp213.tag= Cyc_Core_Invalid_argument; _temp213.f1=( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp215; _temp215.tag= Cyc_Std_String_pa;
! _temp215.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp155->name);{
! void* _temp214[ 1u]={& _temp215}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find [x]tunion %s)",
! sizeof( unsigned char), 44u), _tag_arr( _temp214, sizeof( void*), 1u));}});
! _temp213;}); _temp212;})); _LL211:( void) _throw( _temp206); _LL207:;}}} if((
  void*) tud->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err( obj,
  name, _tag_arr("[x]tunion", sizeof( unsigned char), 10u), tud->name); return 0;}
  return Cyc_Interface_check_public_type_list( ae, seen, obj, name, Cyc_Core_identity,
  _temp149)? Cyc_Interface_check_public_tuniondecl( ae, seen, tud): 0;}} _LL111: {
! struct _tuple0 _temp218; struct _tagged_arr* _temp219; void* _temp221; struct
! _tuple0* _temp216= _temp164->name; _temp218=* _temp216; _LL222: _temp221=
! _temp218.f1; goto _LL220; _LL220: _temp219= _temp218.f2; goto _LL217; _LL217: {
! struct Cyc_List_List* _temp223= Cyc_Interface_get_abs_ns( _temp221); struct Cyc_Absyn_Tuniondecl*
! tud;{ struct _handler_cons _temp224; _push_handler(& _temp224);{ int _temp226= 0;
! if( setjmp( _temp224.handler)){ _temp226= 1;} if( ! _temp226){{ struct Cyc_Tcenv_Genv*
! _temp227=(( struct Cyc_Tcenv_Genv*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k)) Cyc_Dict_lookup)( ae, _temp223); tud=*(( struct Cyc_Absyn_Tuniondecl**(*)(
! struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)( _temp227->tuniondecls,
! _temp219);}; _pop_handler();} else{ void* _temp225=( void*) _exn_thrown; void*
! _temp229= _temp225; _LL231: if( _temp229 ==  Cyc_Dict_Absent){ goto _LL232;}
! else{ goto _LL233;} _LL233: goto _LL234; _LL232:( int) _throw(( void*)({ struct
! Cyc_Core_Invalid_argument_struct* _temp235=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp235[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp236; _temp236.tag= Cyc_Core_Invalid_argument;
! _temp236.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp238;
! _temp238.tag= Cyc_Std_String_pa; _temp238.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp164->name);{ void* _temp237[ 1u]={& _temp238}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find [x]tunion %s and search its fields)",
! sizeof( unsigned char), 66u), _tag_arr( _temp237, sizeof( void*), 1u));}});
! _temp236;}); _temp235;})); _LL234:( void) _throw( _temp229); _LL230:;}}} if( tud->fields
  ==  0){( int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct*
! _temp239=( struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct
! Cyc_Core_Invalid_argument_struct)); _temp239[ 0]=({ struct Cyc_Core_Invalid_argument_struct
! _temp240; _temp240.tag= Cyc_Core_Invalid_argument; _temp240.f1=( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp242; _temp242.tag= Cyc_Std_String_pa;
! _temp242.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( tud->name);{ void*
! _temp241[ 1u]={& _temp242}; Cyc_Std_aprintf( _tag_arr("check_public_type ([x]tunion %s has no fields)",
! sizeof( unsigned char), 47u), _tag_arr( _temp241, sizeof( void*), 1u));}});
! _temp240;}); _temp239;}));}{ struct Cyc_Absyn_Tunionfield* tuf1= 0;{ struct Cyc_List_List*
! _temp243=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( tud->fields))->v;
! for( 0; _temp243 !=  0; _temp243=(( struct Cyc_List_List*) _check_null( _temp243))->tl){
! if( Cyc_Std_strptrcmp((* _temp162->name).f2,(*(( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp243))->hd)->name).f2) ==  0){ tuf1=(
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( _temp243))->hd); break;}}} if( tuf1 ==  0){( int) _throw(( void*)({
! struct Cyc_Core_Invalid_argument_struct* _temp244=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp244[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp245; _temp245.tag= Cyc_Core_Invalid_argument;
! _temp245.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp247;
! _temp247.tag= Cyc_Std_String_pa; _temp247.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp162->name);{ void* _temp246[ 1u]={& _temp247}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find [x]tunionfield %s)",
! sizeof( unsigned char), 49u), _tag_arr( _temp246, sizeof( void*), 1u));}});
! _temp245;}); _temp244;}));}{ struct Cyc_Absyn_Tunionfield* tuf=( struct Cyc_Absyn_Tunionfield*)
  _check_null( tuf1); if(( void*) tud->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err(
  obj, name, _tag_arr("[x]tunion", sizeof( unsigned char), 10u), tud->name);
  return 0;} if(( void*) tud->sc == ( void*) Cyc_Absyn_Abstract){ Cyc_Interface_abstract_err(
  obj, name, _tag_arr("[x]tunion", sizeof( unsigned char), 10u), tud->name);
  return 0;} if(( void*) tuf->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err(
! obj, name,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp249;
! _temp249.tag= Cyc_Std_String_pa; _temp249.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! tuf->name);{ void* _temp248[ 1u]={& _temp249}; Cyc_Std_aprintf( _tag_arr("field %s of",
! sizeof( unsigned char), 12u), _tag_arr( _temp248, sizeof( void*), 1u));}}), tud->name);
  return 0;} return Cyc_Interface_check_public_type_list( ae, seen, obj, name, Cyc_Core_identity,
! _temp158)? Cyc_Interface_check_public_tuniondecl( ae, seen, tud): 0;}}}} _LL113:
  return 1; _LL91:;} struct _tuple10{ struct Cyc_Interface_Ienv* f1; struct Cyc_Interface_Ienv*
  f2; int f3; struct Cyc_Dict_Dict* f4; struct Cyc_Interface_Seen* f5; struct Cyc_Interface_I*
  f6; } ; static void Cyc_Interface_extract_structdecl( struct _tuple10* env,
  struct _tagged_arr* x, struct Cyc_Absyn_Structdecl** dp){ struct _tuple10
! _temp252; struct Cyc_Interface_Seen* _temp253; struct Cyc_Dict_Dict* _temp255;
! int _temp257; struct Cyc_Interface_Ienv* _temp259; struct Cyc_Interface_Ienv*
! _temp261; struct _tuple10* _temp250= env; _temp252=* _temp250; _LL262: _temp261=
! _temp252.f1; goto _LL260; _LL260: _temp259= _temp252.f2; goto _LL258; _LL258:
! _temp257= _temp252.f3; goto _LL256; _LL256: _temp255= _temp252.f4; goto _LL254;
! _LL254: _temp253= _temp252.f5; goto _LL251; _LL251: { struct Cyc_Absyn_Structdecl*
! _temp263=* dp; void* _temp264=( void*) _temp263->sc; _LL266: if( _temp264 == (
! void*) Cyc_Absyn_Static){ goto _LL267;} else{ goto _LL268;} _LL268: if( _temp264
! == ( void*) Cyc_Absyn_Abstract){ goto _LL269;} else{ goto _LL270;} _LL270: if(
! _temp264 == ( void*) Cyc_Absyn_Public){ goto _LL271;} else{ goto _LL272;} _LL272:
! if( _temp264 == ( void*) Cyc_Absyn_ExternC){ goto _LL273;} else{ goto _LL274;}
! _LL274: if( _temp264 == ( void*) Cyc_Absyn_Extern){ goto _LL275;} else{ goto
! _LL265;} _LL267: if( _temp257? _temp263->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("static", sizeof( unsigned char), 7u), _tag_arr("struct", sizeof(
  unsigned char), 7u),( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp263->name))->v);} goto _LL265; _LL269: if( _temp263->fields ==  0){ if(
! _temp257){ Cyc_Interface_fields_err( _tag_arr("abstract", sizeof( unsigned char),
  9u), _tag_arr("struct", sizeof( unsigned char), 7u),( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( _temp263->name))->v);}} else{ _temp263=({ struct Cyc_Absyn_Structdecl*
! _temp276=( struct Cyc_Absyn_Structdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Structdecl));
! _temp276[ 0]=* _temp263; _temp276;}); _temp263->fields= 0;} if( Cyc_Interface_check_public_structdecl(
! _temp255, _temp253, _temp263)){ _temp259->structdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl* v))
! Cyc_Dict_insert)( _temp259->structdecls, x, _temp263);} goto _LL265; _LL271: if(
! _temp263->fields ==  0){ Cyc_Interface_fields_err( _tag_arr("public", sizeof(
  unsigned char), 7u), _tag_arr("struct", sizeof( unsigned char), 7u),( struct
! _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp263->name))->v); _temp263=({
! struct Cyc_Absyn_Structdecl* _temp277=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp277[ 0]=* _temp263; _temp277;});(
! void*)( _temp263->sc=( void*)(( void*) Cyc_Absyn_Abstract));} if( Cyc_Interface_check_public_structdecl(
! _temp255, _temp253, _temp263)){ _temp259->structdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl* v))
! Cyc_Dict_insert)( _temp259->structdecls, x, _temp263);} goto _LL265; _LL273:
! goto _LL275; _LL275: if( Cyc_Interface_check_public_structdecl( _temp255,
! _temp253, _temp263)){ _temp261->structdecls=(( struct Cyc_Dict_Dict*(*)( struct
  Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl* v)) Cyc_Dict_insert)(
! _temp261->structdecls, x, _temp263);} goto _LL265; _LL265:;}} static void Cyc_Interface_extract_uniondecl(
  struct _tuple10* env, struct _tagged_arr* x, struct Cyc_Absyn_Uniondecl** dp){
! struct _tuple10 _temp280; struct Cyc_Interface_Seen* _temp281; struct Cyc_Dict_Dict*
! _temp283; int _temp285; struct Cyc_Interface_Ienv* _temp287; struct Cyc_Interface_Ienv*
! _temp289; struct _tuple10* _temp278= env; _temp280=* _temp278; _LL290: _temp289=
! _temp280.f1; goto _LL288; _LL288: _temp287= _temp280.f2; goto _LL286; _LL286:
! _temp285= _temp280.f3; goto _LL284; _LL284: _temp283= _temp280.f4; goto _LL282;
! _LL282: _temp281= _temp280.f5; goto _LL279; _LL279: { struct Cyc_Absyn_Uniondecl*
! _temp291=* dp; void* _temp292=( void*) _temp291->sc; _LL294: if( _temp292 == (
! void*) Cyc_Absyn_Static){ goto _LL295;} else{ goto _LL296;} _LL296: if( _temp292
! == ( void*) Cyc_Absyn_Abstract){ goto _LL297;} else{ goto _LL298;} _LL298: if(
! _temp292 == ( void*) Cyc_Absyn_Public){ goto _LL299;} else{ goto _LL300;} _LL300:
! if( _temp292 == ( void*) Cyc_Absyn_ExternC){ goto _LL301;} else{ goto _LL302;}
! _LL302: if( _temp292 == ( void*) Cyc_Absyn_Extern){ goto _LL303;} else{ goto
! _LL293;} _LL295: if( _temp285? _temp291->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("static", sizeof( unsigned char), 7u), _tag_arr("union", sizeof(
  unsigned char), 6u),( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp291->name))->v);} goto _LL293; _LL297: if( _temp291->fields ==  0){ if(
! _temp285){ Cyc_Interface_fields_err( _tag_arr("abstract", sizeof( unsigned char),
  9u), _tag_arr("union", sizeof( unsigned char), 6u),( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( _temp291->name))->v);}} else{ _temp291=({ struct Cyc_Absyn_Uniondecl*
! _temp304=( struct Cyc_Absyn_Uniondecl*) _cycalloc( sizeof( struct Cyc_Absyn_Uniondecl));
! _temp304[ 0]=* _temp291; _temp304;}); _temp291->fields= 0;} if( Cyc_Interface_check_public_uniondecl(
! _temp283, _temp281, _temp291)){ _temp287->uniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl* v))
! Cyc_Dict_insert)( _temp287->uniondecls, x, _temp291);} goto _LL293; _LL299: if(
! _temp291->fields ==  0){ Cyc_Interface_fields_err( _tag_arr("public", sizeof(
  unsigned char), 7u), _tag_arr("union", sizeof( unsigned char), 6u),( struct
! _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp291->name))->v); _temp291=({
! struct Cyc_Absyn_Uniondecl* _temp305=( struct Cyc_Absyn_Uniondecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Uniondecl)); _temp305[ 0]=* _temp291; _temp305;});(
! void*)( _temp291->sc=( void*)(( void*) Cyc_Absyn_Abstract));} if( Cyc_Interface_check_public_uniondecl(
! _temp283, _temp281, _temp291)){ _temp287->uniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl* v))
! Cyc_Dict_insert)( _temp287->uniondecls, x, _temp291);} goto _LL293; _LL301: goto
! _LL303; _LL303: if( Cyc_Interface_check_public_uniondecl( _temp283, _temp281,
! _temp291)){ _temp289->uniondecls=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict*
  d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl* v)) Cyc_Dict_insert)(
! _temp289->uniondecls, x, _temp291);} goto _LL293; _LL293:;}} static void Cyc_Interface_extract_enumdecl(
  struct _tuple10* env, struct _tagged_arr* x, struct Cyc_Absyn_Enumdecl** dp){
! struct _tuple10 _temp308; struct Cyc_Interface_Seen* _temp309; struct Cyc_Dict_Dict*
! _temp311; int _temp313; struct Cyc_Interface_Ienv* _temp315; struct Cyc_Interface_Ienv*
! _temp317; struct _tuple10* _temp306= env; _temp308=* _temp306; _LL318: _temp317=
! _temp308.f1; goto _LL316; _LL316: _temp315= _temp308.f2; goto _LL314; _LL314:
! _temp313= _temp308.f3; goto _LL312; _LL312: _temp311= _temp308.f4; goto _LL310;
! _LL310: _temp309= _temp308.f5; goto _LL307; _LL307: { struct Cyc_Absyn_Enumdecl*
! _temp319=* dp; void* _temp320=( void*) _temp319->sc; _LL322: if( _temp320 == (
! void*) Cyc_Absyn_Static){ goto _LL323;} else{ goto _LL324;} _LL324: if( _temp320
! == ( void*) Cyc_Absyn_Abstract){ goto _LL325;} else{ goto _LL326;} _LL326: if(
! _temp320 == ( void*) Cyc_Absyn_Public){ goto _LL327;} else{ goto _LL328;} _LL328:
! if( _temp320 == ( void*) Cyc_Absyn_ExternC){ goto _LL329;} else{ goto _LL330;}
! _LL330: if( _temp320 == ( void*) Cyc_Absyn_Extern){ goto _LL331;} else{ goto
! _LL321;} _LL323: if( _temp313? _temp319->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("static", sizeof( unsigned char), 7u), _tag_arr("enum", sizeof(
! unsigned char), 5u), _temp319->name);} goto _LL321; _LL325: if( _temp319->fields
! ==  0){ if( _temp313){ Cyc_Interface_fields_err( _tag_arr("abstract", sizeof(
! unsigned char), 9u), _tag_arr("enum", sizeof( unsigned char), 5u), _temp319->name);}}
! else{ _temp319=({ struct Cyc_Absyn_Enumdecl* _temp332=( struct Cyc_Absyn_Enumdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl)); _temp332[ 0]=* _temp319;
! _temp332;}); _temp319->fields= 0;} if( Cyc_Interface_check_public_enumdecl(
! _temp311, _temp309, _temp319)){ _temp315->enumdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Enumdecl* v))
! Cyc_Dict_insert)( _temp315->enumdecls, x, _temp319);} goto _LL321; _LL327: if(
! _temp319->fields ==  0){ Cyc_Interface_fields_err( _tag_arr("public", sizeof(
! unsigned char), 7u), _tag_arr("enum", sizeof( unsigned char), 5u), _temp319->name);
! _temp319=({ struct Cyc_Absyn_Enumdecl* _temp333=( struct Cyc_Absyn_Enumdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl)); _temp333[ 0]=* _temp319;
! _temp333;});( void*)( _temp319->sc=( void*)(( void*) Cyc_Absyn_Abstract));} if(
! Cyc_Interface_check_public_enumdecl( _temp311, _temp309, _temp319)){ _temp315->enumdecls=((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct
! Cyc_Absyn_Enumdecl* v)) Cyc_Dict_insert)( _temp315->enumdecls, x, _temp319);}
! goto _LL321; _LL329: goto _LL331; _LL331: if( Cyc_Interface_check_public_enumdecl(
! _temp311, _temp309, _temp319)){ _temp317->enumdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Enumdecl* v))
! Cyc_Dict_insert)( _temp317->enumdecls, x, _temp319);} goto _LL321; _LL321:;}}
  static void Cyc_Interface_extract_xtunionfielddecl( struct Cyc_Interface_I* i,
  struct Cyc_Absyn_Tuniondecl* d, struct Cyc_Absyn_Tunionfield* f){ struct Cyc_List_List*
! _temp334= 0;{ void* _temp335=(* f->name).f1; struct Cyc_List_List* _temp343;
! struct Cyc_List_List* _temp345; _LL337: if(( unsigned int) _temp335 >  1u?*((
! int*) _temp335) ==  Cyc_Absyn_Rel_n: 0){ _LL344: _temp343=(( struct Cyc_Absyn_Rel_n_struct*)
! _temp335)->f1; goto _LL338;} else{ goto _LL339;} _LL339: if(( unsigned int)
! _temp335 >  1u?*(( int*) _temp335) ==  Cyc_Absyn_Abs_n: 0){ _LL346: _temp345=((
! struct Cyc_Absyn_Abs_n_struct*) _temp335)->f1; goto _LL340;} else{ goto _LL341;}
! _LL341: goto _LL342; _LL338: _temp345= _temp343; goto _LL340; _LL340: _temp334=
! _temp345; goto _LL336; _LL342: goto _LL336; _LL336:;}{ struct Cyc_Dict_Dict**
! dict;{ void* _temp347=( void*) f->sc; _LL349: if( _temp347 == ( void*) Cyc_Absyn_Static){
! goto _LL350;} else{ goto _LL351;} _LL351: if( _temp347 == ( void*) Cyc_Absyn_Extern){
! goto _LL352;} else{ goto _LL353;} _LL353: if( _temp347 == ( void*) Cyc_Absyn_Public){
! goto _LL354;} else{ goto _LL355;} _LL355: goto _LL356; _LL350: return; _LL352:
! dict=& i->imports; goto _LL348; _LL354: dict=& i->exports; goto _LL348; _LL356:(
! int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct* _temp357=(
  struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct));
! _temp357[ 0]=({ struct Cyc_Core_Invalid_argument_struct _temp358; _temp358.tag=
! Cyc_Core_Invalid_argument; _temp358.f1= _tag_arr("add_xtunionfielddecl", sizeof(
! unsigned char), 21u); _temp358;}); _temp357;})); _LL348:;}{ struct Cyc_Interface_Ienv*
! env;{ struct _handler_cons _temp359; _push_handler(& _temp359);{ int _temp361= 0;
! if( setjmp( _temp359.handler)){ _temp361= 1;} if( ! _temp361){ env=(( struct Cyc_Interface_Ienv*(*)(
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)(* dict,
! _temp334);; _pop_handler();} else{ void* _temp360=( void*) _exn_thrown; void*
! _temp363= _temp360; _LL365: if( _temp363 ==  Cyc_Dict_Absent){ goto _LL366;}
! else{ goto _LL367;} _LL367: goto _LL368; _LL366: env= Cyc_Interface_new_ienv();*
  dict=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k, struct Cyc_Interface_Ienv* v)) Cyc_Dict_insert)(* dict, _temp334, env); goto
! _LL364; _LL368:( void) _throw( _temp363); _LL364:;}}} env->xtunionfielddecls=((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct
  Cyc_Tcdecl_Xtunionfielddecl* v)) Cyc_Dict_insert)( env->xtunionfielddecls,(* f->name).f2,({
! struct Cyc_Tcdecl_Xtunionfielddecl* _temp369=( struct Cyc_Tcdecl_Xtunionfielddecl*)
! _cycalloc( sizeof( struct Cyc_Tcdecl_Xtunionfielddecl)); _temp369->base= d;
! _temp369->field= f; _temp369;}));}}} static void Cyc_Interface_extract_tuniondecl(
  struct _tuple10* env, struct _tagged_arr* x, struct Cyc_Absyn_Tuniondecl** dp){
! struct _tuple10 _temp372; struct Cyc_Interface_I* _temp373; struct Cyc_Interface_Seen*
! _temp375; struct Cyc_Dict_Dict* _temp377; int _temp379; struct Cyc_Interface_Ienv*
! _temp381; struct Cyc_Interface_Ienv* _temp383; struct _tuple10* _temp370= env;
! _temp372=* _temp370; _LL384: _temp383= _temp372.f1; goto _LL382; _LL382:
! _temp381= _temp372.f2; goto _LL380; _LL380: _temp379= _temp372.f3; goto _LL378;
! _LL378: _temp377= _temp372.f4; goto _LL376; _LL376: _temp375= _temp372.f5; goto
! _LL374; _LL374: _temp373= _temp372.f6; goto _LL371; _LL371: { struct Cyc_Absyn_Tuniondecl*
! _temp385=* dp; void* _temp386=( void*) _temp385->sc; _LL388: if( _temp386 == (
! void*) Cyc_Absyn_Static){ goto _LL389;} else{ goto _LL390;} _LL390: if( _temp386
! == ( void*) Cyc_Absyn_Abstract){ goto _LL391;} else{ goto _LL392;} _LL392: if(
! _temp386 == ( void*) Cyc_Absyn_Public){ goto _LL393;} else{ goto _LL394;} _LL394:
! if( _temp386 == ( void*) Cyc_Absyn_ExternC){ goto _LL395;} else{ goto _LL396;}
! _LL396: if( _temp386 == ( void*) Cyc_Absyn_Extern){ goto _LL397;} else{ goto
! _LL387;} _LL389: if(( ! _temp385->is_xtunion? _temp379: 0)? _temp385->fields == 
  0: 0){ Cyc_Interface_fields_err( _tag_arr("static", sizeof( unsigned char), 7u),
! _tag_arr("tunion", sizeof( unsigned char), 7u), _temp385->name);} goto _LL387;
! _LL391: if( _temp385->fields ==  0){ if( ! _temp385->is_xtunion? _temp379: 0){
  Cyc_Interface_fields_err( _tag_arr("abstract", sizeof( unsigned char), 9u),
! _tag_arr("tunion", sizeof( unsigned char), 7u), _temp385->name);}} else{
! _temp385=({ struct Cyc_Absyn_Tuniondecl* _temp398=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp398[ 0]=* _temp385;
! _temp398;}); _temp385->fields= 0;} if( Cyc_Interface_check_public_tuniondecl(
! _temp377, _temp375, _temp385)){ _temp381->tuniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Tuniondecl* v))
! Cyc_Dict_insert)( _temp381->tuniondecls, x, _temp385);} goto _LL387; _LL393:
! _temp385=({ struct Cyc_Absyn_Tuniondecl* _temp399=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp399[ 0]=* _temp385;
! _temp399;}); if( ! _temp385->is_xtunion? _temp385->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("public", sizeof( unsigned char), 7u), _tag_arr("tunion", sizeof(
! unsigned char), 7u), _temp385->name);( void*)( _temp385->sc=( void*)(( void*)
! Cyc_Absyn_Abstract));} if( Cyc_Interface_check_public_tuniondecl( _temp377,
! _temp375, _temp385)){ if( _temp385->is_xtunion? _temp385->fields !=  0: 0){
! struct Cyc_List_List* _temp400=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp385->fields))->v; _temp385->fields= 0;{ struct Cyc_List_List*
! _temp401= _temp400; for( 0; _temp401 !=  0; _temp401=(( struct Cyc_List_List*)
! _check_null( _temp401))->tl){ Cyc_Interface_extract_xtunionfielddecl( _temp373,
! _temp385,( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null(
! _temp401))->hd);}}} _temp381->tuniondecls=(( struct Cyc_Dict_Dict*(*)( struct
  Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Tuniondecl* v)) Cyc_Dict_insert)(
! _temp381->tuniondecls, x, _temp385);} goto _LL387; _LL395:( int) _throw(( void*)({
! struct Cyc_Core_Invalid_argument_struct* _temp402=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp402[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp403; _temp403.tag= Cyc_Core_Invalid_argument;
! _temp403.f1= _tag_arr("extract_tuniondecl", sizeof( unsigned char), 19u);
! _temp403;}); _temp402;})); _LL397: if( Cyc_Interface_check_public_tuniondecl(
! _temp377, _temp375, _temp385)){ if( _temp385->is_xtunion? _temp385->fields !=  0:
! 0){ _temp385=({ struct Cyc_Absyn_Tuniondecl* _temp404=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp404[ 0]=* _temp385;
! _temp404;});{ struct Cyc_List_List* _temp405=( struct Cyc_List_List*)(( struct
! Cyc_Core_Opt*) _check_null( _temp385->fields))->v; _temp385->fields= 0;{ struct
! Cyc_List_List* _temp406= _temp405; for( 0; _temp406 !=  0; _temp406=(( struct
! Cyc_List_List*) _check_null( _temp406))->tl){ Cyc_Interface_extract_xtunionfielddecl(
! _temp373, _temp385,( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( _temp406))->hd);}}}} _temp383->tuniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Tuniondecl* v))
! Cyc_Dict_insert)( _temp383->tuniondecls, x, _temp385);} goto _LL387; _LL387:;}}
  static void Cyc_Interface_extract_typedef( struct _tuple10* env, struct
! _tagged_arr* x, struct Cyc_Absyn_Typedefdecl* d){ struct _tuple10 _temp409;
! struct Cyc_Interface_Seen* _temp410; struct Cyc_Dict_Dict* _temp412; struct Cyc_Interface_Ienv*
! _temp414; struct _tuple10* _temp407= env; _temp409=* _temp407; _LL415: _temp414=
! _temp409.f2; goto _LL413; _LL413: _temp412= _temp409.f4; goto _LL411; _LL411:
! _temp410= _temp409.f5; goto _LL408; _LL408: if( Cyc_Interface_check_public_typedefdecl(
! _temp412, _temp410, d)){ _temp414->typedefdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Typedefdecl* v))
! Cyc_Dict_insert)( _temp414->typedefdecls, x, d);}} static void Cyc_Interface_extract_ordinarie(
  struct _tuple10* env, struct _tagged_arr* x, struct _tuple6* v){ struct _tuple10
! _temp418; struct Cyc_Interface_Seen* _temp419; struct Cyc_Dict_Dict* _temp421;
! int _temp423; struct Cyc_Interface_Ienv* _temp425; struct Cyc_Interface_Ienv*
! _temp427; struct _tuple10* _temp416= env; _temp418=* _temp416; _LL428: _temp427=
! _temp418.f1; goto _LL426; _LL426: _temp425= _temp418.f2; goto _LL424; _LL424:
! _temp423= _temp418.f3; goto _LL422; _LL422: _temp421= _temp418.f4; goto _LL420;
! _LL420: _temp419= _temp418.f5; goto _LL417; _LL417: { void* _temp429=(* v).f1;
! void* _temp430= _temp429; void* _temp436; _LL432: if(*(( int*) _temp430) ==  Cyc_Tcenv_VarRes){
! _LL437: _temp436=( void*)(( struct Cyc_Tcenv_VarRes_struct*) _temp430)->f1; goto
! _LL433;} else{ goto _LL434;} _LL434: goto _LL435; _LL433:{ void* _temp438=
! _temp436; struct Cyc_Absyn_Fndecl* _temp446; struct Cyc_Absyn_Vardecl* _temp448;
! _LL440: if(( unsigned int) _temp438 >  1u?*(( int*) _temp438) ==  Cyc_Absyn_Funname_b:
! 0){ _LL447: _temp446=(( struct Cyc_Absyn_Funname_b_struct*) _temp438)->f1; goto
! _LL441;} else{ goto _LL442;} _LL442: if(( unsigned int) _temp438 >  1u?*(( int*)
! _temp438) ==  Cyc_Absyn_Global_b: 0){ _LL449: _temp448=(( struct Cyc_Absyn_Global_b_struct*)
! _temp438)->f1; goto _LL443;} else{ goto _LL444;} _LL444: goto _LL445; _LL441: {
! struct Cyc_Absyn_Vardecl* _temp450=({ struct Cyc_Absyn_Vardecl* _temp451=(
  struct Cyc_Absyn_Vardecl*) _cycalloc( sizeof( struct Cyc_Absyn_Vardecl));
! _temp451->sc=( void*)(( void*) _temp446->sc); _temp451->name= _temp446->name;
! _temp451->tq=({ struct Cyc_Absyn_Tqual _temp452; _temp452.q_const= 0; _temp452.q_volatile=
! 0; _temp452.q_restrict= 0; _temp452;}); _temp451->type=( void*)(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp446->cached_typ))->v); _temp451->initializer=
! 0; _temp451->rgn= 0; _temp451->attributes= 0; _temp451;}); _temp423= 0; _temp448=
! _temp450; goto _LL443;} _LL443: if( _temp448->initializer !=  0){ _temp448=({
! struct Cyc_Absyn_Vardecl* _temp453=( struct Cyc_Absyn_Vardecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Vardecl)); _temp453[ 0]=* _temp448; _temp453;});
! _temp448->initializer= 0;}{ void* _temp454=( void*) _temp448->sc; _LL456: if(
! _temp454 == ( void*) Cyc_Absyn_Static){ goto _LL457;} else{ goto _LL458;} _LL458:
! if( _temp454 == ( void*) Cyc_Absyn_Abstract){ goto _LL459;} else{ goto _LL460;}
! _LL460: if( _temp454 == ( void*) Cyc_Absyn_Public){ goto _LL461;} else{ goto
! _LL462;} _LL462: if( _temp454 == ( void*) Cyc_Absyn_ExternC){ goto _LL463;}
! else{ goto _LL464;} _LL464: if( _temp454 == ( void*) Cyc_Absyn_Extern){ goto
! _LL465;} else{ goto _LL455;} _LL457: if( _temp423? Cyc_Tcutil_is_function_type((
! void*) _temp448->type): 0){ Cyc_Interface_body_err( _tag_arr("static", sizeof(
! unsigned char), 7u), _temp448->name);} goto _LL455; _LL459:( int) _throw(( void*)({
! struct Cyc_Core_Invalid_argument_struct* _temp466=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp466[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp467; _temp467.tag= Cyc_Core_Invalid_argument;
! _temp467.f1= _tag_arr("extract_ordinarie", sizeof( unsigned char), 18u);
! _temp467;}); _temp466;})); _LL461: if( _temp423? Cyc_Tcutil_is_function_type((
! void*) _temp448->type): 0){ Cyc_Interface_body_err( _tag_arr("public", sizeof(
! unsigned char), 7u), _temp448->name);} if( Cyc_Interface_check_public_vardecl(
! _temp421, _temp419, _temp448)){ _temp425->vardecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Vardecl* v))
! Cyc_Dict_insert)( _temp425->vardecls, x, _temp448);} goto _LL455; _LL463: goto
! _LL465; _LL465: if( Cyc_Interface_check_public_vardecl( _temp421, _temp419,
! _temp448)){ _temp427->vardecls=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict*
  d, struct _tagged_arr* k, struct Cyc_Absyn_Vardecl* v)) Cyc_Dict_insert)(
! _temp427->vardecls, x, _temp448);} goto _LL455; _LL455:;} goto _LL439; _LL445:
! goto _LL439; _LL439:;} goto _LL431; _LL435: goto _LL431; _LL431:;}} struct
  _tuple11{ struct Cyc_Interface_I* f1; int f2; struct Cyc_Dict_Dict* f3; struct
  Cyc_Interface_Seen* f4; } ; static void Cyc_Interface_extract_f( struct _tuple11*
  env_f, struct Cyc_List_List* ns, struct Cyc_Tcenv_Genv* ge){ struct _tuple11
! _temp470; struct Cyc_Interface_Seen* _temp471; struct Cyc_Dict_Dict* _temp473;
! int _temp475; struct Cyc_Interface_I* _temp477; struct _tuple11* _temp468= env_f;
! _temp470=* _temp468; _LL478: _temp477= _temp470.f1; goto _LL476; _LL476:
! _temp475= _temp470.f2; goto _LL474; _LL474: _temp473= _temp470.f3; goto _LL472;
! _LL472: _temp471= _temp470.f4; goto _LL469; _LL469: { struct _tuple10 _temp479=({
! struct _tuple10 _temp480; _temp480.f1=(( struct Cyc_Interface_Ienv*(*)( struct
! Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp477->imports,
! ns); _temp480.f2=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict* d,
! struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp477->exports, ns); _temp480.f3=
! _temp475; _temp480.f4= _temp473; _temp480.f5= _temp471; _temp480.f6= _temp477;
! _temp480;});(( void(*)( void(* f)( struct _tuple10*, struct _tagged_arr*, struct
  Cyc_Absyn_Structdecl**), struct _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)(
! Cyc_Interface_extract_structdecl,& _temp479, ge->structdecls);(( void(*)( void(*
  f)( struct _tuple10*, struct _tagged_arr*, struct Cyc_Absyn_Uniondecl**), struct
  _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_uniondecl,&
! _temp479, ge->uniondecls);(( void(*)( void(* f)( struct _tuple10*, struct
  _tagged_arr*, struct Cyc_Absyn_Tuniondecl**), struct _tuple10* env, struct Cyc_Dict_Dict*
! d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_tuniondecl,& _temp479, ge->tuniondecls);((
  void(*)( void(* f)( struct _tuple10*, struct _tagged_arr*, struct Cyc_Absyn_Enumdecl**),
  struct _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_enumdecl,&
! _temp479, ge->enumdecls);(( void(*)( void(* f)( struct _tuple10*, struct
  _tagged_arr*, struct Cyc_Absyn_Typedefdecl*), struct _tuple10* env, struct Cyc_Dict_Dict*
! d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_typedef,& _temp479, ge->typedefs);((
  void(*)( void(* f)( struct _tuple10*, struct _tagged_arr*, struct _tuple6*),
  struct _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_ordinarie,&
! _temp479, ge->ordinaries);}} static struct Cyc_Interface_I* Cyc_Interface_gen_extract(
! struct Cyc_Dict_Dict* ae, int check_complete_defs){ struct _tuple11 _temp481=({
! struct _tuple11 _temp482; _temp482.f1=(( struct Cyc_Interface_I*(*)( struct Cyc_Dict_Dict*
! skel)) Cyc_Interface_skel2i)( ae); _temp482.f2= check_complete_defs; _temp482.f3=
! ae; _temp482.f4= Cyc_Interface_new_seen(); _temp482;});(( void(*)( void(* f)(
  struct _tuple11*, struct Cyc_List_List*, struct Cyc_Tcenv_Genv*), struct
  _tuple11* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_f,&
! _temp481, ae); return _temp481.f1;} struct Cyc_Interface_I* Cyc_Interface_extract(
  struct Cyc_Dict_Dict* ae){ return Cyc_Interface_gen_extract( ae, 1);} inline
  static void Cyc_Interface_check_err( struct _tagged_arr* msg1, struct
! _tagged_arr msg2){({ struct Cyc_Std_String_pa_struct _temp484; _temp484.tag= Cyc_Std_String_pa;
! _temp484.f1=( struct _tagged_arr) msg2;{ void* _temp483[ 1u]={& _temp484}; Cyc_Tcdecl_merr(
! 0, msg1, _tag_arr("%s", sizeof( unsigned char), 3u), _tag_arr( _temp483, sizeof(
! void*), 1u));}});} struct _tuple12{ int f1; struct Cyc_Dict_Dict* f2; int(* f3)(
! void*, void*, struct _tagged_arr*); struct _tagged_arr f4; struct _tagged_arr*
! f5; } ; static void Cyc_Interface_incl_dict_f( struct _tuple12* env, struct
! _tagged_arr* x, void* y1){ struct _tuple12 _temp487; struct _tagged_arr*
! _temp488; struct _tagged_arr _temp490; int(* _temp492)( void*, void*, struct
! _tagged_arr*); struct Cyc_Dict_Dict* _temp494; int _temp496; int* _temp498;
! struct _tuple12* _temp485= env; _temp487=* _temp485; _LL497: _temp496= _temp487.f1;
! _temp498=( int*)&(* _temp485).f1; goto _LL495; _LL495: _temp494= _temp487.f2;
! goto _LL493; _LL493: _temp492= _temp487.f3; goto _LL491; _LL491: _temp490=
! _temp487.f4; goto _LL489; _LL489: _temp488= _temp487.f5; goto _LL486; _LL486: {
! struct _handler_cons _temp499; _push_handler(& _temp499);{ int _temp501= 0; if(
! setjmp( _temp499.handler)){ _temp501= 1;} if( ! _temp501){{ void* _temp502=((
! void*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)(
! _temp494, x); if( ! _temp492( y1, _temp502, _temp488)){* _temp498= 0;}};
! _pop_handler();} else{ void* _temp500=( void*) _exn_thrown; void* _temp504=
! _temp500; _LL506: if( _temp504 ==  Cyc_Dict_Absent){ goto _LL507;} else{ goto
! _LL508;} _LL508: goto _LL509; _LL507: Cyc_Interface_check_err( _temp488,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp512; _temp512.tag= Cyc_Std_String_pa;
! _temp512.f1=( struct _tagged_arr)* x;{ struct Cyc_Std_String_pa_struct _temp511;
! _temp511.tag= Cyc_Std_String_pa; _temp511.f1=( struct _tagged_arr) _temp490;{
! void* _temp510[ 2u]={& _temp511,& _temp512}; Cyc_Std_aprintf( _tag_arr("%s %s is missing",
! sizeof( unsigned char), 17u), _tag_arr( _temp510, sizeof( void*), 2u));}}}));*
! _temp498= 0; goto _LL505; _LL509:( void) _throw( _temp504); _LL505:;}}}} static
  int Cyc_Interface_incl_dict( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, int(* incl_f)( void*, void*, struct _tagged_arr*), struct _tagged_arr t,
! struct _tagged_arr* msg){ struct _tuple12 _temp513=({ struct _tuple12 _temp514;
! _temp514.f1= 1; _temp514.f2= dic2; _temp514.f3= incl_f; _temp514.f4= t; _temp514.f5=
! msg; _temp514;});(( void(*)( void(* f)( struct _tuple12*, struct _tagged_arr*,
  void*), struct _tuple12* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_incl_dict_f,&
! _temp513, dic1); return _temp513.f1;} static int Cyc_Interface_incl_structdecl(
  struct Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct
! _tagged_arr* msg){ struct Cyc_Absyn_Structdecl* _temp515= Cyc_Tcdecl_merge_structdecl(
! d0, d1, 0, msg); if( _temp515 ==  0){ return 0;} if(( struct Cyc_Absyn_Structdecl*)
! d0 !=  _temp515){ Cyc_Interface_check_err( msg,( struct _tagged_arr)({ struct
! Cyc_Std_String_pa_struct _temp517; _temp517.tag= Cyc_Std_String_pa; _temp517.f1=(
  struct _tagged_arr) Cyc_Absynpp_qvar2string(( struct _tuple0*)(( struct Cyc_Core_Opt*)
! _check_null( d1->name))->v);{ void* _temp516[ 1u]={& _temp517}; Cyc_Std_aprintf(
  _tag_arr("declaration of struct %s discloses too much information", sizeof(
! unsigned char), 56u), _tag_arr( _temp516, sizeof( void*), 1u));}})); return 0;}
  return 1;} static int Cyc_Interface_incl_uniondecl( struct Cyc_Absyn_Uniondecl*
  d0, struct Cyc_Absyn_Uniondecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Uniondecl*
! _temp518= Cyc_Tcdecl_merge_uniondecl( d0, d1, 0, msg); if( _temp518 ==  0){
! return 0;} if(( struct Cyc_Absyn_Uniondecl*) d0 !=  _temp518){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp520; _temp520.tag=
! Cyc_Std_String_pa; _temp520.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
  struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( d1->name))->v);{ void*
! _temp519[ 1u]={& _temp520}; Cyc_Std_aprintf( _tag_arr("declaration of union %s discloses too much information",
! sizeof( unsigned char), 55u), _tag_arr( _temp519, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_tuniondecl( struct Cyc_Absyn_Tuniondecl*
  d0, struct Cyc_Absyn_Tuniondecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Tuniondecl*
! _temp521= Cyc_Tcdecl_merge_tuniondecl( d0, d1, 0, msg); if( _temp521 ==  0){
! return 0;} if(( struct Cyc_Absyn_Tuniondecl*) d0 !=  _temp521){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp523; _temp523.tag=
! Cyc_Std_String_pa; _temp523.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp522[ 1u]={& _temp523}; Cyc_Std_aprintf( _tag_arr("declaration of tunion %s discloses too much information",
! sizeof( unsigned char), 56u), _tag_arr( _temp522, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_enumdecl( struct Cyc_Absyn_Enumdecl*
  d0, struct Cyc_Absyn_Enumdecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Enumdecl*
! _temp524= Cyc_Tcdecl_merge_enumdecl( d0, d1, 0, msg); if( _temp524 ==  0){
! return 0;} if(( struct Cyc_Absyn_Enumdecl*) d0 !=  _temp524){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp526; _temp526.tag=
! Cyc_Std_String_pa; _temp526.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp525[ 1u]={& _temp526}; Cyc_Std_aprintf( _tag_arr("declaration of enum %s discloses too much information",
! sizeof( unsigned char), 54u), _tag_arr( _temp525, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_vardecl( struct Cyc_Absyn_Vardecl*
  d0, struct Cyc_Absyn_Vardecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Vardecl*
! _temp527= Cyc_Tcdecl_merge_vardecl( d0, d1, 0, msg); if( _temp527 ==  0){ return
! 0;} if(( struct Cyc_Absyn_Vardecl*) d0 !=  _temp527){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp529; _temp529.tag=
! Cyc_Std_String_pa; _temp529.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp528[ 1u]={& _temp529}; Cyc_Std_aprintf( _tag_arr("declaration of variable %s discloses too much information",
! sizeof( unsigned char), 58u), _tag_arr( _temp528, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_typedefdecl( struct Cyc_Absyn_Typedefdecl*
  d0, struct Cyc_Absyn_Typedefdecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Typedefdecl*
! _temp530= Cyc_Tcdecl_merge_typedefdecl( d0, d1, 0, msg); if( _temp530 ==  0){
! return 0;} if(( struct Cyc_Absyn_Typedefdecl*) d0 !=  _temp530){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp532; _temp532.tag=
! Cyc_Std_String_pa; _temp532.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp531[ 1u]={& _temp532}; Cyc_Std_aprintf( _tag_arr("declaration of typedef %s discloses too much information",
! sizeof( unsigned char), 57u), _tag_arr( _temp531, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_xtunionfielddecl( struct Cyc_Tcdecl_Xtunionfielddecl*
  d0, struct Cyc_Tcdecl_Xtunionfielddecl* d1, struct _tagged_arr* msg){ struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp533= Cyc_Tcdecl_merge_xtunionfielddecl( d0, d1, 0, msg); if( _temp533 ==  0){
! return 0;} if(( struct Cyc_Tcdecl_Xtunionfielddecl*) d0 !=  _temp533){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp535; _temp535.tag=
! Cyc_Std_String_pa; _temp535.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
! d1->field)->name);{ void* _temp534[ 1u]={& _temp535}; Cyc_Std_aprintf( _tag_arr("declaration of xtunionfield %s discloses too much information",
! sizeof( unsigned char), 62u), _tag_arr( _temp534, sizeof( void*), 1u));}}));
  return 0;} return 1;} struct Cyc_Core_Opt* Cyc_Interface_compat_merge_dict(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict*
  excl, void**(* merge_f)( void**, void**, struct Cyc_Position_Segment*, struct
  _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg); static int Cyc_Interface_incl_ienv(
  struct Cyc_Interface_Ienv* ie1, struct Cyc_Interface_Ienv* ie2, struct
! _tagged_arr* msg){ int _temp536=(( int(*)( struct Cyc_Dict_Dict* dic1, struct
  Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Absyn_Structdecl*, struct Cyc_Absyn_Structdecl*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_incl_dict)(
  ie1->structdecls, ie2->structdecls, Cyc_Interface_incl_structdecl, _tag_arr("struct",
! sizeof( unsigned char), 7u), msg); int _temp537=(( int(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Absyn_Uniondecl*,
  struct Cyc_Absyn_Uniondecl*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_incl_dict)( ie1->uniondecls, ie2->uniondecls,
  Cyc_Interface_incl_uniondecl, _tag_arr("union", sizeof( unsigned char), 6u), msg);
! int _temp538=(( int(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2,
  int(* incl_f)( struct Cyc_Absyn_Tuniondecl*, struct Cyc_Absyn_Tuniondecl*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_incl_dict)(
  ie1->tuniondecls, ie2->tuniondecls, Cyc_Interface_incl_tuniondecl, _tag_arr("tunion",
! sizeof( unsigned char), 7u), msg); int _temp539=(( int(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Absyn_Enumdecl*,
  struct Cyc_Absyn_Enumdecl*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_incl_dict)( ie1->enumdecls, ie2->enumdecls, Cyc_Interface_incl_enumdecl,
! _tag_arr("enum", sizeof( unsigned char), 5u), msg); int _temp540=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict*
  excl, struct Cyc_Absyn_Typedefdecl*(* merge_f)( struct Cyc_Absyn_Typedefdecl*,
  struct Cyc_Absyn_Typedefdecl*, struct Cyc_Position_Segment*, struct _tagged_arr*),
--- 1035,1555 ----
  struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp142->name))->v);
  return 0;} return Cyc_Interface_check_public_type_list( ae, seen, obj, name, Cyc_Core_identity,
  _temp143)? Cyc_Interface_check_public_uniondecl( ae, seen, _temp142): 0; _LL107: {
! struct _tuple0 _temp171; struct _tagged_arr* _temp172; void* _temp174; struct
! _tuple0* _temp169= _temp145; _temp171=* _temp169; _LL175: _temp174= _temp171.f1;
! goto _LL173; _LL173: _temp172= _temp171.f2; goto _LL170; _LL170: { struct Cyc_List_List*
! _temp176= Cyc_Interface_get_abs_ns( _temp174); struct Cyc_Absyn_Enumdecl* ed;{
! struct _handler_cons _temp177; _push_handler(& _temp177);{ int _temp179= 0; if(
! setjmp( _temp177.handler)){ _temp179= 1;} if( ! _temp179){{ struct Cyc_Tcenv_Genv*
! _temp180=(( struct Cyc_Tcenv_Genv*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k)) Cyc_Dict_lookup)( ae, _temp176); ed=*(( struct Cyc_Absyn_Enumdecl**(*)(
! struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)( _temp180->enumdecls,
! _temp172);}; _pop_handler();} else{ void* _temp178=( void*) _exn_thrown; void*
! _temp182= _temp178; _LL184: if( _temp182 ==  Cyc_Dict_Absent){ goto _LL185;}
! else{ goto _LL186;} _LL186: goto _LL187; _LL185:( int) _throw(( void*)({ struct
! Cyc_Core_Invalid_argument_struct* _temp188=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp188[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp189; _temp189.tag= Cyc_Core_Invalid_argument;
! _temp189.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp191;
! _temp191.tag= Cyc_Std_String_pa; _temp191.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp145);{ void* _temp190[ 1u]={& _temp191}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find enum %s)",
! sizeof( unsigned char), 39u), _tag_arr( _temp190, sizeof( void*), 1u));}});
! _temp189;}); _temp188;})); _LL187:( void) _throw( _temp182); _LL183:;}}} if((
  void*) ed->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err( obj,
  _temp145, _tag_arr("enum", sizeof( unsigned char), 5u), ed->name); return 0;}
! return 1;}} _LL109: { struct _tuple0 _temp194; struct _tagged_arr* _temp195;
! void* _temp197; struct _tuple0* _temp192= _temp153->name; _temp194=* _temp192;
! _LL198: _temp197= _temp194.f1; goto _LL196; _LL196: _temp195= _temp194.f2; goto
! _LL193; _LL193: { struct Cyc_List_List* _temp199= Cyc_Interface_get_abs_ns(
! _temp197); struct Cyc_Absyn_Tuniondecl* tud;{ struct _handler_cons _temp200;
! _push_handler(& _temp200);{ int _temp202= 0; if( setjmp( _temp200.handler)){
! _temp202= 1;} if( ! _temp202){{ struct Cyc_Tcenv_Genv* _temp203=(( struct Cyc_Tcenv_Genv*(*)(
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( ae,
! _temp199); tud=*(( struct Cyc_Absyn_Tuniondecl**(*)( struct Cyc_Dict_Dict* d,
! struct _tagged_arr* k)) Cyc_Dict_lookup)( _temp203->tuniondecls, _temp195);};
! _pop_handler();} else{ void* _temp201=( void*) _exn_thrown; void* _temp205=
! _temp201; _LL207: if( _temp205 ==  Cyc_Dict_Absent){ goto _LL208;} else{ goto
! _LL209;} _LL209: goto _LL210; _LL208:( int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct*
! _temp211=( struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct
! Cyc_Core_Invalid_argument_struct)); _temp211[ 0]=({ struct Cyc_Core_Invalid_argument_struct
! _temp212; _temp212.tag= Cyc_Core_Invalid_argument; _temp212.f1=( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp214; _temp214.tag= Cyc_Std_String_pa;
! _temp214.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp153->name);{
! void* _temp213[ 1u]={& _temp214}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find [x]tunion %s)",
! sizeof( unsigned char), 44u), _tag_arr( _temp213, sizeof( void*), 1u));}});
! _temp212;}); _temp211;})); _LL210:( void) _throw( _temp205); _LL206:;}}} if((
  void*) tud->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err( obj,
  name, _tag_arr("[x]tunion", sizeof( unsigned char), 10u), tud->name); return 0;}
  return Cyc_Interface_check_public_type_list( ae, seen, obj, name, Cyc_Core_identity,
  _temp149)? Cyc_Interface_check_public_tuniondecl( ae, seen, tud): 0;}} _LL111: {
! struct _tuple0 _temp217; struct _tagged_arr* _temp218; void* _temp220; struct
! _tuple0* _temp215= _temp163->name; _temp217=* _temp215; _LL221: _temp220=
! _temp217.f1; goto _LL219; _LL219: _temp218= _temp217.f2; goto _LL216; _LL216: {
! struct Cyc_List_List* _temp222= Cyc_Interface_get_abs_ns( _temp220); struct Cyc_Absyn_Tuniondecl*
! tud;{ struct _handler_cons _temp223; _push_handler(& _temp223);{ int _temp225= 0;
! if( setjmp( _temp223.handler)){ _temp225= 1;} if( ! _temp225){{ struct Cyc_Tcenv_Genv*
! _temp226=(( struct Cyc_Tcenv_Genv*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k)) Cyc_Dict_lookup)( ae, _temp222); tud=*(( struct Cyc_Absyn_Tuniondecl**(*)(
! struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)( _temp226->tuniondecls,
! _temp218);}; _pop_handler();} else{ void* _temp224=( void*) _exn_thrown; void*
! _temp228= _temp224; _LL230: if( _temp228 ==  Cyc_Dict_Absent){ goto _LL231;}
! else{ goto _LL232;} _LL232: goto _LL233; _LL231:( int) _throw(( void*)({ struct
! Cyc_Core_Invalid_argument_struct* _temp234=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp234[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp235; _temp235.tag= Cyc_Core_Invalid_argument;
! _temp235.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp237;
! _temp237.tag= Cyc_Std_String_pa; _temp237.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp163->name);{ void* _temp236[ 1u]={& _temp237}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find [x]tunion %s and search its fields)",
! sizeof( unsigned char), 66u), _tag_arr( _temp236, sizeof( void*), 1u));}});
! _temp235;}); _temp234;})); _LL233:( void) _throw( _temp228); _LL229:;}}} if( tud->fields
  ==  0){( int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct*
! _temp238=( struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct
! Cyc_Core_Invalid_argument_struct)); _temp238[ 0]=({ struct Cyc_Core_Invalid_argument_struct
! _temp239; _temp239.tag= Cyc_Core_Invalid_argument; _temp239.f1=( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp241; _temp241.tag= Cyc_Std_String_pa;
! _temp241.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( tud->name);{ void*
! _temp240[ 1u]={& _temp241}; Cyc_Std_aprintf( _tag_arr("check_public_type ([x]tunion %s has no fields)",
! sizeof( unsigned char), 47u), _tag_arr( _temp240, sizeof( void*), 1u));}});
! _temp239;}); _temp238;}));}{ struct Cyc_Absyn_Tunionfield* tuf1= 0;{ struct Cyc_List_List*
! _temp242=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( tud->fields))->v;
! for( 0; _temp242 !=  0; _temp242=(( struct Cyc_List_List*) _check_null( _temp242))->tl){
! if( Cyc_Std_strptrcmp((* _temp161->name).f2,(*(( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp242))->hd)->name).f2) ==  0){ tuf1=(
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( _temp242))->hd); break;}}} if( tuf1 ==  0){( int) _throw(( void*)({
! struct Cyc_Core_Invalid_argument_struct* _temp243=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp243[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp244; _temp244.tag= Cyc_Core_Invalid_argument;
! _temp244.f1=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp246;
! _temp246.tag= Cyc_Std_String_pa; _temp246.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp161->name);{ void* _temp245[ 1u]={& _temp246}; Cyc_Std_aprintf( _tag_arr("check_public_type (can't find [x]tunionfield %s)",
! sizeof( unsigned char), 49u), _tag_arr( _temp245, sizeof( void*), 1u));}});
! _temp244;}); _temp243;}));}{ struct Cyc_Absyn_Tunionfield* tuf=( struct Cyc_Absyn_Tunionfield*)
  _check_null( tuf1); if(( void*) tud->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err(
  obj, name, _tag_arr("[x]tunion", sizeof( unsigned char), 10u), tud->name);
  return 0;} if(( void*) tud->sc == ( void*) Cyc_Absyn_Abstract){ Cyc_Interface_abstract_err(
  obj, name, _tag_arr("[x]tunion", sizeof( unsigned char), 10u), tud->name);
  return 0;} if(( void*) tuf->sc == ( void*) Cyc_Absyn_Static){ Cyc_Interface_static_err(
! obj, name,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp248;
! _temp248.tag= Cyc_Std_String_pa; _temp248.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! tuf->name);{ void* _temp247[ 1u]={& _temp248}; Cyc_Std_aprintf( _tag_arr("field %s of",
! sizeof( unsigned char), 12u), _tag_arr( _temp247, sizeof( void*), 1u));}}), tud->name);
  return 0;} return Cyc_Interface_check_public_type_list( ae, seen, obj, name, Cyc_Core_identity,
! _temp157)? Cyc_Interface_check_public_tuniondecl( ae, seen, tud): 0;}}}} _LL113:
  return 1; _LL91:;} struct _tuple10{ struct Cyc_Interface_Ienv* f1; struct Cyc_Interface_Ienv*
  f2; int f3; struct Cyc_Dict_Dict* f4; struct Cyc_Interface_Seen* f5; struct Cyc_Interface_I*
  f6; } ; static void Cyc_Interface_extract_structdecl( struct _tuple10* env,
  struct _tagged_arr* x, struct Cyc_Absyn_Structdecl** dp){ struct _tuple10
! _temp251; struct Cyc_Interface_Seen* _temp252; struct Cyc_Dict_Dict* _temp254;
! int _temp256; struct Cyc_Interface_Ienv* _temp258; struct Cyc_Interface_Ienv*
! _temp260; struct _tuple10* _temp249= env; _temp251=* _temp249; _LL261: _temp260=
! _temp251.f1; goto _LL259; _LL259: _temp258= _temp251.f2; goto _LL257; _LL257:
! _temp256= _temp251.f3; goto _LL255; _LL255: _temp254= _temp251.f4; goto _LL253;
! _LL253: _temp252= _temp251.f5; goto _LL250; _LL250: { struct Cyc_Absyn_Structdecl*
! _temp262=* dp; void* _temp263=( void*) _temp262->sc; _LL265: if( _temp263 == (
! void*) Cyc_Absyn_Static){ goto _LL266;} else{ goto _LL267;} _LL267: if( _temp263
! == ( void*) Cyc_Absyn_Abstract){ goto _LL268;} else{ goto _LL269;} _LL269: if(
! _temp263 == ( void*) Cyc_Absyn_Public){ goto _LL270;} else{ goto _LL271;} _LL271:
! if( _temp263 == ( void*) Cyc_Absyn_ExternC){ goto _LL272;} else{ goto _LL273;}
! _LL273: if( _temp263 == ( void*) Cyc_Absyn_Extern){ goto _LL274;} else{ goto
! _LL264;} _LL266: if( _temp256? _temp262->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("static", sizeof( unsigned char), 7u), _tag_arr("struct", sizeof(
  unsigned char), 7u),( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp262->name))->v);} goto _LL264; _LL268: if( _temp262->fields ==  0){ if(
! _temp256){ Cyc_Interface_fields_err( _tag_arr("abstract", sizeof( unsigned char),
  9u), _tag_arr("struct", sizeof( unsigned char), 7u),( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( _temp262->name))->v);}} else{ _temp262=({ struct Cyc_Absyn_Structdecl*
! _temp275=( struct Cyc_Absyn_Structdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Structdecl));
! _temp275[ 0]=* _temp262; _temp275;}); _temp262->fields= 0;} if( Cyc_Interface_check_public_structdecl(
! _temp254, _temp252, _temp262)){ _temp258->structdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl* v))
! Cyc_Dict_insert)( _temp258->structdecls, x, _temp262);} goto _LL264; _LL270: if(
! _temp262->fields ==  0){ Cyc_Interface_fields_err( _tag_arr("public", sizeof(
  unsigned char), 7u), _tag_arr("struct", sizeof( unsigned char), 7u),( struct
! _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp262->name))->v); _temp262=({
! struct Cyc_Absyn_Structdecl* _temp276=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp276[ 0]=* _temp262; _temp276;});(
! void*)( _temp262->sc=( void*)(( void*) Cyc_Absyn_Abstract));} if( Cyc_Interface_check_public_structdecl(
! _temp254, _temp252, _temp262)){ _temp258->structdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl* v))
! Cyc_Dict_insert)( _temp258->structdecls, x, _temp262);} goto _LL264; _LL272:
! goto _LL274; _LL274: if( Cyc_Interface_check_public_structdecl( _temp254,
! _temp252, _temp262)){ _temp260->structdecls=(( struct Cyc_Dict_Dict*(*)( struct
  Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl* v)) Cyc_Dict_insert)(
! _temp260->structdecls, x, _temp262);} goto _LL264; _LL264:;}} static void Cyc_Interface_extract_uniondecl(
  struct _tuple10* env, struct _tagged_arr* x, struct Cyc_Absyn_Uniondecl** dp){
! struct _tuple10 _temp279; struct Cyc_Interface_Seen* _temp280; struct Cyc_Dict_Dict*
! _temp282; int _temp284; struct Cyc_Interface_Ienv* _temp286; struct Cyc_Interface_Ienv*
! _temp288; struct _tuple10* _temp277= env; _temp279=* _temp277; _LL289: _temp288=
! _temp279.f1; goto _LL287; _LL287: _temp286= _temp279.f2; goto _LL285; _LL285:
! _temp284= _temp279.f3; goto _LL283; _LL283: _temp282= _temp279.f4; goto _LL281;
! _LL281: _temp280= _temp279.f5; goto _LL278; _LL278: { struct Cyc_Absyn_Uniondecl*
! _temp290=* dp; void* _temp291=( void*) _temp290->sc; _LL293: if( _temp291 == (
! void*) Cyc_Absyn_Static){ goto _LL294;} else{ goto _LL295;} _LL295: if( _temp291
! == ( void*) Cyc_Absyn_Abstract){ goto _LL296;} else{ goto _LL297;} _LL297: if(
! _temp291 == ( void*) Cyc_Absyn_Public){ goto _LL298;} else{ goto _LL299;} _LL299:
! if( _temp291 == ( void*) Cyc_Absyn_ExternC){ goto _LL300;} else{ goto _LL301;}
! _LL301: if( _temp291 == ( void*) Cyc_Absyn_Extern){ goto _LL302;} else{ goto
! _LL292;} _LL294: if( _temp284? _temp290->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("static", sizeof( unsigned char), 7u), _tag_arr("union", sizeof(
  unsigned char), 6u),( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null(
! _temp290->name))->v);} goto _LL292; _LL296: if( _temp290->fields ==  0){ if(
! _temp284){ Cyc_Interface_fields_err( _tag_arr("abstract", sizeof( unsigned char),
  9u), _tag_arr("union", sizeof( unsigned char), 6u),( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( _temp290->name))->v);}} else{ _temp290=({ struct Cyc_Absyn_Uniondecl*
! _temp303=( struct Cyc_Absyn_Uniondecl*) _cycalloc( sizeof( struct Cyc_Absyn_Uniondecl));
! _temp303[ 0]=* _temp290; _temp303;}); _temp290->fields= 0;} if( Cyc_Interface_check_public_uniondecl(
! _temp282, _temp280, _temp290)){ _temp286->uniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl* v))
! Cyc_Dict_insert)( _temp286->uniondecls, x, _temp290);} goto _LL292; _LL298: if(
! _temp290->fields ==  0){ Cyc_Interface_fields_err( _tag_arr("public", sizeof(
  unsigned char), 7u), _tag_arr("union", sizeof( unsigned char), 6u),( struct
! _tuple0*)(( struct Cyc_Core_Opt*) _check_null( _temp290->name))->v); _temp290=({
! struct Cyc_Absyn_Uniondecl* _temp304=( struct Cyc_Absyn_Uniondecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Uniondecl)); _temp304[ 0]=* _temp290; _temp304;});(
! void*)( _temp290->sc=( void*)(( void*) Cyc_Absyn_Abstract));} if( Cyc_Interface_check_public_uniondecl(
! _temp282, _temp280, _temp290)){ _temp286->uniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl* v))
! Cyc_Dict_insert)( _temp286->uniondecls, x, _temp290);} goto _LL292; _LL300: goto
! _LL302; _LL302: if( Cyc_Interface_check_public_uniondecl( _temp282, _temp280,
! _temp290)){ _temp288->uniondecls=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict*
  d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl* v)) Cyc_Dict_insert)(
! _temp288->uniondecls, x, _temp290);} goto _LL292; _LL292:;}} static void Cyc_Interface_extract_enumdecl(
  struct _tuple10* env, struct _tagged_arr* x, struct Cyc_Absyn_Enumdecl** dp){
! struct _tuple10 _temp307; struct Cyc_Interface_Seen* _temp308; struct Cyc_Dict_Dict*
! _temp310; int _temp312; struct Cyc_Interface_Ienv* _temp314; struct Cyc_Interface_Ienv*
! _temp316; struct _tuple10* _temp305= env; _temp307=* _temp305; _LL317: _temp316=
! _temp307.f1; goto _LL315; _LL315: _temp314= _temp307.f2; goto _LL313; _LL313:
! _temp312= _temp307.f3; goto _LL311; _LL311: _temp310= _temp307.f4; goto _LL309;
! _LL309: _temp308= _temp307.f5; goto _LL306; _LL306: { struct Cyc_Absyn_Enumdecl*
! _temp318=* dp; void* _temp319=( void*) _temp318->sc; _LL321: if( _temp319 == (
! void*) Cyc_Absyn_Static){ goto _LL322;} else{ goto _LL323;} _LL323: if( _temp319
! == ( void*) Cyc_Absyn_Abstract){ goto _LL324;} else{ goto _LL325;} _LL325: if(
! _temp319 == ( void*) Cyc_Absyn_Public){ goto _LL326;} else{ goto _LL327;} _LL327:
! if( _temp319 == ( void*) Cyc_Absyn_ExternC){ goto _LL328;} else{ goto _LL329;}
! _LL329: if( _temp319 == ( void*) Cyc_Absyn_Extern){ goto _LL330;} else{ goto
! _LL320;} _LL322: if( _temp312? _temp318->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("static", sizeof( unsigned char), 7u), _tag_arr("enum", sizeof(
! unsigned char), 5u), _temp318->name);} goto _LL320; _LL324: if( _temp318->fields
! ==  0){ if( _temp312){ Cyc_Interface_fields_err( _tag_arr("abstract", sizeof(
! unsigned char), 9u), _tag_arr("enum", sizeof( unsigned char), 5u), _temp318->name);}}
! else{ _temp318=({ struct Cyc_Absyn_Enumdecl* _temp331=( struct Cyc_Absyn_Enumdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl)); _temp331[ 0]=* _temp318;
! _temp331;}); _temp318->fields= 0;} if( Cyc_Interface_check_public_enumdecl(
! _temp310, _temp308, _temp318)){ _temp314->enumdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Enumdecl* v))
! Cyc_Dict_insert)( _temp314->enumdecls, x, _temp318);} goto _LL320; _LL326: if(
! _temp318->fields ==  0){ Cyc_Interface_fields_err( _tag_arr("public", sizeof(
! unsigned char), 7u), _tag_arr("enum", sizeof( unsigned char), 5u), _temp318->name);
! _temp318=({ struct Cyc_Absyn_Enumdecl* _temp332=( struct Cyc_Absyn_Enumdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl)); _temp332[ 0]=* _temp318;
! _temp332;});( void*)( _temp318->sc=( void*)(( void*) Cyc_Absyn_Abstract));} if(
! Cyc_Interface_check_public_enumdecl( _temp310, _temp308, _temp318)){ _temp314->enumdecls=((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct
! Cyc_Absyn_Enumdecl* v)) Cyc_Dict_insert)( _temp314->enumdecls, x, _temp318);}
! goto _LL320; _LL328: goto _LL330; _LL330: if( Cyc_Interface_check_public_enumdecl(
! _temp310, _temp308, _temp318)){ _temp316->enumdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Enumdecl* v))
! Cyc_Dict_insert)( _temp316->enumdecls, x, _temp318);} goto _LL320; _LL320:;}}
  static void Cyc_Interface_extract_xtunionfielddecl( struct Cyc_Interface_I* i,
  struct Cyc_Absyn_Tuniondecl* d, struct Cyc_Absyn_Tunionfield* f){ struct Cyc_List_List*
! _temp333= 0;{ void* _temp334=(* f->name).f1; struct Cyc_List_List* _temp342;
! struct Cyc_List_List* _temp344; _LL336: if(( unsigned int) _temp334 >  1u?*((
! int*) _temp334) ==  Cyc_Absyn_Rel_n: 0){ _LL343: _temp342=(( struct Cyc_Absyn_Rel_n_struct*)
! _temp334)->f1; goto _LL337;} else{ goto _LL338;} _LL338: if(( unsigned int)
! _temp334 >  1u?*(( int*) _temp334) ==  Cyc_Absyn_Abs_n: 0){ _LL345: _temp344=((
! struct Cyc_Absyn_Abs_n_struct*) _temp334)->f1; goto _LL339;} else{ goto _LL340;}
! _LL340: goto _LL341; _LL337: _temp344= _temp342; goto _LL339; _LL339: _temp333=
! _temp344; goto _LL335; _LL341: goto _LL335; _LL335:;}{ struct Cyc_Dict_Dict**
! dict;{ void* _temp346=( void*) f->sc; _LL348: if( _temp346 == ( void*) Cyc_Absyn_Static){
! goto _LL349;} else{ goto _LL350;} _LL350: if( _temp346 == ( void*) Cyc_Absyn_Extern){
! goto _LL351;} else{ goto _LL352;} _LL352: if( _temp346 == ( void*) Cyc_Absyn_Public){
! goto _LL353;} else{ goto _LL354;} _LL354: goto _LL355; _LL349: return; _LL351:
! dict=& i->imports; goto _LL347; _LL353: dict=& i->exports; goto _LL347; _LL355:(
! int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct* _temp356=(
  struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct));
! _temp356[ 0]=({ struct Cyc_Core_Invalid_argument_struct _temp357; _temp357.tag=
! Cyc_Core_Invalid_argument; _temp357.f1= _tag_arr("add_xtunionfielddecl", sizeof(
! unsigned char), 21u); _temp357;}); _temp356;})); _LL347:;}{ struct Cyc_Interface_Ienv*
! env;{ struct _handler_cons _temp358; _push_handler(& _temp358);{ int _temp360= 0;
! if( setjmp( _temp358.handler)){ _temp360= 1;} if( ! _temp360){ env=(( struct Cyc_Interface_Ienv*(*)(
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)(* dict,
! _temp333);; _pop_handler();} else{ void* _temp359=( void*) _exn_thrown; void*
! _temp362= _temp359; _LL364: if( _temp362 ==  Cyc_Dict_Absent){ goto _LL365;}
! else{ goto _LL366;} _LL366: goto _LL367; _LL365: env= Cyc_Interface_new_ienv();*
  dict=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k, struct Cyc_Interface_Ienv* v)) Cyc_Dict_insert)(* dict, _temp333, env); goto
! _LL363; _LL367:( void) _throw( _temp362); _LL363:;}}} env->xtunionfielddecls=((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct
  Cyc_Tcdecl_Xtunionfielddecl* v)) Cyc_Dict_insert)( env->xtunionfielddecls,(* f->name).f2,({
! struct Cyc_Tcdecl_Xtunionfielddecl* _temp368=( struct Cyc_Tcdecl_Xtunionfielddecl*)
! _cycalloc( sizeof( struct Cyc_Tcdecl_Xtunionfielddecl)); _temp368->base= d;
! _temp368->field= f; _temp368;}));}}} static void Cyc_Interface_extract_tuniondecl(
  struct _tuple10* env, struct _tagged_arr* x, struct Cyc_Absyn_Tuniondecl** dp){
! struct _tuple10 _temp371; struct Cyc_Interface_I* _temp372; struct Cyc_Interface_Seen*
! _temp374; struct Cyc_Dict_Dict* _temp376; int _temp378; struct Cyc_Interface_Ienv*
! _temp380; struct Cyc_Interface_Ienv* _temp382; struct _tuple10* _temp369= env;
! _temp371=* _temp369; _LL383: _temp382= _temp371.f1; goto _LL381; _LL381:
! _temp380= _temp371.f2; goto _LL379; _LL379: _temp378= _temp371.f3; goto _LL377;
! _LL377: _temp376= _temp371.f4; goto _LL375; _LL375: _temp374= _temp371.f5; goto
! _LL373; _LL373: _temp372= _temp371.f6; goto _LL370; _LL370: { struct Cyc_Absyn_Tuniondecl*
! _temp384=* dp; void* _temp385=( void*) _temp384->sc; _LL387: if( _temp385 == (
! void*) Cyc_Absyn_Static){ goto _LL388;} else{ goto _LL389;} _LL389: if( _temp385
! == ( void*) Cyc_Absyn_Abstract){ goto _LL390;} else{ goto _LL391;} _LL391: if(
! _temp385 == ( void*) Cyc_Absyn_Public){ goto _LL392;} else{ goto _LL393;} _LL393:
! if( _temp385 == ( void*) Cyc_Absyn_ExternC){ goto _LL394;} else{ goto _LL395;}
! _LL395: if( _temp385 == ( void*) Cyc_Absyn_Extern){ goto _LL396;} else{ goto
! _LL386;} _LL388: if(( ! _temp384->is_xtunion? _temp378: 0)? _temp384->fields == 
  0: 0){ Cyc_Interface_fields_err( _tag_arr("static", sizeof( unsigned char), 7u),
! _tag_arr("tunion", sizeof( unsigned char), 7u), _temp384->name);} goto _LL386;
! _LL390: if( _temp384->fields ==  0){ if( ! _temp384->is_xtunion? _temp378: 0){
  Cyc_Interface_fields_err( _tag_arr("abstract", sizeof( unsigned char), 9u),
! _tag_arr("tunion", sizeof( unsigned char), 7u), _temp384->name);}} else{
! _temp384=({ struct Cyc_Absyn_Tuniondecl* _temp397=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp397[ 0]=* _temp384;
! _temp397;}); _temp384->fields= 0;} if( Cyc_Interface_check_public_tuniondecl(
! _temp376, _temp374, _temp384)){ _temp380->tuniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Tuniondecl* v))
! Cyc_Dict_insert)( _temp380->tuniondecls, x, _temp384);} goto _LL386; _LL392:
! _temp384=({ struct Cyc_Absyn_Tuniondecl* _temp398=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp398[ 0]=* _temp384;
! _temp398;}); if( ! _temp384->is_xtunion? _temp384->fields ==  0: 0){ Cyc_Interface_fields_err(
  _tag_arr("public", sizeof( unsigned char), 7u), _tag_arr("tunion", sizeof(
! unsigned char), 7u), _temp384->name);( void*)( _temp384->sc=( void*)(( void*)
! Cyc_Absyn_Abstract));} if( Cyc_Interface_check_public_tuniondecl( _temp376,
! _temp374, _temp384)){ if( _temp384->is_xtunion? _temp384->fields !=  0: 0){
! struct Cyc_List_List* _temp399=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp384->fields))->v; _temp384->fields= 0;{ struct Cyc_List_List*
! _temp400= _temp399; for( 0; _temp400 !=  0; _temp400=(( struct Cyc_List_List*)
! _check_null( _temp400))->tl){ Cyc_Interface_extract_xtunionfielddecl( _temp372,
! _temp384,( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null(
! _temp400))->hd);}}} _temp380->tuniondecls=(( struct Cyc_Dict_Dict*(*)( struct
  Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Tuniondecl* v)) Cyc_Dict_insert)(
! _temp380->tuniondecls, x, _temp384);} goto _LL386; _LL394:( int) _throw(( void*)({
! struct Cyc_Core_Invalid_argument_struct* _temp401=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp401[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp402; _temp402.tag= Cyc_Core_Invalid_argument;
! _temp402.f1= _tag_arr("extract_tuniondecl", sizeof( unsigned char), 19u);
! _temp402;}); _temp401;})); _LL396: if( Cyc_Interface_check_public_tuniondecl(
! _temp376, _temp374, _temp384)){ if( _temp384->is_xtunion? _temp384->fields !=  0:
! 0){ _temp384=({ struct Cyc_Absyn_Tuniondecl* _temp403=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp403[ 0]=* _temp384;
! _temp403;});{ struct Cyc_List_List* _temp404=( struct Cyc_List_List*)(( struct
! Cyc_Core_Opt*) _check_null( _temp384->fields))->v; _temp384->fields= 0;{ struct
! Cyc_List_List* _temp405= _temp404; for( 0; _temp405 !=  0; _temp405=(( struct
! Cyc_List_List*) _check_null( _temp405))->tl){ Cyc_Interface_extract_xtunionfielddecl(
! _temp372, _temp384,( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( _temp405))->hd);}}}} _temp382->tuniondecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Tuniondecl* v))
! Cyc_Dict_insert)( _temp382->tuniondecls, x, _temp384);} goto _LL386; _LL386:;}}
  static void Cyc_Interface_extract_typedef( struct _tuple10* env, struct
! _tagged_arr* x, struct Cyc_Absyn_Typedefdecl* d){ struct _tuple10 _temp408;
! struct Cyc_Interface_Seen* _temp409; struct Cyc_Dict_Dict* _temp411; struct Cyc_Interface_Ienv*
! _temp413; struct _tuple10* _temp406= env; _temp408=* _temp406; _LL414: _temp413=
! _temp408.f2; goto _LL412; _LL412: _temp411= _temp408.f4; goto _LL410; _LL410:
! _temp409= _temp408.f5; goto _LL407; _LL407: if( Cyc_Interface_check_public_typedefdecl(
! _temp411, _temp409, d)){ _temp413->typedefdecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Typedefdecl* v))
! Cyc_Dict_insert)( _temp413->typedefdecls, x, d);}} static void Cyc_Interface_extract_ordinarie(
  struct _tuple10* env, struct _tagged_arr* x, struct _tuple6* v){ struct _tuple10
! _temp417; struct Cyc_Interface_Seen* _temp418; struct Cyc_Dict_Dict* _temp420;
! int _temp422; struct Cyc_Interface_Ienv* _temp424; struct Cyc_Interface_Ienv*
! _temp426; struct _tuple10* _temp415= env; _temp417=* _temp415; _LL427: _temp426=
! _temp417.f1; goto _LL425; _LL425: _temp424= _temp417.f2; goto _LL423; _LL423:
! _temp422= _temp417.f3; goto _LL421; _LL421: _temp420= _temp417.f4; goto _LL419;
! _LL419: _temp418= _temp417.f5; goto _LL416; _LL416: { void* _temp428=(* v).f1;
! void* _temp429= _temp428; void* _temp435; _LL431: if(*(( int*) _temp429) ==  Cyc_Tcenv_VarRes){
! _LL436: _temp435=( void*)(( struct Cyc_Tcenv_VarRes_struct*) _temp429)->f1; goto
! _LL432;} else{ goto _LL433;} _LL433: goto _LL434; _LL432:{ void* _temp437=
! _temp435; struct Cyc_Absyn_Fndecl* _temp445; struct Cyc_Absyn_Vardecl* _temp447;
! _LL439: if(( unsigned int) _temp437 >  1u?*(( int*) _temp437) ==  Cyc_Absyn_Funname_b:
! 0){ _LL446: _temp445=(( struct Cyc_Absyn_Funname_b_struct*) _temp437)->f1; goto
! _LL440;} else{ goto _LL441;} _LL441: if(( unsigned int) _temp437 >  1u?*(( int*)
! _temp437) ==  Cyc_Absyn_Global_b: 0){ _LL448: _temp447=(( struct Cyc_Absyn_Global_b_struct*)
! _temp437)->f1; goto _LL442;} else{ goto _LL443;} _LL443: goto _LL444; _LL440: {
! struct Cyc_Absyn_Vardecl* _temp449=({ struct Cyc_Absyn_Vardecl* _temp450=(
  struct Cyc_Absyn_Vardecl*) _cycalloc( sizeof( struct Cyc_Absyn_Vardecl));
! _temp450->sc=( void*)(( void*) _temp445->sc); _temp450->name= _temp445->name;
! _temp450->tq=({ struct Cyc_Absyn_Tqual _temp451; _temp451.q_const= 0; _temp451.q_volatile=
! 0; _temp451.q_restrict= 0; _temp451;}); _temp450->type=( void*)(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp445->cached_typ))->v); _temp450->initializer=
! 0; _temp450->rgn= 0; _temp450->attributes= 0; _temp450;}); _temp422= 0; _temp447=
! _temp449; goto _LL442;} _LL442: if( _temp447->initializer !=  0){ _temp447=({
! struct Cyc_Absyn_Vardecl* _temp452=( struct Cyc_Absyn_Vardecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Vardecl)); _temp452[ 0]=* _temp447; _temp452;});
! _temp447->initializer= 0;}{ void* _temp453=( void*) _temp447->sc; _LL455: if(
! _temp453 == ( void*) Cyc_Absyn_Static){ goto _LL456;} else{ goto _LL457;} _LL457:
! if( _temp453 == ( void*) Cyc_Absyn_Abstract){ goto _LL458;} else{ goto _LL459;}
! _LL459: if( _temp453 == ( void*) Cyc_Absyn_Public){ goto _LL460;} else{ goto
! _LL461;} _LL461: if( _temp453 == ( void*) Cyc_Absyn_ExternC){ goto _LL462;}
! else{ goto _LL463;} _LL463: if( _temp453 == ( void*) Cyc_Absyn_Extern){ goto
! _LL464;} else{ goto _LL454;} _LL456: if( _temp422? Cyc_Tcutil_is_function_type((
! void*) _temp447->type): 0){ Cyc_Interface_body_err( _tag_arr("static", sizeof(
! unsigned char), 7u), _temp447->name);} goto _LL454; _LL458:( int) _throw(( void*)({
! struct Cyc_Core_Invalid_argument_struct* _temp465=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp465[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp466; _temp466.tag= Cyc_Core_Invalid_argument;
! _temp466.f1= _tag_arr("extract_ordinarie", sizeof( unsigned char), 18u);
! _temp466;}); _temp465;})); _LL460: if( _temp422? Cyc_Tcutil_is_function_type((
! void*) _temp447->type): 0){ Cyc_Interface_body_err( _tag_arr("public", sizeof(
! unsigned char), 7u), _temp447->name);} if( Cyc_Interface_check_public_vardecl(
! _temp420, _temp418, _temp447)){ _temp424->vardecls=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Vardecl* v))
! Cyc_Dict_insert)( _temp424->vardecls, x, _temp447);} goto _LL454; _LL462: goto
! _LL464; _LL464: if( Cyc_Interface_check_public_vardecl( _temp420, _temp418,
! _temp447)){ _temp426->vardecls=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict*
  d, struct _tagged_arr* k, struct Cyc_Absyn_Vardecl* v)) Cyc_Dict_insert)(
! _temp426->vardecls, x, _temp447);} goto _LL454; _LL454:;} goto _LL438; _LL444:
! goto _LL438; _LL438:;} goto _LL430; _LL434: goto _LL430; _LL430:;}} struct
  _tuple11{ struct Cyc_Interface_I* f1; int f2; struct Cyc_Dict_Dict* f3; struct
  Cyc_Interface_Seen* f4; } ; static void Cyc_Interface_extract_f( struct _tuple11*
  env_f, struct Cyc_List_List* ns, struct Cyc_Tcenv_Genv* ge){ struct _tuple11
! _temp469; struct Cyc_Interface_Seen* _temp470; struct Cyc_Dict_Dict* _temp472;
! int _temp474; struct Cyc_Interface_I* _temp476; struct _tuple11* _temp467= env_f;
! _temp469=* _temp467; _LL477: _temp476= _temp469.f1; goto _LL475; _LL475:
! _temp474= _temp469.f2; goto _LL473; _LL473: _temp472= _temp469.f3; goto _LL471;
! _LL471: _temp470= _temp469.f4; goto _LL468; _LL468: { struct _tuple10 _temp478=({
! struct _tuple10 _temp479; _temp479.f1=(( struct Cyc_Interface_Ienv*(*)( struct
! Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp476->imports,
! ns); _temp479.f2=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict* d,
! struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp476->exports, ns); _temp479.f3=
! _temp474; _temp479.f4= _temp472; _temp479.f5= _temp470; _temp479.f6= _temp476;
! _temp479;});(( void(*)( void(* f)( struct _tuple10*, struct _tagged_arr*, struct
  Cyc_Absyn_Structdecl**), struct _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)(
! Cyc_Interface_extract_structdecl,& _temp478, ge->structdecls);(( void(*)( void(*
  f)( struct _tuple10*, struct _tagged_arr*, struct Cyc_Absyn_Uniondecl**), struct
  _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_uniondecl,&
! _temp478, ge->uniondecls);(( void(*)( void(* f)( struct _tuple10*, struct
  _tagged_arr*, struct Cyc_Absyn_Tuniondecl**), struct _tuple10* env, struct Cyc_Dict_Dict*
! d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_tuniondecl,& _temp478, ge->tuniondecls);((
  void(*)( void(* f)( struct _tuple10*, struct _tagged_arr*, struct Cyc_Absyn_Enumdecl**),
  struct _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_enumdecl,&
! _temp478, ge->enumdecls);(( void(*)( void(* f)( struct _tuple10*, struct
  _tagged_arr*, struct Cyc_Absyn_Typedefdecl*), struct _tuple10* env, struct Cyc_Dict_Dict*
! d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_typedef,& _temp478, ge->typedefs);((
  void(*)( void(* f)( struct _tuple10*, struct _tagged_arr*, struct _tuple6*),
  struct _tuple10* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_ordinarie,&
! _temp478, ge->ordinaries);}} static struct Cyc_Interface_I* Cyc_Interface_gen_extract(
! struct Cyc_Dict_Dict* ae, int check_complete_defs){ struct _tuple11 _temp480=({
! struct _tuple11 _temp481; _temp481.f1=(( struct Cyc_Interface_I*(*)( struct Cyc_Dict_Dict*
! skel)) Cyc_Interface_skel2i)( ae); _temp481.f2= check_complete_defs; _temp481.f3=
! ae; _temp481.f4= Cyc_Interface_new_seen(); _temp481;});(( void(*)( void(* f)(
  struct _tuple11*, struct Cyc_List_List*, struct Cyc_Tcenv_Genv*), struct
  _tuple11* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_extract_f,&
! _temp480, ae); return _temp480.f1;} struct Cyc_Interface_I* Cyc_Interface_extract(
  struct Cyc_Dict_Dict* ae){ return Cyc_Interface_gen_extract( ae, 1);} inline
  static void Cyc_Interface_check_err( struct _tagged_arr* msg1, struct
! _tagged_arr msg2){ Cyc_Tcdecl_merr( 0, msg1, msg2);} struct _tuple12{ int f1;
! struct Cyc_Dict_Dict* f2; int(* f3)( void*, void*, struct _tagged_arr*); struct
! _tagged_arr f4; struct _tagged_arr* f5; } ; static void Cyc_Interface_incl_dict_f(
! struct _tuple12* env, struct _tagged_arr* x, void* y1){ struct _tuple12 _temp484;
! struct _tagged_arr* _temp485; struct _tagged_arr _temp487; int(* _temp489)( void*,
! void*, struct _tagged_arr*); struct Cyc_Dict_Dict* _temp491; int _temp493; int*
! _temp495; struct _tuple12* _temp482= env; _temp484=* _temp482; _LL494: _temp493=
! _temp484.f1; _temp495=( int*)&(* _temp482).f1; goto _LL492; _LL492: _temp491=
! _temp484.f2; goto _LL490; _LL490: _temp489= _temp484.f3; goto _LL488; _LL488:
! _temp487= _temp484.f4; goto _LL486; _LL486: _temp485= _temp484.f5; goto _LL483;
! _LL483: { struct _handler_cons _temp496; _push_handler(& _temp496);{ int
! _temp498= 0; if( setjmp( _temp496.handler)){ _temp498= 1;} if( ! _temp498){{
! void* _temp499=(( void*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)(
! _temp491, x); if( ! _temp489( y1, _temp499, _temp485)){* _temp495= 0;}};
! _pop_handler();} else{ void* _temp497=( void*) _exn_thrown; void* _temp501=
! _temp497; _LL503: if( _temp501 ==  Cyc_Dict_Absent){ goto _LL504;} else{ goto
! _LL505;} _LL505: goto _LL506; _LL504: Cyc_Interface_check_err( _temp485,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp509; _temp509.tag= Cyc_Std_String_pa;
! _temp509.f1=( struct _tagged_arr)* x;{ struct Cyc_Std_String_pa_struct _temp508;
! _temp508.tag= Cyc_Std_String_pa; _temp508.f1=( struct _tagged_arr) _temp487;{
! void* _temp507[ 2u]={& _temp508,& _temp509}; Cyc_Std_aprintf( _tag_arr("%s %s is missing",
! sizeof( unsigned char), 17u), _tag_arr( _temp507, sizeof( void*), 2u));}}}));*
! _temp495= 0; goto _LL502; _LL506:( void) _throw( _temp501); _LL502:;}}}} static
  int Cyc_Interface_incl_dict( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, int(* incl_f)( void*, void*, struct _tagged_arr*), struct _tagged_arr t,
! struct _tagged_arr* msg){ struct _tuple12 _temp510=({ struct _tuple12 _temp511;
! _temp511.f1= 1; _temp511.f2= dic2; _temp511.f3= incl_f; _temp511.f4= t; _temp511.f5=
! msg; _temp511;});(( void(*)( void(* f)( struct _tuple12*, struct _tagged_arr*,
  void*), struct _tuple12* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_incl_dict_f,&
! _temp510, dic1); return _temp510.f1;} static int Cyc_Interface_incl_structdecl(
  struct Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct
! _tagged_arr* msg){ struct Cyc_Absyn_Structdecl* _temp512= Cyc_Tcdecl_merge_structdecl(
! d0, d1, 0, msg); if( _temp512 ==  0){ return 0;} if(( struct Cyc_Absyn_Structdecl*)
! d0 !=  _temp512){ Cyc_Interface_check_err( msg,( struct _tagged_arr)({ struct
! Cyc_Std_String_pa_struct _temp514; _temp514.tag= Cyc_Std_String_pa; _temp514.f1=(
  struct _tagged_arr) Cyc_Absynpp_qvar2string(( struct _tuple0*)(( struct Cyc_Core_Opt*)
! _check_null( d1->name))->v);{ void* _temp513[ 1u]={& _temp514}; Cyc_Std_aprintf(
  _tag_arr("declaration of struct %s discloses too much information", sizeof(
! unsigned char), 56u), _tag_arr( _temp513, sizeof( void*), 1u));}})); return 0;}
  return 1;} static int Cyc_Interface_incl_uniondecl( struct Cyc_Absyn_Uniondecl*
  d0, struct Cyc_Absyn_Uniondecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Uniondecl*
! _temp515= Cyc_Tcdecl_merge_uniondecl( d0, d1, 0, msg); if( _temp515 ==  0){
! return 0;} if(( struct Cyc_Absyn_Uniondecl*) d0 !=  _temp515){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp517; _temp517.tag=
! Cyc_Std_String_pa; _temp517.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
  struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( d1->name))->v);{ void*
! _temp516[ 1u]={& _temp517}; Cyc_Std_aprintf( _tag_arr("declaration of union %s discloses too much information",
! sizeof( unsigned char), 55u), _tag_arr( _temp516, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_tuniondecl( struct Cyc_Absyn_Tuniondecl*
  d0, struct Cyc_Absyn_Tuniondecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Tuniondecl*
! _temp518= Cyc_Tcdecl_merge_tuniondecl( d0, d1, 0, msg); if( _temp518 ==  0){
! return 0;} if(( struct Cyc_Absyn_Tuniondecl*) d0 !=  _temp518){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp520; _temp520.tag=
! Cyc_Std_String_pa; _temp520.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp519[ 1u]={& _temp520}; Cyc_Std_aprintf( _tag_arr("declaration of tunion %s discloses too much information",
! sizeof( unsigned char), 56u), _tag_arr( _temp519, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_enumdecl( struct Cyc_Absyn_Enumdecl*
  d0, struct Cyc_Absyn_Enumdecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Enumdecl*
! _temp521= Cyc_Tcdecl_merge_enumdecl( d0, d1, 0, msg); if( _temp521 ==  0){
! return 0;} if(( struct Cyc_Absyn_Enumdecl*) d0 !=  _temp521){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp523; _temp523.tag=
! Cyc_Std_String_pa; _temp523.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp522[ 1u]={& _temp523}; Cyc_Std_aprintf( _tag_arr("declaration of enum %s discloses too much information",
! sizeof( unsigned char), 54u), _tag_arr( _temp522, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_vardecl( struct Cyc_Absyn_Vardecl*
  d0, struct Cyc_Absyn_Vardecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Vardecl*
! _temp524= Cyc_Tcdecl_merge_vardecl( d0, d1, 0, msg); if( _temp524 ==  0){ return
! 0;} if(( struct Cyc_Absyn_Vardecl*) d0 !=  _temp524){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp526; _temp526.tag=
! Cyc_Std_String_pa; _temp526.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp525[ 1u]={& _temp526}; Cyc_Std_aprintf( _tag_arr("declaration of variable %s discloses too much information",
! sizeof( unsigned char), 58u), _tag_arr( _temp525, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_typedefdecl( struct Cyc_Absyn_Typedefdecl*
  d0, struct Cyc_Absyn_Typedefdecl* d1, struct _tagged_arr* msg){ struct Cyc_Absyn_Typedefdecl*
! _temp527= Cyc_Tcdecl_merge_typedefdecl( d0, d1, 0, msg); if( _temp527 ==  0){
! return 0;} if(( struct Cyc_Absyn_Typedefdecl*) d0 !=  _temp527){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp529; _temp529.tag=
! Cyc_Std_String_pa; _temp529.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( d1->name);{
! void* _temp528[ 1u]={& _temp529}; Cyc_Std_aprintf( _tag_arr("declaration of typedef %s discloses too much information",
! sizeof( unsigned char), 57u), _tag_arr( _temp528, sizeof( void*), 1u));}}));
  return 0;} return 1;} static int Cyc_Interface_incl_xtunionfielddecl( struct Cyc_Tcdecl_Xtunionfielddecl*
  d0, struct Cyc_Tcdecl_Xtunionfielddecl* d1, struct _tagged_arr* msg){ struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp530= Cyc_Tcdecl_merge_xtunionfielddecl( d0, d1, 0, msg); if( _temp530 ==  0){
! return 0;} if(( struct Cyc_Tcdecl_Xtunionfielddecl*) d0 !=  _temp530){ Cyc_Interface_check_err(
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp532; _temp532.tag=
! Cyc_Std_String_pa; _temp532.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
! d1->field)->name);{ void* _temp531[ 1u]={& _temp532}; Cyc_Std_aprintf( _tag_arr("declaration of xtunionfield %s discloses too much information",
! sizeof( unsigned char), 62u), _tag_arr( _temp531, sizeof( void*), 1u));}}));
  return 0;} return 1;} struct Cyc_Core_Opt* Cyc_Interface_compat_merge_dict(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict*
  excl, void**(* merge_f)( void**, void**, struct Cyc_Position_Segment*, struct
  _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg); static int Cyc_Interface_incl_ienv(
  struct Cyc_Interface_Ienv* ie1, struct Cyc_Interface_Ienv* ie2, struct
! _tagged_arr* msg){ int _temp533=(( int(*)( struct Cyc_Dict_Dict* dic1, struct
  Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Absyn_Structdecl*, struct Cyc_Absyn_Structdecl*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_incl_dict)(
  ie1->structdecls, ie2->structdecls, Cyc_Interface_incl_structdecl, _tag_arr("struct",
! sizeof( unsigned char), 7u), msg); int _temp534=(( int(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Absyn_Uniondecl*,
  struct Cyc_Absyn_Uniondecl*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_incl_dict)( ie1->uniondecls, ie2->uniondecls,
  Cyc_Interface_incl_uniondecl, _tag_arr("union", sizeof( unsigned char), 6u), msg);
! int _temp535=(( int(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2,
  int(* incl_f)( struct Cyc_Absyn_Tuniondecl*, struct Cyc_Absyn_Tuniondecl*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_incl_dict)(
  ie1->tuniondecls, ie2->tuniondecls, Cyc_Interface_incl_tuniondecl, _tag_arr("tunion",
! sizeof( unsigned char), 7u), msg); int _temp536=(( int(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Absyn_Enumdecl*,
  struct Cyc_Absyn_Enumdecl*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_incl_dict)( ie1->enumdecls, ie2->enumdecls, Cyc_Interface_incl_enumdecl,
! _tag_arr("enum", sizeof( unsigned char), 5u), msg); int _temp537=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict*
  excl, struct Cyc_Absyn_Typedefdecl*(* merge_f)( struct Cyc_Absyn_Typedefdecl*,
  struct Cyc_Absyn_Typedefdecl*, struct Cyc_Position_Segment*, struct _tagged_arr*),
***************
*** 1563,1806 ****
  ie1->typedefdecls, ie2->typedefdecls,(( struct Cyc_Dict_Dict*(*)( int(* cmp)(
  struct _tagged_arr*, struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_strptrcmp),
  Cyc_Tcdecl_merge_typedefdecl, _tag_arr("typedef", sizeof( unsigned char), 8u),
! msg) !=  0; int _temp541=(( int(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, int(* incl_f)( struct Cyc_Absyn_Vardecl*, struct Cyc_Absyn_Vardecl*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_incl_dict)(
  ie1->vardecls, ie2->vardecls, Cyc_Interface_incl_vardecl, _tag_arr("variable",
! sizeof( unsigned char), 9u), msg); int _temp542=(( int(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Tcdecl_Xtunionfielddecl*,
  struct Cyc_Tcdecl_Xtunionfielddecl*, struct _tagged_arr*), struct _tagged_arr t,
  struct _tagged_arr* msg)) Cyc_Interface_incl_dict)( ie1->xtunionfielddecls, ie2->xtunionfielddecls,
  Cyc_Interface_incl_xtunionfielddecl, _tag_arr("xtunionfield", sizeof(
! unsigned char), 13u), msg); return((((( _temp536? _temp537: 0)? _temp538: 0)?
! _temp539: 0)? _temp540: 0)? _temp541: 0)? _temp542: 0;} struct _tuple13{ int f1;
  struct Cyc_Dict_Dict* f2; struct _tagged_arr* f3; } ; static void Cyc_Interface_incl_ns_f(
  struct _tuple13* env, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie1){
! struct _tuple13 _temp545; struct _tagged_arr* _temp546; struct Cyc_Dict_Dict*
! _temp548; int _temp550; int* _temp552; struct _tuple13* _temp543= env; _temp545=*
! _temp543; _LL551: _temp550= _temp545.f1; _temp552=( int*)&(* _temp543).f1; goto
! _LL549; _LL549: _temp548= _temp545.f2; goto _LL547; _LL547: _temp546= _temp545.f3;
! goto _LL544; _LL544: { struct Cyc_Interface_Ienv* ie2;{ struct _handler_cons
! _temp553; _push_handler(& _temp553);{ int _temp555= 0; if( setjmp( _temp553.handler)){
! _temp555= 1;} if( ! _temp555){ ie2=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict*
! d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp548, ns);; _pop_handler();}
! else{ void* _temp554=( void*) _exn_thrown; void* _temp557= _temp554; _LL559: if(
! _temp557 ==  Cyc_Dict_Absent){ goto _LL560;} else{ goto _LL561;} _LL561: goto
! _LL562; _LL560: ie2= Cyc_Interface_lazy_new_ienv(); goto _LL558; _LL562:( void)
! _throw( _temp557); _LL558:;}}} if( ! Cyc_Interface_incl_ienv( ie1, ie2, _temp546)){*
! _temp552= 0;}}} static int Cyc_Interface_incl_ns( struct Cyc_Dict_Dict* dic1,
! struct Cyc_Dict_Dict* dic2, struct _tagged_arr* msg){ struct _tuple13 _temp563=({
! struct _tuple13 _temp564; _temp564.f1= 1; _temp564.f2= dic2; _temp564.f3= msg;
! _temp564;});(( void(*)( void(* f)( struct _tuple13*, struct Cyc_List_List*,
  struct Cyc_Interface_Ienv*), struct _tuple13* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)(
! Cyc_Interface_incl_ns_f,& _temp563, dic1); return _temp563.f1;} int Cyc_Interface_is_subinterface(
  struct Cyc_Interface_I* i1, struct Cyc_Interface_I* i2, struct _tuple3* info){
! struct _handler_cons _temp565; _push_handler(& _temp565);{ int _temp567= 0; if(
! setjmp( _temp565.handler)){ _temp567= 1;} if( ! _temp567){{ int _temp568= 1;
! struct _tagged_arr* msg= 0; if( info !=  0){ msg=({ struct _tagged_arr* _temp569=(
! struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp569[ 0]=(
! struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp572; _temp572.tag=
! Cyc_Std_String_pa; _temp572.f1=( struct _tagged_arr)(*(( struct _tuple3*)
! _check_null( info))).f2;{ struct Cyc_Std_String_pa_struct _temp571; _temp571.tag=
! Cyc_Std_String_pa; _temp571.f1=( struct _tagged_arr)(*(( struct _tuple3*)
! _check_null( info))).f1;{ void* _temp570[ 2u]={& _temp571,& _temp572}; Cyc_Std_aprintf(
  _tag_arr("checking inclusion of %s exports into %s exports,", sizeof(
! unsigned char), 50u), _tag_arr( _temp570, sizeof( void*), 2u));}}}); _temp569;});}
! if( ! Cyc_Interface_incl_ns( i1->exports, i2->exports, msg)){ _temp568= 0;} if(
! info !=  0){ msg=({ struct _tagged_arr* _temp573=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp573[ 0]=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp576; _temp576.tag= Cyc_Std_String_pa;
! _temp576.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f1;{
! struct Cyc_Std_String_pa_struct _temp575; _temp575.tag= Cyc_Std_String_pa;
! _temp575.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f2;{
! void* _temp574[ 2u]={& _temp575,& _temp576}; Cyc_Std_aprintf( _tag_arr("checking inclusion of %s imports into %s imports,",
! sizeof( unsigned char), 50u), _tag_arr( _temp574, sizeof( void*), 2u));}}});
! _temp573;});} if( ! Cyc_Interface_incl_ns( i2->imports, i1->imports, msg)){
! _temp568= 0;}{ int _temp577= _temp568; _npop_handler( 0u); return _temp577;}};
! _pop_handler();} else{ void* _temp566=( void*) _exn_thrown; void* _temp579=
! _temp566; _LL581: if( _temp579 ==  Cyc_Tcdecl_Incompatible){ goto _LL582;} else{
! goto _LL583;} _LL583: goto _LL584; _LL582: return 0; _LL584:( void) _throw(
! _temp579); _LL580:;}}} struct _tuple14{ int f1; struct Cyc_Dict_Dict* f2; struct
  Cyc_Dict_Dict* f3; struct Cyc_Dict_Dict* f4; void**(* f5)( void**, void**,
  struct Cyc_Position_Segment*, struct _tagged_arr*); struct _tagged_arr f6;
  struct _tagged_arr* f7; } ; void Cyc_Interface_compat_merge_dict_f( struct
! _tuple14* env, struct _tagged_arr* x, void** y2){ struct _tuple14 _temp587;
! struct _tagged_arr* _temp588; struct _tagged_arr _temp590; void**(* _temp592)(
  void**, void**, struct Cyc_Position_Segment*, struct _tagged_arr*); struct Cyc_Dict_Dict*
! _temp594; struct Cyc_Dict_Dict* _temp596; struct Cyc_Dict_Dict* _temp598; struct
! Cyc_Dict_Dict** _temp600; int _temp601; int* _temp603; struct _tuple14* _temp585=
! env; _temp587=* _temp585; _LL602: _temp601= _temp587.f1; _temp603=( int*)&(*
! _temp585).f1; goto _LL599; _LL599: _temp598= _temp587.f2; _temp600=( struct Cyc_Dict_Dict**)&(*
! _temp585).f2; goto _LL597; _LL597: _temp596= _temp587.f3; goto _LL595; _LL595:
! _temp594= _temp587.f4; goto _LL593; _LL593: _temp592= _temp587.f5; goto _LL591;
! _LL591: _temp590= _temp587.f6; goto _LL589; _LL589: _temp588= _temp587.f7; goto
! _LL586; _LL586: { void** y;{ struct _handler_cons _temp604; _push_handler(&
! _temp604);{ int _temp606= 0; if( setjmp( _temp604.handler)){ _temp606= 1;} if( !
! _temp606){{ void** _temp607=(( void**(*)( struct Cyc_Dict_Dict* d, struct
! _tagged_arr* k)) Cyc_Dict_lookup)( _temp596, x); void** _temp608= _temp592(
! _temp607, y2, 0, _temp588); if( !(( unsigned int) _temp608)){* _temp603= 0;
! _npop_handler( 0u); return;} y=( void**) _check_null( _temp608);}; _pop_handler();}
! else{ void* _temp605=( void*) _exn_thrown; void* _temp610= _temp605; _LL612: if(
! _temp610 ==  Cyc_Dict_Absent){ goto _LL613;} else{ goto _LL614;} _LL614: goto
! _LL615; _LL613: y= y2; goto _LL611; _LL615:( void) _throw( _temp610); _LL611:;}}}{
! struct _handler_cons _temp616; _push_handler(& _temp616);{ int _temp618= 0; if(
! setjmp( _temp616.handler)){ _temp618= 1;} if( ! _temp618){{ void** _temp619=((
  void**(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)(
! _temp594, x); void** _temp620= _temp592( _temp619, y, 0, _temp588); if( _temp620
! != ( void**) _temp619){ if(( unsigned int) _temp620){ Cyc_Interface_check_err(
! _temp588,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp623;
! _temp623.tag= Cyc_Std_String_pa; _temp623.f1=( struct _tagged_arr)* x;{ struct
! Cyc_Std_String_pa_struct _temp622; _temp622.tag= Cyc_Std_String_pa; _temp622.f1=(
! struct _tagged_arr) _temp590;{ void* _temp621[ 2u]={& _temp622,& _temp623}; Cyc_Std_aprintf(
  _tag_arr("abstract %s %s is being imported as non-abstract", sizeof(
! unsigned char), 49u), _tag_arr( _temp621, sizeof( void*), 2u));}}}));}* _temp603=
! 0;}}; _pop_handler();} else{ void* _temp617=( void*) _exn_thrown; void* _temp625=
! _temp617; _LL627: if( _temp625 ==  Cyc_Dict_Absent){ goto _LL628;} else{ goto
! _LL629;} _LL629: goto _LL630; _LL628: if(* _temp603){* _temp600=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, void** v)) Cyc_Dict_insert)(*
! _temp600, x, y);} goto _LL626; _LL630:( void) _throw( _temp625); _LL626:;}}}}}
  struct Cyc_Core_Opt* Cyc_Interface_compat_merge_dict( struct Cyc_Dict_Dict* dic1,
  struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict* excl, void**(* merge_f)( void**,
  void**, struct Cyc_Position_Segment*, struct _tagged_arr*), struct _tagged_arr t,
! struct _tagged_arr* msg){ struct _tuple14 _temp631=({ struct _tuple14 _temp633;
! _temp633.f1= 1; _temp633.f2= dic1; _temp633.f3= dic1; _temp633.f4= excl;
! _temp633.f5= merge_f; _temp633.f6= t; _temp633.f7= msg; _temp633;});(( void(*)(
  void(* f)( struct _tuple14*, struct _tagged_arr*, void**), struct _tuple14* env,
  struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_compat_merge_dict_f,&
! _temp631, dic2); if( _temp631.f1){ return({ struct Cyc_Core_Opt* _temp632=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp632->v=(
! void*) _temp631.f2; _temp632;});} else{ return 0;}} struct Cyc_Interface_Ienv*
  Cyc_Interface_compat_merge_ienv( struct Cyc_Interface_Ienv* ie1, struct Cyc_Interface_Ienv*
  ie2, struct Cyc_Interface_Ienv* iexcl, struct _tagged_arr* msg){ struct Cyc_Core_Opt*
! _temp634=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Structdecl*(* merge_f)(
  struct Cyc_Absyn_Structdecl*, struct Cyc_Absyn_Structdecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->structdecls, ie2->structdecls, iexcl->structdecls, Cyc_Tcdecl_merge_structdecl,
  _tag_arr("struct", sizeof( unsigned char), 7u), msg); struct Cyc_Core_Opt*
! _temp635=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Uniondecl*(* merge_f)( struct
  Cyc_Absyn_Uniondecl*, struct Cyc_Absyn_Uniondecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->uniondecls, ie2->uniondecls, iexcl->uniondecls, Cyc_Tcdecl_merge_uniondecl,
  _tag_arr("union", sizeof( unsigned char), 6u), msg); struct Cyc_Core_Opt*
! _temp636=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Tuniondecl*(* merge_f)(
  struct Cyc_Absyn_Tuniondecl*, struct Cyc_Absyn_Tuniondecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->tuniondecls, ie2->tuniondecls, iexcl->tuniondecls, Cyc_Tcdecl_merge_tuniondecl,
  _tag_arr("tunion", sizeof( unsigned char), 7u), msg); struct Cyc_Core_Opt*
! _temp637=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Enumdecl*(* merge_f)( struct
  Cyc_Absyn_Enumdecl*, struct Cyc_Absyn_Enumdecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->enumdecls, ie2->enumdecls, iexcl->enumdecls, Cyc_Tcdecl_merge_enumdecl,
  _tag_arr("enum", sizeof( unsigned char), 5u), msg); struct Cyc_Core_Opt*
! _temp638=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Typedefdecl*(* merge_f)(
  struct Cyc_Absyn_Typedefdecl*, struct Cyc_Absyn_Typedefdecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->typedefdecls, ie2->typedefdecls, iexcl->typedefdecls, Cyc_Tcdecl_merge_typedefdecl,
  _tag_arr("typedef", sizeof( unsigned char), 8u), msg); struct Cyc_Core_Opt*
! _temp639=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Vardecl*(* merge_f)( struct
  Cyc_Absyn_Vardecl*, struct Cyc_Absyn_Vardecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->vardecls, ie2->vardecls, iexcl->vardecls, Cyc_Tcdecl_merge_vardecl,
  _tag_arr("variable", sizeof( unsigned char), 9u), msg); struct Cyc_Core_Opt*
! _temp640=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Tcdecl_Xtunionfielddecl*(* merge_f)(
  struct Cyc_Tcdecl_Xtunionfielddecl*, struct Cyc_Tcdecl_Xtunionfielddecl*, struct
  Cyc_Position_Segment*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)( ie1->xtunionfielddecls, ie2->xtunionfielddecls,
  iexcl->xtunionfielddecls, Cyc_Tcdecl_merge_xtunionfielddecl, _tag_arr("xtunionfield",
! sizeof( unsigned char), 13u), msg); if(((((( !(( unsigned int) _temp634)? 1: !((
! unsigned int) _temp635))? 1: !(( unsigned int) _temp636))? 1: !(( unsigned int)
! _temp637))? 1: !(( unsigned int) _temp638))? 1: !(( unsigned int) _temp639))? 1:
! !(( unsigned int) _temp640)){ return 0;} else{ return({ struct Cyc_Interface_Ienv*
! _temp641=( struct Cyc_Interface_Ienv*) _cycalloc( sizeof( struct Cyc_Interface_Ienv));
! _temp641->structdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp634))->v; _temp641->uniondecls=( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( _temp635))->v; _temp641->tuniondecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp636))->v; _temp641->enumdecls=(
! struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp637))->v;
! _temp641->typedefdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp638))->v; _temp641->vardecls=( struct Cyc_Dict_Dict*)(( struct
! Cyc_Core_Opt*) _check_null( _temp639))->v; _temp641->xtunionfielddecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp640))->v; _temp641;});}}
  struct _tuple15{ int f1; struct Cyc_Dict_Dict* f2; struct Cyc_Dict_Dict* f3;
  struct Cyc_Dict_Dict* f4; struct _tagged_arr* f5; } ; void Cyc_Interface_compat_merge_ns_f(
  struct _tuple15* env, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie2){
! struct _tuple15 _temp644; struct _tagged_arr* _temp645; struct Cyc_Dict_Dict*
! _temp647; struct Cyc_Dict_Dict* _temp649; struct Cyc_Dict_Dict* _temp651; struct
! Cyc_Dict_Dict** _temp653; int _temp654; int* _temp656; struct _tuple15* _temp642=
! env; _temp644=* _temp642; _LL655: _temp654= _temp644.f1; _temp656=( int*)&(*
! _temp642).f1; goto _LL652; _LL652: _temp651= _temp644.f2; _temp653=( struct Cyc_Dict_Dict**)&(*
! _temp642).f2; goto _LL650; _LL650: _temp649= _temp644.f3; goto _LL648; _LL648:
! _temp647= _temp644.f4; goto _LL646; _LL646: _temp645= _temp644.f5; goto _LL643;
! _LL643: { struct Cyc_Interface_Ienv* ie1; struct Cyc_Interface_Ienv* iexcl;{
! struct _handler_cons _temp657; _push_handler(& _temp657);{ int _temp659= 0; if(
! setjmp( _temp657.handler)){ _temp659= 1;} if( ! _temp659){ iexcl=(( struct Cyc_Interface_Ienv*(*)(
! struct Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp647,
! ns);; _pop_handler();} else{ void* _temp658=( void*) _exn_thrown; void* _temp661=
! _temp658; _LL663: if( _temp661 ==  Cyc_Dict_Absent){ goto _LL664;} else{ goto
! _LL665;} _LL665: goto _LL666; _LL664: iexcl= Cyc_Interface_lazy_new_ienv(); goto
! _LL662; _LL666:( void) _throw( _temp661); _LL662:;}}}{ struct _handler_cons
! _temp667; _push_handler(& _temp667);{ int _temp669= 0; if( setjmp( _temp667.handler)){
! _temp669= 1;} if( ! _temp669){ ie1=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict*
! d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp649, ns);{ struct Cyc_Interface_Ienv*
! _temp670= Cyc_Interface_compat_merge_ienv( Cyc_Interface_lazy_new_ienv(), ie1,
! iexcl, _temp645); if( _temp670 ==  0){* _temp656= 0; _npop_handler( 0u); return;}
! ie1=( struct Cyc_Interface_Ienv*) _check_null( _temp670);}; _pop_handler();}
! else{ void* _temp668=( void*) _exn_thrown; void* _temp672= _temp668; _LL674: if(
! _temp672 ==  Cyc_Dict_Absent){ goto _LL675;} else{ goto _LL676;} _LL676: goto
! _LL677; _LL675: ie1= Cyc_Interface_lazy_new_ienv(); goto _LL673; _LL677:( void)
! _throw( _temp672); _LL673:;}}}{ struct Cyc_Interface_Ienv* _temp678= Cyc_Interface_compat_merge_ienv(
! ie1, ie2, iexcl, _temp645); if( _temp678 ==  0){* _temp656= 0;} else{ if(*
! _temp656){* _temp653=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d,
  struct Cyc_List_List* k, struct Cyc_Interface_Ienv* v)) Cyc_Dict_insert)(*
! _temp653, ns,( struct Cyc_Interface_Ienv*) _check_null( _temp678));}}}}} struct
  Cyc_Core_Opt* Cyc_Interface_compat_merge_ns( struct Cyc_Dict_Dict* dic1, struct
  Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict* excl, struct _tagged_arr* msg){
  struct Cyc_Dict_Dict* d=(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct Cyc_List_List*,
  struct Cyc_List_List*))) Cyc_Dict_empty)( Cyc_Absyn_varlist_cmp); struct
! _tuple15 _temp679=({ struct _tuple15 _temp681; _temp681.f1= 1; _temp681.f2= d;
! _temp681.f3= dic1; _temp681.f4= excl; _temp681.f5= msg; _temp681;});(( void(*)(
  void(* f)( struct _tuple15*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct _tuple15* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_compat_merge_ns_f,&
! _temp679, dic2); if( _temp679.f1){ return({ struct Cyc_Core_Opt* _temp680=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp680->v=(
! void*) _temp679.f2; _temp680;});} else{ return 0;}} struct _tuple16{ int f1;
  struct Cyc_Dict_Dict* f2; struct Cyc_Dict_Dict* f3; struct _tagged_arr f4;
  struct _tagged_arr* f5; } ; void Cyc_Interface_disj_merge_dict_f( struct
! _tuple16* env, struct _tagged_arr* x, void* y){ struct _tuple16 _temp684; struct
! _tagged_arr* _temp685; struct _tagged_arr _temp687; struct Cyc_Dict_Dict*
! _temp689; struct Cyc_Dict_Dict* _temp691; struct Cyc_Dict_Dict** _temp693; int
! _temp694; int* _temp696; struct _tuple16* _temp682= env; _temp684=* _temp682;
! _LL695: _temp694= _temp684.f1; _temp696=( int*)&(* _temp682).f1; goto _LL692;
! _LL692: _temp691= _temp684.f2; _temp693=( struct Cyc_Dict_Dict**)&(* _temp682).f2;
! goto _LL690; _LL690: _temp689= _temp684.f3; goto _LL688; _LL688: _temp687=
! _temp684.f4; goto _LL686; _LL686: _temp685= _temp684.f5; goto _LL683; _LL683:
  if((( int(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_member)(
! _temp689, x)){ Cyc_Interface_check_err( _temp685,( struct _tagged_arr)({ struct
! Cyc_Std_String_pa_struct _temp699; _temp699.tag= Cyc_Std_String_pa; _temp699.f1=(
! struct _tagged_arr)* x;{ struct Cyc_Std_String_pa_struct _temp698; _temp698.tag=
! Cyc_Std_String_pa; _temp698.f1=( struct _tagged_arr) _temp687;{ void* _temp697[
! 2u]={& _temp698,& _temp699}; Cyc_Std_aprintf( _tag_arr("%s %s is exported more than once",
! sizeof( unsigned char), 33u), _tag_arr( _temp697, sizeof( void*), 2u));}}}));*
! _temp696= 0;} else{ if(* _temp696){* _temp693=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, void* v)) Cyc_Dict_insert)(*
! _temp693, x, y);}}} struct Cyc_Core_Opt* Cyc_Interface_disj_merge_dict( struct
  Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t, struct
! _tagged_arr* msg){ struct _tuple16 _temp700=({ struct _tuple16 _temp702;
! _temp702.f1= 1; _temp702.f2= dic1; _temp702.f3= dic1; _temp702.f4= t; _temp702.f5=
! msg; _temp702;});(( void(*)( void(* f)( struct _tuple16*, struct _tagged_arr*,
  void*), struct _tuple16* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_disj_merge_dict_f,&
! _temp700, dic2); if( _temp700.f1){ return({ struct Cyc_Core_Opt* _temp701=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp701->v=(
! void*) _temp700.f2; _temp701;});} else{ return 0;}} struct Cyc_Interface_Ienv*
  Cyc_Interface_disj_merge_ienv( struct Cyc_Interface_Ienv* ie1, struct Cyc_Interface_Ienv*
! ie2, struct _tagged_arr* msg){ struct Cyc_Core_Opt* _temp703=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict*
  excl, struct Cyc_Absyn_Structdecl*(* merge_f)( struct Cyc_Absyn_Structdecl*,
  struct Cyc_Absyn_Structdecl*, struct Cyc_Position_Segment*, struct _tagged_arr*),
--- 1557,1800 ----
  ie1->typedefdecls, ie2->typedefdecls,(( struct Cyc_Dict_Dict*(*)( int(* cmp)(
  struct _tagged_arr*, struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_strptrcmp),
  Cyc_Tcdecl_merge_typedefdecl, _tag_arr("typedef", sizeof( unsigned char), 8u),
! msg) !=  0; int _temp538=(( int(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, int(* incl_f)( struct Cyc_Absyn_Vardecl*, struct Cyc_Absyn_Vardecl*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_incl_dict)(
  ie1->vardecls, ie2->vardecls, Cyc_Interface_incl_vardecl, _tag_arr("variable",
! sizeof( unsigned char), 9u), msg); int _temp539=(( int(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, int(* incl_f)( struct Cyc_Tcdecl_Xtunionfielddecl*,
  struct Cyc_Tcdecl_Xtunionfielddecl*, struct _tagged_arr*), struct _tagged_arr t,
  struct _tagged_arr* msg)) Cyc_Interface_incl_dict)( ie1->xtunionfielddecls, ie2->xtunionfielddecls,
  Cyc_Interface_incl_xtunionfielddecl, _tag_arr("xtunionfield", sizeof(
! unsigned char), 13u), msg); return((((( _temp533? _temp534: 0)? _temp535: 0)?
! _temp536: 0)? _temp537: 0)? _temp538: 0)? _temp539: 0;} struct _tuple13{ int f1;
  struct Cyc_Dict_Dict* f2; struct _tagged_arr* f3; } ; static void Cyc_Interface_incl_ns_f(
  struct _tuple13* env, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie1){
! struct _tuple13 _temp542; struct _tagged_arr* _temp543; struct Cyc_Dict_Dict*
! _temp545; int _temp547; int* _temp549; struct _tuple13* _temp540= env; _temp542=*
! _temp540; _LL548: _temp547= _temp542.f1; _temp549=( int*)&(* _temp540).f1; goto
! _LL546; _LL546: _temp545= _temp542.f2; goto _LL544; _LL544: _temp543= _temp542.f3;
! goto _LL541; _LL541: { struct Cyc_Interface_Ienv* ie2;{ struct _handler_cons
! _temp550; _push_handler(& _temp550);{ int _temp552= 0; if( setjmp( _temp550.handler)){
! _temp552= 1;} if( ! _temp552){ ie2=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict*
! d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp545, ns);; _pop_handler();}
! else{ void* _temp551=( void*) _exn_thrown; void* _temp554= _temp551; _LL556: if(
! _temp554 ==  Cyc_Dict_Absent){ goto _LL557;} else{ goto _LL558;} _LL558: goto
! _LL559; _LL557: ie2= Cyc_Interface_lazy_new_ienv(); goto _LL555; _LL559:( void)
! _throw( _temp554); _LL555:;}}} if( ! Cyc_Interface_incl_ienv( ie1, ie2, _temp543)){*
! _temp549= 0;}}} static int Cyc_Interface_incl_ns( struct Cyc_Dict_Dict* dic1,
! struct Cyc_Dict_Dict* dic2, struct _tagged_arr* msg){ struct _tuple13 _temp560=({
! struct _tuple13 _temp561; _temp561.f1= 1; _temp561.f2= dic2; _temp561.f3= msg;
! _temp561;});(( void(*)( void(* f)( struct _tuple13*, struct Cyc_List_List*,
  struct Cyc_Interface_Ienv*), struct _tuple13* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)(
! Cyc_Interface_incl_ns_f,& _temp560, dic1); return _temp560.f1;} int Cyc_Interface_is_subinterface(
  struct Cyc_Interface_I* i1, struct Cyc_Interface_I* i2, struct _tuple3* info){
! struct _handler_cons _temp562; _push_handler(& _temp562);{ int _temp564= 0; if(
! setjmp( _temp562.handler)){ _temp564= 1;} if( ! _temp564){{ int _temp565= 1;
! struct _tagged_arr* msg= 0; if( info !=  0){ msg=({ struct _tagged_arr* _temp566=(
! struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp566[ 0]=(
! struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp569; _temp569.tag=
! Cyc_Std_String_pa; _temp569.f1=( struct _tagged_arr)(*(( struct _tuple3*)
! _check_null( info))).f2;{ struct Cyc_Std_String_pa_struct _temp568; _temp568.tag=
! Cyc_Std_String_pa; _temp568.f1=( struct _tagged_arr)(*(( struct _tuple3*)
! _check_null( info))).f1;{ void* _temp567[ 2u]={& _temp568,& _temp569}; Cyc_Std_aprintf(
  _tag_arr("checking inclusion of %s exports into %s exports,", sizeof(
! unsigned char), 50u), _tag_arr( _temp567, sizeof( void*), 2u));}}}); _temp566;});}
! if( ! Cyc_Interface_incl_ns( i1->exports, i2->exports, msg)){ _temp565= 0;} if(
! info !=  0){ msg=({ struct _tagged_arr* _temp570=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp570[ 0]=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp573; _temp573.tag= Cyc_Std_String_pa;
! _temp573.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f1;{
! struct Cyc_Std_String_pa_struct _temp572; _temp572.tag= Cyc_Std_String_pa;
! _temp572.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f2;{
! void* _temp571[ 2u]={& _temp572,& _temp573}; Cyc_Std_aprintf( _tag_arr("checking inclusion of %s imports into %s imports,",
! sizeof( unsigned char), 50u), _tag_arr( _temp571, sizeof( void*), 2u));}}});
! _temp570;});} if( ! Cyc_Interface_incl_ns( i2->imports, i1->imports, msg)){
! _temp565= 0;}{ int _temp574= _temp565; _npop_handler( 0u); return _temp574;}};
! _pop_handler();} else{ void* _temp563=( void*) _exn_thrown; void* _temp576=
! _temp563; _LL578: if( _temp576 ==  Cyc_Tcdecl_Incompatible){ goto _LL579;} else{
! goto _LL580;} _LL580: goto _LL581; _LL579: return 0; _LL581:( void) _throw(
! _temp576); _LL577:;}}} struct _tuple14{ int f1; struct Cyc_Dict_Dict* f2; struct
  Cyc_Dict_Dict* f3; struct Cyc_Dict_Dict* f4; void**(* f5)( void**, void**,
  struct Cyc_Position_Segment*, struct _tagged_arr*); struct _tagged_arr f6;
  struct _tagged_arr* f7; } ; void Cyc_Interface_compat_merge_dict_f( struct
! _tuple14* env, struct _tagged_arr* x, void** y2){ struct _tuple14 _temp584;
! struct _tagged_arr* _temp585; struct _tagged_arr _temp587; void**(* _temp589)(
  void**, void**, struct Cyc_Position_Segment*, struct _tagged_arr*); struct Cyc_Dict_Dict*
! _temp591; struct Cyc_Dict_Dict* _temp593; struct Cyc_Dict_Dict* _temp595; struct
! Cyc_Dict_Dict** _temp597; int _temp598; int* _temp600; struct _tuple14* _temp582=
! env; _temp584=* _temp582; _LL599: _temp598= _temp584.f1; _temp600=( int*)&(*
! _temp582).f1; goto _LL596; _LL596: _temp595= _temp584.f2; _temp597=( struct Cyc_Dict_Dict**)&(*
! _temp582).f2; goto _LL594; _LL594: _temp593= _temp584.f3; goto _LL592; _LL592:
! _temp591= _temp584.f4; goto _LL590; _LL590: _temp589= _temp584.f5; goto _LL588;
! _LL588: _temp587= _temp584.f6; goto _LL586; _LL586: _temp585= _temp584.f7; goto
! _LL583; _LL583: { void** y;{ struct _handler_cons _temp601; _push_handler(&
! _temp601);{ int _temp603= 0; if( setjmp( _temp601.handler)){ _temp603= 1;} if( !
! _temp603){{ void** _temp604=(( void**(*)( struct Cyc_Dict_Dict* d, struct
! _tagged_arr* k)) Cyc_Dict_lookup)( _temp593, x); void** _temp605= _temp589(
! _temp604, y2, 0, _temp585); if( !(( unsigned int) _temp605)){* _temp600= 0;
! _npop_handler( 0u); return;} y=( void**) _check_null( _temp605);}; _pop_handler();}
! else{ void* _temp602=( void*) _exn_thrown; void* _temp607= _temp602; _LL609: if(
! _temp607 ==  Cyc_Dict_Absent){ goto _LL610;} else{ goto _LL611;} _LL611: goto
! _LL612; _LL610: y= y2; goto _LL608; _LL612:( void) _throw( _temp607); _LL608:;}}}{
! struct _handler_cons _temp613; _push_handler(& _temp613);{ int _temp615= 0; if(
! setjmp( _temp613.handler)){ _temp615= 1;} if( ! _temp615){{ void** _temp616=((
  void**(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup)(
! _temp591, x); void** _temp617= _temp589( _temp616, y, 0, _temp585); if( _temp617
! != ( void**) _temp616){ if(( unsigned int) _temp617){ Cyc_Interface_check_err(
! _temp585,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp620;
! _temp620.tag= Cyc_Std_String_pa; _temp620.f1=( struct _tagged_arr)* x;{ struct
! Cyc_Std_String_pa_struct _temp619; _temp619.tag= Cyc_Std_String_pa; _temp619.f1=(
! struct _tagged_arr) _temp587;{ void* _temp618[ 2u]={& _temp619,& _temp620}; Cyc_Std_aprintf(
  _tag_arr("abstract %s %s is being imported as non-abstract", sizeof(
! unsigned char), 49u), _tag_arr( _temp618, sizeof( void*), 2u));}}}));}* _temp600=
! 0;}}; _pop_handler();} else{ void* _temp614=( void*) _exn_thrown; void* _temp622=
! _temp614; _LL624: if( _temp622 ==  Cyc_Dict_Absent){ goto _LL625;} else{ goto
! _LL626;} _LL626: goto _LL627; _LL625: if(* _temp600){* _temp597=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, void** v)) Cyc_Dict_insert)(*
! _temp597, x, y);} goto _LL623; _LL627:( void) _throw( _temp622); _LL623:;}}}}}
  struct Cyc_Core_Opt* Cyc_Interface_compat_merge_dict( struct Cyc_Dict_Dict* dic1,
  struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict* excl, void**(* merge_f)( void**,
  void**, struct Cyc_Position_Segment*, struct _tagged_arr*), struct _tagged_arr t,
! struct _tagged_arr* msg){ struct _tuple14 _temp628=({ struct _tuple14 _temp630;
! _temp630.f1= 1; _temp630.f2= dic1; _temp630.f3= dic1; _temp630.f4= excl;
! _temp630.f5= merge_f; _temp630.f6= t; _temp630.f7= msg; _temp630;});(( void(*)(
  void(* f)( struct _tuple14*, struct _tagged_arr*, void**), struct _tuple14* env,
  struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_compat_merge_dict_f,&
! _temp628, dic2); if( _temp628.f1){ return({ struct Cyc_Core_Opt* _temp629=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp629->v=(
! void*) _temp628.f2; _temp629;});} else{ return 0;}} struct Cyc_Interface_Ienv*
  Cyc_Interface_compat_merge_ienv( struct Cyc_Interface_Ienv* ie1, struct Cyc_Interface_Ienv*
  ie2, struct Cyc_Interface_Ienv* iexcl, struct _tagged_arr* msg){ struct Cyc_Core_Opt*
! _temp631=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Structdecl*(* merge_f)(
  struct Cyc_Absyn_Structdecl*, struct Cyc_Absyn_Structdecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->structdecls, ie2->structdecls, iexcl->structdecls, Cyc_Tcdecl_merge_structdecl,
  _tag_arr("struct", sizeof( unsigned char), 7u), msg); struct Cyc_Core_Opt*
! _temp632=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Uniondecl*(* merge_f)( struct
  Cyc_Absyn_Uniondecl*, struct Cyc_Absyn_Uniondecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->uniondecls, ie2->uniondecls, iexcl->uniondecls, Cyc_Tcdecl_merge_uniondecl,
  _tag_arr("union", sizeof( unsigned char), 6u), msg); struct Cyc_Core_Opt*
! _temp633=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Tuniondecl*(* merge_f)(
  struct Cyc_Absyn_Tuniondecl*, struct Cyc_Absyn_Tuniondecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->tuniondecls, ie2->tuniondecls, iexcl->tuniondecls, Cyc_Tcdecl_merge_tuniondecl,
  _tag_arr("tunion", sizeof( unsigned char), 7u), msg); struct Cyc_Core_Opt*
! _temp634=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Enumdecl*(* merge_f)( struct
  Cyc_Absyn_Enumdecl*, struct Cyc_Absyn_Enumdecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->enumdecls, ie2->enumdecls, iexcl->enumdecls, Cyc_Tcdecl_merge_enumdecl,
  _tag_arr("enum", sizeof( unsigned char), 5u), msg); struct Cyc_Core_Opt*
! _temp635=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Typedefdecl*(* merge_f)(
  struct Cyc_Absyn_Typedefdecl*, struct Cyc_Absyn_Typedefdecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->typedefdecls, ie2->typedefdecls, iexcl->typedefdecls, Cyc_Tcdecl_merge_typedefdecl,
  _tag_arr("typedef", sizeof( unsigned char), 8u), msg); struct Cyc_Core_Opt*
! _temp636=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Vardecl*(* merge_f)( struct
  Cyc_Absyn_Vardecl*, struct Cyc_Absyn_Vardecl*, struct Cyc_Position_Segment*,
  struct _tagged_arr*), struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)(
  ie1->vardecls, ie2->vardecls, iexcl->vardecls, Cyc_Tcdecl_merge_vardecl,
  _tag_arr("variable", sizeof( unsigned char), 9u), msg); struct Cyc_Core_Opt*
! _temp637=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Tcdecl_Xtunionfielddecl*(* merge_f)(
  struct Cyc_Tcdecl_Xtunionfielddecl*, struct Cyc_Tcdecl_Xtunionfielddecl*, struct
  Cyc_Position_Segment*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)( ie1->xtunionfielddecls, ie2->xtunionfielddecls,
  iexcl->xtunionfielddecls, Cyc_Tcdecl_merge_xtunionfielddecl, _tag_arr("xtunionfield",
! sizeof( unsigned char), 13u), msg); if(((((( !(( unsigned int) _temp631)? 1: !((
! unsigned int) _temp632))? 1: !(( unsigned int) _temp633))? 1: !(( unsigned int)
! _temp634))? 1: !(( unsigned int) _temp635))? 1: !(( unsigned int) _temp636))? 1:
! !(( unsigned int) _temp637)){ return 0;} else{ return({ struct Cyc_Interface_Ienv*
! _temp638=( struct Cyc_Interface_Ienv*) _cycalloc( sizeof( struct Cyc_Interface_Ienv));
! _temp638->structdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp631))->v; _temp638->uniondecls=( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( _temp632))->v; _temp638->tuniondecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp633))->v; _temp638->enumdecls=(
! struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp634))->v;
! _temp638->typedefdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp635))->v; _temp638->vardecls=( struct Cyc_Dict_Dict*)(( struct
! Cyc_Core_Opt*) _check_null( _temp636))->v; _temp638->xtunionfielddecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp637))->v; _temp638;});}}
  struct _tuple15{ int f1; struct Cyc_Dict_Dict* f2; struct Cyc_Dict_Dict* f3;
  struct Cyc_Dict_Dict* f4; struct _tagged_arr* f5; } ; void Cyc_Interface_compat_merge_ns_f(
  struct _tuple15* env, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie2){
! struct _tuple15 _temp641; struct _tagged_arr* _temp642; struct Cyc_Dict_Dict*
! _temp644; struct Cyc_Dict_Dict* _temp646; struct Cyc_Dict_Dict* _temp648; struct
! Cyc_Dict_Dict** _temp650; int _temp651; int* _temp653; struct _tuple15* _temp639=
! env; _temp641=* _temp639; _LL652: _temp651= _temp641.f1; _temp653=( int*)&(*
! _temp639).f1; goto _LL649; _LL649: _temp648= _temp641.f2; _temp650=( struct Cyc_Dict_Dict**)&(*
! _temp639).f2; goto _LL647; _LL647: _temp646= _temp641.f3; goto _LL645; _LL645:
! _temp644= _temp641.f4; goto _LL643; _LL643: _temp642= _temp641.f5; goto _LL640;
! _LL640: { struct Cyc_Interface_Ienv* ie1; struct Cyc_Interface_Ienv* iexcl;{
! struct _handler_cons _temp654; _push_handler(& _temp654);{ int _temp656= 0; if(
! setjmp( _temp654.handler)){ _temp656= 1;} if( ! _temp656){ iexcl=(( struct Cyc_Interface_Ienv*(*)(
! struct Cyc_Dict_Dict* d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp644,
! ns);; _pop_handler();} else{ void* _temp655=( void*) _exn_thrown; void* _temp658=
! _temp655; _LL660: if( _temp658 ==  Cyc_Dict_Absent){ goto _LL661;} else{ goto
! _LL662;} _LL662: goto _LL663; _LL661: iexcl= Cyc_Interface_lazy_new_ienv(); goto
! _LL659; _LL663:( void) _throw( _temp658); _LL659:;}}}{ struct _handler_cons
! _temp664; _push_handler(& _temp664);{ int _temp666= 0; if( setjmp( _temp664.handler)){
! _temp666= 1;} if( ! _temp666){ ie1=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict*
! d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp646, ns);{ struct Cyc_Interface_Ienv*
! _temp667= Cyc_Interface_compat_merge_ienv( Cyc_Interface_lazy_new_ienv(), ie1,
! iexcl, _temp642); if( _temp667 ==  0){* _temp653= 0; _npop_handler( 0u); return;}
! ie1=( struct Cyc_Interface_Ienv*) _check_null( _temp667);}; _pop_handler();}
! else{ void* _temp665=( void*) _exn_thrown; void* _temp669= _temp665; _LL671: if(
! _temp669 ==  Cyc_Dict_Absent){ goto _LL672;} else{ goto _LL673;} _LL673: goto
! _LL674; _LL672: ie1= Cyc_Interface_lazy_new_ienv(); goto _LL670; _LL674:( void)
! _throw( _temp669); _LL670:;}}}{ struct Cyc_Interface_Ienv* _temp675= Cyc_Interface_compat_merge_ienv(
! ie1, ie2, iexcl, _temp642); if( _temp675 ==  0){* _temp653= 0;} else{ if(*
! _temp653){* _temp650=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d,
  struct Cyc_List_List* k, struct Cyc_Interface_Ienv* v)) Cyc_Dict_insert)(*
! _temp650, ns,( struct Cyc_Interface_Ienv*) _check_null( _temp675));}}}}} struct
  Cyc_Core_Opt* Cyc_Interface_compat_merge_ns( struct Cyc_Dict_Dict* dic1, struct
  Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict* excl, struct _tagged_arr* msg){
  struct Cyc_Dict_Dict* d=(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct Cyc_List_List*,
  struct Cyc_List_List*))) Cyc_Dict_empty)( Cyc_Absyn_varlist_cmp); struct
! _tuple15 _temp676=({ struct _tuple15 _temp678; _temp678.f1= 1; _temp678.f2= d;
! _temp678.f3= dic1; _temp678.f4= excl; _temp678.f5= msg; _temp678;});(( void(*)(
  void(* f)( struct _tuple15*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct _tuple15* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_compat_merge_ns_f,&
! _temp676, dic2); if( _temp676.f1){ return({ struct Cyc_Core_Opt* _temp677=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp677->v=(
! void*) _temp676.f2; _temp677;});} else{ return 0;}} struct _tuple16{ int f1;
  struct Cyc_Dict_Dict* f2; struct Cyc_Dict_Dict* f3; struct _tagged_arr f4;
  struct _tagged_arr* f5; } ; void Cyc_Interface_disj_merge_dict_f( struct
! _tuple16* env, struct _tagged_arr* x, void* y){ struct _tuple16 _temp681; struct
! _tagged_arr* _temp682; struct _tagged_arr _temp684; struct Cyc_Dict_Dict*
! _temp686; struct Cyc_Dict_Dict* _temp688; struct Cyc_Dict_Dict** _temp690; int
! _temp691; int* _temp693; struct _tuple16* _temp679= env; _temp681=* _temp679;
! _LL692: _temp691= _temp681.f1; _temp693=( int*)&(* _temp679).f1; goto _LL689;
! _LL689: _temp688= _temp681.f2; _temp690=( struct Cyc_Dict_Dict**)&(* _temp679).f2;
! goto _LL687; _LL687: _temp686= _temp681.f3; goto _LL685; _LL685: _temp684=
! _temp681.f4; goto _LL683; _LL683: _temp682= _temp681.f5; goto _LL680; _LL680:
  if((( int(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_member)(
! _temp686, x)){ Cyc_Interface_check_err( _temp682,( struct _tagged_arr)({ struct
! Cyc_Std_String_pa_struct _temp696; _temp696.tag= Cyc_Std_String_pa; _temp696.f1=(
! struct _tagged_arr)* x;{ struct Cyc_Std_String_pa_struct _temp695; _temp695.tag=
! Cyc_Std_String_pa; _temp695.f1=( struct _tagged_arr) _temp684;{ void* _temp694[
! 2u]={& _temp695,& _temp696}; Cyc_Std_aprintf( _tag_arr("%s %s is exported more than once",
! sizeof( unsigned char), 33u), _tag_arr( _temp694, sizeof( void*), 2u));}}}));*
! _temp693= 0;} else{ if(* _temp693){* _temp690=(( struct Cyc_Dict_Dict*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k, void* v)) Cyc_Dict_insert)(*
! _temp690, x, y);}}} struct Cyc_Core_Opt* Cyc_Interface_disj_merge_dict( struct
  Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t, struct
! _tagged_arr* msg){ struct _tuple16 _temp697=({ struct _tuple16 _temp699;
! _temp699.f1= 1; _temp699.f2= dic1; _temp699.f3= dic1; _temp699.f4= t; _temp699.f5=
! msg; _temp699;});(( void(*)( void(* f)( struct _tuple16*, struct _tagged_arr*,
  void*), struct _tuple16* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_disj_merge_dict_f,&
! _temp697, dic2); if( _temp697.f1){ return({ struct Cyc_Core_Opt* _temp698=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp698->v=(
! void*) _temp697.f2; _temp698;});} else{ return 0;}} struct Cyc_Interface_Ienv*
  Cyc_Interface_disj_merge_ienv( struct Cyc_Interface_Ienv* ie1, struct Cyc_Interface_Ienv*
! ie2, struct _tagged_arr* msg){ struct Cyc_Core_Opt* _temp700=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict*
  excl, struct Cyc_Absyn_Structdecl*(* merge_f)( struct Cyc_Absyn_Structdecl*,
  struct Cyc_Absyn_Structdecl*, struct Cyc_Position_Segment*, struct _tagged_arr*),
***************
*** 1808,1914 ****
  ie1->structdecls, ie2->structdecls,(( struct Cyc_Dict_Dict*(*)( int(* cmp)(
  struct _tagged_arr*, struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_zstrptrcmp),
  Cyc_Tcdecl_merge_structdecl, _tag_arr("struct", sizeof( unsigned char), 7u), msg);
! struct Cyc_Core_Opt* _temp704=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t, struct _tagged_arr* msg))
  Cyc_Interface_disj_merge_dict)( ie1->uniondecls, ie2->uniondecls, _tag_arr("union",
! sizeof( unsigned char), 6u), msg); struct Cyc_Core_Opt* _temp705=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t,
  struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)( ie1->tuniondecls, ie2->tuniondecls,
  _tag_arr("[x]tunion", sizeof( unsigned char), 10u), msg); struct Cyc_Core_Opt*
! _temp706=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)(
  ie1->enumdecls, ie2->enumdecls, _tag_arr("enum", sizeof( unsigned char), 5u),
! msg); struct Cyc_Core_Opt* _temp707=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Typedefdecl*(*
  merge_f)( struct Cyc_Absyn_Typedefdecl*, struct Cyc_Absyn_Typedefdecl*, struct
  Cyc_Position_Segment*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)( ie1->typedefdecls, ie2->typedefdecls,((
  struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tagged_arr*, struct _tagged_arr*)))
  Cyc_Dict_empty)( Cyc_Std_zstrptrcmp), Cyc_Tcdecl_merge_typedefdecl, _tag_arr("typedef",
! sizeof( unsigned char), 8u), msg); struct Cyc_Core_Opt* _temp708=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t,
  struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)( ie1->vardecls, ie2->vardecls,
  _tag_arr("variable", sizeof( unsigned char), 9u), msg); struct Cyc_Core_Opt*
! _temp709=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)(
  ie1->xtunionfielddecls, ie2->xtunionfielddecls, _tag_arr("xtunionfield", sizeof(
! unsigned char), 13u), msg); if(((((( !(( unsigned int) _temp703)? 1: !((
! unsigned int) _temp704))? 1: !(( unsigned int) _temp705))? 1: !(( unsigned int)
! _temp706))? 1: !(( unsigned int) _temp707))? 1: !(( unsigned int) _temp708))? 1:
! !(( unsigned int) _temp709)){ return 0;} else{ return({ struct Cyc_Interface_Ienv*
! _temp710=( struct Cyc_Interface_Ienv*) _cycalloc( sizeof( struct Cyc_Interface_Ienv));
! _temp710->structdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp703))->v; _temp710->uniondecls=( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( _temp704))->v; _temp710->tuniondecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp705))->v; _temp710->enumdecls=(
! struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp706))->v;
! _temp710->typedefdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp707))->v; _temp710->vardecls=( struct Cyc_Dict_Dict*)(( struct
! Cyc_Core_Opt*) _check_null( _temp708))->v; _temp710->xtunionfielddecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp709))->v; _temp710;});}}
  struct _tuple17{ int f1; struct Cyc_Dict_Dict* f2; struct Cyc_Dict_Dict* f3;
  struct _tagged_arr* f4; } ; void Cyc_Interface_disj_merge_ns_f( struct _tuple17*
  env, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie2){ struct _tuple17
! _temp713; struct _tagged_arr* _temp714; struct Cyc_Dict_Dict* _temp716; struct
! Cyc_Dict_Dict* _temp718; struct Cyc_Dict_Dict** _temp720; int _temp721; int*
! _temp723; struct _tuple17* _temp711= env; _temp713=* _temp711; _LL722: _temp721=
! _temp713.f1; _temp723=( int*)&(* _temp711).f1; goto _LL719; _LL719: _temp718=
! _temp713.f2; _temp720=( struct Cyc_Dict_Dict**)&(* _temp711).f2; goto _LL717;
! _LL717: _temp716= _temp713.f3; goto _LL715; _LL715: _temp714= _temp713.f4; goto
! _LL712; _LL712: { struct Cyc_Interface_Ienv* ie1;{ struct _handler_cons _temp724;
! _push_handler(& _temp724);{ int _temp726= 0; if( setjmp( _temp724.handler)){
! _temp726= 1;} if( ! _temp726){ ie1=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict*
! d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp716, ns);; _pop_handler();}
! else{ void* _temp725=( void*) _exn_thrown; void* _temp728= _temp725; _LL730: if(
! _temp728 ==  Cyc_Dict_Absent){ goto _LL731;} else{ goto _LL732;} _LL732: goto
! _LL733; _LL731: ie1= Cyc_Interface_lazy_new_ienv(); goto _LL729; _LL733:( void)
! _throw( _temp728); _LL729:;}}}{ struct Cyc_Interface_Ienv* _temp734= Cyc_Interface_disj_merge_ienv(
! ie1, ie2, _temp714); if( _temp734 ==  0){* _temp723= 0;} else{ if(* _temp723){*
! _temp720=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k, struct Cyc_Interface_Ienv* v)) Cyc_Dict_insert)(* _temp720, ns,( struct Cyc_Interface_Ienv*)
! _check_null( _temp734));}}}}} struct Cyc_Core_Opt* Cyc_Interface_disj_merge_ns(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr* msg){
! struct _tuple17 _temp735=({ struct _tuple17 _temp737; _temp737.f1= 1; _temp737.f2=
! dic1; _temp737.f3= dic1; _temp737.f4= msg; _temp737;});(( void(*)( void(* f)(
  struct _tuple17*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*), struct
  _tuple17* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_disj_merge_ns_f,&
! _temp735, dic2); if( _temp735.f1){ return({ struct Cyc_Core_Opt* _temp736=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp736->v=(
! void*) _temp735.f2; _temp736;});} else{ return 0;}} struct Cyc_Interface_I* Cyc_Interface_merge(
  struct Cyc_Interface_I* i1, struct Cyc_Interface_I* i2, struct _tuple3* info){
! struct _handler_cons _temp738; _push_handler(& _temp738);{ int _temp740= 0; if(
! setjmp( _temp738.handler)){ _temp740= 1;} if( ! _temp740){{ struct _tagged_arr*
! msg= 0; if( info !=  0){ msg=({ struct _tagged_arr* _temp741=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp741[ 0]=( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp744; _temp744.tag= Cyc_Std_String_pa;
! _temp744.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f2;{
! struct Cyc_Std_String_pa_struct _temp743; _temp743.tag= Cyc_Std_String_pa;
! _temp743.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f1;{
! void* _temp742[ 2u]={& _temp743,& _temp744}; Cyc_Std_aprintf( _tag_arr("merging exports of %s and %s,",
! sizeof( unsigned char), 30u), _tag_arr( _temp742, sizeof( void*), 2u));}}});
! _temp741;});}{ struct Cyc_Core_Opt* _temp745= Cyc_Interface_disj_merge_ns( i1->exports,
! i2->exports, msg); if( _temp745 ==  0){ struct Cyc_Interface_I* _temp746= 0;
! _npop_handler( 0u); return _temp746;} if( info !=  0){ msg=({ struct _tagged_arr*
! _temp747=( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr));
! _temp747[ 0]=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp750;
! _temp750.tag= Cyc_Std_String_pa; _temp750.f1=( struct _tagged_arr)(*(( struct
! _tuple3*) _check_null( info))).f2;{ struct Cyc_Std_String_pa_struct _temp749;
! _temp749.tag= Cyc_Std_String_pa; _temp749.f1=( struct _tagged_arr)(*(( struct
! _tuple3*) _check_null( info))).f1;{ void* _temp748[ 2u]={& _temp749,& _temp750};
  Cyc_Std_aprintf( _tag_arr("merging imports of %s and %s,", sizeof( unsigned char),
! 30u), _tag_arr( _temp748, sizeof( void*), 2u));}}}); _temp747;});}{ struct Cyc_Core_Opt*
! _temp751= Cyc_Interface_compat_merge_ns( i1->imports, i2->imports,( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( _temp745))->v, msg); if( _temp751 ==  0){
! struct Cyc_Interface_I* _temp752= 0; _npop_handler( 0u); return _temp752;}{
! struct Cyc_Interface_I* _temp754=({ struct Cyc_Interface_I* _temp753=( struct
! Cyc_Interface_I*) _cycalloc( sizeof( struct Cyc_Interface_I)); _temp753->imports=(
! struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp751))->v;
! _temp753->exports=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null(
! _temp745))->v; _temp753;}); _npop_handler( 0u); return _temp754;}}}};
! _pop_handler();} else{ void* _temp739=( void*) _exn_thrown; void* _temp756=
! _temp739; _LL758: if( _temp756 ==  Cyc_Tcdecl_Incompatible){ goto _LL759;} else{
! goto _LL760;} _LL760: goto _LL761; _LL759: return 0; _LL761:( void) _throw(
! _temp756); _LL757:;}}} struct Cyc_Interface_I* Cyc_Interface_merge_list( struct
  Cyc_List_List* li, struct Cyc_List_List* linfo){ if( li ==  0){ return( struct
  Cyc_Interface_I*) Cyc_Interface_empty();}{ struct Cyc_Interface_I* curr_i=(
  struct Cyc_Interface_I*)(( struct Cyc_List_List*) _check_null( li))->hd; struct
--- 1802,1908 ----
  ie1->structdecls, ie2->structdecls,(( struct Cyc_Dict_Dict*(*)( int(* cmp)(
  struct _tagged_arr*, struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_zstrptrcmp),
  Cyc_Tcdecl_merge_structdecl, _tag_arr("struct", sizeof( unsigned char), 7u), msg);
! struct Cyc_Core_Opt* _temp701=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t, struct _tagged_arr* msg))
  Cyc_Interface_disj_merge_dict)( ie1->uniondecls, ie2->uniondecls, _tag_arr("union",
! sizeof( unsigned char), 6u), msg); struct Cyc_Core_Opt* _temp702=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t,
  struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)( ie1->tuniondecls, ie2->tuniondecls,
  _tag_arr("[x]tunion", sizeof( unsigned char), 10u), msg); struct Cyc_Core_Opt*
! _temp703=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)(
  ie1->enumdecls, ie2->enumdecls, _tag_arr("enum", sizeof( unsigned char), 5u),
! msg); struct Cyc_Core_Opt* _temp704=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict*
  dic1, struct Cyc_Dict_Dict* dic2, struct Cyc_Dict_Dict* excl, struct Cyc_Absyn_Typedefdecl*(*
  merge_f)( struct Cyc_Absyn_Typedefdecl*, struct Cyc_Absyn_Typedefdecl*, struct
  Cyc_Position_Segment*, struct _tagged_arr*), struct _tagged_arr t, struct
  _tagged_arr* msg)) Cyc_Interface_compat_merge_dict)( ie1->typedefdecls, ie2->typedefdecls,((
  struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tagged_arr*, struct _tagged_arr*)))
  Cyc_Dict_empty)( Cyc_Std_zstrptrcmp), Cyc_Tcdecl_merge_typedefdecl, _tag_arr("typedef",
! sizeof( unsigned char), 8u), msg); struct Cyc_Core_Opt* _temp705=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr t,
  struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)( ie1->vardecls, ie2->vardecls,
  _tag_arr("variable", sizeof( unsigned char), 9u), msg); struct Cyc_Core_Opt*
! _temp706=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict*
  dic2, struct _tagged_arr t, struct _tagged_arr* msg)) Cyc_Interface_disj_merge_dict)(
  ie1->xtunionfielddecls, ie2->xtunionfielddecls, _tag_arr("xtunionfield", sizeof(
! unsigned char), 13u), msg); if(((((( !(( unsigned int) _temp700)? 1: !((
! unsigned int) _temp701))? 1: !(( unsigned int) _temp702))? 1: !(( unsigned int)
! _temp703))? 1: !(( unsigned int) _temp704))? 1: !(( unsigned int) _temp705))? 1:
! !(( unsigned int) _temp706)){ return 0;} else{ return({ struct Cyc_Interface_Ienv*
! _temp707=( struct Cyc_Interface_Ienv*) _cycalloc( sizeof( struct Cyc_Interface_Ienv));
! _temp707->structdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp700))->v; _temp707->uniondecls=( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( _temp701))->v; _temp707->tuniondecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp702))->v; _temp707->enumdecls=(
! struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp703))->v;
! _temp707->typedefdecls=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( _temp704))->v; _temp707->vardecls=( struct Cyc_Dict_Dict*)(( struct
! Cyc_Core_Opt*) _check_null( _temp705))->v; _temp707->xtunionfielddecls=( struct
! Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp706))->v; _temp707;});}}
  struct _tuple17{ int f1; struct Cyc_Dict_Dict* f2; struct Cyc_Dict_Dict* f3;
  struct _tagged_arr* f4; } ; void Cyc_Interface_disj_merge_ns_f( struct _tuple17*
  env, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie2){ struct _tuple17
! _temp710; struct _tagged_arr* _temp711; struct Cyc_Dict_Dict* _temp713; struct
! Cyc_Dict_Dict* _temp715; struct Cyc_Dict_Dict** _temp717; int _temp718; int*
! _temp720; struct _tuple17* _temp708= env; _temp710=* _temp708; _LL719: _temp718=
! _temp710.f1; _temp720=( int*)&(* _temp708).f1; goto _LL716; _LL716: _temp715=
! _temp710.f2; _temp717=( struct Cyc_Dict_Dict**)&(* _temp708).f2; goto _LL714;
! _LL714: _temp713= _temp710.f3; goto _LL712; _LL712: _temp711= _temp710.f4; goto
! _LL709; _LL709: { struct Cyc_Interface_Ienv* ie1;{ struct _handler_cons _temp721;
! _push_handler(& _temp721);{ int _temp723= 0; if( setjmp( _temp721.handler)){
! _temp723= 1;} if( ! _temp723){ ie1=(( struct Cyc_Interface_Ienv*(*)( struct Cyc_Dict_Dict*
! d, struct Cyc_List_List* k)) Cyc_Dict_lookup)( _temp713, ns);; _pop_handler();}
! else{ void* _temp722=( void*) _exn_thrown; void* _temp725= _temp722; _LL727: if(
! _temp725 ==  Cyc_Dict_Absent){ goto _LL728;} else{ goto _LL729;} _LL729: goto
! _LL730; _LL728: ie1= Cyc_Interface_lazy_new_ienv(); goto _LL726; _LL730:( void)
! _throw( _temp725); _LL726:;}}}{ struct Cyc_Interface_Ienv* _temp731= Cyc_Interface_disj_merge_ienv(
! ie1, ie2, _temp711); if( _temp731 ==  0){* _temp720= 0;} else{ if(* _temp720){*
! _temp717=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct Cyc_List_List*
! k, struct Cyc_Interface_Ienv* v)) Cyc_Dict_insert)(* _temp717, ns,( struct Cyc_Interface_Ienv*)
! _check_null( _temp731));}}}}} struct Cyc_Core_Opt* Cyc_Interface_disj_merge_ns(
  struct Cyc_Dict_Dict* dic1, struct Cyc_Dict_Dict* dic2, struct _tagged_arr* msg){
! struct _tuple17 _temp732=({ struct _tuple17 _temp734; _temp734.f1= 1; _temp734.f2=
! dic1; _temp734.f3= dic1; _temp734.f4= msg; _temp734;});(( void(*)( void(* f)(
  struct _tuple17*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*), struct
  _tuple17* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_disj_merge_ns_f,&
! _temp732, dic2); if( _temp732.f1){ return({ struct Cyc_Core_Opt* _temp733=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp733->v=(
! void*) _temp732.f2; _temp733;});} else{ return 0;}} struct Cyc_Interface_I* Cyc_Interface_merge(
  struct Cyc_Interface_I* i1, struct Cyc_Interface_I* i2, struct _tuple3* info){
! struct _handler_cons _temp735; _push_handler(& _temp735);{ int _temp737= 0; if(
! setjmp( _temp735.handler)){ _temp737= 1;} if( ! _temp737){{ struct _tagged_arr*
! msg= 0; if( info !=  0){ msg=({ struct _tagged_arr* _temp738=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp738[ 0]=( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp741; _temp741.tag= Cyc_Std_String_pa;
! _temp741.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f2;{
! struct Cyc_Std_String_pa_struct _temp740; _temp740.tag= Cyc_Std_String_pa;
! _temp740.f1=( struct _tagged_arr)(*(( struct _tuple3*) _check_null( info))).f1;{
! void* _temp739[ 2u]={& _temp740,& _temp741}; Cyc_Std_aprintf( _tag_arr("merging exports of %s and %s,",
! sizeof( unsigned char), 30u), _tag_arr( _temp739, sizeof( void*), 2u));}}});
! _temp738;});}{ struct Cyc_Core_Opt* _temp742= Cyc_Interface_disj_merge_ns( i1->exports,
! i2->exports, msg); if( _temp742 ==  0){ struct Cyc_Interface_I* _temp743= 0;
! _npop_handler( 0u); return _temp743;} if( info !=  0){ msg=({ struct _tagged_arr*
! _temp744=( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr));
! _temp744[ 0]=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp747;
! _temp747.tag= Cyc_Std_String_pa; _temp747.f1=( struct _tagged_arr)(*(( struct
! _tuple3*) _check_null( info))).f2;{ struct Cyc_Std_String_pa_struct _temp746;
! _temp746.tag= Cyc_Std_String_pa; _temp746.f1=( struct _tagged_arr)(*(( struct
! _tuple3*) _check_null( info))).f1;{ void* _temp745[ 2u]={& _temp746,& _temp747};
  Cyc_Std_aprintf( _tag_arr("merging imports of %s and %s,", sizeof( unsigned char),
! 30u), _tag_arr( _temp745, sizeof( void*), 2u));}}}); _temp744;});}{ struct Cyc_Core_Opt*
! _temp748= Cyc_Interface_compat_merge_ns( i1->imports, i2->imports,( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( _temp742))->v, msg); if( _temp748 ==  0){
! struct Cyc_Interface_I* _temp749= 0; _npop_handler( 0u); return _temp749;}{
! struct Cyc_Interface_I* _temp751=({ struct Cyc_Interface_I* _temp750=( struct
! Cyc_Interface_I*) _cycalloc( sizeof( struct Cyc_Interface_I)); _temp750->imports=(
! struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( _temp748))->v;
! _temp750->exports=( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null(
! _temp742))->v; _temp750;}); _npop_handler( 0u); return _temp751;}}}};
! _pop_handler();} else{ void* _temp736=( void*) _exn_thrown; void* _temp753=
! _temp736; _LL755: if( _temp753 ==  Cyc_Tcdecl_Incompatible){ goto _LL756;} else{
! goto _LL757;} _LL757: goto _LL758; _LL756: return 0; _LL758:( void) _throw(
! _temp753); _LL754:;}}} struct Cyc_Interface_I* Cyc_Interface_merge_list( struct
  Cyc_List_List* li, struct Cyc_List_List* linfo){ if( li ==  0){ return( struct
  Cyc_Interface_I*) Cyc_Interface_empty();}{ struct Cyc_Interface_I* curr_i=(
  struct Cyc_Interface_I*)(( struct Cyc_List_List*) _check_null( li))->hd; struct
***************
*** 1916,1937 ****
  struct Cyc_List_List*) _check_null( linfo))->hd): 0; li=(( struct Cyc_List_List*)
  _check_null( li))->tl; if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;} for( 0; li !=  0; li=(( struct Cyc_List_List*)
! _check_null( li))->tl){ struct Cyc_Interface_I* _temp762= Cyc_Interface_merge(
  curr_i,( struct Cyc_Interface_I*)(( struct Cyc_List_List*) _check_null( li))->hd,(
! curr_info !=  0? linfo !=  0: 0)?({ struct _tuple3* _temp767=( struct _tuple3*)
! _cycalloc( sizeof( struct _tuple3)); _temp767->f1=*(( struct _tagged_arr*)
! _check_null( curr_info)); _temp767->f2=*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd); _temp767;}): 0); if( _temp762 ==  0){ return 0;}
! curr_i=( struct Cyc_Interface_I*) _check_null( _temp762); if( curr_info !=  0){
! curr_info= linfo !=  0?({ struct _tagged_arr* _temp763=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp763[ 0]=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp766; _temp766.tag= Cyc_Std_String_pa;
! _temp766.f1=( struct _tagged_arr)*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd);{ struct Cyc_Std_String_pa_struct _temp765; _temp765.tag=
! Cyc_Std_String_pa; _temp765.f1=( struct _tagged_arr)*(( struct _tagged_arr*)
! _check_null( curr_info));{ void* _temp764[ 2u]={& _temp765,& _temp766}; Cyc_Std_aprintf(
! _tag_arr("%s+%s", sizeof( unsigned char), 6u), _tag_arr( _temp764, sizeof( void*),
! 2u));}}}); _temp763;}): 0;} if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;}} return( struct Cyc_Interface_I*) curr_i;}} struct
  Cyc_Interface_I* Cyc_Interface_get_and_merge_list( struct Cyc_Interface_I*(* get)(
  void*), struct Cyc_List_List* la, struct Cyc_List_List* linfo){ if( la ==  0){
--- 1910,1931 ----
  struct Cyc_List_List*) _check_null( linfo))->hd): 0; li=(( struct Cyc_List_List*)
  _check_null( li))->tl; if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;} for( 0; li !=  0; li=(( struct Cyc_List_List*)
! _check_null( li))->tl){ struct Cyc_Interface_I* _temp759= Cyc_Interface_merge(
  curr_i,( struct Cyc_Interface_I*)(( struct Cyc_List_List*) _check_null( li))->hd,(
! curr_info !=  0? linfo !=  0: 0)?({ struct _tuple3* _temp764=( struct _tuple3*)
! _cycalloc( sizeof( struct _tuple3)); _temp764->f1=*(( struct _tagged_arr*)
! _check_null( curr_info)); _temp764->f2=*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd); _temp764;}): 0); if( _temp759 ==  0){ return 0;}
! curr_i=( struct Cyc_Interface_I*) _check_null( _temp759); if( curr_info !=  0){
! curr_info= linfo !=  0?({ struct _tagged_arr* _temp760=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp760[ 0]=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp763; _temp763.tag= Cyc_Std_String_pa;
! _temp763.f1=( struct _tagged_arr)*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd);{ struct Cyc_Std_String_pa_struct _temp762; _temp762.tag=
! Cyc_Std_String_pa; _temp762.f1=( struct _tagged_arr)*(( struct _tagged_arr*)
! _check_null( curr_info));{ void* _temp761[ 2u]={& _temp762,& _temp763}; Cyc_Std_aprintf(
! _tag_arr("%s+%s", sizeof( unsigned char), 6u), _tag_arr( _temp761, sizeof( void*),
! 2u));}}}); _temp760;}): 0;} if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;}} return( struct Cyc_Interface_I*) curr_i;}} struct
  Cyc_Interface_I* Cyc_Interface_get_and_merge_list( struct Cyc_Interface_I*(* get)(
  void*), struct Cyc_List_List* la, struct Cyc_List_List* linfo){ if( la ==  0){
***************
*** 1941,2206 ****
  struct Cyc_List_List*) _check_null( linfo))->hd): 0; la=(( struct Cyc_List_List*)
  _check_null( la))->tl; if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;} for( 0; la !=  0; la=(( struct Cyc_List_List*)
! _check_null( la))->tl){ struct Cyc_Interface_I* _temp768= Cyc_Interface_merge(
  curr_i, get(( void*)(( struct Cyc_List_List*) _check_null( la))->hd),( curr_info
! !=  0? linfo !=  0: 0)?({ struct _tuple3* _temp773=( struct _tuple3*) _cycalloc(
! sizeof( struct _tuple3)); _temp773->f1=*(( struct _tagged_arr*) _check_null(
! curr_info)); _temp773->f2=*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd); _temp773;}): 0); if( _temp768 ==  0){ return 0;}
! curr_i=( struct Cyc_Interface_I*) _check_null( _temp768); if( curr_info !=  0){
! curr_info= linfo !=  0?({ struct _tagged_arr* _temp769=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp769[ 0]=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp772; _temp772.tag= Cyc_Std_String_pa;
! _temp772.f1=( struct _tagged_arr)*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd);{ struct Cyc_Std_String_pa_struct _temp771; _temp771.tag=
! Cyc_Std_String_pa; _temp771.f1=( struct _tagged_arr)*(( struct _tagged_arr*)
! _check_null( curr_info));{ void* _temp770[ 2u]={& _temp771,& _temp772}; Cyc_Std_aprintf(
! _tag_arr("%s+%s", sizeof( unsigned char), 6u), _tag_arr( _temp770, sizeof( void*),
! 2u));}}}); _temp769;}): 0;} if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;}} return( struct Cyc_Interface_I*) curr_i;}} static
  struct Cyc_List_List* Cyc_Interface_add_namespace( struct Cyc_List_List* tds,
  struct Cyc_List_List* ns){ if( ns ==  0){ return tds;} return({ struct Cyc_List_List*
! _temp774=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp774->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Namespace_d_struct*
! _temp775=( struct Cyc_Absyn_Namespace_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Namespace_d_struct));
! _temp775[ 0]=({ struct Cyc_Absyn_Namespace_d_struct _temp776; _temp776.tag= Cyc_Absyn_Namespace_d;
! _temp776.f1=( struct _tagged_arr*)(( struct Cyc_List_List*) _check_null( ns))->hd;
! _temp776.f2= Cyc_Interface_add_namespace( tds,(( struct Cyc_List_List*)
! _check_null( ns))->tl); _temp776;}); _temp775;}), 0); _temp774->tl= 0; _temp774;});}
  static struct Cyc_List_List* Cyc_Interface_add_structdecl( struct _tagged_arr* x,
  struct Cyc_Absyn_Structdecl* d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List*
! _temp777=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp777->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Struct_d_struct*
! _temp778=( struct Cyc_Absyn_Struct_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct));
! _temp778[ 0]=({ struct Cyc_Absyn_Struct_d_struct _temp779; _temp779.tag= Cyc_Absyn_Struct_d;
! _temp779.f1= d; _temp779;}); _temp778;}), 0); _temp777->tl= tds; _temp777;});}
  static struct Cyc_List_List* Cyc_Interface_add_structdecl_header( struct
  _tagged_arr* x, struct Cyc_Absyn_Structdecl* d, struct Cyc_List_List* tds){ d=({
! struct Cyc_Absyn_Structdecl* _temp780=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp780[ 0]=* d; _temp780;}); d->fields=
  0; if(( void*) d->sc != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)((
! void*) Cyc_Absyn_Extern));} return({ struct Cyc_List_List* _temp781=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp781->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Struct_d_struct* _temp782=( struct Cyc_Absyn_Struct_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct)); _temp782[ 0]=({ struct
! Cyc_Absyn_Struct_d_struct _temp783; _temp783.tag= Cyc_Absyn_Struct_d; _temp783.f1=
! d; _temp783;}); _temp782;}), 0); _temp781->tl= tds; _temp781;});} static struct
  Cyc_List_List* Cyc_Interface_add_uniondecl( struct _tagged_arr* x, struct Cyc_Absyn_Uniondecl*
! d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List* _temp784=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp784->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Union_d_struct* _temp785=( struct
  Cyc_Absyn_Union_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Union_d_struct));
! _temp785[ 0]=({ struct Cyc_Absyn_Union_d_struct _temp786; _temp786.tag= Cyc_Absyn_Union_d;
! _temp786.f1= d; _temp786;}); _temp785;}), 0); _temp784->tl= tds; _temp784;});}
  static struct Cyc_List_List* Cyc_Interface_add_uniondecl_header( struct
  _tagged_arr* x, struct Cyc_Absyn_Uniondecl* d, struct Cyc_List_List* tds){ d=({
! struct Cyc_Absyn_Uniondecl* _temp787=( struct Cyc_Absyn_Uniondecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Uniondecl)); _temp787[ 0]=* d; _temp787;}); d->fields=
  0; if(( void*) d->sc != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)((
! void*) Cyc_Absyn_Extern));} return({ struct Cyc_List_List* _temp788=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp788->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Union_d_struct* _temp789=( struct Cyc_Absyn_Union_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Union_d_struct)); _temp789[ 0]=({ struct Cyc_Absyn_Union_d_struct
! _temp790; _temp790.tag= Cyc_Absyn_Union_d; _temp790.f1= d; _temp790;}); _temp789;}),
! 0); _temp788->tl= tds; _temp788;});} static struct Cyc_List_List* Cyc_Interface_add_tuniondecl(
  struct _tagged_arr* x, struct Cyc_Absyn_Tuniondecl* d, struct Cyc_List_List* tds){
! return({ struct Cyc_List_List* _temp791=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp791->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Tunion_d_struct* _temp792=( struct Cyc_Absyn_Tunion_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct)); _temp792[ 0]=({ struct
! Cyc_Absyn_Tunion_d_struct _temp793; _temp793.tag= Cyc_Absyn_Tunion_d; _temp793.f1=
! d; _temp793;}); _temp792;}), 0); _temp791->tl= tds; _temp791;});} static
! unsigned char _temp794[ 2u]="_"; static struct _tagged_arr Cyc_Interface_us={
! _temp794, _temp794, _temp794 +  2u}; static struct _tagged_arr* Cyc_Interface_us_p=&
  Cyc_Interface_us; static struct _tuple9* Cyc_Interface_rewrite_tunionfield_type(
! struct _tuple9* x){ return({ struct _tuple9* _temp795=( struct _tuple9*)
! _cycalloc( sizeof( struct _tuple9)); _temp795->f1= Cyc_Absyn_empty_tqual();
! _temp795->f2=( void*)({ struct Cyc_Absyn_VarType_struct* _temp796=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp796[ 0]=({ struct Cyc_Absyn_VarType_struct
! _temp797; _temp797.tag= Cyc_Absyn_VarType; _temp797.f1=({ struct Cyc_Absyn_Tvar*
! _temp798=( struct Cyc_Absyn_Tvar*) _cycalloc( sizeof( struct Cyc_Absyn_Tvar));
! _temp798->name= Cyc_Interface_us_p; _temp798->identity= 0; _temp798->kind= Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_BoxKind); _temp798;}); _temp797;}); _temp796;}); _temp795;});}
  static struct Cyc_Absyn_Tunionfield* Cyc_Interface_rewrite_tunionfield( struct
! Cyc_Absyn_Tunionfield* f){ f=({ struct Cyc_Absyn_Tunionfield* _temp799=( struct
  Cyc_Absyn_Tunionfield*) _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield));
! _temp799[ 0]=* f; _temp799;}); f->typs=(( struct Cyc_List_List*(*)( struct
  _tuple9*(* f)( struct _tuple9*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Interface_rewrite_tunionfield_type,
  f->typs); return f;} static struct Cyc_List_List* Cyc_Interface_add_tuniondecl_header(
  struct _tagged_arr* x, struct Cyc_Absyn_Tuniondecl* d, struct Cyc_List_List* tds){
! d=({ struct Cyc_Absyn_Tuniondecl* _temp800=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp800[ 0]=* d; _temp800;});
! if( d->fields !=  0){ d->fields=({ struct Cyc_Core_Opt* _temp801=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp801->v=( void*)(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tunionfield*(* f)( struct Cyc_Absyn_Tunionfield*), struct Cyc_List_List*
  x)) Cyc_List_map)( Cyc_Interface_rewrite_tunionfield,( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( d->fields))->v); _temp801;});} if(( void*) d->sc
  != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)(( void*) Cyc_Absyn_Extern));}
! return({ struct Cyc_List_List* _temp802=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp802->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Tunion_d_struct* _temp803=( struct Cyc_Absyn_Tunion_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct)); _temp803[ 0]=({ struct
! Cyc_Absyn_Tunion_d_struct _temp804; _temp804.tag= Cyc_Absyn_Tunion_d; _temp804.f1=
! d; _temp804;}); _temp803;}), 0); _temp802->tl= tds; _temp802;});} static struct
  Cyc_List_List* Cyc_Interface_add_enumdecl( struct _tagged_arr* x, struct Cyc_Absyn_Enumdecl*
! d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List* _temp805=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp805->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Enum_d_struct* _temp806=( struct
  Cyc_Absyn_Enum_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct));
! _temp806[ 0]=({ struct Cyc_Absyn_Enum_d_struct _temp807; _temp807.tag= Cyc_Absyn_Enum_d;
! _temp807.f1= d; _temp807;}); _temp806;}), 0); _temp805->tl= tds; _temp805;});}
  static struct Cyc_List_List* Cyc_Interface_add_enumdecl_header( struct
  _tagged_arr* x, struct Cyc_Absyn_Enumdecl* d, struct Cyc_List_List* tds){ d=({
! struct Cyc_Absyn_Enumdecl* _temp808=( struct Cyc_Absyn_Enumdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Enumdecl)); _temp808[ 0]=* d; _temp808;}); d->fields= 0;
  if(( void*) d->sc != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)(( void*)
! Cyc_Absyn_Extern));} return({ struct Cyc_List_List* _temp809=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp809->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Enum_d_struct* _temp810=( struct Cyc_Absyn_Enum_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct)); _temp810[ 0]=({ struct Cyc_Absyn_Enum_d_struct
! _temp811; _temp811.tag= Cyc_Absyn_Enum_d; _temp811.f1= d; _temp811;}); _temp810;}),
! 0); _temp809->tl= tds; _temp809;});} static struct Cyc_List_List* Cyc_Interface_add_typedef(
  struct _tagged_arr* x, struct Cyc_Absyn_Typedefdecl* d, struct Cyc_List_List*
! tds){ return({ struct Cyc_List_List* _temp812=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp812->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Typedef_d_struct* _temp813=( struct Cyc_Absyn_Typedef_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Typedef_d_struct)); _temp813[ 0]=({ struct
! Cyc_Absyn_Typedef_d_struct _temp814; _temp814.tag= Cyc_Absyn_Typedef_d; _temp814.f1=
! d; _temp814;}); _temp813;}), 0); _temp812->tl= tds; _temp812;});} static struct
  Cyc_List_List* Cyc_Interface_add_vardecl( struct _tagged_arr* x, struct Cyc_Absyn_Vardecl*
! d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List* _temp815=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp815->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Var_d_struct* _temp816=( struct
  Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp816[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp817; _temp817.tag= Cyc_Absyn_Var_d;
! _temp817.f1= d; _temp817;}); _temp816;}), 0); _temp815->tl= tds; _temp815;});}
  static struct Cyc_List_List* Cyc_Interface_add_xtunionfielddecl( struct
  _tagged_arr* x, struct Cyc_Tcdecl_Xtunionfielddecl* d, struct Cyc_List_List* tds){
! struct Cyc_Tcdecl_Xtunionfielddecl _temp820; struct Cyc_Absyn_Tunionfield*
! _temp821; struct Cyc_Absyn_Tuniondecl* _temp823; struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp818= d; _temp820=* _temp818; _LL824: _temp823= _temp820.base; goto _LL822;
! _LL822: _temp821= _temp820.field; goto _LL819; _LL819: _temp823=({ struct Cyc_Absyn_Tuniondecl*
! _temp825=( struct Cyc_Absyn_Tuniondecl*) _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl));
! _temp825[ 0]=* _temp823; _temp825;}); _temp823->fields=({ struct Cyc_Core_Opt*
! _temp826=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp826->v=( void*)({ struct Cyc_List_List* _temp827=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp827->hd=( void*) _temp821;
! _temp827->tl= 0; _temp827;}); _temp826;});( void*)( _temp823->sc=( void*)(( void*)
! Cyc_Absyn_Extern)); return({ struct Cyc_List_List* _temp828=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp828->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Tunion_d_struct* _temp829=( struct Cyc_Absyn_Tunion_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct)); _temp829[ 0]=({ struct
! Cyc_Absyn_Tunion_d_struct _temp830; _temp830.tag= Cyc_Absyn_Tunion_d; _temp830.f1=
! _temp823; _temp830;}); _temp829;}), 0); _temp828->tl= tds; _temp828;});} static
  struct Cyc_List_List* Cyc_Interface_add_xtunionfielddecl_header( struct
  _tagged_arr* x, struct Cyc_Tcdecl_Xtunionfielddecl* d, struct Cyc_List_List* tds){
! struct Cyc_Tcdecl_Xtunionfielddecl _temp833; struct Cyc_Absyn_Tunionfield*
! _temp834; struct Cyc_Absyn_Tuniondecl* _temp836; struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp831= d; _temp833=* _temp831; _LL837: _temp836= _temp833.base; goto _LL835;
! _LL835: _temp834= _temp833.field; goto _LL832; _LL832: _temp836=({ struct Cyc_Absyn_Tuniondecl*
! _temp838=( struct Cyc_Absyn_Tuniondecl*) _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl));
! _temp838[ 0]=* _temp836; _temp838;}); _temp834= Cyc_Interface_rewrite_tunionfield(
! _temp834);( void*)( _temp834->sc=( void*)(( void*) Cyc_Absyn_Extern)); _temp836->fields=({
! struct Cyc_Core_Opt* _temp839=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp839->v=( void*)({ struct Cyc_List_List* _temp840=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp840->hd=( void*)
! _temp834; _temp840->tl= 0; _temp840;}); _temp839;});( void*)( _temp836->sc=(
! void*)(( void*) Cyc_Absyn_Extern)); return({ struct Cyc_List_List* _temp841=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp841->hd=(
! void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Tunion_d_struct* _temp842=(
  struct Cyc_Absyn_Tunion_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct));
! _temp842[ 0]=({ struct Cyc_Absyn_Tunion_d_struct _temp843; _temp843.tag= Cyc_Absyn_Tunion_d;
! _temp843.f1= _temp836; _temp843;}); _temp842;}), 0); _temp841->tl= tds; _temp841;});}
  static void Cyc_Interface_print_ns_headers( struct Cyc_Std___sFILE* f, struct
  Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie){ struct Cyc_List_List*
! _temp844= 0; _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(* f)(
  struct _tagged_arr*, struct Cyc_Absyn_Structdecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_structdecl_header,
! ie->structdecls, _temp844); _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Uniondecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_uniondecl_header,
! ie->uniondecls, _temp844); _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Tuniondecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_tuniondecl_header,
! ie->tuniondecls, _temp844); _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Enumdecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_enumdecl_header,
! ie->enumdecls, _temp844); if( _temp844 !=  0){ _temp844=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp844); _temp844= Cyc_Interface_add_namespace(
! _temp844, ns); Cyc_Absynpp_decllist2file( _temp844, f);}} static void Cyc_Interface_print_ns_xtunionfielddecl_headers(
  struct Cyc_Std___sFILE* f, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv*
! ie){ struct Cyc_List_List* _temp845= 0; _temp845=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List*(* f)( struct _tagged_arr*, struct Cyc_Tcdecl_Xtunionfielddecl*,
  struct Cyc_List_List*), struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum))
  Cyc_Dict_fold)( Cyc_Interface_add_xtunionfielddecl_header, ie->xtunionfielddecls,
! _temp845); if( _temp845 !=  0){ _temp845=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_imp_rev)( _temp845); _temp845= Cyc_Interface_add_namespace(
! _temp845, ns); Cyc_Absynpp_decllist2file( _temp845, f);}} static void Cyc_Interface_print_ns_typedefs(
  struct Cyc_Std___sFILE* f, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv*
! ie){ struct Cyc_List_List* _temp846= 0; _temp846=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List*(* f)( struct _tagged_arr*, struct Cyc_Absyn_Typedefdecl*,
  struct Cyc_List_List*), struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum))
! Cyc_Dict_fold)( Cyc_Interface_add_typedef, ie->typedefdecls, _temp846); if(
! _temp846 !=  0){ _temp846=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_imp_rev)( _temp846); _temp846= Cyc_Interface_add_namespace( _temp846,
! ns); Cyc_Absynpp_decllist2file( _temp846, f);}} static void Cyc_Interface_print_ns_decls(
  struct Cyc_Std___sFILE* f, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv*
! ie){ struct Cyc_List_List* _temp847= 0; _temp847=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List*(* f)( struct _tagged_arr*, struct Cyc_Absyn_Structdecl*,
  struct Cyc_List_List*), struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum))
! Cyc_Dict_fold)( Cyc_Interface_add_structdecl, ie->structdecls, _temp847);
! _temp847=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(* f)( struct
  _tagged_arr*, struct Cyc_Absyn_Uniondecl*, struct Cyc_List_List*), struct Cyc_Dict_Dict*
  d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_uniondecl, ie->uniondecls,
! _temp847); _temp847=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(* f)(
  struct _tagged_arr*, struct Cyc_Absyn_Tuniondecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_tuniondecl,
! ie->tuniondecls, _temp847); _temp847=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Enumdecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_enumdecl,
! ie->enumdecls, _temp847); _temp847=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Vardecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_vardecl,
! ie->vardecls, _temp847); _temp847=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Tcdecl_Xtunionfielddecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_xtunionfielddecl,
! ie->xtunionfielddecls, _temp847); if( _temp847 !=  0){ _temp847=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp847); _temp847= Cyc_Interface_add_namespace(
! _temp847, ns); Cyc_Absynpp_decllist2file( _temp847, f);}} void Cyc_Interface_print(
  struct Cyc_Interface_I* i, struct Cyc_Std___sFILE* f){ Cyc_Absynpp_set_params(&
! Cyc_Absynpp_cyci_params_r);({ void* _temp848[ 0u]={}; Cyc_Std_fprintf( f,
  _tag_arr("/****** needed (headers) ******/\n", sizeof( unsigned char), 34u),
! _tag_arr( _temp848, sizeof( void*), 0u));});(( void(*)( void(* f)( struct Cyc_Std___sFILE*,
  struct Cyc_List_List*, struct Cyc_Interface_Ienv*), struct Cyc_Std___sFILE* env,
  struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_headers, f, i->imports);({
! void* _temp849[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (headers) ******/\n",
! sizeof( unsigned char), 37u), _tag_arr( _temp849, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_headers,
! f, i->exports);({ void* _temp850[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("/****** needed (headers of xtunionfielddecls) ******/\n",
! sizeof( unsigned char), 55u), _tag_arr( _temp850, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_xtunionfielddecl_headers,
! f, i->imports);({ void* _temp851[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (headers of xtunionfielddecls) ******/\n",
! sizeof( unsigned char), 58u), _tag_arr( _temp851, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_xtunionfielddecl_headers,
! f, i->exports);({ void* _temp852[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (typedefs) ******/\n",
! sizeof( unsigned char), 38u), _tag_arr( _temp852, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_typedefs,
! f, i->exports);({ void* _temp853[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** needed (declarations) ******/\n",
! sizeof( unsigned char), 40u), _tag_arr( _temp853, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_decls,
! f, i->imports);({ void* _temp854[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (declarations) ******/\n",
! sizeof( unsigned char), 42u), _tag_arr( _temp854, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_decls,
  f, i->exports);} struct Cyc_Interface_I* Cyc_Interface_parse( struct Cyc_Std___sFILE*
! f){ Cyc_Lex_lex_init();{ struct Cyc_List_List* _temp855= Cyc_Parse_parse_file( f);
! struct Cyc_Tcenv_Tenv* _temp856= Cyc_Tcenv_tc_init(); Cyc_Tc_tc( _temp856, 0,
! _temp855); return Cyc_Interface_gen_extract( _temp856->ae, 0);}} void Cyc_Interface_save(
  struct Cyc_Interface_I* i, struct Cyc_Std___sFILE* f){ Cyc_Interface_print( i, f);}
  struct Cyc_Interface_I* Cyc_Interface_load( struct Cyc_Std___sFILE* f){ return
  Cyc_Interface_parse( f);}
--- 1935,2200 ----
  struct Cyc_List_List*) _check_null( linfo))->hd): 0; la=(( struct Cyc_List_List*)
  _check_null( la))->tl; if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;} for( 0; la !=  0; la=(( struct Cyc_List_List*)
! _check_null( la))->tl){ struct Cyc_Interface_I* _temp765= Cyc_Interface_merge(
  curr_i, get(( void*)(( struct Cyc_List_List*) _check_null( la))->hd),( curr_info
! !=  0? linfo !=  0: 0)?({ struct _tuple3* _temp770=( struct _tuple3*) _cycalloc(
! sizeof( struct _tuple3)); _temp770->f1=*(( struct _tagged_arr*) _check_null(
! curr_info)); _temp770->f2=*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd); _temp770;}): 0); if( _temp765 ==  0){ return 0;}
! curr_i=( struct Cyc_Interface_I*) _check_null( _temp765); if( curr_info !=  0){
! curr_info= linfo !=  0?({ struct _tagged_arr* _temp766=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp766[ 0]=( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp769; _temp769.tag= Cyc_Std_String_pa;
! _temp769.f1=( struct _tagged_arr)*(( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( linfo))->hd);{ struct Cyc_Std_String_pa_struct _temp768; _temp768.tag=
! Cyc_Std_String_pa; _temp768.f1=( struct _tagged_arr)*(( struct _tagged_arr*)
! _check_null( curr_info));{ void* _temp767[ 2u]={& _temp768,& _temp769}; Cyc_Std_aprintf(
! _tag_arr("%s+%s", sizeof( unsigned char), 6u), _tag_arr( _temp767, sizeof( void*),
! 2u));}}}); _temp766;}): 0;} if( linfo !=  0){ linfo=(( struct Cyc_List_List*)
  _check_null( linfo))->tl;}} return( struct Cyc_Interface_I*) curr_i;}} static
  struct Cyc_List_List* Cyc_Interface_add_namespace( struct Cyc_List_List* tds,
  struct Cyc_List_List* ns){ if( ns ==  0){ return tds;} return({ struct Cyc_List_List*
! _temp771=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp771->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Namespace_d_struct*
! _temp772=( struct Cyc_Absyn_Namespace_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Namespace_d_struct));
! _temp772[ 0]=({ struct Cyc_Absyn_Namespace_d_struct _temp773; _temp773.tag= Cyc_Absyn_Namespace_d;
! _temp773.f1=( struct _tagged_arr*)(( struct Cyc_List_List*) _check_null( ns))->hd;
! _temp773.f2= Cyc_Interface_add_namespace( tds,(( struct Cyc_List_List*)
! _check_null( ns))->tl); _temp773;}); _temp772;}), 0); _temp771->tl= 0; _temp771;});}
  static struct Cyc_List_List* Cyc_Interface_add_structdecl( struct _tagged_arr* x,
  struct Cyc_Absyn_Structdecl* d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List*
! _temp774=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp774->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Struct_d_struct*
! _temp775=( struct Cyc_Absyn_Struct_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct));
! _temp775[ 0]=({ struct Cyc_Absyn_Struct_d_struct _temp776; _temp776.tag= Cyc_Absyn_Struct_d;
! _temp776.f1= d; _temp776;}); _temp775;}), 0); _temp774->tl= tds; _temp774;});}
  static struct Cyc_List_List* Cyc_Interface_add_structdecl_header( struct
  _tagged_arr* x, struct Cyc_Absyn_Structdecl* d, struct Cyc_List_List* tds){ d=({
! struct Cyc_Absyn_Structdecl* _temp777=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp777[ 0]=* d; _temp777;}); d->fields=
  0; if(( void*) d->sc != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)((
! void*) Cyc_Absyn_Extern));} return({ struct Cyc_List_List* _temp778=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp778->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Struct_d_struct* _temp779=( struct Cyc_Absyn_Struct_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct)); _temp779[ 0]=({ struct
! Cyc_Absyn_Struct_d_struct _temp780; _temp780.tag= Cyc_Absyn_Struct_d; _temp780.f1=
! d; _temp780;}); _temp779;}), 0); _temp778->tl= tds; _temp778;});} static struct
  Cyc_List_List* Cyc_Interface_add_uniondecl( struct _tagged_arr* x, struct Cyc_Absyn_Uniondecl*
! d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List* _temp781=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp781->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Union_d_struct* _temp782=( struct
  Cyc_Absyn_Union_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Union_d_struct));
! _temp782[ 0]=({ struct Cyc_Absyn_Union_d_struct _temp783; _temp783.tag= Cyc_Absyn_Union_d;
! _temp783.f1= d; _temp783;}); _temp782;}), 0); _temp781->tl= tds; _temp781;});}
  static struct Cyc_List_List* Cyc_Interface_add_uniondecl_header( struct
  _tagged_arr* x, struct Cyc_Absyn_Uniondecl* d, struct Cyc_List_List* tds){ d=({
! struct Cyc_Absyn_Uniondecl* _temp784=( struct Cyc_Absyn_Uniondecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Uniondecl)); _temp784[ 0]=* d; _temp784;}); d->fields=
  0; if(( void*) d->sc != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)((
! void*) Cyc_Absyn_Extern));} return({ struct Cyc_List_List* _temp785=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp785->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Union_d_struct* _temp786=( struct Cyc_Absyn_Union_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Union_d_struct)); _temp786[ 0]=({ struct Cyc_Absyn_Union_d_struct
! _temp787; _temp787.tag= Cyc_Absyn_Union_d; _temp787.f1= d; _temp787;}); _temp786;}),
! 0); _temp785->tl= tds; _temp785;});} static struct Cyc_List_List* Cyc_Interface_add_tuniondecl(
  struct _tagged_arr* x, struct Cyc_Absyn_Tuniondecl* d, struct Cyc_List_List* tds){
! return({ struct Cyc_List_List* _temp788=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp788->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Tunion_d_struct* _temp789=( struct Cyc_Absyn_Tunion_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct)); _temp789[ 0]=({ struct
! Cyc_Absyn_Tunion_d_struct _temp790; _temp790.tag= Cyc_Absyn_Tunion_d; _temp790.f1=
! d; _temp790;}); _temp789;}), 0); _temp788->tl= tds; _temp788;});} static
! unsigned char _temp791[ 2u]="_"; static struct _tagged_arr Cyc_Interface_us={
! _temp791, _temp791, _temp791 +  2u}; static struct _tagged_arr* Cyc_Interface_us_p=&
  Cyc_Interface_us; static struct _tuple9* Cyc_Interface_rewrite_tunionfield_type(
! struct _tuple9* x){ return({ struct _tuple9* _temp792=( struct _tuple9*)
! _cycalloc( sizeof( struct _tuple9)); _temp792->f1= Cyc_Absyn_empty_tqual();
! _temp792->f2=( void*)({ struct Cyc_Absyn_VarType_struct* _temp793=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp793[ 0]=({ struct Cyc_Absyn_VarType_struct
! _temp794; _temp794.tag= Cyc_Absyn_VarType; _temp794.f1=({ struct Cyc_Absyn_Tvar*
! _temp795=( struct Cyc_Absyn_Tvar*) _cycalloc( sizeof( struct Cyc_Absyn_Tvar));
! _temp795->name= Cyc_Interface_us_p; _temp795->identity= 0; _temp795->kind= Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_BoxKind); _temp795;}); _temp794;}); _temp793;}); _temp792;});}
  static struct Cyc_Absyn_Tunionfield* Cyc_Interface_rewrite_tunionfield( struct
! Cyc_Absyn_Tunionfield* f){ f=({ struct Cyc_Absyn_Tunionfield* _temp796=( struct
  Cyc_Absyn_Tunionfield*) _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield));
! _temp796[ 0]=* f; _temp796;}); f->typs=(( struct Cyc_List_List*(*)( struct
  _tuple9*(* f)( struct _tuple9*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Interface_rewrite_tunionfield_type,
  f->typs); return f;} static struct Cyc_List_List* Cyc_Interface_add_tuniondecl_header(
  struct _tagged_arr* x, struct Cyc_Absyn_Tuniondecl* d, struct Cyc_List_List* tds){
! d=({ struct Cyc_Absyn_Tuniondecl* _temp797=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp797[ 0]=* d; _temp797;});
! if( d->fields !=  0){ d->fields=({ struct Cyc_Core_Opt* _temp798=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp798->v=( void*)(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tunionfield*(* f)( struct Cyc_Absyn_Tunionfield*), struct Cyc_List_List*
  x)) Cyc_List_map)( Cyc_Interface_rewrite_tunionfield,( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( d->fields))->v); _temp798;});} if(( void*) d->sc
  != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)(( void*) Cyc_Absyn_Extern));}
! return({ struct Cyc_List_List* _temp799=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp799->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Tunion_d_struct* _temp800=( struct Cyc_Absyn_Tunion_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct)); _temp800[ 0]=({ struct
! Cyc_Absyn_Tunion_d_struct _temp801; _temp801.tag= Cyc_Absyn_Tunion_d; _temp801.f1=
! d; _temp801;}); _temp800;}), 0); _temp799->tl= tds; _temp799;});} static struct
  Cyc_List_List* Cyc_Interface_add_enumdecl( struct _tagged_arr* x, struct Cyc_Absyn_Enumdecl*
! d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List* _temp802=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp802->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Enum_d_struct* _temp803=( struct
  Cyc_Absyn_Enum_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct));
! _temp803[ 0]=({ struct Cyc_Absyn_Enum_d_struct _temp804; _temp804.tag= Cyc_Absyn_Enum_d;
! _temp804.f1= d; _temp804;}); _temp803;}), 0); _temp802->tl= tds; _temp802;});}
  static struct Cyc_List_List* Cyc_Interface_add_enumdecl_header( struct
  _tagged_arr* x, struct Cyc_Absyn_Enumdecl* d, struct Cyc_List_List* tds){ d=({
! struct Cyc_Absyn_Enumdecl* _temp805=( struct Cyc_Absyn_Enumdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Enumdecl)); _temp805[ 0]=* d; _temp805;}); d->fields= 0;
  if(( void*) d->sc != ( void*) Cyc_Absyn_ExternC){( void*)( d->sc=( void*)(( void*)
! Cyc_Absyn_Extern));} return({ struct Cyc_List_List* _temp806=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp806->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Enum_d_struct* _temp807=( struct Cyc_Absyn_Enum_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct)); _temp807[ 0]=({ struct Cyc_Absyn_Enum_d_struct
! _temp808; _temp808.tag= Cyc_Absyn_Enum_d; _temp808.f1= d; _temp808;}); _temp807;}),
! 0); _temp806->tl= tds; _temp806;});} static struct Cyc_List_List* Cyc_Interface_add_typedef(
  struct _tagged_arr* x, struct Cyc_Absyn_Typedefdecl* d, struct Cyc_List_List*
! tds){ return({ struct Cyc_List_List* _temp809=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp809->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Typedef_d_struct* _temp810=( struct Cyc_Absyn_Typedef_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Typedef_d_struct)); _temp810[ 0]=({ struct
! Cyc_Absyn_Typedef_d_struct _temp811; _temp811.tag= Cyc_Absyn_Typedef_d; _temp811.f1=
! d; _temp811;}); _temp810;}), 0); _temp809->tl= tds; _temp809;});} static struct
  Cyc_List_List* Cyc_Interface_add_vardecl( struct _tagged_arr* x, struct Cyc_Absyn_Vardecl*
! d, struct Cyc_List_List* tds){ return({ struct Cyc_List_List* _temp812=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp812->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Var_d_struct* _temp813=( struct
  Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp813[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp814; _temp814.tag= Cyc_Absyn_Var_d;
! _temp814.f1= d; _temp814;}); _temp813;}), 0); _temp812->tl= tds; _temp812;});}
  static struct Cyc_List_List* Cyc_Interface_add_xtunionfielddecl( struct
  _tagged_arr* x, struct Cyc_Tcdecl_Xtunionfielddecl* d, struct Cyc_List_List* tds){
! struct Cyc_Tcdecl_Xtunionfielddecl _temp817; struct Cyc_Absyn_Tunionfield*
! _temp818; struct Cyc_Absyn_Tuniondecl* _temp820; struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp815= d; _temp817=* _temp815; _LL821: _temp820= _temp817.base; goto _LL819;
! _LL819: _temp818= _temp817.field; goto _LL816; _LL816: _temp820=({ struct Cyc_Absyn_Tuniondecl*
! _temp822=( struct Cyc_Absyn_Tuniondecl*) _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl));
! _temp822[ 0]=* _temp820; _temp822;}); _temp820->fields=({ struct Cyc_Core_Opt*
! _temp823=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp823->v=( void*)({ struct Cyc_List_List* _temp824=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp824->hd=( void*) _temp818;
! _temp824->tl= 0; _temp824;}); _temp823;});( void*)( _temp820->sc=( void*)(( void*)
! Cyc_Absyn_Extern)); return({ struct Cyc_List_List* _temp825=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp825->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Tunion_d_struct* _temp826=( struct Cyc_Absyn_Tunion_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct)); _temp826[ 0]=({ struct
! Cyc_Absyn_Tunion_d_struct _temp827; _temp827.tag= Cyc_Absyn_Tunion_d; _temp827.f1=
! _temp820; _temp827;}); _temp826;}), 0); _temp825->tl= tds; _temp825;});} static
  struct Cyc_List_List* Cyc_Interface_add_xtunionfielddecl_header( struct
  _tagged_arr* x, struct Cyc_Tcdecl_Xtunionfielddecl* d, struct Cyc_List_List* tds){
! struct Cyc_Tcdecl_Xtunionfielddecl _temp830; struct Cyc_Absyn_Tunionfield*
! _temp831; struct Cyc_Absyn_Tuniondecl* _temp833; struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp828= d; _temp830=* _temp828; _LL834: _temp833= _temp830.base; goto _LL832;
! _LL832: _temp831= _temp830.field; goto _LL829; _LL829: _temp833=({ struct Cyc_Absyn_Tuniondecl*
! _temp835=( struct Cyc_Absyn_Tuniondecl*) _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl));
! _temp835[ 0]=* _temp833; _temp835;}); _temp831= Cyc_Interface_rewrite_tunionfield(
! _temp831);( void*)( _temp831->sc=( void*)(( void*) Cyc_Absyn_Extern)); _temp833->fields=({
! struct Cyc_Core_Opt* _temp836=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp836->v=( void*)({ struct Cyc_List_List* _temp837=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp837->hd=( void*)
! _temp831; _temp837->tl= 0; _temp837;}); _temp836;});( void*)( _temp833->sc=(
! void*)(( void*) Cyc_Absyn_Extern)); return({ struct Cyc_List_List* _temp838=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp838->hd=(
! void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Tunion_d_struct* _temp839=(
  struct Cyc_Absyn_Tunion_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct));
! _temp839[ 0]=({ struct Cyc_Absyn_Tunion_d_struct _temp840; _temp840.tag= Cyc_Absyn_Tunion_d;
! _temp840.f1= _temp833; _temp840;}); _temp839;}), 0); _temp838->tl= tds; _temp838;});}
  static void Cyc_Interface_print_ns_headers( struct Cyc_Std___sFILE* f, struct
  Cyc_List_List* ns, struct Cyc_Interface_Ienv* ie){ struct Cyc_List_List*
! _temp841= 0; _temp841=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(* f)(
  struct _tagged_arr*, struct Cyc_Absyn_Structdecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_structdecl_header,
! ie->structdecls, _temp841); _temp841=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Uniondecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_uniondecl_header,
! ie->uniondecls, _temp841); _temp841=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Tuniondecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_tuniondecl_header,
! ie->tuniondecls, _temp841); _temp841=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Enumdecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_enumdecl_header,
! ie->enumdecls, _temp841); if( _temp841 !=  0){ _temp841=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp841); _temp841= Cyc_Interface_add_namespace(
! _temp841, ns); Cyc_Absynpp_decllist2file( _temp841, f);}} static void Cyc_Interface_print_ns_xtunionfielddecl_headers(
  struct Cyc_Std___sFILE* f, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv*
! ie){ struct Cyc_List_List* _temp842= 0; _temp842=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List*(* f)( struct _tagged_arr*, struct Cyc_Tcdecl_Xtunionfielddecl*,
  struct Cyc_List_List*), struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum))
  Cyc_Dict_fold)( Cyc_Interface_add_xtunionfielddecl_header, ie->xtunionfielddecls,
! _temp842); if( _temp842 !=  0){ _temp842=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_imp_rev)( _temp842); _temp842= Cyc_Interface_add_namespace(
! _temp842, ns); Cyc_Absynpp_decllist2file( _temp842, f);}} static void Cyc_Interface_print_ns_typedefs(
  struct Cyc_Std___sFILE* f, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv*
! ie){ struct Cyc_List_List* _temp843= 0; _temp843=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List*(* f)( struct _tagged_arr*, struct Cyc_Absyn_Typedefdecl*,
  struct Cyc_List_List*), struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum))
! Cyc_Dict_fold)( Cyc_Interface_add_typedef, ie->typedefdecls, _temp843); if(
! _temp843 !=  0){ _temp843=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x))
! Cyc_List_imp_rev)( _temp843); _temp843= Cyc_Interface_add_namespace( _temp843,
! ns); Cyc_Absynpp_decllist2file( _temp843, f);}} static void Cyc_Interface_print_ns_decls(
  struct Cyc_Std___sFILE* f, struct Cyc_List_List* ns, struct Cyc_Interface_Ienv*
! ie){ struct Cyc_List_List* _temp844= 0; _temp844=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List*(* f)( struct _tagged_arr*, struct Cyc_Absyn_Structdecl*,
  struct Cyc_List_List*), struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum))
! Cyc_Dict_fold)( Cyc_Interface_add_structdecl, ie->structdecls, _temp844);
! _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(* f)( struct
  _tagged_arr*, struct Cyc_Absyn_Uniondecl*, struct Cyc_List_List*), struct Cyc_Dict_Dict*
  d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_uniondecl, ie->uniondecls,
! _temp844); _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(* f)(
  struct _tagged_arr*, struct Cyc_Absyn_Tuniondecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_tuniondecl,
! ie->tuniondecls, _temp844); _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Enumdecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_enumdecl,
! ie->enumdecls, _temp844); _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Absyn_Vardecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_vardecl,
! ie->vardecls, _temp844); _temp844=(( struct Cyc_List_List*(*)( struct Cyc_List_List*(*
  f)( struct _tagged_arr*, struct Cyc_Tcdecl_Xtunionfielddecl*, struct Cyc_List_List*),
  struct Cyc_Dict_Dict* d, struct Cyc_List_List* accum)) Cyc_Dict_fold)( Cyc_Interface_add_xtunionfielddecl,
! ie->xtunionfielddecls, _temp844); if( _temp844 !=  0){ _temp844=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp844); _temp844= Cyc_Interface_add_namespace(
! _temp844, ns); Cyc_Absynpp_decllist2file( _temp844, f);}} void Cyc_Interface_print(
  struct Cyc_Interface_I* i, struct Cyc_Std___sFILE* f){ Cyc_Absynpp_set_params(&
! Cyc_Absynpp_cyci_params_r);({ void* _temp845[ 0u]={}; Cyc_Std_fprintf( f,
  _tag_arr("/****** needed (headers) ******/\n", sizeof( unsigned char), 34u),
! _tag_arr( _temp845, sizeof( void*), 0u));});(( void(*)( void(* f)( struct Cyc_Std___sFILE*,
  struct Cyc_List_List*, struct Cyc_Interface_Ienv*), struct Cyc_Std___sFILE* env,
  struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_headers, f, i->imports);({
! void* _temp846[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (headers) ******/\n",
! sizeof( unsigned char), 37u), _tag_arr( _temp846, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_headers,
! f, i->exports);({ void* _temp847[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("/****** needed (headers of xtunionfielddecls) ******/\n",
! sizeof( unsigned char), 55u), _tag_arr( _temp847, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_xtunionfielddecl_headers,
! f, i->imports);({ void* _temp848[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (headers of xtunionfielddecls) ******/\n",
! sizeof( unsigned char), 58u), _tag_arr( _temp848, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_xtunionfielddecl_headers,
! f, i->exports);({ void* _temp849[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (typedefs) ******/\n",
! sizeof( unsigned char), 38u), _tag_arr( _temp849, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_typedefs,
! f, i->exports);({ void* _temp850[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** needed (declarations) ******/\n",
! sizeof( unsigned char), 40u), _tag_arr( _temp850, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_decls,
! f, i->imports);({ void* _temp851[ 0u]={}; Cyc_Std_fprintf( f, _tag_arr("\n/****** provided (declarations) ******/\n",
! sizeof( unsigned char), 42u), _tag_arr( _temp851, sizeof( void*), 0u));});((
  void(*)( void(* f)( struct Cyc_Std___sFILE*, struct Cyc_List_List*, struct Cyc_Interface_Ienv*),
  struct Cyc_Std___sFILE* env, struct Cyc_Dict_Dict* d)) Cyc_Dict_iter_c)( Cyc_Interface_print_ns_decls,
  f, i->exports);} struct Cyc_Interface_I* Cyc_Interface_parse( struct Cyc_Std___sFILE*
! f){ Cyc_Lex_lex_init();{ struct Cyc_List_List* _temp852= Cyc_Parse_parse_file( f);
! struct Cyc_Tcenv_Tenv* _temp853= Cyc_Tcenv_tc_init(); Cyc_Tc_tc( _temp853, 0,
! _temp852); return Cyc_Interface_gen_extract( _temp853->ae, 0);}} void Cyc_Interface_save(
  struct Cyc_Interface_I* i, struct Cyc_Std___sFILE* f){ Cyc_Interface_print( i, f);}
  struct Cyc_Interface_I* Cyc_Interface_load( struct Cyc_Std___sFILE* f){ return
  Cyc_Interface_parse( f);}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/lex.c powerpc-apple-rhapsody/src/lex.c
*** i686-unknown-linux/src/lex.c	Wed Oct 10 15:39:54 2001
--- powerpc-apple-rhapsody/src/lex.c	Wed Oct 10 15:39:30 2001
***************
*** 323,329 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 323,329 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 414,476 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 414,473 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/new_control_flow.c powerpc-apple-rhapsody/src/new_control_flow.c
*** i686-unknown-linux/src/new_control_flow.c	Wed Oct 10 15:39:58 2001
--- powerpc-apple-rhapsody/src/new_control_flow.c	Wed Oct 10 15:39:30 2001
***************
*** 286,292 ****
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 286,292 ----
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 377,439 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple1* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple1* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple2{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple2* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 377,436 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple1* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple1* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple2{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple2* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple1* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/parse_tab.c powerpc-apple-rhapsody/src/parse_tab.c
*** i686-unknown-linux/src/parse_tab.c	Wed Oct 10 15:39:54 2001
--- powerpc-apple-rhapsody/src/parse_tab.c	Wed Oct 10 15:39:30 2001
***************
*** 326,332 ****
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 326,332 ----
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 417,479 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple1* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple1* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple2{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple2* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 417,476 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple1* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple1* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple2{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple2* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple1* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 656,663 ****
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeoftyp_exp( void* t, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeofexp_exp( struct Cyc_Absyn_Exp* e,
  struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_offsetof_exp(
! void*, void*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_gentyp_exp(
! struct Cyc_List_List*, void*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
  Cyc_Absyn_deref_exp( struct Cyc_Absyn_Exp*, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_structmember_exp( struct Cyc_Absyn_Exp*,
  struct _tagged_arr*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
--- 653,660 ----
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeoftyp_exp( void* t, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeofexp_exp( struct Cyc_Absyn_Exp* e,
  struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_offsetof_exp(
! void*, struct _tagged_arr*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
! Cyc_Absyn_gentyp_exp( void*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
  Cyc_Absyn_deref_exp( struct Cyc_Absyn_Exp*, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_structmember_exp( struct Cyc_Absyn_Exp*,
  struct _tagged_arr*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
***************
*** 1155,1334 ****
  void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp313=( struct Cyc_Absyn_KnownTunion_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp313[ 0]=({ struct
  Cyc_Absyn_KnownTunion_struct _temp314; _temp314.tag= Cyc_Absyn_KnownTunion;
! _temp314.f1=({ struct Cyc_Absyn_Tuniondecl** _temp315=( struct Cyc_Absyn_Tuniondecl**)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl*)); _temp315[ 0]= _temp299;
! _temp315;}); _temp314;}); _temp313;})); _temp312.targs= _temp309; _temp312.rgn=(
! void*)(( void*) Cyc_Absyn_HeapRgn); _temp312;}); _temp311;}); _temp310;}); if(
! _temp299->fields !=  0){ declopt=({ struct Cyc_Core_Opt* _temp316=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp316->v=( void*) _temp277;
! _temp316;});} goto _LL286;} _LL292: { struct Cyc_List_List* _temp317=(( struct
! Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Tvar*), struct Cyc_List_List* x))
! Cyc_List_map)( Cyc_Parse_tvar2typ, _temp301->tvs); t=( void*)({ struct Cyc_Absyn_UnionType_struct*
! _temp318=( struct Cyc_Absyn_UnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct));
! _temp318[ 0]=({ struct Cyc_Absyn_UnionType_struct _temp319; _temp319.tag= Cyc_Absyn_UnionType;
! _temp319.f1=( struct _tuple1*)(( struct _tuple1*)(( struct Cyc_Core_Opt*)
! _check_null( _temp301->name))->v); _temp319.f2= _temp317; _temp319.f3= 0;
! _temp319;}); _temp318;}); if( _temp301->fields !=  0){ declopt=({ struct Cyc_Core_Opt*
! _temp320=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp320->v=( void*) _temp277; _temp320;});} goto _LL286;} _LL294: t=( void*)({
! struct Cyc_Absyn_EnumType_struct* _temp321=( struct Cyc_Absyn_EnumType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_EnumType_struct)); _temp321[ 0]=({ struct
! Cyc_Absyn_EnumType_struct _temp322; _temp322.tag= Cyc_Absyn_EnumType; _temp322.f1=
! _temp303->name; _temp322.f2= 0; _temp322;}); _temp321;}); declopt=({ struct Cyc_Core_Opt*
! _temp323=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp323->v=( void*) _temp277; _temp323;}); goto _LL286; _LL296:(( int(*)(
  struct _tagged_arr msg, struct Cyc_Position_Segment* sg)) Cyc_Parse_abort)(
  _tag_arr("bad declaration within type specifier", sizeof( unsigned char), 38u),
  _temp277->loc); goto _LL286; _LL286:;}} else{ Cyc_Parse_err( Cyc_Parse_msg3,
  _temp277->loc);} goto _LL252; _LL252:;} if( ! seen_type){ if( ! seen_sign? !
  seen_size: 0){ Cyc_Parse_err( _tag_arr("missing type withing specifier", sizeof(
  unsigned char), 31u), last_loc);} t=( void*)({ struct Cyc_Absyn_IntType_struct*
! _temp324=( struct Cyc_Absyn_IntType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_IntType_struct));
! _temp324[ 0]=({ struct Cyc_Absyn_IntType_struct _temp325; _temp325.tag= Cyc_Absyn_IntType;
! _temp325.f1=( void*) sgn; _temp325.f2=( void*) sz; _temp325;}); _temp324;});}
! else{ if( seen_sign){ void* _temp326= t; void* _temp332; _LL328: if((
! unsigned int) _temp326 >  4u?*(( int*) _temp326) ==  Cyc_Absyn_IntType: 0){
! _LL333: _temp332=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp326)->f2;
! goto _LL329;} else{ goto _LL330;} _LL330: goto _LL331; _LL329: t=( void*)({
! struct Cyc_Absyn_IntType_struct* _temp334=( struct Cyc_Absyn_IntType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_IntType_struct)); _temp334[ 0]=({ struct Cyc_Absyn_IntType_struct
! _temp335; _temp335.tag= Cyc_Absyn_IntType; _temp335.f1=( void*) sgn; _temp335.f2=(
! void*) _temp332; _temp335;}); _temp334;}); goto _LL327; _LL331: Cyc_Parse_err(
  _tag_arr("sign specification on non-integral type", sizeof( unsigned char), 40u),
! last_loc); goto _LL327; _LL327:;} if( seen_size){ void* _temp336= t; void*
! _temp342; _LL338: if(( unsigned int) _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_IntType:
! 0){ _LL343: _temp342=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp336)->f1;
! goto _LL339;} else{ goto _LL340;} _LL340: goto _LL341; _LL339: t=( void*)({
! struct Cyc_Absyn_IntType_struct* _temp344=( struct Cyc_Absyn_IntType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_IntType_struct)); _temp344[ 0]=({ struct Cyc_Absyn_IntType_struct
! _temp345; _temp345.tag= Cyc_Absyn_IntType; _temp345.f1=( void*) _temp342;
! _temp345.f2=( void*) sz; _temp345;}); _temp344;}); goto _LL337; _LL341: Cyc_Parse_err(
  _tag_arr("size qualifier on non-integral type", sizeof( unsigned char), 36u),
! last_loc); goto _LL337; _LL337:;}} return({ struct _tuple5 _temp346; _temp346.f1=
! t; _temp346.f2= declopt; _temp346;});} static struct Cyc_List_List* Cyc_Parse_apply_tmss(
  struct Cyc_Absyn_Tqual tq, void* t, struct Cyc_List_List* ds, struct Cyc_List_List*
! shared_atts){ if( ds ==  0){ return 0;}{ struct Cyc_Parse_Declarator* _temp347=(
  struct Cyc_Parse_Declarator*)(( struct Cyc_List_List*) _check_null( ds))->hd;
! struct _tuple1* _temp348= _temp347->id; struct Cyc_List_List* _temp351; struct
! Cyc_List_List* _temp353; void* _temp355; struct Cyc_Absyn_Tqual _temp357; struct
! _tuple6 _temp349= Cyc_Parse_apply_tms( tq, t, shared_atts, _temp347->tms);
! _LL358: _temp357= _temp349.f1; goto _LL356; _LL356: _temp355= _temp349.f2; goto
! _LL354; _LL354: _temp353= _temp349.f3; goto _LL352; _LL352: _temp351= _temp349.f4;
! goto _LL350; _LL350: return({ struct Cyc_List_List* _temp359=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp359->hd=( void*)({ struct
! _tuple7* _temp360=( struct _tuple7*) _cycalloc( sizeof( struct _tuple7));
! _temp360->f1= _temp348; _temp360->f2= _temp357; _temp360->f3= _temp355; _temp360->f4=
! _temp353; _temp360->f5= _temp351; _temp360;}); _temp359->tl= Cyc_Parse_apply_tmss(
! _temp357, Cyc_Tcutil_copy_type( t),(( struct Cyc_List_List*) _check_null( ds))->tl,
! shared_atts); _temp359;});}} static struct _tuple6 Cyc_Parse_apply_tms( struct
  Cyc_Absyn_Tqual tq, void* t, struct Cyc_List_List* atts, struct Cyc_List_List*
! tms){ if( tms ==  0){ return({ struct _tuple6 _temp361; _temp361.f1= tq;
! _temp361.f2= t; _temp361.f3= 0; _temp361.f4= atts; _temp361;});}{ void* _temp362=(
  void*)(( struct Cyc_List_List*) _check_null( tms))->hd; struct Cyc_Absyn_Exp*
! _temp376; void* _temp378; struct Cyc_Position_Segment* _temp380; struct Cyc_List_List*
! _temp382; struct Cyc_Absyn_Tqual _temp384; void* _temp386; void* _temp388;
! struct Cyc_List_List* _temp390; struct Cyc_Position_Segment* _temp392; _LL364:
! if( _temp362 == ( void*) Cyc_Absyn_Carray_mod){ goto _LL365;} else{ goto _LL366;}
! _LL366: if(( unsigned int) _temp362 >  1u?*(( int*) _temp362) ==  Cyc_Absyn_ConstArray_mod:
! 0){ _LL377: _temp376=(( struct Cyc_Absyn_ConstArray_mod_struct*) _temp362)->f1;
! goto _LL367;} else{ goto _LL368;} _LL368: if(( unsigned int) _temp362 >  1u?*((
! int*) _temp362) ==  Cyc_Absyn_Function_mod: 0){ _LL379: _temp378=( void*)((
! struct Cyc_Absyn_Function_mod_struct*) _temp362)->f1; goto _LL369;} else{ goto
! _LL370;} _LL370: if(( unsigned int) _temp362 >  1u?*(( int*) _temp362) ==  Cyc_Absyn_TypeParams_mod:
! 0){ _LL383: _temp382=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp362)->f1;
! goto _LL381; _LL381: _temp380=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp362)->f2; goto _LL371;} else{ goto _LL372;} _LL372: if(( unsigned int)
! _temp362 >  1u?*(( int*) _temp362) ==  Cyc_Absyn_Pointer_mod: 0){ _LL389:
! _temp388=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp362)->f1; goto
! _LL387; _LL387: _temp386=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp362)->f2; goto _LL385; _LL385: _temp384=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp362)->f3; goto _LL373;} else{ goto _LL374;} _LL374: if(( unsigned int)
! _temp362 >  1u?*(( int*) _temp362) ==  Cyc_Absyn_Attributes_mod: 0){ _LL393:
! _temp392=(( struct Cyc_Absyn_Attributes_mod_struct*) _temp362)->f1; goto _LL391;
! _LL391: _temp390=(( struct Cyc_Absyn_Attributes_mod_struct*) _temp362)->f2; goto
! _LL375;} else{ goto _LL363;} _LL365: return Cyc_Parse_apply_tms( Cyc_Absyn_empty_tqual(),(
! void*)({ struct Cyc_Absyn_ArrayType_struct* _temp394=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp394[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp395; _temp395.tag= Cyc_Absyn_ArrayType; _temp395.f1=(
! void*) t; _temp395.f2= tq; _temp395.f3= 0; _temp395;}); _temp394;}), atts,((
! struct Cyc_List_List*) _check_null( tms))->tl); _LL367: return Cyc_Parse_apply_tms(
! Cyc_Absyn_empty_tqual(),( void*)({ struct Cyc_Absyn_ArrayType_struct* _temp396=(
  struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp396[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp397; _temp397.tag= Cyc_Absyn_ArrayType;
! _temp397.f1=( void*) t; _temp397.f2= tq; _temp397.f3=( struct Cyc_Absyn_Exp*)
! _temp376; _temp397;}); _temp396;}), atts,(( struct Cyc_List_List*) _check_null(
! tms))->tl); _LL369: { void* _temp398= _temp378; struct Cyc_List_List* _temp404;
! struct Cyc_Core_Opt* _temp406; struct Cyc_Absyn_VarargInfo* _temp408; int
! _temp410; struct Cyc_List_List* _temp412; struct Cyc_Position_Segment* _temp414;
! _LL400: if(*(( int*) _temp398) ==  Cyc_Absyn_WithTypes){ _LL413: _temp412=((
! struct Cyc_Absyn_WithTypes_struct*) _temp398)->f1; goto _LL411; _LL411: _temp410=((
! struct Cyc_Absyn_WithTypes_struct*) _temp398)->f2; goto _LL409; _LL409: _temp408=((
! struct Cyc_Absyn_WithTypes_struct*) _temp398)->f3; goto _LL407; _LL407: _temp406=((
! struct Cyc_Absyn_WithTypes_struct*) _temp398)->f4; goto _LL405; _LL405: _temp404=((
! struct Cyc_Absyn_WithTypes_struct*) _temp398)->f5; goto _LL401;} else{ goto
! _LL402;} _LL402: if(*(( int*) _temp398) ==  Cyc_Absyn_NoTypes){ _LL415: _temp414=((
! struct Cyc_Absyn_NoTypes_struct*) _temp398)->f2; goto _LL403;} else{ goto _LL399;}
! _LL401: { struct Cyc_List_List* typvars= 0; struct Cyc_List_List* fn_atts= 0;
  struct Cyc_List_List* new_atts= 0;{ struct Cyc_List_List* as= atts; for( 0; as
  !=  0; as=(( struct Cyc_List_List*) _check_null( as))->tl){ if( Cyc_Absyn_fntype_att((
  void*)(( struct Cyc_List_List*) _check_null( as))->hd)){ fn_atts=({ struct Cyc_List_List*
  _temp416=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
  _temp416->hd=( void*)(( void*)(( struct Cyc_List_List*) _check_null( as))->hd);
! _temp416->tl= fn_atts; _temp416;});} else{ new_atts=({ struct Cyc_List_List*
! _temp417=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp417->hd=( void*)(( void*)(( struct Cyc_List_List*) _check_null( as))->hd);
! _temp417->tl= new_atts; _temp417;});}}} if((( struct Cyc_List_List*) _check_null(
! tms))->tl !=  0){ void* _temp418=( void*)(( struct Cyc_List_List*) _check_null(((
  struct Cyc_List_List*) _check_null( tms))->tl))->hd; struct Cyc_List_List*
! _temp424; _LL420: if(( unsigned int) _temp418 >  1u?*(( int*) _temp418) ==  Cyc_Absyn_TypeParams_mod:
! 0){ _LL425: _temp424=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp418)->f1;
! goto _LL421;} else{ goto _LL422;} _LL422: goto _LL423; _LL421: typvars= _temp424;
! tms=(( struct Cyc_List_List*) _check_null( tms))->tl; goto _LL419; _LL423: goto
! _LL419; _LL419:;} if((((( ! _temp410? _temp408 ==  0: 0)? _temp412 !=  0: 0)?((
! struct Cyc_List_List*) _check_null( _temp412))->tl ==  0: 0)?(*(( struct _tuple2*)((
! struct Cyc_List_List*) _check_null( _temp412))->hd)).f1 ==  0: 0)?(*(( struct
! _tuple2*)(( struct Cyc_List_List*) _check_null( _temp412))->hd)).f3 == ( void*)
! Cyc_Absyn_VoidType: 0){ _temp412= 0;} t= Cyc_Parse_array2ptr( t);(( void(*)(
  void(* f)( struct _tuple2*), struct Cyc_List_List* x)) Cyc_List_iter)( Cyc_Parse_arg_array2ptr,
! _temp412); return Cyc_Parse_apply_tms( Cyc_Absyn_empty_tqual(), Cyc_Absyn_function_typ(
! typvars, _temp406, t, _temp412, _temp410, _temp408, _temp404, fn_atts), new_atts,((
! struct Cyc_List_List*) _check_null( tms))->tl);} _LL403:( int) _throw( Cyc_Parse_abort(
  _tag_arr("function declaration without parameter types", sizeof( unsigned char),
! 45u), _temp414)); _LL399:;} _LL371: if((( struct Cyc_List_List*) _check_null(
! tms))->tl ==  0){ return({ struct _tuple6 _temp426; _temp426.f1= tq; _temp426.f2=
! t; _temp426.f3= _temp382; _temp426.f4= atts; _temp426;});}( int) _throw( Cyc_Parse_abort(
  _tag_arr("type parameters must appear before function arguments in declarator",
! sizeof( unsigned char), 68u), _temp380)); _LL373: { void* _temp427= _temp388;
! struct Cyc_Absyn_Exp* _temp435; struct Cyc_Absyn_Exp* _temp437; _LL429: if((
! unsigned int) _temp427 >  1u?*(( int*) _temp427) ==  Cyc_Absyn_NonNullable_ps: 0){
! _LL436: _temp435=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp427)->f1; goto
! _LL430;} else{ goto _LL431;} _LL431: if(( unsigned int) _temp427 >  1u?*(( int*)
! _temp427) ==  Cyc_Absyn_Nullable_ps: 0){ _LL438: _temp437=(( struct Cyc_Absyn_Nullable_ps_struct*)
! _temp427)->f1; goto _LL432;} else{ goto _LL433;} _LL433: if( _temp427 == ( void*)
! Cyc_Absyn_TaggedArray_ps){ goto _LL434;} else{ goto _LL428;} _LL430: return Cyc_Parse_apply_tms(
! _temp384, Cyc_Absyn_atb_typ( t, _temp386, tq,( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp439=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp439[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp440; _temp440.tag= Cyc_Absyn_Upper_b;
! _temp440.f1= _temp435; _temp440;}); _temp439;})), atts,(( struct Cyc_List_List*)
! _check_null( tms))->tl); _LL432: return Cyc_Parse_apply_tms( _temp384, Cyc_Absyn_starb_typ(
! t, _temp386, tq,( void*)({ struct Cyc_Absyn_Upper_b_struct* _temp441=( struct
  Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp441[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp442; _temp442.tag= Cyc_Absyn_Upper_b;
! _temp442.f1= _temp437; _temp442;}); _temp441;})), atts,(( struct Cyc_List_List*)
! _check_null( tms))->tl); _LL434: return Cyc_Parse_apply_tms( _temp384, Cyc_Absyn_tagged_typ(
! t, _temp386, tq), atts,(( struct Cyc_List_List*) _check_null( tms))->tl); _LL428:;}
! _LL375: return Cyc_Parse_apply_tms( tq, t, Cyc_List_append( atts, _temp390),((
! struct Cyc_List_List*) _check_null( tms))->tl); _LL363:;}} void* Cyc_Parse_speclist2typ(
  struct Cyc_List_List* tss, struct Cyc_Position_Segment* loc){ struct Cyc_Core_Opt*
! _temp445; void* _temp447; struct _tuple5 _temp443= Cyc_Parse_collapse_type_specifiers(
! tss, loc); _LL448: _temp447= _temp443.f1; goto _LL446; _LL446: _temp445=
! _temp443.f2; goto _LL444; _LL444: if( _temp445 !=  0){ Cyc_Parse_warn( _tag_arr("ignoring nested type declaration(s) in specifier list",
! sizeof( unsigned char), 54u), loc);} return _temp447;} static struct Cyc_Absyn_Stmt*
  Cyc_Parse_flatten_decl( struct Cyc_Absyn_Decl* d, struct Cyc_Absyn_Stmt* s){
! return Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Decl_s_struct* _temp449=(
  struct Cyc_Absyn_Decl_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Decl_s_struct));
! _temp449[ 0]=({ struct Cyc_Absyn_Decl_s_struct _temp450; _temp450.tag= Cyc_Absyn_Decl_s;
! _temp450.f1= d; _temp450.f2= s; _temp450;}); _temp449;}), Cyc_Position_segment_join(
  d->loc, s->loc));} static struct Cyc_Absyn_Stmt* Cyc_Parse_flatten_declarations(
  struct Cyc_List_List* ds, struct Cyc_Absyn_Stmt* s){ return(( struct Cyc_Absyn_Stmt*(*)(
  struct Cyc_Absyn_Stmt*(* f)( struct Cyc_Absyn_Decl*, struct Cyc_Absyn_Stmt*),
--- 1152,1330 ----
  void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp313=( struct Cyc_Absyn_KnownTunion_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp313[ 0]=({ struct
  Cyc_Absyn_KnownTunion_struct _temp314; _temp314.tag= Cyc_Absyn_KnownTunion;
! _temp314.f1= _temp299; _temp314;}); _temp313;})); _temp312.targs= _temp309;
! _temp312.rgn=( void*)(( void*) Cyc_Absyn_HeapRgn); _temp312;}); _temp311;});
! _temp310;}); if( _temp299->fields !=  0){ declopt=({ struct Cyc_Core_Opt*
! _temp315=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp315->v=( void*) _temp277; _temp315;});} goto _LL286;} _LL292: { struct Cyc_List_List*
! _temp316=(( struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Tvar*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Parse_tvar2typ, _temp301->tvs); t=(
! void*)({ struct Cyc_Absyn_UnionType_struct* _temp317=( struct Cyc_Absyn_UnionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct)); _temp317[ 0]=({ struct
! Cyc_Absyn_UnionType_struct _temp318; _temp318.tag= Cyc_Absyn_UnionType; _temp318.f1=(
! struct _tuple1*)(( struct _tuple1*)(( struct Cyc_Core_Opt*) _check_null(
! _temp301->name))->v); _temp318.f2= _temp316; _temp318.f3= 0; _temp318;});
! _temp317;}); if( _temp301->fields !=  0){ declopt=({ struct Cyc_Core_Opt*
! _temp319=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp319->v=( void*) _temp277; _temp319;});} goto _LL286;} _LL294: t=( void*)({
! struct Cyc_Absyn_EnumType_struct* _temp320=( struct Cyc_Absyn_EnumType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_EnumType_struct)); _temp320[ 0]=({ struct
! Cyc_Absyn_EnumType_struct _temp321; _temp321.tag= Cyc_Absyn_EnumType; _temp321.f1=
! _temp303->name; _temp321.f2= 0; _temp321;}); _temp320;}); declopt=({ struct Cyc_Core_Opt*
! _temp322=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp322->v=( void*) _temp277; _temp322;}); goto _LL286; _LL296:(( int(*)(
  struct _tagged_arr msg, struct Cyc_Position_Segment* sg)) Cyc_Parse_abort)(
  _tag_arr("bad declaration within type specifier", sizeof( unsigned char), 38u),
  _temp277->loc); goto _LL286; _LL286:;}} else{ Cyc_Parse_err( Cyc_Parse_msg3,
  _temp277->loc);} goto _LL252; _LL252:;} if( ! seen_type){ if( ! seen_sign? !
  seen_size: 0){ Cyc_Parse_err( _tag_arr("missing type withing specifier", sizeof(
  unsigned char), 31u), last_loc);} t=( void*)({ struct Cyc_Absyn_IntType_struct*
! _temp323=( struct Cyc_Absyn_IntType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_IntType_struct));
! _temp323[ 0]=({ struct Cyc_Absyn_IntType_struct _temp324; _temp324.tag= Cyc_Absyn_IntType;
! _temp324.f1=( void*) sgn; _temp324.f2=( void*) sz; _temp324;}); _temp323;});}
! else{ if( seen_sign){ void* _temp325= t; void* _temp331; _LL327: if((
! unsigned int) _temp325 >  4u?*(( int*) _temp325) ==  Cyc_Absyn_IntType: 0){
! _LL332: _temp331=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp325)->f2;
! goto _LL328;} else{ goto _LL329;} _LL329: goto _LL330; _LL328: t=( void*)({
! struct Cyc_Absyn_IntType_struct* _temp333=( struct Cyc_Absyn_IntType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_IntType_struct)); _temp333[ 0]=({ struct Cyc_Absyn_IntType_struct
! _temp334; _temp334.tag= Cyc_Absyn_IntType; _temp334.f1=( void*) sgn; _temp334.f2=(
! void*) _temp331; _temp334;}); _temp333;}); goto _LL326; _LL330: Cyc_Parse_err(
  _tag_arr("sign specification on non-integral type", sizeof( unsigned char), 40u),
! last_loc); goto _LL326; _LL326:;} if( seen_size){ void* _temp335= t; void*
! _temp341; _LL337: if(( unsigned int) _temp335 >  4u?*(( int*) _temp335) ==  Cyc_Absyn_IntType:
! 0){ _LL342: _temp341=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp335)->f1;
! goto _LL338;} else{ goto _LL339;} _LL339: goto _LL340; _LL338: t=( void*)({
! struct Cyc_Absyn_IntType_struct* _temp343=( struct Cyc_Absyn_IntType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_IntType_struct)); _temp343[ 0]=({ struct Cyc_Absyn_IntType_struct
! _temp344; _temp344.tag= Cyc_Absyn_IntType; _temp344.f1=( void*) _temp341;
! _temp344.f2=( void*) sz; _temp344;}); _temp343;}); goto _LL336; _LL340: Cyc_Parse_err(
  _tag_arr("size qualifier on non-integral type", sizeof( unsigned char), 36u),
! last_loc); goto _LL336; _LL336:;}} return({ struct _tuple5 _temp345; _temp345.f1=
! t; _temp345.f2= declopt; _temp345;});} static struct Cyc_List_List* Cyc_Parse_apply_tmss(
  struct Cyc_Absyn_Tqual tq, void* t, struct Cyc_List_List* ds, struct Cyc_List_List*
! shared_atts){ if( ds ==  0){ return 0;}{ struct Cyc_Parse_Declarator* _temp346=(
  struct Cyc_Parse_Declarator*)(( struct Cyc_List_List*) _check_null( ds))->hd;
! struct _tuple1* _temp347= _temp346->id; struct Cyc_List_List* _temp350; struct
! Cyc_List_List* _temp352; void* _temp354; struct Cyc_Absyn_Tqual _temp356; struct
! _tuple6 _temp348= Cyc_Parse_apply_tms( tq, t, shared_atts, _temp346->tms);
! _LL357: _temp356= _temp348.f1; goto _LL355; _LL355: _temp354= _temp348.f2; goto
! _LL353; _LL353: _temp352= _temp348.f3; goto _LL351; _LL351: _temp350= _temp348.f4;
! goto _LL349; _LL349: return({ struct Cyc_List_List* _temp358=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp358->hd=( void*)({ struct
! _tuple7* _temp359=( struct _tuple7*) _cycalloc( sizeof( struct _tuple7));
! _temp359->f1= _temp347; _temp359->f2= _temp356; _temp359->f3= _temp354; _temp359->f4=
! _temp352; _temp359->f5= _temp350; _temp359;}); _temp358->tl= Cyc_Parse_apply_tmss(
! _temp356, Cyc_Tcutil_copy_type( t),(( struct Cyc_List_List*) _check_null( ds))->tl,
! shared_atts); _temp358;});}} static struct _tuple6 Cyc_Parse_apply_tms( struct
  Cyc_Absyn_Tqual tq, void* t, struct Cyc_List_List* atts, struct Cyc_List_List*
! tms){ if( tms ==  0){ return({ struct _tuple6 _temp360; _temp360.f1= tq;
! _temp360.f2= t; _temp360.f3= 0; _temp360.f4= atts; _temp360;});}{ void* _temp361=(
  void*)(( struct Cyc_List_List*) _check_null( tms))->hd; struct Cyc_Absyn_Exp*
! _temp375; void* _temp377; struct Cyc_Position_Segment* _temp379; struct Cyc_List_List*
! _temp381; struct Cyc_Absyn_Tqual _temp383; void* _temp385; void* _temp387;
! struct Cyc_List_List* _temp389; struct Cyc_Position_Segment* _temp391; _LL363:
! if( _temp361 == ( void*) Cyc_Absyn_Carray_mod){ goto _LL364;} else{ goto _LL365;}
! _LL365: if(( unsigned int) _temp361 >  1u?*(( int*) _temp361) ==  Cyc_Absyn_ConstArray_mod:
! 0){ _LL376: _temp375=(( struct Cyc_Absyn_ConstArray_mod_struct*) _temp361)->f1;
! goto _LL366;} else{ goto _LL367;} _LL367: if(( unsigned int) _temp361 >  1u?*((
! int*) _temp361) ==  Cyc_Absyn_Function_mod: 0){ _LL378: _temp377=( void*)((
! struct Cyc_Absyn_Function_mod_struct*) _temp361)->f1; goto _LL368;} else{ goto
! _LL369;} _LL369: if(( unsigned int) _temp361 >  1u?*(( int*) _temp361) ==  Cyc_Absyn_TypeParams_mod:
! 0){ _LL382: _temp381=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp361)->f1;
! goto _LL380; _LL380: _temp379=(( struct Cyc_Absyn_TypeParams_mod_struct*)
! _temp361)->f2; goto _LL370;} else{ goto _LL371;} _LL371: if(( unsigned int)
! _temp361 >  1u?*(( int*) _temp361) ==  Cyc_Absyn_Pointer_mod: 0){ _LL388:
! _temp387=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*) _temp361)->f1; goto
! _LL386; _LL386: _temp385=( void*)(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp361)->f2; goto _LL384; _LL384: _temp383=(( struct Cyc_Absyn_Pointer_mod_struct*)
! _temp361)->f3; goto _LL372;} else{ goto _LL373;} _LL373: if(( unsigned int)
! _temp361 >  1u?*(( int*) _temp361) ==  Cyc_Absyn_Attributes_mod: 0){ _LL392:
! _temp391=(( struct Cyc_Absyn_Attributes_mod_struct*) _temp361)->f1; goto _LL390;
! _LL390: _temp389=(( struct Cyc_Absyn_Attributes_mod_struct*) _temp361)->f2; goto
! _LL374;} else{ goto _LL362;} _LL364: return Cyc_Parse_apply_tms( Cyc_Absyn_empty_tqual(),(
! void*)({ struct Cyc_Absyn_ArrayType_struct* _temp393=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp393[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp394; _temp394.tag= Cyc_Absyn_ArrayType; _temp394.f1=(
! void*) t; _temp394.f2= tq; _temp394.f3= 0; _temp394;}); _temp393;}), atts,((
! struct Cyc_List_List*) _check_null( tms))->tl); _LL366: return Cyc_Parse_apply_tms(
! Cyc_Absyn_empty_tqual(),( void*)({ struct Cyc_Absyn_ArrayType_struct* _temp395=(
  struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp395[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp396; _temp396.tag= Cyc_Absyn_ArrayType;
! _temp396.f1=( void*) t; _temp396.f2= tq; _temp396.f3=( struct Cyc_Absyn_Exp*)
! _temp375; _temp396;}); _temp395;}), atts,(( struct Cyc_List_List*) _check_null(
! tms))->tl); _LL368: { void* _temp397= _temp377; struct Cyc_List_List* _temp403;
! struct Cyc_Core_Opt* _temp405; struct Cyc_Absyn_VarargInfo* _temp407; int
! _temp409; struct Cyc_List_List* _temp411; struct Cyc_Position_Segment* _temp413;
! _LL399: if(*(( int*) _temp397) ==  Cyc_Absyn_WithTypes){ _LL412: _temp411=((
! struct Cyc_Absyn_WithTypes_struct*) _temp397)->f1; goto _LL410; _LL410: _temp409=((
! struct Cyc_Absyn_WithTypes_struct*) _temp397)->f2; goto _LL408; _LL408: _temp407=((
! struct Cyc_Absyn_WithTypes_struct*) _temp397)->f3; goto _LL406; _LL406: _temp405=((
! struct Cyc_Absyn_WithTypes_struct*) _temp397)->f4; goto _LL404; _LL404: _temp403=((
! struct Cyc_Absyn_WithTypes_struct*) _temp397)->f5; goto _LL400;} else{ goto
! _LL401;} _LL401: if(*(( int*) _temp397) ==  Cyc_Absyn_NoTypes){ _LL414: _temp413=((
! struct Cyc_Absyn_NoTypes_struct*) _temp397)->f2; goto _LL402;} else{ goto _LL398;}
! _LL400: { struct Cyc_List_List* typvars= 0; struct Cyc_List_List* fn_atts= 0;
  struct Cyc_List_List* new_atts= 0;{ struct Cyc_List_List* as= atts; for( 0; as
  !=  0; as=(( struct Cyc_List_List*) _check_null( as))->tl){ if( Cyc_Absyn_fntype_att((
  void*)(( struct Cyc_List_List*) _check_null( as))->hd)){ fn_atts=({ struct Cyc_List_List*
+ _temp415=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
+ _temp415->hd=( void*)(( void*)(( struct Cyc_List_List*) _check_null( as))->hd);
+ _temp415->tl= fn_atts; _temp415;});} else{ new_atts=({ struct Cyc_List_List*
  _temp416=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
  _temp416->hd=( void*)(( void*)(( struct Cyc_List_List*) _check_null( as))->hd);
! _temp416->tl= new_atts; _temp416;});}}} if((( struct Cyc_List_List*) _check_null(
! tms))->tl !=  0){ void* _temp417=( void*)(( struct Cyc_List_List*) _check_null(((
  struct Cyc_List_List*) _check_null( tms))->tl))->hd; struct Cyc_List_List*
! _temp423; _LL419: if(( unsigned int) _temp417 >  1u?*(( int*) _temp417) ==  Cyc_Absyn_TypeParams_mod:
! 0){ _LL424: _temp423=(( struct Cyc_Absyn_TypeParams_mod_struct*) _temp417)->f1;
! goto _LL420;} else{ goto _LL421;} _LL421: goto _LL422; _LL420: typvars= _temp423;
! tms=(( struct Cyc_List_List*) _check_null( tms))->tl; goto _LL418; _LL422: goto
! _LL418; _LL418:;} if((((( ! _temp409? _temp407 ==  0: 0)? _temp411 !=  0: 0)?((
! struct Cyc_List_List*) _check_null( _temp411))->tl ==  0: 0)?(*(( struct _tuple2*)((
! struct Cyc_List_List*) _check_null( _temp411))->hd)).f1 ==  0: 0)?(*(( struct
! _tuple2*)(( struct Cyc_List_List*) _check_null( _temp411))->hd)).f3 == ( void*)
! Cyc_Absyn_VoidType: 0){ _temp411= 0;} t= Cyc_Parse_array2ptr( t);(( void(*)(
  void(* f)( struct _tuple2*), struct Cyc_List_List* x)) Cyc_List_iter)( Cyc_Parse_arg_array2ptr,
! _temp411); return Cyc_Parse_apply_tms( Cyc_Absyn_empty_tqual(), Cyc_Absyn_function_typ(
! typvars, _temp405, t, _temp411, _temp409, _temp407, _temp403, fn_atts), new_atts,((
! struct Cyc_List_List*) _check_null( tms))->tl);} _LL402:( int) _throw( Cyc_Parse_abort(
  _tag_arr("function declaration without parameter types", sizeof( unsigned char),
! 45u), _temp413)); _LL398:;} _LL370: if((( struct Cyc_List_List*) _check_null(
! tms))->tl ==  0){ return({ struct _tuple6 _temp425; _temp425.f1= tq; _temp425.f2=
! t; _temp425.f3= _temp381; _temp425.f4= atts; _temp425;});}( int) _throw( Cyc_Parse_abort(
  _tag_arr("type parameters must appear before function arguments in declarator",
! sizeof( unsigned char), 68u), _temp379)); _LL372: { void* _temp426= _temp387;
! struct Cyc_Absyn_Exp* _temp434; struct Cyc_Absyn_Exp* _temp436; _LL428: if((
! unsigned int) _temp426 >  1u?*(( int*) _temp426) ==  Cyc_Absyn_NonNullable_ps: 0){
! _LL435: _temp434=(( struct Cyc_Absyn_NonNullable_ps_struct*) _temp426)->f1; goto
! _LL429;} else{ goto _LL430;} _LL430: if(( unsigned int) _temp426 >  1u?*(( int*)
! _temp426) ==  Cyc_Absyn_Nullable_ps: 0){ _LL437: _temp436=(( struct Cyc_Absyn_Nullable_ps_struct*)
! _temp426)->f1; goto _LL431;} else{ goto _LL432;} _LL432: if( _temp426 == ( void*)
! Cyc_Absyn_TaggedArray_ps){ goto _LL433;} else{ goto _LL427;} _LL429: return Cyc_Parse_apply_tms(
! _temp383, Cyc_Absyn_atb_typ( t, _temp385, tq,( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp438=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp438[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp439; _temp439.tag= Cyc_Absyn_Upper_b;
! _temp439.f1= _temp434; _temp439;}); _temp438;})), atts,(( struct Cyc_List_List*)
! _check_null( tms))->tl); _LL431: return Cyc_Parse_apply_tms( _temp383, Cyc_Absyn_starb_typ(
! t, _temp385, tq,( void*)({ struct Cyc_Absyn_Upper_b_struct* _temp440=( struct
  Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp440[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp441; _temp441.tag= Cyc_Absyn_Upper_b;
! _temp441.f1= _temp436; _temp441;}); _temp440;})), atts,(( struct Cyc_List_List*)
! _check_null( tms))->tl); _LL433: return Cyc_Parse_apply_tms( _temp383, Cyc_Absyn_tagged_typ(
! t, _temp385, tq), atts,(( struct Cyc_List_List*) _check_null( tms))->tl); _LL427:;}
! _LL374: return Cyc_Parse_apply_tms( tq, t, Cyc_List_append( atts, _temp389),((
! struct Cyc_List_List*) _check_null( tms))->tl); _LL362:;}} void* Cyc_Parse_speclist2typ(
  struct Cyc_List_List* tss, struct Cyc_Position_Segment* loc){ struct Cyc_Core_Opt*
! _temp444; void* _temp446; struct _tuple5 _temp442= Cyc_Parse_collapse_type_specifiers(
! tss, loc); _LL447: _temp446= _temp442.f1; goto _LL445; _LL445: _temp444=
! _temp442.f2; goto _LL443; _LL443: if( _temp444 !=  0){ Cyc_Parse_warn( _tag_arr("ignoring nested type declaration(s) in specifier list",
! sizeof( unsigned char), 54u), loc);} return _temp446;} static struct Cyc_Absyn_Stmt*
  Cyc_Parse_flatten_decl( struct Cyc_Absyn_Decl* d, struct Cyc_Absyn_Stmt* s){
! return Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Decl_s_struct* _temp448=(
  struct Cyc_Absyn_Decl_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Decl_s_struct));
! _temp448[ 0]=({ struct Cyc_Absyn_Decl_s_struct _temp449; _temp449.tag= Cyc_Absyn_Decl_s;
! _temp449.f1= d; _temp449.f2= s; _temp449;}); _temp448;}), Cyc_Position_segment_join(
  d->loc, s->loc));} static struct Cyc_Absyn_Stmt* Cyc_Parse_flatten_declarations(
  struct Cyc_List_List* ds, struct Cyc_Absyn_Stmt* s){ return(( struct Cyc_Absyn_Stmt*(*)(
  struct Cyc_Absyn_Stmt*(* f)( struct Cyc_Absyn_Decl*, struct Cyc_Absyn_Stmt*),
***************
*** 1341,1570 ****
  sizeof( unsigned char), 47u), loc);} if( tss ==  0){ Cyc_Parse_err( _tag_arr("missing type specifiers in declaration",
  sizeof( unsigned char), 39u), loc); return 0;} if( ds->sc !=  0){ switch(( enum 
  Cyc_Parse_Storage_class)(( struct Cyc_Core_Opt*) _check_null( ds->sc))->v){ case
! Cyc_Parse_Typedef_sc: _LL451: istypedef= 1; break; case Cyc_Parse_Extern_sc:
! _LL452: s=( void*) Cyc_Absyn_Extern; break; case Cyc_Parse_ExternC_sc: _LL453: s=(
! void*) Cyc_Absyn_ExternC; break; case Cyc_Parse_Static_sc: _LL454: s=( void*)
! Cyc_Absyn_Static; break; case Cyc_Parse_Auto_sc: _LL455: s=( void*) Cyc_Absyn_Public;
! break; case Cyc_Parse_Register_sc: _LL456: s=( void*) Cyc_Absyn_Public; break;
! case Cyc_Parse_Abstract_sc: _LL457: s=( void*) Cyc_Absyn_Abstract; break;}}{
! struct Cyc_List_List* _temp461; struct Cyc_List_List* _temp463; struct _tuple0
! _temp459=(( struct _tuple0(*)( struct Cyc_List_List* x)) Cyc_List_split)( ids);
! _LL464: _temp463= _temp459.f1; goto _LL462; _LL462: _temp461= _temp459.f2; goto
! _LL460; _LL460: { int exps_empty= 1;{ struct Cyc_List_List* es= _temp461; for( 0;
  es !=  0; es=(( struct Cyc_List_List*) _check_null( es))->tl){ if(( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( es))->hd !=  0){ exps_empty= 0; break;}}}{
! struct _tuple5 _temp465= Cyc_Parse_collapse_type_specifiers( tss, loc); if(
! _temp463 ==  0){ struct Cyc_Core_Opt* _temp468; void* _temp470; struct _tuple5
! _temp466= _temp465; _LL471: _temp470= _temp466.f1; goto _LL469; _LL469: _temp468=
! _temp466.f2; goto _LL467; _LL467: if( _temp468 !=  0){ struct Cyc_Absyn_Decl* d=(
! struct Cyc_Absyn_Decl*)(( struct Cyc_Core_Opt*) _check_null( _temp468))->v;{
! void* _temp472=( void*) d->r; struct Cyc_Absyn_Enumdecl* _temp484; struct Cyc_Absyn_Structdecl*
! _temp486; struct Cyc_Absyn_Uniondecl* _temp488; struct Cyc_Absyn_Tuniondecl*
! _temp490; _LL474: if(*(( int*) _temp472) ==  Cyc_Absyn_Enum_d){ _LL485: _temp484=((
! struct Cyc_Absyn_Enum_d_struct*) _temp472)->f1; goto _LL475;} else{ goto _LL476;}
! _LL476: if(*(( int*) _temp472) ==  Cyc_Absyn_Struct_d){ _LL487: _temp486=((
! struct Cyc_Absyn_Struct_d_struct*) _temp472)->f1; goto _LL477;} else{ goto
! _LL478;} _LL478: if(*(( int*) _temp472) ==  Cyc_Absyn_Union_d){ _LL489: _temp488=((
! struct Cyc_Absyn_Union_d_struct*) _temp472)->f1; goto _LL479;} else{ goto _LL480;}
! _LL480: if(*(( int*) _temp472) ==  Cyc_Absyn_Tunion_d){ _LL491: _temp490=((
! struct Cyc_Absyn_Tunion_d_struct*) _temp472)->f1; goto _LL481;} else{ goto
! _LL482;} _LL482: goto _LL483; _LL475:( void*)( _temp484->sc=( void*) s); if(
  atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on enum", sizeof(
! unsigned char), 23u), loc);} goto _LL473; _LL477:( void*)( _temp486->sc=( void*)
! s); _temp486->attributes= atts; goto _LL473; _LL479:( void*)( _temp488->sc=(
! void*) s); _temp488->attributes= atts; goto _LL473; _LL481:( void*)( _temp490->sc=(
  void*) s); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on tunion",
! sizeof( unsigned char), 25u), loc);} goto _LL473; _LL483: Cyc_Parse_err(
! _tag_arr("bad declaration", sizeof( unsigned char), 16u), loc); return 0; _LL473:;}
! return({ struct Cyc_List_List* _temp492=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp492->hd=( void*) d; _temp492->tl= 0;
! _temp492;});} else{ void* _temp493= _temp470; struct Cyc_List_List* _temp507;
! struct _tuple1* _temp509; struct Cyc_Absyn_TunionInfo _temp511; void* _temp513;
! struct Cyc_Absyn_Tuniondecl** _temp515; struct Cyc_Absyn_TunionInfo _temp517;
! struct Cyc_List_List* _temp519; void* _temp521; struct Cyc_Absyn_UnknownTunionInfo
! _temp523; int _temp525; struct _tuple1* _temp527; struct Cyc_List_List* _temp529;
! struct _tuple1* _temp531; struct _tuple1* _temp533; _LL495: if(( unsigned int)
! _temp493 >  4u?*(( int*) _temp493) ==  Cyc_Absyn_StructType: 0){ _LL510:
! _temp509=(( struct Cyc_Absyn_StructType_struct*) _temp493)->f1; goto _LL508;
! _LL508: _temp507=(( struct Cyc_Absyn_StructType_struct*) _temp493)->f2; goto
! _LL496;} else{ goto _LL497;} _LL497: if(( unsigned int) _temp493 >  4u?*(( int*)
! _temp493) ==  Cyc_Absyn_TunionType: 0){ _LL512: _temp511=(( struct Cyc_Absyn_TunionType_struct*)
! _temp493)->f1; _LL514: _temp513=( void*) _temp511.tunion_info; if(*(( int*)
! _temp513) ==  Cyc_Absyn_KnownTunion){ _LL516: _temp515=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp513)->f1; goto _LL498;} else{ goto _LL499;}} else{ goto _LL499;} _LL499:
! if(( unsigned int) _temp493 >  4u?*(( int*) _temp493) ==  Cyc_Absyn_TunionType:
! 0){ _LL518: _temp517=(( struct Cyc_Absyn_TunionType_struct*) _temp493)->f1;
! _LL522: _temp521=( void*) _temp517.tunion_info; if(*(( int*) _temp521) ==  Cyc_Absyn_UnknownTunion){
! _LL524: _temp523=(( struct Cyc_Absyn_UnknownTunion_struct*) _temp521)->f1;
! _LL528: _temp527= _temp523.name; goto _LL526; _LL526: _temp525= _temp523.is_xtunion;
! goto _LL520;} else{ goto _LL501;} _LL520: _temp519= _temp517.targs; goto _LL500;}
! else{ goto _LL501;} _LL501: if(( unsigned int) _temp493 >  4u?*(( int*) _temp493)
! ==  Cyc_Absyn_UnionType: 0){ _LL532: _temp531=(( struct Cyc_Absyn_UnionType_struct*)
! _temp493)->f1; goto _LL530; _LL530: _temp529=(( struct Cyc_Absyn_UnionType_struct*)
! _temp493)->f2; goto _LL502;} else{ goto _LL503;} _LL503: if(( unsigned int)
! _temp493 >  4u?*(( int*) _temp493) ==  Cyc_Absyn_EnumType: 0){ _LL534: _temp533=((
! struct Cyc_Absyn_EnumType_struct*) _temp493)->f1; goto _LL504;} else{ goto
! _LL505;} _LL505: goto _LL506; _LL496: { struct Cyc_List_List* _temp535=(( struct
  Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Parse_typ2tvar, loc, _temp507); struct Cyc_Absyn_Structdecl* _temp536=({
! struct Cyc_Absyn_Structdecl* _temp540=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp540->sc=( void*) s; _temp540->name=({
! struct Cyc_Core_Opt* _temp541=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp541->v=( void*)(( struct _tuple1*) _check_null( _temp509));
! _temp541;}); _temp540->tvs= _temp535; _temp540->fields= 0; _temp540->attributes=
! 0; _temp540;}); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on struct",
! sizeof( unsigned char), 25u), loc);} return({ struct Cyc_List_List* _temp537=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp537->hd=(
! void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Struct_d_struct* _temp538=(
  struct Cyc_Absyn_Struct_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct));
! _temp538[ 0]=({ struct Cyc_Absyn_Struct_d_struct _temp539; _temp539.tag= Cyc_Absyn_Struct_d;
! _temp539.f1= _temp536; _temp539;}); _temp538;}), loc); _temp537->tl= 0; _temp537;});}
! _LL498: if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on tunion",
! sizeof( unsigned char), 25u), loc);} return({ struct Cyc_List_List* _temp542=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp542->hd=(
! void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Tunion_d_struct* _temp543=(
  struct Cyc_Absyn_Tunion_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct));
! _temp543[ 0]=({ struct Cyc_Absyn_Tunion_d_struct _temp544; _temp544.tag= Cyc_Absyn_Tunion_d;
! _temp544.f1=* _temp515; _temp544;}); _temp543;}), loc); _temp542->tl= 0;
! _temp542;}); _LL500: { struct Cyc_List_List* _temp545=(( struct Cyc_List_List*(*)(
! struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
! env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, loc,
! _temp519); struct Cyc_Absyn_Decl* _temp546= Cyc_Absyn_tunion_decl( s, _temp527,
! _temp545, 0, _temp525, loc); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on tunion",
! sizeof( unsigned char), 25u), loc);} return({ struct Cyc_List_List* _temp547=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp547->hd=(
! void*) _temp546; _temp547->tl= 0; _temp547;});} _LL502: { struct Cyc_List_List*
! _temp548=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Parse_typ2tvar, loc, _temp529); struct Cyc_Absyn_Uniondecl* _temp549=({
! struct Cyc_Absyn_Uniondecl* _temp554=( struct Cyc_Absyn_Uniondecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Uniondecl)); _temp554->sc=( void*) s; _temp554->name=({
! struct Cyc_Core_Opt* _temp555=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp555->v=( void*)(( struct _tuple1*) _check_null( _temp531));
! _temp555;}); _temp554->tvs= _temp548; _temp554->fields= 0; _temp554->attributes=
! 0; _temp554;}); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on union",
! sizeof( unsigned char), 24u), loc);} return({ struct Cyc_List_List* _temp550=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp550->hd=(
! void*)({ struct Cyc_Absyn_Decl* _temp551=( struct Cyc_Absyn_Decl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Decl)); _temp551->r=( void*)(( void*)({ struct Cyc_Absyn_Union_d_struct*
! _temp552=( struct Cyc_Absyn_Union_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Union_d_struct));
! _temp552[ 0]=({ struct Cyc_Absyn_Union_d_struct _temp553; _temp553.tag= Cyc_Absyn_Union_d;
! _temp553.f1= _temp549; _temp553;}); _temp552;})); _temp551->loc= loc; _temp551;});
! _temp550->tl= 0; _temp550;});} _LL504: { struct Cyc_Absyn_Enumdecl* _temp556=({
! struct Cyc_Absyn_Enumdecl* _temp561=( struct Cyc_Absyn_Enumdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Enumdecl)); _temp561->sc=( void*) s; _temp561->name=
! _temp533; _temp561->fields= 0; _temp561;}); if( atts !=  0){ Cyc_Parse_err(
  _tag_arr("bad attributes on enum", sizeof( unsigned char), 23u), loc);} return({
! struct Cyc_List_List* _temp557=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp557->hd=( void*)({ struct Cyc_Absyn_Decl* _temp558=(
! struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp558->r=(
! void*)(( void*)({ struct Cyc_Absyn_Enum_d_struct* _temp559=( struct Cyc_Absyn_Enum_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct)); _temp559[ 0]=({ struct Cyc_Absyn_Enum_d_struct
! _temp560; _temp560.tag= Cyc_Absyn_Enum_d; _temp560.f1= _temp556; _temp560;});
! _temp559;})); _temp558->loc= loc; _temp558;}); _temp557->tl= 0; _temp557;});}
! _LL506: Cyc_Parse_err( _tag_arr("missing declarator", sizeof( unsigned char), 19u),
! loc); return 0; _LL494:;}} else{ void* t= _temp465.f1; struct Cyc_List_List*
! _temp562= Cyc_Parse_apply_tmss( tq, t, _temp463, atts); if( istypedef){ if( !
  exps_empty){ Cyc_Parse_err( _tag_arr("initializer in typedef declaration",
  sizeof( unsigned char), 35u), loc);}{ struct Cyc_List_List* decls=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Decl*(* f)( struct Cyc_Position_Segment*, struct _tuple7*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_v_typ_to_typedef,
! loc, _temp562); if( _temp465.f2 !=  0){ struct Cyc_Absyn_Decl* d=( struct Cyc_Absyn_Decl*)((
! struct Cyc_Core_Opt*) _check_null( _temp465.f2))->v;{ void* _temp563=( void*) d->r;
! struct Cyc_Absyn_Structdecl* _temp575; struct Cyc_Absyn_Tuniondecl* _temp577;
! struct Cyc_Absyn_Uniondecl* _temp579; struct Cyc_Absyn_Enumdecl* _temp581;
! _LL565: if(*(( int*) _temp563) ==  Cyc_Absyn_Struct_d){ _LL576: _temp575=((
! struct Cyc_Absyn_Struct_d_struct*) _temp563)->f1; goto _LL566;} else{ goto
! _LL567;} _LL567: if(*(( int*) _temp563) ==  Cyc_Absyn_Tunion_d){ _LL578:
! _temp577=(( struct Cyc_Absyn_Tunion_d_struct*) _temp563)->f1; goto _LL568;}
! else{ goto _LL569;} _LL569: if(*(( int*) _temp563) ==  Cyc_Absyn_Union_d){
! _LL580: _temp579=(( struct Cyc_Absyn_Union_d_struct*) _temp563)->f1; goto _LL570;}
! else{ goto _LL571;} _LL571: if(*(( int*) _temp563) ==  Cyc_Absyn_Enum_d){ _LL582:
! _temp581=(( struct Cyc_Absyn_Enum_d_struct*) _temp563)->f1; goto _LL572;} else{
! goto _LL573;} _LL573: goto _LL574; _LL566:( void*)( _temp575->sc=( void*) s);
! _temp575->attributes= atts; atts= 0; goto _LL564; _LL568:( void*)( _temp577->sc=(
! void*) s); goto _LL564; _LL570:( void*)( _temp579->sc=( void*) s); goto _LL564;
! _LL572:( void*)( _temp581->sc=( void*) s); goto _LL564; _LL574: Cyc_Parse_err(
  _tag_arr("declaration within typedef is not a struct, union, tunion, or xtunion",
! sizeof( unsigned char), 70u), loc); goto _LL564; _LL564:;} decls=({ struct Cyc_List_List*
! _temp583=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp583->hd=( void*) d; _temp583->tl= decls; _temp583;});} if( atts !=  0){ Cyc_Parse_err((
! struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp585; _temp585.tag=
! Cyc_Std_String_pa; _temp585.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( atts))->hd);{ void* _temp584[ 1u]={&
! _temp585}; Cyc_Std_aprintf( _tag_arr("bad attribute %s in typedef", sizeof(
! unsigned char), 28u), _tag_arr( _temp584, sizeof( void*), 1u));}}), loc);}
! return decls;}} else{ if( _temp465.f2 !=  0){ Cyc_Parse_unimp2( _tag_arr("nested type declaration within declarator",
  sizeof( unsigned char), 42u), loc);}{ struct Cyc_List_List* decls= 0;{ struct
! Cyc_List_List* _temp586= _temp562; for( 0; _temp586 !=  0;( _temp586=(( struct
! Cyc_List_List*) _check_null( _temp586))->tl, _temp461=(( struct Cyc_List_List*)
! _check_null( _temp461))->tl)){ struct _tuple7 _temp589; struct Cyc_List_List*
! _temp590; struct Cyc_List_List* _temp592; void* _temp594; struct Cyc_Absyn_Tqual
! _temp596; struct _tuple1* _temp598; struct _tuple7* _temp587=( struct _tuple7*)((
! struct Cyc_List_List*) _check_null( _temp586))->hd; _temp589=* _temp587; _LL599:
! _temp598= _temp589.f1; goto _LL597; _LL597: _temp596= _temp589.f2; goto _LL595;
! _LL595: _temp594= _temp589.f3; goto _LL593; _LL593: _temp592= _temp589.f4; goto
! _LL591; _LL591: _temp590= _temp589.f5; goto _LL588; _LL588: if( _temp592 !=  0){
  Cyc_Parse_warn( _tag_arr("bad type params, ignoring", sizeof( unsigned char), 26u),
! loc);} if( _temp461 ==  0){(( int(*)( struct _tagged_arr msg, struct Cyc_Position_Segment*
  sg)) Cyc_Parse_abort)( _tag_arr("unexpected NULL in parse!", sizeof(
! unsigned char), 26u), loc);}{ struct Cyc_Absyn_Exp* _temp600=( struct Cyc_Absyn_Exp*)((
! struct Cyc_List_List*) _check_null( _temp461))->hd; struct Cyc_Absyn_Vardecl*
! _temp601= Cyc_Absyn_new_vardecl( _temp598, _temp594, _temp600); _temp601->tq=
! _temp596;( void*)( _temp601->sc=( void*) s); _temp601->attributes= _temp590;{
! struct Cyc_Absyn_Decl* _temp602=({ struct Cyc_Absyn_Decl* _temp604=( struct Cyc_Absyn_Decl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp604->r=( void*)(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp605=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp605[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp606; _temp606.tag= Cyc_Absyn_Var_d; _temp606.f1= _temp601; _temp606;});
! _temp605;})); _temp604->loc= loc; _temp604;}); decls=({ struct Cyc_List_List*
! _temp603=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp603->hd=( void*) _temp602; _temp603->tl= decls; _temp603;});}}}} return((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( decls);}}}}}}}
  static void* Cyc_Parse_id_to_kind( struct _tagged_arr s, struct Cyc_Position_Segment*
  loc){ if( Cyc_Std_strlen( s) !=  1){ Cyc_Parse_err(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp608; _temp608.tag= Cyc_Std_String_pa;
! _temp608.f1=( struct _tagged_arr) s;{ void* _temp607[ 1u]={& _temp608}; Cyc_Std_aprintf(
! _tag_arr("bad kind: %s", sizeof( unsigned char), 13u), _tag_arr( _temp607,
  sizeof( void*), 1u));}}), loc); return( void*) Cyc_Absyn_BoxKind;} else{ switch(*((
  const unsigned char*) _check_unknown_subscript( s, sizeof( unsigned char), 0))){
! case 'A': _LL609: return( void*) Cyc_Absyn_AnyKind; case 'M': _LL610: return(
! void*) Cyc_Absyn_MemKind; case 'B': _LL611: return( void*) Cyc_Absyn_BoxKind;
! case 'R': _LL612: return( void*) Cyc_Absyn_RgnKind; case 'E': _LL613: return(
! void*) Cyc_Absyn_EffKind; default: _LL614: Cyc_Parse_err(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp617; _temp617.tag= Cyc_Std_String_pa;
! _temp617.f1=( struct _tagged_arr) s;{ void* _temp616[ 1u]={& _temp617}; Cyc_Std_aprintf(
! _tag_arr("bad kind: %s", sizeof( unsigned char), 13u), _tag_arr( _temp616,
  sizeof( void*), 1u));}}), loc); return( void*) Cyc_Absyn_BoxKind;}}} static
  struct Cyc_List_List* Cyc_Parse_attopt_to_tms( struct Cyc_Position_Segment* loc,
  struct Cyc_List_List* atts, struct Cyc_List_List* tms){ if( atts ==  0){ return
! tms;} else{ return({ struct Cyc_List_List* _temp618=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp618->hd=( void*)(( void*)({
! struct Cyc_Absyn_Attributes_mod_struct* _temp619=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp619[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp620; _temp620.tag= Cyc_Absyn_Attributes_mod;
! _temp620.f1= loc; _temp620.f2= atts; _temp620;}); _temp619;})); _temp618->tl=
! tms; _temp618;});}} static struct Cyc_Absyn_Decl* Cyc_Parse_v_typ_to_typedef(
! struct Cyc_Position_Segment* loc, struct _tuple7* t){ struct _tuple7 _temp623;
! struct Cyc_List_List* _temp624; struct Cyc_List_List* _temp626; void* _temp628;
! struct Cyc_Absyn_Tqual _temp630; struct _tuple1* _temp632; struct _tuple7*
! _temp621= t; _temp623=* _temp621; _LL633: _temp632= _temp623.f1; goto _LL631;
! _LL631: _temp630= _temp623.f2; goto _LL629; _LL629: _temp628= _temp623.f3; goto
! _LL627; _LL627: _temp626= _temp623.f4; goto _LL625; _LL625: _temp624= _temp623.f5;
! goto _LL622; _LL622: Cyc_Lex_register_typedef( _temp632); if( _temp624 !=  0){
! Cyc_Parse_err(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp635;
! _temp635.tag= Cyc_Std_String_pa; _temp635.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( _temp624))->hd);{ void* _temp634[ 1u]={&
! _temp635}; Cyc_Std_aprintf( _tag_arr("bad attribute %s within typedef", sizeof(
! unsigned char), 32u), _tag_arr( _temp634, sizeof( void*), 1u));}}), loc);}
! return Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Typedef_d_struct* _temp636=(
  struct Cyc_Absyn_Typedef_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Typedef_d_struct));
! _temp636[ 0]=({ struct Cyc_Absyn_Typedef_d_struct _temp637; _temp637.tag= Cyc_Absyn_Typedef_d;
! _temp637.f1=({ struct Cyc_Absyn_Typedefdecl* _temp638=( struct Cyc_Absyn_Typedefdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Typedefdecl)); _temp638->name= _temp632;
! _temp638->tvs= _temp626; _temp638->defn=( void*) _temp628; _temp638;}); _temp637;});
! _temp636;}), loc);} unsigned char Cyc_AbstractDeclarator_tok[ 27u]="\000\000\000\000AbstractDeclarator_tok";
  struct Cyc_AbstractDeclarator_tok_struct{ unsigned char* tag; struct Cyc_Parse_Abstractdeclarator*
  f1; } ; unsigned char Cyc_AttributeList_tok[ 22u]="\000\000\000\000AttributeList_tok";
  struct Cyc_AttributeList_tok_struct{ unsigned char* tag; struct Cyc_List_List*
--- 1337,1566 ----
  sizeof( unsigned char), 47u), loc);} if( tss ==  0){ Cyc_Parse_err( _tag_arr("missing type specifiers in declaration",
  sizeof( unsigned char), 39u), loc); return 0;} if( ds->sc !=  0){ switch(( enum 
  Cyc_Parse_Storage_class)(( struct Cyc_Core_Opt*) _check_null( ds->sc))->v){ case
! Cyc_Parse_Typedef_sc: _LL450: istypedef= 1; break; case Cyc_Parse_Extern_sc:
! _LL451: s=( void*) Cyc_Absyn_Extern; break; case Cyc_Parse_ExternC_sc: _LL452: s=(
! void*) Cyc_Absyn_ExternC; break; case Cyc_Parse_Static_sc: _LL453: s=( void*)
! Cyc_Absyn_Static; break; case Cyc_Parse_Auto_sc: _LL454: s=( void*) Cyc_Absyn_Public;
! break; case Cyc_Parse_Register_sc: _LL455: s=( void*) Cyc_Absyn_Public; break;
! case Cyc_Parse_Abstract_sc: _LL456: s=( void*) Cyc_Absyn_Abstract; break;}}{
! struct Cyc_List_List* _temp460; struct Cyc_List_List* _temp462; struct _tuple0
! _temp458=(( struct _tuple0(*)( struct Cyc_List_List* x)) Cyc_List_split)( ids);
! _LL463: _temp462= _temp458.f1; goto _LL461; _LL461: _temp460= _temp458.f2; goto
! _LL459; _LL459: { int exps_empty= 1;{ struct Cyc_List_List* es= _temp460; for( 0;
  es !=  0; es=(( struct Cyc_List_List*) _check_null( es))->tl){ if(( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( es))->hd !=  0){ exps_empty= 0; break;}}}{
! struct _tuple5 _temp464= Cyc_Parse_collapse_type_specifiers( tss, loc); if(
! _temp462 ==  0){ struct Cyc_Core_Opt* _temp467; void* _temp469; struct _tuple5
! _temp465= _temp464; _LL470: _temp469= _temp465.f1; goto _LL468; _LL468: _temp467=
! _temp465.f2; goto _LL466; _LL466: if( _temp467 !=  0){ struct Cyc_Absyn_Decl* d=(
! struct Cyc_Absyn_Decl*)(( struct Cyc_Core_Opt*) _check_null( _temp467))->v;{
! void* _temp471=( void*) d->r; struct Cyc_Absyn_Enumdecl* _temp483; struct Cyc_Absyn_Structdecl*
! _temp485; struct Cyc_Absyn_Uniondecl* _temp487; struct Cyc_Absyn_Tuniondecl*
! _temp489; _LL473: if(*(( int*) _temp471) ==  Cyc_Absyn_Enum_d){ _LL484: _temp483=((
! struct Cyc_Absyn_Enum_d_struct*) _temp471)->f1; goto _LL474;} else{ goto _LL475;}
! _LL475: if(*(( int*) _temp471) ==  Cyc_Absyn_Struct_d){ _LL486: _temp485=((
! struct Cyc_Absyn_Struct_d_struct*) _temp471)->f1; goto _LL476;} else{ goto
! _LL477;} _LL477: if(*(( int*) _temp471) ==  Cyc_Absyn_Union_d){ _LL488: _temp487=((
! struct Cyc_Absyn_Union_d_struct*) _temp471)->f1; goto _LL478;} else{ goto _LL479;}
! _LL479: if(*(( int*) _temp471) ==  Cyc_Absyn_Tunion_d){ _LL490: _temp489=((
! struct Cyc_Absyn_Tunion_d_struct*) _temp471)->f1; goto _LL480;} else{ goto
! _LL481;} _LL481: goto _LL482; _LL474:( void*)( _temp483->sc=( void*) s); if(
  atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on enum", sizeof(
! unsigned char), 23u), loc);} goto _LL472; _LL476:( void*)( _temp485->sc=( void*)
! s); _temp485->attributes= atts; goto _LL472; _LL478:( void*)( _temp487->sc=(
! void*) s); _temp487->attributes= atts; goto _LL472; _LL480:( void*)( _temp489->sc=(
  void*) s); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on tunion",
! sizeof( unsigned char), 25u), loc);} goto _LL472; _LL482: Cyc_Parse_err(
! _tag_arr("bad declaration", sizeof( unsigned char), 16u), loc); return 0; _LL472:;}
! return({ struct Cyc_List_List* _temp491=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp491->hd=( void*) d; _temp491->tl= 0;
! _temp491;});} else{ void* _temp492= _temp469; struct Cyc_List_List* _temp506;
! struct _tuple1* _temp508; struct Cyc_Absyn_TunionInfo _temp510; void* _temp512;
! struct Cyc_Absyn_Tuniondecl* _temp514; struct Cyc_Absyn_TunionInfo _temp516;
! struct Cyc_List_List* _temp518; void* _temp520; struct Cyc_Absyn_UnknownTunionInfo
! _temp522; int _temp524; struct _tuple1* _temp526; struct Cyc_List_List* _temp528;
! struct _tuple1* _temp530; struct _tuple1* _temp532; _LL494: if(( unsigned int)
! _temp492 >  4u?*(( int*) _temp492) ==  Cyc_Absyn_StructType: 0){ _LL509:
! _temp508=(( struct Cyc_Absyn_StructType_struct*) _temp492)->f1; goto _LL507;
! _LL507: _temp506=(( struct Cyc_Absyn_StructType_struct*) _temp492)->f2; goto
! _LL495;} else{ goto _LL496;} _LL496: if(( unsigned int) _temp492 >  4u?*(( int*)
! _temp492) ==  Cyc_Absyn_TunionType: 0){ _LL511: _temp510=(( struct Cyc_Absyn_TunionType_struct*)
! _temp492)->f1; _LL513: _temp512=( void*) _temp510.tunion_info; if(*(( int*)
! _temp512) ==  Cyc_Absyn_KnownTunion){ _LL515: _temp514=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp512)->f1; goto _LL497;} else{ goto _LL498;}} else{ goto _LL498;} _LL498:
! if(( unsigned int) _temp492 >  4u?*(( int*) _temp492) ==  Cyc_Absyn_TunionType:
! 0){ _LL517: _temp516=(( struct Cyc_Absyn_TunionType_struct*) _temp492)->f1;
! _LL521: _temp520=( void*) _temp516.tunion_info; if(*(( int*) _temp520) ==  Cyc_Absyn_UnknownTunion){
! _LL523: _temp522=(( struct Cyc_Absyn_UnknownTunion_struct*) _temp520)->f1;
! _LL527: _temp526= _temp522.name; goto _LL525; _LL525: _temp524= _temp522.is_xtunion;
! goto _LL519;} else{ goto _LL500;} _LL519: _temp518= _temp516.targs; goto _LL499;}
! else{ goto _LL500;} _LL500: if(( unsigned int) _temp492 >  4u?*(( int*) _temp492)
! ==  Cyc_Absyn_UnionType: 0){ _LL531: _temp530=(( struct Cyc_Absyn_UnionType_struct*)
! _temp492)->f1; goto _LL529; _LL529: _temp528=(( struct Cyc_Absyn_UnionType_struct*)
! _temp492)->f2; goto _LL501;} else{ goto _LL502;} _LL502: if(( unsigned int)
! _temp492 >  4u?*(( int*) _temp492) ==  Cyc_Absyn_EnumType: 0){ _LL533: _temp532=((
! struct Cyc_Absyn_EnumType_struct*) _temp492)->f1; goto _LL503;} else{ goto
! _LL504;} _LL504: goto _LL505; _LL495: { struct Cyc_List_List* _temp534=(( struct
  Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Parse_typ2tvar, loc, _temp506); struct Cyc_Absyn_Structdecl* _temp535=({
! struct Cyc_Absyn_Structdecl* _temp539=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp539->sc=( void*) s; _temp539->name=({
! struct Cyc_Core_Opt* _temp540=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp540->v=( void*)(( struct _tuple1*) _check_null( _temp508));
! _temp540;}); _temp539->tvs= _temp534; _temp539->fields= 0; _temp539->attributes=
! 0; _temp539;}); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on struct",
! sizeof( unsigned char), 25u), loc);} return({ struct Cyc_List_List* _temp536=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp536->hd=(
! void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Struct_d_struct* _temp537=(
  struct Cyc_Absyn_Struct_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct));
! _temp537[ 0]=({ struct Cyc_Absyn_Struct_d_struct _temp538; _temp538.tag= Cyc_Absyn_Struct_d;
! _temp538.f1= _temp535; _temp538;}); _temp537;}), loc); _temp536->tl= 0; _temp536;});}
! _LL497: if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on tunion",
! sizeof( unsigned char), 25u), loc);} return({ struct Cyc_List_List* _temp541=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp541->hd=(
! void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Tunion_d_struct* _temp542=(
  struct Cyc_Absyn_Tunion_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Tunion_d_struct));
! _temp542[ 0]=({ struct Cyc_Absyn_Tunion_d_struct _temp543; _temp543.tag= Cyc_Absyn_Tunion_d;
! _temp543.f1= _temp514; _temp543;}); _temp542;}), loc); _temp541->tl= 0; _temp541;});
! _LL499: { struct Cyc_List_List* _temp544=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(*
! f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env,
! struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, loc, _temp518);
! struct Cyc_Absyn_Decl* _temp545= Cyc_Absyn_tunion_decl( s, _temp526, _temp544, 0,
! _temp524, loc); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on tunion",
! sizeof( unsigned char), 25u), loc);} return({ struct Cyc_List_List* _temp546=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp546->hd=(
! void*) _temp545; _temp546->tl= 0; _temp546;});} _LL501: { struct Cyc_List_List*
! _temp547=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Parse_typ2tvar, loc, _temp528); struct Cyc_Absyn_Uniondecl* _temp548=({
! struct Cyc_Absyn_Uniondecl* _temp553=( struct Cyc_Absyn_Uniondecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Uniondecl)); _temp553->sc=( void*) s; _temp553->name=({
! struct Cyc_Core_Opt* _temp554=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp554->v=( void*)(( struct _tuple1*) _check_null( _temp530));
! _temp554;}); _temp553->tvs= _temp547; _temp553->fields= 0; _temp553->attributes=
! 0; _temp553;}); if( atts !=  0){ Cyc_Parse_err( _tag_arr("bad attributes on union",
! sizeof( unsigned char), 24u), loc);} return({ struct Cyc_List_List* _temp549=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp549->hd=(
! void*)({ struct Cyc_Absyn_Decl* _temp550=( struct Cyc_Absyn_Decl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Decl)); _temp550->r=( void*)(( void*)({ struct Cyc_Absyn_Union_d_struct*
! _temp551=( struct Cyc_Absyn_Union_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Union_d_struct));
! _temp551[ 0]=({ struct Cyc_Absyn_Union_d_struct _temp552; _temp552.tag= Cyc_Absyn_Union_d;
! _temp552.f1= _temp548; _temp552;}); _temp551;})); _temp550->loc= loc; _temp550;});
! _temp549->tl= 0; _temp549;});} _LL503: { struct Cyc_Absyn_Enumdecl* _temp555=({
! struct Cyc_Absyn_Enumdecl* _temp560=( struct Cyc_Absyn_Enumdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Enumdecl)); _temp560->sc=( void*) s; _temp560->name=
! _temp532; _temp560->fields= 0; _temp560;}); if( atts !=  0){ Cyc_Parse_err(
  _tag_arr("bad attributes on enum", sizeof( unsigned char), 23u), loc);} return({
! struct Cyc_List_List* _temp556=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp556->hd=( void*)({ struct Cyc_Absyn_Decl* _temp557=(
! struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp557->r=(
! void*)(( void*)({ struct Cyc_Absyn_Enum_d_struct* _temp558=( struct Cyc_Absyn_Enum_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct)); _temp558[ 0]=({ struct Cyc_Absyn_Enum_d_struct
! _temp559; _temp559.tag= Cyc_Absyn_Enum_d; _temp559.f1= _temp555; _temp559;});
! _temp558;})); _temp557->loc= loc; _temp557;}); _temp556->tl= 0; _temp556;});}
! _LL505: Cyc_Parse_err( _tag_arr("missing declarator", sizeof( unsigned char), 19u),
! loc); return 0; _LL493:;}} else{ void* t= _temp464.f1; struct Cyc_List_List*
! _temp561= Cyc_Parse_apply_tmss( tq, t, _temp462, atts); if( istypedef){ if( !
  exps_empty){ Cyc_Parse_err( _tag_arr("initializer in typedef declaration",
  sizeof( unsigned char), 35u), loc);}{ struct Cyc_List_List* decls=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Decl*(* f)( struct Cyc_Position_Segment*, struct _tuple7*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_v_typ_to_typedef,
! loc, _temp561); if( _temp464.f2 !=  0){ struct Cyc_Absyn_Decl* d=( struct Cyc_Absyn_Decl*)((
! struct Cyc_Core_Opt*) _check_null( _temp464.f2))->v;{ void* _temp562=( void*) d->r;
! struct Cyc_Absyn_Structdecl* _temp574; struct Cyc_Absyn_Tuniondecl* _temp576;
! struct Cyc_Absyn_Uniondecl* _temp578; struct Cyc_Absyn_Enumdecl* _temp580;
! _LL564: if(*(( int*) _temp562) ==  Cyc_Absyn_Struct_d){ _LL575: _temp574=((
! struct Cyc_Absyn_Struct_d_struct*) _temp562)->f1; goto _LL565;} else{ goto
! _LL566;} _LL566: if(*(( int*) _temp562) ==  Cyc_Absyn_Tunion_d){ _LL577:
! _temp576=(( struct Cyc_Absyn_Tunion_d_struct*) _temp562)->f1; goto _LL567;}
! else{ goto _LL568;} _LL568: if(*(( int*) _temp562) ==  Cyc_Absyn_Union_d){
! _LL579: _temp578=(( struct Cyc_Absyn_Union_d_struct*) _temp562)->f1; goto _LL569;}
! else{ goto _LL570;} _LL570: if(*(( int*) _temp562) ==  Cyc_Absyn_Enum_d){ _LL581:
! _temp580=(( struct Cyc_Absyn_Enum_d_struct*) _temp562)->f1; goto _LL571;} else{
! goto _LL572;} _LL572: goto _LL573; _LL565:( void*)( _temp574->sc=( void*) s);
! _temp574->attributes= atts; atts= 0; goto _LL563; _LL567:( void*)( _temp576->sc=(
! void*) s); goto _LL563; _LL569:( void*)( _temp578->sc=( void*) s); goto _LL563;
! _LL571:( void*)( _temp580->sc=( void*) s); goto _LL563; _LL573: Cyc_Parse_err(
  _tag_arr("declaration within typedef is not a struct, union, tunion, or xtunion",
! sizeof( unsigned char), 70u), loc); goto _LL563; _LL563:;} decls=({ struct Cyc_List_List*
! _temp582=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp582->hd=( void*) d; _temp582->tl= decls; _temp582;});} if( atts !=  0){ Cyc_Parse_err((
! struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp584; _temp584.tag=
! Cyc_Std_String_pa; _temp584.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( atts))->hd);{ void* _temp583[ 1u]={&
! _temp584}; Cyc_Std_aprintf( _tag_arr("bad attribute %s in typedef", sizeof(
! unsigned char), 28u), _tag_arr( _temp583, sizeof( void*), 1u));}}), loc);}
! return decls;}} else{ if( _temp464.f2 !=  0){ Cyc_Parse_unimp2( _tag_arr("nested type declaration within declarator",
  sizeof( unsigned char), 42u), loc);}{ struct Cyc_List_List* decls= 0;{ struct
! Cyc_List_List* _temp585= _temp561; for( 0; _temp585 !=  0;( _temp585=(( struct
! Cyc_List_List*) _check_null( _temp585))->tl, _temp460=(( struct Cyc_List_List*)
! _check_null( _temp460))->tl)){ struct _tuple7 _temp588; struct Cyc_List_List*
! _temp589; struct Cyc_List_List* _temp591; void* _temp593; struct Cyc_Absyn_Tqual
! _temp595; struct _tuple1* _temp597; struct _tuple7* _temp586=( struct _tuple7*)((
! struct Cyc_List_List*) _check_null( _temp585))->hd; _temp588=* _temp586; _LL598:
! _temp597= _temp588.f1; goto _LL596; _LL596: _temp595= _temp588.f2; goto _LL594;
! _LL594: _temp593= _temp588.f3; goto _LL592; _LL592: _temp591= _temp588.f4; goto
! _LL590; _LL590: _temp589= _temp588.f5; goto _LL587; _LL587: if( _temp591 !=  0){
  Cyc_Parse_warn( _tag_arr("bad type params, ignoring", sizeof( unsigned char), 26u),
! loc);} if( _temp460 ==  0){(( int(*)( struct _tagged_arr msg, struct Cyc_Position_Segment*
  sg)) Cyc_Parse_abort)( _tag_arr("unexpected NULL in parse!", sizeof(
! unsigned char), 26u), loc);}{ struct Cyc_Absyn_Exp* _temp599=( struct Cyc_Absyn_Exp*)((
! struct Cyc_List_List*) _check_null( _temp460))->hd; struct Cyc_Absyn_Vardecl*
! _temp600= Cyc_Absyn_new_vardecl( _temp597, _temp593, _temp599); _temp600->tq=
! _temp595;( void*)( _temp600->sc=( void*) s); _temp600->attributes= _temp589;{
! struct Cyc_Absyn_Decl* _temp601=({ struct Cyc_Absyn_Decl* _temp603=( struct Cyc_Absyn_Decl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp603->r=( void*)(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp604=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp604[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp605; _temp605.tag= Cyc_Absyn_Var_d; _temp605.f1= _temp600; _temp605;});
! _temp604;})); _temp603->loc= loc; _temp603;}); decls=({ struct Cyc_List_List*
! _temp602=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp602->hd=( void*) _temp601; _temp602->tl= decls; _temp602;});}}}} return((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( decls);}}}}}}}
  static void* Cyc_Parse_id_to_kind( struct _tagged_arr s, struct Cyc_Position_Segment*
  loc){ if( Cyc_Std_strlen( s) !=  1){ Cyc_Parse_err(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp607; _temp607.tag= Cyc_Std_String_pa;
! _temp607.f1=( struct _tagged_arr) s;{ void* _temp606[ 1u]={& _temp607}; Cyc_Std_aprintf(
! _tag_arr("bad kind: %s", sizeof( unsigned char), 13u), _tag_arr( _temp606,
  sizeof( void*), 1u));}}), loc); return( void*) Cyc_Absyn_BoxKind;} else{ switch(*((
  const unsigned char*) _check_unknown_subscript( s, sizeof( unsigned char), 0))){
! case 'A': _LL608: return( void*) Cyc_Absyn_AnyKind; case 'M': _LL609: return(
! void*) Cyc_Absyn_MemKind; case 'B': _LL610: return( void*) Cyc_Absyn_BoxKind;
! case 'R': _LL611: return( void*) Cyc_Absyn_RgnKind; case 'E': _LL612: return(
! void*) Cyc_Absyn_EffKind; default: _LL613: Cyc_Parse_err(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp616; _temp616.tag= Cyc_Std_String_pa;
! _temp616.f1=( struct _tagged_arr) s;{ void* _temp615[ 1u]={& _temp616}; Cyc_Std_aprintf(
! _tag_arr("bad kind: %s", sizeof( unsigned char), 13u), _tag_arr( _temp615,
  sizeof( void*), 1u));}}), loc); return( void*) Cyc_Absyn_BoxKind;}}} static
  struct Cyc_List_List* Cyc_Parse_attopt_to_tms( struct Cyc_Position_Segment* loc,
  struct Cyc_List_List* atts, struct Cyc_List_List* tms){ if( atts ==  0){ return
! tms;} else{ return({ struct Cyc_List_List* _temp617=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp617->hd=( void*)(( void*)({
! struct Cyc_Absyn_Attributes_mod_struct* _temp618=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp618[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp619; _temp619.tag= Cyc_Absyn_Attributes_mod;
! _temp619.f1= loc; _temp619.f2= atts; _temp619;}); _temp618;})); _temp617->tl=
! tms; _temp617;});}} static struct Cyc_Absyn_Decl* Cyc_Parse_v_typ_to_typedef(
! struct Cyc_Position_Segment* loc, struct _tuple7* t){ struct _tuple7 _temp622;
! struct Cyc_List_List* _temp623; struct Cyc_List_List* _temp625; void* _temp627;
! struct Cyc_Absyn_Tqual _temp629; struct _tuple1* _temp631; struct _tuple7*
! _temp620= t; _temp622=* _temp620; _LL632: _temp631= _temp622.f1; goto _LL630;
! _LL630: _temp629= _temp622.f2; goto _LL628; _LL628: _temp627= _temp622.f3; goto
! _LL626; _LL626: _temp625= _temp622.f4; goto _LL624; _LL624: _temp623= _temp622.f5;
! goto _LL621; _LL621: Cyc_Lex_register_typedef( _temp631); if( _temp623 !=  0){
! Cyc_Parse_err(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp634;
! _temp634.tag= Cyc_Std_String_pa; _temp634.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( _temp623))->hd);{ void* _temp633[ 1u]={&
! _temp634}; Cyc_Std_aprintf( _tag_arr("bad attribute %s within typedef", sizeof(
! unsigned char), 32u), _tag_arr( _temp633, sizeof( void*), 1u));}}), loc);}
! return Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Typedef_d_struct* _temp635=(
  struct Cyc_Absyn_Typedef_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Typedef_d_struct));
! _temp635[ 0]=({ struct Cyc_Absyn_Typedef_d_struct _temp636; _temp636.tag= Cyc_Absyn_Typedef_d;
! _temp636.f1=({ struct Cyc_Absyn_Typedefdecl* _temp637=( struct Cyc_Absyn_Typedefdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Typedefdecl)); _temp637->name= _temp631;
! _temp637->tvs= _temp625; _temp637->defn=( void*) _temp627; _temp637;}); _temp636;});
! _temp635;}), loc);} unsigned char Cyc_AbstractDeclarator_tok[ 27u]="\000\000\000\000AbstractDeclarator_tok";
  struct Cyc_AbstractDeclarator_tok_struct{ unsigned char* tag; struct Cyc_Parse_Abstractdeclarator*
  f1; } ; unsigned char Cyc_AttributeList_tok[ 22u]="\000\000\000\000AttributeList_tok";
  struct Cyc_AttributeList_tok_struct{ unsigned char* tag; struct Cyc_List_List*
***************
*** 1668,2065 ****
  8u]="\000\000\000\000YY1"; struct Cyc_YY1_struct{ unsigned char* tag; struct
  _tuple16* f1; } ; unsigned char Cyc_YYINITIALSVAL[ 18u]="\000\000\000\000YYINITIALSVAL";
  unsigned char Cyc_Okay_tok[ 13u]="\000\000\000\000Okay_tok"; static
! unsigned char _temp640[ 15u]="$(sign_t,int)@"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Int_tok={ Cyc_Core_Failure,{ _temp640, _temp640, _temp640 +  15u}};
  struct _tuple15* Cyc_yyget_Int_tok( void* yy1){ struct _tuple15* yyzzz;{ void*
! _temp641= yy1; struct _tuple15* _temp647; _LL643: if(*(( void**) _temp641) == 
! Cyc_Int_tok){ _LL648: _temp647=(( struct Cyc_Int_tok_struct*) _temp641)->f1;
! goto _LL644;} else{ goto _LL645;} _LL645: goto _LL646; _LL644: yyzzz= _temp647;
! goto _LL642; _LL646:( int) _throw(( void*)& Cyc_yyfail_Int_tok); _LL642:;}
! return yyzzz;} static unsigned char _temp650[ 9u]="string_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_String_tok={ Cyc_Core_Failure,{ _temp650, _temp650, _temp650 +  9u}};
  struct _tagged_arr Cyc_yyget_String_tok( void* yy1){ struct _tagged_arr yyzzz;{
! void* _temp651= yy1; struct _tagged_arr _temp657; _LL653: if(*(( void**)
! _temp651) ==  Cyc_String_tok){ _LL658: _temp657=(( struct Cyc_String_tok_struct*)
! _temp651)->f1; goto _LL654;} else{ goto _LL655;} _LL655: goto _LL656; _LL654:
! yyzzz= _temp657; goto _LL652; _LL656:( int) _throw(( void*)& Cyc_yyfail_String_tok);
! _LL652:;} return yyzzz;} static unsigned char _temp660[ 5u]="char"; static
! struct Cyc_Core_Failure_struct Cyc_yyfail_Char_tok={ Cyc_Core_Failure,{ _temp660,
! _temp660, _temp660 +  5u}}; unsigned char Cyc_yyget_Char_tok( void* yy1){
! unsigned char yyzzz;{ void* _temp661= yy1; unsigned char _temp667; _LL663: if(*((
! void**) _temp661) ==  Cyc_Char_tok){ _LL668: _temp667=(( struct Cyc_Char_tok_struct*)
! _temp661)->f1; goto _LL664;} else{ goto _LL665;} _LL665: goto _LL666; _LL664:
! yyzzz= _temp667; goto _LL662; _LL666:( int) _throw(( void*)& Cyc_yyfail_Char_tok);
! _LL662:;} return yyzzz;} static unsigned char _temp670[ 20u]="tunion Pointer_Sort";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Pointer_Sort_tok={ Cyc_Core_Failure,{
! _temp670, _temp670, _temp670 +  20u}}; void* Cyc_yyget_Pointer_Sort_tok( void*
! yy1){ void* yyzzz;{ void* _temp671= yy1; void* _temp677; _LL673: if(*(( void**)
! _temp671) ==  Cyc_Pointer_Sort_tok){ _LL678: _temp677=( void*)(( struct Cyc_Pointer_Sort_tok_struct*)
! _temp671)->f1; goto _LL674;} else{ goto _LL675;} _LL675: goto _LL676; _LL674:
! yyzzz= _temp677; goto _LL672; _LL676:( int) _throw(( void*)& Cyc_yyfail_Pointer_Sort_tok);
! _LL672:;} return yyzzz;} static unsigned char _temp680[ 6u]="exp_t"; static
! struct Cyc_Core_Failure_struct Cyc_yyfail_Exp_tok={ Cyc_Core_Failure,{ _temp680,
! _temp680, _temp680 +  6u}}; struct Cyc_Absyn_Exp* Cyc_yyget_Exp_tok( void* yy1){
! struct Cyc_Absyn_Exp* yyzzz;{ void* _temp681= yy1; struct Cyc_Absyn_Exp*
! _temp687; _LL683: if(*(( void**) _temp681) ==  Cyc_Exp_tok){ _LL688: _temp687=((
! struct Cyc_Exp_tok_struct*) _temp681)->f1; goto _LL684;} else{ goto _LL685;}
! _LL685: goto _LL686; _LL684: yyzzz= _temp687; goto _LL682; _LL686:( int) _throw((
! void*)& Cyc_yyfail_Exp_tok); _LL682:;} return yyzzz;} static unsigned char
! _temp690[ 14u]="list_t<exp_t>"; static struct Cyc_Core_Failure_struct Cyc_yyfail_ExpList_tok={
! Cyc_Core_Failure,{ _temp690, _temp690, _temp690 +  14u}}; struct Cyc_List_List*
! Cyc_yyget_ExpList_tok( void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp691=
! yy1; struct Cyc_List_List* _temp697; _LL693: if(*(( void**) _temp691) ==  Cyc_ExpList_tok){
! _LL698: _temp697=(( struct Cyc_ExpList_tok_struct*) _temp691)->f1; goto _LL694;}
! else{ goto _LL695;} _LL695: goto _LL696; _LL694: yyzzz= _temp697; goto _LL692;
! _LL696:( int) _throw(( void*)& Cyc_yyfail_ExpList_tok); _LL692:;} return yyzzz;}
! static unsigned char _temp700[ 39u]="list_t<$(list_t<designator_t>,exp_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_InitializerList_tok={ Cyc_Core_Failure,{
! _temp700, _temp700, _temp700 +  39u}}; struct Cyc_List_List* Cyc_yyget_InitializerList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp701= yy1; struct Cyc_List_List*
! _temp707; _LL703: if(*(( void**) _temp701) ==  Cyc_InitializerList_tok){ _LL708:
! _temp707=(( struct Cyc_InitializerList_tok_struct*) _temp701)->f1; goto _LL704;}
! else{ goto _LL705;} _LL705: goto _LL706; _LL704: yyzzz= _temp707; goto _LL702;
! _LL706:( int) _throw(( void*)& Cyc_yyfail_InitializerList_tok); _LL702:;} return
! yyzzz;} static unsigned char _temp710[ 9u]="primop_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Primop_tok={ Cyc_Core_Failure,{ _temp710, _temp710, _temp710 +  9u}};
! void* Cyc_yyget_Primop_tok( void* yy1){ void* yyzzz;{ void* _temp711= yy1; void*
! _temp717; _LL713: if(*(( void**) _temp711) ==  Cyc_Primop_tok){ _LL718: _temp717=(
! void*)(( struct Cyc_Primop_tok_struct*) _temp711)->f1; goto _LL714;} else{ goto
! _LL715;} _LL715: goto _LL716; _LL714: yyzzz= _temp717; goto _LL712; _LL716:( int)
! _throw(( void*)& Cyc_yyfail_Primop_tok); _LL712:;} return yyzzz;} static
! unsigned char _temp720[ 16u]="opt_t<primop_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Primopopt_tok={ Cyc_Core_Failure,{ _temp720, _temp720, _temp720 +  16u}};
  struct Cyc_Core_Opt* Cyc_yyget_Primopopt_tok( void* yy1){ struct Cyc_Core_Opt*
! yyzzz;{ void* _temp721= yy1; struct Cyc_Core_Opt* _temp727; _LL723: if(*(( void**)
! _temp721) ==  Cyc_Primopopt_tok){ _LL728: _temp727=(( struct Cyc_Primopopt_tok_struct*)
! _temp721)->f1; goto _LL724;} else{ goto _LL725;} _LL725: goto _LL726; _LL724:
! yyzzz= _temp727; goto _LL722; _LL726:( int) _throw(( void*)& Cyc_yyfail_Primopopt_tok);
! _LL722:;} return yyzzz;} static unsigned char _temp730[ 7u]="qvar_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_QualId_tok={ Cyc_Core_Failure,{
! _temp730, _temp730, _temp730 +  7u}}; struct _tuple1* Cyc_yyget_QualId_tok( void*
! yy1){ struct _tuple1* yyzzz;{ void* _temp731= yy1; struct _tuple1* _temp737;
! _LL733: if(*(( void**) _temp731) ==  Cyc_QualId_tok){ _LL738: _temp737=(( struct
! Cyc_QualId_tok_struct*) _temp731)->f1; goto _LL734;} else{ goto _LL735;} _LL735:
! goto _LL736; _LL734: yyzzz= _temp737; goto _LL732; _LL736:( int) _throw(( void*)&
! Cyc_yyfail_QualId_tok); _LL732:;} return yyzzz;} static unsigned char _temp740[
  7u]="stmt_t"; static struct Cyc_Core_Failure_struct Cyc_yyfail_Stmt_tok={ Cyc_Core_Failure,{
! _temp740, _temp740, _temp740 +  7u}}; struct Cyc_Absyn_Stmt* Cyc_yyget_Stmt_tok(
! void* yy1){ struct Cyc_Absyn_Stmt* yyzzz;{ void* _temp741= yy1; struct Cyc_Absyn_Stmt*
! _temp747; _LL743: if(*(( void**) _temp741) ==  Cyc_Stmt_tok){ _LL748: _temp747=((
! struct Cyc_Stmt_tok_struct*) _temp741)->f1; goto _LL744;} else{ goto _LL745;}
! _LL745: goto _LL746; _LL744: yyzzz= _temp747; goto _LL742; _LL746:( int) _throw((
! void*)& Cyc_yyfail_Stmt_tok); _LL742:;} return yyzzz;} static unsigned char
! _temp750[ 24u]="list_t<switch_clause_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_SwitchClauseList_tok={ Cyc_Core_Failure,{ _temp750, _temp750,
! _temp750 +  24u}}; struct Cyc_List_List* Cyc_yyget_SwitchClauseList_tok( void*
! yy1){ struct Cyc_List_List* yyzzz;{ void* _temp751= yy1; struct Cyc_List_List*
! _temp757; _LL753: if(*(( void**) _temp751) ==  Cyc_SwitchClauseList_tok){ _LL758:
! _temp757=(( struct Cyc_SwitchClauseList_tok_struct*) _temp751)->f1; goto _LL754;}
! else{ goto _LL755;} _LL755: goto _LL756; _LL754: yyzzz= _temp757; goto _LL752;
! _LL756:( int) _throw(( void*)& Cyc_yyfail_SwitchClauseList_tok); _LL752:;}
! return yyzzz;} static unsigned char _temp760[ 25u]="list_t<switchC_clause_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_SwitchCClauseList_tok={ Cyc_Core_Failure,{
! _temp760, _temp760, _temp760 +  25u}}; struct Cyc_List_List* Cyc_yyget_SwitchCClauseList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp761= yy1; struct Cyc_List_List*
! _temp767; _LL763: if(*(( void**) _temp761) ==  Cyc_SwitchCClauseList_tok){
! _LL768: _temp767=(( struct Cyc_SwitchCClauseList_tok_struct*) _temp761)->f1;
! goto _LL764;} else{ goto _LL765;} _LL765: goto _LL766; _LL764: yyzzz= _temp767;
! goto _LL762; _LL766:( int) _throw(( void*)& Cyc_yyfail_SwitchCClauseList_tok);
! _LL762:;} return yyzzz;} static unsigned char _temp770[ 6u]="pat_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_Pattern_tok={ Cyc_Core_Failure,{
! _temp770, _temp770, _temp770 +  6u}}; struct Cyc_Absyn_Pat* Cyc_yyget_Pattern_tok(
! void* yy1){ struct Cyc_Absyn_Pat* yyzzz;{ void* _temp771= yy1; struct Cyc_Absyn_Pat*
! _temp777; _LL773: if(*(( void**) _temp771) ==  Cyc_Pattern_tok){ _LL778:
! _temp777=(( struct Cyc_Pattern_tok_struct*) _temp771)->f1; goto _LL774;} else{
! goto _LL775;} _LL775: goto _LL776; _LL774: yyzzz= _temp777; goto _LL772; _LL776:(
! int) _throw(( void*)& Cyc_yyfail_Pattern_tok); _LL772:;} return yyzzz;} static
! unsigned char _temp780[ 14u]="list_t<pat_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_PatternList_tok={ Cyc_Core_Failure,{ _temp780, _temp780, _temp780 + 
  14u}}; struct Cyc_List_List* Cyc_yyget_PatternList_tok( void* yy1){ struct Cyc_List_List*
! yyzzz;{ void* _temp781= yy1; struct Cyc_List_List* _temp787; _LL783: if(*(( void**)
! _temp781) ==  Cyc_PatternList_tok){ _LL788: _temp787=(( struct Cyc_PatternList_tok_struct*)
! _temp781)->f1; goto _LL784;} else{ goto _LL785;} _LL785: goto _LL786; _LL784:
! yyzzz= _temp787; goto _LL782; _LL786:( int) _throw(( void*)& Cyc_yyfail_PatternList_tok);
! _LL782:;} return yyzzz;} static unsigned char _temp790[ 31u]="$(list_t<designator_t>,pat_t)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_FieldPattern_tok={ Cyc_Core_Failure,{
! _temp790, _temp790, _temp790 +  31u}}; struct _tuple13* Cyc_yyget_FieldPattern_tok(
! void* yy1){ struct _tuple13* yyzzz;{ void* _temp791= yy1; struct _tuple13*
! _temp797; _LL793: if(*(( void**) _temp791) ==  Cyc_FieldPattern_tok){ _LL798:
! _temp797=(( struct Cyc_FieldPattern_tok_struct*) _temp791)->f1; goto _LL794;}
! else{ goto _LL795;} _LL795: goto _LL796; _LL794: yyzzz= _temp797; goto _LL792;
! _LL796:( int) _throw(( void*)& Cyc_yyfail_FieldPattern_tok); _LL792:;} return
! yyzzz;} static unsigned char _temp800[ 39u]="list_t<$(list_t<designator_t>,pat_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_FieldPatternList_tok={ Cyc_Core_Failure,{
! _temp800, _temp800, _temp800 +  39u}}; struct Cyc_List_List* Cyc_yyget_FieldPatternList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp801= yy1; struct Cyc_List_List*
! _temp807; _LL803: if(*(( void**) _temp801) ==  Cyc_FieldPatternList_tok){ _LL808:
! _temp807=(( struct Cyc_FieldPatternList_tok_struct*) _temp801)->f1; goto _LL804;}
! else{ goto _LL805;} _LL805: goto _LL806; _LL804: yyzzz= _temp807; goto _LL802;
! _LL806:( int) _throw(( void*)& Cyc_yyfail_FieldPatternList_tok); _LL802:;}
! return yyzzz;} static unsigned char _temp810[ 9u]="fndecl_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_FnDecl_tok={ Cyc_Core_Failure,{ _temp810, _temp810, _temp810 +  9u}};
  struct Cyc_Absyn_Fndecl* Cyc_yyget_FnDecl_tok( void* yy1){ struct Cyc_Absyn_Fndecl*
! yyzzz;{ void* _temp811= yy1; struct Cyc_Absyn_Fndecl* _temp817; _LL813: if(*((
! void**) _temp811) ==  Cyc_FnDecl_tok){ _LL818: _temp817=(( struct Cyc_FnDecl_tok_struct*)
! _temp811)->f1; goto _LL814;} else{ goto _LL815;} _LL815: goto _LL816; _LL814:
! yyzzz= _temp817; goto _LL812; _LL816:( int) _throw(( void*)& Cyc_yyfail_FnDecl_tok);
! _LL812:;} return yyzzz;} static unsigned char _temp820[ 15u]="list_t<decl_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_DeclList_tok={ Cyc_Core_Failure,{
! _temp820, _temp820, _temp820 +  15u}}; struct Cyc_List_List* Cyc_yyget_DeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp821= yy1; struct Cyc_List_List*
! _temp827; _LL823: if(*(( void**) _temp821) ==  Cyc_DeclList_tok){ _LL828:
! _temp827=(( struct Cyc_DeclList_tok_struct*) _temp821)->f1; goto _LL824;} else{
! goto _LL825;} _LL825: goto _LL826; _LL824: yyzzz= _temp827; goto _LL822; _LL826:(
! int) _throw(( void*)& Cyc_yyfail_DeclList_tok); _LL822:;} return yyzzz;} static
! unsigned char _temp830[ 12u]="decl_spec_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_DeclSpec_tok={ Cyc_Core_Failure,{ _temp830, _temp830, _temp830 +  12u}};
  struct Cyc_Parse_Declaration_spec* Cyc_yyget_DeclSpec_tok( void* yy1){ struct
! Cyc_Parse_Declaration_spec* yyzzz;{ void* _temp831= yy1; struct Cyc_Parse_Declaration_spec*
! _temp837; _LL833: if(*(( void**) _temp831) ==  Cyc_DeclSpec_tok){ _LL838:
! _temp837=(( struct Cyc_DeclSpec_tok_struct*) _temp831)->f1; goto _LL834;} else{
! goto _LL835;} _LL835: goto _LL836; _LL834: yyzzz= _temp837; goto _LL832; _LL836:(
! int) _throw(( void*)& Cyc_yyfail_DeclSpec_tok); _LL832:;} return yyzzz;} static
! unsigned char _temp840[ 27u]="$(declarator_t,exp_opt_t)@"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_InitDecl_tok={ Cyc_Core_Failure,{ _temp840, _temp840, _temp840 +  27u}};
  struct _tuple14* Cyc_yyget_InitDecl_tok( void* yy1){ struct _tuple14* yyzzz;{
! void* _temp841= yy1; struct _tuple14* _temp847; _LL843: if(*(( void**) _temp841)
! ==  Cyc_InitDecl_tok){ _LL848: _temp847=(( struct Cyc_InitDecl_tok_struct*)
! _temp841)->f1; goto _LL844;} else{ goto _LL845;} _LL845: goto _LL846; _LL844:
! yyzzz= _temp847; goto _LL842; _LL846:( int) _throw(( void*)& Cyc_yyfail_InitDecl_tok);
! _LL842:;} return yyzzz;} static unsigned char _temp850[ 35u]="list_t<$(declarator_t,exp_opt_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_InitDeclList_tok={ Cyc_Core_Failure,{
! _temp850, _temp850, _temp850 +  35u}}; struct Cyc_List_List* Cyc_yyget_InitDeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp851= yy1; struct Cyc_List_List*
! _temp857; _LL853: if(*(( void**) _temp851) ==  Cyc_InitDeclList_tok){ _LL858:
! _temp857=(( struct Cyc_InitDeclList_tok_struct*) _temp851)->f1; goto _LL854;}
! else{ goto _LL855;} _LL855: goto _LL856; _LL854: yyzzz= _temp857; goto _LL852;
! _LL856:( int) _throw(( void*)& Cyc_yyfail_InitDeclList_tok); _LL852:;} return
! yyzzz;} static unsigned char _temp860[ 16u]="storage_class_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_StorageClass_tok={ Cyc_Core_Failure,{ _temp860, _temp860, _temp860 + 
  16u}}; enum  Cyc_Parse_Storage_class Cyc_yyget_StorageClass_tok( void* yy1){
! enum  Cyc_Parse_Storage_class yyzzz;{ void* _temp861= yy1; enum  Cyc_Parse_Storage_class
! _temp867; _LL863: if(*(( void**) _temp861) ==  Cyc_StorageClass_tok){ _LL868:
! _temp867=(( struct Cyc_StorageClass_tok_struct*) _temp861)->f1; goto _LL864;}
! else{ goto _LL865;} _LL865: goto _LL866; _LL864: yyzzz= _temp867; goto _LL862;
! _LL866:( int) _throw(( void*)& Cyc_yyfail_StorageClass_tok); _LL862:;} return
! yyzzz;} static unsigned char _temp870[ 17u]="type_specifier_t"; static struct
  Cyc_Core_Failure_struct Cyc_yyfail_TypeSpecifier_tok={ Cyc_Core_Failure,{
! _temp870, _temp870, _temp870 +  17u}}; void* Cyc_yyget_TypeSpecifier_tok( void*
! yy1){ void* yyzzz;{ void* _temp871= yy1; void* _temp877; _LL873: if(*(( void**)
! _temp871) ==  Cyc_TypeSpecifier_tok){ _LL878: _temp877=( void*)(( struct Cyc_TypeSpecifier_tok_struct*)
! _temp871)->f1; goto _LL874;} else{ goto _LL875;} _LL875: goto _LL876; _LL874:
! yyzzz= _temp877; goto _LL872; _LL876:( int) _throw(( void*)& Cyc_yyfail_TypeSpecifier_tok);
! _LL872:;} return yyzzz;} static unsigned char _temp880[ 18u]="struct_or_union_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_StructOrUnion_tok={ Cyc_Core_Failure,{
! _temp880, _temp880, _temp880 +  18u}}; enum  Cyc_Parse_Struct_or_union Cyc_yyget_StructOrUnion_tok(
! void* yy1){ enum  Cyc_Parse_Struct_or_union yyzzz;{ void* _temp881= yy1; enum 
! Cyc_Parse_Struct_or_union _temp887; _LL883: if(*(( void**) _temp881) ==  Cyc_StructOrUnion_tok){
! _LL888: _temp887=(( struct Cyc_StructOrUnion_tok_struct*) _temp881)->f1; goto
! _LL884;} else{ goto _LL885;} _LL885: goto _LL886; _LL884: yyzzz= _temp887; goto
! _LL882; _LL886:( int) _throw(( void*)& Cyc_yyfail_StructOrUnion_tok); _LL882:;}
! return yyzzz;} static unsigned char _temp890[ 8u]="tqual_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_TypeQual_tok={ Cyc_Core_Failure,{ _temp890, _temp890, _temp890 +  8u}};
  struct Cyc_Absyn_Tqual Cyc_yyget_TypeQual_tok( void* yy1){ struct Cyc_Absyn_Tqual
! yyzzz;{ void* _temp891= yy1; struct Cyc_Absyn_Tqual _temp897; _LL893: if(*((
! void**) _temp891) ==  Cyc_TypeQual_tok){ _LL898: _temp897=(( struct Cyc_TypeQual_tok_struct*)
! _temp891)->f1; goto _LL894;} else{ goto _LL895;} _LL895: goto _LL896; _LL894:
! yyzzz= _temp897; goto _LL892; _LL896:( int) _throw(( void*)& Cyc_yyfail_TypeQual_tok);
! _LL892:;} return yyzzz;} static unsigned char _temp900[ 22u]="list_t<structfield_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_StructFieldDeclList_tok={ Cyc_Core_Failure,{
! _temp900, _temp900, _temp900 +  22u}}; struct Cyc_List_List* Cyc_yyget_StructFieldDeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp901= yy1; struct Cyc_List_List*
! _temp907; _LL903: if(*(( void**) _temp901) ==  Cyc_StructFieldDeclList_tok){
! _LL908: _temp907=(( struct Cyc_StructFieldDeclList_tok_struct*) _temp901)->f1;
! goto _LL904;} else{ goto _LL905;} _LL905: goto _LL906; _LL904: yyzzz= _temp907;
! goto _LL902; _LL906:( int) _throw(( void*)& Cyc_yyfail_StructFieldDeclList_tok);
! _LL902:;} return yyzzz;} static unsigned char _temp910[ 30u]="list_t<list_t<structfield_t>>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_StructFieldDeclListList_tok={
! Cyc_Core_Failure,{ _temp910, _temp910, _temp910 +  30u}}; struct Cyc_List_List*
  Cyc_yyget_StructFieldDeclListList_tok( void* yy1){ struct Cyc_List_List* yyzzz;{
! void* _temp911= yy1; struct Cyc_List_List* _temp917; _LL913: if(*(( void**)
! _temp911) ==  Cyc_StructFieldDeclListList_tok){ _LL918: _temp917=(( struct Cyc_StructFieldDeclListList_tok_struct*)
! _temp911)->f1; goto _LL914;} else{ goto _LL915;} _LL915: goto _LL916; _LL914:
! yyzzz= _temp917; goto _LL912; _LL916:( int) _throw(( void*)& Cyc_yyfail_StructFieldDeclListList_tok);
! _LL912:;} return yyzzz;} static unsigned char _temp920[ 24u]="list_t<type_modifier_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_TypeModifierList_tok={ Cyc_Core_Failure,{
! _temp920, _temp920, _temp920 +  24u}}; struct Cyc_List_List* Cyc_yyget_TypeModifierList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp921= yy1; struct Cyc_List_List*
! _temp927; _LL923: if(*(( void**) _temp921) ==  Cyc_TypeModifierList_tok){ _LL928:
! _temp927=(( struct Cyc_TypeModifierList_tok_struct*) _temp921)->f1; goto _LL924;}
! else{ goto _LL925;} _LL925: goto _LL926; _LL924: yyzzz= _temp927; goto _LL922;
! _LL926:( int) _throw(( void*)& Cyc_yyfail_TypeModifierList_tok); _LL922:;}
! return yyzzz;} static unsigned char _temp930[ 13u]="declarator_t"; static struct
! Cyc_Core_Failure_struct Cyc_yyfail_Declarator_tok={ Cyc_Core_Failure,{ _temp930,
! _temp930, _temp930 +  13u}}; struct Cyc_Parse_Declarator* Cyc_yyget_Declarator_tok(
! void* yy1){ struct Cyc_Parse_Declarator* yyzzz;{ void* _temp931= yy1; struct Cyc_Parse_Declarator*
! _temp937; _LL933: if(*(( void**) _temp931) ==  Cyc_Declarator_tok){ _LL938:
! _temp937=(( struct Cyc_Declarator_tok_struct*) _temp931)->f1; goto _LL934;}
! else{ goto _LL935;} _LL935: goto _LL936; _LL934: yyzzz= _temp937; goto _LL932;
! _LL936:( int) _throw(( void*)& Cyc_yyfail_Declarator_tok); _LL932:;} return
! yyzzz;} static unsigned char _temp940[ 21u]="abstractdeclarator_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_AbstractDeclarator_tok={ Cyc_Core_Failure,{
! _temp940, _temp940, _temp940 +  21u}}; struct Cyc_Parse_Abstractdeclarator* Cyc_yyget_AbstractDeclarator_tok(
! void* yy1){ struct Cyc_Parse_Abstractdeclarator* yyzzz;{ void* _temp941= yy1;
! struct Cyc_Parse_Abstractdeclarator* _temp947; _LL943: if(*(( void**) _temp941)
! ==  Cyc_AbstractDeclarator_tok){ _LL948: _temp947=(( struct Cyc_AbstractDeclarator_tok_struct*)
! _temp941)->f1; goto _LL944;} else{ goto _LL945;} _LL945: goto _LL946; _LL944:
! yyzzz= _temp947; goto _LL942; _LL946:( int) _throw(( void*)& Cyc_yyfail_AbstractDeclarator_tok);
! _LL942:;} return yyzzz;} static unsigned char _temp950[ 5u]="bool"; static
! struct Cyc_Core_Failure_struct Cyc_yyfail_Bool_tok={ Cyc_Core_Failure,{ _temp950,
! _temp950, _temp950 +  5u}}; int Cyc_yyget_Bool_tok( void* yy1){ int yyzzz;{ void*
! _temp951= yy1; int _temp957; _LL953: if(*(( void**) _temp951) ==  Cyc_Bool_tok){
! _LL958: _temp957=(( struct Cyc_Bool_tok_struct*) _temp951)->f1; goto _LL954;}
! else{ goto _LL955;} _LL955: goto _LL956; _LL954: yyzzz= _temp957; goto _LL952;
! _LL956:( int) _throw(( void*)& Cyc_yyfail_Bool_tok); _LL952:;} return yyzzz;}
! static unsigned char _temp960[ 8u]="scope_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Scope_tok={ Cyc_Core_Failure,{ _temp960, _temp960, _temp960 +  8u}};
! void* Cyc_yyget_Scope_tok( void* yy1){ void* yyzzz;{ void* _temp961= yy1; void*
! _temp967; _LL963: if(*(( void**) _temp961) ==  Cyc_Scope_tok){ _LL968: _temp967=(
! void*)(( struct Cyc_Scope_tok_struct*) _temp961)->f1; goto _LL964;} else{ goto
! _LL965;} _LL965: goto _LL966; _LL964: yyzzz= _temp967; goto _LL962; _LL966:( int)
! _throw(( void*)& Cyc_yyfail_Scope_tok); _LL962:;} return yyzzz;} static
! unsigned char _temp970[ 14u]="tunionfield_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_TunionField_tok={ Cyc_Core_Failure,{ _temp970, _temp970, _temp970 + 
  14u}}; struct Cyc_Absyn_Tunionfield* Cyc_yyget_TunionField_tok( void* yy1){
! struct Cyc_Absyn_Tunionfield* yyzzz;{ void* _temp971= yy1; struct Cyc_Absyn_Tunionfield*
! _temp977; _LL973: if(*(( void**) _temp971) ==  Cyc_TunionField_tok){ _LL978:
! _temp977=(( struct Cyc_TunionField_tok_struct*) _temp971)->f1; goto _LL974;}
! else{ goto _LL975;} _LL975: goto _LL976; _LL974: yyzzz= _temp977; goto _LL972;
! _LL976:( int) _throw(( void*)& Cyc_yyfail_TunionField_tok); _LL972:;} return
! yyzzz;} static unsigned char _temp980[ 22u]="list_t<tunionfield_t>"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_TunionFieldList_tok={ Cyc_Core_Failure,{
! _temp980, _temp980, _temp980 +  22u}}; struct Cyc_List_List* Cyc_yyget_TunionFieldList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp981= yy1; struct Cyc_List_List*
! _temp987; _LL983: if(*(( void**) _temp981) ==  Cyc_TunionFieldList_tok){ _LL988:
! _temp987=(( struct Cyc_TunionFieldList_tok_struct*) _temp981)->f1; goto _LL984;}
! else{ goto _LL985;} _LL985: goto _LL986; _LL984: yyzzz= _temp987; goto _LL982;
! _LL986:( int) _throw(( void*)& Cyc_yyfail_TunionFieldList_tok); _LL982:;} return
! yyzzz;} static unsigned char _temp990[ 50u]="$(tqual_t,list_t<type_specifier_t>,attributes_t)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_QualSpecList_tok={ Cyc_Core_Failure,{
! _temp990, _temp990, _temp990 +  50u}}; struct _tuple17* Cyc_yyget_QualSpecList_tok(
! void* yy1){ struct _tuple17* yyzzz;{ void* _temp991= yy1; struct _tuple17*
! _temp997; _LL993: if(*(( void**) _temp991) ==  Cyc_QualSpecList_tok){ _LL998:
! _temp997=(( struct Cyc_QualSpecList_tok_struct*) _temp991)->f1; goto _LL994;}
! else{ goto _LL995;} _LL995: goto _LL996; _LL994: yyzzz= _temp997; goto _LL992;
! _LL996:( int) _throw(( void*)& Cyc_yyfail_QualSpecList_tok); _LL992:;} return
! yyzzz;} static unsigned char _temp1000[ 14u]="list_t<var_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_IdList_tok={ Cyc_Core_Failure,{ _temp1000, _temp1000, _temp1000 +  14u}};
  struct Cyc_List_List* Cyc_yyget_IdList_tok( void* yy1){ struct Cyc_List_List*
! yyzzz;{ void* _temp1001= yy1; struct Cyc_List_List* _temp1007; _LL1003: if(*((
! void**) _temp1001) ==  Cyc_IdList_tok){ _LL1008: _temp1007=(( struct Cyc_IdList_tok_struct*)
! _temp1001)->f1; goto _LL1004;} else{ goto _LL1005;} _LL1005: goto _LL1006;
! _LL1004: yyzzz= _temp1007; goto _LL1002; _LL1006:( int) _throw(( void*)& Cyc_yyfail_IdList_tok);
! _LL1002:;} return yyzzz;} static unsigned char _temp1010[ 32u]="$(opt_t<var_t>,tqual_t,type_t)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_ParamDecl_tok={ Cyc_Core_Failure,{
! _temp1010, _temp1010, _temp1010 +  32u}}; struct _tuple2* Cyc_yyget_ParamDecl_tok(
! void* yy1){ struct _tuple2* yyzzz;{ void* _temp1011= yy1; struct _tuple2*
! _temp1017; _LL1013: if(*(( void**) _temp1011) ==  Cyc_ParamDecl_tok){ _LL1018:
! _temp1017=(( struct Cyc_ParamDecl_tok_struct*) _temp1011)->f1; goto _LL1014;}
! else{ goto _LL1015;} _LL1015: goto _LL1016; _LL1014: yyzzz= _temp1017; goto
! _LL1012; _LL1016:( int) _throw(( void*)& Cyc_yyfail_ParamDecl_tok); _LL1012:;}
! return yyzzz;} static unsigned char _temp1020[ 40u]="list_t<$(opt_t<var_t>,tqual_t,type_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_ParamDeclList_tok={ Cyc_Core_Failure,{
! _temp1020, _temp1020, _temp1020 +  40u}}; struct Cyc_List_List* Cyc_yyget_ParamDeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1021= yy1; struct Cyc_List_List*
! _temp1027; _LL1023: if(*(( void**) _temp1021) ==  Cyc_ParamDeclList_tok){
! _LL1028: _temp1027=(( struct Cyc_ParamDeclList_tok_struct*) _temp1021)->f1; goto
! _LL1024;} else{ goto _LL1025;} _LL1025: goto _LL1026; _LL1024: yyzzz= _temp1027;
! goto _LL1022; _LL1026:( int) _throw(( void*)& Cyc_yyfail_ParamDeclList_tok);
! _LL1022:;} return yyzzz;} static unsigned char _temp1030[ 107u]="$(list_t<$(opt_t<var_t>,tqual_t,type_t)@>, bool,vararg_info_t *,opt_t<type_t>, list_t<$(type_t,type_t)@>)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_YY1={ Cyc_Core_Failure,{
! _temp1030, _temp1030, _temp1030 +  107u}}; struct _tuple16* Cyc_yyget_YY1( void*
! yy1){ struct _tuple16* yyzzz;{ void* _temp1031= yy1; struct _tuple16* _temp1037;
! _LL1033: if(*(( void**) _temp1031) ==  Cyc_YY1){ _LL1038: _temp1037=(( struct
! Cyc_YY1_struct*) _temp1031)->f1; goto _LL1034;} else{ goto _LL1035;} _LL1035:
! goto _LL1036; _LL1034: yyzzz= _temp1037; goto _LL1032; _LL1036:( int) _throw((
! void*)& Cyc_yyfail_YY1); _LL1032:;} return yyzzz;} static unsigned char
! _temp1040[ 15u]="list_t<type_t>"; static struct Cyc_Core_Failure_struct Cyc_yyfail_TypeList_tok={
! Cyc_Core_Failure,{ _temp1040, _temp1040, _temp1040 +  15u}}; struct Cyc_List_List*
  Cyc_yyget_TypeList_tok( void* yy1){ struct Cyc_List_List* yyzzz;{ void*
! _temp1041= yy1; struct Cyc_List_List* _temp1047; _LL1043: if(*(( void**)
! _temp1041) ==  Cyc_TypeList_tok){ _LL1048: _temp1047=(( struct Cyc_TypeList_tok_struct*)
! _temp1041)->f1; goto _LL1044;} else{ goto _LL1045;} _LL1045: goto _LL1046;
! _LL1044: yyzzz= _temp1047; goto _LL1042; _LL1046:( int) _throw(( void*)& Cyc_yyfail_TypeList_tok);
! _LL1042:;} return yyzzz;} static unsigned char _temp1050[ 21u]="list_t<designator_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_DesignatorList_tok={ Cyc_Core_Failure,{
! _temp1050, _temp1050, _temp1050 +  21u}}; struct Cyc_List_List* Cyc_yyget_DesignatorList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1051= yy1; struct Cyc_List_List*
! _temp1057; _LL1053: if(*(( void**) _temp1051) ==  Cyc_DesignatorList_tok){
! _LL1058: _temp1057=(( struct Cyc_DesignatorList_tok_struct*) _temp1051)->f1;
! goto _LL1054;} else{ goto _LL1055;} _LL1055: goto _LL1056; _LL1054: yyzzz=
! _temp1057; goto _LL1052; _LL1056:( int) _throw(( void*)& Cyc_yyfail_DesignatorList_tok);
! _LL1052:;} return yyzzz;} static unsigned char _temp1060[ 13u]="designator_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Designator_tok={ Cyc_Core_Failure,{
! _temp1060, _temp1060, _temp1060 +  13u}}; void* Cyc_yyget_Designator_tok( void*
! yy1){ void* yyzzz;{ void* _temp1061= yy1; void* _temp1067; _LL1063: if(*(( void**)
! _temp1061) ==  Cyc_Designator_tok){ _LL1068: _temp1067=( void*)(( struct Cyc_Designator_tok_struct*)
! _temp1061)->f1; goto _LL1064;} else{ goto _LL1065;} _LL1065: goto _LL1066;
! _LL1064: yyzzz= _temp1067; goto _LL1062; _LL1066:( int) _throw(( void*)& Cyc_yyfail_Designator_tok);
! _LL1062:;} return yyzzz;} static unsigned char _temp1070[ 7u]="kind_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_Kind_tok={ Cyc_Core_Failure,{
! _temp1070, _temp1070, _temp1070 +  7u}}; void* Cyc_yyget_Kind_tok( void* yy1){
! void* yyzzz;{ void* _temp1071= yy1; void* _temp1077; _LL1073: if(*(( void**)
! _temp1071) ==  Cyc_Kind_tok){ _LL1078: _temp1077=( void*)(( struct Cyc_Kind_tok_struct*)
! _temp1071)->f1; goto _LL1074;} else{ goto _LL1075;} _LL1075: goto _LL1076;
! _LL1074: yyzzz= _temp1077; goto _LL1072; _LL1076:( int) _throw(( void*)& Cyc_yyfail_Kind_tok);
! _LL1072:;} return yyzzz;} static unsigned char _temp1080[ 7u]="type_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_Type_tok={ Cyc_Core_Failure,{
! _temp1080, _temp1080, _temp1080 +  7u}}; void* Cyc_yyget_Type_tok( void* yy1){
! void* yyzzz;{ void* _temp1081= yy1; void* _temp1087; _LL1083: if(*(( void**)
! _temp1081) ==  Cyc_Type_tok){ _LL1088: _temp1087=( void*)(( struct Cyc_Type_tok_struct*)
! _temp1081)->f1; goto _LL1084;} else{ goto _LL1085;} _LL1085: goto _LL1086;
! _LL1084: yyzzz= _temp1087; goto _LL1082; _LL1086:( int) _throw(( void*)& Cyc_yyfail_Type_tok);
! _LL1082:;} return yyzzz;} static unsigned char _temp1090[ 20u]="list_t<attribute_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_AttributeList_tok={ Cyc_Core_Failure,{
! _temp1090, _temp1090, _temp1090 +  20u}}; struct Cyc_List_List* Cyc_yyget_AttributeList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1091= yy1; struct Cyc_List_List*
! _temp1097; _LL1093: if(*(( void**) _temp1091) ==  Cyc_AttributeList_tok){
! _LL1098: _temp1097=(( struct Cyc_AttributeList_tok_struct*) _temp1091)->f1; goto
! _LL1094;} else{ goto _LL1095;} _LL1095: goto _LL1096; _LL1094: yyzzz= _temp1097;
! goto _LL1092; _LL1096:( int) _throw(( void*)& Cyc_yyfail_AttributeList_tok);
! _LL1092:;} return yyzzz;} static unsigned char _temp1100[ 12u]="attribute_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Attribute_tok={ Cyc_Core_Failure,{
! _temp1100, _temp1100, _temp1100 +  12u}}; void* Cyc_yyget_Attribute_tok( void*
! yy1){ void* yyzzz;{ void* _temp1101= yy1; void* _temp1107; _LL1103: if(*(( void**)
! _temp1101) ==  Cyc_Attribute_tok){ _LL1108: _temp1107=( void*)(( struct Cyc_Attribute_tok_struct*)
! _temp1101)->f1; goto _LL1104;} else{ goto _LL1105;} _LL1105: goto _LL1106;
! _LL1104: yyzzz= _temp1107; goto _LL1102; _LL1106:( int) _throw(( void*)& Cyc_yyfail_Attribute_tok);
! _LL1102:;} return yyzzz;} static unsigned char _temp1110[ 12u]="enumfield_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Enumfield_tok={ Cyc_Core_Failure,{
! _temp1110, _temp1110, _temp1110 +  12u}}; struct Cyc_Absyn_Enumfield* Cyc_yyget_Enumfield_tok(
! void* yy1){ struct Cyc_Absyn_Enumfield* yyzzz;{ void* _temp1111= yy1; struct Cyc_Absyn_Enumfield*
! _temp1117; _LL1113: if(*(( void**) _temp1111) ==  Cyc_Enumfield_tok){ _LL1118:
! _temp1117=(( struct Cyc_Enumfield_tok_struct*) _temp1111)->f1; goto _LL1114;}
! else{ goto _LL1115;} _LL1115: goto _LL1116; _LL1114: yyzzz= _temp1117; goto
! _LL1112; _LL1116:( int) _throw(( void*)& Cyc_yyfail_Enumfield_tok); _LL1112:;}
! return yyzzz;} static unsigned char _temp1120[ 20u]="list_t<enumfield_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_EnumfieldList_tok={ Cyc_Core_Failure,{
! _temp1120, _temp1120, _temp1120 +  20u}}; struct Cyc_List_List* Cyc_yyget_EnumfieldList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1121= yy1; struct Cyc_List_List*
! _temp1127; _LL1123: if(*(( void**) _temp1121) ==  Cyc_EnumfieldList_tok){
! _LL1128: _temp1127=(( struct Cyc_EnumfieldList_tok_struct*) _temp1121)->f1; goto
! _LL1124;} else{ goto _LL1125;} _LL1125: goto _LL1126; _LL1124: yyzzz= _temp1127;
! goto _LL1122; _LL1126:( int) _throw(( void*)& Cyc_yyfail_EnumfieldList_tok);
! _LL1122:;} return yyzzz;} static unsigned char _temp1130[ 14u]="opt_t<type_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_TypeOpt_tok={ Cyc_Core_Failure,{
! _temp1130, _temp1130, _temp1130 +  14u}}; struct Cyc_Core_Opt* Cyc_yyget_TypeOpt_tok(
! void* yy1){ struct Cyc_Core_Opt* yyzzz;{ void* _temp1131= yy1; struct Cyc_Core_Opt*
! _temp1137; _LL1133: if(*(( void**) _temp1131) ==  Cyc_TypeOpt_tok){ _LL1138:
! _temp1137=(( struct Cyc_TypeOpt_tok_struct*) _temp1131)->f1; goto _LL1134;}
! else{ goto _LL1135;} _LL1135: goto _LL1136; _LL1134: yyzzz= _temp1137; goto
! _LL1132; _LL1136:( int) _throw(( void*)& Cyc_yyfail_TypeOpt_tok); _LL1132:;}
! return yyzzz;} static unsigned char _temp1140[ 26u]="list_t<$(type_t,type_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Rgnorder_tok={ Cyc_Core_Failure,{
! _temp1140, _temp1140, _temp1140 +  26u}}; struct Cyc_List_List* Cyc_yyget_Rgnorder_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1141= yy1; struct Cyc_List_List*
! _temp1147; _LL1143: if(*(( void**) _temp1141) ==  Cyc_Rgnorder_tok){ _LL1148:
! _temp1147=(( struct Cyc_Rgnorder_tok_struct*) _temp1141)->f1; goto _LL1144;}
! else{ goto _LL1145;} _LL1145: goto _LL1146; _LL1144: yyzzz= _temp1147; goto
! _LL1142; _LL1146:( int) _throw(( void*)& Cyc_yyfail_Rgnorder_tok); _LL1142:;}
  return yyzzz;} struct Cyc_Yyltype{ int timestamp; int first_line; int
  first_column; int last_line; int last_column; } ; struct Cyc_Yyltype Cyc_yynewloc(){
! return({ struct Cyc_Yyltype _temp1149; _temp1149.timestamp= 0; _temp1149.first_line=
! 0; _temp1149.first_column= 0; _temp1149.last_line= 0; _temp1149.last_column= 0;
! _temp1149;});} struct Cyc_Yyltype Cyc_yylloc={ 0, 0, 0, 0, 0}; static short Cyc_yytranslate[
  349u]={ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 120, 2, 2, 102, 118, 114, 2, 98, 99, 109, 112, 100,
  113, 106, 117, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 105, 94, 103, 97, 104, 111, 110, 2,
--- 1664,2061 ----
  8u]="\000\000\000\000YY1"; struct Cyc_YY1_struct{ unsigned char* tag; struct
  _tuple16* f1; } ; unsigned char Cyc_YYINITIALSVAL[ 18u]="\000\000\000\000YYINITIALSVAL";
  unsigned char Cyc_Okay_tok[ 13u]="\000\000\000\000Okay_tok"; static
! unsigned char _temp639[ 15u]="$(sign_t,int)@"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Int_tok={ Cyc_Core_Failure,{ _temp639, _temp639, _temp639 +  15u}};
  struct _tuple15* Cyc_yyget_Int_tok( void* yy1){ struct _tuple15* yyzzz;{ void*
! _temp640= yy1; struct _tuple15* _temp646; _LL642: if(*(( void**) _temp640) == 
! Cyc_Int_tok){ _LL647: _temp646=(( struct Cyc_Int_tok_struct*) _temp640)->f1;
! goto _LL643;} else{ goto _LL644;} _LL644: goto _LL645; _LL643: yyzzz= _temp646;
! goto _LL641; _LL645:( int) _throw(( void*)& Cyc_yyfail_Int_tok); _LL641:;}
! return yyzzz;} static unsigned char _temp649[ 9u]="string_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_String_tok={ Cyc_Core_Failure,{ _temp649, _temp649, _temp649 +  9u}};
  struct _tagged_arr Cyc_yyget_String_tok( void* yy1){ struct _tagged_arr yyzzz;{
! void* _temp650= yy1; struct _tagged_arr _temp656; _LL652: if(*(( void**)
! _temp650) ==  Cyc_String_tok){ _LL657: _temp656=(( struct Cyc_String_tok_struct*)
! _temp650)->f1; goto _LL653;} else{ goto _LL654;} _LL654: goto _LL655; _LL653:
! yyzzz= _temp656; goto _LL651; _LL655:( int) _throw(( void*)& Cyc_yyfail_String_tok);
! _LL651:;} return yyzzz;} static unsigned char _temp659[ 5u]="char"; static
! struct Cyc_Core_Failure_struct Cyc_yyfail_Char_tok={ Cyc_Core_Failure,{ _temp659,
! _temp659, _temp659 +  5u}}; unsigned char Cyc_yyget_Char_tok( void* yy1){
! unsigned char yyzzz;{ void* _temp660= yy1; unsigned char _temp666; _LL662: if(*((
! void**) _temp660) ==  Cyc_Char_tok){ _LL667: _temp666=(( struct Cyc_Char_tok_struct*)
! _temp660)->f1; goto _LL663;} else{ goto _LL664;} _LL664: goto _LL665; _LL663:
! yyzzz= _temp666; goto _LL661; _LL665:( int) _throw(( void*)& Cyc_yyfail_Char_tok);
! _LL661:;} return yyzzz;} static unsigned char _temp669[ 20u]="tunion Pointer_Sort";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Pointer_Sort_tok={ Cyc_Core_Failure,{
! _temp669, _temp669, _temp669 +  20u}}; void* Cyc_yyget_Pointer_Sort_tok( void*
! yy1){ void* yyzzz;{ void* _temp670= yy1; void* _temp676; _LL672: if(*(( void**)
! _temp670) ==  Cyc_Pointer_Sort_tok){ _LL677: _temp676=( void*)(( struct Cyc_Pointer_Sort_tok_struct*)
! _temp670)->f1; goto _LL673;} else{ goto _LL674;} _LL674: goto _LL675; _LL673:
! yyzzz= _temp676; goto _LL671; _LL675:( int) _throw(( void*)& Cyc_yyfail_Pointer_Sort_tok);
! _LL671:;} return yyzzz;} static unsigned char _temp679[ 6u]="exp_t"; static
! struct Cyc_Core_Failure_struct Cyc_yyfail_Exp_tok={ Cyc_Core_Failure,{ _temp679,
! _temp679, _temp679 +  6u}}; struct Cyc_Absyn_Exp* Cyc_yyget_Exp_tok( void* yy1){
! struct Cyc_Absyn_Exp* yyzzz;{ void* _temp680= yy1; struct Cyc_Absyn_Exp*
! _temp686; _LL682: if(*(( void**) _temp680) ==  Cyc_Exp_tok){ _LL687: _temp686=((
! struct Cyc_Exp_tok_struct*) _temp680)->f1; goto _LL683;} else{ goto _LL684;}
! _LL684: goto _LL685; _LL683: yyzzz= _temp686; goto _LL681; _LL685:( int) _throw((
! void*)& Cyc_yyfail_Exp_tok); _LL681:;} return yyzzz;} static unsigned char
! _temp689[ 14u]="list_t<exp_t>"; static struct Cyc_Core_Failure_struct Cyc_yyfail_ExpList_tok={
! Cyc_Core_Failure,{ _temp689, _temp689, _temp689 +  14u}}; struct Cyc_List_List*
! Cyc_yyget_ExpList_tok( void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp690=
! yy1; struct Cyc_List_List* _temp696; _LL692: if(*(( void**) _temp690) ==  Cyc_ExpList_tok){
! _LL697: _temp696=(( struct Cyc_ExpList_tok_struct*) _temp690)->f1; goto _LL693;}
! else{ goto _LL694;} _LL694: goto _LL695; _LL693: yyzzz= _temp696; goto _LL691;
! _LL695:( int) _throw(( void*)& Cyc_yyfail_ExpList_tok); _LL691:;} return yyzzz;}
! static unsigned char _temp699[ 39u]="list_t<$(list_t<designator_t>,exp_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_InitializerList_tok={ Cyc_Core_Failure,{
! _temp699, _temp699, _temp699 +  39u}}; struct Cyc_List_List* Cyc_yyget_InitializerList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp700= yy1; struct Cyc_List_List*
! _temp706; _LL702: if(*(( void**) _temp700) ==  Cyc_InitializerList_tok){ _LL707:
! _temp706=(( struct Cyc_InitializerList_tok_struct*) _temp700)->f1; goto _LL703;}
! else{ goto _LL704;} _LL704: goto _LL705; _LL703: yyzzz= _temp706; goto _LL701;
! _LL705:( int) _throw(( void*)& Cyc_yyfail_InitializerList_tok); _LL701:;} return
! yyzzz;} static unsigned char _temp709[ 9u]="primop_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Primop_tok={ Cyc_Core_Failure,{ _temp709, _temp709, _temp709 +  9u}};
! void* Cyc_yyget_Primop_tok( void* yy1){ void* yyzzz;{ void* _temp710= yy1; void*
! _temp716; _LL712: if(*(( void**) _temp710) ==  Cyc_Primop_tok){ _LL717: _temp716=(
! void*)(( struct Cyc_Primop_tok_struct*) _temp710)->f1; goto _LL713;} else{ goto
! _LL714;} _LL714: goto _LL715; _LL713: yyzzz= _temp716; goto _LL711; _LL715:( int)
! _throw(( void*)& Cyc_yyfail_Primop_tok); _LL711:;} return yyzzz;} static
! unsigned char _temp719[ 16u]="opt_t<primop_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Primopopt_tok={ Cyc_Core_Failure,{ _temp719, _temp719, _temp719 +  16u}};
  struct Cyc_Core_Opt* Cyc_yyget_Primopopt_tok( void* yy1){ struct Cyc_Core_Opt*
! yyzzz;{ void* _temp720= yy1; struct Cyc_Core_Opt* _temp726; _LL722: if(*(( void**)
! _temp720) ==  Cyc_Primopopt_tok){ _LL727: _temp726=(( struct Cyc_Primopopt_tok_struct*)
! _temp720)->f1; goto _LL723;} else{ goto _LL724;} _LL724: goto _LL725; _LL723:
! yyzzz= _temp726; goto _LL721; _LL725:( int) _throw(( void*)& Cyc_yyfail_Primopopt_tok);
! _LL721:;} return yyzzz;} static unsigned char _temp729[ 7u]="qvar_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_QualId_tok={ Cyc_Core_Failure,{
! _temp729, _temp729, _temp729 +  7u}}; struct _tuple1* Cyc_yyget_QualId_tok( void*
! yy1){ struct _tuple1* yyzzz;{ void* _temp730= yy1; struct _tuple1* _temp736;
! _LL732: if(*(( void**) _temp730) ==  Cyc_QualId_tok){ _LL737: _temp736=(( struct
! Cyc_QualId_tok_struct*) _temp730)->f1; goto _LL733;} else{ goto _LL734;} _LL734:
! goto _LL735; _LL733: yyzzz= _temp736; goto _LL731; _LL735:( int) _throw(( void*)&
! Cyc_yyfail_QualId_tok); _LL731:;} return yyzzz;} static unsigned char _temp739[
  7u]="stmt_t"; static struct Cyc_Core_Failure_struct Cyc_yyfail_Stmt_tok={ Cyc_Core_Failure,{
! _temp739, _temp739, _temp739 +  7u}}; struct Cyc_Absyn_Stmt* Cyc_yyget_Stmt_tok(
! void* yy1){ struct Cyc_Absyn_Stmt* yyzzz;{ void* _temp740= yy1; struct Cyc_Absyn_Stmt*
! _temp746; _LL742: if(*(( void**) _temp740) ==  Cyc_Stmt_tok){ _LL747: _temp746=((
! struct Cyc_Stmt_tok_struct*) _temp740)->f1; goto _LL743;} else{ goto _LL744;}
! _LL744: goto _LL745; _LL743: yyzzz= _temp746; goto _LL741; _LL745:( int) _throw((
! void*)& Cyc_yyfail_Stmt_tok); _LL741:;} return yyzzz;} static unsigned char
! _temp749[ 24u]="list_t<switch_clause_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_SwitchClauseList_tok={ Cyc_Core_Failure,{ _temp749, _temp749,
! _temp749 +  24u}}; struct Cyc_List_List* Cyc_yyget_SwitchClauseList_tok( void*
! yy1){ struct Cyc_List_List* yyzzz;{ void* _temp750= yy1; struct Cyc_List_List*
! _temp756; _LL752: if(*(( void**) _temp750) ==  Cyc_SwitchClauseList_tok){ _LL757:
! _temp756=(( struct Cyc_SwitchClauseList_tok_struct*) _temp750)->f1; goto _LL753;}
! else{ goto _LL754;} _LL754: goto _LL755; _LL753: yyzzz= _temp756; goto _LL751;
! _LL755:( int) _throw(( void*)& Cyc_yyfail_SwitchClauseList_tok); _LL751:;}
! return yyzzz;} static unsigned char _temp759[ 25u]="list_t<switchC_clause_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_SwitchCClauseList_tok={ Cyc_Core_Failure,{
! _temp759, _temp759, _temp759 +  25u}}; struct Cyc_List_List* Cyc_yyget_SwitchCClauseList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp760= yy1; struct Cyc_List_List*
! _temp766; _LL762: if(*(( void**) _temp760) ==  Cyc_SwitchCClauseList_tok){
! _LL767: _temp766=(( struct Cyc_SwitchCClauseList_tok_struct*) _temp760)->f1;
! goto _LL763;} else{ goto _LL764;} _LL764: goto _LL765; _LL763: yyzzz= _temp766;
! goto _LL761; _LL765:( int) _throw(( void*)& Cyc_yyfail_SwitchCClauseList_tok);
! _LL761:;} return yyzzz;} static unsigned char _temp769[ 6u]="pat_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_Pattern_tok={ Cyc_Core_Failure,{
! _temp769, _temp769, _temp769 +  6u}}; struct Cyc_Absyn_Pat* Cyc_yyget_Pattern_tok(
! void* yy1){ struct Cyc_Absyn_Pat* yyzzz;{ void* _temp770= yy1; struct Cyc_Absyn_Pat*
! _temp776; _LL772: if(*(( void**) _temp770) ==  Cyc_Pattern_tok){ _LL777:
! _temp776=(( struct Cyc_Pattern_tok_struct*) _temp770)->f1; goto _LL773;} else{
! goto _LL774;} _LL774: goto _LL775; _LL773: yyzzz= _temp776; goto _LL771; _LL775:(
! int) _throw(( void*)& Cyc_yyfail_Pattern_tok); _LL771:;} return yyzzz;} static
! unsigned char _temp779[ 14u]="list_t<pat_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_PatternList_tok={ Cyc_Core_Failure,{ _temp779, _temp779, _temp779 + 
  14u}}; struct Cyc_List_List* Cyc_yyget_PatternList_tok( void* yy1){ struct Cyc_List_List*
! yyzzz;{ void* _temp780= yy1; struct Cyc_List_List* _temp786; _LL782: if(*(( void**)
! _temp780) ==  Cyc_PatternList_tok){ _LL787: _temp786=(( struct Cyc_PatternList_tok_struct*)
! _temp780)->f1; goto _LL783;} else{ goto _LL784;} _LL784: goto _LL785; _LL783:
! yyzzz= _temp786; goto _LL781; _LL785:( int) _throw(( void*)& Cyc_yyfail_PatternList_tok);
! _LL781:;} return yyzzz;} static unsigned char _temp789[ 31u]="$(list_t<designator_t>,pat_t)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_FieldPattern_tok={ Cyc_Core_Failure,{
! _temp789, _temp789, _temp789 +  31u}}; struct _tuple13* Cyc_yyget_FieldPattern_tok(
! void* yy1){ struct _tuple13* yyzzz;{ void* _temp790= yy1; struct _tuple13*
! _temp796; _LL792: if(*(( void**) _temp790) ==  Cyc_FieldPattern_tok){ _LL797:
! _temp796=(( struct Cyc_FieldPattern_tok_struct*) _temp790)->f1; goto _LL793;}
! else{ goto _LL794;} _LL794: goto _LL795; _LL793: yyzzz= _temp796; goto _LL791;
! _LL795:( int) _throw(( void*)& Cyc_yyfail_FieldPattern_tok); _LL791:;} return
! yyzzz;} static unsigned char _temp799[ 39u]="list_t<$(list_t<designator_t>,pat_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_FieldPatternList_tok={ Cyc_Core_Failure,{
! _temp799, _temp799, _temp799 +  39u}}; struct Cyc_List_List* Cyc_yyget_FieldPatternList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp800= yy1; struct Cyc_List_List*
! _temp806; _LL802: if(*(( void**) _temp800) ==  Cyc_FieldPatternList_tok){ _LL807:
! _temp806=(( struct Cyc_FieldPatternList_tok_struct*) _temp800)->f1; goto _LL803;}
! else{ goto _LL804;} _LL804: goto _LL805; _LL803: yyzzz= _temp806; goto _LL801;
! _LL805:( int) _throw(( void*)& Cyc_yyfail_FieldPatternList_tok); _LL801:;}
! return yyzzz;} static unsigned char _temp809[ 9u]="fndecl_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_FnDecl_tok={ Cyc_Core_Failure,{ _temp809, _temp809, _temp809 +  9u}};
  struct Cyc_Absyn_Fndecl* Cyc_yyget_FnDecl_tok( void* yy1){ struct Cyc_Absyn_Fndecl*
! yyzzz;{ void* _temp810= yy1; struct Cyc_Absyn_Fndecl* _temp816; _LL812: if(*((
! void**) _temp810) ==  Cyc_FnDecl_tok){ _LL817: _temp816=(( struct Cyc_FnDecl_tok_struct*)
! _temp810)->f1; goto _LL813;} else{ goto _LL814;} _LL814: goto _LL815; _LL813:
! yyzzz= _temp816; goto _LL811; _LL815:( int) _throw(( void*)& Cyc_yyfail_FnDecl_tok);
! _LL811:;} return yyzzz;} static unsigned char _temp819[ 15u]="list_t<decl_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_DeclList_tok={ Cyc_Core_Failure,{
! _temp819, _temp819, _temp819 +  15u}}; struct Cyc_List_List* Cyc_yyget_DeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp820= yy1; struct Cyc_List_List*
! _temp826; _LL822: if(*(( void**) _temp820) ==  Cyc_DeclList_tok){ _LL827:
! _temp826=(( struct Cyc_DeclList_tok_struct*) _temp820)->f1; goto _LL823;} else{
! goto _LL824;} _LL824: goto _LL825; _LL823: yyzzz= _temp826; goto _LL821; _LL825:(
! int) _throw(( void*)& Cyc_yyfail_DeclList_tok); _LL821:;} return yyzzz;} static
! unsigned char _temp829[ 12u]="decl_spec_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_DeclSpec_tok={ Cyc_Core_Failure,{ _temp829, _temp829, _temp829 +  12u}};
  struct Cyc_Parse_Declaration_spec* Cyc_yyget_DeclSpec_tok( void* yy1){ struct
! Cyc_Parse_Declaration_spec* yyzzz;{ void* _temp830= yy1; struct Cyc_Parse_Declaration_spec*
! _temp836; _LL832: if(*(( void**) _temp830) ==  Cyc_DeclSpec_tok){ _LL837:
! _temp836=(( struct Cyc_DeclSpec_tok_struct*) _temp830)->f1; goto _LL833;} else{
! goto _LL834;} _LL834: goto _LL835; _LL833: yyzzz= _temp836; goto _LL831; _LL835:(
! int) _throw(( void*)& Cyc_yyfail_DeclSpec_tok); _LL831:;} return yyzzz;} static
! unsigned char _temp839[ 27u]="$(declarator_t,exp_opt_t)@"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_InitDecl_tok={ Cyc_Core_Failure,{ _temp839, _temp839, _temp839 +  27u}};
  struct _tuple14* Cyc_yyget_InitDecl_tok( void* yy1){ struct _tuple14* yyzzz;{
! void* _temp840= yy1; struct _tuple14* _temp846; _LL842: if(*(( void**) _temp840)
! ==  Cyc_InitDecl_tok){ _LL847: _temp846=(( struct Cyc_InitDecl_tok_struct*)
! _temp840)->f1; goto _LL843;} else{ goto _LL844;} _LL844: goto _LL845; _LL843:
! yyzzz= _temp846; goto _LL841; _LL845:( int) _throw(( void*)& Cyc_yyfail_InitDecl_tok);
! _LL841:;} return yyzzz;} static unsigned char _temp849[ 35u]="list_t<$(declarator_t,exp_opt_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_InitDeclList_tok={ Cyc_Core_Failure,{
! _temp849, _temp849, _temp849 +  35u}}; struct Cyc_List_List* Cyc_yyget_InitDeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp850= yy1; struct Cyc_List_List*
! _temp856; _LL852: if(*(( void**) _temp850) ==  Cyc_InitDeclList_tok){ _LL857:
! _temp856=(( struct Cyc_InitDeclList_tok_struct*) _temp850)->f1; goto _LL853;}
! else{ goto _LL854;} _LL854: goto _LL855; _LL853: yyzzz= _temp856; goto _LL851;
! _LL855:( int) _throw(( void*)& Cyc_yyfail_InitDeclList_tok); _LL851:;} return
! yyzzz;} static unsigned char _temp859[ 16u]="storage_class_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_StorageClass_tok={ Cyc_Core_Failure,{ _temp859, _temp859, _temp859 + 
  16u}}; enum  Cyc_Parse_Storage_class Cyc_yyget_StorageClass_tok( void* yy1){
! enum  Cyc_Parse_Storage_class yyzzz;{ void* _temp860= yy1; enum  Cyc_Parse_Storage_class
! _temp866; _LL862: if(*(( void**) _temp860) ==  Cyc_StorageClass_tok){ _LL867:
! _temp866=(( struct Cyc_StorageClass_tok_struct*) _temp860)->f1; goto _LL863;}
! else{ goto _LL864;} _LL864: goto _LL865; _LL863: yyzzz= _temp866; goto _LL861;
! _LL865:( int) _throw(( void*)& Cyc_yyfail_StorageClass_tok); _LL861:;} return
! yyzzz;} static unsigned char _temp869[ 17u]="type_specifier_t"; static struct
  Cyc_Core_Failure_struct Cyc_yyfail_TypeSpecifier_tok={ Cyc_Core_Failure,{
! _temp869, _temp869, _temp869 +  17u}}; void* Cyc_yyget_TypeSpecifier_tok( void*
! yy1){ void* yyzzz;{ void* _temp870= yy1; void* _temp876; _LL872: if(*(( void**)
! _temp870) ==  Cyc_TypeSpecifier_tok){ _LL877: _temp876=( void*)(( struct Cyc_TypeSpecifier_tok_struct*)
! _temp870)->f1; goto _LL873;} else{ goto _LL874;} _LL874: goto _LL875; _LL873:
! yyzzz= _temp876; goto _LL871; _LL875:( int) _throw(( void*)& Cyc_yyfail_TypeSpecifier_tok);
! _LL871:;} return yyzzz;} static unsigned char _temp879[ 18u]="struct_or_union_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_StructOrUnion_tok={ Cyc_Core_Failure,{
! _temp879, _temp879, _temp879 +  18u}}; enum  Cyc_Parse_Struct_or_union Cyc_yyget_StructOrUnion_tok(
! void* yy1){ enum  Cyc_Parse_Struct_or_union yyzzz;{ void* _temp880= yy1; enum 
! Cyc_Parse_Struct_or_union _temp886; _LL882: if(*(( void**) _temp880) ==  Cyc_StructOrUnion_tok){
! _LL887: _temp886=(( struct Cyc_StructOrUnion_tok_struct*) _temp880)->f1; goto
! _LL883;} else{ goto _LL884;} _LL884: goto _LL885; _LL883: yyzzz= _temp886; goto
! _LL881; _LL885:( int) _throw(( void*)& Cyc_yyfail_StructOrUnion_tok); _LL881:;}
! return yyzzz;} static unsigned char _temp889[ 8u]="tqual_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_TypeQual_tok={ Cyc_Core_Failure,{ _temp889, _temp889, _temp889 +  8u}};
  struct Cyc_Absyn_Tqual Cyc_yyget_TypeQual_tok( void* yy1){ struct Cyc_Absyn_Tqual
! yyzzz;{ void* _temp890= yy1; struct Cyc_Absyn_Tqual _temp896; _LL892: if(*((
! void**) _temp890) ==  Cyc_TypeQual_tok){ _LL897: _temp896=(( struct Cyc_TypeQual_tok_struct*)
! _temp890)->f1; goto _LL893;} else{ goto _LL894;} _LL894: goto _LL895; _LL893:
! yyzzz= _temp896; goto _LL891; _LL895:( int) _throw(( void*)& Cyc_yyfail_TypeQual_tok);
! _LL891:;} return yyzzz;} static unsigned char _temp899[ 22u]="list_t<structfield_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_StructFieldDeclList_tok={ Cyc_Core_Failure,{
! _temp899, _temp899, _temp899 +  22u}}; struct Cyc_List_List* Cyc_yyget_StructFieldDeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp900= yy1; struct Cyc_List_List*
! _temp906; _LL902: if(*(( void**) _temp900) ==  Cyc_StructFieldDeclList_tok){
! _LL907: _temp906=(( struct Cyc_StructFieldDeclList_tok_struct*) _temp900)->f1;
! goto _LL903;} else{ goto _LL904;} _LL904: goto _LL905; _LL903: yyzzz= _temp906;
! goto _LL901; _LL905:( int) _throw(( void*)& Cyc_yyfail_StructFieldDeclList_tok);
! _LL901:;} return yyzzz;} static unsigned char _temp909[ 30u]="list_t<list_t<structfield_t>>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_StructFieldDeclListList_tok={
! Cyc_Core_Failure,{ _temp909, _temp909, _temp909 +  30u}}; struct Cyc_List_List*
  Cyc_yyget_StructFieldDeclListList_tok( void* yy1){ struct Cyc_List_List* yyzzz;{
! void* _temp910= yy1; struct Cyc_List_List* _temp916; _LL912: if(*(( void**)
! _temp910) ==  Cyc_StructFieldDeclListList_tok){ _LL917: _temp916=(( struct Cyc_StructFieldDeclListList_tok_struct*)
! _temp910)->f1; goto _LL913;} else{ goto _LL914;} _LL914: goto _LL915; _LL913:
! yyzzz= _temp916; goto _LL911; _LL915:( int) _throw(( void*)& Cyc_yyfail_StructFieldDeclListList_tok);
! _LL911:;} return yyzzz;} static unsigned char _temp919[ 24u]="list_t<type_modifier_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_TypeModifierList_tok={ Cyc_Core_Failure,{
! _temp919, _temp919, _temp919 +  24u}}; struct Cyc_List_List* Cyc_yyget_TypeModifierList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp920= yy1; struct Cyc_List_List*
! _temp926; _LL922: if(*(( void**) _temp920) ==  Cyc_TypeModifierList_tok){ _LL927:
! _temp926=(( struct Cyc_TypeModifierList_tok_struct*) _temp920)->f1; goto _LL923;}
! else{ goto _LL924;} _LL924: goto _LL925; _LL923: yyzzz= _temp926; goto _LL921;
! _LL925:( int) _throw(( void*)& Cyc_yyfail_TypeModifierList_tok); _LL921:;}
! return yyzzz;} static unsigned char _temp929[ 13u]="declarator_t"; static struct
! Cyc_Core_Failure_struct Cyc_yyfail_Declarator_tok={ Cyc_Core_Failure,{ _temp929,
! _temp929, _temp929 +  13u}}; struct Cyc_Parse_Declarator* Cyc_yyget_Declarator_tok(
! void* yy1){ struct Cyc_Parse_Declarator* yyzzz;{ void* _temp930= yy1; struct Cyc_Parse_Declarator*
! _temp936; _LL932: if(*(( void**) _temp930) ==  Cyc_Declarator_tok){ _LL937:
! _temp936=(( struct Cyc_Declarator_tok_struct*) _temp930)->f1; goto _LL933;}
! else{ goto _LL934;} _LL934: goto _LL935; _LL933: yyzzz= _temp936; goto _LL931;
! _LL935:( int) _throw(( void*)& Cyc_yyfail_Declarator_tok); _LL931:;} return
! yyzzz;} static unsigned char _temp939[ 21u]="abstractdeclarator_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_AbstractDeclarator_tok={ Cyc_Core_Failure,{
! _temp939, _temp939, _temp939 +  21u}}; struct Cyc_Parse_Abstractdeclarator* Cyc_yyget_AbstractDeclarator_tok(
! void* yy1){ struct Cyc_Parse_Abstractdeclarator* yyzzz;{ void* _temp940= yy1;
! struct Cyc_Parse_Abstractdeclarator* _temp946; _LL942: if(*(( void**) _temp940)
! ==  Cyc_AbstractDeclarator_tok){ _LL947: _temp946=(( struct Cyc_AbstractDeclarator_tok_struct*)
! _temp940)->f1; goto _LL943;} else{ goto _LL944;} _LL944: goto _LL945; _LL943:
! yyzzz= _temp946; goto _LL941; _LL945:( int) _throw(( void*)& Cyc_yyfail_AbstractDeclarator_tok);
! _LL941:;} return yyzzz;} static unsigned char _temp949[ 5u]="bool"; static
! struct Cyc_Core_Failure_struct Cyc_yyfail_Bool_tok={ Cyc_Core_Failure,{ _temp949,
! _temp949, _temp949 +  5u}}; int Cyc_yyget_Bool_tok( void* yy1){ int yyzzz;{ void*
! _temp950= yy1; int _temp956; _LL952: if(*(( void**) _temp950) ==  Cyc_Bool_tok){
! _LL957: _temp956=(( struct Cyc_Bool_tok_struct*) _temp950)->f1; goto _LL953;}
! else{ goto _LL954;} _LL954: goto _LL955; _LL953: yyzzz= _temp956; goto _LL951;
! _LL955:( int) _throw(( void*)& Cyc_yyfail_Bool_tok); _LL951:;} return yyzzz;}
! static unsigned char _temp959[ 8u]="scope_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_Scope_tok={ Cyc_Core_Failure,{ _temp959, _temp959, _temp959 +  8u}};
! void* Cyc_yyget_Scope_tok( void* yy1){ void* yyzzz;{ void* _temp960= yy1; void*
! _temp966; _LL962: if(*(( void**) _temp960) ==  Cyc_Scope_tok){ _LL967: _temp966=(
! void*)(( struct Cyc_Scope_tok_struct*) _temp960)->f1; goto _LL963;} else{ goto
! _LL964;} _LL964: goto _LL965; _LL963: yyzzz= _temp966; goto _LL961; _LL965:( int)
! _throw(( void*)& Cyc_yyfail_Scope_tok); _LL961:;} return yyzzz;} static
! unsigned char _temp969[ 14u]="tunionfield_t"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_TunionField_tok={ Cyc_Core_Failure,{ _temp969, _temp969, _temp969 + 
  14u}}; struct Cyc_Absyn_Tunionfield* Cyc_yyget_TunionField_tok( void* yy1){
! struct Cyc_Absyn_Tunionfield* yyzzz;{ void* _temp970= yy1; struct Cyc_Absyn_Tunionfield*
! _temp976; _LL972: if(*(( void**) _temp970) ==  Cyc_TunionField_tok){ _LL977:
! _temp976=(( struct Cyc_TunionField_tok_struct*) _temp970)->f1; goto _LL973;}
! else{ goto _LL974;} _LL974: goto _LL975; _LL973: yyzzz= _temp976; goto _LL971;
! _LL975:( int) _throw(( void*)& Cyc_yyfail_TunionField_tok); _LL971:;} return
! yyzzz;} static unsigned char _temp979[ 22u]="list_t<tunionfield_t>"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_TunionFieldList_tok={ Cyc_Core_Failure,{
! _temp979, _temp979, _temp979 +  22u}}; struct Cyc_List_List* Cyc_yyget_TunionFieldList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp980= yy1; struct Cyc_List_List*
! _temp986; _LL982: if(*(( void**) _temp980) ==  Cyc_TunionFieldList_tok){ _LL987:
! _temp986=(( struct Cyc_TunionFieldList_tok_struct*) _temp980)->f1; goto _LL983;}
! else{ goto _LL984;} _LL984: goto _LL985; _LL983: yyzzz= _temp986; goto _LL981;
! _LL985:( int) _throw(( void*)& Cyc_yyfail_TunionFieldList_tok); _LL981:;} return
! yyzzz;} static unsigned char _temp989[ 50u]="$(tqual_t,list_t<type_specifier_t>,attributes_t)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_QualSpecList_tok={ Cyc_Core_Failure,{
! _temp989, _temp989, _temp989 +  50u}}; struct _tuple17* Cyc_yyget_QualSpecList_tok(
! void* yy1){ struct _tuple17* yyzzz;{ void* _temp990= yy1; struct _tuple17*
! _temp996; _LL992: if(*(( void**) _temp990) ==  Cyc_QualSpecList_tok){ _LL997:
! _temp996=(( struct Cyc_QualSpecList_tok_struct*) _temp990)->f1; goto _LL993;}
! else{ goto _LL994;} _LL994: goto _LL995; _LL993: yyzzz= _temp996; goto _LL991;
! _LL995:( int) _throw(( void*)& Cyc_yyfail_QualSpecList_tok); _LL991:;} return
! yyzzz;} static unsigned char _temp999[ 14u]="list_t<var_t>"; static struct Cyc_Core_Failure_struct
! Cyc_yyfail_IdList_tok={ Cyc_Core_Failure,{ _temp999, _temp999, _temp999 +  14u}};
  struct Cyc_List_List* Cyc_yyget_IdList_tok( void* yy1){ struct Cyc_List_List*
! yyzzz;{ void* _temp1000= yy1; struct Cyc_List_List* _temp1006; _LL1002: if(*((
! void**) _temp1000) ==  Cyc_IdList_tok){ _LL1007: _temp1006=(( struct Cyc_IdList_tok_struct*)
! _temp1000)->f1; goto _LL1003;} else{ goto _LL1004;} _LL1004: goto _LL1005;
! _LL1003: yyzzz= _temp1006; goto _LL1001; _LL1005:( int) _throw(( void*)& Cyc_yyfail_IdList_tok);
! _LL1001:;} return yyzzz;} static unsigned char _temp1009[ 32u]="$(opt_t<var_t>,tqual_t,type_t)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_ParamDecl_tok={ Cyc_Core_Failure,{
! _temp1009, _temp1009, _temp1009 +  32u}}; struct _tuple2* Cyc_yyget_ParamDecl_tok(
! void* yy1){ struct _tuple2* yyzzz;{ void* _temp1010= yy1; struct _tuple2*
! _temp1016; _LL1012: if(*(( void**) _temp1010) ==  Cyc_ParamDecl_tok){ _LL1017:
! _temp1016=(( struct Cyc_ParamDecl_tok_struct*) _temp1010)->f1; goto _LL1013;}
! else{ goto _LL1014;} _LL1014: goto _LL1015; _LL1013: yyzzz= _temp1016; goto
! _LL1011; _LL1015:( int) _throw(( void*)& Cyc_yyfail_ParamDecl_tok); _LL1011:;}
! return yyzzz;} static unsigned char _temp1019[ 40u]="list_t<$(opt_t<var_t>,tqual_t,type_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_ParamDeclList_tok={ Cyc_Core_Failure,{
! _temp1019, _temp1019, _temp1019 +  40u}}; struct Cyc_List_List* Cyc_yyget_ParamDeclList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1020= yy1; struct Cyc_List_List*
! _temp1026; _LL1022: if(*(( void**) _temp1020) ==  Cyc_ParamDeclList_tok){
! _LL1027: _temp1026=(( struct Cyc_ParamDeclList_tok_struct*) _temp1020)->f1; goto
! _LL1023;} else{ goto _LL1024;} _LL1024: goto _LL1025; _LL1023: yyzzz= _temp1026;
! goto _LL1021; _LL1025:( int) _throw(( void*)& Cyc_yyfail_ParamDeclList_tok);
! _LL1021:;} return yyzzz;} static unsigned char _temp1029[ 107u]="$(list_t<$(opt_t<var_t>,tqual_t,type_t)@>, bool,vararg_info_t *,opt_t<type_t>, list_t<$(type_t,type_t)@>)@";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_YY1={ Cyc_Core_Failure,{
! _temp1029, _temp1029, _temp1029 +  107u}}; struct _tuple16* Cyc_yyget_YY1( void*
! yy1){ struct _tuple16* yyzzz;{ void* _temp1030= yy1; struct _tuple16* _temp1036;
! _LL1032: if(*(( void**) _temp1030) ==  Cyc_YY1){ _LL1037: _temp1036=(( struct
! Cyc_YY1_struct*) _temp1030)->f1; goto _LL1033;} else{ goto _LL1034;} _LL1034:
! goto _LL1035; _LL1033: yyzzz= _temp1036; goto _LL1031; _LL1035:( int) _throw((
! void*)& Cyc_yyfail_YY1); _LL1031:;} return yyzzz;} static unsigned char
! _temp1039[ 15u]="list_t<type_t>"; static struct Cyc_Core_Failure_struct Cyc_yyfail_TypeList_tok={
! Cyc_Core_Failure,{ _temp1039, _temp1039, _temp1039 +  15u}}; struct Cyc_List_List*
  Cyc_yyget_TypeList_tok( void* yy1){ struct Cyc_List_List* yyzzz;{ void*
! _temp1040= yy1; struct Cyc_List_List* _temp1046; _LL1042: if(*(( void**)
! _temp1040) ==  Cyc_TypeList_tok){ _LL1047: _temp1046=(( struct Cyc_TypeList_tok_struct*)
! _temp1040)->f1; goto _LL1043;} else{ goto _LL1044;} _LL1044: goto _LL1045;
! _LL1043: yyzzz= _temp1046; goto _LL1041; _LL1045:( int) _throw(( void*)& Cyc_yyfail_TypeList_tok);
! _LL1041:;} return yyzzz;} static unsigned char _temp1049[ 21u]="list_t<designator_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_DesignatorList_tok={ Cyc_Core_Failure,{
! _temp1049, _temp1049, _temp1049 +  21u}}; struct Cyc_List_List* Cyc_yyget_DesignatorList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1050= yy1; struct Cyc_List_List*
! _temp1056; _LL1052: if(*(( void**) _temp1050) ==  Cyc_DesignatorList_tok){
! _LL1057: _temp1056=(( struct Cyc_DesignatorList_tok_struct*) _temp1050)->f1;
! goto _LL1053;} else{ goto _LL1054;} _LL1054: goto _LL1055; _LL1053: yyzzz=
! _temp1056; goto _LL1051; _LL1055:( int) _throw(( void*)& Cyc_yyfail_DesignatorList_tok);
! _LL1051:;} return yyzzz;} static unsigned char _temp1059[ 13u]="designator_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Designator_tok={ Cyc_Core_Failure,{
! _temp1059, _temp1059, _temp1059 +  13u}}; void* Cyc_yyget_Designator_tok( void*
! yy1){ void* yyzzz;{ void* _temp1060= yy1; void* _temp1066; _LL1062: if(*(( void**)
! _temp1060) ==  Cyc_Designator_tok){ _LL1067: _temp1066=( void*)(( struct Cyc_Designator_tok_struct*)
! _temp1060)->f1; goto _LL1063;} else{ goto _LL1064;} _LL1064: goto _LL1065;
! _LL1063: yyzzz= _temp1066; goto _LL1061; _LL1065:( int) _throw(( void*)& Cyc_yyfail_Designator_tok);
! _LL1061:;} return yyzzz;} static unsigned char _temp1069[ 7u]="kind_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_Kind_tok={ Cyc_Core_Failure,{
! _temp1069, _temp1069, _temp1069 +  7u}}; void* Cyc_yyget_Kind_tok( void* yy1){
! void* yyzzz;{ void* _temp1070= yy1; void* _temp1076; _LL1072: if(*(( void**)
! _temp1070) ==  Cyc_Kind_tok){ _LL1077: _temp1076=( void*)(( struct Cyc_Kind_tok_struct*)
! _temp1070)->f1; goto _LL1073;} else{ goto _LL1074;} _LL1074: goto _LL1075;
! _LL1073: yyzzz= _temp1076; goto _LL1071; _LL1075:( int) _throw(( void*)& Cyc_yyfail_Kind_tok);
! _LL1071:;} return yyzzz;} static unsigned char _temp1079[ 7u]="type_t"; static
  struct Cyc_Core_Failure_struct Cyc_yyfail_Type_tok={ Cyc_Core_Failure,{
! _temp1079, _temp1079, _temp1079 +  7u}}; void* Cyc_yyget_Type_tok( void* yy1){
! void* yyzzz;{ void* _temp1080= yy1; void* _temp1086; _LL1082: if(*(( void**)
! _temp1080) ==  Cyc_Type_tok){ _LL1087: _temp1086=( void*)(( struct Cyc_Type_tok_struct*)
! _temp1080)->f1; goto _LL1083;} else{ goto _LL1084;} _LL1084: goto _LL1085;
! _LL1083: yyzzz= _temp1086; goto _LL1081; _LL1085:( int) _throw(( void*)& Cyc_yyfail_Type_tok);
! _LL1081:;} return yyzzz;} static unsigned char _temp1089[ 20u]="list_t<attribute_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_AttributeList_tok={ Cyc_Core_Failure,{
! _temp1089, _temp1089, _temp1089 +  20u}}; struct Cyc_List_List* Cyc_yyget_AttributeList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1090= yy1; struct Cyc_List_List*
! _temp1096; _LL1092: if(*(( void**) _temp1090) ==  Cyc_AttributeList_tok){
! _LL1097: _temp1096=(( struct Cyc_AttributeList_tok_struct*) _temp1090)->f1; goto
! _LL1093;} else{ goto _LL1094;} _LL1094: goto _LL1095; _LL1093: yyzzz= _temp1096;
! goto _LL1091; _LL1095:( int) _throw(( void*)& Cyc_yyfail_AttributeList_tok);
! _LL1091:;} return yyzzz;} static unsigned char _temp1099[ 12u]="attribute_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Attribute_tok={ Cyc_Core_Failure,{
! _temp1099, _temp1099, _temp1099 +  12u}}; void* Cyc_yyget_Attribute_tok( void*
! yy1){ void* yyzzz;{ void* _temp1100= yy1; void* _temp1106; _LL1102: if(*(( void**)
! _temp1100) ==  Cyc_Attribute_tok){ _LL1107: _temp1106=( void*)(( struct Cyc_Attribute_tok_struct*)
! _temp1100)->f1; goto _LL1103;} else{ goto _LL1104;} _LL1104: goto _LL1105;
! _LL1103: yyzzz= _temp1106; goto _LL1101; _LL1105:( int) _throw(( void*)& Cyc_yyfail_Attribute_tok);
! _LL1101:;} return yyzzz;} static unsigned char _temp1109[ 12u]="enumfield_t";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Enumfield_tok={ Cyc_Core_Failure,{
! _temp1109, _temp1109, _temp1109 +  12u}}; struct Cyc_Absyn_Enumfield* Cyc_yyget_Enumfield_tok(
! void* yy1){ struct Cyc_Absyn_Enumfield* yyzzz;{ void* _temp1110= yy1; struct Cyc_Absyn_Enumfield*
! _temp1116; _LL1112: if(*(( void**) _temp1110) ==  Cyc_Enumfield_tok){ _LL1117:
! _temp1116=(( struct Cyc_Enumfield_tok_struct*) _temp1110)->f1; goto _LL1113;}
! else{ goto _LL1114;} _LL1114: goto _LL1115; _LL1113: yyzzz= _temp1116; goto
! _LL1111; _LL1115:( int) _throw(( void*)& Cyc_yyfail_Enumfield_tok); _LL1111:;}
! return yyzzz;} static unsigned char _temp1119[ 20u]="list_t<enumfield_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_EnumfieldList_tok={ Cyc_Core_Failure,{
! _temp1119, _temp1119, _temp1119 +  20u}}; struct Cyc_List_List* Cyc_yyget_EnumfieldList_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1120= yy1; struct Cyc_List_List*
! _temp1126; _LL1122: if(*(( void**) _temp1120) ==  Cyc_EnumfieldList_tok){
! _LL1127: _temp1126=(( struct Cyc_EnumfieldList_tok_struct*) _temp1120)->f1; goto
! _LL1123;} else{ goto _LL1124;} _LL1124: goto _LL1125; _LL1123: yyzzz= _temp1126;
! goto _LL1121; _LL1125:( int) _throw(( void*)& Cyc_yyfail_EnumfieldList_tok);
! _LL1121:;} return yyzzz;} static unsigned char _temp1129[ 14u]="opt_t<type_t>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_TypeOpt_tok={ Cyc_Core_Failure,{
! _temp1129, _temp1129, _temp1129 +  14u}}; struct Cyc_Core_Opt* Cyc_yyget_TypeOpt_tok(
! void* yy1){ struct Cyc_Core_Opt* yyzzz;{ void* _temp1130= yy1; struct Cyc_Core_Opt*
! _temp1136; _LL1132: if(*(( void**) _temp1130) ==  Cyc_TypeOpt_tok){ _LL1137:
! _temp1136=(( struct Cyc_TypeOpt_tok_struct*) _temp1130)->f1; goto _LL1133;}
! else{ goto _LL1134;} _LL1134: goto _LL1135; _LL1133: yyzzz= _temp1136; goto
! _LL1131; _LL1135:( int) _throw(( void*)& Cyc_yyfail_TypeOpt_tok); _LL1131:;}
! return yyzzz;} static unsigned char _temp1139[ 26u]="list_t<$(type_t,type_t)@>";
  static struct Cyc_Core_Failure_struct Cyc_yyfail_Rgnorder_tok={ Cyc_Core_Failure,{
! _temp1139, _temp1139, _temp1139 +  26u}}; struct Cyc_List_List* Cyc_yyget_Rgnorder_tok(
! void* yy1){ struct Cyc_List_List* yyzzz;{ void* _temp1140= yy1; struct Cyc_List_List*
! _temp1146; _LL1142: if(*(( void**) _temp1140) ==  Cyc_Rgnorder_tok){ _LL1147:
! _temp1146=(( struct Cyc_Rgnorder_tok_struct*) _temp1140)->f1; goto _LL1143;}
! else{ goto _LL1144;} _LL1144: goto _LL1145; _LL1143: yyzzz= _temp1146; goto
! _LL1141; _LL1145:( int) _throw(( void*)& Cyc_yyfail_Rgnorder_tok); _LL1141:;}
  return yyzzz;} struct Cyc_Yyltype{ int timestamp; int first_line; int
  first_column; int last_line; int last_column; } ; struct Cyc_Yyltype Cyc_yynewloc(){
! return({ struct Cyc_Yyltype _temp1148; _temp1148.timestamp= 0; _temp1148.first_line=
! 0; _temp1148.first_column= 0; _temp1148.last_line= 0; _temp1148.last_column= 0;
! _temp1148;});} struct Cyc_Yyltype Cyc_yylloc={ 0, 0, 0, 0, 0}; static short Cyc_yytranslate[
  349u]={ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 120, 2, 2, 102, 118, 114, 2, 98, 99, 109, 112, 100,
  113, 106, 117, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 105, 94, 103, 97, 104, 111, 110, 2,
***************
*** 2075,2340 ****
  39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
  59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
  79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93}; static
! unsigned char _temp1150[ 2u]="$"; static unsigned char _temp1151[ 6u]="error";
! static unsigned char _temp1152[ 12u]="$undefined."; static unsigned char
! _temp1153[ 5u]="AUTO"; static unsigned char _temp1154[ 9u]="REGISTER"; static
! unsigned char _temp1155[ 7u]="STATIC"; static unsigned char _temp1156[ 7u]="EXTERN";
! static unsigned char _temp1157[ 8u]="TYPEDEF"; static unsigned char _temp1158[ 5u]="VOID";
! static unsigned char _temp1159[ 5u]="CHAR"; static unsigned char _temp1160[ 6u]="SHORT";
! static unsigned char _temp1161[ 4u]="INT"; static unsigned char _temp1162[ 5u]="LONG";
! static unsigned char _temp1163[ 6u]="FLOAT"; static unsigned char _temp1164[ 7u]="DOUBLE";
! static unsigned char _temp1165[ 7u]="SIGNED"; static unsigned char _temp1166[ 9u]="UNSIGNED";
! static unsigned char _temp1167[ 6u]="CONST"; static unsigned char _temp1168[ 9u]="VOLATILE";
! static unsigned char _temp1169[ 9u]="RESTRICT"; static unsigned char _temp1170[
! 7u]="STRUCT"; static unsigned char _temp1171[ 6u]="UNION"; static unsigned char
! _temp1172[ 5u]="CASE"; static unsigned char _temp1173[ 8u]="DEFAULT"; static
! unsigned char _temp1174[ 7u]="INLINE"; static unsigned char _temp1175[ 7u]="SIZEOF";
! static unsigned char _temp1176[ 9u]="OFFSETOF"; static unsigned char _temp1177[
! 3u]="IF"; static unsigned char _temp1178[ 5u]="ELSE"; static unsigned char
! _temp1179[ 7u]="SWITCH"; static unsigned char _temp1180[ 6u]="WHILE"; static
! unsigned char _temp1181[ 3u]="DO"; static unsigned char _temp1182[ 4u]="FOR";
! static unsigned char _temp1183[ 5u]="GOTO"; static unsigned char _temp1184[ 9u]="CONTINUE";
! static unsigned char _temp1185[ 6u]="BREAK"; static unsigned char _temp1186[ 7u]="RETURN";
! static unsigned char _temp1187[ 5u]="ENUM"; static unsigned char _temp1188[ 8u]="NULL_kw";
! static unsigned char _temp1189[ 4u]="LET"; static unsigned char _temp1190[ 6u]="THROW";
! static unsigned char _temp1191[ 4u]="TRY"; static unsigned char _temp1192[ 6u]="CATCH";
! static unsigned char _temp1193[ 4u]="NEW"; static unsigned char _temp1194[ 9u]="ABSTRACT";
! static unsigned char _temp1195[ 9u]="FALLTHRU"; static unsigned char _temp1196[
! 6u]="USING"; static unsigned char _temp1197[ 10u]="NAMESPACE"; static
! unsigned char _temp1198[ 7u]="TUNION"; static unsigned char _temp1199[ 8u]="XTUNION";
! static unsigned char _temp1200[ 5u]="FILL"; static unsigned char _temp1201[ 8u]="CODEGEN";
! static unsigned char _temp1202[ 4u]="CUT"; static unsigned char _temp1203[ 7u]="SPLICE";
! static unsigned char _temp1204[ 7u]="MALLOC"; static unsigned char _temp1205[ 9u]="REGION_T";
! static unsigned char _temp1206[ 7u]="REGION"; static unsigned char _temp1207[ 5u]="RNEW";
! static unsigned char _temp1208[ 8u]="RMALLOC"; static unsigned char _temp1209[ 8u]="REGIONS";
! static unsigned char _temp1210[ 4u]="GEN"; static unsigned char _temp1211[ 7u]="PTR_OP";
! static unsigned char _temp1212[ 7u]="INC_OP"; static unsigned char _temp1213[ 7u]="DEC_OP";
! static unsigned char _temp1214[ 8u]="LEFT_OP"; static unsigned char _temp1215[ 9u]="RIGHT_OP";
! static unsigned char _temp1216[ 6u]="LE_OP"; static unsigned char _temp1217[ 6u]="GE_OP";
! static unsigned char _temp1218[ 6u]="EQ_OP"; static unsigned char _temp1219[ 6u]="NE_OP";
! static unsigned char _temp1220[ 7u]="AND_OP"; static unsigned char _temp1221[ 6u]="OR_OP";
! static unsigned char _temp1222[ 11u]="MUL_ASSIGN"; static unsigned char
! _temp1223[ 11u]="DIV_ASSIGN"; static unsigned char _temp1224[ 11u]="MOD_ASSIGN";
! static unsigned char _temp1225[ 11u]="ADD_ASSIGN"; static unsigned char
! _temp1226[ 11u]="SUB_ASSIGN"; static unsigned char _temp1227[ 12u]="LEFT_ASSIGN";
! static unsigned char _temp1228[ 13u]="RIGHT_ASSIGN"; static unsigned char
! _temp1229[ 11u]="AND_ASSIGN"; static unsigned char _temp1230[ 11u]="XOR_ASSIGN";
! static unsigned char _temp1231[ 10u]="OR_ASSIGN"; static unsigned char _temp1232[
! 9u]="ELLIPSIS"; static unsigned char _temp1233[ 11u]="LEFT_RIGHT"; static
! unsigned char _temp1234[ 12u]="COLON_COLON"; static unsigned char _temp1235[ 11u]="IDENTIFIER";
! static unsigned char _temp1236[ 17u]="INTEGER_CONSTANT"; static unsigned char
! _temp1237[ 7u]="STRING"; static unsigned char _temp1238[ 19u]="CHARACTER_CONSTANT";
! static unsigned char _temp1239[ 18u]="FLOATING_CONSTANT"; static unsigned char
! _temp1240[ 9u]="TYPE_VAR"; static unsigned char _temp1241[ 16u]="QUAL_IDENTIFIER";
! static unsigned char _temp1242[ 18u]="QUAL_TYPEDEF_NAME"; static unsigned char
! _temp1243[ 10u]="ATTRIBUTE"; static unsigned char _temp1244[ 4u]="';'"; static
! unsigned char _temp1245[ 4u]="'{'"; static unsigned char _temp1246[ 4u]="'}'";
! static unsigned char _temp1247[ 4u]="'='"; static unsigned char _temp1248[ 4u]="'('";
! static unsigned char _temp1249[ 4u]="')'"; static unsigned char _temp1250[ 4u]="','";
! static unsigned char _temp1251[ 4u]="'_'"; static unsigned char _temp1252[ 4u]="'$'";
! static unsigned char _temp1253[ 4u]="'<'"; static unsigned char _temp1254[ 4u]="'>'";
! static unsigned char _temp1255[ 4u]="':'"; static unsigned char _temp1256[ 4u]="'.'";
! static unsigned char _temp1257[ 4u]="'['"; static unsigned char _temp1258[ 4u]="']'";
! static unsigned char _temp1259[ 4u]="'*'"; static unsigned char _temp1260[ 4u]="'@'";
! static unsigned char _temp1261[ 4u]="'?'"; static unsigned char _temp1262[ 4u]="'+'";
! static unsigned char _temp1263[ 4u]="'-'"; static unsigned char _temp1264[ 4u]="'&'";
! static unsigned char _temp1265[ 4u]="'|'"; static unsigned char _temp1266[ 4u]="'^'";
! static unsigned char _temp1267[ 4u]="'/'"; static unsigned char _temp1268[ 4u]="'%'";
! static unsigned char _temp1269[ 4u]="'~'"; static unsigned char _temp1270[ 4u]="'!'";
! static unsigned char _temp1271[ 5u]="prog"; static unsigned char _temp1272[ 17u]="translation_unit";
! static unsigned char _temp1273[ 21u]="external_declaration"; static
! unsigned char _temp1274[ 20u]="function_definition"; static unsigned char
! _temp1275[ 21u]="function_definition2"; static unsigned char _temp1276[ 13u]="using_action";
! static unsigned char _temp1277[ 15u]="unusing_action"; static unsigned char
! _temp1278[ 17u]="namespace_action"; static unsigned char _temp1279[ 19u]="unnamespace_action";
! static unsigned char _temp1280[ 12u]="declaration"; static unsigned char
! _temp1281[ 17u]="declaration_list"; static unsigned char _temp1282[ 23u]="declaration_specifiers";
! static unsigned char _temp1283[ 24u]="storage_class_specifier"; static
! unsigned char _temp1284[ 15u]="attributes_opt"; static unsigned char _temp1285[
! 11u]="attributes"; static unsigned char _temp1286[ 15u]="attribute_list"; static
! unsigned char _temp1287[ 10u]="attribute"; static unsigned char _temp1288[ 15u]="type_specifier";
! static unsigned char _temp1289[ 5u]="kind"; static unsigned char _temp1290[ 15u]="type_qualifier";
! static unsigned char _temp1291[ 15u]="enum_specifier"; static unsigned char
! _temp1292[ 11u]="enum_field"; static unsigned char _temp1293[ 22u]="enum_declaration_list";
! static unsigned char _temp1294[ 26u]="struct_or_union_specifier"; static
! unsigned char _temp1295[ 16u]="type_params_opt"; static unsigned char _temp1296[
! 16u]="struct_or_union"; static unsigned char _temp1297[ 24u]="struct_declaration_list";
! static unsigned char _temp1298[ 25u]="struct_declaration_list0"; static
! unsigned char _temp1299[ 21u]="init_declarator_list"; static unsigned char
! _temp1300[ 22u]="init_declarator_list0"; static unsigned char _temp1301[ 16u]="init_declarator";
! static unsigned char _temp1302[ 19u]="struct_declaration"; static unsigned char
! _temp1303[ 25u]="specifier_qualifier_list"; static unsigned char _temp1304[ 23u]="struct_declarator_list";
! static unsigned char _temp1305[ 24u]="struct_declarator_list0"; static
! unsigned char _temp1306[ 18u]="struct_declarator"; static unsigned char
! _temp1307[ 17u]="tunion_specifier"; static unsigned char _temp1308[ 18u]="tunion_or_xtunion";
! static unsigned char _temp1309[ 17u]="tunionfield_list"; static unsigned char
! _temp1310[ 18u]="tunionfield_scope"; static unsigned char _temp1311[ 12u]="tunionfield";
! static unsigned char _temp1312[ 11u]="declarator"; static unsigned char
! _temp1313[ 18u]="direct_declarator"; static unsigned char _temp1314[ 8u]="pointer";
! static unsigned char _temp1315[ 13u]="pointer_char"; static unsigned char
! _temp1316[ 8u]="rgn_opt"; static unsigned char _temp1317[ 4u]="rgn"; static
! unsigned char _temp1318[ 20u]="type_qualifier_list"; static unsigned char
! _temp1319[ 20u]="parameter_type_list"; static unsigned char _temp1320[ 9u]="type_var";
! static unsigned char _temp1321[ 16u]="optional_effect"; static unsigned char
! _temp1322[ 19u]="optional_rgn_order"; static unsigned char _temp1323[ 10u]="rgn_order";
! static unsigned char _temp1324[ 16u]="optional_inject"; static unsigned char
! _temp1325[ 11u]="effect_set"; static unsigned char _temp1326[ 14u]="atomic_effect";
! static unsigned char _temp1327[ 11u]="region_set"; static unsigned char
! _temp1328[ 15u]="parameter_list"; static unsigned char _temp1329[ 22u]="parameter_declaration";
! static unsigned char _temp1330[ 16u]="identifier_list"; static unsigned char
! _temp1331[ 17u]="identifier_list0"; static unsigned char _temp1332[ 12u]="initializer";
! static unsigned char _temp1333[ 18u]="array_initializer"; static unsigned char
! _temp1334[ 17u]="initializer_list"; static unsigned char _temp1335[ 12u]="designation";
! static unsigned char _temp1336[ 16u]="designator_list"; static unsigned char
! _temp1337[ 11u]="designator"; static unsigned char _temp1338[ 10u]="type_name";
! static unsigned char _temp1339[ 14u]="any_type_name"; static unsigned char
! _temp1340[ 15u]="type_name_list"; static unsigned char _temp1341[ 20u]="abstract_declarator";
! static unsigned char _temp1342[ 27u]="direct_abstract_declarator"; static
! unsigned char _temp1343[ 10u]="statement"; static unsigned char _temp1344[ 18u]="labeled_statement";
! static unsigned char _temp1345[ 21u]="expression_statement"; static
! unsigned char _temp1346[ 19u]="compound_statement"; static unsigned char
! _temp1347[ 16u]="block_item_list"; static unsigned char _temp1348[ 20u]="selection_statement";
! static unsigned char _temp1349[ 15u]="switch_clauses"; static unsigned char
! _temp1350[ 16u]="switchC_clauses"; static unsigned char _temp1351[ 20u]="iteration_statement";
! static unsigned char _temp1352[ 15u]="jump_statement"; static unsigned char
! _temp1353[ 8u]="pattern"; static unsigned char _temp1354[ 19u]="tuple_pattern_list";
! static unsigned char _temp1355[ 20u]="tuple_pattern_list0"; static unsigned char
! _temp1356[ 14u]="field_pattern"; static unsigned char _temp1357[ 19u]="field_pattern_list";
! static unsigned char _temp1358[ 20u]="field_pattern_list0"; static unsigned char
! _temp1359[ 11u]="expression"; static unsigned char _temp1360[ 22u]="assignment_expression";
! static unsigned char _temp1361[ 20u]="assignment_operator"; static unsigned char
! _temp1362[ 23u]="conditional_expression"; static unsigned char _temp1363[ 20u]="constant_expression";
! static unsigned char _temp1364[ 22u]="logical_or_expression"; static
! unsigned char _temp1365[ 23u]="logical_and_expression"; static unsigned char
! _temp1366[ 24u]="inclusive_or_expression"; static unsigned char _temp1367[ 24u]="exclusive_or_expression";
! static unsigned char _temp1368[ 15u]="and_expression"; static unsigned char
! _temp1369[ 20u]="equality_expression"; static unsigned char _temp1370[ 22u]="relational_expression";
! static unsigned char _temp1371[ 17u]="shift_expression"; static unsigned char
! _temp1372[ 20u]="additive_expression"; static unsigned char _temp1373[ 26u]="multiplicative_expression";
! static unsigned char _temp1374[ 16u]="cast_expression"; static unsigned char
! _temp1375[ 17u]="unary_expression"; static unsigned char _temp1376[ 15u]="unary_operator";
! static unsigned char _temp1377[ 19u]="postfix_expression"; static unsigned char
! _temp1378[ 19u]="primary_expression"; static unsigned char _temp1379[ 25u]="argument_expression_list";
! static unsigned char _temp1380[ 26u]="argument_expression_list0"; static
! unsigned char _temp1381[ 9u]="constant"; static unsigned char _temp1382[ 20u]="qual_opt_identifier";
! static struct _tagged_arr Cyc_yytname[ 233u]={{ _temp1150, _temp1150, _temp1150
! +  2u},{ _temp1151, _temp1151, _temp1151 +  6u},{ _temp1152, _temp1152,
! _temp1152 +  12u},{ _temp1153, _temp1153, _temp1153 +  5u},{ _temp1154,
! _temp1154, _temp1154 +  9u},{ _temp1155, _temp1155, _temp1155 +  7u},{ _temp1156,
! _temp1156, _temp1156 +  7u},{ _temp1157, _temp1157, _temp1157 +  8u},{ _temp1158,
! _temp1158, _temp1158 +  5u},{ _temp1159, _temp1159, _temp1159 +  5u},{ _temp1160,
! _temp1160, _temp1160 +  6u},{ _temp1161, _temp1161, _temp1161 +  4u},{ _temp1162,
! _temp1162, _temp1162 +  5u},{ _temp1163, _temp1163, _temp1163 +  6u},{ _temp1164,
! _temp1164, _temp1164 +  7u},{ _temp1165, _temp1165, _temp1165 +  7u},{ _temp1166,
! _temp1166, _temp1166 +  9u},{ _temp1167, _temp1167, _temp1167 +  6u},{ _temp1168,
! _temp1168, _temp1168 +  9u},{ _temp1169, _temp1169, _temp1169 +  9u},{ _temp1170,
! _temp1170, _temp1170 +  7u},{ _temp1171, _temp1171, _temp1171 +  6u},{ _temp1172,
! _temp1172, _temp1172 +  5u},{ _temp1173, _temp1173, _temp1173 +  8u},{ _temp1174,
! _temp1174, _temp1174 +  7u},{ _temp1175, _temp1175, _temp1175 +  7u},{ _temp1176,
! _temp1176, _temp1176 +  9u},{ _temp1177, _temp1177, _temp1177 +  3u},{ _temp1178,
! _temp1178, _temp1178 +  5u},{ _temp1179, _temp1179, _temp1179 +  7u},{ _temp1180,
! _temp1180, _temp1180 +  6u},{ _temp1181, _temp1181, _temp1181 +  3u},{ _temp1182,
! _temp1182, _temp1182 +  4u},{ _temp1183, _temp1183, _temp1183 +  5u},{ _temp1184,
! _temp1184, _temp1184 +  9u},{ _temp1185, _temp1185, _temp1185 +  6u},{ _temp1186,
! _temp1186, _temp1186 +  7u},{ _temp1187, _temp1187, _temp1187 +  5u},{ _temp1188,
! _temp1188, _temp1188 +  8u},{ _temp1189, _temp1189, _temp1189 +  4u},{ _temp1190,
! _temp1190, _temp1190 +  6u},{ _temp1191, _temp1191, _temp1191 +  4u},{ _temp1192,
! _temp1192, _temp1192 +  6u},{ _temp1193, _temp1193, _temp1193 +  4u},{ _temp1194,
! _temp1194, _temp1194 +  9u},{ _temp1195, _temp1195, _temp1195 +  9u},{ _temp1196,
! _temp1196, _temp1196 +  6u},{ _temp1197, _temp1197, _temp1197 +  10u},{
! _temp1198, _temp1198, _temp1198 +  7u},{ _temp1199, _temp1199, _temp1199 +  8u},{
! _temp1200, _temp1200, _temp1200 +  5u},{ _temp1201, _temp1201, _temp1201 +  8u},{
! _temp1202, _temp1202, _temp1202 +  4u},{ _temp1203, _temp1203, _temp1203 +  7u},{
! _temp1204, _temp1204, _temp1204 +  7u},{ _temp1205, _temp1205, _temp1205 +  9u},{
! _temp1206, _temp1206, _temp1206 +  7u},{ _temp1207, _temp1207, _temp1207 +  5u},{
! _temp1208, _temp1208, _temp1208 +  8u},{ _temp1209, _temp1209, _temp1209 +  8u},{
! _temp1210, _temp1210, _temp1210 +  4u},{ _temp1211, _temp1211, _temp1211 +  7u},{
! _temp1212, _temp1212, _temp1212 +  7u},{ _temp1213, _temp1213, _temp1213 +  7u},{
! _temp1214, _temp1214, _temp1214 +  8u},{ _temp1215, _temp1215, _temp1215 +  9u},{
! _temp1216, _temp1216, _temp1216 +  6u},{ _temp1217, _temp1217, _temp1217 +  6u},{
! _temp1218, _temp1218, _temp1218 +  6u},{ _temp1219, _temp1219, _temp1219 +  6u},{
! _temp1220, _temp1220, _temp1220 +  7u},{ _temp1221, _temp1221, _temp1221 +  6u},{
! _temp1222, _temp1222, _temp1222 +  11u},{ _temp1223, _temp1223, _temp1223 +  11u},{
! _temp1224, _temp1224, _temp1224 +  11u},{ _temp1225, _temp1225, _temp1225 +  11u},{
! _temp1226, _temp1226, _temp1226 +  11u},{ _temp1227, _temp1227, _temp1227 +  12u},{
! _temp1228, _temp1228, _temp1228 +  13u},{ _temp1229, _temp1229, _temp1229 +  11u},{
! _temp1230, _temp1230, _temp1230 +  11u},{ _temp1231, _temp1231, _temp1231 +  10u},{
! _temp1232, _temp1232, _temp1232 +  9u},{ _temp1233, _temp1233, _temp1233 +  11u},{
! _temp1234, _temp1234, _temp1234 +  12u},{ _temp1235, _temp1235, _temp1235 +  11u},{
! _temp1236, _temp1236, _temp1236 +  17u},{ _temp1237, _temp1237, _temp1237 +  7u},{
! _temp1238, _temp1238, _temp1238 +  19u},{ _temp1239, _temp1239, _temp1239 +  18u},{
! _temp1240, _temp1240, _temp1240 +  9u},{ _temp1241, _temp1241, _temp1241 +  16u},{
! _temp1242, _temp1242, _temp1242 +  18u},{ _temp1243, _temp1243, _temp1243 +  10u},{
! _temp1244, _temp1244, _temp1244 +  4u},{ _temp1245, _temp1245, _temp1245 +  4u},{
! _temp1246, _temp1246, _temp1246 +  4u},{ _temp1247, _temp1247, _temp1247 +  4u},{
! _temp1248, _temp1248, _temp1248 +  4u},{ _temp1249, _temp1249, _temp1249 +  4u},{
! _temp1250, _temp1250, _temp1250 +  4u},{ _temp1251, _temp1251, _temp1251 +  4u},{
! _temp1252, _temp1252, _temp1252 +  4u},{ _temp1253, _temp1253, _temp1253 +  4u},{
! _temp1254, _temp1254, _temp1254 +  4u},{ _temp1255, _temp1255, _temp1255 +  4u},{
! _temp1256, _temp1256, _temp1256 +  4u},{ _temp1257, _temp1257, _temp1257 +  4u},{
! _temp1258, _temp1258, _temp1258 +  4u},{ _temp1259, _temp1259, _temp1259 +  4u},{
! _temp1260, _temp1260, _temp1260 +  4u},{ _temp1261, _temp1261, _temp1261 +  4u},{
! _temp1262, _temp1262, _temp1262 +  4u},{ _temp1263, _temp1263, _temp1263 +  4u},{
! _temp1264, _temp1264, _temp1264 +  4u},{ _temp1265, _temp1265, _temp1265 +  4u},{
! _temp1266, _temp1266, _temp1266 +  4u},{ _temp1267, _temp1267, _temp1267 +  4u},{
! _temp1268, _temp1268, _temp1268 +  4u},{ _temp1269, _temp1269, _temp1269 +  4u},{
! _temp1270, _temp1270, _temp1270 +  4u},{ _temp1271, _temp1271, _temp1271 +  5u},{
! _temp1272, _temp1272, _temp1272 +  17u},{ _temp1273, _temp1273, _temp1273 +  21u},{
! _temp1274, _temp1274, _temp1274 +  20u},{ _temp1275, _temp1275, _temp1275 +  21u},{
! _temp1276, _temp1276, _temp1276 +  13u},{ _temp1277, _temp1277, _temp1277 +  15u},{
! _temp1278, _temp1278, _temp1278 +  17u},{ _temp1279, _temp1279, _temp1279 +  19u},{
! _temp1280, _temp1280, _temp1280 +  12u},{ _temp1281, _temp1281, _temp1281 +  17u},{
! _temp1282, _temp1282, _temp1282 +  23u},{ _temp1283, _temp1283, _temp1283 +  24u},{
! _temp1284, _temp1284, _temp1284 +  15u},{ _temp1285, _temp1285, _temp1285 +  11u},{
! _temp1286, _temp1286, _temp1286 +  15u},{ _temp1287, _temp1287, _temp1287 +  10u},{
! _temp1288, _temp1288, _temp1288 +  15u},{ _temp1289, _temp1289, _temp1289 +  5u},{
! _temp1290, _temp1290, _temp1290 +  15u},{ _temp1291, _temp1291, _temp1291 +  15u},{
! _temp1292, _temp1292, _temp1292 +  11u},{ _temp1293, _temp1293, _temp1293 +  22u},{
! _temp1294, _temp1294, _temp1294 +  26u},{ _temp1295, _temp1295, _temp1295 +  16u},{
! _temp1296, _temp1296, _temp1296 +  16u},{ _temp1297, _temp1297, _temp1297 +  24u},{
! _temp1298, _temp1298, _temp1298 +  25u},{ _temp1299, _temp1299, _temp1299 +  21u},{
! _temp1300, _temp1300, _temp1300 +  22u},{ _temp1301, _temp1301, _temp1301 +  16u},{
! _temp1302, _temp1302, _temp1302 +  19u},{ _temp1303, _temp1303, _temp1303 +  25u},{
! _temp1304, _temp1304, _temp1304 +  23u},{ _temp1305, _temp1305, _temp1305 +  24u},{
! _temp1306, _temp1306, _temp1306 +  18u},{ _temp1307, _temp1307, _temp1307 +  17u},{
! _temp1308, _temp1308, _temp1308 +  18u},{ _temp1309, _temp1309, _temp1309 +  17u},{
! _temp1310, _temp1310, _temp1310 +  18u},{ _temp1311, _temp1311, _temp1311 +  12u},{
! _temp1312, _temp1312, _temp1312 +  11u},{ _temp1313, _temp1313, _temp1313 +  18u},{
! _temp1314, _temp1314, _temp1314 +  8u},{ _temp1315, _temp1315, _temp1315 +  13u},{
! _temp1316, _temp1316, _temp1316 +  8u},{ _temp1317, _temp1317, _temp1317 +  4u},{
! _temp1318, _temp1318, _temp1318 +  20u},{ _temp1319, _temp1319, _temp1319 +  20u},{
! _temp1320, _temp1320, _temp1320 +  9u},{ _temp1321, _temp1321, _temp1321 +  16u},{
! _temp1322, _temp1322, _temp1322 +  19u},{ _temp1323, _temp1323, _temp1323 +  10u},{
! _temp1324, _temp1324, _temp1324 +  16u},{ _temp1325, _temp1325, _temp1325 +  11u},{
! _temp1326, _temp1326, _temp1326 +  14u},{ _temp1327, _temp1327, _temp1327 +  11u},{
! _temp1328, _temp1328, _temp1328 +  15u},{ _temp1329, _temp1329, _temp1329 +  22u},{
! _temp1330, _temp1330, _temp1330 +  16u},{ _temp1331, _temp1331, _temp1331 +  17u},{
! _temp1332, _temp1332, _temp1332 +  12u},{ _temp1333, _temp1333, _temp1333 +  18u},{
! _temp1334, _temp1334, _temp1334 +  17u},{ _temp1335, _temp1335, _temp1335 +  12u},{
! _temp1336, _temp1336, _temp1336 +  16u},{ _temp1337, _temp1337, _temp1337 +  11u},{
! _temp1338, _temp1338, _temp1338 +  10u},{ _temp1339, _temp1339, _temp1339 +  14u},{
! _temp1340, _temp1340, _temp1340 +  15u},{ _temp1341, _temp1341, _temp1341 +  20u},{
! _temp1342, _temp1342, _temp1342 +  27u},{ _temp1343, _temp1343, _temp1343 +  10u},{
! _temp1344, _temp1344, _temp1344 +  18u},{ _temp1345, _temp1345, _temp1345 +  21u},{
! _temp1346, _temp1346, _temp1346 +  19u},{ _temp1347, _temp1347, _temp1347 +  16u},{
! _temp1348, _temp1348, _temp1348 +  20u},{ _temp1349, _temp1349, _temp1349 +  15u},{
! _temp1350, _temp1350, _temp1350 +  16u},{ _temp1351, _temp1351, _temp1351 +  20u},{
! _temp1352, _temp1352, _temp1352 +  15u},{ _temp1353, _temp1353, _temp1353 +  8u},{
! _temp1354, _temp1354, _temp1354 +  19u},{ _temp1355, _temp1355, _temp1355 +  20u},{
! _temp1356, _temp1356, _temp1356 +  14u},{ _temp1357, _temp1357, _temp1357 +  19u},{
! _temp1358, _temp1358, _temp1358 +  20u},{ _temp1359, _temp1359, _temp1359 +  11u},{
! _temp1360, _temp1360, _temp1360 +  22u},{ _temp1361, _temp1361, _temp1361 +  20u},{
! _temp1362, _temp1362, _temp1362 +  23u},{ _temp1363, _temp1363, _temp1363 +  20u},{
! _temp1364, _temp1364, _temp1364 +  22u},{ _temp1365, _temp1365, _temp1365 +  23u},{
! _temp1366, _temp1366, _temp1366 +  24u},{ _temp1367, _temp1367, _temp1367 +  24u},{
! _temp1368, _temp1368, _temp1368 +  15u},{ _temp1369, _temp1369, _temp1369 +  20u},{
! _temp1370, _temp1370, _temp1370 +  22u},{ _temp1371, _temp1371, _temp1371 +  17u},{
! _temp1372, _temp1372, _temp1372 +  20u},{ _temp1373, _temp1373, _temp1373 +  26u},{
! _temp1374, _temp1374, _temp1374 +  16u},{ _temp1375, _temp1375, _temp1375 +  17u},{
! _temp1376, _temp1376, _temp1376 +  15u},{ _temp1377, _temp1377, _temp1377 +  19u},{
! _temp1378, _temp1378, _temp1378 +  19u},{ _temp1379, _temp1379, _temp1379 +  25u},{
! _temp1380, _temp1380, _temp1380 +  26u},{ _temp1381, _temp1381, _temp1381 +  9u},{
! _temp1382, _temp1382, _temp1382 +  20u}}; static short Cyc_yyr1[ 405u]={ 0, 121,
  122, 122, 122, 122, 122, 122, 122, 123, 123, 124, 124, 124, 124, 125, 125, 126,
  127, 128, 129, 130, 130, 130, 130, 131, 131, 132, 132, 132, 132, 132, 132, 132,
  132, 133, 133, 133, 133, 133, 133, 133, 134, 134, 135, 136, 136, 137, 137, 137,
--- 2071,2336 ----
  39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
  59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
  79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93}; static
! unsigned char _temp1149[ 2u]="$"; static unsigned char _temp1150[ 6u]="error";
! static unsigned char _temp1151[ 12u]="$undefined."; static unsigned char
! _temp1152[ 5u]="AUTO"; static unsigned char _temp1153[ 9u]="REGISTER"; static
! unsigned char _temp1154[ 7u]="STATIC"; static unsigned char _temp1155[ 7u]="EXTERN";
! static unsigned char _temp1156[ 8u]="TYPEDEF"; static unsigned char _temp1157[ 5u]="VOID";
! static unsigned char _temp1158[ 5u]="CHAR"; static unsigned char _temp1159[ 6u]="SHORT";
! static unsigned char _temp1160[ 4u]="INT"; static unsigned char _temp1161[ 5u]="LONG";
! static unsigned char _temp1162[ 6u]="FLOAT"; static unsigned char _temp1163[ 7u]="DOUBLE";
! static unsigned char _temp1164[ 7u]="SIGNED"; static unsigned char _temp1165[ 9u]="UNSIGNED";
! static unsigned char _temp1166[ 6u]="CONST"; static unsigned char _temp1167[ 9u]="VOLATILE";
! static unsigned char _temp1168[ 9u]="RESTRICT"; static unsigned char _temp1169[
! 7u]="STRUCT"; static unsigned char _temp1170[ 6u]="UNION"; static unsigned char
! _temp1171[ 5u]="CASE"; static unsigned char _temp1172[ 8u]="DEFAULT"; static
! unsigned char _temp1173[ 7u]="INLINE"; static unsigned char _temp1174[ 7u]="SIZEOF";
! static unsigned char _temp1175[ 9u]="OFFSETOF"; static unsigned char _temp1176[
! 3u]="IF"; static unsigned char _temp1177[ 5u]="ELSE"; static unsigned char
! _temp1178[ 7u]="SWITCH"; static unsigned char _temp1179[ 6u]="WHILE"; static
! unsigned char _temp1180[ 3u]="DO"; static unsigned char _temp1181[ 4u]="FOR";
! static unsigned char _temp1182[ 5u]="GOTO"; static unsigned char _temp1183[ 9u]="CONTINUE";
! static unsigned char _temp1184[ 6u]="BREAK"; static unsigned char _temp1185[ 7u]="RETURN";
! static unsigned char _temp1186[ 5u]="ENUM"; static unsigned char _temp1187[ 8u]="NULL_kw";
! static unsigned char _temp1188[ 4u]="LET"; static unsigned char _temp1189[ 6u]="THROW";
! static unsigned char _temp1190[ 4u]="TRY"; static unsigned char _temp1191[ 6u]="CATCH";
! static unsigned char _temp1192[ 4u]="NEW"; static unsigned char _temp1193[ 9u]="ABSTRACT";
! static unsigned char _temp1194[ 9u]="FALLTHRU"; static unsigned char _temp1195[
! 6u]="USING"; static unsigned char _temp1196[ 10u]="NAMESPACE"; static
! unsigned char _temp1197[ 7u]="TUNION"; static unsigned char _temp1198[ 8u]="XTUNION";
! static unsigned char _temp1199[ 5u]="FILL"; static unsigned char _temp1200[ 8u]="CODEGEN";
! static unsigned char _temp1201[ 4u]="CUT"; static unsigned char _temp1202[ 7u]="SPLICE";
! static unsigned char _temp1203[ 7u]="MALLOC"; static unsigned char _temp1204[ 9u]="REGION_T";
! static unsigned char _temp1205[ 7u]="REGION"; static unsigned char _temp1206[ 5u]="RNEW";
! static unsigned char _temp1207[ 8u]="RMALLOC"; static unsigned char _temp1208[ 8u]="REGIONS";
! static unsigned char _temp1209[ 4u]="GEN"; static unsigned char _temp1210[ 7u]="PTR_OP";
! static unsigned char _temp1211[ 7u]="INC_OP"; static unsigned char _temp1212[ 7u]="DEC_OP";
! static unsigned char _temp1213[ 8u]="LEFT_OP"; static unsigned char _temp1214[ 9u]="RIGHT_OP";
! static unsigned char _temp1215[ 6u]="LE_OP"; static unsigned char _temp1216[ 6u]="GE_OP";
! static unsigned char _temp1217[ 6u]="EQ_OP"; static unsigned char _temp1218[ 6u]="NE_OP";
! static unsigned char _temp1219[ 7u]="AND_OP"; static unsigned char _temp1220[ 6u]="OR_OP";
! static unsigned char _temp1221[ 11u]="MUL_ASSIGN"; static unsigned char
! _temp1222[ 11u]="DIV_ASSIGN"; static unsigned char _temp1223[ 11u]="MOD_ASSIGN";
! static unsigned char _temp1224[ 11u]="ADD_ASSIGN"; static unsigned char
! _temp1225[ 11u]="SUB_ASSIGN"; static unsigned char _temp1226[ 12u]="LEFT_ASSIGN";
! static unsigned char _temp1227[ 13u]="RIGHT_ASSIGN"; static unsigned char
! _temp1228[ 11u]="AND_ASSIGN"; static unsigned char _temp1229[ 11u]="XOR_ASSIGN";
! static unsigned char _temp1230[ 10u]="OR_ASSIGN"; static unsigned char _temp1231[
! 9u]="ELLIPSIS"; static unsigned char _temp1232[ 11u]="LEFT_RIGHT"; static
! unsigned char _temp1233[ 12u]="COLON_COLON"; static unsigned char _temp1234[ 11u]="IDENTIFIER";
! static unsigned char _temp1235[ 17u]="INTEGER_CONSTANT"; static unsigned char
! _temp1236[ 7u]="STRING"; static unsigned char _temp1237[ 19u]="CHARACTER_CONSTANT";
! static unsigned char _temp1238[ 18u]="FLOATING_CONSTANT"; static unsigned char
! _temp1239[ 9u]="TYPE_VAR"; static unsigned char _temp1240[ 16u]="QUAL_IDENTIFIER";
! static unsigned char _temp1241[ 18u]="QUAL_TYPEDEF_NAME"; static unsigned char
! _temp1242[ 10u]="ATTRIBUTE"; static unsigned char _temp1243[ 4u]="';'"; static
! unsigned char _temp1244[ 4u]="'{'"; static unsigned char _temp1245[ 4u]="'}'";
! static unsigned char _temp1246[ 4u]="'='"; static unsigned char _temp1247[ 4u]="'('";
! static unsigned char _temp1248[ 4u]="')'"; static unsigned char _temp1249[ 4u]="','";
! static unsigned char _temp1250[ 4u]="'_'"; static unsigned char _temp1251[ 4u]="'$'";
! static unsigned char _temp1252[ 4u]="'<'"; static unsigned char _temp1253[ 4u]="'>'";
! static unsigned char _temp1254[ 4u]="':'"; static unsigned char _temp1255[ 4u]="'.'";
! static unsigned char _temp1256[ 4u]="'['"; static unsigned char _temp1257[ 4u]="']'";
! static unsigned char _temp1258[ 4u]="'*'"; static unsigned char _temp1259[ 4u]="'@'";
! static unsigned char _temp1260[ 4u]="'?'"; static unsigned char _temp1261[ 4u]="'+'";
! static unsigned char _temp1262[ 4u]="'-'"; static unsigned char _temp1263[ 4u]="'&'";
! static unsigned char _temp1264[ 4u]="'|'"; static unsigned char _temp1265[ 4u]="'^'";
! static unsigned char _temp1266[ 4u]="'/'"; static unsigned char _temp1267[ 4u]="'%'";
! static unsigned char _temp1268[ 4u]="'~'"; static unsigned char _temp1269[ 4u]="'!'";
! static unsigned char _temp1270[ 5u]="prog"; static unsigned char _temp1271[ 17u]="translation_unit";
! static unsigned char _temp1272[ 21u]="external_declaration"; static
! unsigned char _temp1273[ 20u]="function_definition"; static unsigned char
! _temp1274[ 21u]="function_definition2"; static unsigned char _temp1275[ 13u]="using_action";
! static unsigned char _temp1276[ 15u]="unusing_action"; static unsigned char
! _temp1277[ 17u]="namespace_action"; static unsigned char _temp1278[ 19u]="unnamespace_action";
! static unsigned char _temp1279[ 12u]="declaration"; static unsigned char
! _temp1280[ 17u]="declaration_list"; static unsigned char _temp1281[ 23u]="declaration_specifiers";
! static unsigned char _temp1282[ 24u]="storage_class_specifier"; static
! unsigned char _temp1283[ 15u]="attributes_opt"; static unsigned char _temp1284[
! 11u]="attributes"; static unsigned char _temp1285[ 15u]="attribute_list"; static
! unsigned char _temp1286[ 10u]="attribute"; static unsigned char _temp1287[ 15u]="type_specifier";
! static unsigned char _temp1288[ 5u]="kind"; static unsigned char _temp1289[ 15u]="type_qualifier";
! static unsigned char _temp1290[ 15u]="enum_specifier"; static unsigned char
! _temp1291[ 11u]="enum_field"; static unsigned char _temp1292[ 22u]="enum_declaration_list";
! static unsigned char _temp1293[ 26u]="struct_or_union_specifier"; static
! unsigned char _temp1294[ 16u]="type_params_opt"; static unsigned char _temp1295[
! 16u]="struct_or_union"; static unsigned char _temp1296[ 24u]="struct_declaration_list";
! static unsigned char _temp1297[ 25u]="struct_declaration_list0"; static
! unsigned char _temp1298[ 21u]="init_declarator_list"; static unsigned char
! _temp1299[ 22u]="init_declarator_list0"; static unsigned char _temp1300[ 16u]="init_declarator";
! static unsigned char _temp1301[ 19u]="struct_declaration"; static unsigned char
! _temp1302[ 25u]="specifier_qualifier_list"; static unsigned char _temp1303[ 23u]="struct_declarator_list";
! static unsigned char _temp1304[ 24u]="struct_declarator_list0"; static
! unsigned char _temp1305[ 18u]="struct_declarator"; static unsigned char
! _temp1306[ 17u]="tunion_specifier"; static unsigned char _temp1307[ 18u]="tunion_or_xtunion";
! static unsigned char _temp1308[ 17u]="tunionfield_list"; static unsigned char
! _temp1309[ 18u]="tunionfield_scope"; static unsigned char _temp1310[ 12u]="tunionfield";
! static unsigned char _temp1311[ 11u]="declarator"; static unsigned char
! _temp1312[ 18u]="direct_declarator"; static unsigned char _temp1313[ 8u]="pointer";
! static unsigned char _temp1314[ 13u]="pointer_char"; static unsigned char
! _temp1315[ 8u]="rgn_opt"; static unsigned char _temp1316[ 4u]="rgn"; static
! unsigned char _temp1317[ 20u]="type_qualifier_list"; static unsigned char
! _temp1318[ 20u]="parameter_type_list"; static unsigned char _temp1319[ 9u]="type_var";
! static unsigned char _temp1320[ 16u]="optional_effect"; static unsigned char
! _temp1321[ 19u]="optional_rgn_order"; static unsigned char _temp1322[ 10u]="rgn_order";
! static unsigned char _temp1323[ 16u]="optional_inject"; static unsigned char
! _temp1324[ 11u]="effect_set"; static unsigned char _temp1325[ 14u]="atomic_effect";
! static unsigned char _temp1326[ 11u]="region_set"; static unsigned char
! _temp1327[ 15u]="parameter_list"; static unsigned char _temp1328[ 22u]="parameter_declaration";
! static unsigned char _temp1329[ 16u]="identifier_list"; static unsigned char
! _temp1330[ 17u]="identifier_list0"; static unsigned char _temp1331[ 12u]="initializer";
! static unsigned char _temp1332[ 18u]="array_initializer"; static unsigned char
! _temp1333[ 17u]="initializer_list"; static unsigned char _temp1334[ 12u]="designation";
! static unsigned char _temp1335[ 16u]="designator_list"; static unsigned char
! _temp1336[ 11u]="designator"; static unsigned char _temp1337[ 10u]="type_name";
! static unsigned char _temp1338[ 14u]="any_type_name"; static unsigned char
! _temp1339[ 15u]="type_name_list"; static unsigned char _temp1340[ 20u]="abstract_declarator";
! static unsigned char _temp1341[ 27u]="direct_abstract_declarator"; static
! unsigned char _temp1342[ 10u]="statement"; static unsigned char _temp1343[ 18u]="labeled_statement";
! static unsigned char _temp1344[ 21u]="expression_statement"; static
! unsigned char _temp1345[ 19u]="compound_statement"; static unsigned char
! _temp1346[ 16u]="block_item_list"; static unsigned char _temp1347[ 20u]="selection_statement";
! static unsigned char _temp1348[ 15u]="switch_clauses"; static unsigned char
! _temp1349[ 16u]="switchC_clauses"; static unsigned char _temp1350[ 20u]="iteration_statement";
! static unsigned char _temp1351[ 15u]="jump_statement"; static unsigned char
! _temp1352[ 8u]="pattern"; static unsigned char _temp1353[ 19u]="tuple_pattern_list";
! static unsigned char _temp1354[ 20u]="tuple_pattern_list0"; static unsigned char
! _temp1355[ 14u]="field_pattern"; static unsigned char _temp1356[ 19u]="field_pattern_list";
! static unsigned char _temp1357[ 20u]="field_pattern_list0"; static unsigned char
! _temp1358[ 11u]="expression"; static unsigned char _temp1359[ 22u]="assignment_expression";
! static unsigned char _temp1360[ 20u]="assignment_operator"; static unsigned char
! _temp1361[ 23u]="conditional_expression"; static unsigned char _temp1362[ 20u]="constant_expression";
! static unsigned char _temp1363[ 22u]="logical_or_expression"; static
! unsigned char _temp1364[ 23u]="logical_and_expression"; static unsigned char
! _temp1365[ 24u]="inclusive_or_expression"; static unsigned char _temp1366[ 24u]="exclusive_or_expression";
! static unsigned char _temp1367[ 15u]="and_expression"; static unsigned char
! _temp1368[ 20u]="equality_expression"; static unsigned char _temp1369[ 22u]="relational_expression";
! static unsigned char _temp1370[ 17u]="shift_expression"; static unsigned char
! _temp1371[ 20u]="additive_expression"; static unsigned char _temp1372[ 26u]="multiplicative_expression";
! static unsigned char _temp1373[ 16u]="cast_expression"; static unsigned char
! _temp1374[ 17u]="unary_expression"; static unsigned char _temp1375[ 15u]="unary_operator";
! static unsigned char _temp1376[ 19u]="postfix_expression"; static unsigned char
! _temp1377[ 19u]="primary_expression"; static unsigned char _temp1378[ 25u]="argument_expression_list";
! static unsigned char _temp1379[ 26u]="argument_expression_list0"; static
! unsigned char _temp1380[ 9u]="constant"; static unsigned char _temp1381[ 20u]="qual_opt_identifier";
! static struct _tagged_arr Cyc_yytname[ 233u]={{ _temp1149, _temp1149, _temp1149
! +  2u},{ _temp1150, _temp1150, _temp1150 +  6u},{ _temp1151, _temp1151,
! _temp1151 +  12u},{ _temp1152, _temp1152, _temp1152 +  5u},{ _temp1153,
! _temp1153, _temp1153 +  9u},{ _temp1154, _temp1154, _temp1154 +  7u},{ _temp1155,
! _temp1155, _temp1155 +  7u},{ _temp1156, _temp1156, _temp1156 +  8u},{ _temp1157,
! _temp1157, _temp1157 +  5u},{ _temp1158, _temp1158, _temp1158 +  5u},{ _temp1159,
! _temp1159, _temp1159 +  6u},{ _temp1160, _temp1160, _temp1160 +  4u},{ _temp1161,
! _temp1161, _temp1161 +  5u},{ _temp1162, _temp1162, _temp1162 +  6u},{ _temp1163,
! _temp1163, _temp1163 +  7u},{ _temp1164, _temp1164, _temp1164 +  7u},{ _temp1165,
! _temp1165, _temp1165 +  9u},{ _temp1166, _temp1166, _temp1166 +  6u},{ _temp1167,
! _temp1167, _temp1167 +  9u},{ _temp1168, _temp1168, _temp1168 +  9u},{ _temp1169,
! _temp1169, _temp1169 +  7u},{ _temp1170, _temp1170, _temp1170 +  6u},{ _temp1171,
! _temp1171, _temp1171 +  5u},{ _temp1172, _temp1172, _temp1172 +  8u},{ _temp1173,
! _temp1173, _temp1173 +  7u},{ _temp1174, _temp1174, _temp1174 +  7u},{ _temp1175,
! _temp1175, _temp1175 +  9u},{ _temp1176, _temp1176, _temp1176 +  3u},{ _temp1177,
! _temp1177, _temp1177 +  5u},{ _temp1178, _temp1178, _temp1178 +  7u},{ _temp1179,
! _temp1179, _temp1179 +  6u},{ _temp1180, _temp1180, _temp1180 +  3u},{ _temp1181,
! _temp1181, _temp1181 +  4u},{ _temp1182, _temp1182, _temp1182 +  5u},{ _temp1183,
! _temp1183, _temp1183 +  9u},{ _temp1184, _temp1184, _temp1184 +  6u},{ _temp1185,
! _temp1185, _temp1185 +  7u},{ _temp1186, _temp1186, _temp1186 +  5u},{ _temp1187,
! _temp1187, _temp1187 +  8u},{ _temp1188, _temp1188, _temp1188 +  4u},{ _temp1189,
! _temp1189, _temp1189 +  6u},{ _temp1190, _temp1190, _temp1190 +  4u},{ _temp1191,
! _temp1191, _temp1191 +  6u},{ _temp1192, _temp1192, _temp1192 +  4u},{ _temp1193,
! _temp1193, _temp1193 +  9u},{ _temp1194, _temp1194, _temp1194 +  9u},{ _temp1195,
! _temp1195, _temp1195 +  6u},{ _temp1196, _temp1196, _temp1196 +  10u},{
! _temp1197, _temp1197, _temp1197 +  7u},{ _temp1198, _temp1198, _temp1198 +  8u},{
! _temp1199, _temp1199, _temp1199 +  5u},{ _temp1200, _temp1200, _temp1200 +  8u},{
! _temp1201, _temp1201, _temp1201 +  4u},{ _temp1202, _temp1202, _temp1202 +  7u},{
! _temp1203, _temp1203, _temp1203 +  7u},{ _temp1204, _temp1204, _temp1204 +  9u},{
! _temp1205, _temp1205, _temp1205 +  7u},{ _temp1206, _temp1206, _temp1206 +  5u},{
! _temp1207, _temp1207, _temp1207 +  8u},{ _temp1208, _temp1208, _temp1208 +  8u},{
! _temp1209, _temp1209, _temp1209 +  4u},{ _temp1210, _temp1210, _temp1210 +  7u},{
! _temp1211, _temp1211, _temp1211 +  7u},{ _temp1212, _temp1212, _temp1212 +  7u},{
! _temp1213, _temp1213, _temp1213 +  8u},{ _temp1214, _temp1214, _temp1214 +  9u},{
! _temp1215, _temp1215, _temp1215 +  6u},{ _temp1216, _temp1216, _temp1216 +  6u},{
! _temp1217, _temp1217, _temp1217 +  6u},{ _temp1218, _temp1218, _temp1218 +  6u},{
! _temp1219, _temp1219, _temp1219 +  7u},{ _temp1220, _temp1220, _temp1220 +  6u},{
! _temp1221, _temp1221, _temp1221 +  11u},{ _temp1222, _temp1222, _temp1222 +  11u},{
! _temp1223, _temp1223, _temp1223 +  11u},{ _temp1224, _temp1224, _temp1224 +  11u},{
! _temp1225, _temp1225, _temp1225 +  11u},{ _temp1226, _temp1226, _temp1226 +  12u},{
! _temp1227, _temp1227, _temp1227 +  13u},{ _temp1228, _temp1228, _temp1228 +  11u},{
! _temp1229, _temp1229, _temp1229 +  11u},{ _temp1230, _temp1230, _temp1230 +  10u},{
! _temp1231, _temp1231, _temp1231 +  9u},{ _temp1232, _temp1232, _temp1232 +  11u},{
! _temp1233, _temp1233, _temp1233 +  12u},{ _temp1234, _temp1234, _temp1234 +  11u},{
! _temp1235, _temp1235, _temp1235 +  17u},{ _temp1236, _temp1236, _temp1236 +  7u},{
! _temp1237, _temp1237, _temp1237 +  19u},{ _temp1238, _temp1238, _temp1238 +  18u},{
! _temp1239, _temp1239, _temp1239 +  9u},{ _temp1240, _temp1240, _temp1240 +  16u},{
! _temp1241, _temp1241, _temp1241 +  18u},{ _temp1242, _temp1242, _temp1242 +  10u},{
! _temp1243, _temp1243, _temp1243 +  4u},{ _temp1244, _temp1244, _temp1244 +  4u},{
! _temp1245, _temp1245, _temp1245 +  4u},{ _temp1246, _temp1246, _temp1246 +  4u},{
! _temp1247, _temp1247, _temp1247 +  4u},{ _temp1248, _temp1248, _temp1248 +  4u},{
! _temp1249, _temp1249, _temp1249 +  4u},{ _temp1250, _temp1250, _temp1250 +  4u},{
! _temp1251, _temp1251, _temp1251 +  4u},{ _temp1252, _temp1252, _temp1252 +  4u},{
! _temp1253, _temp1253, _temp1253 +  4u},{ _temp1254, _temp1254, _temp1254 +  4u},{
! _temp1255, _temp1255, _temp1255 +  4u},{ _temp1256, _temp1256, _temp1256 +  4u},{
! _temp1257, _temp1257, _temp1257 +  4u},{ _temp1258, _temp1258, _temp1258 +  4u},{
! _temp1259, _temp1259, _temp1259 +  4u},{ _temp1260, _temp1260, _temp1260 +  4u},{
! _temp1261, _temp1261, _temp1261 +  4u},{ _temp1262, _temp1262, _temp1262 +  4u},{
! _temp1263, _temp1263, _temp1263 +  4u},{ _temp1264, _temp1264, _temp1264 +  4u},{
! _temp1265, _temp1265, _temp1265 +  4u},{ _temp1266, _temp1266, _temp1266 +  4u},{
! _temp1267, _temp1267, _temp1267 +  4u},{ _temp1268, _temp1268, _temp1268 +  4u},{
! _temp1269, _temp1269, _temp1269 +  4u},{ _temp1270, _temp1270, _temp1270 +  5u},{
! _temp1271, _temp1271, _temp1271 +  17u},{ _temp1272, _temp1272, _temp1272 +  21u},{
! _temp1273, _temp1273, _temp1273 +  20u},{ _temp1274, _temp1274, _temp1274 +  21u},{
! _temp1275, _temp1275, _temp1275 +  13u},{ _temp1276, _temp1276, _temp1276 +  15u},{
! _temp1277, _temp1277, _temp1277 +  17u},{ _temp1278, _temp1278, _temp1278 +  19u},{
! _temp1279, _temp1279, _temp1279 +  12u},{ _temp1280, _temp1280, _temp1280 +  17u},{
! _temp1281, _temp1281, _temp1281 +  23u},{ _temp1282, _temp1282, _temp1282 +  24u},{
! _temp1283, _temp1283, _temp1283 +  15u},{ _temp1284, _temp1284, _temp1284 +  11u},{
! _temp1285, _temp1285, _temp1285 +  15u},{ _temp1286, _temp1286, _temp1286 +  10u},{
! _temp1287, _temp1287, _temp1287 +  15u},{ _temp1288, _temp1288, _temp1288 +  5u},{
! _temp1289, _temp1289, _temp1289 +  15u},{ _temp1290, _temp1290, _temp1290 +  15u},{
! _temp1291, _temp1291, _temp1291 +  11u},{ _temp1292, _temp1292, _temp1292 +  22u},{
! _temp1293, _temp1293, _temp1293 +  26u},{ _temp1294, _temp1294, _temp1294 +  16u},{
! _temp1295, _temp1295, _temp1295 +  16u},{ _temp1296, _temp1296, _temp1296 +  24u},{
! _temp1297, _temp1297, _temp1297 +  25u},{ _temp1298, _temp1298, _temp1298 +  21u},{
! _temp1299, _temp1299, _temp1299 +  22u},{ _temp1300, _temp1300, _temp1300 +  16u},{
! _temp1301, _temp1301, _temp1301 +  19u},{ _temp1302, _temp1302, _temp1302 +  25u},{
! _temp1303, _temp1303, _temp1303 +  23u},{ _temp1304, _temp1304, _temp1304 +  24u},{
! _temp1305, _temp1305, _temp1305 +  18u},{ _temp1306, _temp1306, _temp1306 +  17u},{
! _temp1307, _temp1307, _temp1307 +  18u},{ _temp1308, _temp1308, _temp1308 +  17u},{
! _temp1309, _temp1309, _temp1309 +  18u},{ _temp1310, _temp1310, _temp1310 +  12u},{
! _temp1311, _temp1311, _temp1311 +  11u},{ _temp1312, _temp1312, _temp1312 +  18u},{
! _temp1313, _temp1313, _temp1313 +  8u},{ _temp1314, _temp1314, _temp1314 +  13u},{
! _temp1315, _temp1315, _temp1315 +  8u},{ _temp1316, _temp1316, _temp1316 +  4u},{
! _temp1317, _temp1317, _temp1317 +  20u},{ _temp1318, _temp1318, _temp1318 +  20u},{
! _temp1319, _temp1319, _temp1319 +  9u},{ _temp1320, _temp1320, _temp1320 +  16u},{
! _temp1321, _temp1321, _temp1321 +  19u},{ _temp1322, _temp1322, _temp1322 +  10u},{
! _temp1323, _temp1323, _temp1323 +  16u},{ _temp1324, _temp1324, _temp1324 +  11u},{
! _temp1325, _temp1325, _temp1325 +  14u},{ _temp1326, _temp1326, _temp1326 +  11u},{
! _temp1327, _temp1327, _temp1327 +  15u},{ _temp1328, _temp1328, _temp1328 +  22u},{
! _temp1329, _temp1329, _temp1329 +  16u},{ _temp1330, _temp1330, _temp1330 +  17u},{
! _temp1331, _temp1331, _temp1331 +  12u},{ _temp1332, _temp1332, _temp1332 +  18u},{
! _temp1333, _temp1333, _temp1333 +  17u},{ _temp1334, _temp1334, _temp1334 +  12u},{
! _temp1335, _temp1335, _temp1335 +  16u},{ _temp1336, _temp1336, _temp1336 +  11u},{
! _temp1337, _temp1337, _temp1337 +  10u},{ _temp1338, _temp1338, _temp1338 +  14u},{
! _temp1339, _temp1339, _temp1339 +  15u},{ _temp1340, _temp1340, _temp1340 +  20u},{
! _temp1341, _temp1341, _temp1341 +  27u},{ _temp1342, _temp1342, _temp1342 +  10u},{
! _temp1343, _temp1343, _temp1343 +  18u},{ _temp1344, _temp1344, _temp1344 +  21u},{
! _temp1345, _temp1345, _temp1345 +  19u},{ _temp1346, _temp1346, _temp1346 +  16u},{
! _temp1347, _temp1347, _temp1347 +  20u},{ _temp1348, _temp1348, _temp1348 +  15u},{
! _temp1349, _temp1349, _temp1349 +  16u},{ _temp1350, _temp1350, _temp1350 +  20u},{
! _temp1351, _temp1351, _temp1351 +  15u},{ _temp1352, _temp1352, _temp1352 +  8u},{
! _temp1353, _temp1353, _temp1353 +  19u},{ _temp1354, _temp1354, _temp1354 +  20u},{
! _temp1355, _temp1355, _temp1355 +  14u},{ _temp1356, _temp1356, _temp1356 +  19u},{
! _temp1357, _temp1357, _temp1357 +  20u},{ _temp1358, _temp1358, _temp1358 +  11u},{
! _temp1359, _temp1359, _temp1359 +  22u},{ _temp1360, _temp1360, _temp1360 +  20u},{
! _temp1361, _temp1361, _temp1361 +  23u},{ _temp1362, _temp1362, _temp1362 +  20u},{
! _temp1363, _temp1363, _temp1363 +  22u},{ _temp1364, _temp1364, _temp1364 +  23u},{
! _temp1365, _temp1365, _temp1365 +  24u},{ _temp1366, _temp1366, _temp1366 +  24u},{
! _temp1367, _temp1367, _temp1367 +  15u},{ _temp1368, _temp1368, _temp1368 +  20u},{
! _temp1369, _temp1369, _temp1369 +  22u},{ _temp1370, _temp1370, _temp1370 +  17u},{
! _temp1371, _temp1371, _temp1371 +  20u},{ _temp1372, _temp1372, _temp1372 +  26u},{
! _temp1373, _temp1373, _temp1373 +  16u},{ _temp1374, _temp1374, _temp1374 +  17u},{
! _temp1375, _temp1375, _temp1375 +  15u},{ _temp1376, _temp1376, _temp1376 +  19u},{
! _temp1377, _temp1377, _temp1377 +  19u},{ _temp1378, _temp1378, _temp1378 +  25u},{
! _temp1379, _temp1379, _temp1379 +  26u},{ _temp1380, _temp1380, _temp1380 +  9u},{
! _temp1381, _temp1381, _temp1381 +  20u}}; static short Cyc_yyr1[ 404u]={ 0, 121,
  122, 122, 122, 122, 122, 122, 122, 123, 123, 124, 124, 124, 124, 125, 125, 126,
  127, 128, 129, 130, 130, 130, 130, 131, 131, 132, 132, 132, 132, 132, 132, 132,
  132, 133, 133, 133, 133, 133, 133, 133, 134, 134, 135, 136, 136, 137, 137, 137,
***************
*** 2357,2918 ****
  210, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212,
  212, 212, 212, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219,
  219, 220, 220, 220, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 223,
! 224, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
! 226, 226, 226, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
! 227, 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 230, 230, 231, 231, 231,
! 231, 232, 232}; static short Cyc_yyr2[ 405u]={ 0, 1, 2, 3, 5, 3, 5, 6, 0, 1, 1,
! 2, 3, 3, 4, 3, 4, 2, 1, 2, 1, 2, 3, 5, 3, 1, 2, 2, 3, 2, 3, 2, 3, 2, 3, 1, 1, 1,
! 1, 2, 1, 1, 0, 1, 6, 1, 3, 1, 1, 4, 4, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
! 1, 2, 4, 4, 1, 1, 1, 1, 1, 5, 2, 1, 3, 1, 3, 4, 6, 6, 3, 3, 0, 3, 3, 1, 1, 1, 1,
! 2, 1, 1, 3, 1, 3, 3, 2, 3, 2, 3, 1, 1, 3, 1, 2, 3, 6, 4, 3, 5, 1, 1, 1, 2, 3, 3,
! 0, 1, 1, 2, 6, 1, 2, 1, 3, 3, 4, 4, 5, 4, 4, 4, 2, 2, 1, 3, 4, 4, 5, 1, 1, 4, 4,
! 1, 0, 1, 1, 1, 1, 2, 3, 5, 5, 7, 1, 3, 0, 2, 0, 2, 3, 5, 0, 1, 1, 3, 2, 3, 4, 1,
! 1, 3, 1, 3, 2, 1, 2, 1, 1, 3, 1, 1, 2, 3, 4, 8, 1, 2, 3, 4, 2, 1, 2, 3, 2, 1, 2,
! 1, 2, 3, 4, 3, 1, 3, 1, 1, 2, 3, 2, 3, 3, 4, 4, 3, 5, 4, 4, 4, 2, 1, 1, 1, 1, 1,
! 1, 6, 3, 2, 2, 3, 1, 2, 2, 3, 1, 2, 1, 2, 1, 2, 5, 7, 7, 8, 6, 0, 3, 4, 5, 6, 7,
! 0, 3, 4, 5, 5, 7, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 3, 2, 2, 2, 3, 2, 4, 5, 1,
! 3, 1, 2, 1, 1, 1, 1, 5, 4, 4, 5, 2, 2, 0, 1, 1, 3, 1, 2, 1, 1, 3, 1, 3, 1, 3, 1,
! 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 2, 2, 2, 5, 5, 1, 1, 3, 1, 3, 1, 3, 1, 3, 1,
! 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 3, 1, 4, 1, 2, 2, 2, 2, 2,
! 2, 4, 2, 6, 6, 5, 7, 9, 1, 1, 1, 1, 4, 3, 4, 3, 3, 3, 3, 2, 2, 6, 7, 4, 4, 1, 1,
! 1, 3, 2, 5, 4, 4, 5, 1, 1, 3, 1, 1, 1, 1, 1, 1}; static short Cyc_yydefact[ 801u]={
! 0, 137, 35, 36, 37, 38, 40, 52, 54, 55, 56, 57, 58, 59, 60, 61, 71, 72, 73, 88,
! 89, 42, 0, 0, 41, 0, 0, 113, 114, 0, 403, 157, 404, 85, 0, 53, 0, 142, 143, 146,
! 1, 0, 9, 0, 0, 10, 0, 42, 42, 42, 62, 63, 0, 64, 0, 0, 124, 0, 147, 65, 126, 39,
! 0, 33, 43, 75, 286, 403, 282, 285, 284, 0, 280, 0, 0, 0, 0, 0, 180, 0, 287, 17,
! 19, 0, 0, 0, 66, 0, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 93, 94, 96, 27, 29, 31, 85, 0,
! 85, 150, 0, 149, 85, 38, 0, 25, 0, 0, 11, 159, 0, 0, 135, 125, 42, 148, 136, 0,
! 0, 34, 0, 0, 294, 293, 283, 292, 24, 0, 0, 0, 0, 0, 42, 42, 198, 200, 0, 69, 70,
! 158, 205, 0, 127, 0, 0, 175, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 399, 389,
! 400, 401, 0, 0, 0, 0, 372, 0, 370, 371, 0, 305, 318, 326, 328, 330, 332, 334,
! 336, 339, 344, 347, 350, 354, 0, 356, 373, 388, 387, 0, 3, 0, 5, 0, 22, 0, 0, 0,
  12, 28, 30, 32, 84, 0, 90, 91, 0, 83, 85, 0, 111, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 403, 233, 235, 0, 241, 237, 0, 239, 222, 223, 224, 0, 225, 226,
  227, 0, 303, 26, 13, 96, 165, 181, 0, 0, 161, 159, 0, 0, 128, 0, 138, 0, 0, 78,
  0, 76, 281, 296, 0, 295, 182, 0, 0, 294, 0, 201, 173, 0, 99, 101, 159, 0, 207,
  199, 208, 68, 0, 87, 0, 86, 0, 177, 0, 179, 67, 0, 0, 364, 0, 320, 354, 0, 321,
  322, 0, 0, 0, 0, 0, 0, 0, 357, 358, 0, 0, 0, 0, 360, 361, 359, 144, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 309, 310, 311, 312, 313, 314,
! 315, 316, 317, 307, 0, 362, 0, 381, 382, 0, 0, 0, 391, 0, 0, 145, 18, 0, 20, 0,
  95, 97, 184, 183, 14, 0, 80, 92, 0, 0, 103, 104, 106, 0, 110, 85, 119, 0, 0, 0,
  0, 0, 0, 0, 273, 274, 275, 0, 0, 277, 0, 230, 231, 0, 0, 0, 0, 242, 238, 96, 240,
  236, 234, 0, 166, 0, 0, 0, 172, 160, 167, 130, 0, 0, 0, 161, 132, 134, 133, 129,
  151, 140, 139, 0, 48, 47, 0, 45, 0, 74, 0, 289, 0, 23, 290, 0, 0, 0, 0, 194, 298,
  301, 0, 300, 0, 0, 0, 202, 100, 102, 0, 161, 0, 211, 0, 209, 159, 0, 0, 221, 204,
! 206, 176, 0, 0, 0, 185, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 397, 0,
! 396, 327, 0, 329, 331, 333, 335, 337, 338, 342, 343, 340, 341, 345, 346, 348,
! 349, 351, 352, 353, 306, 379, 380, 375, 0, 377, 378, 0, 0, 0, 4, 6, 0, 325, 107,
  98, 0, 0, 0, 112, 121, 120, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 272, 276, 0, 0, 0,
  229, 0, 232, 0, 15, 304, 159, 0, 169, 0, 0, 0, 162, 131, 165, 153, 152, 141, 7,
  0, 0, 0, 79, 77, 297, 197, 0, 299, 193, 195, 291, 0, 288, 203, 174, 216, 0, 210,
! 213, 0, 161, 0, 212, 0, 363, 0, 0, 186, 0, 190, 385, 386, 0, 0, 0, 0, 0, 0, 0, 0,
! 355, 393, 0, 0, 376, 374, 394, 0, 0, 82, 105, 108, 81, 109, 122, 119, 119, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 248, 278, 0, 0, 16, 161, 0, 170, 168, 0, 161, 0, 0, 0, 0,
! 44, 46, 196, 302, 215, 218, 0, 220, 219, 214, 0, 0, 0, 187, 191, 0, 0, 323, 324,
! 0, 367, 395, 0, 398, 319, 392, 0, 118, 117, 243, 0, 248, 258, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 279, 0, 155, 171, 163, 154, 159, 0, 49, 50, 217, 365, 366, 0,
! 192, 0, 0, 383, 0, 0, 0, 254, 0, 0, 260, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
! 247, 228, 0, 161, 0, 0, 368, 0, 384, 0, 244, 0, 0, 0, 245, 259, 261, 262, 0, 270,
! 269, 0, 264, 0, 0, 0, 0, 248, 249, 164, 156, 0, 0, 0, 123, 0, 0, 246, 263, 271,
! 265, 266, 0, 0, 248, 250, 0, 188, 369, 254, 255, 267, 248, 251, 51, 254, 256,
! 248, 252, 257, 253, 0, 0, 0}; static short Cyc_yydefgoto[ 112u]={ 798, 40, 41,
! 42, 239, 43, 369, 44, 371, 45, 206, 46, 47, 63, 64, 438, 439, 48, 147, 49, 50,
! 268, 269, 51, 86, 52, 212, 213, 97, 98, 99, 214, 142, 381, 382, 383, 53, 54, 537,
! 538, 539, 55, 56, 57, 58, 122, 108, 434, 462, 59, 463, 425, 565, 417, 421, 422,
! 282, 260, 153, 77, 78, 479, 374, 480, 481, 450, 451, 143, 148, 149, 464, 289,
! 242, 243, 244, 245, 246, 247, 699, 750, 248, 249, 272, 273, 274, 453, 454, 455,
! 250, 251, 356, 180, 529, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
! 192, 193, 194, 195, 494, 495, 196, 197}; static short Cyc_yypact[ 801u]={ 1846,
! - -32768, - -32768, - -32768, - -32768, - 56, - -32768, - -32768, - -32768, -
! -32768, - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, -
! -32768, - -32768, - -32768, - -32768, 6, 9, 2209, - -32768, 9, - 71, - -32768, -
! -32768, 54, - -32768, 86, - -32768, 112, 487, - -32768, 119, 151, 166, - -32768,
! - -32768, 881, - -32768, 88, 102, - -32768, 206, 6, 6, 6, - -32768, - -32768,
! 291, - -32768, 192, 2391, 178, 28, 19, - -32768, 9, 191, 150, 2447, - -32768,
! 204, - -32768, 59, - -32768, - -32768, - -32768, 2276, - -32768, 212, 260, 152,
! 2276, 273, 255, 281, 95, - -32768, - -32768, 4227, 142, 4227, - -32768, 293,
! 1443, 3851, 3851, - -32768, 881, 1957, 881, 1957, - -32768, 321, 322, - -32768,
! 2332, 2447, 2447, 2447, 112, 1443, 112, - -32768, 9, - -32768, 220, 364, 1263, -
! -32768, 2391, 206, - -32768, 1787, 4227, 2779, - -32768, 178, 6, - -32768, -
! -32768, 1957, 362, - -32768, 9, 372, 2276, - -32768, - -32768, - -32768, -
! -32768, 384, 3851, 310, 381, 205, 6, 6, 409, - -32768, 67, - -32768, - -32768, -
! -32768, 374, 104, - -32768, 592, 179, - -32768, 4004, 398, - -32768, 3851, 3894,
! 408, 425, 430, 438, 449, 112, 4071, 4071, - -32768, - -32768, - -32768, - -32768,
! 1612, 451, 4114, 4114, - -32768, 4114, - -32768, - -32768, 404, - -32768, - 43,
! 491, 437, 441, 454, 442, 7, 448, 402, - 79, - -32768, 997, 4114, 168, - -32768,
! - -32768, 12, 469, - -32768, 474, - -32768, 477, - -32768, 487, 2846, 2391, -
! -32768, - -32768, - -32768, - -32768, 484, 481, 1443, - -32768, 289, 489, 112, 9,
! 493, - -32768, 497, 69, 501, 2478, 514, 542, 544, 547, 2913, 2478, 208, 2478,
! 2478, 13, 517, - -32768, - -32768, 545, 1381, 1381, 206, 1381, - -32768, -
! -32768, - -32768, 549, - -32768, - -32768, - -32768, 149, - -32768, - -32768, -
! -32768, 557, 577, - -32768, 91, 566, 562, 225, 569, 140, - -32768, 561, 110, 575,
! 8, 572, 578, 576, - -32768, - -32768, 580, 582, - -32768, 253, 1030, 2276, 4227,
! - -32768, 584, 579, 1443, 1443, 2223, 2980, - 6, - -32768, 261, - -32768, 91, -
! -32768, 4227, - -32768, 2119, - -32768, 559, - -32768, - -32768, 1443, 1612, -
! -32768, 1443, - -32768, - -32768, 734, - -32768, 616, 3851, 2068, 663, 3851,
! 3851, 591, 1612, - -32768, - -32768, 1381, 594, 431, 3851, - -32768, - -32768, -
! -32768, - -32768, 4114, 3851, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114,
! 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, - -32768, - -32768, -
  -32768, - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, -
! -32768, 3851, - -32768, 180, - -32768, - -32768, 3047, 188, 3851, - -32768, 2701,
! 593, - -32768, - -32768, 881, - -32768, 881, - -32768, - -32768, - -32768, -
! -32768, - -32768, 1443, - -32768, - -32768, 3851, 600, 595, - -32768, 599, 1443,
! - -32768, 112, 528, 3851, 602, 3851, 3851, 668, 1499, 611, - -32768, - -32768, -
! -32768, 272, 664, - -32768, 3114, - -32768, - -32768, 2478, 620, 2478, 1725, -
! -32768, - -32768, 2332, - -32768, - -32768, - -32768, 3851, - -32768, 1443, 614,
! 295, - -32768, - -32768, 603, - -32768, 621, 615, 2008, 562, - -32768, - -32768,
! - -32768, - -32768, - -32768, - -32768, 110, 881, - -32768, 619, 624, 625, 9, -
! -32768, 3851, - -32768, 2276, - -32768, - -32768, 634, 3851, 2276, 221, - -32768,
! - -32768, - -32768, 630, 627, 629, 37, 639, - -32768, - -32768, - -32768, 631,
! 562, 633, - -32768, 628, 261, 1897, 4227, 3181, - -32768, - -32768, 374, -
! -32768, 638, 640, 648, - -32768, - -32768, 41, 2846, 440, 642, 487, 641, 443,
! 643, 1443, 647, 646, 3961, - -32768, - -32768, 650, 651, 491, 339, 437, 441, 454,
! 442, 7, 7, 448, 448, 448, 448, 402, 402, - 79, - 79, - -32768, - -32768, -
! -32768, - -32768, - -32768, - -32768, - -32768, 653, - -32768, - -32768, 116,
! 340, 4227, - -32768, - -32768, 654, - -32768, - -32768, - -32768, 289, 3851, 657,
! - -32768, - -32768, - -32768, 658, 9, 296, 456, 3851, 476, 482, 649, 3248, 3315,
! 316, - -32768, - -32768, 661, 667, 665, - -32768, 671, - -32768, 2391, - -32768,
! - -32768, 674, 4227, - -32768, 666, 91, 662, - -32768, - -32768, 290, - -32768,
! - -32768, - -32768, - -32768, 406, 681, 8, - -32768, - -32768, - -32768, -
! -32768, 673, - -32768, - -32768, - -32768, - -32768, 2160, - -32768, - -32768, -
! -32768, - -32768, 683, - -32768, - -32768, 684, 562, 153, - -32768, 682, 698,
! 505, 692, - -32768, 2545, - -32768, - -32768, - -32768, 2391, 1443, 3894, 732,
! 699, 698, 700, 2701, - -32768, - -32768, 3851, 3851, - -32768, - -32768, -
! -32768, 2701, 368, - -32768, - -32768, - -32768, - -32768, - -32768, 345, 48,
! 528, 2478, 502, 705, 2478, 3851, 3382, 326, 3449, 330, 3516, 581, - -32768, 707,
! 717, - -32768, 562, 53, - -32768, - -32768, 713, 562, 1443, 704, 706, 708, -
! -32768, - -32768, - -32768, - -32768, - -32768, - -32768, 709, - -32768, -
! -32768, - -32768, 712, 716, 3851, - -32768, - -32768, 2846, 718, - -32768, 616,
! 720, - -32768, - -32768, 382, - -32768, - -32768, - -32768, 726, - -32768, -
! -32768, 788, 731, 581, - -32768, 508, 2478, 510, 3583, 2478, 515, 3650, 3717,
! 338, 2276, 722, 735, - -32768, 2478, - -32768, - -32768, 728, - -32768, 674, 747,
! - -32768, - -32768, - -32768, - -32768, - -32768, 347, - -32768, 736, 1443, -
! -32768, 2623, 1443, 2478, 596, 742, 745, - -32768, 2478, 2478, 526, - -32768,
! 2478, 2478, 529, 2478, 531, 3784, - 18, 1381, - -32768, - -32768, 621, 562, 744,
! 3851, - -32768, 746, - -32768, 534, - -32768, 3851, 750, 753, - -32768, - -32768,
! - -32768, - -32768, 2478, - -32768, - -32768, 2478, - -32768, 2478, 2478, 537,
! 3851, 994, - -32768, - -32768, - -32768, 764, 389, 752, - -32768, 357, 1381, -
! -32768, - -32768, - -32768, - -32768, - -32768, 2478, 370, 581, - -32768, 757, -
! -32768, - -32768, 1145, - -32768, - -32768, 994, - -32768, - -32768, 596, -
! -32768, 581, - -32768, - -32768, - -32768, 852, 857, - -32768}; static short Cyc_yypgoto[
! 112u]={ - -32768, 38, - -32768, 548, - -32768, - -32768, - -32768, - -32768, -
! -32768, - 51, - 48, - 55, - -32768, 128, - 50, 285, - -32768, 118, - -32768, 29,
! - -32768, - -32768, 420, - -32768, - 22, - -32768, - 140, - -32768, - -32768, -
! -32768, 659, 652, 57, - -32768, - -32768, 331, - -32768, - -32768, 11, - -32768,
! - -32768, 43, - 33, - 73, - -32768, - -32768, 806, - -32768, - 97, - 31, - 106,
! - 391, 129, 300, 308, 583, - 382, - 87, - 278, 755, - -32768, - 189, - 149, -
! 360, - 251, - -32768, 423, - 137, - 80, - 99, - 45, - 212, - 109, - -32768, -
! -32768, - 34, - 227, - -32768, - 621, - 351, - -32768, - -32768, - 21, 597, -
! -32768, 292, - -32768, - -32768, 175, 143, - -32768, - 139, - 352, - 141, 551,
! 550, 554, 573, 585, 315, 0, 317, 320, - 133, 613, - -32768, - -32768, - -32768,
! - 319, - -32768, - -32768, 10}; static short Cyc_yytable[ 4330u]={ 115, 152, 79,
! 144, 113, 523, 120, 114, 127, 307, 60, 259, 409, 410, 82, 412, 373, 308, 304,
! 262, 258, 116, 474, 109, 121, 436, 449, 109, 326, 1, 342, 61, 65, 80, 319, 81,
! 568, 562, 343, 344, 322, 323, 519, 324, 60, 115, 208, 209, 210, 113, 129, 60,
! 763, 535, 536, 133, 60, 241, 137, 115, 357, 240, 106, 252, 110, 722, 207, 60,
! 327, 287, 124, 120, 589, 334, 335, 467, 587, 87, 297, 91, 253, 80, 211, 552, 216,
! 467, 80, 764, 219, 100, 576, 490, 285, 437, 30, 364, 579, 288, 405, 62, 32, 286,
! 60, 60, 60, 60, 298, 365, 281, 31, 336, 337, 141, 30, 141, 393, 406, 141, 217,
! 32, 107, 400, 366, 403, 404, 60, 34, 16, 17, 18, 199, 200, 201, 202, 141, 60,
! 586, 600, 270, 559, 80, 601, 314, 782, - 116, 151, 141, 141, 474, 291, 418, 115,
! 703, - 181, 427, 252, 390, 83, 254, - 181, 790, 60, 215, 266, 475, 291, 476, 391,
! 795, 292, 84, 290, 376, 797, 151, 101, 102, 103, 489, 291, 624, 31, 92, 93, 241,
! 241, 419, 241, 240, 240, - 85, 240, 433, - 85, 296, 386, 94, 95, 85, 457, 141,
! 140, 661, 140, 293, 429, 140, 1, 294, 512, 513, 514, 287, 473, 60, 85, 415, 88,
! 662, 37, 38, 39, 297, 140, 618, 60, 420, 145, 387, 358, 359, 360, 179, 198, 146,
! 140, 140, 527, 132, 471, 293, 528, 141, 414, 430, 533, 89, 254, 126, 415, 265,
! 60, 677, 293, 702, 484, 452, 663, 384, 705, 420, 90, 264, 241, 121, 516, 361,
! 240, 283, 284, 215, 62, 517, 520, 362, 363, 117, 30, 299, 300, 521, 118, 31, 32,
! 411, 119, 125, 80, 80, 140, 1, 30, 602, 107, 432, 31, 553, 32, 555, 128, 96, 280,
! 401, 528, 34, 60, 402, 60, 141, 528, 130, 276, 141, 141, 141, 37, 38, 39, 581,
! 257, 60, 152, 141, 85, 141, 426, 218, 447, 448, 141, 141, 140, 141, 449, 504,
! 505, 506, 507, 87, 115, 460, 461, 151, 546, 141, 131, 320, 445, 375, 767, 670,
! 609, 151, 415, 62, 135, 115, 151, 613, 468, 113, 570, 593, 556, 469, 534, 549,
! 134, 470, 670, 594, 592, 415, 706, 30, 416, 30, 557, 136, 60, 32, 60, 32, 104,
! 257, 31, 105, 34, 281, - 159, 628, 561, 150, 528, 380, - 159, 629, 140, 37, 38,
! 39, 140, 140, 140, 399, 277, 141, 525, 278, 526, 639, 140, 669, 140, 141, 203,
! 415, 471, 140, 140, 691, 140, 204, 577, 694, 621, 415, 281, 580, 466, 415, 669,
! 734, 140, 215, 793, 619, 141, 415, 415, 620, 796, 215, - 85, 616, 60, 141, 415,
! 85, 375, 270, 220, 742, 645, 80, 141, 487, 415, 672, 80, 267, 650, 786, 569, 493,
! 151, 673, 670, 293, 275, 415, 271, 680, 571, 151, 789, 320, 679, 717, 279, 646,
! 714, 718, 151, 482, 784, 291, 486, 1, 415, 320, 652, 653, 654, 60, 140, 303, 141,
! 141, 515, 325, 115, 497, 140, 493, 252, 309, 285, 375, 765, 332, 333, 338, 339,
! 340, 341, 286, 141, 37, 38, 39, 684, 644, 310, 687, 151, 140, 605, 311, 669, 492,
! 415, 420, 535, 536, 140, 312, 781, 522, 603, 415, 60, 607, 415, 140, 493, 787,
! 313, 627, 321, 115, 493, 329, 141, 113, 630, 415, 330, 558, 792, 1, 328, 794,
! 452, 540, 367, 542, 543, 331, 547, 368, 207, 30, 370, 384, 632, 415, 378, 32,
! 377, 724, 633, 415, 728, 385, 34, 140, 140, 388, 141, 665, 666, 738, 1, 80, 389,
! 37, 38, 39, 392, 740, 685, 415, 697, 698, 681, 140, 723, 415, 725, 415, 747, 394,
! 596, 729, 415, 753, 754, 748, 749, 756, 757, 407, 759, 375, 755, 415, 395, 758,
! 415, 760, 415, 746, 771, 300, 141, 779, 415, 396, 682, 683, 397, 140, 408, 30,
! 413, 775, 502, 503, 776, 32, 777, 778, - 207, 205, 508, 509, 295, - 207, - 207,
! 510, 511, 416, 671, - 207, 423, 286, 424, 428, 431, 788, 435, 440, 442, 441, 459,
! 735, 30, 140, 443, 141, 241, 444, 32, 458, 240, - 178, 326, 485, 488, 295, - 178,
! - 178, 491, 530, 531, 524, - 178, 544, 286, 541, 37, 38, 39, 532, 548, 550, 80,
! 151, 241, 554, 564, 560, 240, 566, 563, 631, 572, 241, 578, 636, 638, 240, 573,
! 140, 574, 583, 584, 585, 31, 588, 241, 590, 599, 241, 240, 591, 597, 240, 606,
! 598, 604, 611, 608, 375, 141, 610, 634, 141, 614, 622, 615, 617, 625, 626, 375,
! 640, 674, 678, 154, 155, 641, 647, 375, 642, 649, 477, 302, 257, 140, 305, 305,
! 156, 744, 157, 643, 151, 158, 316, 317, 655, 657, 659, 660, 159, 160, 305, 305,
! 161, 305, 664, 162, 163, 612, 164, 667, 165, 166, 675, 676, 686, 700, 701, 704,
! 707, 708, 305, 709, 710, 688, 690, 711, 693, 375, 696, 712, 720, 715, 716, 30,
! 167, 168, 169, 170, 719, 32, 721, 736, 739, 306, 478, 737, 171, 741, 140, 743,
! 172, 140, 751, 752, 447, 448, 713, 173, 768, 770, 174, 175, 176, 774, 783, 785,
! 799, 177, 178, 773, 791, 800, 483, 656, 575, 375, 623, 372, 123, 379, 727, 651,
! 766, 731, 733, 648, 261, 582, 472, 456, 658, 496, 498, 0, 0, - 8, 1, 499, 2, 3,
! 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 500, 0, 21, 0, 0,
! 0, 762, 0, 0, 0, 0, 0, 0, 501, 769, 22, 0, 23, 0, 0, 772, 0, 24, 0, 25, 26, 27,
! 28, 0, 0, 0, 0, 0, 29, 0, 780, 305, 0, 305, 305, 305, 305, 305, 305, 305, 305,
! 305, 305, 305, 305, 305, 305, 305, 305, 305, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0,
! 0, 31, 32, 33, 0, 0, 0, - 8, 0, 34, 0, 0, 35, 36, 0, 0, 0, 0, 0, 0, 37, 38, 39,
! 305, 0, 0, 0, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 697, 698, 21, 154, 155, 221, 0, 222, 223, 224, 225, 226, 227, 228, 229, 22,
! 156, 23, 157, 230, 0, 158, 24, 231, 0, 0, 27, 28, 159, 160, 232, 233, 161, 29,
! 234, 162, 163, 0, 164, 305, 165, 166, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 66, 345,
! 346, 347, 348, 349, 350, 351, 352, 353, 354, 235, 167, 168, 169, 170, 31, 32, 33,
! 0, 236, 112, 0, 0, 171, 0, 355, 35, 238, 0, 0, 0, 0, 0, 0, 173, 305, 0, 174, 175,
! 176, 0, 0, 0, 0, 177, 178, 30, 68, 0, 69, 70, 0, 32, 0, 0, 0, 0, 446, 0, 71, 0,
! 0, 72, 73, 0, 0, 0, 447, 448, 0, 74, 0, 0, 0, 75, 76, 305, 0, 0, 2, 3, 4, 111, 6,
! 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 748, 749, 21, 154, 155, 221,
! 0, 222, 223, 224, 225, 226, 227, 228, 229, 22, 156, 23, 157, 230, 0, 158, 24,
! 231, 0, 0, 27, 28, 159, 160, 232, 233, 161, 29, 234, 162, 163, 0, 164, 0, 165,
! 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 305, 235, 167,
! 168, 169, 170, 31, 32, 33, 0, 236, 112, 0, 0, 171, 0, 0, 35, 238, 0, 0, 0, 0, 0,
! 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 2, 3, 4, 111, 6, 7, 8, 9, 10,
! 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 21, 154, 155, 221, 0, 222, 223,
! 224, 225, 226, 227, 228, 229, 22, 156, 23, 157, 230, 0, 158, 24, 231, 0, 0, 27,
! 28, 159, 160, 232, 233, 161, 29, 234, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 167, 168, 169, 170, 31,
! 32, 33, 0, 236, 112, 237, 0, 171, 0, 0, 35, 238, 0, 0, 0, 0, 0, 0, 173, 0, 0,
! 174, 175, 176, 0, 0, 0, 0, 177, 178, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13,
! 14, 15, 16, 17, 18, 19, 20, 0, 0, 21, 154, 155, 221, 0, 222, 223, 224, 225, 226,
! 227, 228, 229, 22, 156, 23, 157, 230, 0, 158, 24, 231, 0, 0, 27, 28, 159, 160,
! 232, 233, 161, 29, 234, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 7, 8, 9,
! 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 235, 167, 168, 169, 170, 31, 32,
! 33, 0, 236, 112, 0, 0, 171, 22, 0, 35, 238, 0, 0, 0, 0, 0, 0, 173, 27, 28, 174,
! 175, 176, 0, 0, 29, 0, 177, 178, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14,
! 15, 16, 17, 18, 19, 20, 0, 0, 21, 154, 155, 0, 0, 0, 0, 0, 0, 0, 31, 0, 33, 22,
! 156, 23, 157, 0, 0, 158, 24, 35, 36, 0, 27, 28, 159, 160, 0, 0, 161, 29, 0, 162,
! 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 30, 167, 168, 169, 170, 31, 32, 33, 0, 545, 0, 0, 0, 171, 0, 0, 35, 238,
! 0, 0, 0, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 7, 8, 9, 10,
! 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 154, 155, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 22, 156, 0, 157, 0, 0, 158, 0, 0, 0, 0, 27, 28, 159, 160, 0, 0, 161, 29,
! 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 31, 32, 33, 0, 0, 318, 0, 0, 171, 0, 0,
! 35, 238, 0, 0, 0, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 7, 8,
  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 154, 155, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 22, 156, 0, 157, 0, 0, 158, 0, 0, 0, 0, 27, 28, 159, 160, 0, 0,
! 161, 29, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 7, 8, 9, 10, 11, 12,
! 13, 14, 15, 16, 17, 18, 19, 20, 0, 30, 167, 168, 169, 170, 31, 32, 33, 0, 0, 0,
! 0, 0, 171, 22, 0, 35, 238, 0, 0, 0, 0, 0, 0, 173, 27, 28, 174, 175, 176, 0, 0,
! 29, 0, 177, 178, - 8, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
! 17, 18, 19, 20, 0, 255, 21, 0, 256, 0, 0, 0, 0, 31, 0, 33, 0, 257, 0, 22, 0, 23,
! 0, 0, 35, 36, 24, 0, 25, 26, 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 7, 8, 9, 10, 11,
! 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0,
! 22, 0, 31, 32, 33, 0, 0, 0, 0, 0, 34, 27, 28, 35, 36, 0, 0, 0, 29, 0, 0, 37, 38,
! 39, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
! 255, 0, 21, 0, 0, 0, 0, 0, 31, 0, 33, 0, 257, 0, 0, 22, 0, 23, 0, 35, 36, 0, 24,
! 0, 25, 26, 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15,
! 16, 17, 18, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 22, 0, 31, 32,
! 33, 0, 0, 0, - 8, 0, 34, 27, 28, 35, 36, 0, 0, 0, 29, 0, 0, 37, 38, 39, 1, 0, 2,
! 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 567, 0, 21, 0,
! 0, 0, 0, 0, 31, 0, 33, 0, 0, 0, 0, 22, 0, 0, 0, 35, 36, 0, 24, 0, 0, 0, 27, 28,
! 0, 0, 1, 0, 0, 29, 0, 0, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 22, 0, 31, 32, 33, 0, 0, 0, 0, 0,
! 34, 27, 28, 35, 36, 0, 0, 0, 29, 0, 0, 37, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 255, 0, 0, 30, 0, 0, 0, 0, 31, 32, 33, 0, 257,
! 0, 0, 0, 295, - 159, 0, 35, 36, 0, 0, - 159, 0, 286, 0, 37, 38, 39, 7, 8, 9, 10,
! 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 68, 66, 69, 70, 0, 32, 0, 0, 0, 0, 0,
! 0, 71, 0, 22, 72, 73, 0, 0, 0, 447, 448, 0, 74, 0, 27, 28, 75, 76, 0, 0, 0, 29,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 68, 0, 69, 70, 0, 32, 0, 0, 0,
! 0, 255, 0, 71, 0, 0, 72, 73, 0, 31, 66, 33, 0, 257, 74, 0, 0, 285, 75, 76, 35,
! 36, 0, 0, 0, 0, 286, 0, 37, 38, 39, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14,
! 15, 16, 17, 18, 19, 20, 0, 0, 21, 0, 0, 0, 0, 30, 68, 0, 69, 70, 0, 32, 0, 22, 0,
! 23, 0, 0, 71, 0, 24, 72, 73, 0, 27, 28, 0, 0, 0, 74, 0, 29, 0, 75, 76, 0, 0, 0,
  2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 21,
! 0, 0, 0, 0, 0, 0, 31, 0, 33, 0, 0, 112, 22, 205, 23, 0, 0, 35, 36, 24, 0, 0, 0,
! 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14,
! 15, 16, 17, 18, 19, 20, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 33, 22, 0,
! 112, 0, 0, 0, 0, 24, 35, 36, 0, 27, 28, 0, 0, 0, 0, 0, 29, 154, 155, 221, 0, 222,
! 223, 224, 225, 226, 227, 228, 229, 0, 156, 0, 157, 230, 0, 158, 0, 231, 0, 0, 0,
! 0, 159, 160, 232, 233, 161, 0, 234, 162, 163, 31, 164, 33, 165, 166, 0, 0, 0, 0,
! 0, 0, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 167, 168, 169, 170, 0,
! 32, 154, 155, 236, 112, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158,
! 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165,
! 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168,
! 169, 170, 0, 32, 0, 0, 0, 306, 668, 0, 171, 0, 0, 0, 172, 154, 155, 0, 447, 448,
! 0, 173, 0, 0, 174, 175, 176, 0, 156, 0, 157, 177, 178, 158, 0, 0, 0, 0, 0, 0,
! 159, 160, 0, 0, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 0, 0,
! 306, 745, 0, 171, 0, 0, 0, 172, 154, 155, 0, 447, 448, 0, 173, 0, 0, 174, 175,
! 176, 0, 156, 0, 157, 177, 178, 158, 0, 0, 0, 0, 0, 0, 159, 160, 0, 0, 161, 0, 0,
! 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 0, 0, 306, 0, 0, 171, 0, 0, 0, 172,
  154, 155, 0, 447, 448, 0, 173, 0, 0, 174, 175, 176, 0, 156, 0, 157, 177, 178,
  158, 0, 0, 0, 0, 0, 0, 159, 160, 0, 0, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169,
! 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 263, 173,
! 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0,
! 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167,
! 168, 169, 170, 0, 32, 154, 155, 0, 306, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0,
! 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162,
  163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 398, 0, 0, 0, 171, 0, 0, 0,
! 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178,
  161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171,
! 0, 0, 0, 172, 0, 0, 156, 0, 157, 465, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160,
! 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0,
! 0, 0, 171, 518, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0,
! 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32,
! 154, 155, 0, 0, 0, 0, 171, 551, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0,
  174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165,
  166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168,
! 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 595,
  173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0,
  164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 30, 167, 168, 169, 170, 0, 32, 154, 155, 635, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0,
  156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0,
  162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 637, 0, 0, 0, 171, 0, 0, 0,
  172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178,
  161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171,
! 689, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160,
  177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0,
! 0, 0, 171, 692, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0,
  0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32,
! 154, 155, 695, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0,
  174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165,
  166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168,
! 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 726, 0, 0, 172, 0, 0, 156, 0, 157, 0,
  173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0,
! 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 730, 0, 0, 172, 0, 0,
! 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0,
! 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 732, 0, 0,
! 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178,
! 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171,
! 761, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160,
! 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 154, 155, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 159,
! 160, 0, 0, 161, 171, 0, 0, 163, 172, 164, 0, 165, 166, 0, 0, 173, 0, 0, 174, 175,
! 176, 0, 0, 0, 0, 177, 178, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32,
! 154, 155, 0, 306, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 0, 0, 173, 0, 0, 174,
! 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 0, 163, 0, 164, 0, 165, 166, 0, 0,
! 0, 0, 154, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 30, 167, 168, 169,
! 170, 0, 32, 0, 159, 160, 612, 0, 161, 171, 0, 0, 163, 172, 164, 0, 165, 166, 0,
! 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 0, 0, 0, 0, 0, 0, 0, 30, 167,
! 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 301, 0, 0, 0, 172, 0, 0, 156, 0, 0,
! 0, 173, 0, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 0, 163, 0, 164,
! 0, 165, 166, 0, 0, 0, 0, 154, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
! 30, 167, 168, 169, 170, 0, 32, 0, 159, 160, 0, 0, 161, 315, 0, 0, 163, 172, 164,
! 0, 165, 166, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 0, 0, 0, 0, 0,
! 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0,
! 0, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 7, 8, 9, 10, 11, 12,
! 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 138, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 31, 0, 33, 0, 0, 139, 0, 0, 0, 0, 0, 35, 36}; static short Cyc_yycheck[ 4330u]={
! 55, 88, 23, 83, 55, 365, 56, 55, 63, 158, 0, 117, 239, 240, 85, 242, 205, 158,
! 157, 118, 117, 55, 300, 54, 57, 17, 277, 58, 71, 1, 109, 87, 22, 23, 171, 25,
! 427, 419, 117, 118, 173, 174, 361, 176, 34, 100, 101, 102, 103, 100, 71, 41, 70,
! 5, 6, 76, 46, 112, 80, 114, 193, 112, 52, 114, 54, 686, 100, 57, 111, 142, 60,
! 121, 463, 66, 67, 287, 458, 34, 151, 41, 114, 71, 104, 402, 106, 297, 76, 105,
! 110, 46, 442, 318, 98, 85, 85, 83, 448, 142, 85, 93, 91, 107, 92, 93, 94, 95,
! 151, 95, 139, 90, 103, 104, 83, 85, 85, 224, 103, 88, 108, 91, 101, 230, 110,
! 232, 233, 115, 98, 17, 18, 19, 92, 93, 94, 95, 105, 125, 99, 96, 128, 417, 130,
! 100, 164, 764, 96, 88, 117, 118, 426, 112, 59, 206, 99, 94, 260, 206, 87, 103,
! 115, 100, 781, 151, 105, 125, 301, 112, 303, 98, 789, 65, 84, 104, 206, 794, 117,
! 47, 48, 49, 315, 112, 532, 90, 94, 95, 239, 240, 95, 242, 239, 240, 95, 242, 265,
! 98, 151, 217, 94, 95, 103, 279, 171, 83, 593, 85, 100, 65, 88, 1, 104, 342, 343,
! 344, 285, 293, 204, 103, 100, 98, 65, 109, 110, 111, 295, 105, 108, 215, 257, 85,
! 218, 61, 62, 63, 89, 90, 92, 117, 118, 377, 86, 289, 100, 380, 213, 94, 104, 385,
! 95, 204, 98, 100, 122, 241, 612, 100, 645, 310, 277, 104, 215, 650, 291, 95, 119,
! 318, 297, 85, 98, 318, 140, 141, 213, 93, 92, 85, 106, 107, 98, 85, 99, 100, 92,
! 103, 90, 91, 241, 107, 95, 277, 278, 171, 1, 85, 481, 101, 265, 90, 405, 91, 407,
! 95, 94, 96, 94, 442, 98, 295, 98, 297, 279, 448, 98, 136, 283, 284, 285, 109,
! 110, 111, 97, 94, 310, 408, 293, 103, 295, 100, 106, 106, 107, 300, 301, 213,
! 303, 584, 334, 335, 336, 337, 295, 394, 283, 284, 285, 394, 315, 85, 171, 94,
! 205, 740, 601, 488, 295, 100, 93, 100, 411, 300, 491, 98, 411, 434, 468, 411,
! 103, 387, 94, 94, 107, 620, 469, 468, 100, 651, 85, 85, 85, 411, 97, 369, 91,
! 371, 91, 92, 94, 90, 95, 98, 419, 99, 94, 96, 99, 532, 105, 105, 100, 279, 109,
! 110, 111, 283, 284, 285, 229, 95, 377, 369, 98, 371, 94, 293, 601, 295, 385, 94,
! 100, 467, 300, 301, 94, 303, 100, 444, 94, 524, 100, 458, 449, 286, 100, 620, 94,
! 315, 377, 786, 96, 408, 100, 100, 100, 792, 385, 98, 105, 435, 417, 100, 103,
! 306, 440, 87, 105, 559, 444, 426, 313, 100, 607, 449, 98, 567, 105, 434, 321,
! 408, 607, 718, 100, 85, 100, 99, 104, 435, 417, 105, 301, 616, 96, 98, 560, 670,
! 100, 426, 309, 96, 112, 312, 1, 100, 315, 85, 86, 87, 484, 377, 98, 468, 469,
! 356, 96, 556, 327, 385, 361, 556, 98, 98, 365, 736, 68, 69, 64, 65, 112, 113,
! 107, 488, 109, 110, 111, 630, 556, 98, 633, 468, 408, 484, 98, 718, 99, 100, 563,
! 5, 6, 417, 98, 764, 363, 99, 100, 531, 99, 100, 426, 402, 773, 98, 538, 98, 605,
! 408, 115, 524, 605, 99, 100, 116, 415, 786, 1, 70, 789, 584, 389, 96, 391, 392,
! 114, 394, 96, 605, 85, 96, 531, 99, 100, 96, 91, 95, 689, 99, 100, 692, 95, 98,
! 468, 469, 95, 560, 85, 86, 701, 1, 584, 98, 109, 110, 111, 98, 706, 99, 100, 22,
! 23, 627, 488, 99, 100, 99, 100, 720, 98, 470, 99, 100, 725, 726, 22, 23, 729,
! 730, 105, 732, 481, 99, 100, 85, 99, 100, 99, 100, 719, 99, 100, 606, 99, 100,
! 94, 628, 629, 94, 524, 98, 85, 96, 755, 332, 333, 758, 91, 760, 761, 94, 97, 338,
! 339, 98, 99, 100, 340, 341, 85, 606, 105, 99, 107, 105, 99, 108, 779, 96, 100,
! 97, 96, 96, 697, 85, 560, 99, 651, 736, 100, 91, 100, 736, 94, 71, 25, 98, 98,
! 99, 100, 99, 94, 100, 103, 105, 30, 107, 98, 109, 110, 111, 105, 94, 42, 697,
! 651, 764, 90, 90, 98, 764, 99, 112, 541, 98, 773, 85, 545, 546, 773, 99, 606,
! 100, 96, 100, 99, 90, 99, 786, 99, 85, 789, 786, 108, 99, 789, 98, 100, 99, 96,
! 100, 601, 716, 99, 98, 719, 99, 96, 100, 99, 96, 96, 612, 95, 25, 615, 25, 26,
! 94, 96, 620, 99, 103, 32, 154, 94, 651, 157, 158, 38, 716, 40, 104, 719, 43, 165,
! 166, 99, 108, 99, 99, 50, 51, 173, 174, 54, 176, 108, 57, 58, 95, 60, 103, 62,
! 63, 99, 99, 95, 94, 85, 90, 100, 99, 193, 99, 99, 634, 635, 99, 637, 670, 639,
! 99, 28, 99, 98, 85, 86, 87, 88, 89, 98, 91, 95, 105, 100, 95, 96, 96, 98, 86,
! 716, 99, 102, 719, 96, 94, 106, 107, 667, 109, 100, 99, 112, 113, 114, 96, 86,
! 99, 0, 119, 120, 105, 99, 0, 310, 574, 440, 718, 531, 204, 58, 213, 691, 567,
! 739, 694, 695, 563, 117, 450, 291, 278, 584, 326, 328, - 1, - 1, 0, 1, 329, 3, 4,
! 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 330, - 1, 24, - 1,
! - 1, - 1, 734, - 1, - 1, - 1, - 1, - 1, - 1, 331, 742, 37, - 1, 39, - 1, - 1,
! 748, - 1, 44, - 1, 46, 47, 48, 49, - 1, - 1, - 1, - 1, - 1, 55, - 1, 763, 326, -
! 1, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
! 343, 344, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, - 1, - 1, - 1, - 1, 90, 91,
! 92, - 1, - 1, - 1, 96, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1,
! 109, 110, 111, 380, - 1, - 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
! 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, - 1, 29, 30, 31, 32, 33, 34, 35,
! 36, 37, 38, 39, 40, 41, - 1, 43, 44, 45, - 1, - 1, 48, 49, 50, 51, 52, 53, 54,
! 55, 56, 57, 58, - 1, 60, 442, 62, 63, - 1, - 1, - 1, 448, - 1, - 1, - 1, - 1, -
! 1, - 1, 38, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91,
! 92, - 1, 94, 95, - 1, - 1, 98, - 1, 97, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1,
! 109, 491, - 1, 112, 113, 114, - 1, - 1, - 1, - 1, 119, 120, 85, 86, - 1, 88, 89,
! - 1, 91, - 1, - 1, - 1, - 1, 96, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, 106,
! 107, - 1, 109, - 1, - 1, - 1, 113, 114, 532, - 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10,
! 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, - 1, 29, 30,
! 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, - 1, 43, 44, 45, - 1, - 1, 48, 49,
! 50, 51, 52, 53, 54, 55, 56, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, 607, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! 616, 85, 86, 87, 88, 89, 90, 91, 92, - 1, 94, 95, - 1, - 1, 98, - 1, - 1, 101,
! 102, - 1, - 1, - 1, - 1, - 1, - 1, 109, - 1, - 1, 112, 113, 114, - 1, - 1, - 1,
! - 1, 119, 120, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
! 21, - 1, - 1, 24, 25, 26, 27, - 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, - 1, 43, 44, 45, - 1, - 1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, -
! 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, 90, 91, 92, - 1,
! 94, 95, 96, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1, 109, - 1,
  - 1, 112, 113, 114, - 1, - 1, - 1, - 1, 119, 120, 3, 4, 5, 6, 7, 8, 9, 10, 11,
  12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, 25, 26, 27, - 1, 29, 30,
  31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, - 1, 43, 44, 45, - 1, - 1, 48, 49,
  50, 51, 52, 53, 54, 55, 56, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, -
! 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, 85, 86, 87,
! 88, 89, 90, 91, 92, - 1, 94, 95, - 1, - 1, 98, 37, - 1, 101, 102, - 1, - 1, - 1,
! - 1, - 1, - 1, 109, 48, 49, 112, 113, 114, - 1, - 1, 55, - 1, 119, 120, 3, 4, 5,
! 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, 25, 26,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, 90, - 1, 92, 37, 38, 39, 40, - 1, - 1, 43, 44,
! 101, 102, - 1, 48, 49, 50, 51, - 1, - 1, 54, 55, - 1, 57, 58, - 1, 60, - 1, 62,
! 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, 90, 91, 92, - 1, 94, - 1, - 1, -
! 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1, 109, - 1, - 1, 112, 113,
! 114, - 1, - 1, - 1, - 1, 119, 120, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 21, - 1, - 1, - 1, 25, 26, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! 37, 38, - 1, 40, - 1, - 1, 43, - 1, - 1, - 1, - 1, 48, 49, 50, 51, - 1, - 1, 54,
! 55, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88,
! 89, 90, 91, 92, - 1, - 1, 95, - 1, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, -
! 1, - 1, - 1, 109, - 1, - 1, 112, 113, 114, - 1, - 1, - 1, - 1, 119, 120, 8, 9,
! 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, - 1, 25, 26, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 37, 38, - 1, 40, - 1, - 1, 43, - 1, - 1,
! - 1, - 1, 48, 49, 50, 51, - 1, - 1, 54, 55, - 1, 57, 58, - 1, 60, - 1, 62, 63, -
! 1, - 1, - 1, - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
! - 1, 85, 86, 87, 88, 89, 90, 91, 92, - 1, - 1, - 1, - 1, - 1, 98, 37, - 1, 101,
! 102, - 1, - 1, - 1, - 1, - 1, - 1, 109, 48, 49, 112, 113, 114, - 1, - 1, 55, - 1,
! 119, 120, 0, 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 21, - 1, 82, 24, - 1, 85, - 1, - 1, - 1, - 1, 90, - 1, 92, - 1, 94, - 1, 37,
! - 1, 39, - 1, - 1, 101, 102, 44, - 1, 46, 47, 48, 49, - 1, - 1, - 1, - 1, - 1,
! 55, - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, - 1, - 1, 37, - 1, 90,
! 91, 92, - 1, - 1, - 1, - 1, - 1, 98, 48, 49, 101, 102, - 1, - 1, - 1, 55, - 1, -
! 1, 109, 110, 111, 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
! 18, 19, 20, 21, 82, - 1, 24, - 1, - 1, - 1, - 1, - 1, 90, - 1, 92, - 1, 94, - 1,
! - 1, 37, - 1, 39, - 1, 101, 102, - 1, 44, - 1, 46, 47, 48, 49, - 1, - 1, - 1, -
! 1, - 1, 55, - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, - 1, - 1, 37, -
! 1, 90, 91, 92, - 1, - 1, - 1, 96, - 1, 98, 48, 49, 101, 102, - 1, - 1, - 1, 55,
! - 1, - 1, 109, 110, 111, 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
! 17, 18, 19, 20, 21, 82, - 1, 24, - 1, - 1, - 1, - 1, - 1, 90, - 1, 92, - 1, - 1,
! - 1, - 1, 37, - 1, - 1, - 1, 101, 102, - 1, 44, - 1, - 1, - 1, 48, 49, - 1, - 1,
! 1, - 1, - 1, 55, - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
! 21, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, - 1, - 1, 37,
! - 1, 90, 91, 92, - 1, - 1, - 1, - 1, - 1, 98, 48, 49, 101, 102, - 1, - 1, - 1,
! 55, - 1, - 1, 109, 110, 111, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 38, - 1, - 1, 82, - 1, - 1, 85, - 1, - 1,
! - 1, - 1, 90, 91, 92, - 1, 94, - 1, - 1, - 1, 98, 99, - 1, 101, 102, - 1, - 1,
! 105, - 1, 107, - 1, 109, 110, 111, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 21, 85, 86, 38, 88, 89, - 1, 91, - 1, - 1, - 1, - 1, - 1, - 1, 98, - 1, 37,
! 101, 102, - 1, - 1, - 1, 106, 107, - 1, 109, - 1, 48, 49, 113, 114, - 1, - 1, -
! 1, 55, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! 85, 86, - 1, 88, 89, - 1, 91, - 1, - 1, - 1, - 1, 82, - 1, 98, - 1, - 1, 101,
! 102, - 1, 90, 38, 92, - 1, 94, 109, - 1, - 1, 98, 113, 114, 101, 102, - 1, - 1,
! - 1, - 1, 107, - 1, 109, 110, 111, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
! 16, 17, 18, 19, 20, 21, - 1, - 1, 24, - 1, - 1, - 1, - 1, 85, 86, - 1, 88, 89, -
! 1, 91, - 1, 37, - 1, 39, - 1, - 1, 98, - 1, 44, 101, 102, - 1, 48, 49, - 1, - 1,
! - 1, 109, - 1, 55, - 1, 113, 114, - 1, - 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
! 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, - 1, - 1, - 1, - 1, - 1, - 1,
! 90, - 1, 92, - 1, - 1, 95, 37, 97, 39, - 1, - 1, 101, 102, 44, - 1, - 1, - 1, 48,
! 49, - 1, - 1, - 1, - 1, - 1, 55, - 1, - 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
! 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, 90, - 1, 92, 37, - 1, 95, - 1, - 1, - 1, - 1, 44, 101, 102, - 1,
! 48, 49, - 1, - 1, - 1, - 1, - 1, 55, 25, 26, 27, - 1, 29, 30, 31, 32, 33, 34, 35,
! 36, - 1, 38, - 1, 40, 41, - 1, 43, - 1, 45, - 1, - 1, - 1, - 1, 50, 51, 52, 53,
! 54, - 1, 56, 57, 58, 90, 60, 92, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, 101, 102,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88,
! 89, - 1, 91, 25, 26, 94, 95, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1,
! 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1,
! 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1,
! 91, - 1, - 1, - 1, 95, 96, - 1, 98, - 1, - 1, - 1, 102, 25, 26, - 1, 106, 107, -
! 1, 109, - 1, - 1, 112, 113, 114, - 1, 38, - 1, 40, 119, 120, 43, - 1, - 1, - 1,
! - 1, - 1, - 1, 50, 51, - 1, - 1, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, - 1, - 1, - 1, 95, 96, - 1, 98,
! - 1, - 1, - 1, 102, 25, 26, - 1, 106, 107, - 1, 109, - 1, - 1, 112, 113, 114, -
! 1, 38, - 1, 40, 119, 120, 43, - 1, - 1, - 1, - 1, - 1, - 1, 50, 51, - 1, - 1, 54,
! - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88,
! 89, - 1, 91, - 1, - 1, - 1, 95, - 1, - 1, 98, - 1, - 1, - 1, 102, 25, 26, - 1,
! 106, 107, - 1, 109, - 1, - 1, 112, 113, 114, - 1, 38, - 1, 40, 119, 120, 43, - 1,
! - 1, - 1, - 1, - 1, - 1, 50, 51, - 1, - 1, 54, - 1, - 1, 57, 58, - 1, 60, - 1,
! 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, - 1, - 1,
! - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40, 108, 109, 43, - 1, 112,
! 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, - 1, 95, - 1, - 1,
! 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40, - 1, 109, 43, - 1, 112, 113, 114,
  - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, 94, - 1, - 1, - 1, 98, - 1,
  - 1, - 1, 102, - 1, - 1, 38, - 1, 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1,
  50, 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, - 1, - 1, - 1, - 1, 98, - 1, - 1, - 1,
! 102, - 1, - 1, 38, - 1, 40, 108, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51,
  119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, -
  1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85,
! 86, 87, 88, 89, - 1, 91, 25, 26, - 1, - 1, - 1, - 1, 98, 99, - 1, - 1, 102, - 1,
! - 1, 38, - 1, 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120,
  54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
  1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87,
  88, 89, - 1, 91, 25, 26, - 1, - 1, - 1, - 1, 98, 99, - 1, - 1, 102, - 1, - 1, 38,
  - 1, 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1,
  - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89,
! - 1, 91, 25, 26, - 1, - 1, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1,
! 40, 108, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1,
  57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1,
! 91, 25, 26, 94, - 1, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40, -
! 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57, 58,
! - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26,
  94, - 1, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40, - 1, 109, 43,
  - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, -
--- 2353,2918 ----
  210, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212,
  212, 212, 212, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219,
  219, 220, 220, 220, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 223,
! 224, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 226,
! 226, 226, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
! 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 230, 230, 231, 231, 231, 231,
! 232, 232}; static short Cyc_yyr2[ 404u]={ 0, 1, 2, 3, 5, 3, 5, 6, 0, 1, 1, 2, 3,
! 3, 4, 3, 4, 2, 1, 2, 1, 2, 3, 5, 3, 1, 2, 2, 3, 2, 3, 2, 3, 2, 3, 1, 1, 1, 1, 2,
! 1, 1, 0, 1, 6, 1, 3, 1, 1, 4, 4, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
! 4, 4, 1, 1, 1, 1, 1, 5, 2, 1, 3, 1, 3, 4, 6, 6, 3, 3, 0, 3, 3, 1, 1, 1, 1, 2, 1,
! 1, 3, 1, 3, 3, 2, 3, 2, 3, 1, 1, 3, 1, 2, 3, 6, 4, 3, 5, 1, 1, 1, 2, 3, 3, 0, 1,
! 1, 2, 6, 1, 2, 1, 3, 3, 4, 4, 5, 4, 4, 4, 2, 2, 1, 3, 4, 4, 5, 1, 1, 4, 4, 1, 0,
! 1, 1, 1, 1, 2, 3, 5, 5, 7, 1, 3, 0, 2, 0, 2, 3, 5, 0, 1, 1, 3, 2, 3, 4, 1, 1, 3,
! 1, 3, 2, 1, 2, 1, 1, 3, 1, 1, 2, 3, 4, 8, 1, 2, 3, 4, 2, 1, 2, 3, 2, 1, 2, 1, 2,
! 3, 4, 3, 1, 3, 1, 1, 2, 3, 2, 3, 3, 4, 4, 3, 5, 4, 4, 4, 2, 1, 1, 1, 1, 1, 1, 6,
! 3, 2, 2, 3, 1, 2, 2, 3, 1, 2, 1, 2, 1, 2, 5, 7, 7, 8, 6, 0, 3, 4, 5, 6, 7, 0, 3,
! 4, 5, 5, 7, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 3, 2, 2, 2, 3, 2, 4, 5, 1, 3, 1,
! 2, 1, 1, 1, 1, 5, 4, 4, 5, 2, 2, 0, 1, 1, 3, 1, 2, 1, 1, 3, 1, 3, 1, 3, 1, 1, 1,
! 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 2, 2, 2, 5, 5, 1, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
! 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 3, 1, 4, 1, 2, 2, 2, 2, 2, 2, 4,
! 2, 6, 4, 7, 9, 1, 1, 1, 1, 4, 3, 4, 3, 3, 3, 3, 2, 2, 6, 7, 4, 4, 1, 1, 1, 3, 2,
! 5, 4, 4, 5, 1, 1, 3, 1, 1, 1, 1, 1, 1}; static short Cyc_yydefact[ 798u]={ 0,
! 137, 35, 36, 37, 38, 40, 52, 54, 55, 56, 57, 58, 59, 60, 61, 71, 72, 73, 88, 89,
! 42, 0, 0, 41, 0, 0, 113, 114, 0, 402, 157, 403, 85, 0, 53, 0, 142, 143, 146, 1,
! 0, 9, 0, 0, 10, 0, 42, 42, 42, 62, 63, 0, 64, 0, 0, 124, 0, 147, 65, 126, 39, 0,
! 33, 43, 75, 286, 402, 282, 285, 284, 0, 280, 0, 0, 0, 0, 0, 180, 0, 287, 17, 19,
! 0, 0, 0, 66, 0, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 93, 94, 96, 27, 29, 31, 85, 0, 85,
! 150, 0, 149, 85, 38, 0, 25, 0, 0, 11, 159, 0, 0, 135, 125, 42, 148, 136, 0, 0,
! 34, 0, 0, 294, 293, 283, 292, 24, 0, 0, 0, 0, 0, 42, 42, 198, 200, 0, 69, 70,
! 158, 205, 0, 127, 0, 0, 175, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 388,
! 399, 400, 0, 0, 0, 0, 371, 0, 369, 370, 0, 305, 318, 326, 328, 330, 332, 334,
! 336, 339, 344, 347, 350, 354, 0, 356, 372, 387, 386, 0, 3, 0, 5, 0, 22, 0, 0, 0,
  12, 28, 30, 32, 84, 0, 90, 91, 0, 83, 85, 0, 111, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 402, 233, 235, 0, 241, 237, 0, 239, 222, 223, 224, 0, 225, 226,
  227, 0, 303, 26, 13, 96, 165, 181, 0, 0, 161, 159, 0, 0, 128, 0, 138, 0, 0, 78,
  0, 76, 281, 296, 0, 295, 182, 0, 0, 294, 0, 201, 173, 0, 99, 101, 159, 0, 207,
  199, 208, 68, 0, 87, 0, 86, 0, 177, 0, 179, 67, 0, 0, 364, 0, 320, 354, 0, 321,
  322, 0, 0, 0, 0, 0, 0, 0, 357, 358, 0, 0, 0, 0, 360, 361, 359, 144, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 309, 310, 311, 312, 313, 314,
! 315, 316, 317, 307, 0, 362, 0, 380, 381, 0, 0, 0, 390, 0, 0, 145, 18, 0, 20, 0,
  95, 97, 184, 183, 14, 0, 80, 92, 0, 0, 103, 104, 106, 0, 110, 85, 119, 0, 0, 0,
  0, 0, 0, 0, 273, 274, 275, 0, 0, 277, 0, 230, 231, 0, 0, 0, 0, 242, 238, 96, 240,
  236, 234, 0, 166, 0, 0, 0, 172, 160, 167, 130, 0, 0, 0, 161, 132, 134, 133, 129,
  151, 140, 139, 0, 48, 47, 0, 45, 0, 74, 0, 289, 0, 23, 290, 0, 0, 0, 0, 194, 298,
  301, 0, 300, 0, 0, 0, 202, 100, 102, 0, 161, 0, 211, 0, 209, 159, 0, 0, 221, 204,
! 206, 176, 0, 0, 0, 185, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 389, 396, 0,
! 395, 327, 0, 329, 331, 333, 335, 337, 338, 342, 343, 340, 341, 345, 346, 348,
! 349, 351, 352, 353, 306, 378, 379, 374, 0, 376, 377, 0, 0, 0, 4, 6, 0, 325, 107,
  98, 0, 0, 0, 112, 121, 120, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 272, 276, 0, 0, 0,
  229, 0, 232, 0, 15, 304, 159, 0, 169, 0, 0, 0, 162, 131, 165, 153, 152, 141, 7,
  0, 0, 0, 79, 77, 297, 197, 0, 299, 193, 195, 291, 0, 288, 203, 174, 216, 0, 210,
! 213, 0, 161, 0, 212, 0, 363, 0, 0, 186, 0, 190, 384, 385, 0, 0, 0, 0, 366, 0, 0,
! 0, 355, 392, 0, 0, 375, 373, 393, 0, 0, 82, 105, 108, 81, 109, 122, 119, 119, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 278, 0, 0, 16, 161, 0, 170, 168, 0, 161, 0, 0, 0,
! 0, 44, 46, 196, 302, 215, 218, 0, 220, 219, 214, 0, 0, 187, 191, 0, 0, 323, 324,
! 0, 394, 0, 397, 319, 391, 0, 118, 117, 243, 0, 248, 258, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 279, 0, 155, 171, 163, 154, 159, 0, 49, 50, 217, 365, 0, 192, 0, 0,
! 382, 0, 0, 0, 254, 0, 0, 260, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 247, 228, 0,
! 161, 0, 0, 367, 0, 383, 0, 244, 0, 0, 0, 245, 259, 261, 262, 0, 270, 269, 0, 264,
! 0, 0, 0, 0, 248, 249, 164, 156, 0, 0, 0, 123, 0, 0, 246, 263, 271, 265, 266, 0,
! 0, 248, 250, 0, 188, 368, 254, 255, 267, 248, 251, 51, 254, 256, 248, 252, 257,
! 253, 0, 0, 0}; static short Cyc_yydefgoto[ 112u]={ 795, 40, 41, 42, 239, 43, 369,
! 44, 371, 45, 206, 46, 47, 63, 64, 438, 439, 48, 147, 49, 50, 268, 269, 51, 86,
! 52, 212, 213, 97, 98, 99, 214, 142, 381, 382, 383, 53, 54, 537, 538, 539, 55, 56,
! 57, 58, 122, 108, 434, 462, 59, 463, 425, 565, 417, 421, 422, 282, 260, 153, 77,
! 78, 479, 374, 480, 481, 450, 451, 143, 148, 149, 464, 289, 242, 243, 244, 245,
! 246, 247, 697, 747, 248, 249, 272, 273, 274, 453, 454, 455, 250, 251, 356, 180,
! 529, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
! 494, 495, 196, 197}; static short Cyc_yypact[ 798u]={ 1810, - -32768, - -32768,
! - -32768, - -32768, - 9, - -32768, - -32768, - -32768, - -32768, - -32768, -
  -32768, - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, -
! -32768, - -32768, 14, 193, 2124, - -32768, 193, 8, - -32768, - -32768, 28, -
! -32768, 73, - -32768, 39, 159, - -32768, 75, 124, 138, - -32768, - -32768, 1698,
! - -32768, 179, 200, - -32768, 476, 14, 14, 14, - -32768, - -32768, 86, - -32768,
! 122, 2355, 168, 24, 0, - -32768, 193, 148, 100, 2411, - -32768, 170, - -32768,
! 189, - -32768, - -32768, - -32768, 2173, - -32768, 156, 218, 250, 2173, 244, 267,
! 286, 182, - -32768, - -32768, 4269, 98, 4269, - -32768, 292, 1407, 3893, 3893, -
! -32768, 1698, 1921, 1698, 1921, - -32768, 309, 306, - -32768, 2296, 2411, 2411,
! 2411, 39, 1407, 39, - -32768, 193, - -32768, - 64, 330, 1233, - -32768, 2355,
! 476, - -32768, 1639, 4269, 2821, - -32768, 168, 14, - -32768, - -32768, 1921,
! 337, - -32768, 193, 338, 2173, - -32768, - -32768, - -32768, - -32768, 334, 3893,
! 35, 348, 234, 14, 14, 436, - -32768, - 4, - -32768, - -32768, - -32768, 341, 20,
! - -32768, 507, 368, - -32768, 4046, 357, - -32768, 3893, 3936, 367, 376, 380,
! 398, 400, 402, 4113, 4113, - -32768, - -32768, - -32768, - -32768, 1464, 408,
! 4156, 4156, - -32768, 4156, - -32768, - -32768, 418, - -32768, - 45, 446, 434,
! 407, 428, 417, 44, 423, 378, 130, - -32768, 967, 4156, 247, - -32768, - -32768,
! 4, 457, - -32768, 468, - -32768, 470, - -32768, 159, 2888, 2355, - -32768, -
! -32768, - -32768, - -32768, 486, 494, 1407, - -32768, 530, 502, 39, 193, 505, -
! -32768, 474, 41, 510, 2442, 512, 528, 538, 540, 2955, 2442, 147, 2442, 2442, - 5,
! 533, - -32768, - -32768, 547, 1351, 1351, 476, 1351, - -32768, - -32768, -
! -32768, 550, - -32768, - -32768, - -32768, 237, - -32768, - -32768, - -32768,
! 553, 567, - -32768, - 6, 552, 548, 246, 555, 52, - -32768, 554, 299, 562, 6, 560,
! 565, 568, - -32768, - -32768, 564, 569, - -32768, 261, 733, 2173, 4269, - -32768,
! 570, 571, 1407, 1407, 2187, 3022, - 1, - -32768, 183, - -32768, - 6, - -32768,
! 4269, - -32768, 2083, - -32768, 707, - -32768, - -32768, 1407, 1464, - -32768,
! 1407, - -32768, - -32768, 2509, - -32768, 593, 3893, 2032, 641, 3893, 3893, 1407,
! 1464, - -32768, - -32768, 1351, 572, 393, 3893, - -32768, - -32768, - -32768, -
! -32768, 4156, 3893, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156,
! 4156, 4156, 4156, 4156, 4156, 4156, 4156, - -32768, - -32768, - -32768, - -32768,
! - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, - -32768, 3893, -
! -32768, 207, - -32768, - -32768, 3089, 212, 3893, - -32768, 2743, 574, - -32768,
! - -32768, 1698, - -32768, 1698, - -32768, - -32768, - -32768, - -32768, - -32768,
! 1407, - -32768, - -32768, 3893, 578, 573, - -32768, 575, 1407, - -32768, 39, 497,
! 3893, 581, 3893, 3893, 651, 845, 589, - -32768, - -32768, - -32768, 284, 646, -
! -32768, 3156, - -32768, - -32768, 2442, 600, 2442, 1577, - -32768, - -32768,
! 2296, - -32768, - -32768, - -32768, 3893, - -32768, 1407, 596, 251, - -32768, -
! -32768, 585, - -32768, 609, 602, 1972, 548, - -32768, - -32768, - -32768, -
! -32768, - -32768, - -32768, 299, 1698, - -32768, 604, 605, 603, 193, - -32768,
! 3893, - -32768, 2173, - -32768, - -32768, 622, 3893, 2173, 109, - -32768, -
! -32768, - -32768, 613, 611, 614, - 17, 624, - -32768, - -32768, - -32768, 618,
! 548, 621, - -32768, 615, 183, 1861, 4269, 3223, - -32768, - -32768, 341, -
! -32768, 623, 612, 640, - -32768, - -32768, 215, 2888, 410, 630, 159, 632, 412,
! 633, 635, 637, 648, 4003, - -32768, - -32768, 647, 650, 446, 103, 434, 407, 428,
! 417, 44, 44, 423, 423, 423, 423, 378, 378, 130, 130, - -32768, - -32768, -
! -32768, - -32768, - -32768, - -32768, - -32768, 652, - -32768, - -32768, 45, 223,
! 4269, - -32768, - -32768, 656, - -32768, - -32768, - -32768, 530, 3893, 657, -
! -32768, - -32768, - -32768, 658, 193, 300, 422, 3893, 427, 433, 649, 3290, 3357,
! 304, - -32768, - -32768, 660, 664, 661, - -32768, 662, - -32768, 2355, - -32768,
! - -32768, 667, 4269, - -32768, 671, - 6, 665, - -32768, - -32768, 137, - -32768,
! - -32768, - -32768, - -32768, 395, 670, 6, - -32768, - -32768, - -32768, -
! -32768, 666, - -32768, - -32768, - -32768, - -32768, 1000, - -32768, - -32768, -
! -32768, - -32768, 673, - -32768, - -32768, 674, 548, 58, - -32768, 669, 675, 694,
! 677, - -32768, 2587, - -32768, - -32768, - -32768, 2355, 1407, 3936, 757, -
! -32768, 675, 685, 2743, - -32768, - -32768, 3893, 3893, - -32768, - -32768, -
! -32768, 2743, 325, - -32768, - -32768, - -32768, - -32768, - -32768, 195, 63,
! 497, 2442, 440, 690, 2442, 3893, 3424, 305, 3491, 320, 3558, 529, - -32768, 692,
! 702, - -32768, 548, 17, - -32768, - -32768, 698, 548, 1407, 691, 695, 697, -
! -32768, - -32768, - -32768, - -32768, - -32768, - -32768, 700, - -32768, -
! -32768, - -32768, 703, 3893, - -32768, - -32768, 2888, 705, - -32768, 593, 699,
! - -32768, 340, - -32768, - -32768, - -32768, 710, - -32768, - -32768, 762, 714,
! 529, - -32768, 459, 2442, 469, 3625, 2442, 477, 3692, 3759, 321, 2173, 688, 715,
! - -32768, 2442, - -32768, - -32768, 713, - -32768, 667, 729, - -32768, - -32768,
! - -32768, - -32768, 222, - -32768, 717, 1407, - -32768, 2665, 1407, 2442, 566,
! 721, 726, - -32768, 2442, 2442, 504, - -32768, 2442, 2442, 520, 2442, 523, 3826,
! - 34, 1351, - -32768, - -32768, 609, 548, 723, 3893, - -32768, 727, - -32768,
! 525, - -32768, 3893, 722, 734, - -32768, - -32768, - -32768, - -32768, 2442, -
! -32768, - -32768, 2442, - -32768, 2442, 2442, 527, 3893, 964, - -32768, - -32768,
! - -32768, 747, 351, 737, - -32768, 327, 1351, - -32768, - -32768, - -32768, -
! -32768, - -32768, 2442, 333, 529, - -32768, 738, - -32768, - -32768, 1115, -
! -32768, - -32768, 964, - -32768, - -32768, 566, - -32768, 529, - -32768, -
! -32768, - -32768, 838, 841, - -32768}; static short Cyc_yypgoto[ 112u]={ -
! -32768, 102, - -32768, 534, - -32768, - -32768, - -32768, - -32768, - -32768, -
! 51, - 38, - 55, - -32768, 535, - 49, 269, - -32768, 87, - -32768, 49, - -32768,
! - -32768, 405, - -32768, - 52, - -32768, - 209, - -32768, - -32768, - -32768,
! 663, 655, 112, - -32768, - -32768, 342, - -32768, - -32768, 2, - -32768, -
! -32768, 31, - 37, - 121, - -32768, - -32768, 814, - -32768, - 79, - 27, - 111, -
! 344, 139, 307, 313, 586, - 382, - 87, - 276, 763, - -32768, - 190, - 155, - 353,
! - 272, - -32768, 429, - 77, - 61, - 100, - 15, - 118, - 31, - -32768, - -32768,
! - 26, - 226, - -32768, - 665, - 367, - -32768, - -32768, - 21, 608, - -32768,
! 297, - -32768, - -32768, 50, 163, - -32768, - 146, - 369, - 149, 561, 563, 577,
! 580, 559, 310, 126, 298, 308, - 133, 583, - -32768, - -32768, - -32768, - 327, -
! -32768, - -32768, 10}; static short Cyc_yytable[ 4372u]={ 115, 152, 79, 307, 113,
! 449, 259, 120, 127, 308, 60, 304, 523, 409, 410, 373, 412, 114, 262, 719, 121,
! 287, 144, 436, 474, 1, 326, 109, 137, 116, 297, 109, 65, 80, 519, 81, 760, 562,
! 258, 85, 322, 323, 218, 324, 60, 115, 208, 209, 210, 113, 129, 60, 211, 418, 216,
! 133, 60, 241, 219, 115, 357, 240, 106, 252, 110, 87, 327, 60, 535, 536, 124, 761,
! 120, 576, 207, 552, 587, 100, 61, 579, 405, 80, 586, 568, 31, 292, 80, 364, 253,
! 419, 31, 437, 490, 82, 319, 291, 779, 285, 406, 365, 290, 107, 60, 60, 60, 60,
! 286, 62, 291, 30, 334, 335, 281, 787, 366, 32, 701, 429, 217, 589, 293, 792, 34,
! 662, 294, 60, 794, 288, 390, 291, 277, 83, 141, 278, 141, 60, 298, 141, 270, 391,
! 80, 559, 85, 91, 433, 415, 254, 336, 337, 427, 474, 115, 293, 618, 141, 252, 430,
! 84, 293, - 116, 1, 60, 663, 624, 287, 386, 141, 141, 527, 467, 140, 30, 140, 88,
! 297, 140, 533, 32, 104, 467, 376, 105, 296, 145, 241, 241, 276, 241, 240, 240,
! 146, 240, 140, 393, 199, 200, 201, 202, 126, 400, 151, 403, 404, 415, 140, 140,
! 581, 30, 616, 512, 513, 514, 31, 32, 60, 447, 448, 215, 457, 89, 141, 320, 416,
! 107, 475, 60, 476, 266, 387, 151, 420, 257, 473, 90, 528, 254, - 159, 488, 489,
! 342, 471, 401, - 159, 125, 30, 402, 384, 343, 344, 661, 32, 60, 179, 198, 130,
! 484, 452, 34, 140, 675, 121, 62, 141, 241, 420, 128, 117, 240, 37, 38, 39, 118,
! 411, 92, 93, 119, 62, - 85, 30, 399, - 85, 468, 264, - 181, 32, 85, 469, 80, 80,
! - 181, 470, 602, 516, - 85, 94, 95, 528, 520, 85, 517, 140, 700, 528, 131, 521,
! 60, 703, 60, 358, 359, 360, 600, 449, 570, 432, 601, 16, 17, 18, 619, 60, 152,
! 415, 620, 31, 215, 87, 739, 141, 669, 280, 414, 141, 141, 141, 534, 132, 415,
! 134, 115, 257, 31, 141, 546, 141, 361, 426, 561, 669, 141, 141, 320, 141, 362,
! 363, 445, 115, 593, 613, 482, 113, 415, 486, 141, 141, 320, 140, 135, 375, 594,
! 140, 140, 140, 556, 553, 704, 555, 497, 549, 60, 140, 60, 140, 136, 415, 557,
! 528, 140, 140, 592, 140, 150, 281, 764, 628, 460, 461, 151, 639, 689, 629, 140,
! 140, 203, 415, 415, 204, 151, 37, 38, 39, 668, 151, 522, 692, 731, 790, 220, 471,
! 275, 415, 415, 793, 577, 621, 293, 141, 415, 580, 678, 668, 281, 783, 415, 141,
! 267, 714, 271, 786, 540, 715, 542, 543, 669, 547, 60, 279, 781, 645, 466, 270,
! 415, 671, 291, 80, 303, 650, 141, 672, 80, 504, 505, 506, 507, 140, 309, 141,
! 299, 300, 375, 677, 525, 140, 526, 310, 141, 487, 1, 311, 711, 652, 653, 654,
! 569, 493, 332, 333, 338, 339, 215, 340, 341, 492, 415, 60, 140, 312, 215, 313,
! 646, 314, 115, 535, 536, 140, 252, 321, 762, 1, 603, 415, 607, 415, 140, 325,
! 605, 328, 141, 141, 515, 151, 630, 415, 330, 493, 668, 632, 415, 375, 151, 644,
! 1, 633, 415, 285, 778, 420, 571, 151, 683, 415, 60, 331, 286, 784, 37, 38, 39,
! 627, 329, 115, 695, 696, 367, 113, 140, 140, 789, 720, 415, 791, 30, 384, 452,
! 368, 493, 370, 32, 722, 415, 96, 493, 389, 141, 34, 679, 726, 415, 558, 207, 151,
! 377, 101, 102, 103, 37, 38, 39, 745, 746, 378, 631, 30, 737, 80, 636, 638, 385,
! 32, 682, 388, - 178, 685, 752, 415, 295, - 178, - 178, 392, 141, 394, 140, - 178,
! 395, 286, 30, 37, 38, 39, 755, 415, 32, 757, 415, 768, 300, 776, 415, 34, 743,
! 680, 681, 396, 596, 397, 380, 508, 509, 407, 37, 38, 39, 502, 503, 375, 408, 413,
! 140, 510, 511, 205, 423, 416, 424, 428, 141, 721, 265, 435, 725, 440, 441, 431,
! 443, 326, 442, 485, 459, 735, 444, 458, 491, 530, 531, 732, 283, 284, 524, 241,
! 541, 532, 544, 240, 548, 686, 688, 744, 691, 550, 694, 554, 750, 751, 140, 560,
! 753, 754, 563, 756, 564, 141, 566, 572, 574, 573, 80, 241, 578, 1, 583, 240, 584,
! 598, 585, 31, 241, 710, 588, 670, 240, 590, 772, 597, 591, 773, 599, 774, 775,
! 241, 604, 606, 241, 240, 608, 609, 240, 610, 302, 140, 724, 305, 305, 728, 730,
! 611, 785, 614, 634, 316, 317, 615, 617, 622, 625, 626, 640, 305, 305, 641, 305,
! 642, 257, 141, 151, 375, 141, 643, 647, 649, 655, 612, 66, 659, 660, 657, 375,
! 305, 664, 676, 665, 666, 759, 673, 375, 674, 684, 698, 699, 702, 766, 717, 705,
! 30, 733, 706, 769, 707, 713, 32, 708, 140, - 207, 709, 140, 712, 295, - 207, -
! 207, 716, 718, 777, 734, - 207, 736, 286, 738, 740, 748, 30, 68, 749, 69, 70,
! 765, 32, 741, 767, 770, 151, 446, 771, 71, 375, 780, 72, 73, 782, 788, 796, 447,
! 448, 797, 74, 656, 483, 575, 75, 76, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13,
! 14, 15, 16, 17, 18, 19, 20, 372, 379, 21, 154, 155, 123, 623, 651, 763, 648, 472,
! 375, 582, 261, 658, 22, 156, 23, 157, 456, 496, 158, 24, 501, 498, 0, 27, 28,
! 159, 160, 0, 0, 161, 29, 0, 162, 163, 0, 164, 499, 165, 166, 305, 500, 305, 305,
! 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 0, 0,
! 30, 167, 168, 169, 170, 31, 32, 33, 0, 545, 0, 0, 0, 171, 0, 0, 35, 238, 0, 0, 0,
! 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 305, 177, 178, 0, 2, 3, 4, 111, 6, 7,
! 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 695, 696, 21, 154, 155, 221, 0,
! 222, 223, 224, 225, 226, 227, 228, 229, 22, 156, 23, 157, 230, 0, 158, 24, 231,
! 0, 0, 27, 28, 159, 160, 232, 233, 161, 29, 234, 162, 163, 0, 164, 305, 165, 166,
! 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 66, 345, 346, 347, 348, 349, 350, 351, 352, 353,
! 354, 235, 167, 168, 169, 170, 31, 32, 33, 0, 236, 112, 0, 0, 171, 0, 355, 35,
! 238, 0, 0, 0, 0, 0, 0, 173, 305, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 30, 68,
! 0, 69, 70, 0, 32, 0, 0, 0, 0, 0, 0, 71, 0, 0, 72, 73, 0, 0, 0, 447, 448, 0, 74,
! 0, 0, 0, 75, 76, 305, 0, 0, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
! 17, 18, 19, 20, 745, 746, 21, 154, 155, 221, 0, 222, 223, 224, 225, 226, 227,
! 228, 229, 22, 156, 23, 157, 230, 0, 158, 24, 231, 0, 0, 27, 28, 159, 160, 232,
! 233, 161, 29, 234, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 305, 235, 167, 168, 169, 170, 31, 32, 33, 0, 236,
! 112, 0, 0, 171, 0, 0, 35, 238, 0, 0, 0, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0,
! 0, 0, 177, 178, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 0, 0, 21, 154, 155, 221, 0, 222, 223, 224, 225, 226, 227, 228, 229, 22, 156,
! 23, 157, 230, 0, 158, 24, 231, 0, 0, 27, 28, 159, 160, 232, 233, 161, 29, 234,
! 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 235, 167, 168, 169, 170, 31, 32, 33, 0, 236, 112, 237, 0, 171, 0, 0,
! 35, 238, 0, 0, 0, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 2, 3,
! 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 21, 154,
! 155, 221, 0, 222, 223, 224, 225, 226, 227, 228, 229, 22, 156, 23, 157, 230, 0,
! 158, 24, 231, 0, 0, 27, 28, 159, 160, 232, 233, 161, 29, 234, 162, 163, 0, 164,
! 0, 165, 166, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 0, 0,
! 0, 0, 235, 167, 168, 169, 170, 31, 32, 33, 22, 236, 112, 0, 0, 171, 0, 0, 35,
! 238, 0, 27, 28, 0, 0, 0, 173, 0, 29, 174, 175, 176, 0, 0, 0, 0, 177, 178, 7, 8,
  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 154, 155, 0, 0, 0, 0, 0,
! 0, 31, 0, 33, 0, 22, 156, 0, 157, 0, 0, 158, 35, 36, 0, 0, 27, 28, 159, 160, 0,
! 0, 161, 29, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 31, 32, 33, 0, 0, 318, 0, 0,
! 171, 0, 0, 35, 238, 0, 0, 0, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177,
! 178, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 154, 155, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 156, 0, 157, 0, 0, 158, 0, 0, 0, 0, 27, 28, 159,
! 160, 0, 0, 161, 29, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 7, 8, 9,
! 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 30, 167, 168, 169, 170, 31, 32,
! 33, 0, 0, 0, 0, 0, 171, 22, 0, 35, 238, 0, 0, 0, 0, 0, 0, 173, 27, 28, 174, 175,
! 176, 0, 0, 29, 0, 177, 178, - 8, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
! 14, 15, 16, 17, 18, 19, 20, 0, 255, 21, 0, 256, 0, 0, 0, 0, 31, 0, 33, 0, 257, 0,
! 22, 0, 23, 0, 0, 35, 36, 24, 0, 25, 26, 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0,
! 0, 0, 31, 32, 33, 0, 0, 0, - 8, 0, 34, 0, 0, 35, 36, 0, 0, 0, 0, 0, 0, 37, 38,
! 39, - 8, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 23, 0, 0, 0, 0, 24, 0,
! 25, 26, 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
! 17, 18, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 22, 0, 31, 32, 33,
! 0, 0, 0, 0, 0, 34, 27, 28, 35, 36, 0, 0, 0, 29, 0, 0, 37, 38, 39, 1, 0, 2, 3, 4,
! 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 255, 0, 21, 0, 0, 0,
! 0, 0, 31, 0, 33, 0, 257, 0, 0, 22, 0, 23, 0, 35, 36, 0, 24, 0, 25, 26, 27, 28, 0,
! 0, 0, 0, 0, 29, 0, 0, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 22, 0, 31, 32, 33, 0, 0, 0, - 8, 0,
! 34, 27, 28, 35, 36, 0, 0, 0, 29, 0, 0, 37, 38, 39, 1, 0, 2, 3, 4, 111, 6, 7, 8,
! 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 567, 0, 21, 0, 0, 0, 0, 0, 31, 0,
! 33, 0, 0, 0, 0, 22, 0, 0, 0, 35, 36, 0, 24, 0, 0, 0, 27, 28, 0, 0, 1, 0, 0, 29,
! 0, 0, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 30, 0, 0, 22, 0, 31, 32, 33, 0, 0, 0, 0, 0, 34, 27, 28, 35, 36,
! 0, 0, 0, 29, 0, 0, 37, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 66, 0, 0, 255, 0, 0, 30, 0, 0, 0, 0, 31, 32, 33, 0, 257, 0, 0, 0, 295, - 159,
! 0, 35, 36, 0, 0, - 159, 0, 286, 0, 37, 38, 39, 7, 8, 9, 10, 11, 12, 13, 14, 15,
! 16, 17, 18, 19, 20, 67, 68, 66, 69, 70, 0, 32, 0, 0, 0, 0, 0, 0, 71, 0, 22, 72,
! 73, 0, 0, 0, 0, 0, 0, 74, 0, 27, 28, 75, 76, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 30, 68, 0, 69, 70, 0, 32, 0, 0, 0, 0, 255, 0, 71, 0, 0, 72,
! 73, 0, 31, 0, 33, 0, 257, 74, 0, 0, 285, 75, 76, 35, 36, 0, 0, 0, 0, 286, 0, 37,
! 38, 39, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0,
! 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 23, 0, 0, 0, 0, 24, 0, 0, 0,
! 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 2, 3, 4, 111, 6, 7, 8, 9, 10, 11,
! 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 21, 0, 0, 0, 0, 0, 0, 31, 0, 33, 0, 0,
! 112, 22, 205, 23, 0, 0, 35, 36, 24, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0,
  2, 3, 4, 111, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 0, 21,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 33, 22, 0, 112, 0, 0, 0, 0, 24, 35, 36, 0, 27,
! 28, 0, 0, 0, 0, 0, 29, 154, 155, 221, 0, 222, 223, 224, 225, 226, 227, 228, 229,
! 0, 156, 0, 157, 230, 0, 158, 0, 231, 0, 0, 0, 0, 159, 160, 232, 233, 161, 0, 234,
! 162, 163, 31, 164, 33, 165, 166, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 235, 167, 168, 169, 170, 0, 32, 154, 155, 236, 112, 0, 0, 171,
! 477, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160,
! 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 0, 0, 306,
! 478, 0, 171, 0, 0, 0, 172, 154, 155, 0, 447, 448, 0, 173, 0, 0, 174, 175, 176, 0,
! 156, 0, 157, 177, 178, 158, 0, 0, 0, 0, 0, 0, 159, 160, 0, 0, 161, 0, 0, 162,
! 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 0, 0, 306, 667, 0, 171, 0, 0, 0, 172,
  154, 155, 0, 447, 448, 0, 173, 0, 0, 174, 175, 176, 0, 156, 0, 157, 177, 178,
  158, 0, 0, 0, 0, 0, 0, 159, 160, 0, 0, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169,
! 170, 0, 32, 0, 0, 0, 306, 742, 0, 171, 0, 0, 0, 172, 154, 155, 0, 447, 448, 0,
! 173, 0, 0, 174, 175, 176, 0, 156, 0, 157, 177, 178, 158, 0, 0, 0, 0, 0, 0, 159,
! 160, 0, 0, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 0, 0, 306,
! 0, 0, 171, 0, 0, 0, 172, 154, 155, 0, 447, 448, 0, 173, 0, 0, 174, 175, 176, 0,
! 156, 0, 157, 177, 178, 158, 0, 0, 0, 0, 0, 0, 159, 160, 0, 0, 161, 0, 0, 162,
  163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 0, 0, 0, 172,
! 0, 0, 156, 0, 157, 263, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178,
  161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 306, 0, 0,
! 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159,
! 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155,
! 398, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175,
! 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0,
! 32, 154, 155, 0, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 465, 173, 158, 0,
  174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165,
  166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168,
! 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 518, 0, 0, 172, 0, 0, 156, 0, 157, 0,
  173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0,
  164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 551, 0, 0, 172, 0, 0,
  156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0,
  162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 0, 0, 0,
! 172, 0, 0, 156, 0, 157, 595, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177,
! 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 635, 0, 0,
! 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0,
! 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154,
! 155, 637, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174,
! 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169,
! 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 687, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173,
! 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0,
! 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167,
! 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 690, 0, 0, 172, 0, 0, 156, 0,
! 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162,
! 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 693, 0, 0, 0, 171, 0, 0, 0,
  172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178,
  161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171,
! 723, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0, 0, 159, 160,
  177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0,
! 0, 0, 171, 727, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0, 174, 175, 176, 0,
  0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32,
! 154, 155, 0, 0, 0, 0, 171, 729, 0, 0, 172, 0, 0, 156, 0, 157, 0, 173, 158, 0,
  174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0, 164, 0, 165,
  166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168,
! 169, 170, 0, 32, 154, 155, 0, 0, 0, 0, 171, 758, 0, 0, 172, 0, 0, 156, 0, 157, 0,
  173, 158, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161, 0, 0, 162, 163, 0,
! 164, 0, 165, 166, 0, 0, 0, 0, 154, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
! 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 159, 160, 0, 0, 161, 171, 0, 0, 163, 172,
! 164, 0, 165, 166, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0, 0, 177, 178, 0, 0, 0,
! 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 306, 0, 0, 171, 0, 0, 0,
! 172, 0, 0, 156, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 159, 160, 177, 178, 161,
! 0, 0, 0, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 154, 155, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 156, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0, 159, 160, 612, 0, 161,
! 171, 0, 0, 163, 172, 164, 0, 165, 166, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 0,
! 0, 177, 178, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 154, 155, 0, 0,
! 0, 0, 301, 0, 0, 0, 172, 0, 0, 156, 0, 0, 0, 173, 0, 0, 174, 175, 176, 0, 0, 159,
! 160, 177, 178, 161, 0, 0, 0, 163, 0, 164, 0, 165, 166, 0, 0, 0, 0, 154, 155, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 30, 167, 168, 169, 170, 0, 32, 0,
! 159, 160, 0, 0, 161, 315, 0, 0, 163, 172, 164, 0, 165, 166, 0, 0, 173, 0, 0, 174,
! 175, 176, 0, 0, 0, 0, 177, 178, 0, 0, 0, 0, 0, 0, 0, 30, 167, 168, 169, 170, 0,
! 32, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 173, 0, 0, 174, 175,
! 176, 0, 0, 0, 0, 177, 178, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 27, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
! 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 33, 0, 0, 139, 0, 0, 0,
! 0, 0, 35, 36}; static short Cyc_yycheck[ 4372u]={ 55, 88, 23, 158, 55, 277, 117,
! 56, 63, 158, 0, 157, 365, 239, 240, 205, 242, 55, 118, 684, 57, 142, 83, 17, 300,
! 1, 71, 54, 80, 55, 151, 58, 22, 23, 361, 25, 70, 419, 117, 103, 173, 174, 106,
! 176, 34, 100, 101, 102, 103, 100, 71, 41, 104, 59, 106, 76, 46, 112, 110, 114,
! 193, 112, 52, 114, 54, 34, 111, 57, 5, 6, 60, 105, 121, 442, 100, 402, 458, 46,
! 87, 448, 85, 71, 99, 427, 90, 65, 76, 83, 114, 95, 90, 85, 318, 85, 171, 112,
! 761, 98, 103, 95, 104, 101, 92, 93, 94, 95, 107, 93, 112, 85, 66, 67, 139, 778,
! 110, 91, 99, 65, 108, 463, 100, 786, 98, 65, 104, 115, 791, 142, 87, 112, 95,
! 103, 83, 98, 85, 125, 151, 88, 128, 98, 130, 417, 103, 41, 265, 100, 115, 103,
! 104, 260, 426, 206, 100, 108, 105, 206, 104, 84, 100, 96, 1, 151, 104, 532, 285,
! 217, 117, 118, 377, 287, 83, 85, 85, 98, 295, 88, 385, 91, 92, 297, 206, 95, 151,
! 85, 239, 240, 136, 242, 239, 240, 92, 242, 105, 224, 92, 93, 94, 95, 98, 230, 88,
! 232, 233, 100, 117, 118, 97, 85, 105, 342, 343, 344, 90, 91, 204, 106, 107, 105,
! 279, 95, 171, 171, 85, 101, 301, 215, 303, 125, 218, 117, 257, 94, 293, 95, 380,
! 204, 99, 314, 315, 109, 289, 94, 105, 95, 85, 98, 215, 117, 118, 593, 91, 241,
! 89, 90, 98, 310, 277, 98, 171, 612, 297, 93, 213, 318, 291, 95, 98, 318, 109,
! 110, 111, 103, 241, 94, 95, 107, 93, 95, 85, 229, 98, 98, 119, 94, 91, 103, 103,
! 277, 278, 100, 107, 481, 85, 98, 94, 95, 442, 85, 103, 92, 213, 645, 448, 85, 92,
! 295, 650, 297, 61, 62, 63, 96, 584, 434, 265, 100, 17, 18, 19, 96, 310, 408, 100,
! 100, 90, 213, 295, 105, 279, 601, 96, 94, 283, 284, 285, 387, 86, 100, 94, 394,
! 94, 90, 293, 394, 295, 98, 100, 96, 620, 300, 301, 301, 303, 106, 107, 94, 411,
! 468, 491, 309, 411, 100, 312, 314, 315, 315, 279, 100, 205, 469, 283, 284, 285,
! 411, 405, 651, 407, 327, 94, 369, 293, 371, 295, 97, 100, 411, 532, 300, 301,
! 468, 303, 99, 419, 737, 94, 283, 284, 285, 94, 94, 100, 314, 315, 94, 100, 100,
! 100, 295, 109, 110, 111, 601, 300, 363, 94, 94, 783, 87, 467, 85, 100, 100, 789,
! 444, 524, 100, 377, 100, 449, 104, 620, 458, 105, 100, 385, 98, 96, 99, 105, 389,
! 100, 391, 392, 715, 394, 435, 98, 96, 559, 286, 440, 100, 607, 112, 444, 98, 567,
! 408, 607, 449, 334, 335, 336, 337, 377, 98, 417, 99, 100, 306, 616, 369, 385,
! 371, 98, 426, 313, 1, 98, 669, 85, 86, 87, 434, 321, 68, 69, 64, 65, 377, 112,
! 113, 99, 100, 484, 408, 98, 385, 98, 560, 98, 556, 5, 6, 417, 556, 98, 733, 1,
! 99, 100, 99, 100, 426, 96, 484, 70, 468, 469, 356, 408, 99, 100, 116, 361, 715,
! 99, 100, 365, 417, 556, 1, 99, 100, 98, 761, 563, 435, 426, 99, 100, 531, 114,
! 107, 770, 109, 110, 111, 538, 115, 605, 22, 23, 96, 605, 468, 469, 783, 99, 100,
! 786, 85, 531, 584, 96, 402, 96, 91, 99, 100, 94, 408, 98, 524, 98, 627, 99, 100,
! 415, 605, 468, 95, 47, 48, 49, 109, 110, 111, 22, 23, 96, 541, 85, 704, 584, 545,
! 546, 95, 91, 630, 95, 94, 633, 99, 100, 98, 99, 100, 98, 560, 98, 524, 105, 85,
! 107, 85, 109, 110, 111, 99, 100, 91, 99, 100, 99, 100, 99, 100, 98, 716, 628,
! 629, 94, 470, 94, 105, 338, 339, 105, 109, 110, 111, 332, 333, 481, 98, 96, 560,
! 340, 341, 97, 99, 85, 105, 99, 606, 687, 122, 96, 690, 100, 96, 108, 99, 71, 97,
! 25, 96, 699, 100, 100, 99, 94, 100, 695, 140, 141, 103, 733, 98, 105, 30, 733,
! 94, 634, 635, 717, 637, 42, 639, 90, 722, 723, 606, 98, 726, 727, 112, 729, 90,
! 651, 99, 98, 100, 99, 695, 761, 85, 1, 96, 761, 100, 100, 99, 90, 770, 666, 99,
! 606, 770, 99, 752, 99, 108, 755, 85, 757, 758, 783, 99, 98, 786, 783, 100, 99,
! 786, 99, 154, 651, 689, 157, 158, 692, 693, 96, 776, 99, 98, 165, 166, 100, 99,
! 96, 96, 96, 95, 173, 174, 94, 176, 99, 94, 713, 651, 601, 716, 104, 96, 103, 99,
! 95, 38, 99, 99, 108, 612, 193, 108, 615, 85, 103, 731, 25, 620, 99, 95, 94, 85,
! 90, 739, 28, 100, 85, 105, 99, 745, 99, 98, 91, 99, 713, 94, 99, 716, 99, 98, 99,
! 100, 98, 95, 760, 96, 105, 100, 107, 86, 99, 96, 85, 86, 94, 88, 89, 100, 91,
! 713, 99, 105, 716, 96, 96, 98, 669, 86, 101, 102, 99, 99, 0, 106, 107, 0, 109,
! 574, 310, 440, 113, 114, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
! 19, 20, 21, 204, 213, 24, 25, 26, 58, 531, 567, 736, 563, 291, 715, 450, 117,
! 584, 37, 38, 39, 40, 278, 326, 43, 44, 331, 328, - 1, 48, 49, 50, 51, - 1, - 1,
! 54, 55, - 1, 57, 58, - 1, 60, 329, 62, 63, 326, 330, 328, 329, 330, 331, 332,
! 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, - 1, - 1, 85, 86, 87,
! 88, 89, 90, 91, 92, - 1, 94, - 1, - 1, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, -
! 1, - 1, - 1, - 1, 109, - 1, - 1, 112, 113, 114, - 1, - 1, - 1, 380, 119, 120, -
! 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
! 24, 25, 26, 27, - 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, - 1, 43,
! 44, 45, - 1, - 1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, - 1, 60, 442, 62,
! 63, - 1, - 1, - 1, 448, - 1, - 1, - 1, - 1, - 1, - 1, 38, 72, 73, 74, 75, 76, 77,
! 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, - 1, 94, 95, - 1, - 1, 98, - 1,
! 97, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1, 109, 491, - 1, 112, 113, 114, - 1, -
! 1, - 1, - 1, 119, 120, 85, 86, - 1, 88, 89, - 1, 91, - 1, - 1, - 1, - 1, - 1, -
! 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, 106, 107, - 1, 109, - 1, - 1, - 1, 113,
! 114, 532, - 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 21, 22, 23, 24, 25, 26, 27, - 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, - 1, 43, 44, 45, - 1, - 1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, -
! 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 607,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 616, 85, 86, 87, 88, 89, 90, 91, 92, - 1,
! 94, 95, - 1, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1, 109, - 1,
  - 1, 112, 113, 114, - 1, - 1, - 1, - 1, 119, 120, 3, 4, 5, 6, 7, 8, 9, 10, 11,
  12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, 25, 26, 27, - 1, 29, 30,
  31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, - 1, 43, 44, 45, - 1, - 1, 48, 49,
  50, 51, 52, 53, 54, 55, 56, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, 85, 86, 87, 88, 89, 90, 91, 92, - 1, 94, 95, 96, - 1, 98, - 1, - 1, 101, 102,
! - 1, - 1, - 1, - 1, - 1, - 1, 109, - 1, - 1, 112, 113, 114, - 1, - 1, - 1, - 1,
! 119, 120, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, -
! 1, - 1, 24, 25, 26, 27, - 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
! - 1, 43, 44, 45, - 1, - 1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, - 1, 60,
! - 1, 62, 63, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, 90, 91, 92, 37, 94, 95, - 1, - 1, 98, -
! 1, - 1, 101, 102, - 1, 48, 49, - 1, - 1, - 1, 109, - 1, 55, 112, 113, 114, - 1,
! - 1, - 1, - 1, 119, 120, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, -
! 1, - 1, - 1, 25, 26, - 1, - 1, - 1, - 1, - 1, - 1, 90, - 1, 92, - 1, 37, 38, - 1,
! 40, - 1, - 1, 43, 101, 102, - 1, - 1, 48, 49, 50, 51, - 1, - 1, 54, 55, - 1, 57,
! 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, 90, 91, 92,
! - 1, - 1, 95, - 1, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1,
! 109, - 1, - 1, 112, 113, 114, - 1, - 1, - 1, - 1, 119, 120, 8, 9, 10, 11, 12, 13,
! 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, - 1, 25, 26, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, 37, 38, - 1, 40, - 1, - 1, 43, - 1, - 1, - 1, - 1, 48,
! 49, 50, 51, - 1, - 1, 54, 55, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1,
! - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, 85, 86,
! 87, 88, 89, 90, 91, 92, - 1, - 1, - 1, - 1, - 1, 98, 37, - 1, 101, 102, - 1, - 1,
! - 1, - 1, - 1, - 1, 109, 48, 49, 112, 113, 114, - 1, - 1, 55, - 1, 119, 120, 0,
! 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1,
! 82, 24, - 1, 85, - 1, - 1, - 1, - 1, 90, - 1, 92, - 1, 94, - 1, 37, - 1, 39, - 1,
! - 1, 101, 102, 44, - 1, 46, 47, 48, 49, - 1, - 1, - 1, - 1, - 1, 55, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, - 1, - 1, - 1, - 1, 90,
! 91, 92, - 1, - 1, - 1, 96, - 1, 98, - 1, - 1, 101, 102, - 1, - 1, - 1, - 1, - 1,
! - 1, 109, 110, 111, 0, 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
! 17, 18, 19, 20, 21, - 1, - 1, 24, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, 37, - 1, 39, - 1, - 1, - 1, - 1, 44, - 1, 46, 47, 48, 49, - 1, - 1,
! - 1, - 1, - 1, 55, - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
! 20, 21, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, - 1, - 1,
! 37, - 1, 90, 91, 92, - 1, - 1, - 1, - 1, - 1, 98, 48, 49, 101, 102, - 1, - 1, -
! 1, 55, - 1, - 1, 109, 110, 111, 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
! 15, 16, 17, 18, 19, 20, 21, 82, - 1, 24, - 1, - 1, - 1, - 1, - 1, 90, - 1, 92, -
! 1, 94, - 1, - 1, 37, - 1, 39, - 1, 101, 102, - 1, 44, - 1, 46, 47, 48, 49, - 1,
! - 1, - 1, - 1, - 1, 55, - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
! 19, 20, 21, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, - 1,
! - 1, 37, - 1, 90, 91, 92, - 1, - 1, - 1, 96, - 1, 98, 48, 49, 101, 102, - 1, - 1,
! - 1, 55, - 1, - 1, 109, 110, 111, 1, - 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
! 14, 15, 16, 17, 18, 19, 20, 21, 82, - 1, 24, - 1, - 1, - 1, - 1, - 1, 90, - 1,
! 92, - 1, - 1, - 1, - 1, 37, - 1, - 1, - 1, 101, 102, - 1, 44, - 1, - 1, - 1, 48,
! 49, - 1, - 1, 1, - 1, - 1, 55, - 1, - 1, - 1, 8, 9, 10, 11, 12, 13, 14, 15, 16,
! 17, 18, 19, 20, 21, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! 85, - 1, - 1, 37, - 1, 90, 91, 92, - 1, - 1, - 1, - 1, - 1, 98, 48, 49, 101, 102,
! - 1, - 1, - 1, 55, - 1, - 1, 109, 110, 111, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 38, - 1, - 1, 82, - 1, - 1,
! 85, - 1, - 1, - 1, - 1, 90, 91, 92, - 1, 94, - 1, - 1, - 1, 98, 99, - 1, 101,
! 102, - 1, - 1, 105, - 1, 107, - 1, 109, 110, 111, 8, 9, 10, 11, 12, 13, 14, 15,
! 16, 17, 18, 19, 20, 21, 85, 86, 38, 88, 89, - 1, 91, - 1, - 1, - 1, - 1, - 1, -
! 1, 98, - 1, 37, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1, 109, - 1, 48, 49, 113,
! 114, - 1, - 1, - 1, 55, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, 85, 86, - 1, 88, 89, - 1, 91, - 1, - 1, - 1, - 1, 82, - 1, 98,
! - 1, - 1, 101, 102, - 1, 90, - 1, 92, - 1, 94, 109, - 1, - 1, 98, 113, 114, 101,
! 102, - 1, - 1, - 1, - 1, 107, - 1, 109, 110, 111, 3, 4, 5, 6, 7, 8, 9, 10, 11,
! 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, - 1, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, 37, - 1, 39, - 1, - 1, - 1, - 1, 44, - 1, - 1,
! - 1, 48, 49, - 1, - 1, - 1, - 1, - 1, 55, - 1, - 1, - 1, - 1, - 1, - 1, 3, 4, 5,
! 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, - 1, -
! 1, - 1, - 1, - 1, - 1, 90, - 1, 92, - 1, - 1, 95, 37, 97, 39, - 1, - 1, 101, 102,
! 44, - 1, - 1, - 1, 48, 49, - 1, - 1, - 1, - 1, - 1, 55, - 1, - 1, - 1, 3, 4, 5,
! 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, - 1, - 1, 24, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 90, - 1, 92, 37, - 1, 95, - 1, - 1, - 1, -
! 1, 44, 101, 102, - 1, 48, 49, - 1, - 1, - 1, - 1, - 1, 55, 25, 26, 27, - 1, 29,
! 30, 31, 32, 33, 34, 35, 36, - 1, 38, - 1, 40, 41, - 1, 43, - 1, 45, - 1, - 1, -
! 1, - 1, 50, 51, 52, 53, 54, - 1, 56, 57, 58, 90, 60, 92, 62, 63, - 1, - 1, - 1,
! - 1, - 1, - 1, 101, 102, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, 94, 95, - 1, - 1, 98, 32, - 1, -
! 1, 102, - 1, - 1, 38, - 1, 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50,
! 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, -
! 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
! 1, 85, 86, 87, 88, 89, - 1, 91, - 1, - 1, - 1, 95, 96, - 1, 98, - 1, - 1, - 1,
! 102, 25, 26, - 1, 106, 107, - 1, 109, - 1, - 1, 112, 113, 114, - 1, 38, - 1, 40,
! 119, 120, 43, - 1, - 1, - 1, - 1, - 1, - 1, 50, 51, - 1, - 1, 54, - 1, - 1, 57,
! 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, -
! 1, - 1, - 1, 95, 96, - 1, 98, - 1, - 1, - 1, 102, 25, 26, - 1, 106, 107, - 1,
! 109, - 1, - 1, 112, 113, 114, - 1, 38, - 1, 40, 119, 120, 43, - 1, - 1, - 1, - 1,
! - 1, - 1, 50, 51, - 1, - 1, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, - 1, - 1, - 1, 95, 96, - 1, 98, - 1,
! - 1, - 1, 102, 25, 26, - 1, 106, 107, - 1, 109, - 1, - 1, 112, 113, 114, - 1, 38,
! - 1, 40, 119, 120, 43, - 1, - 1, - 1, - 1, - 1, - 1, 50, 51, - 1, - 1, 54, - 1,
! - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89,
! - 1, 91, - 1, - 1, - 1, 95, - 1, - 1, 98, - 1, - 1, - 1, 102, 25, 26, - 1, 106,
! 107, - 1, 109, - 1, - 1, 112, 113, 114, - 1, 38, - 1, 40, 119, 120, 43, - 1, - 1,
! - 1, - 1, - 1, - 1, 50, 51, - 1, - 1, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, - 1, - 1, - 1, - 1,
! 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40, 108, 109, 43, - 1, 112, 113, 114,
  - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, - 1, 95, - 1, - 1, 98, - 1,
  - 1, - 1, 102, - 1, - 1, 38, - 1, 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1,
  50, 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26, 94, - 1, - 1, - 1, 98, - 1, - 1, - 1,
! 102, - 1, - 1, 38, - 1, 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51,
  119, 120, 54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, -
  1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85,
! 86, 87, 88, 89, - 1, 91, 25, 26, - 1, - 1, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1,
! - 1, 38, - 1, 40, 108, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120,
  54, - 1, - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, -
  1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87,
  88, 89, - 1, 91, 25, 26, - 1, - 1, - 1, - 1, 98, 99, - 1, - 1, 102, - 1, - 1, 38,
  - 1, 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1,
  - 1, 57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89,
! - 1, 91, 25, 26, - 1, - 1, - 1, - 1, 98, 99, - 1, - 1, 102, - 1, - 1, 38, - 1,
! 40, - 1, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1,
  57, 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1,
! 91, 25, 26, - 1, - 1, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40,
! 108, 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57,
! 58, - 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
! - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91,
! 25, 26, 94, - 1, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40, - 1,
! 109, 43, - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57, 58, -
! 1, 60, - 1, 62, 63, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
  - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, 85, 86, 87, 88, 89, - 1, 91, 25, 26,
  94, - 1, - 1, - 1, 98, - 1, - 1, - 1, 102, - 1, - 1, 38, - 1, 40, - 1, 109, 43,
  - 1, 112, 113, 114, - 1, - 1, 50, 51, 119, 120, 54, - 1, - 1, 57, 58, - 1, 60, -
***************
*** 2974,3523 ****
  Cyc_yynerrs= 0; struct _tuple18{ void* f1; void* f2; } ; struct _tuple19{ struct
  Cyc_List_List* f1; struct Cyc_Absyn_Exp* f2; } ; int Cyc_yyparse(){ int yystate;
  int yyn= 0; int yyerrstatus; int yychar1= 0; int yyssp_offset; short* yyss=(
! short*)({ unsigned int _temp3186= 10000u; short* _temp3187=( short*)
! _cycalloc_atomic( _check_times( sizeof( short), _temp3186));{ unsigned int
! _temp3188= _temp3186; unsigned int i; for( i= 0; i <  _temp3188; i ++){
! _temp3187[ i]=( short) 0;}}; _temp3187;}); int yyvsp_offset; void** yyvs=( void**)({
! unsigned int _temp3183= 10000u; void** _temp3184=( void**) _cycalloc(
! _check_times( sizeof( void*), _temp3183));{ unsigned int _temp3185= _temp3183;
! unsigned int i; for( i= 0; i <  _temp3185; i ++){ _temp3184[ i]= Cyc_yylval;}};
! _temp3184;}); int yylsp_offset; struct Cyc_Yyltype* yyls=( struct Cyc_Yyltype*)({
! unsigned int _temp3180= 10000u; struct Cyc_Yyltype* _temp3181=( struct Cyc_Yyltype*)
! _cycalloc_atomic( _check_times( sizeof( struct Cyc_Yyltype), _temp3180));{
! unsigned int _temp3182= _temp3180; unsigned int i; for( i= 0; i <  _temp3182; i
! ++){ _temp3181[ i]= Cyc_yynewloc();}}; _temp3181;}); int yystacksize= 10000;
  void* yyval= Cyc_yylval; int yylen; yystate= 0; yyerrstatus= 0; Cyc_yynerrs= 0;
  Cyc_yychar= - 2; yyssp_offset= - 1; yyvsp_offset= 0; yylsp_offset= 0; yynewstate:
  yyss[ _check_known_subscript_notnull( 10000u, ++ yyssp_offset)]=( short) yystate;
  if( yyssp_offset >=  yystacksize -  1){ if( yystacksize >=  10000){ Cyc_yyerror(
  _tag_arr("parser stack overflow", sizeof( unsigned char), 22u));( int) _throw((
  void*) Cyc_Yystack_overflow);}} goto yybackup; yybackup: yyn=( int) Cyc_yypact[
! _check_known_subscript_notnull( 801u, yystate)]; if( yyn ==  - 32768){ goto
  yydefault;} if( Cyc_yychar ==  - 2){ Cyc_yychar= Cyc_yylex();} if( Cyc_yychar <= 
  0){ yychar1= 0; Cyc_yychar= 0;} else{ yychar1=( Cyc_yychar >  0? Cyc_yychar <= 
  348: 0)?( int) Cyc_yytranslate[ _check_known_subscript_notnull( 349u, Cyc_yychar)]:
! 233;} yyn += yychar1; if(( yyn <  0? 1: yyn >  4329)? 1: Cyc_yycheck[
! _check_known_subscript_notnull( 4330u, yyn)] !=  yychar1){ goto yydefault;} yyn=(
! int) Cyc_yytable[ _check_known_subscript_notnull( 4330u, yyn)]; if( yyn <  0){
  if( yyn ==  - 32768){ goto yyerrlab;} yyn= - yyn; goto yyreduce;} else{ if( yyn
! ==  0){ goto yyerrlab;}} if( yyn ==  800){ return 0;} if( Cyc_yychar !=  0){ Cyc_yychar=
  - 2;} yyvs[ _check_known_subscript_notnull( 10000u, ++ yyvsp_offset)]= Cyc_yylval;
  yyls[ _check_known_subscript_notnull( 10000u, ++ yylsp_offset)]= Cyc_yylloc; if(
  yyerrstatus !=  0){ yyerrstatus --;} yystate= yyn; goto yynewstate; yydefault:
! yyn=( int) Cyc_yydefact[ _check_known_subscript_notnull( 801u, yystate)]; if(
  yyn ==  0){ goto yyerrlab;} yyreduce: yylen=( int) Cyc_yyr2[
! _check_known_subscript_notnull( 405u, yyn)]; if( yylen >  0){ yyval= yyvs[
  _check_known_subscript_notnull( 10000u,( yyvsp_offset +  1) -  yylen)];} switch(
! yyn){ case 1: _LL1383: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]; Cyc_Parse_parse_result= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); break; case 2: _LL1384:
! yyval=( void*)({ struct Cyc_DeclList_tok_struct* _temp1386=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1386[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1387; _temp1387.tag= Cyc_DeclList_tok; _temp1387.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)( Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_DeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp1387;});
! _temp1386;}); break; case 3: _LL1385: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1389=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1389[ 0]=({ struct Cyc_DeclList_tok_struct _temp1390; _temp1390.tag= Cyc_DeclList_tok;
! _temp1390.f1=({ struct Cyc_List_List* _temp1391=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1391->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1392=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1392->r=( void*)(( void*)({ struct Cyc_Absyn_Using_d_struct* _temp1393=(
  struct Cyc_Absyn_Using_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Using_d_struct));
! _temp1393[ 0]=({ struct Cyc_Absyn_Using_d_struct _temp1394; _temp1394.tag= Cyc_Absyn_Using_d;
! _temp1394.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1394.f2= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1394;}); _temp1393;}));
! _temp1392->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1392;});
! _temp1391->tl= 0; _temp1391;}); _temp1390;}); _temp1389;}); Cyc_Lex_leave_using();
! break; case 4: _LL1388: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1396=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1396[ 0]=({ struct Cyc_DeclList_tok_struct _temp1397; _temp1397.tag= Cyc_DeclList_tok;
! _temp1397.f1=({ struct Cyc_List_List* _temp1398=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1398->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1399=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1399->r=( void*)(( void*)({ struct Cyc_Absyn_Using_d_struct* _temp1400=(
  struct Cyc_Absyn_Using_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Using_d_struct));
! _temp1400[ 0]=({ struct Cyc_Absyn_Using_d_struct _temp1401; _temp1401.tag= Cyc_Absyn_Using_d;
! _temp1401.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  4)]); _temp1401.f2= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1401;});
! _temp1400;})); _temp1399->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line);
! _temp1399;}); _temp1398->tl= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1398;}); _temp1397;});
! _temp1396;}); break; case 5: _LL1395: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1403=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1403[ 0]=({ struct Cyc_DeclList_tok_struct _temp1404; _temp1404.tag= Cyc_DeclList_tok;
! _temp1404.f1=({ struct Cyc_List_List* _temp1405=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1405->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1406=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1406->r=( void*)(( void*)({ struct Cyc_Absyn_Namespace_d_struct* _temp1407=(
  struct Cyc_Absyn_Namespace_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Namespace_d_struct));
! _temp1407[ 0]=({ struct Cyc_Absyn_Namespace_d_struct _temp1408; _temp1408.tag=
! Cyc_Absyn_Namespace_d; _temp1408.f1=({ struct _tagged_arr* _temp1409=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp1409[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1409;});
! _temp1408.f2= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1408;}); _temp1407;})); _temp1406->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line);
! _temp1406;}); _temp1405->tl= 0; _temp1405;}); _temp1404;}); _temp1403;}); Cyc_Lex_leave_namespace();
! break; case 6: _LL1402: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1411=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1411[ 0]=({ struct Cyc_DeclList_tok_struct _temp1412; _temp1412.tag= Cyc_DeclList_tok;
! _temp1412.f1=({ struct Cyc_List_List* _temp1413=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1413->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1414=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1414->r=( void*)(( void*)({ struct Cyc_Absyn_Namespace_d_struct* _temp1415=(
  struct Cyc_Absyn_Namespace_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Namespace_d_struct));
! _temp1415[ 0]=({ struct Cyc_Absyn_Namespace_d_struct _temp1416; _temp1416.tag=
! Cyc_Absyn_Namespace_d; _temp1416.f1=({ struct _tagged_arr* _temp1417=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp1417[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1417;});
! _temp1416.f2= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp1416;}); _temp1415;})); _temp1414->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line);
! _temp1414;}); _temp1413->tl= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1413;}); _temp1412;});
! _temp1411;}); break; case 7: _LL1410: if( Cyc_Std_strcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), _tag_arr("C",
  sizeof( unsigned char), 2u)) !=  0){ Cyc_Parse_err( _tag_arr("only extern \"C\" { ... } is allowed",
  sizeof( unsigned char), 35u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).last_line));} yyval=(
! void*)({ struct Cyc_DeclList_tok_struct* _temp1419=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1419[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1420; _temp1420.tag= Cyc_DeclList_tok; _temp1420.f1=({ struct Cyc_List_List*
! _temp1421=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1421->hd=( void*)({ struct Cyc_Absyn_Decl* _temp1422=( struct Cyc_Absyn_Decl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp1422->r=( void*)(( void*)({
! struct Cyc_Absyn_ExternC_d_struct* _temp1423=( struct Cyc_Absyn_ExternC_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ExternC_d_struct)); _temp1423[ 0]=({ struct
! Cyc_Absyn_ExternC_d_struct _temp1424; _temp1424.tag= Cyc_Absyn_ExternC_d;
! _temp1424.f1= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp1424;}); _temp1423;})); _temp1422->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line);
! _temp1422;}); _temp1421->tl= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1421;}); _temp1420;});
! _temp1419;}); break; case 8: _LL1418: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1426=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1426[ 0]=({ struct Cyc_DeclList_tok_struct _temp1427; _temp1427.tag= Cyc_DeclList_tok;
! _temp1427.f1= 0; _temp1427;}); _temp1426;}); break; case 9: _LL1425: yyval=(
! void*)({ struct Cyc_DeclList_tok_struct* _temp1429=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1429[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1430; _temp1430.tag= Cyc_DeclList_tok; _temp1430.f1=({ struct Cyc_List_List*
! _temp1431=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1431->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Fn_d_struct*
! _temp1432=( struct Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp1432[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp1433; _temp1433.tag= Cyc_Absyn_Fn_d;
! _temp1433.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1433;}); _temp1432;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1431->tl=
! 0; _temp1431;}); _temp1430;}); _temp1429;}); break; case 10: _LL1428: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 11:
! _LL1434: yyval=( void*)({ struct Cyc_FnDecl_tok_struct* _temp1436=( struct Cyc_FnDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct)); _temp1436[ 0]=({ struct Cyc_FnDecl_tok_struct
! _temp1437; _temp1437.tag= Cyc_FnDecl_tok; _temp1437.f1= Cyc_Parse_make_function(
  0, Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), 0, Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1437;}); _temp1436;}); break; case 12: _LL1435: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1439=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1439[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1440; _temp1440.tag= Cyc_FnDecl_tok;
! _temp1440.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1441=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1441->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1441;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), 0, Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1440;}); _temp1439;}); break; case 13: _LL1438: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1443=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1443[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1444; _temp1444.tag= Cyc_FnDecl_tok;
! _temp1444.f1= Cyc_Parse_make_function( 0, Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1444;}); _temp1443;}); break; case 14: _LL1442: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1446=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1446[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1447; _temp1447.tag= Cyc_FnDecl_tok;
! _temp1447.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1448=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1448->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp1448;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1447;}); _temp1446;}); break; case 15: _LL1445: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1450=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1450[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1451; _temp1451.tag= Cyc_FnDecl_tok;
! _temp1451.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1452=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1452->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1452;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), 0, Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1451;}); _temp1450;}); break; case 16: _LL1449: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1454=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1454[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1455; _temp1455.tag= Cyc_FnDecl_tok;
! _temp1455.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1456=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1456->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp1456;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1455;}); _temp1454;}); break; case 17: _LL1453: Cyc_Lex_enter_using( Cyc_yyget_QualId_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 18: _LL1457:
! Cyc_Lex_leave_using(); break; case 19: _LL1458: Cyc_Lex_enter_namespace(({
! struct _tagged_arr* _temp1460=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp1460[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1460;})); yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 20:
! _LL1459: Cyc_Lex_leave_namespace(); break; case 21: _LL1461: yyval=( void*)({
! struct Cyc_DeclList_tok_struct* _temp1463=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1463[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1464; _temp1464.tag= Cyc_DeclList_tok; _temp1464.f1= Cyc_Parse_make_declarations(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), 0, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp1464;}); _temp1463;}); break; case 22: _LL1462: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1466=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1466[ 0]=({ struct Cyc_DeclList_tok_struct _temp1467; _temp1467.tag= Cyc_DeclList_tok;
! _temp1467.f1= Cyc_Parse_make_declarations( Cyc_yyget_DeclSpec_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_InitDeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1467;}); _temp1466;}); break; case 23: _LL1465: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1469=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1469[ 0]=({ struct Cyc_DeclList_tok_struct _temp1470; _temp1470.tag= Cyc_DeclList_tok;
! _temp1470.f1=({ struct Cyc_List_List* _temp1471=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1471->hd=( void*) Cyc_Absyn_let_decl(
  Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)]), 0, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1471->tl=
! 0; _temp1471;}); _temp1470;}); _temp1469;}); break; case 24: _LL1468: { struct
! Cyc_List_List* _temp1473= 0;{ struct Cyc_List_List* _temp1474= Cyc_yyget_IdList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); for( 0;
! _temp1474 !=  0; _temp1474=(( struct Cyc_List_List*) _check_null( _temp1474))->tl){
! struct _tagged_arr* _temp1475=( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( _temp1474))->hd; struct _tuple1* _temp1476=({ struct _tuple1*
! _temp1479=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp1479->f1=
! Cyc_Absyn_rel_ns_null; _temp1479->f2= _temp1475; _temp1479;}); struct Cyc_Absyn_Vardecl*
! _temp1477= Cyc_Absyn_new_vardecl( _temp1476, Cyc_Absyn_wildtyp( 0), 0);
! _temp1473=({ struct Cyc_List_List* _temp1478=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1478->hd=( void*) _temp1477; _temp1478->tl=
! _temp1473; _temp1478;});}} _temp1473=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_imp_rev)( _temp1473); yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1480=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1480[ 0]=({ struct Cyc_DeclList_tok_struct _temp1481; _temp1481.tag= Cyc_DeclList_tok;
! _temp1481.f1=({ struct Cyc_List_List* _temp1482=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1482->hd=( void*) Cyc_Absyn_letv_decl(
! _temp1473, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp1482->tl= 0; _temp1482;}); _temp1481;});
! _temp1480;}); break;} case 25: _LL1472: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 26: _LL1483:
! yyval=( void*)({ struct Cyc_DeclList_tok_struct* _temp1485=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1485[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1486; _temp1486.tag= Cyc_DeclList_tok; _temp1486.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)( Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_DeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp1486;});
! _temp1485;}); break; case 27: _LL1484: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1488=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1488[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1489; _temp1489.tag= Cyc_DeclSpec_tok;
! _temp1489.f1=({ struct Cyc_Parse_Declaration_spec* _temp1490=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1490->sc=({ struct
! Cyc_Core_Opt* _temp1491=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof( struct
! Cyc_Core_Opt)); _temp1491->v=( void*) Cyc_yyget_StorageClass_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1491;});
! _temp1490->tq= Cyc_Absyn_empty_tqual(); _temp1490->type_specs= 0; _temp1490->is_inline=
! 0; _temp1490->attributes= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1490;}); _temp1489;});
! _temp1488;}); break; case 28: _LL1487: if(( Cyc_yyget_DeclSpec_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc !=  0){ Cyc_Parse_warn(
  _tag_arr("Only one storage class is allowed in a declaration", sizeof(
  unsigned char), 51u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));} yyval=(
! void*)({ struct Cyc_DeclSpec_tok_struct* _temp1493=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1493[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1494; _temp1494.tag= Cyc_DeclSpec_tok; _temp1494.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1495=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1495->sc=({ struct Cyc_Core_Opt* _temp1496=( struct Cyc_Core_Opt*)
! _cycalloc_atomic( sizeof( struct Cyc_Core_Opt)); _temp1496->v=( void*) Cyc_yyget_StorageClass_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1496;});
! _temp1495->tq=( Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]))->tq; _temp1495->type_specs=( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->type_specs;
! _temp1495->is_inline=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->is_inline; _temp1495->attributes=
  Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1495;}); _temp1494;}); _temp1493;}); break; case 29: _LL1492: yyval=( void*)({
! struct Cyc_DeclSpec_tok_struct* _temp1498=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1498[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1499; _temp1499.tag= Cyc_DeclSpec_tok; _temp1499.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1500=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1500->sc= 0; _temp1500->tq= Cyc_Absyn_empty_tqual(); _temp1500->type_specs=({
! struct Cyc_List_List* _temp1501=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1501->hd=( void*) Cyc_yyget_TypeSpecifier_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1501->tl= 0;
! _temp1501;}); _temp1500->is_inline= 0; _temp1500->attributes= Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1500;});
! _temp1499;}); _temp1498;}); break; case 30: _LL1497: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1503=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1503[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1504; _temp1504.tag= Cyc_DeclSpec_tok;
! _temp1504.f1=({ struct Cyc_Parse_Declaration_spec* _temp1505=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1505->sc=( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc; _temp1505->tq=(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]))->tq; _temp1505->type_specs=({ struct Cyc_List_List* _temp1506=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1506->hd=(
  void*) Cyc_yyget_TypeSpecifier_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1506->tl=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->type_specs; _temp1506;});
! _temp1505->is_inline=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->is_inline; _temp1505->attributes=
  Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1505;}); _temp1504;}); _temp1503;}); break; case 31: _LL1502: yyval=( void*)({
! struct Cyc_DeclSpec_tok_struct* _temp1508=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1508[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1509; _temp1509.tag= Cyc_DeclSpec_tok; _temp1509.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1510=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1510->sc= 0; _temp1510->tq= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1510->type_specs=
! 0; _temp1510->is_inline= 0; _temp1510->attributes= Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1510;});
! _temp1509;}); _temp1508;}); break; case 32: _LL1507: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1512=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1512[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1513; _temp1513.tag= Cyc_DeclSpec_tok;
! _temp1513.f1=({ struct Cyc_Parse_Declaration_spec* _temp1514=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1514->sc=( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc; _temp1514->tq=
  Cyc_Absyn_combine_tqual( Cyc_yyget_TypeQual_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]),( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tq); _temp1514->type_specs=(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]))->type_specs; _temp1514->is_inline=( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->is_inline;
! _temp1514->attributes= Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1514;}); _temp1513;}); _temp1512;}); break; case 33: _LL1511: yyval=( void*)({
! struct Cyc_DeclSpec_tok_struct* _temp1516=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1516[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1517; _temp1517.tag= Cyc_DeclSpec_tok; _temp1517.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1518=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1518->sc= 0; _temp1518->tq= Cyc_Absyn_empty_tqual(); _temp1518->type_specs=
! 0; _temp1518->is_inline= 1; _temp1518->attributes= Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1518;});
! _temp1517;}); _temp1516;}); break; case 34: _LL1515: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1520=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1520[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1521; _temp1521.tag= Cyc_DeclSpec_tok;
! _temp1521.f1=({ struct Cyc_Parse_Declaration_spec* _temp1522=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1522->sc=( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc; _temp1522->tq=(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]))->tq; _temp1522->type_specs=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->type_specs; _temp1522->is_inline=
! 1; _temp1522->attributes= Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1522;}); _temp1521;}); _temp1520;}); break; case 35: _LL1519: yyval=( void*)({
! struct Cyc_StorageClass_tok_struct* _temp1524=( struct Cyc_StorageClass_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct)); _temp1524[ 0]=({
! struct Cyc_StorageClass_tok_struct _temp1525; _temp1525.tag= Cyc_StorageClass_tok;
! _temp1525.f1= Cyc_Parse_Auto_sc; _temp1525;}); _temp1524;}); break; case 36:
! _LL1523: yyval=( void*)({ struct Cyc_StorageClass_tok_struct* _temp1527=( struct
  Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct));
! _temp1527[ 0]=({ struct Cyc_StorageClass_tok_struct _temp1528; _temp1528.tag=
! Cyc_StorageClass_tok; _temp1528.f1= Cyc_Parse_Register_sc; _temp1528;});
! _temp1527;}); break; case 37: _LL1526: yyval=( void*)({ struct Cyc_StorageClass_tok_struct*
! _temp1530=( struct Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StorageClass_tok_struct)); _temp1530[ 0]=({ struct Cyc_StorageClass_tok_struct
! _temp1531; _temp1531.tag= Cyc_StorageClass_tok; _temp1531.f1= Cyc_Parse_Static_sc;
! _temp1531;}); _temp1530;}); break; case 38: _LL1529: yyval=( void*)({ struct Cyc_StorageClass_tok_struct*
! _temp1533=( struct Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StorageClass_tok_struct)); _temp1533[ 0]=({ struct Cyc_StorageClass_tok_struct
! _temp1534; _temp1534.tag= Cyc_StorageClass_tok; _temp1534.f1= Cyc_Parse_Extern_sc;
! _temp1534;}); _temp1533;}); break; case 39: _LL1532: if( Cyc_Std_strcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), _tag_arr("C",
  sizeof( unsigned char), 2u)) !=  0){ Cyc_Parse_err( _tag_arr("only extern or extern \"C\" is allowed",
  sizeof( unsigned char), 37u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_StorageClass_tok_struct* _temp1536=( struct Cyc_StorageClass_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct)); _temp1536[ 0]=({
! struct Cyc_StorageClass_tok_struct _temp1537; _temp1537.tag= Cyc_StorageClass_tok;
! _temp1537.f1= Cyc_Parse_ExternC_sc; _temp1537;}); _temp1536;}); break; case 40:
! _LL1535: yyval=( void*)({ struct Cyc_StorageClass_tok_struct* _temp1539=( struct
  Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct));
! _temp1539[ 0]=({ struct Cyc_StorageClass_tok_struct _temp1540; _temp1540.tag=
! Cyc_StorageClass_tok; _temp1540.f1= Cyc_Parse_Typedef_sc; _temp1540;});
! _temp1539;}); break; case 41: _LL1538: yyval=( void*)({ struct Cyc_StorageClass_tok_struct*
! _temp1542=( struct Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StorageClass_tok_struct)); _temp1542[ 0]=({ struct Cyc_StorageClass_tok_struct
! _temp1543; _temp1543.tag= Cyc_StorageClass_tok; _temp1543.f1= Cyc_Parse_Abstract_sc;
! _temp1543;}); _temp1542;}); break; case 42: _LL1541: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1545=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1545[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1546; _temp1546.tag=
! Cyc_AttributeList_tok; _temp1546.f1= 0; _temp1546;}); _temp1545;}); break; case
! 43: _LL1544: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 44: _LL1547: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1549=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1549[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1550; _temp1550.tag=
! Cyc_AttributeList_tok; _temp1550.f1= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1550;});
! _temp1549;}); break; case 45: _LL1548: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1552=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1552[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1553; _temp1553.tag=
! Cyc_AttributeList_tok; _temp1553.f1=({ struct Cyc_List_List* _temp1554=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1554->hd=( void*)
  Cyc_yyget_Attribute_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1554->tl= 0; _temp1554;}); _temp1553;}); _temp1552;});
! break; case 46: _LL1551: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1556=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1556[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1557; _temp1557.tag=
! Cyc_AttributeList_tok; _temp1557.f1=({ struct Cyc_List_List* _temp1558=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1558->hd=( void*)
  Cyc_yyget_Attribute_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1558->tl= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1558;}); _temp1557;});
! _temp1556;}); break; case 47: _LL1555: { struct _tagged_arr _temp1560= Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if((((
! _get_arr_size( _temp1560, sizeof( unsigned char)) >  4?*(( const unsigned char*)
! _check_unknown_subscript( _temp1560, sizeof( unsigned char), 0)) == '_': 0)?*((
! const unsigned char*) _check_unknown_subscript( _temp1560, sizeof( unsigned char),
! 1)) == '_': 0)?*(( const unsigned char*) _check_unknown_subscript( _temp1560,
! sizeof( unsigned char),( int)( _get_arr_size( _temp1560, sizeof( unsigned char))
! -  2))) == '_': 0)?*(( const unsigned char*) _check_unknown_subscript( _temp1560,
! sizeof( unsigned char),( int)( _get_arr_size( _temp1560, sizeof( unsigned char))
! -  3))) == '_': 0){ _temp1560=( struct _tagged_arr) Cyc_Std_substring( _temp1560,
! 2, _get_arr_size( _temp1560, sizeof( unsigned char)) -  5);}{ int i= 0; for( 0;
! i <  16u; ++ i){ if( Cyc_Std_strcmp( _temp1560,( Cyc_Parse_att_map[
  _check_known_subscript_notnull( 16u, i)]).f1) ==  0){ yyval=( void*)({ struct
! Cyc_Attribute_tok_struct* _temp1561=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1561[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1562; _temp1562.tag= Cyc_Attribute_tok; _temp1562.f1=(
  void*)( Cyc_Parse_att_map[ _check_known_subscript_notnull( 16u, i)]).f2;
! _temp1562;}); _temp1561;}); break;}} if( i ==  16u){ Cyc_Parse_err( _tag_arr("unrecognized attribute",
  sizeof( unsigned char), 23u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Attribute_tok_struct* _temp1563=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1563[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1564; _temp1564.tag= Cyc_Attribute_tok; _temp1564.f1=(
! void*)(( void*) Cyc_Absyn_Cdecl_att); _temp1564;}); _temp1563;});} break;}} case
! 48: _LL1559: yyval=( void*)({ struct Cyc_Attribute_tok_struct* _temp1566=(
  struct Cyc_Attribute_tok_struct*) _cycalloc( sizeof( struct Cyc_Attribute_tok_struct));
! _temp1566[ 0]=({ struct Cyc_Attribute_tok_struct _temp1567; _temp1567.tag= Cyc_Attribute_tok;
! _temp1567.f1=( void*)(( void*) Cyc_Absyn_Const_att); _temp1567;}); _temp1566;});
! break; case 49: _LL1565: { struct _tagged_arr _temp1569= Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); struct
! _tuple15 _temp1572; int _temp1573; struct _tuple15* _temp1570= Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1572=*
! _temp1570; _LL1574: _temp1573= _temp1572.f2; goto _LL1571; _LL1571: { void* a;
! if( Cyc_Std_zstrcmp( _temp1569, _tag_arr("regparm", sizeof( unsigned char), 8u))
! ==  0? 1: Cyc_Std_zstrcmp( _temp1569, _tag_arr("__regparm__", sizeof(
! unsigned char), 12u)) ==  0){ if( _temp1573 <=  0? 1: _temp1573 >  3){ Cyc_Parse_err(
  _tag_arr("regparm requires value between 1 and 3", sizeof( unsigned char), 39u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).last_line));} a=( void*)({ struct Cyc_Absyn_Regparm_att_struct*
! _temp1575=( struct Cyc_Absyn_Regparm_att_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_Absyn_Regparm_att_struct)); _temp1575[ 0]=({ struct Cyc_Absyn_Regparm_att_struct
! _temp1576; _temp1576.tag= Cyc_Absyn_Regparm_att; _temp1576.f1= _temp1573;
! _temp1576;}); _temp1575;});} else{ if( Cyc_Std_zstrcmp( _temp1569, _tag_arr("aligned",
! sizeof( unsigned char), 8u)) ==  0? 1: Cyc_Std_zstrcmp( _temp1569, _tag_arr("__aligned__",
! sizeof( unsigned char), 12u)) ==  0){ if( _temp1573 <  0){ Cyc_Parse_err(
  _tag_arr("aligned requires positive power of two", sizeof( unsigned char), 39u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line));}{ unsigned int j=( unsigned int) _temp1573;
  for( 0;( j &  1) ==  0; j= j >>  1){;} j= j >>  1; if( j !=  0){ Cyc_Parse_err(
  _tag_arr("aligned requires positive power of two", sizeof( unsigned char), 39u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).last_line));} a=( void*)({ struct Cyc_Absyn_Aligned_att_struct*
! _temp1577=( struct Cyc_Absyn_Aligned_att_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_Absyn_Aligned_att_struct)); _temp1577[ 0]=({ struct Cyc_Absyn_Aligned_att_struct
! _temp1578; _temp1578.tag= Cyc_Absyn_Aligned_att; _temp1578.f1= _temp1573;
! _temp1578;}); _temp1577;});}} else{ Cyc_Parse_err( _tag_arr("unrecognized attribute",
  sizeof( unsigned char), 23u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line)); a=(
  void*) Cyc_Absyn_Cdecl_att;}} yyval=( void*)({ struct Cyc_Attribute_tok_struct*
! _temp1579=( struct Cyc_Attribute_tok_struct*) _cycalloc( sizeof( struct Cyc_Attribute_tok_struct));
! _temp1579[ 0]=({ struct Cyc_Attribute_tok_struct _temp1580; _temp1580.tag= Cyc_Attribute_tok;
! _temp1580.f1=( void*) a; _temp1580;}); _temp1579;}); break;}} case 50: _LL1568: {
! struct _tagged_arr _temp1582= Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); struct _tagged_arr
! _temp1583= Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); void* a; if( Cyc_Std_zstrcmp( _temp1582, _tag_arr("section",
! sizeof( unsigned char), 8u)) ==  0? 1: Cyc_Std_zstrcmp( _temp1582, _tag_arr("__section__",
  sizeof( unsigned char), 12u)) ==  0){ a=( void*)({ struct Cyc_Absyn_Section_att_struct*
! _temp1584=( struct Cyc_Absyn_Section_att_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Section_att_struct));
! _temp1584[ 0]=({ struct Cyc_Absyn_Section_att_struct _temp1585; _temp1585.tag=
! Cyc_Absyn_Section_att; _temp1585.f1= _temp1583; _temp1585;}); _temp1584;});}
  else{ Cyc_Parse_err( _tag_arr("unrecognized attribute", sizeof( unsigned char),
  23u), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  3)]).last_line)); a=( void*) Cyc_Absyn_Cdecl_att;} yyval=( void*)({
! struct Cyc_Attribute_tok_struct* _temp1586=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1586[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1587; _temp1587.tag= Cyc_Attribute_tok; _temp1587.f1=(
! void*) a; _temp1587;}); _temp1586;}); break;} case 51: _LL1581: { struct
! _tagged_arr _temp1589= Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  7)]); struct _tagged_arr
! _temp1590= Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  5)]); int _temp1593; struct _tuple15 _temp1591=* Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _LL1594:
! _temp1593= _temp1591.f2; goto _LL1592; _LL1592: { int _temp1597; struct _tuple15
! _temp1595=* Cyc_yyget_Int_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _LL1598: _temp1597= _temp1595.f2; goto _LL1596; _LL1596: {
! void* a=( void*) Cyc_Absyn_Cdecl_att; if( Cyc_Std_zstrcmp( _temp1589, _tag_arr("format",
! sizeof( unsigned char), 7u)) ==  0? 1: Cyc_Std_zstrcmp( _temp1589, _tag_arr("__format__",
! sizeof( unsigned char), 11u)) ==  0){ if( Cyc_Std_zstrcmp( _temp1590, _tag_arr("printf",
  sizeof( unsigned char), 7u)) ==  0){ a=( void*)({ struct Cyc_Absyn_Format_att_struct*
! _temp1599=( struct Cyc_Absyn_Format_att_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Format_att_struct));
! _temp1599[ 0]=({ struct Cyc_Absyn_Format_att_struct _temp1600; _temp1600.tag=
! Cyc_Absyn_Format_att; _temp1600.f1=( void*)(( void*) Cyc_Absyn_Printf_ft);
! _temp1600.f2= _temp1593; _temp1600.f3= _temp1597; _temp1600;}); _temp1599;});}
! else{ if( Cyc_Std_zstrcmp( _temp1590, _tag_arr("scanf", sizeof( unsigned char),
! 6u)) ==  0){ a=( void*)({ struct Cyc_Absyn_Format_att_struct* _temp1601=( struct
  Cyc_Absyn_Format_att_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Format_att_struct));
! _temp1601[ 0]=({ struct Cyc_Absyn_Format_att_struct _temp1602; _temp1602.tag=
! Cyc_Absyn_Format_att; _temp1602.f1=( void*)(( void*) Cyc_Absyn_Scanf_ft);
! _temp1602.f2= _temp1593; _temp1602.f3= _temp1597; _temp1602;}); _temp1601;});}
  else{ Cyc_Parse_err( _tag_arr("unrecognized format type", sizeof( unsigned char),
  25u), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
--- 2974,3523 ----
  Cyc_yynerrs= 0; struct _tuple18{ void* f1; void* f2; } ; struct _tuple19{ struct
  Cyc_List_List* f1; struct Cyc_Absyn_Exp* f2; } ; int Cyc_yyparse(){ int yystate;
  int yyn= 0; int yyerrstatus; int yychar1= 0; int yyssp_offset; short* yyss=(
! short*)({ unsigned int _temp3176= 10000u; short* _temp3177=( short*)
! _cycalloc_atomic( _check_times( sizeof( short), _temp3176));{ unsigned int
! _temp3178= _temp3176; unsigned int i; for( i= 0; i <  _temp3178; i ++){
! _temp3177[ i]=( short) 0;}}; _temp3177;}); int yyvsp_offset; void** yyvs=( void**)({
! unsigned int _temp3173= 10000u; void** _temp3174=( void**) _cycalloc(
! _check_times( sizeof( void*), _temp3173));{ unsigned int _temp3175= _temp3173;
! unsigned int i; for( i= 0; i <  _temp3175; i ++){ _temp3174[ i]= Cyc_yylval;}};
! _temp3174;}); int yylsp_offset; struct Cyc_Yyltype* yyls=( struct Cyc_Yyltype*)({
! unsigned int _temp3170= 10000u; struct Cyc_Yyltype* _temp3171=( struct Cyc_Yyltype*)
! _cycalloc_atomic( _check_times( sizeof( struct Cyc_Yyltype), _temp3170));{
! unsigned int _temp3172= _temp3170; unsigned int i; for( i= 0; i <  _temp3172; i
! ++){ _temp3171[ i]= Cyc_yynewloc();}}; _temp3171;}); int yystacksize= 10000;
  void* yyval= Cyc_yylval; int yylen; yystate= 0; yyerrstatus= 0; Cyc_yynerrs= 0;
  Cyc_yychar= - 2; yyssp_offset= - 1; yyvsp_offset= 0; yylsp_offset= 0; yynewstate:
  yyss[ _check_known_subscript_notnull( 10000u, ++ yyssp_offset)]=( short) yystate;
  if( yyssp_offset >=  yystacksize -  1){ if( yystacksize >=  10000){ Cyc_yyerror(
  _tag_arr("parser stack overflow", sizeof( unsigned char), 22u));( int) _throw((
  void*) Cyc_Yystack_overflow);}} goto yybackup; yybackup: yyn=( int) Cyc_yypact[
! _check_known_subscript_notnull( 798u, yystate)]; if( yyn ==  - 32768){ goto
  yydefault;} if( Cyc_yychar ==  - 2){ Cyc_yychar= Cyc_yylex();} if( Cyc_yychar <= 
  0){ yychar1= 0; Cyc_yychar= 0;} else{ yychar1=( Cyc_yychar >  0? Cyc_yychar <= 
  348: 0)?( int) Cyc_yytranslate[ _check_known_subscript_notnull( 349u, Cyc_yychar)]:
! 233;} yyn += yychar1; if(( yyn <  0? 1: yyn >  4371)? 1: Cyc_yycheck[
! _check_known_subscript_notnull( 4372u, yyn)] !=  yychar1){ goto yydefault;} yyn=(
! int) Cyc_yytable[ _check_known_subscript_notnull( 4372u, yyn)]; if( yyn <  0){
  if( yyn ==  - 32768){ goto yyerrlab;} yyn= - yyn; goto yyreduce;} else{ if( yyn
! ==  0){ goto yyerrlab;}} if( yyn ==  797){ return 0;} if( Cyc_yychar !=  0){ Cyc_yychar=
  - 2;} yyvs[ _check_known_subscript_notnull( 10000u, ++ yyvsp_offset)]= Cyc_yylval;
  yyls[ _check_known_subscript_notnull( 10000u, ++ yylsp_offset)]= Cyc_yylloc; if(
  yyerrstatus !=  0){ yyerrstatus --;} yystate= yyn; goto yynewstate; yydefault:
! yyn=( int) Cyc_yydefact[ _check_known_subscript_notnull( 798u, yystate)]; if(
  yyn ==  0){ goto yyerrlab;} yyreduce: yylen=( int) Cyc_yyr2[
! _check_known_subscript_notnull( 404u, yyn)]; if( yylen >  0){ yyval= yyvs[
  _check_known_subscript_notnull( 10000u,( yyvsp_offset +  1) -  yylen)];} switch(
! yyn){ case 1: _LL1382: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]; Cyc_Parse_parse_result= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); break; case 2: _LL1383:
! yyval=( void*)({ struct Cyc_DeclList_tok_struct* _temp1385=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1385[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1386; _temp1386.tag= Cyc_DeclList_tok; _temp1386.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)( Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_DeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp1386;});
! _temp1385;}); break; case 3: _LL1384: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1388=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1388[ 0]=({ struct Cyc_DeclList_tok_struct _temp1389; _temp1389.tag= Cyc_DeclList_tok;
! _temp1389.f1=({ struct Cyc_List_List* _temp1390=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1390->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1391=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1391->r=( void*)(( void*)({ struct Cyc_Absyn_Using_d_struct* _temp1392=(
  struct Cyc_Absyn_Using_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Using_d_struct));
! _temp1392[ 0]=({ struct Cyc_Absyn_Using_d_struct _temp1393; _temp1393.tag= Cyc_Absyn_Using_d;
! _temp1393.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1393.f2= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1393;}); _temp1392;}));
! _temp1391->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1391;});
! _temp1390->tl= 0; _temp1390;}); _temp1389;}); _temp1388;}); Cyc_Lex_leave_using();
! break; case 4: _LL1387: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1395=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1395[ 0]=({ struct Cyc_DeclList_tok_struct _temp1396; _temp1396.tag= Cyc_DeclList_tok;
! _temp1396.f1=({ struct Cyc_List_List* _temp1397=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1397->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1398=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1398->r=( void*)(( void*)({ struct Cyc_Absyn_Using_d_struct* _temp1399=(
  struct Cyc_Absyn_Using_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Using_d_struct));
! _temp1399[ 0]=({ struct Cyc_Absyn_Using_d_struct _temp1400; _temp1400.tag= Cyc_Absyn_Using_d;
! _temp1400.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  4)]); _temp1400.f2= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1400;});
! _temp1399;})); _temp1398->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line);
! _temp1398;}); _temp1397->tl= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1397;}); _temp1396;});
! _temp1395;}); break; case 5: _LL1394: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1402=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1402[ 0]=({ struct Cyc_DeclList_tok_struct _temp1403; _temp1403.tag= Cyc_DeclList_tok;
! _temp1403.f1=({ struct Cyc_List_List* _temp1404=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1404->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1405=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1405->r=( void*)(( void*)({ struct Cyc_Absyn_Namespace_d_struct* _temp1406=(
  struct Cyc_Absyn_Namespace_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Namespace_d_struct));
! _temp1406[ 0]=({ struct Cyc_Absyn_Namespace_d_struct _temp1407; _temp1407.tag=
! Cyc_Absyn_Namespace_d; _temp1407.f1=({ struct _tagged_arr* _temp1408=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp1408[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1408;});
! _temp1407.f2= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1407;}); _temp1406;})); _temp1405->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line);
! _temp1405;}); _temp1404->tl= 0; _temp1404;}); _temp1403;}); _temp1402;}); Cyc_Lex_leave_namespace();
! break; case 6: _LL1401: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1410=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1410[ 0]=({ struct Cyc_DeclList_tok_struct _temp1411; _temp1411.tag= Cyc_DeclList_tok;
! _temp1411.f1=({ struct Cyc_List_List* _temp1412=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1412->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp1413=( struct Cyc_Absyn_Decl*) _cycalloc( sizeof( struct Cyc_Absyn_Decl));
! _temp1413->r=( void*)(( void*)({ struct Cyc_Absyn_Namespace_d_struct* _temp1414=(
  struct Cyc_Absyn_Namespace_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Namespace_d_struct));
! _temp1414[ 0]=({ struct Cyc_Absyn_Namespace_d_struct _temp1415; _temp1415.tag=
! Cyc_Absyn_Namespace_d; _temp1415.f1=({ struct _tagged_arr* _temp1416=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp1416[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1416;});
! _temp1415.f2= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp1415;}); _temp1414;})); _temp1413->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line);
! _temp1413;}); _temp1412->tl= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1412;}); _temp1411;});
! _temp1410;}); break; case 7: _LL1409: if( Cyc_Std_strcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), _tag_arr("C",
  sizeof( unsigned char), 2u)) !=  0){ Cyc_Parse_err( _tag_arr("only extern \"C\" { ... } is allowed",
  sizeof( unsigned char), 35u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).last_line));} yyval=(
! void*)({ struct Cyc_DeclList_tok_struct* _temp1418=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1418[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1419; _temp1419.tag= Cyc_DeclList_tok; _temp1419.f1=({ struct Cyc_List_List*
! _temp1420=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1420->hd=( void*)({ struct Cyc_Absyn_Decl* _temp1421=( struct Cyc_Absyn_Decl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp1421->r=( void*)(( void*)({
! struct Cyc_Absyn_ExternC_d_struct* _temp1422=( struct Cyc_Absyn_ExternC_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ExternC_d_struct)); _temp1422[ 0]=({ struct
! Cyc_Absyn_ExternC_d_struct _temp1423; _temp1423.tag= Cyc_Absyn_ExternC_d;
! _temp1423.f1= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp1423;}); _temp1422;})); _temp1421->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line);
! _temp1421;}); _temp1420->tl= Cyc_yyget_DeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1420;}); _temp1419;});
! _temp1418;}); break; case 8: _LL1417: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1425=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1425[ 0]=({ struct Cyc_DeclList_tok_struct _temp1426; _temp1426.tag= Cyc_DeclList_tok;
! _temp1426.f1= 0; _temp1426;}); _temp1425;}); break; case 9: _LL1424: yyval=(
! void*)({ struct Cyc_DeclList_tok_struct* _temp1428=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1428[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1429; _temp1429.tag= Cyc_DeclList_tok; _temp1429.f1=({ struct Cyc_List_List*
! _temp1430=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1430->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Fn_d_struct*
! _temp1431=( struct Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp1431[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp1432; _temp1432.tag= Cyc_Absyn_Fn_d;
! _temp1432.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1432;}); _temp1431;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1430->tl=
! 0; _temp1430;}); _temp1429;}); _temp1428;}); break; case 10: _LL1427: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 11:
! _LL1433: yyval=( void*)({ struct Cyc_FnDecl_tok_struct* _temp1435=( struct Cyc_FnDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct)); _temp1435[ 0]=({ struct Cyc_FnDecl_tok_struct
! _temp1436; _temp1436.tag= Cyc_FnDecl_tok; _temp1436.f1= Cyc_Parse_make_function(
  0, Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), 0, Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1436;}); _temp1435;}); break; case 12: _LL1434: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1438=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1438[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1439; _temp1439.tag= Cyc_FnDecl_tok;
! _temp1439.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1440=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1440->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1440;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), 0, Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1439;}); _temp1438;}); break; case 13: _LL1437: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1442=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1442[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1443; _temp1443.tag= Cyc_FnDecl_tok;
! _temp1443.f1= Cyc_Parse_make_function( 0, Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1443;}); _temp1442;}); break; case 14: _LL1441: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1445=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1445[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1446; _temp1446.tag= Cyc_FnDecl_tok;
! _temp1446.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1447=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1447->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp1447;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1446;}); _temp1445;}); break; case 15: _LL1444: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1449=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1449[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1450; _temp1450.tag= Cyc_FnDecl_tok;
! _temp1450.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1451=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1451->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1451;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), 0, Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1450;}); _temp1449;}); break; case 16: _LL1448: yyval=( void*)({ struct Cyc_FnDecl_tok_struct*
! _temp1453=( struct Cyc_FnDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_FnDecl_tok_struct));
! _temp1453[ 0]=({ struct Cyc_FnDecl_tok_struct _temp1454; _temp1454.tag= Cyc_FnDecl_tok;
! _temp1454.f1= Cyc_Parse_make_function(({ struct Cyc_Core_Opt* _temp1455=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1455->v=( void*)
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp1455;}), Cyc_yyget_Declarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1454;}); _temp1453;}); break; case 17: _LL1452: Cyc_Lex_enter_using( Cyc_yyget_QualId_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 18: _LL1456:
! Cyc_Lex_leave_using(); break; case 19: _LL1457: Cyc_Lex_enter_namespace(({
! struct _tagged_arr* _temp1459=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp1459[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1459;})); yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 20:
! _LL1458: Cyc_Lex_leave_namespace(); break; case 21: _LL1460: yyval=( void*)({
! struct Cyc_DeclList_tok_struct* _temp1462=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1462[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1463; _temp1463.tag= Cyc_DeclList_tok; _temp1463.f1= Cyc_Parse_make_declarations(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), 0, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp1463;}); _temp1462;}); break; case 22: _LL1461: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1465=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1465[ 0]=({ struct Cyc_DeclList_tok_struct _temp1466; _temp1466.tag= Cyc_DeclList_tok;
! _temp1466.f1= Cyc_Parse_make_declarations( Cyc_yyget_DeclSpec_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_InitDeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1466;}); _temp1465;}); break; case 23: _LL1464: yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1468=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1468[ 0]=({ struct Cyc_DeclList_tok_struct _temp1469; _temp1469.tag= Cyc_DeclList_tok;
! _temp1469.f1=({ struct Cyc_List_List* _temp1470=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1470->hd=( void*) Cyc_Absyn_let_decl(
  Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)]), 0, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1470->tl=
! 0; _temp1470;}); _temp1469;}); _temp1468;}); break; case 24: _LL1467: { struct
! Cyc_List_List* _temp1472= 0;{ struct Cyc_List_List* _temp1473= Cyc_yyget_IdList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); for( 0;
! _temp1473 !=  0; _temp1473=(( struct Cyc_List_List*) _check_null( _temp1473))->tl){
! struct _tagged_arr* _temp1474=( struct _tagged_arr*)(( struct Cyc_List_List*)
! _check_null( _temp1473))->hd; struct _tuple1* _temp1475=({ struct _tuple1*
! _temp1478=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp1478->f1=
! Cyc_Absyn_rel_ns_null; _temp1478->f2= _temp1474; _temp1478;}); struct Cyc_Absyn_Vardecl*
! _temp1476= Cyc_Absyn_new_vardecl( _temp1475, Cyc_Absyn_wildtyp( 0), 0);
! _temp1472=({ struct Cyc_List_List* _temp1477=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1477->hd=( void*) _temp1476; _temp1477->tl=
! _temp1472; _temp1477;});}} _temp1472=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_imp_rev)( _temp1472); yyval=( void*)({ struct Cyc_DeclList_tok_struct*
! _temp1479=( struct Cyc_DeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclList_tok_struct));
! _temp1479[ 0]=({ struct Cyc_DeclList_tok_struct _temp1480; _temp1480.tag= Cyc_DeclList_tok;
! _temp1480.f1=({ struct Cyc_List_List* _temp1481=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1481->hd=( void*) Cyc_Absyn_letv_decl(
! _temp1472, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp1481->tl= 0; _temp1481;}); _temp1480;});
! _temp1479;}); break;} case 25: _LL1471: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 26: _LL1482:
! yyval=( void*)({ struct Cyc_DeclList_tok_struct* _temp1484=( struct Cyc_DeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclList_tok_struct)); _temp1484[ 0]=({ struct Cyc_DeclList_tok_struct
! _temp1485; _temp1485.tag= Cyc_DeclList_tok; _temp1485.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)( Cyc_yyget_DeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_DeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp1485;});
! _temp1484;}); break; case 27: _LL1483: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1487=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1487[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1488; _temp1488.tag= Cyc_DeclSpec_tok;
! _temp1488.f1=({ struct Cyc_Parse_Declaration_spec* _temp1489=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1489->sc=({ struct
! Cyc_Core_Opt* _temp1490=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof( struct
! Cyc_Core_Opt)); _temp1490->v=( void*) Cyc_yyget_StorageClass_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1490;});
! _temp1489->tq= Cyc_Absyn_empty_tqual(); _temp1489->type_specs= 0; _temp1489->is_inline=
! 0; _temp1489->attributes= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1489;}); _temp1488;});
! _temp1487;}); break; case 28: _LL1486: if(( Cyc_yyget_DeclSpec_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc !=  0){ Cyc_Parse_warn(
  _tag_arr("Only one storage class is allowed in a declaration", sizeof(
  unsigned char), 51u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));} yyval=(
! void*)({ struct Cyc_DeclSpec_tok_struct* _temp1492=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1492[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1493; _temp1493.tag= Cyc_DeclSpec_tok; _temp1493.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1494=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1494->sc=({ struct Cyc_Core_Opt* _temp1495=( struct Cyc_Core_Opt*)
! _cycalloc_atomic( sizeof( struct Cyc_Core_Opt)); _temp1495->v=( void*) Cyc_yyget_StorageClass_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1495;});
! _temp1494->tq=( Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]))->tq; _temp1494->type_specs=( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->type_specs;
! _temp1494->is_inline=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->is_inline; _temp1494->attributes=
  Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1494;}); _temp1493;}); _temp1492;}); break; case 29: _LL1491: yyval=( void*)({
! struct Cyc_DeclSpec_tok_struct* _temp1497=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1497[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1498; _temp1498.tag= Cyc_DeclSpec_tok; _temp1498.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1499=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1499->sc= 0; _temp1499->tq= Cyc_Absyn_empty_tqual(); _temp1499->type_specs=({
! struct Cyc_List_List* _temp1500=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1500->hd=( void*) Cyc_yyget_TypeSpecifier_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1500->tl= 0;
! _temp1500;}); _temp1499->is_inline= 0; _temp1499->attributes= Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1499;});
! _temp1498;}); _temp1497;}); break; case 30: _LL1496: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1502=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1502[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1503; _temp1503.tag= Cyc_DeclSpec_tok;
! _temp1503.f1=({ struct Cyc_Parse_Declaration_spec* _temp1504=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1504->sc=( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc; _temp1504->tq=(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]))->tq; _temp1504->type_specs=({ struct Cyc_List_List* _temp1505=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1505->hd=(
  void*) Cyc_yyget_TypeSpecifier_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1505->tl=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->type_specs; _temp1505;});
! _temp1504->is_inline=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->is_inline; _temp1504->attributes=
  Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1504;}); _temp1503;}); _temp1502;}); break; case 31: _LL1501: yyval=( void*)({
! struct Cyc_DeclSpec_tok_struct* _temp1507=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1507[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1508; _temp1508.tag= Cyc_DeclSpec_tok; _temp1508.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1509=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1509->sc= 0; _temp1509->tq= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1509->type_specs=
! 0; _temp1509->is_inline= 0; _temp1509->attributes= Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1509;});
! _temp1508;}); _temp1507;}); break; case 32: _LL1506: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1511=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1511[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1512; _temp1512.tag= Cyc_DeclSpec_tok;
! _temp1512.f1=({ struct Cyc_Parse_Declaration_spec* _temp1513=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1513->sc=( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc; _temp1513->tq=
  Cyc_Absyn_combine_tqual( Cyc_yyget_TypeQual_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]),( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tq); _temp1513->type_specs=(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]))->type_specs; _temp1513->is_inline=( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->is_inline;
! _temp1513->attributes= Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1513;}); _temp1512;}); _temp1511;}); break; case 33: _LL1510: yyval=( void*)({
! struct Cyc_DeclSpec_tok_struct* _temp1515=( struct Cyc_DeclSpec_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct)); _temp1515[ 0]=({ struct Cyc_DeclSpec_tok_struct
! _temp1516; _temp1516.tag= Cyc_DeclSpec_tok; _temp1516.f1=({ struct Cyc_Parse_Declaration_spec*
! _temp1517=( struct Cyc_Parse_Declaration_spec*) _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec));
! _temp1517->sc= 0; _temp1517->tq= Cyc_Absyn_empty_tqual(); _temp1517->type_specs=
! 0; _temp1517->is_inline= 1; _temp1517->attributes= Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1517;});
! _temp1516;}); _temp1515;}); break; case 34: _LL1514: yyval=( void*)({ struct Cyc_DeclSpec_tok_struct*
! _temp1519=( struct Cyc_DeclSpec_tok_struct*) _cycalloc( sizeof( struct Cyc_DeclSpec_tok_struct));
! _temp1519[ 0]=({ struct Cyc_DeclSpec_tok_struct _temp1520; _temp1520.tag= Cyc_DeclSpec_tok;
! _temp1520.f1=({ struct Cyc_Parse_Declaration_spec* _temp1521=( struct Cyc_Parse_Declaration_spec*)
! _cycalloc( sizeof( struct Cyc_Parse_Declaration_spec)); _temp1521->sc=( Cyc_yyget_DeclSpec_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->sc; _temp1521->tq=(
  Cyc_yyget_DeclSpec_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]))->tq; _temp1521->type_specs=( Cyc_yyget_DeclSpec_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->type_specs; _temp1521->is_inline=
! 1; _temp1521->attributes= Cyc_List_imp_append( Cyc_yyget_AttributeList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_DeclSpec_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->attributes);
! _temp1521;}); _temp1520;}); _temp1519;}); break; case 35: _LL1518: yyval=( void*)({
! struct Cyc_StorageClass_tok_struct* _temp1523=( struct Cyc_StorageClass_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct)); _temp1523[ 0]=({
! struct Cyc_StorageClass_tok_struct _temp1524; _temp1524.tag= Cyc_StorageClass_tok;
! _temp1524.f1= Cyc_Parse_Auto_sc; _temp1524;}); _temp1523;}); break; case 36:
! _LL1522: yyval=( void*)({ struct Cyc_StorageClass_tok_struct* _temp1526=( struct
  Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct));
! _temp1526[ 0]=({ struct Cyc_StorageClass_tok_struct _temp1527; _temp1527.tag=
! Cyc_StorageClass_tok; _temp1527.f1= Cyc_Parse_Register_sc; _temp1527;});
! _temp1526;}); break; case 37: _LL1525: yyval=( void*)({ struct Cyc_StorageClass_tok_struct*
! _temp1529=( struct Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StorageClass_tok_struct)); _temp1529[ 0]=({ struct Cyc_StorageClass_tok_struct
! _temp1530; _temp1530.tag= Cyc_StorageClass_tok; _temp1530.f1= Cyc_Parse_Static_sc;
! _temp1530;}); _temp1529;}); break; case 38: _LL1528: yyval=( void*)({ struct Cyc_StorageClass_tok_struct*
! _temp1532=( struct Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StorageClass_tok_struct)); _temp1532[ 0]=({ struct Cyc_StorageClass_tok_struct
! _temp1533; _temp1533.tag= Cyc_StorageClass_tok; _temp1533.f1= Cyc_Parse_Extern_sc;
! _temp1533;}); _temp1532;}); break; case 39: _LL1531: if( Cyc_Std_strcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), _tag_arr("C",
  sizeof( unsigned char), 2u)) !=  0){ Cyc_Parse_err( _tag_arr("only extern or extern \"C\" is allowed",
  sizeof( unsigned char), 37u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_StorageClass_tok_struct* _temp1535=( struct Cyc_StorageClass_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct)); _temp1535[ 0]=({
! struct Cyc_StorageClass_tok_struct _temp1536; _temp1536.tag= Cyc_StorageClass_tok;
! _temp1536.f1= Cyc_Parse_ExternC_sc; _temp1536;}); _temp1535;}); break; case 40:
! _LL1534: yyval=( void*)({ struct Cyc_StorageClass_tok_struct* _temp1538=( struct
  Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof( struct Cyc_StorageClass_tok_struct));
! _temp1538[ 0]=({ struct Cyc_StorageClass_tok_struct _temp1539; _temp1539.tag=
! Cyc_StorageClass_tok; _temp1539.f1= Cyc_Parse_Typedef_sc; _temp1539;});
! _temp1538;}); break; case 41: _LL1537: yyval=( void*)({ struct Cyc_StorageClass_tok_struct*
! _temp1541=( struct Cyc_StorageClass_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StorageClass_tok_struct)); _temp1541[ 0]=({ struct Cyc_StorageClass_tok_struct
! _temp1542; _temp1542.tag= Cyc_StorageClass_tok; _temp1542.f1= Cyc_Parse_Abstract_sc;
! _temp1542;}); _temp1541;}); break; case 42: _LL1540: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1544=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1544[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1545; _temp1545.tag=
! Cyc_AttributeList_tok; _temp1545.f1= 0; _temp1545;}); _temp1544;}); break; case
! 43: _LL1543: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 44: _LL1546: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1548=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1548[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1549; _temp1549.tag=
! Cyc_AttributeList_tok; _temp1549.f1= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1549;});
! _temp1548;}); break; case 45: _LL1547: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1551=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1551[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1552; _temp1552.tag=
! Cyc_AttributeList_tok; _temp1552.f1=({ struct Cyc_List_List* _temp1553=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1553->hd=( void*)
  Cyc_yyget_Attribute_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1553->tl= 0; _temp1553;}); _temp1552;}); _temp1551;});
! break; case 46: _LL1550: yyval=( void*)({ struct Cyc_AttributeList_tok_struct*
! _temp1555=( struct Cyc_AttributeList_tok_struct*) _cycalloc( sizeof( struct Cyc_AttributeList_tok_struct));
! _temp1555[ 0]=({ struct Cyc_AttributeList_tok_struct _temp1556; _temp1556.tag=
! Cyc_AttributeList_tok; _temp1556.f1=({ struct Cyc_List_List* _temp1557=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1557->hd=( void*)
  Cyc_yyget_Attribute_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1557->tl= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1557;}); _temp1556;});
! _temp1555;}); break; case 47: _LL1554: { struct _tagged_arr _temp1559= Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if((((
! _get_arr_size( _temp1559, sizeof( unsigned char)) >  4?*(( const unsigned char*)
! _check_unknown_subscript( _temp1559, sizeof( unsigned char), 0)) == '_': 0)?*((
! const unsigned char*) _check_unknown_subscript( _temp1559, sizeof( unsigned char),
! 1)) == '_': 0)?*(( const unsigned char*) _check_unknown_subscript( _temp1559,
! sizeof( unsigned char),( int)( _get_arr_size( _temp1559, sizeof( unsigned char))
! -  2))) == '_': 0)?*(( const unsigned char*) _check_unknown_subscript( _temp1559,
! sizeof( unsigned char),( int)( _get_arr_size( _temp1559, sizeof( unsigned char))
! -  3))) == '_': 0){ _temp1559=( struct _tagged_arr) Cyc_Std_substring( _temp1559,
! 2, _get_arr_size( _temp1559, sizeof( unsigned char)) -  5);}{ int i= 0; for( 0;
! i <  16u; ++ i){ if( Cyc_Std_strcmp( _temp1559,( Cyc_Parse_att_map[
  _check_known_subscript_notnull( 16u, i)]).f1) ==  0){ yyval=( void*)({ struct
! Cyc_Attribute_tok_struct* _temp1560=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1560[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1561; _temp1561.tag= Cyc_Attribute_tok; _temp1561.f1=(
  void*)( Cyc_Parse_att_map[ _check_known_subscript_notnull( 16u, i)]).f2;
! _temp1561;}); _temp1560;}); break;}} if( i ==  16u){ Cyc_Parse_err( _tag_arr("unrecognized attribute",
  sizeof( unsigned char), 23u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Attribute_tok_struct* _temp1562=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1562[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1563; _temp1563.tag= Cyc_Attribute_tok; _temp1563.f1=(
! void*)(( void*) Cyc_Absyn_Cdecl_att); _temp1563;}); _temp1562;});} break;}} case
! 48: _LL1558: yyval=( void*)({ struct Cyc_Attribute_tok_struct* _temp1565=(
  struct Cyc_Attribute_tok_struct*) _cycalloc( sizeof( struct Cyc_Attribute_tok_struct));
! _temp1565[ 0]=({ struct Cyc_Attribute_tok_struct _temp1566; _temp1566.tag= Cyc_Attribute_tok;
! _temp1566.f1=( void*)(( void*) Cyc_Absyn_Const_att); _temp1566;}); _temp1565;});
! break; case 49: _LL1564: { struct _tagged_arr _temp1568= Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); struct
! _tuple15 _temp1571; int _temp1572; struct _tuple15* _temp1569= Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1571=*
! _temp1569; _LL1573: _temp1572= _temp1571.f2; goto _LL1570; _LL1570: { void* a;
! if( Cyc_Std_zstrcmp( _temp1568, _tag_arr("regparm", sizeof( unsigned char), 8u))
! ==  0? 1: Cyc_Std_zstrcmp( _temp1568, _tag_arr("__regparm__", sizeof(
! unsigned char), 12u)) ==  0){ if( _temp1572 <=  0? 1: _temp1572 >  3){ Cyc_Parse_err(
  _tag_arr("regparm requires value between 1 and 3", sizeof( unsigned char), 39u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).last_line));} a=( void*)({ struct Cyc_Absyn_Regparm_att_struct*
! _temp1574=( struct Cyc_Absyn_Regparm_att_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_Absyn_Regparm_att_struct)); _temp1574[ 0]=({ struct Cyc_Absyn_Regparm_att_struct
! _temp1575; _temp1575.tag= Cyc_Absyn_Regparm_att; _temp1575.f1= _temp1572;
! _temp1575;}); _temp1574;});} else{ if( Cyc_Std_zstrcmp( _temp1568, _tag_arr("aligned",
! sizeof( unsigned char), 8u)) ==  0? 1: Cyc_Std_zstrcmp( _temp1568, _tag_arr("__aligned__",
! sizeof( unsigned char), 12u)) ==  0){ if( _temp1572 <  0){ Cyc_Parse_err(
  _tag_arr("aligned requires positive power of two", sizeof( unsigned char), 39u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line));}{ unsigned int j=( unsigned int) _temp1572;
  for( 0;( j &  1) ==  0; j= j >>  1){;} j= j >>  1; if( j !=  0){ Cyc_Parse_err(
  _tag_arr("aligned requires positive power of two", sizeof( unsigned char), 39u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).last_line));} a=( void*)({ struct Cyc_Absyn_Aligned_att_struct*
! _temp1576=( struct Cyc_Absyn_Aligned_att_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_Absyn_Aligned_att_struct)); _temp1576[ 0]=({ struct Cyc_Absyn_Aligned_att_struct
! _temp1577; _temp1577.tag= Cyc_Absyn_Aligned_att; _temp1577.f1= _temp1572;
! _temp1577;}); _temp1576;});}} else{ Cyc_Parse_err( _tag_arr("unrecognized attribute",
  sizeof( unsigned char), 23u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line)); a=(
  void*) Cyc_Absyn_Cdecl_att;}} yyval=( void*)({ struct Cyc_Attribute_tok_struct*
! _temp1578=( struct Cyc_Attribute_tok_struct*) _cycalloc( sizeof( struct Cyc_Attribute_tok_struct));
! _temp1578[ 0]=({ struct Cyc_Attribute_tok_struct _temp1579; _temp1579.tag= Cyc_Attribute_tok;
! _temp1579.f1=( void*) a; _temp1579;}); _temp1578;}); break;}} case 50: _LL1567: {
! struct _tagged_arr _temp1581= Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); struct _tagged_arr
! _temp1582= Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); void* a; if( Cyc_Std_zstrcmp( _temp1581, _tag_arr("section",
! sizeof( unsigned char), 8u)) ==  0? 1: Cyc_Std_zstrcmp( _temp1581, _tag_arr("__section__",
  sizeof( unsigned char), 12u)) ==  0){ a=( void*)({ struct Cyc_Absyn_Section_att_struct*
! _temp1583=( struct Cyc_Absyn_Section_att_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Section_att_struct));
! _temp1583[ 0]=({ struct Cyc_Absyn_Section_att_struct _temp1584; _temp1584.tag=
! Cyc_Absyn_Section_att; _temp1584.f1= _temp1582; _temp1584;}); _temp1583;});}
  else{ Cyc_Parse_err( _tag_arr("unrecognized attribute", sizeof( unsigned char),
  23u), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  3)]).last_line)); a=( void*) Cyc_Absyn_Cdecl_att;} yyval=( void*)({
! struct Cyc_Attribute_tok_struct* _temp1585=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1585[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1586; _temp1586.tag= Cyc_Attribute_tok; _temp1586.f1=(
! void*) a; _temp1586;}); _temp1585;}); break;} case 51: _LL1580: { struct
! _tagged_arr _temp1588= Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  7)]); struct _tagged_arr
! _temp1589= Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  5)]); int _temp1592; struct _tuple15 _temp1590=* Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _LL1593:
! _temp1592= _temp1590.f2; goto _LL1591; _LL1591: { int _temp1596; struct _tuple15
! _temp1594=* Cyc_yyget_Int_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _LL1597: _temp1596= _temp1594.f2; goto _LL1595; _LL1595: {
! void* a=( void*) Cyc_Absyn_Cdecl_att; if( Cyc_Std_zstrcmp( _temp1588, _tag_arr("format",
! sizeof( unsigned char), 7u)) ==  0? 1: Cyc_Std_zstrcmp( _temp1588, _tag_arr("__format__",
! sizeof( unsigned char), 11u)) ==  0){ if( Cyc_Std_zstrcmp( _temp1589, _tag_arr("printf",
  sizeof( unsigned char), 7u)) ==  0){ a=( void*)({ struct Cyc_Absyn_Format_att_struct*
! _temp1598=( struct Cyc_Absyn_Format_att_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Format_att_struct));
! _temp1598[ 0]=({ struct Cyc_Absyn_Format_att_struct _temp1599; _temp1599.tag=
! Cyc_Absyn_Format_att; _temp1599.f1=( void*)(( void*) Cyc_Absyn_Printf_ft);
! _temp1599.f2= _temp1592; _temp1599.f3= _temp1596; _temp1599;}); _temp1598;});}
! else{ if( Cyc_Std_zstrcmp( _temp1589, _tag_arr("scanf", sizeof( unsigned char),
! 6u)) ==  0){ a=( void*)({ struct Cyc_Absyn_Format_att_struct* _temp1600=( struct
  Cyc_Absyn_Format_att_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Format_att_struct));
! _temp1600[ 0]=({ struct Cyc_Absyn_Format_att_struct _temp1601; _temp1601.tag=
! Cyc_Absyn_Format_att; _temp1601.f1=( void*)(( void*) Cyc_Absyn_Scanf_ft);
! _temp1601.f2= _temp1592; _temp1601.f3= _temp1596; _temp1601;}); _temp1600;});}
  else{ Cyc_Parse_err( _tag_arr("unrecognized format type", sizeof( unsigned char),
  25u), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
***************
*** 3525,3788 ****
  sizeof( unsigned char), 23u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Attribute_tok_struct* _temp1603=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1603[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1604; _temp1604.tag= Cyc_Attribute_tok; _temp1604.f1=(
! void*) a; _temp1604;}); _temp1603;}); break;}}} case 52: _LL1588: yyval=( void*)({
! struct Cyc_TypeSpecifier_tok_struct* _temp1606=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1606[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1607; _temp1607.tag= Cyc_TypeSpecifier_tok;
! _temp1607.f1=( void*) Cyc_Parse_type_spec(( void*) Cyc_Absyn_VoidType, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1607;});
! _temp1606;}); break; case 53: _LL1605: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1609=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1609[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1610; _temp1610.tag=
! Cyc_TypeSpecifier_tok; _temp1610.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_new_evar(
  0, 0), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1610;}); _temp1609;}); break; case 54: _LL1608:
! yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1612=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1612[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1613; _temp1613.tag= Cyc_TypeSpecifier_tok;
! _temp1613.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_uchar_t, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1613;});
! _temp1612;}); break; case 55: _LL1611: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1615=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1615[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1616; _temp1616.tag=
! Cyc_TypeSpecifier_tok; _temp1616.f1=( void*)(( void*)({ struct Cyc_Parse_Short_spec_struct*
! _temp1617=( struct Cyc_Parse_Short_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Short_spec_struct));
! _temp1617[ 0]=({ struct Cyc_Parse_Short_spec_struct _temp1618; _temp1618.tag=
! Cyc_Parse_Short_spec; _temp1618.f1= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1618;});
! _temp1617;})); _temp1616;}); _temp1615;}); break; case 56: _LL1614: yyval=( void*)({
! struct Cyc_TypeSpecifier_tok_struct* _temp1620=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1620[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1621; _temp1621.tag= Cyc_TypeSpecifier_tok;
! _temp1621.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_sint_t, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1621;});
! _temp1620;}); break; case 57: _LL1619: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1623=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1623[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1624; _temp1624.tag=
! Cyc_TypeSpecifier_tok; _temp1624.f1=( void*)(( void*)({ struct Cyc_Parse_Long_spec_struct*
! _temp1625=( struct Cyc_Parse_Long_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Long_spec_struct));
! _temp1625[ 0]=({ struct Cyc_Parse_Long_spec_struct _temp1626; _temp1626.tag= Cyc_Parse_Long_spec;
! _temp1626.f1= Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp1626;}); _temp1625;})); _temp1624;}); _temp1623;});
! break; case 58: _LL1622: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1628=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1628[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1629; _temp1629.tag=
! Cyc_TypeSpecifier_tok; _temp1629.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_float_t,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1629;}); _temp1628;}); break; case 59: _LL1627:
! yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1631=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1631[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1632; _temp1632.tag= Cyc_TypeSpecifier_tok;
! _temp1632.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_double_t, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1632;});
! _temp1631;}); break; case 60: _LL1630: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1634=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1634[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1635; _temp1635.tag=
! Cyc_TypeSpecifier_tok; _temp1635.f1=( void*)(( void*)({ struct Cyc_Parse_Signed_spec_struct*
! _temp1636=( struct Cyc_Parse_Signed_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Signed_spec_struct));
! _temp1636[ 0]=({ struct Cyc_Parse_Signed_spec_struct _temp1637; _temp1637.tag=
! Cyc_Parse_Signed_spec; _temp1637.f1= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1637;});
! _temp1636;})); _temp1635;}); _temp1634;}); break; case 61: _LL1633: yyval=( void*)({
! struct Cyc_TypeSpecifier_tok_struct* _temp1639=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1639[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1640; _temp1640.tag= Cyc_TypeSpecifier_tok;
! _temp1640.f1=( void*)(( void*)({ struct Cyc_Parse_Unsigned_spec_struct*
! _temp1641=( struct Cyc_Parse_Unsigned_spec_struct*) _cycalloc( sizeof( struct
! Cyc_Parse_Unsigned_spec_struct)); _temp1641[ 0]=({ struct Cyc_Parse_Unsigned_spec_struct
! _temp1642; _temp1642.tag= Cyc_Parse_Unsigned_spec; _temp1642.f1= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1642;});
! _temp1641;})); _temp1640;}); _temp1639;}); break; case 62: _LL1638: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 63: _LL1643:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 64: _LL1644: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 65: _LL1645: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1647=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1647[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1648; _temp1648.tag=
! Cyc_TypeSpecifier_tok; _temp1648.f1=( void*) Cyc_Parse_type_spec( Cyc_yyget_Type_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1648;});
! _temp1647;}); break; case 66: _LL1646: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1650=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1650[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1651; _temp1651.tag=
! Cyc_TypeSpecifier_tok; _temp1651.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TypedefType_struct* _temp1652=( struct Cyc_Absyn_TypedefType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypedefType_struct)); _temp1652[ 0]=({
! struct Cyc_Absyn_TypedefType_struct _temp1653; _temp1653.tag= Cyc_Absyn_TypedefType;
! _temp1653.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp1653.f2= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1653.f3= 0;
! _temp1653;}); _temp1652;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1651;});
! _temp1650;}); break; case 67: _LL1649: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1655=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1655[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1656; _temp1656.tag=
! Cyc_TypeSpecifier_tok; _temp1656.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TupleType_struct* _temp1657=( struct Cyc_Absyn_TupleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct)); _temp1657[ 0]=({ struct
! Cyc_Absyn_TupleType_struct _temp1658; _temp1658.tag= Cyc_Absyn_TupleType;
! _temp1658.f1=(( struct Cyc_List_List*(*)( struct _tuple11*(* f)( struct Cyc_Position_Segment*,
  struct _tuple2*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x))
  Cyc_List_map_c)( Cyc_Parse_get_tqual_typ, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line),((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))); _temp1658;});
! _temp1657;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp1656;}); _temp1655;}); break; case 68:
! _LL1654: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1660=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1660[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1661; _temp1661.tag=
! Cyc_TypeSpecifier_tok; _temp1661.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_RgnHandleType_struct* _temp1662=( struct Cyc_Absyn_RgnHandleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct)); _temp1662[ 0]=({
! struct Cyc_Absyn_RgnHandleType_struct _temp1663; _temp1663.tag= Cyc_Absyn_RgnHandleType;
! _temp1663.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp1663;}); _temp1662;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1661;}); _temp1660;}); break; case 69: _LL1659: yyval=( void*)({ struct Cyc_Kind_tok_struct*
! _temp1665=( struct Cyc_Kind_tok_struct*) _cycalloc( sizeof( struct Cyc_Kind_tok_struct));
! _temp1665[ 0]=({ struct Cyc_Kind_tok_struct _temp1666; _temp1666.tag= Cyc_Kind_tok;
! _temp1666.f1=( void*) Cyc_Parse_id_to_kind( Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1666;});
! _temp1665;}); break; case 70: _LL1664: { struct _tagged_arr* _temp1670; void*
! _temp1672; struct _tuple1 _temp1668=* Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _LL1673: _temp1672=
! _temp1668.f1; goto _LL1671; _LL1671: _temp1670= _temp1668.f2; goto _LL1669;
! _LL1669: if( _temp1672 != ( void*) Cyc_Absyn_Loc_n){ Cyc_Parse_err( _tag_arr("bad kind in type specifier",
  sizeof( unsigned char), 27u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Kind_tok_struct* _temp1674=( struct Cyc_Kind_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Kind_tok_struct)); _temp1674[ 0]=({ struct Cyc_Kind_tok_struct
! _temp1675; _temp1675.tag= Cyc_Kind_tok; _temp1675.f1=( void*) Cyc_Parse_id_to_kind(*
! _temp1670, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1675;}); _temp1674;}); break;} case 71:
! _LL1667: yyval=( void*)({ struct Cyc_TypeQual_tok_struct* _temp1677=( struct Cyc_TypeQual_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_TypeQual_tok_struct)); _temp1677[ 0]=({
! struct Cyc_TypeQual_tok_struct _temp1678; _temp1678.tag= Cyc_TypeQual_tok;
! _temp1678.f1=({ struct Cyc_Absyn_Tqual _temp1679; _temp1679.q_const= 1;
! _temp1679.q_volatile= 0; _temp1679.q_restrict= 0; _temp1679;}); _temp1678;});
! _temp1677;}); break; case 72: _LL1676: yyval=( void*)({ struct Cyc_TypeQual_tok_struct*
! _temp1681=( struct Cyc_TypeQual_tok_struct*) _cycalloc_atomic( sizeof( struct
! Cyc_TypeQual_tok_struct)); _temp1681[ 0]=({ struct Cyc_TypeQual_tok_struct
! _temp1682; _temp1682.tag= Cyc_TypeQual_tok; _temp1682.f1=({ struct Cyc_Absyn_Tqual
! _temp1683; _temp1683.q_const= 0; _temp1683.q_volatile= 1; _temp1683.q_restrict=
! 0; _temp1683;}); _temp1682;}); _temp1681;}); break; case 73: _LL1680: yyval=(
! void*)({ struct Cyc_TypeQual_tok_struct* _temp1685=( struct Cyc_TypeQual_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_TypeQual_tok_struct)); _temp1685[ 0]=({
! struct Cyc_TypeQual_tok_struct _temp1686; _temp1686.tag= Cyc_TypeQual_tok;
! _temp1686.f1=({ struct Cyc_Absyn_Tqual _temp1687; _temp1687.q_const= 0;
! _temp1687.q_volatile= 0; _temp1687.q_restrict= 1; _temp1687;}); _temp1686;});
! _temp1685;}); break; case 74: _LL1684: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1689=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1689[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1690; _temp1690.tag=
! Cyc_TypeSpecifier_tok; _temp1690.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1691=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1691[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1692; _temp1692.tag= Cyc_Parse_Decl_spec;
! _temp1692.f1=({ struct Cyc_Absyn_Decl* _temp1693=( struct Cyc_Absyn_Decl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp1693->r=( void*)(( void*)({
! struct Cyc_Absyn_Enum_d_struct* _temp1694=( struct Cyc_Absyn_Enum_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct)); _temp1694[ 0]=({ struct Cyc_Absyn_Enum_d_struct
! _temp1695; _temp1695.tag= Cyc_Absyn_Enum_d; _temp1695.f1=({ struct Cyc_Absyn_Enumdecl*
! _temp1696=( struct Cyc_Absyn_Enumdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl));
! _temp1696->sc=( void*)(( void*) Cyc_Absyn_Public); _temp1696->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp1696->fields=({
! struct Cyc_Core_Opt* _temp1697=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1697->v=( void*) Cyc_yyget_EnumfieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1697;});
! _temp1696;}); _temp1695;}); _temp1694;})); _temp1693->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line);
! _temp1693;}); _temp1692;}); _temp1691;})); _temp1690;}); _temp1689;}); break;
! case 75: _LL1688: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1699=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1699[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1700; _temp1700.tag=
! Cyc_TypeSpecifier_tok; _temp1700.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_EnumType_struct* _temp1701=( struct Cyc_Absyn_EnumType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_EnumType_struct)); _temp1701[ 0]=({ struct
! Cyc_Absyn_EnumType_struct _temp1702; _temp1702.tag= Cyc_Absyn_EnumType;
! _temp1702.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1702.f2= 0; _temp1702;}); _temp1701;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1700;}); _temp1699;}); break; case 76: _LL1698: yyval=( void*)({ struct Cyc_Enumfield_tok_struct*
! _temp1704=( struct Cyc_Enumfield_tok_struct*) _cycalloc( sizeof( struct Cyc_Enumfield_tok_struct));
! _temp1704[ 0]=({ struct Cyc_Enumfield_tok_struct _temp1705; _temp1705.tag= Cyc_Enumfield_tok;
! _temp1705.f1=({ struct Cyc_Absyn_Enumfield* _temp1706=( struct Cyc_Absyn_Enumfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumfield)); _temp1706->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1706->tag= 0;
! _temp1706->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1706;});
! _temp1705;}); _temp1704;}); break; case 77: _LL1703: yyval=( void*)({ struct Cyc_Enumfield_tok_struct*
! _temp1708=( struct Cyc_Enumfield_tok_struct*) _cycalloc( sizeof( struct Cyc_Enumfield_tok_struct));
! _temp1708[ 0]=({ struct Cyc_Enumfield_tok_struct _temp1709; _temp1709.tag= Cyc_Enumfield_tok;
! _temp1709.f1=({ struct Cyc_Absyn_Enumfield* _temp1710=( struct Cyc_Absyn_Enumfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumfield)); _temp1710->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1710->tag=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1710->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1710;});
! _temp1709;}); _temp1708;}); break; case 78: _LL1707: yyval=( void*)({ struct Cyc_EnumfieldList_tok_struct*
! _temp1712=( struct Cyc_EnumfieldList_tok_struct*) _cycalloc( sizeof( struct Cyc_EnumfieldList_tok_struct));
! _temp1712[ 0]=({ struct Cyc_EnumfieldList_tok_struct _temp1713; _temp1713.tag=
! Cyc_EnumfieldList_tok; _temp1713.f1=({ struct Cyc_List_List* _temp1714=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1714->hd=( void*)
  Cyc_yyget_Enumfield_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1714->tl= 0; _temp1714;}); _temp1713;}); _temp1712;});
! break; case 79: _LL1711: yyval=( void*)({ struct Cyc_EnumfieldList_tok_struct*
! _temp1716=( struct Cyc_EnumfieldList_tok_struct*) _cycalloc( sizeof( struct Cyc_EnumfieldList_tok_struct));
! _temp1716[ 0]=({ struct Cyc_EnumfieldList_tok_struct _temp1717; _temp1717.tag=
! Cyc_EnumfieldList_tok; _temp1717.f1=({ struct Cyc_List_List* _temp1718=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1718->hd=( void*)
  Cyc_yyget_Enumfield_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1718->tl= Cyc_yyget_EnumfieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1718;}); _temp1717;});
! _temp1716;}); break; case 80: _LL1715: { void* t; switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)])){ case Cyc_Parse_Struct_su:
! _LL1720: t=( void*)({ struct Cyc_Absyn_AnonStructType_struct* _temp1722=( struct
  Cyc_Absyn_AnonStructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AnonStructType_struct));
! _temp1722[ 0]=({ struct Cyc_Absyn_AnonStructType_struct _temp1723; _temp1723.tag=
! Cyc_Absyn_AnonStructType; _temp1723.f1= Cyc_yyget_StructFieldDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1723;});
! _temp1722;}); break; case Cyc_Parse_Union_su: _LL1721: t=( void*)({ struct Cyc_Absyn_AnonUnionType_struct*
! _temp1725=( struct Cyc_Absyn_AnonUnionType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_AnonUnionType_struct)); _temp1725[ 0]=({ struct Cyc_Absyn_AnonUnionType_struct
! _temp1726; _temp1726.tag= Cyc_Absyn_AnonUnionType; _temp1726.f1= Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1726;});
! _temp1725;}); break;} yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1727=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1727[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1728; _temp1728.tag=
! Cyc_TypeSpecifier_tok; _temp1728.f1=( void*)(( void*)({ struct Cyc_Parse_Type_spec_struct*
! _temp1729=( struct Cyc_Parse_Type_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Type_spec_struct));
! _temp1729[ 0]=({ struct Cyc_Parse_Type_spec_struct _temp1730; _temp1730.tag= Cyc_Parse_Type_spec;
! _temp1730.f1=( void*) t; _temp1730.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1730;});
! _temp1729;})); _temp1728;}); _temp1727;}); break;} case 81: _LL1719: { struct
! Cyc_List_List* _temp1732=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)(
  struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env, struct
  Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
--- 3525,3788 ----
  sizeof( unsigned char), 23u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Attribute_tok_struct* _temp1602=( struct Cyc_Attribute_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Attribute_tok_struct)); _temp1602[ 0]=({ struct
! Cyc_Attribute_tok_struct _temp1603; _temp1603.tag= Cyc_Attribute_tok; _temp1603.f1=(
! void*) a; _temp1603;}); _temp1602;}); break;}}} case 52: _LL1587: yyval=( void*)({
! struct Cyc_TypeSpecifier_tok_struct* _temp1605=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1605[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1606; _temp1606.tag= Cyc_TypeSpecifier_tok;
! _temp1606.f1=( void*) Cyc_Parse_type_spec(( void*) Cyc_Absyn_VoidType, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1606;});
! _temp1605;}); break; case 53: _LL1604: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1608=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1608[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1609; _temp1609.tag=
! Cyc_TypeSpecifier_tok; _temp1609.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_new_evar(
  0, 0), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1609;}); _temp1608;}); break; case 54: _LL1607:
! yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1611=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1611[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1612; _temp1612.tag= Cyc_TypeSpecifier_tok;
! _temp1612.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_uchar_t, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1612;});
! _temp1611;}); break; case 55: _LL1610: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1614=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1614[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1615; _temp1615.tag=
! Cyc_TypeSpecifier_tok; _temp1615.f1=( void*)(( void*)({ struct Cyc_Parse_Short_spec_struct*
! _temp1616=( struct Cyc_Parse_Short_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Short_spec_struct));
! _temp1616[ 0]=({ struct Cyc_Parse_Short_spec_struct _temp1617; _temp1617.tag=
! Cyc_Parse_Short_spec; _temp1617.f1= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1617;});
! _temp1616;})); _temp1615;}); _temp1614;}); break; case 56: _LL1613: yyval=( void*)({
! struct Cyc_TypeSpecifier_tok_struct* _temp1619=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1619[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1620; _temp1620.tag= Cyc_TypeSpecifier_tok;
! _temp1620.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_sint_t, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1620;});
! _temp1619;}); break; case 57: _LL1618: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1622=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1622[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1623; _temp1623.tag=
! Cyc_TypeSpecifier_tok; _temp1623.f1=( void*)(( void*)({ struct Cyc_Parse_Long_spec_struct*
! _temp1624=( struct Cyc_Parse_Long_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Long_spec_struct));
! _temp1624[ 0]=({ struct Cyc_Parse_Long_spec_struct _temp1625; _temp1625.tag= Cyc_Parse_Long_spec;
! _temp1625.f1= Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp1625;}); _temp1624;})); _temp1623;}); _temp1622;});
! break; case 58: _LL1621: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1627=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1627[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1628; _temp1628.tag=
! Cyc_TypeSpecifier_tok; _temp1628.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_float_t,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1628;}); _temp1627;}); break; case 59: _LL1626:
! yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1630=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1630[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1631; _temp1631.tag= Cyc_TypeSpecifier_tok;
! _temp1631.f1=( void*) Cyc_Parse_type_spec( Cyc_Absyn_double_t, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1631;});
! _temp1630;}); break; case 60: _LL1629: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1633=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1633[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1634; _temp1634.tag=
! Cyc_TypeSpecifier_tok; _temp1634.f1=( void*)(( void*)({ struct Cyc_Parse_Signed_spec_struct*
! _temp1635=( struct Cyc_Parse_Signed_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Signed_spec_struct));
! _temp1635[ 0]=({ struct Cyc_Parse_Signed_spec_struct _temp1636; _temp1636.tag=
! Cyc_Parse_Signed_spec; _temp1636.f1= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1636;});
! _temp1635;})); _temp1634;}); _temp1633;}); break; case 61: _LL1632: yyval=( void*)({
! struct Cyc_TypeSpecifier_tok_struct* _temp1638=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1638[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1639; _temp1639.tag= Cyc_TypeSpecifier_tok;
! _temp1639.f1=( void*)(( void*)({ struct Cyc_Parse_Unsigned_spec_struct*
! _temp1640=( struct Cyc_Parse_Unsigned_spec_struct*) _cycalloc( sizeof( struct
! Cyc_Parse_Unsigned_spec_struct)); _temp1640[ 0]=({ struct Cyc_Parse_Unsigned_spec_struct
! _temp1641; _temp1641.tag= Cyc_Parse_Unsigned_spec; _temp1641.f1= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1641;});
! _temp1640;})); _temp1639;}); _temp1638;}); break; case 62: _LL1637: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 63: _LL1642:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 64: _LL1643: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 65: _LL1644: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1646=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1646[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1647; _temp1647.tag=
! Cyc_TypeSpecifier_tok; _temp1647.f1=( void*) Cyc_Parse_type_spec( Cyc_yyget_Type_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1647;});
! _temp1646;}); break; case 66: _LL1645: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1649=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1649[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1650; _temp1650.tag=
! Cyc_TypeSpecifier_tok; _temp1650.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TypedefType_struct* _temp1651=( struct Cyc_Absyn_TypedefType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypedefType_struct)); _temp1651[ 0]=({
! struct Cyc_Absyn_TypedefType_struct _temp1652; _temp1652.tag= Cyc_Absyn_TypedefType;
! _temp1652.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp1652.f2= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1652.f3= 0;
! _temp1652;}); _temp1651;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1650;});
! _temp1649;}); break; case 67: _LL1648: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1654=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1654[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1655; _temp1655.tag=
! Cyc_TypeSpecifier_tok; _temp1655.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TupleType_struct* _temp1656=( struct Cyc_Absyn_TupleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct)); _temp1656[ 0]=({ struct
! Cyc_Absyn_TupleType_struct _temp1657; _temp1657.tag= Cyc_Absyn_TupleType;
! _temp1657.f1=(( struct Cyc_List_List*(*)( struct _tuple11*(* f)( struct Cyc_Position_Segment*,
  struct _tuple2*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x))
  Cyc_List_map_c)( Cyc_Parse_get_tqual_typ, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line),((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))); _temp1657;});
! _temp1656;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp1655;}); _temp1654;}); break; case 68:
! _LL1653: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1659=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1659[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1660; _temp1660.tag=
! Cyc_TypeSpecifier_tok; _temp1660.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_RgnHandleType_struct* _temp1661=( struct Cyc_Absyn_RgnHandleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct)); _temp1661[ 0]=({
! struct Cyc_Absyn_RgnHandleType_struct _temp1662; _temp1662.tag= Cyc_Absyn_RgnHandleType;
! _temp1662.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp1662;}); _temp1661;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1660;}); _temp1659;}); break; case 69: _LL1658: yyval=( void*)({ struct Cyc_Kind_tok_struct*
! _temp1664=( struct Cyc_Kind_tok_struct*) _cycalloc( sizeof( struct Cyc_Kind_tok_struct));
! _temp1664[ 0]=({ struct Cyc_Kind_tok_struct _temp1665; _temp1665.tag= Cyc_Kind_tok;
! _temp1665.f1=( void*) Cyc_Parse_id_to_kind( Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1665;});
! _temp1664;}); break; case 70: _LL1663: { struct _tagged_arr* _temp1669; void*
! _temp1671; struct _tuple1 _temp1667=* Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _LL1672: _temp1671=
! _temp1667.f1; goto _LL1670; _LL1670: _temp1669= _temp1667.f2; goto _LL1668;
! _LL1668: if( _temp1671 != ( void*) Cyc_Absyn_Loc_n){ Cyc_Parse_err( _tag_arr("bad kind in type specifier",
  sizeof( unsigned char), 27u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Kind_tok_struct* _temp1673=( struct Cyc_Kind_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Kind_tok_struct)); _temp1673[ 0]=({ struct Cyc_Kind_tok_struct
! _temp1674; _temp1674.tag= Cyc_Kind_tok; _temp1674.f1=( void*) Cyc_Parse_id_to_kind(*
! _temp1669, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1674;}); _temp1673;}); break;} case 71:
! _LL1666: yyval=( void*)({ struct Cyc_TypeQual_tok_struct* _temp1676=( struct Cyc_TypeQual_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_TypeQual_tok_struct)); _temp1676[ 0]=({
! struct Cyc_TypeQual_tok_struct _temp1677; _temp1677.tag= Cyc_TypeQual_tok;
! _temp1677.f1=({ struct Cyc_Absyn_Tqual _temp1678; _temp1678.q_const= 1;
! _temp1678.q_volatile= 0; _temp1678.q_restrict= 0; _temp1678;}); _temp1677;});
! _temp1676;}); break; case 72: _LL1675: yyval=( void*)({ struct Cyc_TypeQual_tok_struct*
! _temp1680=( struct Cyc_TypeQual_tok_struct*) _cycalloc_atomic( sizeof( struct
! Cyc_TypeQual_tok_struct)); _temp1680[ 0]=({ struct Cyc_TypeQual_tok_struct
! _temp1681; _temp1681.tag= Cyc_TypeQual_tok; _temp1681.f1=({ struct Cyc_Absyn_Tqual
! _temp1682; _temp1682.q_const= 0; _temp1682.q_volatile= 1; _temp1682.q_restrict=
! 0; _temp1682;}); _temp1681;}); _temp1680;}); break; case 73: _LL1679: yyval=(
! void*)({ struct Cyc_TypeQual_tok_struct* _temp1684=( struct Cyc_TypeQual_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_TypeQual_tok_struct)); _temp1684[ 0]=({
! struct Cyc_TypeQual_tok_struct _temp1685; _temp1685.tag= Cyc_TypeQual_tok;
! _temp1685.f1=({ struct Cyc_Absyn_Tqual _temp1686; _temp1686.q_const= 0;
! _temp1686.q_volatile= 0; _temp1686.q_restrict= 1; _temp1686;}); _temp1685;});
! _temp1684;}); break; case 74: _LL1683: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1688=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1688[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1689; _temp1689.tag=
! Cyc_TypeSpecifier_tok; _temp1689.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1690=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1690[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1691; _temp1691.tag= Cyc_Parse_Decl_spec;
! _temp1691.f1=({ struct Cyc_Absyn_Decl* _temp1692=( struct Cyc_Absyn_Decl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Decl)); _temp1692->r=( void*)(( void*)({
! struct Cyc_Absyn_Enum_d_struct* _temp1693=( struct Cyc_Absyn_Enum_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enum_d_struct)); _temp1693[ 0]=({ struct Cyc_Absyn_Enum_d_struct
! _temp1694; _temp1694.tag= Cyc_Absyn_Enum_d; _temp1694.f1=({ struct Cyc_Absyn_Enumdecl*
! _temp1695=( struct Cyc_Absyn_Enumdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl));
! _temp1695->sc=( void*)(( void*) Cyc_Absyn_Public); _temp1695->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp1695->fields=({
! struct Cyc_Core_Opt* _temp1696=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1696->v=( void*) Cyc_yyget_EnumfieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1696;});
! _temp1695;}); _temp1694;}); _temp1693;})); _temp1692->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line);
! _temp1692;}); _temp1691;}); _temp1690;})); _temp1689;}); _temp1688;}); break;
! case 75: _LL1687: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1698=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1698[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1699; _temp1699.tag=
! Cyc_TypeSpecifier_tok; _temp1699.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_EnumType_struct* _temp1700=( struct Cyc_Absyn_EnumType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_EnumType_struct)); _temp1700[ 0]=({ struct
! Cyc_Absyn_EnumType_struct _temp1701; _temp1701.tag= Cyc_Absyn_EnumType;
! _temp1701.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1701.f2= 0; _temp1701;}); _temp1700;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1699;}); _temp1698;}); break; case 76: _LL1697: yyval=( void*)({ struct Cyc_Enumfield_tok_struct*
! _temp1703=( struct Cyc_Enumfield_tok_struct*) _cycalloc( sizeof( struct Cyc_Enumfield_tok_struct));
! _temp1703[ 0]=({ struct Cyc_Enumfield_tok_struct _temp1704; _temp1704.tag= Cyc_Enumfield_tok;
! _temp1704.f1=({ struct Cyc_Absyn_Enumfield* _temp1705=( struct Cyc_Absyn_Enumfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumfield)); _temp1705->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1705->tag= 0;
! _temp1705->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1705;});
! _temp1704;}); _temp1703;}); break; case 77: _LL1702: yyval=( void*)({ struct Cyc_Enumfield_tok_struct*
! _temp1707=( struct Cyc_Enumfield_tok_struct*) _cycalloc( sizeof( struct Cyc_Enumfield_tok_struct));
! _temp1707[ 0]=({ struct Cyc_Enumfield_tok_struct _temp1708; _temp1708.tag= Cyc_Enumfield_tok;
! _temp1708.f1=({ struct Cyc_Absyn_Enumfield* _temp1709=( struct Cyc_Absyn_Enumfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Enumfield)); _temp1709->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1709->tag=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1709->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1709;});
! _temp1708;}); _temp1707;}); break; case 78: _LL1706: yyval=( void*)({ struct Cyc_EnumfieldList_tok_struct*
! _temp1711=( struct Cyc_EnumfieldList_tok_struct*) _cycalloc( sizeof( struct Cyc_EnumfieldList_tok_struct));
! _temp1711[ 0]=({ struct Cyc_EnumfieldList_tok_struct _temp1712; _temp1712.tag=
! Cyc_EnumfieldList_tok; _temp1712.f1=({ struct Cyc_List_List* _temp1713=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1713->hd=( void*)
  Cyc_yyget_Enumfield_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1713->tl= 0; _temp1713;}); _temp1712;}); _temp1711;});
! break; case 79: _LL1710: yyval=( void*)({ struct Cyc_EnumfieldList_tok_struct*
! _temp1715=( struct Cyc_EnumfieldList_tok_struct*) _cycalloc( sizeof( struct Cyc_EnumfieldList_tok_struct));
! _temp1715[ 0]=({ struct Cyc_EnumfieldList_tok_struct _temp1716; _temp1716.tag=
! Cyc_EnumfieldList_tok; _temp1716.f1=({ struct Cyc_List_List* _temp1717=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1717->hd=( void*)
  Cyc_yyget_Enumfield_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1717->tl= Cyc_yyget_EnumfieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1717;}); _temp1716;});
! _temp1715;}); break; case 80: _LL1714: { void* t; switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)])){ case Cyc_Parse_Struct_su:
! _LL1719: t=( void*)({ struct Cyc_Absyn_AnonStructType_struct* _temp1721=( struct
  Cyc_Absyn_AnonStructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AnonStructType_struct));
! _temp1721[ 0]=({ struct Cyc_Absyn_AnonStructType_struct _temp1722; _temp1722.tag=
! Cyc_Absyn_AnonStructType; _temp1722.f1= Cyc_yyget_StructFieldDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1722;});
! _temp1721;}); break; case Cyc_Parse_Union_su: _LL1720: t=( void*)({ struct Cyc_Absyn_AnonUnionType_struct*
! _temp1724=( struct Cyc_Absyn_AnonUnionType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_AnonUnionType_struct)); _temp1724[ 0]=({ struct Cyc_Absyn_AnonUnionType_struct
! _temp1725; _temp1725.tag= Cyc_Absyn_AnonUnionType; _temp1725.f1= Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1725;});
! _temp1724;}); break;} yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1726=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1726[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1727; _temp1727.tag=
! Cyc_TypeSpecifier_tok; _temp1727.f1=( void*)(( void*)({ struct Cyc_Parse_Type_spec_struct*
! _temp1728=( struct Cyc_Parse_Type_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Type_spec_struct));
! _temp1728[ 0]=({ struct Cyc_Parse_Type_spec_struct _temp1729; _temp1729.tag= Cyc_Parse_Type_spec;
! _temp1729.f1=( void*) t; _temp1729.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1729;});
! _temp1728;})); _temp1727;}); _temp1726;}); break;} case 81: _LL1718: { struct
! Cyc_List_List* _temp1731=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)(
  struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env, struct
  Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
***************
*** 3790,3821 ****
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)])); struct Cyc_Absyn_Decl* d; switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)])){ case Cyc_Parse_Struct_su:
! _LL1733: d= Cyc_Absyn_struct_decl(( void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt*
  _temp1735=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1735->v=( void*) Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp1735;}), _temp1732,({ struct Cyc_Core_Opt*
! _temp1736=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1736->v=( void*) Cyc_yyget_StructFieldDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1736;}), 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); break; case Cyc_Parse_Union_su: _LL1734: d= Cyc_Absyn_union_decl((
! void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt* _temp1738=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1738->v=( void*) Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1738;}),
! _temp1732,({ struct Cyc_Core_Opt* _temp1739=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1739->v=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1739;}),
  0, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line)); break;} yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1740=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1740[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1741; _temp1741.tag=
! Cyc_TypeSpecifier_tok; _temp1741.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1742=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1742[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1743; _temp1743.tag= Cyc_Parse_Decl_spec;
! _temp1743.f1= d; _temp1743;}); _temp1742;})); _temp1741;}); _temp1740;}); break;}
! case 82: _LL1731: { struct Cyc_List_List* _temp1745=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
--- 3790,3821 ----
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)])); struct Cyc_Absyn_Decl* d; switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)])){ case Cyc_Parse_Struct_su:
! _LL1732: d= Cyc_Absyn_struct_decl(( void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt*
! _temp1734=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1734->v=( void*) Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp1734;}), _temp1731,({ struct Cyc_Core_Opt*
  _temp1735=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1735->v=( void*) Cyc_yyget_StructFieldDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1735;}), 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); break; case Cyc_Parse_Union_su: _LL1733: d= Cyc_Absyn_union_decl((
! void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt* _temp1737=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1737->v=( void*) Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1737;}),
! _temp1731,({ struct Cyc_Core_Opt* _temp1738=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1738->v=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1738;}),
  0, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line)); break;} yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1739=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1739[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1740; _temp1740.tag=
! Cyc_TypeSpecifier_tok; _temp1740.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1741=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1741[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1742; _temp1742.tag= Cyc_Parse_Decl_spec;
! _temp1742.f1= d; _temp1742;}); _temp1741;})); _temp1740;}); _temp1739;}); break;}
! case 82: _LL1730: { struct Cyc_List_List* _temp1744=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
***************
*** 3823,6832 ****
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)])); struct Cyc_Absyn_Decl* d; switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)])){ case Cyc_Parse_Struct_su:
! _LL1746: d= Cyc_Absyn_struct_decl(( void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt*
  _temp1748=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1748->v=( void*) Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp1748;}), _temp1745,({ struct Cyc_Core_Opt*
! _temp1749=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1749->v=( void*) Cyc_yyget_StructFieldDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1749;}), 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); break; case Cyc_Parse_Union_su: _LL1747: d= Cyc_Absyn_union_decl((
! void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt* _temp1751=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1751->v=( void*) Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1751;}),
! _temp1745,({ struct Cyc_Core_Opt* _temp1752=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1752->v=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1752;}),
  0, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line)); break;} yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1753=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1753[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1754; _temp1754.tag=
! Cyc_TypeSpecifier_tok; _temp1754.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1755=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1755[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1756; _temp1756.tag= Cyc_Parse_Decl_spec;
! _temp1756.f1= d; _temp1756;}); _temp1755;})); _temp1754;}); _temp1753;}); break;}
! case 83: _LL1744: switch( Cyc_yyget_StructOrUnion_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])){ case Cyc_Parse_Struct_su:
! _LL1758: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1760=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1760[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1761; _temp1761.tag=
! Cyc_TypeSpecifier_tok; _temp1761.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_StructType_struct* _temp1762=( struct Cyc_Absyn_StructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct)); _temp1762[ 0]=({ struct
! Cyc_Absyn_StructType_struct _temp1763; _temp1763.tag= Cyc_Absyn_StructType;
! _temp1763.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1763.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1763.f3= 0;
! _temp1763;}); _temp1762;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1761;});
! _temp1760;}); break; case Cyc_Parse_Union_su: _LL1759: yyval=( void*)({ struct
! Cyc_TypeSpecifier_tok_struct* _temp1765=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1765[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1766; _temp1766.tag= Cyc_TypeSpecifier_tok;
! _temp1766.f1=( void*) Cyc_Parse_type_spec(( void*)({ struct Cyc_Absyn_UnionType_struct*
! _temp1767=( struct Cyc_Absyn_UnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct));
! _temp1767[ 0]=({ struct Cyc_Absyn_UnionType_struct _temp1768; _temp1768.tag= Cyc_Absyn_UnionType;
! _temp1768.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1768.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1768.f3= 0;
! _temp1768;}); _temp1767;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1766;});
! _temp1765;}); break;} break; case 84: _LL1757: switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])){ case Cyc_Parse_Struct_su:
! _LL1770: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1772=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1772[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1773; _temp1773.tag=
! Cyc_TypeSpecifier_tok; _temp1773.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_StructType_struct* _temp1774=( struct Cyc_Absyn_StructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct)); _temp1774[ 0]=({ struct
! Cyc_Absyn_StructType_struct _temp1775; _temp1775.tag= Cyc_Absyn_StructType;
! _temp1775.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1775.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1775.f3= 0;
! _temp1775;}); _temp1774;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1773;});
! _temp1772;}); break; case Cyc_Parse_Union_su: _LL1771: yyval=( void*)({ struct
! Cyc_TypeSpecifier_tok_struct* _temp1777=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1777[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1778; _temp1778.tag= Cyc_TypeSpecifier_tok;
! _temp1778.f1=( void*) Cyc_Parse_type_spec(( void*)({ struct Cyc_Absyn_UnionType_struct*
! _temp1779=( struct Cyc_Absyn_UnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct));
! _temp1779[ 0]=({ struct Cyc_Absyn_UnionType_struct _temp1780; _temp1780.tag= Cyc_Absyn_UnionType;
! _temp1780.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1780.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1780.f3= 0;
! _temp1780;}); _temp1779;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1778;});
! _temp1777;}); break;} break; case 85: _LL1769: yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp1782=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp1782[ 0]=({ struct Cyc_TypeList_tok_struct _temp1783; _temp1783.tag= Cyc_TypeList_tok;
! _temp1783.f1= 0; _temp1783;}); _temp1782;}); break; case 86: _LL1781: yyval=(
! void*)({ struct Cyc_TypeList_tok_struct* _temp1785=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp1785[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp1786; _temp1786.tag= Cyc_TypeList_tok; _temp1786.f1= Cyc_List_imp_rev( Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp1786;});
! _temp1785;}); break; case 87: _LL1784:(( struct Cyc_Lexing_lexbuf*)(( struct Cyc_Core_Opt*)
  _check_null( Cyc_Parse_lbuf))->v)->lex_curr_pos -= 1; yyval=( void*)({ struct
! Cyc_TypeList_tok_struct* _temp1788=( struct Cyc_TypeList_tok_struct*) _cycalloc(
! sizeof( struct Cyc_TypeList_tok_struct)); _temp1788[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp1789; _temp1789.tag= Cyc_TypeList_tok; _temp1789.f1= Cyc_List_imp_rev( Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp1789;});
! _temp1788;}); break; case 88: _LL1787: yyval=( void*)({ struct Cyc_StructOrUnion_tok_struct*
! _temp1791=( struct Cyc_StructOrUnion_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StructOrUnion_tok_struct)); _temp1791[ 0]=({ struct Cyc_StructOrUnion_tok_struct
! _temp1792; _temp1792.tag= Cyc_StructOrUnion_tok; _temp1792.f1= Cyc_Parse_Struct_su;
! _temp1792;}); _temp1791;}); break; case 89: _LL1790: yyval=( void*)({ struct Cyc_StructOrUnion_tok_struct*
! _temp1794=( struct Cyc_StructOrUnion_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StructOrUnion_tok_struct)); _temp1794[ 0]=({ struct Cyc_StructOrUnion_tok_struct
! _temp1795; _temp1795.tag= Cyc_StructOrUnion_tok; _temp1795.f1= Cyc_Parse_Union_su;
! _temp1795;}); _temp1794;}); break; case 90: _LL1793: yyval=( void*)({ struct Cyc_StructFieldDeclList_tok_struct*
! _temp1797=( struct Cyc_StructFieldDeclList_tok_struct*) _cycalloc( sizeof(
! struct Cyc_StructFieldDeclList_tok_struct)); _temp1797[ 0]=({ struct Cyc_StructFieldDeclList_tok_struct
! _temp1798; _temp1798.tag= Cyc_StructFieldDeclList_tok; _temp1798.f1=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_flatten)((( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_StructFieldDeclListList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))); _temp1798;});
! _temp1797;}); break; case 91: _LL1796: yyval=( void*)({ struct Cyc_StructFieldDeclListList_tok_struct*
! _temp1800=( struct Cyc_StructFieldDeclListList_tok_struct*) _cycalloc( sizeof(
! struct Cyc_StructFieldDeclListList_tok_struct)); _temp1800[ 0]=({ struct Cyc_StructFieldDeclListList_tok_struct
! _temp1801; _temp1801.tag= Cyc_StructFieldDeclListList_tok; _temp1801.f1=({
! struct Cyc_List_List* _temp1802=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1802->hd=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1802->tl= 0;
! _temp1802;}); _temp1801;}); _temp1800;}); break; case 92: _LL1799: yyval=( void*)({
! struct Cyc_StructFieldDeclListList_tok_struct* _temp1804=( struct Cyc_StructFieldDeclListList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_StructFieldDeclListList_tok_struct)); _temp1804[ 0]=({
! struct Cyc_StructFieldDeclListList_tok_struct _temp1805; _temp1805.tag= Cyc_StructFieldDeclListList_tok;
! _temp1805.f1=({ struct Cyc_List_List* _temp1806=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1806->hd=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1806->tl=
  Cyc_yyget_StructFieldDeclListList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp1806;}); _temp1805;}); _temp1804;}); break;
! case 93: _LL1803: yyval=( void*)({ struct Cyc_InitDeclList_tok_struct* _temp1808=(
  struct Cyc_InitDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct));
! _temp1808[ 0]=({ struct Cyc_InitDeclList_tok_struct _temp1809; _temp1809.tag=
! Cyc_InitDeclList_tok; _temp1809.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_InitDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp1809;});
! _temp1808;}); break; case 94: _LL1807: yyval=( void*)({ struct Cyc_InitDeclList_tok_struct*
! _temp1811=( struct Cyc_InitDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct));
! _temp1811[ 0]=({ struct Cyc_InitDeclList_tok_struct _temp1812; _temp1812.tag=
! Cyc_InitDeclList_tok; _temp1812.f1=({ struct Cyc_List_List* _temp1813=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1813->hd=( void*)
  Cyc_yyget_InitDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1813->tl= 0; _temp1813;}); _temp1812;}); _temp1811;});
! break; case 95: _LL1810: yyval=( void*)({ struct Cyc_InitDeclList_tok_struct*
! _temp1815=( struct Cyc_InitDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct));
! _temp1815[ 0]=({ struct Cyc_InitDeclList_tok_struct _temp1816; _temp1816.tag=
! Cyc_InitDeclList_tok; _temp1816.f1=({ struct Cyc_List_List* _temp1817=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1817->hd=( void*)
  Cyc_yyget_InitDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1817->tl= Cyc_yyget_InitDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1817;});
! _temp1816;}); _temp1815;}); break; case 96: _LL1814: yyval=( void*)({ struct Cyc_InitDecl_tok_struct*
! _temp1819=( struct Cyc_InitDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct));
! _temp1819[ 0]=({ struct Cyc_InitDecl_tok_struct _temp1820; _temp1820.tag= Cyc_InitDecl_tok;
! _temp1820.f1=({ struct _tuple14* _temp1821=( struct _tuple14*) _cycalloc(
! sizeof( struct _tuple14)); _temp1821->f1= Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1821->f2= 0;
! _temp1821;}); _temp1820;}); _temp1819;}); break; case 97: _LL1818: yyval=( void*)({
! struct Cyc_InitDecl_tok_struct* _temp1823=( struct Cyc_InitDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct)); _temp1823[ 0]=({ struct Cyc_InitDecl_tok_struct
! _temp1824; _temp1824.tag= Cyc_InitDecl_tok; _temp1824.f1=({ struct _tuple14*
! _temp1825=( struct _tuple14*) _cycalloc( sizeof( struct _tuple14)); _temp1825->f1=
  Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1825->f2=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1825;});
! _temp1824;}); _temp1823;}); break; case 98: _LL1822: { struct _tuple17 _temp1829;
! struct Cyc_List_List* _temp1830; struct Cyc_List_List* _temp1832; struct Cyc_Absyn_Tqual
! _temp1834; struct _tuple17* _temp1827= Cyc_yyget_QualSpecList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1829=*
! _temp1827; _LL1835: _temp1834= _temp1829.f1; goto _LL1833; _LL1833: _temp1832=
! _temp1829.f2; goto _LL1831; _LL1831: _temp1830= _temp1829.f3; goto _LL1828;
! _LL1828: { struct Cyc_List_List* _temp1838; struct Cyc_List_List* _temp1840;
! struct _tuple0 _temp1836=(( struct _tuple0(*)( struct Cyc_List_List* x)) Cyc_List_split)(
  Cyc_yyget_InitDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)])); _LL1841: _temp1840= _temp1836.f1; goto _LL1839; _LL1839:
! _temp1838= _temp1836.f2; goto _LL1837; _LL1837: { void* _temp1842= Cyc_Parse_speclist2typ(
! _temp1832, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset -  2)]).last_line)); struct Cyc_List_List* _temp1843=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)(
! Cyc_Parse_apply_tmss( _temp1834, _temp1842, _temp1840, _temp1830), _temp1838);
! yyval=( void*)({ struct Cyc_StructFieldDeclList_tok_struct* _temp1844=( struct
  Cyc_StructFieldDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_StructFieldDeclList_tok_struct));
! _temp1844[ 0]=({ struct Cyc_StructFieldDeclList_tok_struct _temp1845; _temp1845.tag=
! Cyc_StructFieldDeclList_tok; _temp1845.f1=(( struct Cyc_List_List*(*)( struct
  Cyc_Absyn_Structfield*(* f)( struct Cyc_Position_Segment*, struct _tuple9*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_make_struct_field,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line), _temp1843); _temp1845;}); _temp1844;}); break;}}}
! case 99: _LL1826: yyval=( void*)({ struct Cyc_QualSpecList_tok_struct* _temp1847=(
  struct Cyc_QualSpecList_tok_struct*) _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct));
! _temp1847[ 0]=({ struct Cyc_QualSpecList_tok_struct _temp1848; _temp1848.tag=
! Cyc_QualSpecList_tok; _temp1848.f1=({ struct _tuple17* _temp1849=( struct
! _tuple17*) _cycalloc( sizeof( struct _tuple17)); _temp1849->f1= Cyc_Absyn_empty_tqual();
! _temp1849->f2=({ struct Cyc_List_List* _temp1850=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1850->hd=( void*) Cyc_yyget_TypeSpecifier_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1850->tl=
! 0; _temp1850;}); _temp1849->f3= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1849;}); _temp1848;});
! _temp1847;}); break; case 100: _LL1846: yyval=( void*)({ struct Cyc_QualSpecList_tok_struct*
! _temp1852=( struct Cyc_QualSpecList_tok_struct*) _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct));
! _temp1852[ 0]=({ struct Cyc_QualSpecList_tok_struct _temp1853; _temp1853.tag=
! Cyc_QualSpecList_tok; _temp1853.f1=({ struct _tuple17* _temp1854=( struct
! _tuple17*) _cycalloc( sizeof( struct _tuple17)); _temp1854->f1=(* Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1; _temp1854->f2=({
! struct Cyc_List_List* _temp1855=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1855->hd=( void*) Cyc_yyget_TypeSpecifier_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1855->tl=(*
  Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])).f2; _temp1855;}); _temp1854->f3= Cyc_List_append( Cyc_yyget_AttributeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),(* Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f3); _temp1854;});
! _temp1853;}); _temp1852;}); break; case 101: _LL1851: yyval=( void*)({ struct
! Cyc_QualSpecList_tok_struct* _temp1857=( struct Cyc_QualSpecList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct)); _temp1857[ 0]=({ struct
! Cyc_QualSpecList_tok_struct _temp1858; _temp1858.tag= Cyc_QualSpecList_tok;
! _temp1858.f1=({ struct _tuple17* _temp1859=( struct _tuple17*) _cycalloc(
! sizeof( struct _tuple17)); _temp1859->f1= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1859->f2= 0;
! _temp1859->f3= Cyc_yyget_AttributeList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1859;}); _temp1858;}); _temp1857;}); break; case
! 102: _LL1856: yyval=( void*)({ struct Cyc_QualSpecList_tok_struct* _temp1861=(
  struct Cyc_QualSpecList_tok_struct*) _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct));
! _temp1861[ 0]=({ struct Cyc_QualSpecList_tok_struct _temp1862; _temp1862.tag=
! Cyc_QualSpecList_tok; _temp1862.f1=({ struct _tuple17* _temp1863=( struct
! _tuple17*) _cycalloc( sizeof( struct _tuple17)); _temp1863->f1= Cyc_Absyn_combine_tqual(
  Cyc_yyget_TypeQual_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]),(* Cyc_yyget_QualSpecList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1); _temp1863->f2=(*
  Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])).f2; _temp1863->f3= Cyc_List_append( Cyc_yyget_AttributeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),(* Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f3); _temp1863;});
! _temp1862;}); _temp1861;}); break; case 103: _LL1860: yyval=( void*)({ struct
! Cyc_InitDeclList_tok_struct* _temp1865=( struct Cyc_InitDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct)); _temp1865[ 0]=({ struct
! Cyc_InitDeclList_tok_struct _temp1866; _temp1866.tag= Cyc_InitDeclList_tok;
! _temp1866.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  Cyc_yyget_InitDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])); _temp1866;}); _temp1865;}); break; case 104: _LL1864: yyval=(
! void*)({ struct Cyc_InitDeclList_tok_struct* _temp1868=( struct Cyc_InitDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct)); _temp1868[ 0]=({ struct
! Cyc_InitDeclList_tok_struct _temp1869; _temp1869.tag= Cyc_InitDeclList_tok;
! _temp1869.f1=({ struct Cyc_List_List* _temp1870=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1870->hd=( void*) Cyc_yyget_InitDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1870->tl= 0;
! _temp1870;}); _temp1869;}); _temp1868;}); break; case 105: _LL1867: yyval=( void*)({
! struct Cyc_InitDeclList_tok_struct* _temp1872=( struct Cyc_InitDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct)); _temp1872[ 0]=({ struct
! Cyc_InitDeclList_tok_struct _temp1873; _temp1873.tag= Cyc_InitDeclList_tok;
! _temp1873.f1=({ struct Cyc_List_List* _temp1874=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1874->hd=( void*) Cyc_yyget_InitDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1874->tl=
  Cyc_yyget_InitDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1874;}); _temp1873;}); _temp1872;}); break; case 106:
! _LL1871: yyval=( void*)({ struct Cyc_InitDecl_tok_struct* _temp1876=( struct Cyc_InitDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct)); _temp1876[ 0]=({ struct Cyc_InitDecl_tok_struct
! _temp1877; _temp1877.tag= Cyc_InitDecl_tok; _temp1877.f1=({ struct _tuple14*
! _temp1878=( struct _tuple14*) _cycalloc( sizeof( struct _tuple14)); _temp1878->f1=
  Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1878->f2= 0; _temp1878;}); _temp1877;}); _temp1876;});
! break; case 107: _LL1875: yyval=( void*)({ struct Cyc_InitDecl_tok_struct*
! _temp1880=( struct Cyc_InitDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct));
! _temp1880[ 0]=({ struct Cyc_InitDecl_tok_struct _temp1881; _temp1881.tag= Cyc_InitDecl_tok;
! _temp1881.f1=({ struct _tuple14* _temp1882=( struct _tuple14*) _cycalloc(
! sizeof( struct _tuple14)); _temp1882->f1=({ struct Cyc_Parse_Declarator*
! _temp1883=( struct Cyc_Parse_Declarator*) _cycalloc( sizeof( struct Cyc_Parse_Declarator));
! _temp1883->id=({ struct _tuple1* _temp1884=( struct _tuple1*) _cycalloc( sizeof(
! struct _tuple1)); _temp1884->f1= Cyc_Absyn_rel_ns_null; _temp1884->f2=
  _init_tag_arr(( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)),"",
! sizeof( unsigned char), 1u); _temp1884;}); _temp1883->tms= 0; _temp1883;});
! _temp1882->f2=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1882;}); _temp1881;});
! _temp1880;}); break; case 108: _LL1879: yyval=( void*)({ struct Cyc_InitDecl_tok_struct*
! _temp1886=( struct Cyc_InitDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct));
! _temp1886[ 0]=({ struct Cyc_InitDecl_tok_struct _temp1887; _temp1887.tag= Cyc_InitDecl_tok;
! _temp1887.f1=({ struct _tuple14* _temp1888=( struct _tuple14*) _cycalloc(
! sizeof( struct _tuple14)); _temp1888->f1= Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1888->f2=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1888;}); _temp1887;}); _temp1886;}); break; case
! 109: _LL1885: { struct Cyc_List_List* _temp1890=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line),
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)])); yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1891=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1891[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1892; _temp1892.tag=
! Cyc_TypeSpecifier_tok; _temp1892.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1893=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1893[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1894; _temp1894.tag= Cyc_Parse_Decl_spec;
! _temp1894.f1= Cyc_Absyn_tunion_decl(( void*) Cyc_Absyn_Public, Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), _temp1890,({
! struct Cyc_Core_Opt* _temp1895=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1895->v=( void*) Cyc_yyget_TunionFieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1895;}), Cyc_yyget_Bool_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1894;}); _temp1893;})); _temp1892;}); _temp1891;}); break;} case 110:
! _LL1889: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1897=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1897[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1898; _temp1898.tag=
! Cyc_TypeSpecifier_tok; _temp1898.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TunionType_struct* _temp1899=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp1899[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp1900; _temp1900.tag= Cyc_Absyn_TunionType;
! _temp1900.f1=({ struct Cyc_Absyn_TunionInfo _temp1901; _temp1901.tunion_info=(
! void*)(( void*)({ struct Cyc_Absyn_UnknownTunion_struct* _temp1902=( struct Cyc_Absyn_UnknownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownTunion_struct)); _temp1902[ 0]=({
! struct Cyc_Absyn_UnknownTunion_struct _temp1903; _temp1903.tag= Cyc_Absyn_UnknownTunion;
! _temp1903.f1=({ struct Cyc_Absyn_UnknownTunionInfo _temp1904; _temp1904.name=
  Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
! -  1)]); _temp1904.is_xtunion= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp1904;});
! _temp1903;}); _temp1902;})); _temp1901.targs= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1901.rgn=( void*)
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
! 2)]); _temp1901;}); _temp1900;}); _temp1899;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1898;}); _temp1897;}); break; case 111: _LL1896: yyval=( void*)({ struct
! Cyc_TypeSpecifier_tok_struct* _temp1906=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1906[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1907; _temp1907.tag= Cyc_TypeSpecifier_tok;
! _temp1907.f1=( void*) Cyc_Parse_type_spec(( void*)({ struct Cyc_Absyn_TunionType_struct*
! _temp1908=( struct Cyc_Absyn_TunionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct));
! _temp1908[ 0]=({ struct Cyc_Absyn_TunionType_struct _temp1909; _temp1909.tag=
! Cyc_Absyn_TunionType; _temp1909.f1=({ struct Cyc_Absyn_TunionInfo _temp1910;
! _temp1910.tunion_info=( void*)(( void*)({ struct Cyc_Absyn_UnknownTunion_struct*
! _temp1911=( struct Cyc_Absyn_UnknownTunion_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownTunion_struct)); _temp1911[ 0]=({ struct Cyc_Absyn_UnknownTunion_struct
! _temp1912; _temp1912.tag= Cyc_Absyn_UnknownTunion; _temp1912.f1=({ struct Cyc_Absyn_UnknownTunionInfo
! _temp1913; _temp1913.name= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1913.is_xtunion=
  Cyc_yyget_Bool_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
! 2)]); _temp1913;}); _temp1912;}); _temp1911;})); _temp1910.targs= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1910.rgn=(
! void*)(( void*) Cyc_Absyn_HeapRgn); _temp1910;}); _temp1909;}); _temp1908;}),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1907;}); _temp1906;}); break; case 112:
! _LL1905: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1915=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1915[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1916; _temp1916.tag=
! Cyc_TypeSpecifier_tok; _temp1916.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TunionFieldType_struct* _temp1917=( struct Cyc_Absyn_TunionFieldType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionFieldType_struct)); _temp1917[ 0]=({
! struct Cyc_Absyn_TunionFieldType_struct _temp1918; _temp1918.tag= Cyc_Absyn_TunionFieldType;
! _temp1918.f1=({ struct Cyc_Absyn_TunionFieldInfo _temp1919; _temp1919.field_info=(
! void*)(( void*)({ struct Cyc_Absyn_UnknownTunionfield_struct* _temp1920=( struct
  Cyc_Absyn_UnknownTunionfield_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownTunionfield_struct));
! _temp1920[ 0]=({ struct Cyc_Absyn_UnknownTunionfield_struct _temp1921; _temp1921.tag=
! Cyc_Absyn_UnknownTunionfield; _temp1921.f1=({ struct Cyc_Absyn_UnknownTunionFieldInfo
! _temp1922; _temp1922.tunion_name= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp1922.field_name=
  Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
! -  1)]); _temp1922.is_xtunion= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1922;});
! _temp1921;}); _temp1920;})); _temp1919.targs= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1919;}); _temp1918;});
! _temp1917;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp1916;}); _temp1915;}); break; case 113:
! _LL1914: yyval=( void*)({ struct Cyc_Bool_tok_struct* _temp1924=( struct Cyc_Bool_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_Bool_tok_struct)); _temp1924[ 0]=({ struct
! Cyc_Bool_tok_struct _temp1925; _temp1925.tag= Cyc_Bool_tok; _temp1925.f1= 0;
! _temp1925;}); _temp1924;}); break; case 114: _LL1923: yyval=( void*)({ struct
! Cyc_Bool_tok_struct* _temp1927=( struct Cyc_Bool_tok_struct*) _cycalloc_atomic(
! sizeof( struct Cyc_Bool_tok_struct)); _temp1927[ 0]=({ struct Cyc_Bool_tok_struct
! _temp1928; _temp1928.tag= Cyc_Bool_tok; _temp1928.f1= 1; _temp1928;}); _temp1927;});
! break; case 115: _LL1926: yyval=( void*)({ struct Cyc_TunionFieldList_tok_struct*
! _temp1930=( struct Cyc_TunionFieldList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_TunionFieldList_tok_struct)); _temp1930[ 0]=({ struct Cyc_TunionFieldList_tok_struct
! _temp1931; _temp1931.tag= Cyc_TunionFieldList_tok; _temp1931.f1=({ struct Cyc_List_List*
! _temp1932=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1932->hd=( void*) Cyc_yyget_TunionField_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1932->tl= 0;
! _temp1932;}); _temp1931;}); _temp1930;}); break; case 116: _LL1929: yyval=( void*)({
! struct Cyc_TunionFieldList_tok_struct* _temp1934=( struct Cyc_TunionFieldList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TunionFieldList_tok_struct)); _temp1934[ 0]=({
! struct Cyc_TunionFieldList_tok_struct _temp1935; _temp1935.tag= Cyc_TunionFieldList_tok;
! _temp1935.f1=({ struct Cyc_List_List* _temp1936=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1936->hd=( void*) Cyc_yyget_TunionField_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1936->tl=
! 0; _temp1936;}); _temp1935;}); _temp1934;}); break; case 117: _LL1933: yyval=(
! void*)({ struct Cyc_TunionFieldList_tok_struct* _temp1938=( struct Cyc_TunionFieldList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TunionFieldList_tok_struct)); _temp1938[ 0]=({
! struct Cyc_TunionFieldList_tok_struct _temp1939; _temp1939.tag= Cyc_TunionFieldList_tok;
! _temp1939.f1=({ struct Cyc_List_List* _temp1940=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1940->hd=( void*) Cyc_yyget_TunionField_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1940->tl=
  Cyc_yyget_TunionFieldList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1940;}); _temp1939;}); _temp1938;}); break; case 118:
! _LL1937: yyval=( void*)({ struct Cyc_TunionFieldList_tok_struct* _temp1942=(
  struct Cyc_TunionFieldList_tok_struct*) _cycalloc( sizeof( struct Cyc_TunionFieldList_tok_struct));
! _temp1942[ 0]=({ struct Cyc_TunionFieldList_tok_struct _temp1943; _temp1943.tag=
! Cyc_TunionFieldList_tok; _temp1943.f1=({ struct Cyc_List_List* _temp1944=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1944->hd=(
  void*) Cyc_yyget_TunionField_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1944->tl= Cyc_yyget_TunionFieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1944;}); _temp1943;});
! _temp1942;}); break; case 119: _LL1941: yyval=( void*)({ struct Cyc_Scope_tok_struct*
! _temp1946=( struct Cyc_Scope_tok_struct*) _cycalloc( sizeof( struct Cyc_Scope_tok_struct));
! _temp1946[ 0]=({ struct Cyc_Scope_tok_struct _temp1947; _temp1947.tag= Cyc_Scope_tok;
! _temp1947.f1=( void*)(( void*) Cyc_Absyn_Public); _temp1947;}); _temp1946;});
! break; case 120: _LL1945: yyval=( void*)({ struct Cyc_Scope_tok_struct*
! _temp1949=( struct Cyc_Scope_tok_struct*) _cycalloc( sizeof( struct Cyc_Scope_tok_struct));
! _temp1949[ 0]=({ struct Cyc_Scope_tok_struct _temp1950; _temp1950.tag= Cyc_Scope_tok;
! _temp1950.f1=( void*)(( void*) Cyc_Absyn_Extern); _temp1950;}); _temp1949;});
! break; case 121: _LL1948: yyval=( void*)({ struct Cyc_Scope_tok_struct*
! _temp1952=( struct Cyc_Scope_tok_struct*) _cycalloc( sizeof( struct Cyc_Scope_tok_struct));
! _temp1952[ 0]=({ struct Cyc_Scope_tok_struct _temp1953; _temp1953.tag= Cyc_Scope_tok;
! _temp1953.f1=( void*)(( void*) Cyc_Absyn_Static); _temp1953;}); _temp1952;});
! break; case 122: _LL1951: yyval=( void*)({ struct Cyc_TunionField_tok_struct*
! _temp1955=( struct Cyc_TunionField_tok_struct*) _cycalloc( sizeof( struct Cyc_TunionField_tok_struct));
! _temp1955[ 0]=({ struct Cyc_TunionField_tok_struct _temp1956; _temp1956.tag= Cyc_TunionField_tok;
! _temp1956.f1=({ struct Cyc_Absyn_Tunionfield* _temp1957=( struct Cyc_Absyn_Tunionfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield)); _temp1957->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1957->tvs= 0;
! _temp1957->typs= 0; _temp1957->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1957->sc=(
  void*) Cyc_yyget_Scope_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp1957;}); _temp1956;}); _temp1955;}); break; case 123:
! _LL1954: { struct Cyc_List_List* _temp1959=(( struct Cyc_List_List*(*)( struct
  _tuple11*(* f)( struct Cyc_Position_Segment*, struct _tuple2*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_get_tqual_typ, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line),((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))); struct Cyc_List_List*
! _temp1960=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
  Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line), Cyc_yyget_TypeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)])); yyval=(
! void*)({ struct Cyc_TunionField_tok_struct* _temp1961=( struct Cyc_TunionField_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TunionField_tok_struct)); _temp1961[ 0]=({ struct
! Cyc_TunionField_tok_struct _temp1962; _temp1962.tag= Cyc_TunionField_tok;
! _temp1962.f1=({ struct Cyc_Absyn_Tunionfield* _temp1963=( struct Cyc_Absyn_Tunionfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield)); _temp1963->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1963->tvs=
! _temp1960; _temp1963->typs= _temp1959; _temp1963->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line);
! _temp1963->sc=( void*) Cyc_yyget_Scope_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  5)]); _temp1963;}); _temp1962;}); _temp1961;}); break;}
! case 124: _LL1958: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 125: _LL1964: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp1966=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp1966[ 0]=({ struct Cyc_Declarator_tok_struct _temp1967; _temp1967.tag= Cyc_Declarator_tok;
! _temp1967.f1=({ struct Cyc_Parse_Declarator* _temp1968=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1968->id=( Cyc_yyget_Declarator_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->id; _temp1968->tms=
  Cyc_List_imp_append( Cyc_yyget_TypeModifierList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_Declarator_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms); _temp1968;});
! _temp1967;}); _temp1966;}); break; case 126: _LL1965: yyval=( void*)({ struct
! Cyc_Declarator_tok_struct* _temp1970=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp1970[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp1971; _temp1971.tag= Cyc_Declarator_tok;
! _temp1971.f1=({ struct Cyc_Parse_Declarator* _temp1972=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1972->id= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1972->tms= 0;
! _temp1972;}); _temp1971;}); _temp1970;}); break; case 127: _LL1969: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 128:
! _LL1973: yyval=( void*)({ struct Cyc_Declarator_tok_struct* _temp1975=( struct
  Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp1975[ 0]=({ struct Cyc_Declarator_tok_struct _temp1976; _temp1976.tag= Cyc_Declarator_tok;
! _temp1976.f1=({ struct Cyc_Parse_Declarator* _temp1977=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1977->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]))->id;
! _temp1977->tms=({ struct Cyc_List_List* _temp1978=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1978->hd=( void*)(( void*) Cyc_Absyn_Carray_mod);
! _temp1978->tl=( Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]))->tms; _temp1978;}); _temp1977;}); _temp1976;});
! _temp1975;}); break; case 129: _LL1974: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp1980=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp1980[ 0]=({ struct Cyc_Declarator_tok_struct _temp1981; _temp1981.tag= Cyc_Declarator_tok;
! _temp1981.f1=({ struct Cyc_Parse_Declarator* _temp1982=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1982->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp1982->tms=({ struct Cyc_List_List* _temp1983=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1983->hd=( void*)(( void*)({
! struct Cyc_Absyn_ConstArray_mod_struct* _temp1984=( struct Cyc_Absyn_ConstArray_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ConstArray_mod_struct)); _temp1984[ 0]=({
! struct Cyc_Absyn_ConstArray_mod_struct _temp1985; _temp1985.tag= Cyc_Absyn_ConstArray_mod;
! _temp1985.f1= Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp1985;}); _temp1984;})); _temp1983->tl=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp1983;}); _temp1982;}); _temp1981;}); _temp1980;}); break; case 130: _LL1979: {
! struct _tuple16 _temp1989; struct Cyc_List_List* _temp1990; struct Cyc_Core_Opt*
! _temp1992; struct Cyc_Absyn_VarargInfo* _temp1994; int _temp1996; struct Cyc_List_List*
! _temp1998; struct _tuple16* _temp1987= Cyc_yyget_YY1( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1989=*
! _temp1987; _LL1999: _temp1998= _temp1989.f1; goto _LL1997; _LL1997: _temp1996=
! _temp1989.f2; goto _LL1995; _LL1995: _temp1994= _temp1989.f3; goto _LL1993;
! _LL1993: _temp1992= _temp1989.f4; goto _LL1991; _LL1991: _temp1990= _temp1989.f5;
! goto _LL1988; _LL1988: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp2000=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp2000[ 0]=({ struct Cyc_Declarator_tok_struct _temp2001; _temp2001.tag= Cyc_Declarator_tok;
! _temp2001.f1=({ struct Cyc_Parse_Declarator* _temp2002=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2002->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2002->tms=({ struct Cyc_List_List* _temp2003=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2003->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2004=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2004[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2005; _temp2005.tag= Cyc_Absyn_Function_mod;
! _temp2005.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2006=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2006[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2007; _temp2007.tag= Cyc_Absyn_WithTypes;
! _temp2007.f1= _temp1998; _temp2007.f2= _temp1996; _temp2007.f3= _temp1994;
! _temp2007.f4= _temp1992; _temp2007.f5= _temp1990; _temp2007;}); _temp2006;}));
! _temp2005;}); _temp2004;})); _temp2003->tl=( Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms; _temp2003;});
! _temp2002;}); _temp2001;}); _temp2000;}); break;} case 131: _LL1986: yyval=(
! void*)({ struct Cyc_Declarator_tok_struct* _temp2009=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2009[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2010; _temp2010.tag= Cyc_Declarator_tok;
! _temp2010.f1=({ struct Cyc_Parse_Declarator* _temp2011=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2011->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]))->id;
! _temp2011->tms=({ struct Cyc_List_List* _temp2012=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2012->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2013=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2013[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2014; _temp2014.tag= Cyc_Absyn_Function_mod;
! _temp2014.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2015=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2015[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2016; _temp2016.tag= Cyc_Absyn_WithTypes;
! _temp2016.f1= 0; _temp2016.f2= 0; _temp2016.f3= 0; _temp2016.f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2016.f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2016;}); _temp2015;})); _temp2014;}); _temp2013;}));
! _temp2012->tl=( Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]))->tms; _temp2012;}); _temp2011;}); _temp2010;});
! _temp2009;}); break; case 132: _LL2008: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp2018=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp2018[ 0]=({ struct Cyc_Declarator_tok_struct _temp2019; _temp2019.tag= Cyc_Declarator_tok;
! _temp2019.f1=({ struct Cyc_Parse_Declarator* _temp2020=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2020->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2020->tms=({ struct Cyc_List_List* _temp2021=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2021->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2022=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2022[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2023; _temp2023.tag= Cyc_Absyn_Function_mod;
! _temp2023.f1=( void*)(( void*)({ struct Cyc_Absyn_NoTypes_struct* _temp2024=(
  struct Cyc_Absyn_NoTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_NoTypes_struct));
! _temp2024[ 0]=({ struct Cyc_Absyn_NoTypes_struct _temp2025; _temp2025.tag= Cyc_Absyn_NoTypes;
! _temp2025.f1= Cyc_yyget_IdList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2025.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2025;});
! _temp2024;})); _temp2023;}); _temp2022;})); _temp2021->tl=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2021;}); _temp2020;}); _temp2019;}); _temp2018;}); break; case 133: _LL2017: {
! struct Cyc_List_List* _temp2027=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(*
  f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp2028=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp2028[ 0]=({ struct Cyc_Declarator_tok_struct _temp2029; _temp2029.tag= Cyc_Declarator_tok;
! _temp2029.f1=({ struct Cyc_Parse_Declarator* _temp2030=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2030->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2030->tms=({ struct Cyc_List_List* _temp2031=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2031->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2032=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2032[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2033; _temp2033.tag= Cyc_Absyn_TypeParams_mod;
! _temp2033.f1= _temp2027; _temp2033.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2033.f3=
! 0; _temp2033;}); _temp2032;})); _temp2031->tl=( Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms; _temp2031;});
! _temp2030;}); _temp2029;}); _temp2028;}); break;} case 134: _LL2026:(( struct
  Cyc_Lexing_lexbuf*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Parse_lbuf))->v)->lex_curr_pos
! -= 1;{ struct Cyc_List_List* _temp2035=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(*
  f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp2036=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp2036[ 0]=({ struct Cyc_Declarator_tok_struct _temp2037; _temp2037.tag= Cyc_Declarator_tok;
! _temp2037.f1=({ struct Cyc_Parse_Declarator* _temp2038=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2038->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2038->tms=({ struct Cyc_List_List* _temp2039=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2039->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2040=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2040[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2041; _temp2041.tag= Cyc_Absyn_TypeParams_mod;
! _temp2041.f1= _temp2035; _temp2041.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2041.f3=
! 0; _temp2041;}); _temp2040;})); _temp2039->tl=( Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms; _temp2039;});
! _temp2038;}); _temp2037;}); _temp2036;}); break;} case 135: _LL2034: yyval=(
! void*)({ struct Cyc_Declarator_tok_struct* _temp2043=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2043[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2044; _temp2044.tag= Cyc_Declarator_tok;
! _temp2044.f1=({ struct Cyc_Parse_Declarator* _temp2045=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2045->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))->id;
! _temp2045->tms=({ struct Cyc_List_List* _temp2046=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2046->hd=( void*)(( void*)({
! struct Cyc_Absyn_Attributes_mod_struct* _temp2047=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp2047[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp2048; _temp2048.tag= Cyc_Absyn_Attributes_mod;
! _temp2048.f1= Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp2048.f2= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2048;}); _temp2047;}));
! _temp2046->tl=( Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]))->tms; _temp2046;}); _temp2045;}); _temp2044;});
! _temp2043;}); break; case 136: _LL2042: Cyc_Parse_err( _tag_arr("identifier has not been declared as a typedef",
  sizeof( unsigned char), 46u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line)); yyval=(
! void*)({ struct Cyc_Declarator_tok_struct* _temp2050=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2050[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2051; _temp2051.tag= Cyc_Declarator_tok;
! _temp2051.f1=({ struct Cyc_Parse_Declarator* _temp2052=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2052->id= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2052->tms= 0;
! _temp2052;}); _temp2051;}); _temp2050;}); break; case 137: _LL2049: yyval=( void*)({
! struct Cyc_Declarator_tok_struct* _temp2054=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2054[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2055; _temp2055.tag= Cyc_Declarator_tok;
! _temp2055.f1=({ struct Cyc_Parse_Declarator* _temp2056=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2056->id= Cyc_Absyn_exn_name;
! _temp2056->tms= 0; _temp2056;}); _temp2055;}); _temp2054;}); break; case 138:
! _LL2053: yyval=( void*)({ struct Cyc_TypeModifierList_tok_struct* _temp2058=(
  struct Cyc_TypeModifierList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct));
! _temp2058[ 0]=({ struct Cyc_TypeModifierList_tok_struct _temp2059; _temp2059.tag=
! Cyc_TypeModifierList_tok; _temp2059.f1=({ struct Cyc_List_List* _temp2060=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2060->hd=(
! void*)(( void*)({ struct Cyc_Absyn_Pointer_mod_struct* _temp2061=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2061[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2062; _temp2062.tag= Cyc_Absyn_Pointer_mod;
! _temp2062.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2062.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2062.f3= Cyc_Absyn_empty_tqual(); _temp2062;});
! _temp2061;})); _temp2060->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), 0); _temp2060;});
! _temp2059;}); _temp2058;}); break; case 139: _LL2057: yyval=( void*)({ struct
! Cyc_TypeModifierList_tok_struct* _temp2064=( struct Cyc_TypeModifierList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct)); _temp2064[ 0]=({
! struct Cyc_TypeModifierList_tok_struct _temp2065; _temp2065.tag= Cyc_TypeModifierList_tok;
! _temp2065.f1=({ struct Cyc_List_List* _temp2066=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2066->hd=( void*)(( void*)({
! struct Cyc_Absyn_Pointer_mod_struct* _temp2067=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2067[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2068; _temp2068.tag= Cyc_Absyn_Pointer_mod;
! _temp2068.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2068.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2068.f3= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2068;}); _temp2067;}));
! _temp2066->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line), Cyc_yyget_AttributeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), 0);
! _temp2066;}); _temp2065;}); _temp2064;}); break; case 140: _LL2063: yyval=( void*)({
! struct Cyc_TypeModifierList_tok_struct* _temp2070=( struct Cyc_TypeModifierList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct)); _temp2070[ 0]=({
! struct Cyc_TypeModifierList_tok_struct _temp2071; _temp2071.tag= Cyc_TypeModifierList_tok;
! _temp2071.f1=({ struct Cyc_List_List* _temp2072=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2072->hd=( void*)(( void*)({
! struct Cyc_Absyn_Pointer_mod_struct* _temp2073=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2073[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2074; _temp2074.tag= Cyc_Absyn_Pointer_mod;
! _temp2074.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2074.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2074.f3= Cyc_Absyn_empty_tqual(); _temp2074;});
! _temp2073;})); _temp2072->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line),
  Cyc_yyget_AttributeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), Cyc_yyget_TypeModifierList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2072;});
! _temp2071;}); _temp2070;}); break; case 141: _LL2069: yyval=( void*)({ struct
! Cyc_TypeModifierList_tok_struct* _temp2076=( struct Cyc_TypeModifierList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct)); _temp2076[ 0]=({
! struct Cyc_TypeModifierList_tok_struct _temp2077; _temp2077.tag= Cyc_TypeModifierList_tok;
! _temp2077.f1=({ struct Cyc_List_List* _temp2078=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2078->hd=( void*)(( void*)({
! struct Cyc_Absyn_Pointer_mod_struct* _temp2079=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2079[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2080; _temp2080.tag= Cyc_Absyn_Pointer_mod;
! _temp2080.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp2080.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp2080.f3= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2080;});
! _temp2079;})); _temp2078->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line),
  Cyc_yyget_AttributeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_TypeModifierList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2078;});
! _temp2077;}); _temp2076;}); break; case 142: _LL2075: yyval=( void*)({ struct
! Cyc_Pointer_Sort_tok_struct* _temp2082=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2082[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2083; _temp2083.tag= Cyc_Pointer_Sort_tok;
! _temp2083.f1=( void*)(( void*)({ struct Cyc_Absyn_Nullable_ps_struct* _temp2084=(
  struct Cyc_Absyn_Nullable_ps_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Nullable_ps_struct));
! _temp2084[ 0]=({ struct Cyc_Absyn_Nullable_ps_struct _temp2085; _temp2085.tag=
! Cyc_Absyn_Nullable_ps; _temp2085.f1= Cyc_Absyn_exp_unsigned_one; _temp2085;});
! _temp2084;})); _temp2083;}); _temp2082;}); break; case 143: _LL2081: yyval=(
! void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2087=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2087[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2088; _temp2088.tag= Cyc_Pointer_Sort_tok;
! _temp2088.f1=( void*)(( void*)({ struct Cyc_Absyn_NonNullable_ps_struct*
! _temp2089=( struct Cyc_Absyn_NonNullable_ps_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_NonNullable_ps_struct)); _temp2089[ 0]=({ struct Cyc_Absyn_NonNullable_ps_struct
! _temp2090; _temp2090.tag= Cyc_Absyn_NonNullable_ps; _temp2090.f1= Cyc_Absyn_exp_unsigned_one;
! _temp2090;}); _temp2089;})); _temp2088;}); _temp2087;}); break; case 144:
! _LL2086: yyval=( void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2092=( struct
  Cyc_Pointer_Sort_tok_struct*) _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct));
! _temp2092[ 0]=({ struct Cyc_Pointer_Sort_tok_struct _temp2093; _temp2093.tag=
! Cyc_Pointer_Sort_tok; _temp2093.f1=( void*)(( void*)({ struct Cyc_Absyn_Nullable_ps_struct*
! _temp2094=( struct Cyc_Absyn_Nullable_ps_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Nullable_ps_struct));
! _temp2094[ 0]=({ struct Cyc_Absyn_Nullable_ps_struct _temp2095; _temp2095.tag=
! Cyc_Absyn_Nullable_ps; _temp2095.f1= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2095;});
! _temp2094;})); _temp2093;}); _temp2092;}); break; case 145: _LL2091: yyval=(
! void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2097=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2097[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2098; _temp2098.tag= Cyc_Pointer_Sort_tok;
! _temp2098.f1=( void*)(( void*)({ struct Cyc_Absyn_NonNullable_ps_struct*
! _temp2099=( struct Cyc_Absyn_NonNullable_ps_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_NonNullable_ps_struct)); _temp2099[ 0]=({ struct Cyc_Absyn_NonNullable_ps_struct
! _temp2100; _temp2100.tag= Cyc_Absyn_NonNullable_ps; _temp2100.f1= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2100;});
! _temp2099;})); _temp2098;}); _temp2097;}); break; case 146: _LL2096: yyval=(
! void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2102=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2102[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2103; _temp2103.tag= Cyc_Pointer_Sort_tok;
! _temp2103.f1=( void*)(( void*) Cyc_Absyn_TaggedArray_ps); _temp2103;});
! _temp2102;}); break; case 147: _LL2101: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2105=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2105[ 0]=({ struct Cyc_Type_tok_struct _temp2106; _temp2106.tag= Cyc_Type_tok;
! _temp2106.f1=( void*) Cyc_Absyn_new_evar(({ struct Cyc_Core_Opt* _temp2107=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2107->v=(
! void*)(( void*) Cyc_Absyn_RgnKind); _temp2107;}), 0); _temp2106;}); _temp2105;});
! break; case 148: _LL2104: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 149: _LL2108: Cyc_Parse_set_vartyp_kind( Cyc_yyget_Type_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),( void*) Cyc_Absyn_RgnKind);
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 150: _LL2109: yyval=( void*)({ struct Cyc_Type_tok_struct* _temp2111=( struct
! Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct)); _temp2111[
! 0]=({ struct Cyc_Type_tok_struct _temp2112; _temp2112.tag= Cyc_Type_tok;
! _temp2112.f1=( void*) Cyc_Absyn_new_evar(({ struct Cyc_Core_Opt* _temp2113=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2113->v=(
! void*)(( void*) Cyc_Absyn_RgnKind); _temp2113;}), 0); _temp2112;}); _temp2111;});
! break; case 151: _LL2110: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 152: _LL2114: yyval=( void*)({ struct Cyc_TypeQual_tok_struct*
! _temp2116=( struct Cyc_TypeQual_tok_struct*) _cycalloc_atomic( sizeof( struct
! Cyc_TypeQual_tok_struct)); _temp2116[ 0]=({ struct Cyc_TypeQual_tok_struct
! _temp2117; _temp2117.tag= Cyc_TypeQual_tok; _temp2117.f1= Cyc_Absyn_combine_tqual(
  Cyc_yyget_TypeQual_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2117;});
! _temp2116;}); break; case 153: _LL2115: yyval=( void*)({ struct Cyc_YY1_struct*
! _temp2119=( struct Cyc_YY1_struct*) _cycalloc( sizeof( struct Cyc_YY1_struct));
! _temp2119[ 0]=({ struct Cyc_YY1_struct _temp2120; _temp2120.tag= Cyc_YY1;
! _temp2120.f1=({ struct _tuple16* _temp2121=( struct _tuple16*) _cycalloc(
! sizeof( struct _tuple16)); _temp2121->f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); _temp2121->f2= 0;
! _temp2121->f3= 0; _temp2121->f4= Cyc_yyget_TypeOpt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2121->f5= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2121;});
! _temp2120;}); _temp2119;}); break; case 154: _LL2118: yyval=( void*)({ struct
! Cyc_YY1_struct* _temp2123=( struct Cyc_YY1_struct*) _cycalloc( sizeof( struct
! Cyc_YY1_struct)); _temp2123[ 0]=({ struct Cyc_YY1_struct _temp2124; _temp2124.tag=
! Cyc_YY1; _temp2124.f1=({ struct _tuple16* _temp2125=( struct _tuple16*)
! _cycalloc( sizeof( struct _tuple16)); _temp2125->f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)])); _temp2125->f2= 1;
! _temp2125->f3= 0; _temp2125->f4= Cyc_yyget_TypeOpt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2125->f5= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2125;});
! _temp2124;}); _temp2123;}); break; case 155: _LL2122: { struct _tuple2 _temp2129;
! void* _temp2130; struct Cyc_Absyn_Tqual _temp2132; struct Cyc_Core_Opt*
! _temp2134; struct _tuple2* _temp2127= Cyc_yyget_ParamDecl_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2129=*
! _temp2127; _LL2135: _temp2134= _temp2129.f1; goto _LL2133; _LL2133: _temp2132=
! _temp2129.f2; goto _LL2131; _LL2131: _temp2130= _temp2129.f3; goto _LL2128;
! _LL2128: { struct Cyc_Absyn_VarargInfo* _temp2136=({ struct Cyc_Absyn_VarargInfo*
! _temp2140=( struct Cyc_Absyn_VarargInfo*) _cycalloc( sizeof( struct Cyc_Absyn_VarargInfo));
! _temp2140->name= _temp2134; _temp2140->tq= _temp2132; _temp2140->type=( void*)
! _temp2130; _temp2140->inject= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2140;});
! yyval=( void*)({ struct Cyc_YY1_struct* _temp2137=( struct Cyc_YY1_struct*)
! _cycalloc( sizeof( struct Cyc_YY1_struct)); _temp2137[ 0]=({ struct Cyc_YY1_struct
! _temp2138; _temp2138.tag= Cyc_YY1; _temp2138.f1=({ struct _tuple16* _temp2139=(
! struct _tuple16*) _cycalloc( sizeof( struct _tuple16)); _temp2139->f1= 0;
! _temp2139->f2= 0; _temp2139->f3= _temp2136; _temp2139->f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2139->f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2139;}); _temp2138;}); _temp2137;}); break;}} case 156:
! _LL2126: { struct _tuple2 _temp2144; void* _temp2145; struct Cyc_Absyn_Tqual
! _temp2147; struct Cyc_Core_Opt* _temp2149; struct _tuple2* _temp2142= Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2144=*
! _temp2142; _LL2150: _temp2149= _temp2144.f1; goto _LL2148; _LL2148: _temp2147=
! _temp2144.f2; goto _LL2146; _LL2146: _temp2145= _temp2144.f3; goto _LL2143;
! _LL2143: { struct Cyc_Absyn_VarargInfo* _temp2151=({ struct Cyc_Absyn_VarargInfo*
! _temp2155=( struct Cyc_Absyn_VarargInfo*) _cycalloc( sizeof( struct Cyc_Absyn_VarargInfo));
! _temp2155->name= _temp2149; _temp2155->tq= _temp2147; _temp2155->type=( void*)
! _temp2145; _temp2155->inject= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2155;});
! yyval=( void*)({ struct Cyc_YY1_struct* _temp2152=( struct Cyc_YY1_struct*)
! _cycalloc( sizeof( struct Cyc_YY1_struct)); _temp2152[ 0]=({ struct Cyc_YY1_struct
! _temp2153; _temp2153.tag= Cyc_YY1; _temp2153.f1=({ struct _tuple16* _temp2154=(
! struct _tuple16*) _cycalloc( sizeof( struct _tuple16)); _temp2154->f1=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)])); _temp2154->f2=
! 0; _temp2154->f3= _temp2151; _temp2154->f4= Cyc_yyget_TypeOpt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2154->f5= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2154;});
! _temp2153;}); _temp2152;}); break;}} case 157: _LL2141: yyval=( void*)({ struct
! Cyc_Type_tok_struct* _temp2157=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Type_tok_struct)); _temp2157[ 0]=({ struct Cyc_Type_tok_struct
! _temp2158; _temp2158.tag= Cyc_Type_tok; _temp2158.f1=( void*) Cyc_Parse_id2type(
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),
! Cyc_Absyn_empty_conref()); _temp2158;}); _temp2157;}); break; case 158: _LL2156:
! yyval=( void*)({ struct Cyc_Type_tok_struct* _temp2160=( struct Cyc_Type_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Type_tok_struct)); _temp2160[ 0]=({ struct Cyc_Type_tok_struct
! _temp2161; _temp2161.tag= Cyc_Type_tok; _temp2161.f1=( void*) Cyc_Parse_id2type(
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
  -  2)]), Cyc_Absyn_new_conref( Cyc_yyget_Kind_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))); _temp2161;});
! _temp2160;}); break; case 159: _LL2159: yyval=( void*)({ struct Cyc_TypeOpt_tok_struct*
! _temp2163=( struct Cyc_TypeOpt_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeOpt_tok_struct));
! _temp2163[ 0]=({ struct Cyc_TypeOpt_tok_struct _temp2164; _temp2164.tag= Cyc_TypeOpt_tok;
! _temp2164.f1= 0; _temp2164;}); _temp2163;}); break; case 160: _LL2162: yyval=(
! void*)({ struct Cyc_TypeOpt_tok_struct* _temp2166=( struct Cyc_TypeOpt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeOpt_tok_struct)); _temp2166[ 0]=({ struct Cyc_TypeOpt_tok_struct
! _temp2167; _temp2167.tag= Cyc_TypeOpt_tok; _temp2167.f1=({ struct Cyc_Core_Opt*
! _temp2168=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2168->v=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2169=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2169[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2170; _temp2170.tag= Cyc_Absyn_JoinEff;
! _temp2170.f1= Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2170;}); _temp2169;})); _temp2168;}); _temp2167;});
! _temp2166;}); break; case 161: _LL2165: yyval=( void*)({ struct Cyc_Rgnorder_tok_struct*
! _temp2172=( struct Cyc_Rgnorder_tok_struct*) _cycalloc( sizeof( struct Cyc_Rgnorder_tok_struct));
! _temp2172[ 0]=({ struct Cyc_Rgnorder_tok_struct _temp2173; _temp2173.tag= Cyc_Rgnorder_tok;
! _temp2173.f1= 0; _temp2173;}); _temp2172;}); break; case 162: _LL2171: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 163:
! _LL2174: yyval=( void*)({ struct Cyc_Rgnorder_tok_struct* _temp2176=( struct Cyc_Rgnorder_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Rgnorder_tok_struct)); _temp2176[ 0]=({ struct Cyc_Rgnorder_tok_struct
! _temp2177; _temp2177.tag= Cyc_Rgnorder_tok; _temp2177.f1=({ struct Cyc_List_List*
! _temp2178=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2178->hd=( void*)({ struct _tuple18* _temp2179=( struct _tuple18*)
! _cycalloc( sizeof( struct _tuple18)); _temp2179->f1= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2179->f2= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2179;}); _temp2178->tl= 0; _temp2178;});
! _temp2177;}); _temp2176;}); break; case 164: _LL2175: yyval=( void*)({ struct
! Cyc_Rgnorder_tok_struct* _temp2181=( struct Cyc_Rgnorder_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Rgnorder_tok_struct)); _temp2181[ 0]=({ struct Cyc_Rgnorder_tok_struct
! _temp2182; _temp2182.tag= Cyc_Rgnorder_tok; _temp2182.f1=({ struct Cyc_List_List*
! _temp2183=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2183->hd=( void*)({ struct _tuple18* _temp2184=( struct _tuple18*)
! _cycalloc( sizeof( struct _tuple18)); _temp2184->f1= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2184->f2= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2184;}); _temp2183->tl= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2183;});
! _temp2182;}); _temp2181;}); break; case 165: _LL2180: yyval=( void*)({ struct
! Cyc_Bool_tok_struct* _temp2186=( struct Cyc_Bool_tok_struct*) _cycalloc_atomic(
! sizeof( struct Cyc_Bool_tok_struct)); _temp2186[ 0]=({ struct Cyc_Bool_tok_struct
! _temp2187; _temp2187.tag= Cyc_Bool_tok; _temp2187.f1= 0; _temp2187;}); _temp2186;});
! break; case 166: _LL2185: { struct _tagged_arr _temp2189= Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if( Cyc_Std_zstrcmp(
! _temp2189, _tag_arr("inject", sizeof( unsigned char), 7u)) !=  0){ Cyc_Parse_err(
  _tag_arr("missing type in function declaration", sizeof( unsigned char), 37u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line));} yyval=( void*)({ struct Cyc_Bool_tok_struct*
! _temp2190=( struct Cyc_Bool_tok_struct*) _cycalloc_atomic( sizeof( struct Cyc_Bool_tok_struct));
! _temp2190[ 0]=({ struct Cyc_Bool_tok_struct _temp2191; _temp2191.tag= Cyc_Bool_tok;
! _temp2191.f1= 1; _temp2191;}); _temp2190;}); break;} case 167: _LL2188: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 168:
! _LL2192: yyval=( void*)({ struct Cyc_TypeList_tok_struct* _temp2194=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2194[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2195; _temp2195.tag= Cyc_TypeList_tok; _temp2195.f1= Cyc_List_imp_append(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2195;});
! _temp2194;}); break; case 169: _LL2193: yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp2197=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2197[ 0]=({ struct Cyc_TypeList_tok_struct _temp2198; _temp2198.tag= Cyc_TypeList_tok;
! _temp2198.f1= 0; _temp2198;}); _temp2197;}); break; case 170: _LL2196: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case
! 171: _LL2199: yyval=( void*)({ struct Cyc_TypeList_tok_struct* _temp2201=(
  struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2201[ 0]=({ struct Cyc_TypeList_tok_struct _temp2202; _temp2202.tag= Cyc_TypeList_tok;
! _temp2202.f1=({ struct Cyc_List_List* _temp2203=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2203->hd=( void*)(( void*)({
! struct Cyc_Absyn_RgnsEff_struct* _temp2204=( struct Cyc_Absyn_RgnsEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct)); _temp2204[ 0]=({ struct
! Cyc_Absyn_RgnsEff_struct _temp2205; _temp2205.tag= Cyc_Absyn_RgnsEff; _temp2205.f1=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2205;}); _temp2204;})); _temp2203->tl= 0; _temp2203;});
! _temp2202;}); _temp2201;}); break; case 172: _LL2200: Cyc_Parse_set_vartyp_kind(
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),(
  void*) Cyc_Absyn_EffKind); yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp2207=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2207[ 0]=({ struct Cyc_TypeList_tok_struct _temp2208; _temp2208.tag= Cyc_TypeList_tok;
! _temp2208.f1=({ struct Cyc_List_List* _temp2209=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2209->hd=( void*) Cyc_yyget_Type_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2209->tl= 0;
! _temp2209;}); _temp2208;}); _temp2207;}); break; case 173: _LL2206: if( ! Cyc_Parse_set_vartyp_kind(
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),(
  void*) Cyc_Absyn_RgnKind)){ Cyc_Parse_err( _tag_arr("expecting region kind",
  sizeof( unsigned char), 22u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_TypeList_tok_struct* _temp2211=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2211[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2212; _temp2212.tag= Cyc_TypeList_tok; _temp2212.f1=({ struct Cyc_List_List*
! _temp2213=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2213->hd=( void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp2214=(
  struct Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp2214[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp2215; _temp2215.tag= Cyc_Absyn_AccessEff;
! _temp2215.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2215;}); _temp2214;})); _temp2213->tl= 0;
! _temp2213;}); _temp2212;}); _temp2211;}); break; case 174: _LL2210: if( ! Cyc_Parse_set_vartyp_kind(
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]),( void*) Cyc_Absyn_RgnKind)){ Cyc_Parse_err( _tag_arr("expecting region kind",
  sizeof( unsigned char), 22u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));} yyval=(
! void*)({ struct Cyc_TypeList_tok_struct* _temp2217=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2217[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2218; _temp2218.tag= Cyc_TypeList_tok; _temp2218.f1=({ struct Cyc_List_List*
! _temp2219=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2219->hd=( void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp2220=(
  struct Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp2220[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp2221; _temp2221.tag= Cyc_Absyn_AccessEff;
! _temp2221.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2221;}); _temp2220;})); _temp2219->tl= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2219;});
! _temp2218;}); _temp2217;}); break; case 175: _LL2216: yyval=( void*)({ struct
! Cyc_ParamDeclList_tok_struct* _temp2223=( struct Cyc_ParamDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDeclList_tok_struct)); _temp2223[ 0]=({
! struct Cyc_ParamDeclList_tok_struct _temp2224; _temp2224.tag= Cyc_ParamDeclList_tok;
! _temp2224.f1=({ struct Cyc_List_List* _temp2225=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2225->hd=( void*) Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2225->tl= 0;
! _temp2225;}); _temp2224;}); _temp2223;}); break; case 176: _LL2222: yyval=( void*)({
! struct Cyc_ParamDeclList_tok_struct* _temp2227=( struct Cyc_ParamDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDeclList_tok_struct)); _temp2227[ 0]=({
! struct Cyc_ParamDeclList_tok_struct _temp2228; _temp2228.tag= Cyc_ParamDeclList_tok;
! _temp2228.f1=({ struct Cyc_List_List* _temp2229=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2229->hd=( void*) Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2229->tl=
  Cyc_yyget_ParamDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2229;}); _temp2228;}); _temp2227;}); break; case 177:
! _LL2226: { struct _tuple17 _temp2233; struct Cyc_List_List* _temp2234; struct
! Cyc_List_List* _temp2236; struct Cyc_Absyn_Tqual _temp2238; struct _tuple17*
! _temp2231= Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2233=* _temp2231; _LL2239: _temp2238=
! _temp2233.f1; goto _LL2237; _LL2237: _temp2236= _temp2233.f2; goto _LL2235;
! _LL2235: _temp2234= _temp2233.f3; goto _LL2232; _LL2232: { struct Cyc_Parse_Declarator
! _temp2242; struct Cyc_List_List* _temp2243; struct _tuple1* _temp2245; struct
! Cyc_Parse_Declarator* _temp2240= Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2242=* _temp2240;
! _LL2246: _temp2245= _temp2242.id; goto _LL2244; _LL2244: _temp2243= _temp2242.tms;
! goto _LL2241; _LL2241: { void* _temp2247= Cyc_Parse_speclist2typ( _temp2236, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! struct Cyc_List_List* _temp2250; struct Cyc_List_List* _temp2252; void*
! _temp2254; struct Cyc_Absyn_Tqual _temp2256; struct _tuple6 _temp2248= Cyc_Parse_apply_tms(
! _temp2238, _temp2247, _temp2234, _temp2243); _LL2257: _temp2256= _temp2248.f1;
! goto _LL2255; _LL2255: _temp2254= _temp2248.f2; goto _LL2253; _LL2253: _temp2252=
! _temp2248.f3; goto _LL2251; _LL2251: _temp2250= _temp2248.f4; goto _LL2249;
! _LL2249: if( _temp2252 !=  0){ Cyc_Parse_err( _tag_arr("parameter with bad type params",
  sizeof( unsigned char), 31u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} if( Cyc_Absyn_is_qvar_qualified(
! _temp2245)){ Cyc_Parse_err( _tag_arr("parameter cannot be qualified with a namespace",
  sizeof( unsigned char), 47u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));}{
! struct Cyc_Core_Opt* _temp2258=( struct Cyc_Core_Opt*)({ struct Cyc_Core_Opt*
! _temp2262=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2262->v=( void*)(* _temp2245).f2; _temp2262;}); if( _temp2250 !=  0){ Cyc_Parse_warn(
  _tag_arr("extra attributes on parameter, ignoring", sizeof( unsigned char), 40u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line));} yyval=( void*)({ struct Cyc_ParamDecl_tok_struct*
! _temp2259=( struct Cyc_ParamDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct));
! _temp2259[ 0]=({ struct Cyc_ParamDecl_tok_struct _temp2260; _temp2260.tag= Cyc_ParamDecl_tok;
! _temp2260.f1=({ struct _tuple2* _temp2261=( struct _tuple2*) _cycalloc( sizeof(
! struct _tuple2)); _temp2261->f1= _temp2258; _temp2261->f2= _temp2256; _temp2261->f3=
! _temp2254; _temp2261;}); _temp2260;}); _temp2259;}); break;}}}} case 178:
! _LL2230: { struct _tuple17 _temp2266; struct Cyc_List_List* _temp2267; struct
! Cyc_List_List* _temp2269; struct Cyc_Absyn_Tqual _temp2271; struct _tuple17*
! _temp2264= Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2266=* _temp2264; _LL2272: _temp2271= _temp2266.f1;
! goto _LL2270; _LL2270: _temp2269= _temp2266.f2; goto _LL2268; _LL2268: _temp2267=
! _temp2266.f3; goto _LL2265; _LL2265: { void* _temp2273= Cyc_Parse_speclist2typ(
! _temp2269, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); if( _temp2267 !=  0){ Cyc_Parse_warn( _tag_arr("bad attributes on parameter, ignoring",
  sizeof( unsigned char), 38u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_ParamDecl_tok_struct* _temp2274=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2274[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2275; _temp2275.tag= Cyc_ParamDecl_tok; _temp2275.f1=({
! struct _tuple2* _temp2276=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2276->f1= 0; _temp2276->f2= _temp2271; _temp2276->f3= _temp2273; _temp2276;});
! _temp2275;}); _temp2274;}); break;}} case 179: _LL2263: { struct _tuple17
! _temp2280; struct Cyc_List_List* _temp2281; struct Cyc_List_List* _temp2283;
! struct Cyc_Absyn_Tqual _temp2285; struct _tuple17* _temp2278= Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2280=*
! _temp2278; _LL2286: _temp2285= _temp2280.f1; goto _LL2284; _LL2284: _temp2283=
! _temp2280.f2; goto _LL2282; _LL2282: _temp2281= _temp2280.f3; goto _LL2279;
! _LL2279: { void* _temp2287= Cyc_Parse_speclist2typ( _temp2283, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! struct Cyc_List_List* _temp2288=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms; struct Cyc_List_List*
! _temp2291; struct Cyc_List_List* _temp2293; void* _temp2295; struct Cyc_Absyn_Tqual
! _temp2297; struct _tuple6 _temp2289= Cyc_Parse_apply_tms( _temp2285, _temp2287,
! _temp2281, _temp2288); _LL2298: _temp2297= _temp2289.f1; goto _LL2296; _LL2296:
! _temp2295= _temp2289.f2; goto _LL2294; _LL2294: _temp2293= _temp2289.f3; goto
! _LL2292; _LL2292: _temp2291= _temp2289.f4; goto _LL2290; _LL2290: if( _temp2293
  !=  0){ Cyc_Parse_warn( _tag_arr("bad type parameters on formal argument, ignoring",
  sizeof( unsigned char), 49u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} if(
! _temp2291 !=  0){ Cyc_Parse_warn( _tag_arr("bad attributes on parameter, ignoring",
  sizeof( unsigned char), 38u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_ParamDecl_tok_struct* _temp2299=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2299[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2300; _temp2300.tag= Cyc_ParamDecl_tok; _temp2300.f1=({
! struct _tuple2* _temp2301=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2301->f1= 0; _temp2301->f2= _temp2297; _temp2301->f3= _temp2295; _temp2301;});
! _temp2300;}); _temp2299;}); break;}} case 180: _LL2277: yyval=( void*)({ struct
! Cyc_IdList_tok_struct* _temp2303=( struct Cyc_IdList_tok_struct*) _cycalloc(
! sizeof( struct Cyc_IdList_tok_struct)); _temp2303[ 0]=({ struct Cyc_IdList_tok_struct
! _temp2304; _temp2304.tag= Cyc_IdList_tok; _temp2304.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_IdList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2304;});
! _temp2303;}); break; case 181: _LL2302: yyval=( void*)({ struct Cyc_IdList_tok_struct*
! _temp2306=( struct Cyc_IdList_tok_struct*) _cycalloc( sizeof( struct Cyc_IdList_tok_struct));
! _temp2306[ 0]=({ struct Cyc_IdList_tok_struct _temp2307; _temp2307.tag= Cyc_IdList_tok;
! _temp2307.f1=({ struct Cyc_List_List* _temp2308=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2308->hd=( void*)({ struct
! _tagged_arr* _temp2309=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2309[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2309;}); _temp2308->tl=
! 0; _temp2308;}); _temp2307;}); _temp2306;}); break; case 182: _LL2305: yyval=(
! void*)({ struct Cyc_IdList_tok_struct* _temp2311=( struct Cyc_IdList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_IdList_tok_struct)); _temp2311[ 0]=({ struct Cyc_IdList_tok_struct
! _temp2312; _temp2312.tag= Cyc_IdList_tok; _temp2312.f1=({ struct Cyc_List_List*
! _temp2313=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2313->hd=( void*)({ struct _tagged_arr* _temp2314=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp2314[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2314;});
! _temp2313->tl= Cyc_yyget_IdList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2313;}); _temp2312;}); _temp2311;}); break; case 183:
! _LL2310: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 184: _LL2315: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 185: _LL2316: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2318=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2318[ 0]=({ struct Cyc_Exp_tok_struct _temp2319; _temp2319.tag= Cyc_Exp_tok;
! _temp2319.f1= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnresolvedMem_e_struct*
! _temp2320=( struct Cyc_Absyn_UnresolvedMem_e_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnresolvedMem_e_struct)); _temp2320[ 0]=({ struct Cyc_Absyn_UnresolvedMem_e_struct
! _temp2321; _temp2321.tag= Cyc_Absyn_UnresolvedMem_e; _temp2321.f1= 0; _temp2321.f2=
! 0; _temp2321;}); _temp2320;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2319;});
! _temp2318;}); break; case 186: _LL2317: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2323=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2323[ 0]=({ struct Cyc_Exp_tok_struct _temp2324; _temp2324.tag= Cyc_Exp_tok;
! _temp2324.f1= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnresolvedMem_e_struct*
! _temp2325=( struct Cyc_Absyn_UnresolvedMem_e_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnresolvedMem_e_struct)); _temp2325[ 0]=({ struct Cyc_Absyn_UnresolvedMem_e_struct
! _temp2326; _temp2326.tag= Cyc_Absyn_UnresolvedMem_e; _temp2326.f1= 0; _temp2326.f2=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp2326;});
! _temp2325;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2324;}); _temp2323;}); break; case 187:
! _LL2322: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2328=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2328[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2329; _temp2329.tag= Cyc_Exp_tok; _temp2329.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_UnresolvedMem_e_struct* _temp2330=( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnresolvedMem_e_struct)); _temp2330[ 0]=({
! struct Cyc_Absyn_UnresolvedMem_e_struct _temp2331; _temp2331.tag= Cyc_Absyn_UnresolvedMem_e;
! _temp2331.f1= 0; _temp2331.f2=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); _temp2331;});
! _temp2330;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2329;}); _temp2328;}); break; case 188:
! _LL2327: { struct Cyc_Absyn_Vardecl* _temp2333= Cyc_Absyn_new_vardecl(({ struct
! _tuple1* _temp2339=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1));
! _temp2339->f1=( void*) Cyc_Absyn_Loc_n; _temp2339->f2=({ struct _tagged_arr*
! _temp2340=( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr));
! _temp2340[ 0]= Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  5)]); _temp2340;}); _temp2339;}), Cyc_Absyn_uint_t,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_uint_exp( 0, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).last_line)));
! _temp2333->tq=({ struct Cyc_Absyn_Tqual _temp2334; _temp2334.q_const= 1;
! _temp2334.q_volatile= 0; _temp2334.q_restrict= 1; _temp2334;}); yyval=( void*)({
! struct Cyc_Exp_tok_struct* _temp2335=( struct Cyc_Exp_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Exp_tok_struct)); _temp2335[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2336; _temp2336.tag= Cyc_Exp_tok; _temp2336.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Comprehension_e_struct* _temp2337=( struct Cyc_Absyn_Comprehension_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Comprehension_e_struct)); _temp2337[ 0]=({
! struct Cyc_Absyn_Comprehension_e_struct _temp2338; _temp2338.tag= Cyc_Absyn_Comprehension_e;
! _temp2338.f1= _temp2333; _temp2338.f2= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2338.f3= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2338;});
! _temp2337;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  7)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2336;}); _temp2335;}); break;} case
! 189: _LL2332: yyval=( void*)({ struct Cyc_InitializerList_tok_struct* _temp2342=(
  struct Cyc_InitializerList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct));
! _temp2342[ 0]=({ struct Cyc_InitializerList_tok_struct _temp2343; _temp2343.tag=
! Cyc_InitializerList_tok; _temp2343.f1=({ struct Cyc_List_List* _temp2344=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2344->hd=(
! void*)({ struct _tuple19* _temp2345=( struct _tuple19*) _cycalloc( sizeof(
! struct _tuple19)); _temp2345->f1= 0; _temp2345->f2= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2345;}); _temp2344->tl=
! 0; _temp2344;}); _temp2343;}); _temp2342;}); break; case 190: _LL2341: yyval=(
! void*)({ struct Cyc_InitializerList_tok_struct* _temp2347=( struct Cyc_InitializerList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct)); _temp2347[ 0]=({
! struct Cyc_InitializerList_tok_struct _temp2348; _temp2348.tag= Cyc_InitializerList_tok;
! _temp2348.f1=({ struct Cyc_List_List* _temp2349=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2349->hd=( void*)({ struct
! _tuple19* _temp2350=( struct _tuple19*) _cycalloc( sizeof( struct _tuple19));
! _temp2350->f1= Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2350->f2= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2350;});
! _temp2349->tl= 0; _temp2349;}); _temp2348;}); _temp2347;}); break; case 191:
! _LL2346: yyval=( void*)({ struct Cyc_InitializerList_tok_struct* _temp2352=(
  struct Cyc_InitializerList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct));
! _temp2352[ 0]=({ struct Cyc_InitializerList_tok_struct _temp2353; _temp2353.tag=
! Cyc_InitializerList_tok; _temp2353.f1=({ struct Cyc_List_List* _temp2354=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2354->hd=(
! void*)({ struct _tuple19* _temp2355=( struct _tuple19*) _cycalloc( sizeof(
! struct _tuple19)); _temp2355->f1= 0; _temp2355->f2= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2355;}); _temp2354->tl=
  Cyc_yyget_InitializerList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2354;}); _temp2353;}); _temp2352;}); break; case 192:
! _LL2351: yyval=( void*)({ struct Cyc_InitializerList_tok_struct* _temp2357=(
  struct Cyc_InitializerList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct));
! _temp2357[ 0]=({ struct Cyc_InitializerList_tok_struct _temp2358; _temp2358.tag=
! Cyc_InitializerList_tok; _temp2358.f1=({ struct Cyc_List_List* _temp2359=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2359->hd=(
! void*)({ struct _tuple19* _temp2360=( struct _tuple19*) _cycalloc( sizeof(
! struct _tuple19)); _temp2360->f1= Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2360->f2= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2360;});
! _temp2359->tl= Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2359;});
! _temp2358;}); _temp2357;}); break; case 193: _LL2356: yyval=( void*)({ struct
! Cyc_DesignatorList_tok_struct* _temp2362=( struct Cyc_DesignatorList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DesignatorList_tok_struct)); _temp2362[ 0]=({
! struct Cyc_DesignatorList_tok_struct _temp2363; _temp2363.tag= Cyc_DesignatorList_tok;
! _temp2363.f1= Cyc_List_imp_rev( Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp2363;});
! _temp2362;}); break; case 194: _LL2361: yyval=( void*)({ struct Cyc_DesignatorList_tok_struct*
! _temp2365=( struct Cyc_DesignatorList_tok_struct*) _cycalloc( sizeof( struct Cyc_DesignatorList_tok_struct));
! _temp2365[ 0]=({ struct Cyc_DesignatorList_tok_struct _temp2366; _temp2366.tag=
! Cyc_DesignatorList_tok; _temp2366.f1=({ struct Cyc_List_List* _temp2367=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2367->hd=( void*)
  Cyc_yyget_Designator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2367->tl= 0; _temp2367;}); _temp2366;}); _temp2365;});
! break; case 195: _LL2364: yyval=( void*)({ struct Cyc_DesignatorList_tok_struct*
! _temp2369=( struct Cyc_DesignatorList_tok_struct*) _cycalloc( sizeof( struct Cyc_DesignatorList_tok_struct));
! _temp2369[ 0]=({ struct Cyc_DesignatorList_tok_struct _temp2370; _temp2370.tag=
! Cyc_DesignatorList_tok; _temp2370.f1=({ struct Cyc_List_List* _temp2371=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2371->hd=( void*)
  Cyc_yyget_Designator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2371->tl= Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2371;});
! _temp2370;}); _temp2369;}); break; case 196: _LL2368: yyval=( void*)({ struct
! Cyc_Designator_tok_struct* _temp2373=( struct Cyc_Designator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Designator_tok_struct)); _temp2373[ 0]=({ struct
! Cyc_Designator_tok_struct _temp2374; _temp2374.tag= Cyc_Designator_tok;
! _temp2374.f1=( void*)(( void*)({ struct Cyc_Absyn_ArrayElement_struct* _temp2375=(
  struct Cyc_Absyn_ArrayElement_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayElement_struct));
! _temp2375[ 0]=({ struct Cyc_Absyn_ArrayElement_struct _temp2376; _temp2376.tag=
! Cyc_Absyn_ArrayElement; _temp2376.f1= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2376;});
! _temp2375;})); _temp2374;}); _temp2373;}); break; case 197: _LL2372: yyval=(
! void*)({ struct Cyc_Designator_tok_struct* _temp2378=( struct Cyc_Designator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Designator_tok_struct)); _temp2378[ 0]=({ struct
! Cyc_Designator_tok_struct _temp2379; _temp2379.tag= Cyc_Designator_tok;
! _temp2379.f1=( void*)(( void*)({ struct Cyc_Absyn_FieldName_struct* _temp2380=(
  struct Cyc_Absyn_FieldName_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FieldName_struct));
! _temp2380[ 0]=({ struct Cyc_Absyn_FieldName_struct _temp2381; _temp2381.tag= Cyc_Absyn_FieldName;
! _temp2381.f1=({ struct _tagged_arr* _temp2382=( struct _tagged_arr*) _cycalloc(
! sizeof( struct _tagged_arr)); _temp2382[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2382;}); _temp2381;});
! _temp2380;})); _temp2379;}); _temp2378;}); break; case 198: _LL2377: { void*
! _temp2384= Cyc_Parse_speclist2typ((* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); struct Cyc_List_List*
! _temp2385=(* Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)])).f3; if( _temp2385 !=  0){ Cyc_Parse_warn( _tag_arr("ignoring attributes in type",
  sizeof( unsigned char), 28u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));}{ struct
! Cyc_Absyn_Tqual _temp2386=(* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1; yyval=( void*)({
! struct Cyc_ParamDecl_tok_struct* _temp2387=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2387[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2388; _temp2388.tag= Cyc_ParamDecl_tok; _temp2388.f1=({
! struct _tuple2* _temp2389=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2389->f1= 0; _temp2389->f2= _temp2386; _temp2389->f3= _temp2384; _temp2389;});
! _temp2388;}); _temp2387;}); break;}} case 199: _LL2383: { void* _temp2391= Cyc_Parse_speclist2typ((*
  Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)])).f2, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line)); struct
! Cyc_List_List* _temp2392=(* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])).f3; struct Cyc_Absyn_Tqual
! _temp2393=(* Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)])).f1; struct Cyc_List_List* _temp2394=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms; struct
! _tuple6 _temp2395= Cyc_Parse_apply_tms( _temp2393, _temp2391, _temp2392,
! _temp2394); if( _temp2395.f3 !=  0){ Cyc_Parse_warn( _tag_arr("bad type params, ignoring",
  sizeof( unsigned char), 26u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} if(
! _temp2395.f4 !=  0){ Cyc_Parse_warn( _tag_arr("bad specifiers, ignoring",
  sizeof( unsigned char), 25u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_ParamDecl_tok_struct* _temp2396=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2396[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2397; _temp2397.tag= Cyc_ParamDecl_tok; _temp2397.f1=({
! struct _tuple2* _temp2398=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2398->f1= 0; _temp2398->f2= _temp2395.f1; _temp2398->f3= _temp2395.f2;
! _temp2398;}); _temp2397;}); _temp2396;}); break;} case 200: _LL2390: yyval=(
! void*)({ struct Cyc_Type_tok_struct* _temp2400=( struct Cyc_Type_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Type_tok_struct)); _temp2400[ 0]=({ struct Cyc_Type_tok_struct
! _temp2401; _temp2401.tag= Cyc_Type_tok; _temp2401.f1=( void*)(* Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f3; _temp2401;});
! _temp2400;}); break; case 201: _LL2399: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2403=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2403[ 0]=({ struct Cyc_Type_tok_struct _temp2404; _temp2404.tag= Cyc_Type_tok;
! _temp2404.f1=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2405=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2405[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2406; _temp2406.tag= Cyc_Absyn_JoinEff;
! _temp2406.f1= 0; _temp2406;}); _temp2405;})); _temp2404;}); _temp2403;}); break;
! case 202: _LL2402: yyval=( void*)({ struct Cyc_Type_tok_struct* _temp2408=(
  struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2408[ 0]=({ struct Cyc_Type_tok_struct _temp2409; _temp2409.tag= Cyc_Type_tok;
! _temp2409.f1=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2410=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2410[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2411; _temp2411.tag= Cyc_Absyn_JoinEff;
! _temp2411.f1= Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2411;}); _temp2410;})); _temp2409;});
! _temp2408;}); break; case 203: _LL2407: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2413=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2413[ 0]=({ struct Cyc_Type_tok_struct _temp2414; _temp2414.tag= Cyc_Type_tok;
! _temp2414.f1=( void*)(( void*)({ struct Cyc_Absyn_RgnsEff_struct* _temp2415=(
  struct Cyc_Absyn_RgnsEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct));
! _temp2415[ 0]=({ struct Cyc_Absyn_RgnsEff_struct _temp2416; _temp2416.tag= Cyc_Absyn_RgnsEff;
! _temp2416.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2416;}); _temp2415;})); _temp2414;});
! _temp2413;}); break; case 204: _LL2412: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2418=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2418[ 0]=({ struct Cyc_Type_tok_struct _temp2419; _temp2419.tag= Cyc_Type_tok;
! _temp2419.f1=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2420=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2420[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2421; _temp2421.tag= Cyc_Absyn_JoinEff;
! _temp2421.f1=({ struct Cyc_List_List* _temp2422=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2422->hd=( void*) Cyc_yyget_Type_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2422->tl=
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2422;}); _temp2421;}); _temp2420;})); _temp2419;});
! _temp2418;}); break; case 205: _LL2417: yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp2424=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2424[ 0]=({ struct Cyc_TypeList_tok_struct _temp2425; _temp2425.tag= Cyc_TypeList_tok;
! _temp2425.f1=({ struct Cyc_List_List* _temp2426=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2426->hd=( void*) Cyc_yyget_Type_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2426->tl= 0;
! _temp2426;}); _temp2425;}); _temp2424;}); break; case 206: _LL2423: yyval=( void*)({
! struct Cyc_TypeList_tok_struct* _temp2428=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2428[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2429; _temp2429.tag= Cyc_TypeList_tok; _temp2429.f1=({ struct Cyc_List_List*
! _temp2430=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2430->hd=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2430->tl= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2430;});
! _temp2429;}); _temp2428;}); break; case 207: _LL2427: yyval=( void*)({ struct
! Cyc_AbstractDeclarator_tok_struct* _temp2432=( struct Cyc_AbstractDeclarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct)); _temp2432[ 0]=({
! struct Cyc_AbstractDeclarator_tok_struct _temp2433; _temp2433.tag= Cyc_AbstractDeclarator_tok;
! _temp2433.f1=({ struct Cyc_Parse_Abstractdeclarator* _temp2434=( struct Cyc_Parse_Abstractdeclarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator)); _temp2434->tms= Cyc_yyget_TypeModifierList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2434;});
! _temp2433;}); _temp2432;}); break; case 208: _LL2431: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 209: _LL2435:
! yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2437=( struct
  Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2437[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2438; _temp2438.tag=
! Cyc_AbstractDeclarator_tok; _temp2438.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2439=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2439->tms= Cyc_List_imp_append( Cyc_yyget_TypeModifierList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_AbstractDeclarator_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms); _temp2439;});
! _temp2438;}); _temp2437;}); break; case 210: _LL2436: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 211:
! _LL2440: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2442=(
  struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2442[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2443; _temp2443.tag=
! Cyc_AbstractDeclarator_tok; _temp2443.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2444=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2444->tms=({ struct Cyc_List_List* _temp2445=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2445->hd=( void*)(( void*) Cyc_Absyn_Carray_mod);
! _temp2445->tl= 0; _temp2445;}); _temp2444;}); _temp2443;}); _temp2442;}); break;
! case 212: _LL2441: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2447=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2447[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2448; _temp2448.tag= Cyc_AbstractDeclarator_tok; _temp2448.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2449=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2449->tms=({ struct Cyc_List_List* _temp2450=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2450->hd=( void*)(( void*) Cyc_Absyn_Carray_mod);
! _temp2450->tl=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]))->tms; _temp2450;});
! _temp2449;}); _temp2448;}); _temp2447;}); break; case 213: _LL2446: yyval=( void*)({
! struct Cyc_AbstractDeclarator_tok_struct* _temp2452=( struct Cyc_AbstractDeclarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct)); _temp2452[ 0]=({
! struct Cyc_AbstractDeclarator_tok_struct _temp2453; _temp2453.tag= Cyc_AbstractDeclarator_tok;
! _temp2453.f1=({ struct Cyc_Parse_Abstractdeclarator* _temp2454=( struct Cyc_Parse_Abstractdeclarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator)); _temp2454->tms=({
! struct Cyc_List_List* _temp2455=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2455->hd=( void*)(( void*)({ struct Cyc_Absyn_ConstArray_mod_struct*
! _temp2456=( struct Cyc_Absyn_ConstArray_mod_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_ConstArray_mod_struct)); _temp2456[ 0]=({ struct Cyc_Absyn_ConstArray_mod_struct
! _temp2457; _temp2457.tag= Cyc_Absyn_ConstArray_mod; _temp2457.f1= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2457;});
! _temp2456;})); _temp2455->tl= 0; _temp2455;}); _temp2454;}); _temp2453;});
! _temp2452;}); break; case 214: _LL2451: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2459=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2459[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2460; _temp2460.tag= Cyc_AbstractDeclarator_tok; _temp2460.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2461=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2461->tms=({ struct Cyc_List_List* _temp2462=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2462->hd=( void*)(( void*)({
! struct Cyc_Absyn_ConstArray_mod_struct* _temp2463=( struct Cyc_Absyn_ConstArray_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ConstArray_mod_struct)); _temp2463[ 0]=({
! struct Cyc_Absyn_ConstArray_mod_struct _temp2464; _temp2464.tag= Cyc_Absyn_ConstArray_mod;
! _temp2464.f1= Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2464;}); _temp2463;})); _temp2462->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2462;}); _temp2461;}); _temp2460;}); _temp2459;}); break; case 215: _LL2458:
! yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2466=( struct
  Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2466[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2467; _temp2467.tag=
! Cyc_AbstractDeclarator_tok; _temp2467.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2468=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2468->tms=({ struct Cyc_List_List* _temp2469=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2469->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2470=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2470[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2471; _temp2471.tag= Cyc_Absyn_Function_mod;
! _temp2471.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2472=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2472[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2473; _temp2473.tag= Cyc_Absyn_WithTypes;
! _temp2473.f1= 0; _temp2473.f2= 0; _temp2473.f3= 0; _temp2473.f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2473.f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2473;}); _temp2472;})); _temp2471;}); _temp2470;}));
! _temp2469->tl= 0; _temp2469;}); _temp2468;}); _temp2467;}); _temp2466;}); break;
! case 216: _LL2465: { struct _tuple16 _temp2477; struct Cyc_List_List* _temp2478;
! struct Cyc_Core_Opt* _temp2480; struct Cyc_Absyn_VarargInfo* _temp2482; int
! _temp2484; struct Cyc_List_List* _temp2486; struct _tuple16* _temp2475= Cyc_yyget_YY1(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2477=*
! _temp2475; _LL2487: _temp2486= _temp2477.f1; goto _LL2485; _LL2485: _temp2484=
! _temp2477.f2; goto _LL2483; _LL2483: _temp2482= _temp2477.f3; goto _LL2481;
! _LL2481: _temp2480= _temp2477.f4; goto _LL2479; _LL2479: _temp2478= _temp2477.f5;
! goto _LL2476; _LL2476: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2488=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2488[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2489; _temp2489.tag= Cyc_AbstractDeclarator_tok; _temp2489.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2490=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2490->tms=({ struct Cyc_List_List* _temp2491=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2491->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2492=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2492[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2493; _temp2493.tag= Cyc_Absyn_Function_mod;
! _temp2493.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2494=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2494[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2495; _temp2495.tag= Cyc_Absyn_WithTypes;
! _temp2495.f1= _temp2486; _temp2495.f2= _temp2484; _temp2495.f3= _temp2482;
! _temp2495.f4= _temp2480; _temp2495.f5= _temp2478; _temp2495;}); _temp2494;}));
! _temp2493;}); _temp2492;})); _temp2491->tl= 0; _temp2491;}); _temp2490;});
! _temp2489;}); _temp2488;}); break;} case 217: _LL2474: yyval=( void*)({ struct
! Cyc_AbstractDeclarator_tok_struct* _temp2497=( struct Cyc_AbstractDeclarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct)); _temp2497[ 0]=({
! struct Cyc_AbstractDeclarator_tok_struct _temp2498; _temp2498.tag= Cyc_AbstractDeclarator_tok;
! _temp2498.f1=({ struct Cyc_Parse_Abstractdeclarator* _temp2499=( struct Cyc_Parse_Abstractdeclarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator)); _temp2499->tms=({
! struct Cyc_List_List* _temp2500=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2500->hd=( void*)(( void*)({ struct Cyc_Absyn_Function_mod_struct*
! _temp2501=( struct Cyc_Absyn_Function_mod_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct));
! _temp2501[ 0]=({ struct Cyc_Absyn_Function_mod_struct _temp2502; _temp2502.tag=
! Cyc_Absyn_Function_mod; _temp2502.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct*
! _temp2503=( struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2503[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2504; _temp2504.tag= Cyc_Absyn_WithTypes;
! _temp2504.f1= 0; _temp2504.f2= 0; _temp2504.f3= 0; _temp2504.f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2504.f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2504;}); _temp2503;})); _temp2502;}); _temp2501;}));
! _temp2500->tl=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]))->tms; _temp2500;});
! _temp2499;}); _temp2498;}); _temp2497;}); break; case 218: _LL2496: { struct
! _tuple16 _temp2508; struct Cyc_List_List* _temp2509; struct Cyc_Core_Opt*
! _temp2511; struct Cyc_Absyn_VarargInfo* _temp2513; int _temp2515; struct Cyc_List_List*
! _temp2517; struct _tuple16* _temp2506= Cyc_yyget_YY1( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2508=*
! _temp2506; _LL2518: _temp2517= _temp2508.f1; goto _LL2516; _LL2516: _temp2515=
! _temp2508.f2; goto _LL2514; _LL2514: _temp2513= _temp2508.f3; goto _LL2512;
! _LL2512: _temp2511= _temp2508.f4; goto _LL2510; _LL2510: _temp2509= _temp2508.f5;
! goto _LL2507; _LL2507: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2519=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2519[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2520; _temp2520.tag= Cyc_AbstractDeclarator_tok; _temp2520.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2521=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2521->tms=({ struct Cyc_List_List* _temp2522=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2522->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2523=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2523[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2524; _temp2524.tag= Cyc_Absyn_Function_mod;
! _temp2524.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2525=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2525[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2526; _temp2526.tag= Cyc_Absyn_WithTypes;
! _temp2526.f1= _temp2517; _temp2526.f2= _temp2515; _temp2526.f3= _temp2513;
! _temp2526.f4= _temp2511; _temp2526.f5= _temp2509; _temp2526;}); _temp2525;}));
! _temp2524;}); _temp2523;})); _temp2522->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2522;}); _temp2521;}); _temp2520;}); _temp2519;}); break;} case 219:
! _LL2505: { struct Cyc_List_List* _temp2528=(( struct Cyc_List_List*(*)( struct
  Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2529=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2529[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2530; _temp2530.tag= Cyc_AbstractDeclarator_tok; _temp2530.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2531=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2531->tms=({ struct Cyc_List_List* _temp2532=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2532->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2533=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2533[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2534; _temp2534.tag= Cyc_Absyn_TypeParams_mod;
! _temp2534.f1= _temp2528; _temp2534.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2534.f3=
! 0; _temp2534;}); _temp2533;})); _temp2532->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2532;}); _temp2531;}); _temp2530;}); _temp2529;}); break;} case 220:
! _LL2527:(( struct Cyc_Lexing_lexbuf*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Parse_lbuf))->v)->lex_curr_pos
! -= 1;{ struct Cyc_List_List* _temp2536=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(*
  f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2537=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2537[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2538; _temp2538.tag= Cyc_AbstractDeclarator_tok; _temp2538.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2539=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2539->tms=({ struct Cyc_List_List* _temp2540=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2540->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2541=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2541[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2542; _temp2542.tag= Cyc_Absyn_TypeParams_mod;
! _temp2542.f1= _temp2536; _temp2542.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2542.f3=
! 0; _temp2542;}); _temp2541;})); _temp2540->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2540;}); _temp2539;}); _temp2538;}); _temp2537;}); break;} case 221:
! _LL2535: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2544=(
  struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2544[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2545; _temp2545.tag=
! Cyc_AbstractDeclarator_tok; _temp2545.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2546=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2546->tms=({ struct Cyc_List_List* _temp2547=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2547->hd=( void*)(( void*)({
! struct Cyc_Absyn_Attributes_mod_struct* _temp2548=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp2548[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp2549; _temp2549.tag= Cyc_Absyn_Attributes_mod;
! _temp2549.f1= Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp2549.f2= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2549;}); _temp2548;}));
! _temp2547->tl=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))->tms; _temp2547;});
! _temp2546;}); _temp2545;}); _temp2544;}); break; case 222: _LL2543: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 223: _LL2550:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 224: _LL2551: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 225: _LL2552: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 226: _LL2553: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 227: _LL2554:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 228: _LL2555: if( Cyc_Std_zstrcmp( Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), _tag_arr("`H",
  sizeof( unsigned char), 3u)) ==  0){ Cyc_Parse_err( _tag_arr("bad occurrence of heap region `H",
  sizeof( unsigned char), 33u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line));}{
! struct Cyc_Absyn_Tvar* tv=({ struct Cyc_Absyn_Tvar* _temp2567=( struct Cyc_Absyn_Tvar*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tvar)); _temp2567->name=({ struct
! _tagged_arr* _temp2568=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2568[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2568;});
! _temp2567->identity= 0; _temp2567->kind= Cyc_Absyn_new_conref(( void*) Cyc_Absyn_RgnKind);
! _temp2567;}); void* t=( void*)({ struct Cyc_Absyn_VarType_struct* _temp2565=(
  struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2565[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2566; _temp2566.tag= Cyc_Absyn_VarType;
! _temp2566.f1= tv; _temp2566;}); _temp2565;}); yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2557=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2557[ 0]=({ struct Cyc_Stmt_tok_struct _temp2558; _temp2558.tag= Cyc_Stmt_tok;
! _temp2558.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Region_s_struct*
! _temp2559=( struct Cyc_Absyn_Region_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Region_s_struct));
! _temp2559[ 0]=({ struct Cyc_Absyn_Region_s_struct _temp2560; _temp2560.tag= Cyc_Absyn_Region_s;
! _temp2560.f1= tv; _temp2560.f2= Cyc_Absyn_new_vardecl(({ struct _tuple1*
! _temp2561=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp2561->f1=(
! void*) Cyc_Absyn_Loc_n; _temp2561->f2=({ struct _tagged_arr* _temp2562=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp2562[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2562;});
! _temp2561;}),( void*)({ struct Cyc_Absyn_RgnHandleType_struct* _temp2563=(
  struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct));
! _temp2563[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct _temp2564; _temp2564.tag=
! Cyc_Absyn_RgnHandleType; _temp2564.f1=( void*) t; _temp2564;}); _temp2563;}), 0);
! _temp2560.f3= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2560;}); _temp2559;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2558;});
! _temp2557;}); break;} case 229: _LL2556: if( Cyc_Std_zstrcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), _tag_arr("H",
  sizeof( unsigned char), 2u)) ==  0){ Cyc_Parse_err( _tag_arr("bad occurrence of heap region `H",
  sizeof( unsigned char), 33u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));}{
! struct Cyc_Absyn_Tvar* tv=({ struct Cyc_Absyn_Tvar* _temp2580=( struct Cyc_Absyn_Tvar*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tvar)); _temp2580->name=({ struct
! _tagged_arr* _temp2581=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2581[ 0]=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp2583; _temp2583.tag= Cyc_Std_String_pa; _temp2583.f1=( struct _tagged_arr)
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
! -  1)]);{ void* _temp2582[ 1u]={& _temp2583}; Cyc_Std_aprintf( _tag_arr("`%s",
! sizeof( unsigned char), 4u), _tag_arr( _temp2582, sizeof( void*), 1u));}});
! _temp2581;}); _temp2580->identity= 0; _temp2580->kind= Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind); _temp2580;}); void* t=( void*)({ struct Cyc_Absyn_VarType_struct*
! _temp2578=( struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2578[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2579; _temp2579.tag= Cyc_Absyn_VarType;
! _temp2579.f1= tv; _temp2579;}); _temp2578;}); yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2570=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2570[ 0]=({ struct Cyc_Stmt_tok_struct _temp2571; _temp2571.tag= Cyc_Stmt_tok;
! _temp2571.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Region_s_struct*
! _temp2572=( struct Cyc_Absyn_Region_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Region_s_struct));
! _temp2572[ 0]=({ struct Cyc_Absyn_Region_s_struct _temp2573; _temp2573.tag= Cyc_Absyn_Region_s;
! _temp2573.f1= tv; _temp2573.f2= Cyc_Absyn_new_vardecl(({ struct _tuple1*
! _temp2574=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp2574->f1=(
! void*) Cyc_Absyn_Loc_n; _temp2574->f2=({ struct _tagged_arr* _temp2575=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp2575[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2575;});
! _temp2574;}),( void*)({ struct Cyc_Absyn_RgnHandleType_struct* _temp2576=(
  struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct));
! _temp2576[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct _temp2577; _temp2577.tag=
! Cyc_Absyn_RgnHandleType; _temp2577.f1=( void*) t; _temp2577;}); _temp2576;}), 0);
! _temp2573.f3= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2573;}); _temp2572;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2571;});
! _temp2570;}); break;} case 230: _LL2569: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2585=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2585[ 0]=({ struct Cyc_Stmt_tok_struct _temp2586; _temp2586.tag= Cyc_Stmt_tok;
! _temp2586.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Cut_s_struct*
! _temp2587=( struct Cyc_Absyn_Cut_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Cut_s_struct));
! _temp2587[ 0]=({ struct Cyc_Absyn_Cut_s_struct _temp2588; _temp2588.tag= Cyc_Absyn_Cut_s;
! _temp2588.f1= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2588;}); _temp2587;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2586;});
! _temp2585;}); break; case 231: _LL2584: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2590=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2590[ 0]=({ struct Cyc_Stmt_tok_struct _temp2591; _temp2591.tag= Cyc_Stmt_tok;
! _temp2591.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Splice_s_struct*
! _temp2592=( struct Cyc_Absyn_Splice_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Splice_s_struct));
! _temp2592[ 0]=({ struct Cyc_Absyn_Splice_s_struct _temp2593; _temp2593.tag= Cyc_Absyn_Splice_s;
! _temp2593.f1= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2593;}); _temp2592;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2591;});
! _temp2590;}); break; case 232: _LL2589: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2595=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2595[ 0]=({ struct Cyc_Stmt_tok_struct _temp2596; _temp2596.tag= Cyc_Stmt_tok;
! _temp2596.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Label_s_struct*
! _temp2597=( struct Cyc_Absyn_Label_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Label_s_struct));
! _temp2597[ 0]=({ struct Cyc_Absyn_Label_s_struct _temp2598; _temp2598.tag= Cyc_Absyn_Label_s;
! _temp2598.f1=({ struct _tagged_arr* _temp2599=( struct _tagged_arr*) _cycalloc(
! sizeof( struct _tagged_arr)); _temp2599[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2599;});
! _temp2598.f2= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2598;}); _temp2597;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2596;});
! _temp2595;}); break; case 233: _LL2594: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2601=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2601[ 0]=({ struct Cyc_Stmt_tok_struct _temp2602; _temp2602.tag= Cyc_Stmt_tok;
! _temp2602.f1= Cyc_Absyn_skip_stmt( Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2602;});
! _temp2601;}); break; case 234: _LL2600: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2604=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2604[ 0]=({ struct Cyc_Stmt_tok_struct _temp2605; _temp2605.tag= Cyc_Stmt_tok;
! _temp2605.f1= Cyc_Absyn_exp_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2605;}); _temp2604;}); break; case 235: _LL2603: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2607=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2607[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2608; _temp2608.tag= Cyc_Stmt_tok; _temp2608.f1= Cyc_Absyn_skip_stmt( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2608;}); _temp2607;}); break; case 236: _LL2606: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 237:
! _LL2609: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2611=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2611[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2612; _temp2612.tag= Cyc_Stmt_tok; _temp2612.f1= Cyc_Parse_flatten_declarations(
  Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]), Cyc_Absyn_skip_stmt( 0)); _temp2612;}); _temp2611;}); break;
! case 238: _LL2610: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2614=(
  struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2614[ 0]=({ struct Cyc_Stmt_tok_struct _temp2615; _temp2615.tag= Cyc_Stmt_tok;
! _temp2615.f1= Cyc_Parse_flatten_declarations( Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2615;});
! _temp2614;}); break; case 239: _LL2613: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 240: _LL2616:
! yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2618=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2618[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2619; _temp2619.tag= Cyc_Stmt_tok; _temp2619.f1= Cyc_Absyn_seq_stmt( Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2619;}); _temp2618;}); break; case 241: _LL2617: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2621=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2621[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2622; _temp2622.tag= Cyc_Stmt_tok; _temp2622.f1= Cyc_Parse_flatten_decl(
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Fn_d_struct* _temp2623=( struct
  Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp2623[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp2624; _temp2624.tag= Cyc_Absyn_Fn_d;
! _temp2624.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2624;}); _temp2623;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)), Cyc_Absyn_skip_stmt(
! 0)); _temp2622;}); _temp2621;}); break; case 242: _LL2620: yyval=( void*)({
! struct Cyc_Stmt_tok_struct* _temp2626=( struct Cyc_Stmt_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Stmt_tok_struct)); _temp2626[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2627; _temp2627.tag= Cyc_Stmt_tok; _temp2627.f1= Cyc_Parse_flatten_decl(
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Fn_d_struct* _temp2628=( struct
  Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp2628[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp2629; _temp2629.tag= Cyc_Absyn_Fn_d;
! _temp2629.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2629;}); _temp2628;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line)),
  Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]));
! _temp2627;}); _temp2626;}); break; case 243: _LL2625: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2631=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2631[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2632; _temp2632.tag= Cyc_Stmt_tok; _temp2632.f1= Cyc_Absyn_ifthenelse_stmt(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Absyn_skip_stmt( 0), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2632;});
! _temp2631;}); break; case 244: _LL2630: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2634=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2634[ 0]=({ struct Cyc_Stmt_tok_struct _temp2635; _temp2635.tag= Cyc_Stmt_tok;
! _temp2635.f1= Cyc_Absyn_ifthenelse_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2635;}); _temp2634;}); break; case 245: _LL2633: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2637=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2637[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2638; _temp2638.tag= Cyc_Stmt_tok; _temp2638.f1= Cyc_Absyn_switch_stmt( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_SwitchClauseList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2638;}); _temp2637;}); break; case 246: _LL2636: if( Cyc_Std_strcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)]), _tag_arr("C",
  sizeof( unsigned char), 2u)) !=  0){ Cyc_Parse_err( _tag_arr("only switch \"C\" { ... } is allowed",
  sizeof( unsigned char), 35u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2640=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2640[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2641; _temp2641.tag= Cyc_Stmt_tok; _temp2641.f1= Cyc_Absyn_new_stmt(( void*)({
! struct Cyc_Absyn_SwitchC_s_struct* _temp2642=( struct Cyc_Absyn_SwitchC_s_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_s_struct)); _temp2642[ 0]=({ struct
! Cyc_Absyn_SwitchC_s_struct _temp2643; _temp2643.tag= Cyc_Absyn_SwitchC_s;
! _temp2643.f1= Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  4)]); _temp2643.f2= Cyc_yyget_SwitchCClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2643;});
! _temp2642;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  7)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2641;}); _temp2640;}); break; case 247:
! _LL2639: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2645=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2645[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2646; _temp2646.tag= Cyc_Stmt_tok; _temp2646.f1= Cyc_Absyn_trycatch_stmt(
  Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  4)]), Cyc_yyget_SwitchClauseList_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2646;});
! _temp2645;}); break; case 248: _LL2644: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2648=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2648[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2649; _temp2649.tag= Cyc_SwitchClauseList_tok; _temp2649.f1= 0; _temp2649;});
! _temp2648;}); break; case 249: _LL2647: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2651=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2651[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2652; _temp2652.tag= Cyc_SwitchClauseList_tok; _temp2652.f1=({ struct Cyc_List_List*
! _temp2653=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2653->hd=( void*)({ struct Cyc_Absyn_Switch_clause* _temp2654=( struct Cyc_Absyn_Switch_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause)); _temp2654->pattern= Cyc_Absyn_new_pat((
  void*) Cyc_Absyn_Wild_p, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));
! _temp2654->pat_vars= 0; _temp2654->where_clause= 0; _temp2654->body= Cyc_yyget_Stmt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2654->loc=
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp2654;}); _temp2653->tl= 0; _temp2653;});
! _temp2652;}); _temp2651;}); break; case 250: _LL2650: yyval=( void*)({ struct
! Cyc_SwitchClauseList_tok_struct* _temp2656=( struct Cyc_SwitchClauseList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_SwitchClauseList_tok_struct)); _temp2656[ 0]=({
! struct Cyc_SwitchClauseList_tok_struct _temp2657; _temp2657.tag= Cyc_SwitchClauseList_tok;
! _temp2657.f1=({ struct Cyc_List_List* _temp2658=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2658->hd=( void*)({ struct Cyc_Absyn_Switch_clause*
! _temp2659=( struct Cyc_Absyn_Switch_clause*) _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause));
! _temp2659->pattern= Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2659->pat_vars= 0; _temp2659->where_clause= 0;
! _temp2659->body= Cyc_Absyn_fallthru_stmt( 0, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2659->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2659;});
! _temp2658->tl= Cyc_yyget_SwitchClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2658;}); _temp2657;});
! _temp2656;}); break; case 251: _LL2655: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2661=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2661[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2662; _temp2662.tag= Cyc_SwitchClauseList_tok; _temp2662.f1=({ struct Cyc_List_List*
! _temp2663=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2663->hd=( void*)({ struct Cyc_Absyn_Switch_clause* _temp2664=( struct Cyc_Absyn_Switch_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause)); _temp2664->pattern= Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2664->pat_vars=
! 0; _temp2664->where_clause= 0; _temp2664->body= Cyc_yyget_Stmt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2664->loc=
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line); _temp2664;}); _temp2663->tl= Cyc_yyget_SwitchClauseList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2663;});
! _temp2662;}); _temp2661;}); break; case 252: _LL2660: yyval=( void*)({ struct
! Cyc_SwitchClauseList_tok_struct* _temp2666=( struct Cyc_SwitchClauseList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_SwitchClauseList_tok_struct)); _temp2666[ 0]=({
! struct Cyc_SwitchClauseList_tok_struct _temp2667; _temp2667.tag= Cyc_SwitchClauseList_tok;
! _temp2667.f1=({ struct Cyc_List_List* _temp2668=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2668->hd=( void*)({ struct Cyc_Absyn_Switch_clause*
! _temp2669=( struct Cyc_Absyn_Switch_clause*) _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause));
! _temp2669->pattern= Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp2669->pat_vars= 0; _temp2669->where_clause=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2669->body= Cyc_Absyn_fallthru_stmt( 0, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2669->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2669;});
! _temp2668->tl= Cyc_yyget_SwitchClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2668;}); _temp2667;});
! _temp2666;}); break; case 253: _LL2665: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2671=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2671[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2672; _temp2672.tag= Cyc_SwitchClauseList_tok; _temp2672.f1=({ struct Cyc_List_List*
! _temp2673=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2673->hd=( void*)({ struct Cyc_Absyn_Switch_clause* _temp2674=( struct Cyc_Absyn_Switch_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause)); _temp2674->pattern= Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]); _temp2674->pat_vars=
! 0; _temp2674->where_clause=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2674->body=
  Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
! 1)]); _temp2674->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2674;});
! _temp2673->tl= Cyc_yyget_SwitchClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2673;}); _temp2672;});
! _temp2671;}); break; case 254: _LL2670: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct*
! _temp2676=( struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchCClauseList_tok_struct)); _temp2676[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct
! _temp2677; _temp2677.tag= Cyc_SwitchCClauseList_tok; _temp2677.f1= 0; _temp2677;});
! _temp2676;}); break; case 255: _LL2675: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct*
! _temp2679=( struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchCClauseList_tok_struct)); _temp2679[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct
! _temp2680; _temp2680.tag= Cyc_SwitchCClauseList_tok; _temp2680.f1=({ struct Cyc_List_List*
! _temp2681=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2681->hd=( void*)({ struct Cyc_Absyn_SwitchC_clause* _temp2682=( struct Cyc_Absyn_SwitchC_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_clause)); _temp2682->cnst_exp= 0;
! _temp2682->body= Cyc_Absyn_seq_stmt( Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Absyn_break_stmt( 0),
! 0); _temp2682->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2682;});
! _temp2681->tl= 0; _temp2681;}); _temp2680;}); _temp2679;}); break; case 256:
! _LL2678: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct* _temp2684=(
  struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct Cyc_SwitchCClauseList_tok_struct));
! _temp2684[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct _temp2685; _temp2685.tag=
! Cyc_SwitchCClauseList_tok; _temp2685.f1=({ struct Cyc_List_List* _temp2686=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2686->hd=(
! void*)({ struct Cyc_Absyn_SwitchC_clause* _temp2687=( struct Cyc_Absyn_SwitchC_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_clause)); _temp2687->cnst_exp=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2687->body= Cyc_Absyn_fallthru_stmt( 0, 0);
! _temp2687->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2687;});
! _temp2686->tl= Cyc_yyget_SwitchCClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2686;}); _temp2685;});
! _temp2684;}); break; case 257: _LL2683: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct*
! _temp2689=( struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchCClauseList_tok_struct)); _temp2689[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct
! _temp2690; _temp2690.tag= Cyc_SwitchCClauseList_tok; _temp2690.f1=({ struct Cyc_List_List*
! _temp2691=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2691->hd=( void*)({ struct Cyc_Absyn_SwitchC_clause* _temp2692=( struct Cyc_Absyn_SwitchC_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_clause)); _temp2692->cnst_exp=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  3)]); _temp2692->body= Cyc_Absyn_seq_stmt( Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Absyn_fallthru_stmt(
! 0, 0), 0); _temp2692->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2692;});
! _temp2691->tl= Cyc_yyget_SwitchCClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2691;}); _temp2690;});
! _temp2689;}); break; case 258: _LL2688: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2694=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2694[ 0]=({ struct Cyc_Stmt_tok_struct _temp2695; _temp2695.tag= Cyc_Stmt_tok;
! _temp2695.f1= Cyc_Absyn_while_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2695;}); _temp2694;}); break; case 259: _LL2693: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2697=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2697[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2698; _temp2698.tag= Cyc_Stmt_tok; _temp2698.f1= Cyc_Absyn_do_stmt( Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2698;}); _temp2697;}); break; case 260: _LL2696: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2700=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2700[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2701; _temp2701.tag= Cyc_Stmt_tok; _temp2701.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_Absyn_true_exp( 0), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2701;}); _temp2700;}); break; case 261: _LL2699: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2703=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2703[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2704; _temp2704.tag= Cyc_Stmt_tok; _temp2704.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_Absyn_true_exp( 0), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2704;}); _temp2703;}); break; case 262: _LL2702: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2706=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2706[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2707; _temp2707.tag= Cyc_Stmt_tok; _temp2707.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)]), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2707;}); _temp2706;}); break; case 263: _LL2705: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2709=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2709[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2710; _temp2710.tag= Cyc_Stmt_tok; _temp2710.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  4)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2710;}); _temp2709;}); break; case 264: _LL2708: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2712=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2712[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2713; _temp2713.tag= Cyc_Stmt_tok; _temp2713.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_Absyn_true_exp(
  0), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2713;}); _temp2712;}); break; case 265: _LL2711: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2715=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2715[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2716; _temp2716.tag= Cyc_Stmt_tok; _temp2716.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_Absyn_true_exp(
  0), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2716;});
! _temp2715;}); break; case 266: _LL2714: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2718=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2718[ 0]=({ struct Cyc_Stmt_tok_struct _temp2719; _temp2719.tag= Cyc_Stmt_tok;
! _temp2719.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), Cyc_Absyn_false_exp(
  0), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2719;});
! _temp2718;}); break; case 267: _LL2717: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2721=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2721[ 0]=({ struct Cyc_Stmt_tok_struct _temp2722; _temp2722.tag= Cyc_Stmt_tok;
! _temp2722.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  8)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2722;}); _temp2721;}); break; case 268: _LL2720: { struct Cyc_List_List*
! _temp2724= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); struct Cyc_Absyn_Stmt* _temp2725= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_Absyn_true_exp( 0), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2726=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2726[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2727; _temp2727.tag= Cyc_Stmt_tok; _temp2727.f1= Cyc_Parse_flatten_declarations(
! _temp2724, _temp2725); _temp2727;}); _temp2726;}); break;} case 269: _LL2723: {
! struct Cyc_List_List* _temp2729= Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); struct Cyc_Absyn_Stmt*
! _temp2730= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp( 0), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), Cyc_Absyn_false_exp(
  0), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2731=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2731[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2732; _temp2732.tag= Cyc_Stmt_tok; _temp2732.f1= Cyc_Parse_flatten_declarations(
! _temp2729, _temp2730); _temp2732;}); _temp2731;}); break;} case 270: _LL2728: {
! struct Cyc_List_List* _temp2734= Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); struct Cyc_Absyn_Stmt*
! _temp2735= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp( 0), Cyc_Absyn_true_exp( 0),
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2736=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2736[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2737; _temp2737.tag= Cyc_Stmt_tok; _temp2737.f1= Cyc_Parse_flatten_declarations(
! _temp2734, _temp2735); _temp2737;}); _temp2736;}); break;} case 271: _LL2733: {
! struct Cyc_List_List* _temp2739= Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]); struct Cyc_Absyn_Stmt*
! _temp2740= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp( 0), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2741=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2741[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2742; _temp2742.tag= Cyc_Stmt_tok; _temp2742.f1= Cyc_Parse_flatten_declarations(
! _temp2739, _temp2740); _temp2742;}); _temp2741;}); break;} case 272: _LL2738:
! yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2744=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2744[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2745; _temp2745.tag= Cyc_Stmt_tok; _temp2745.f1= Cyc_Absyn_goto_stmt(({
! struct _tagged_arr* _temp2746=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2746[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2746;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2745;}); _temp2744;}); break; case 273: _LL2743: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2748=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2748[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2749; _temp2749.tag= Cyc_Stmt_tok; _temp2749.f1= Cyc_Absyn_continue_stmt(
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line)); _temp2749;}); _temp2748;}); break; case 274:
! _LL2747: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2751=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2751[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2752; _temp2752.tag= Cyc_Stmt_tok; _temp2752.f1= Cyc_Absyn_break_stmt( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2752;}); _temp2751;}); break; case 275: _LL2750: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2754=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2754[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2755; _temp2755.tag= Cyc_Stmt_tok; _temp2755.f1= Cyc_Absyn_return_stmt( 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line)); _temp2755;}); _temp2754;}); break; case 276:
! _LL2753: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2757=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2757[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2758; _temp2758.tag= Cyc_Stmt_tok; _temp2758.f1= Cyc_Absyn_return_stmt((
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2758;}); _temp2757;}); break; case 277: _LL2756: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2760=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2760[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2761; _temp2761.tag= Cyc_Stmt_tok; _temp2761.f1= Cyc_Absyn_fallthru_stmt( 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line)); _temp2761;}); _temp2760;}); break; case 278:
! _LL2759: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2763=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2763[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2764; _temp2764.tag= Cyc_Stmt_tok; _temp2764.f1= Cyc_Absyn_fallthru_stmt( 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  3)]).last_line)); _temp2764;}); _temp2763;}); break; case 279:
! _LL2762: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2766=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2766[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2767; _temp2767.tag= Cyc_Stmt_tok; _temp2767.f1= Cyc_Absyn_fallthru_stmt(
  Cyc_yyget_ExpList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).last_line));
! _temp2767;}); _temp2766;}); break; case 280: _LL2765: yyval=( void*)({ struct
! Cyc_Pattern_tok_struct* _temp2769=( struct Cyc_Pattern_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Pattern_tok_struct)); _temp2769[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2770; _temp2770.tag= Cyc_Pattern_tok; _temp2770.f1= Cyc_Absyn_new_pat((
  void*) Cyc_Absyn_Wild_p, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2770;});
! _temp2769;}); break; case 281: _LL2768: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 282:
! _LL2771: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2773=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2773[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2774; _temp2774.tag= Cyc_Pattern_tok; _temp2774.f1= Cyc_Absyn_new_pat((
! void*)({ struct Cyc_Absyn_Int_p_struct* _temp2775=( struct Cyc_Absyn_Int_p_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Int_p_struct)); _temp2775[ 0]=({ struct Cyc_Absyn_Int_p_struct
! _temp2776; _temp2776.tag= Cyc_Absyn_Int_p; _temp2776.f1=( void*)(* Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1; _temp2776.f2=(*
  Cyc_yyget_Int_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2;
! _temp2776;}); _temp2775;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2774;});
! _temp2773;}); break; case 283: _LL2772: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2778=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2778[ 0]=({ struct Cyc_Pattern_tok_struct _temp2779; _temp2779.tag= Cyc_Pattern_tok;
! _temp2779.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Int_p_struct*
! _temp2780=( struct Cyc_Absyn_Int_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Int_p_struct));
! _temp2780[ 0]=({ struct Cyc_Absyn_Int_p_struct _temp2781; _temp2781.tag= Cyc_Absyn_Int_p;
! _temp2781.f1=( void*)(( void*) Cyc_Absyn_Signed); _temp2781.f2= -(* Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2; _temp2781;});
! _temp2780;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2779;}); _temp2778;}); break; case 284:
! _LL2777: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2783=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2783[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2784; _temp2784.tag= Cyc_Pattern_tok; _temp2784.f1= Cyc_Absyn_new_pat((
! void*)({ struct Cyc_Absyn_Float_p_struct* _temp2785=( struct Cyc_Absyn_Float_p_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Float_p_struct)); _temp2785[ 0]=({ struct
! Cyc_Absyn_Float_p_struct _temp2786; _temp2786.tag= Cyc_Absyn_Float_p; _temp2786.f1=
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]);
! _temp2786;}); _temp2785;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2784;});
! _temp2783;}); break; case 285: _LL2782: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2788=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2788[ 0]=({ struct Cyc_Pattern_tok_struct _temp2789; _temp2789.tag= Cyc_Pattern_tok;
! _temp2789.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Char_p_struct*
! _temp2790=( struct Cyc_Absyn_Char_p_struct*) _cycalloc_atomic( sizeof( struct
! Cyc_Absyn_Char_p_struct)); _temp2790[ 0]=({ struct Cyc_Absyn_Char_p_struct
! _temp2791; _temp2791.tag= Cyc_Absyn_Char_p; _temp2791.f1= Cyc_yyget_Char_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2791;});
! _temp2790;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp2789;}); _temp2788;}); break; case 286:
! _LL2787: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2793=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2793[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2794; _temp2794.tag= Cyc_Pattern_tok; _temp2794.f1= Cyc_Absyn_new_pat((
  void*) Cyc_Absyn_Null_p, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2794;});
! _temp2793;}); break; case 287: _LL2792: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2796=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2796[ 0]=({ struct Cyc_Pattern_tok_struct _temp2797; _temp2797.tag= Cyc_Pattern_tok;
! _temp2797.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_UnknownId_p_struct*
! _temp2798=( struct Cyc_Absyn_UnknownId_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_p_struct));
! _temp2798[ 0]=({ struct Cyc_Absyn_UnknownId_p_struct _temp2799; _temp2799.tag=
! Cyc_Absyn_UnknownId_p; _temp2799.f1= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2799;}); _temp2798;}),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp2797;}); _temp2796;}); break; case 288:
! _LL2795: { struct Cyc_List_List* _temp2801=(( struct Cyc_List_List*(*)( struct
  Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line),
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)])); yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2802=(
  struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2802[ 0]=({ struct Cyc_Pattern_tok_struct _temp2803; _temp2803.tag= Cyc_Pattern_tok;
! _temp2803.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_UnknownCall_p_struct*
! _temp2804=( struct Cyc_Absyn_UnknownCall_p_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownCall_p_struct)); _temp2804[ 0]=({ struct Cyc_Absyn_UnknownCall_p_struct
! _temp2805; _temp2805.tag= Cyc_Absyn_UnknownCall_p; _temp2805.f1= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp2805.f2=
! _temp2801; _temp2805.f3= Cyc_yyget_PatternList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2805;});
! _temp2804;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2803;}); _temp2802;}); break;} case
! 289: _LL2800: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2807=( struct
  Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2807[ 0]=({ struct Cyc_Pattern_tok_struct _temp2808; _temp2808.tag= Cyc_Pattern_tok;
! _temp2808.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Tuple_p_struct*
! _temp2809=( struct Cyc_Absyn_Tuple_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Tuple_p_struct));
! _temp2809[ 0]=({ struct Cyc_Absyn_Tuple_p_struct _temp2810; _temp2810.tag= Cyc_Absyn_Tuple_p;
! _temp2810.f1= Cyc_yyget_PatternList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2810;}); _temp2809;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2808;}); _temp2807;}); break; case 290: _LL2806: { struct Cyc_List_List*
! _temp2812=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
  Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line), Cyc_yyget_TypeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); yyval=(
! void*)({ struct Cyc_Pattern_tok_struct* _temp2813=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2813[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2814; _temp2814.tag= Cyc_Pattern_tok; _temp2814.f1= Cyc_Absyn_new_pat((
! void*)({ struct Cyc_Absyn_UnknownFields_p_struct* _temp2815=( struct Cyc_Absyn_UnknownFields_p_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownFields_p_struct)); _temp2815[ 0]=({
! struct Cyc_Absyn_UnknownFields_p_struct _temp2816; _temp2816.tag= Cyc_Absyn_UnknownFields_p;
! _temp2816.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp2816.f2= _temp2812; _temp2816.f3= 0; _temp2816;});
! _temp2815;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2814;}); _temp2813;}); break;} case
! 291: _LL2811: { struct Cyc_List_List* _temp2818=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line),
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)])); yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2819=(
  struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2819[ 0]=({ struct Cyc_Pattern_tok_struct _temp2820; _temp2820.tag= Cyc_Pattern_tok;
! _temp2820.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_UnknownFields_p_struct*
! _temp2821=( struct Cyc_Absyn_UnknownFields_p_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownFields_p_struct)); _temp2821[ 0]=({ struct Cyc_Absyn_UnknownFields_p_struct
! _temp2822; _temp2822.tag= Cyc_Absyn_UnknownFields_p; _temp2822.f1= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp2822.f2=
! _temp2818; _temp2822.f3= Cyc_yyget_FieldPatternList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2822;});
! _temp2821;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2820;}); _temp2819;}); break;} case
! 292: _LL2817: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2824=( struct
  Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2824[ 0]=({ struct Cyc_Pattern_tok_struct _temp2825; _temp2825.tag= Cyc_Pattern_tok;
! _temp2825.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Pointer_p_struct*
! _temp2826=( struct Cyc_Absyn_Pointer_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Pointer_p_struct));
! _temp2826[ 0]=({ struct Cyc_Absyn_Pointer_p_struct _temp2827; _temp2827.tag= Cyc_Absyn_Pointer_p;
! _temp2827.f1= Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2827;}); _temp2826;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2825;});
! _temp2824;}); break; case 293: _LL2823: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2829=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2829[ 0]=({ struct Cyc_Pattern_tok_struct _temp2830; _temp2830.tag= Cyc_Pattern_tok;
! _temp2830.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Reference_p_struct*
! _temp2831=( struct Cyc_Absyn_Reference_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Reference_p_struct));
! _temp2831[ 0]=({ struct Cyc_Absyn_Reference_p_struct _temp2832; _temp2832.tag=
! Cyc_Absyn_Reference_p; _temp2832.f1= Cyc_Absyn_new_vardecl(({ struct _tuple1*
! _temp2833=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp2833->f1=(
! void*) Cyc_Absyn_Loc_n; _temp2833->f2=({ struct _tagged_arr* _temp2834=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp2834[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2834;});
! _temp2833;}),( void*) Cyc_Absyn_VoidType, 0); _temp2832;}); _temp2831;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2830;}); _temp2829;}); break; case 294: _LL2828: yyval=( void*)({ struct
! Cyc_PatternList_tok_struct* _temp2836=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2836[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2837; _temp2837.tag= Cyc_PatternList_tok;
! _temp2837.f1= 0; _temp2837;}); _temp2836;}); break; case 295: _LL2835: yyval=(
! void*)({ struct Cyc_PatternList_tok_struct* _temp2839=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2839[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2840; _temp2840.tag= Cyc_PatternList_tok;
! _temp2840.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  Cyc_yyget_PatternList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])); _temp2840;}); _temp2839;}); break; case 296: _LL2838: yyval=(
! void*)({ struct Cyc_PatternList_tok_struct* _temp2842=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2842[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2843; _temp2843.tag= Cyc_PatternList_tok;
! _temp2843.f1=({ struct Cyc_List_List* _temp2844=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2844->hd=( void*) Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2844->tl= 0;
! _temp2844;}); _temp2843;}); _temp2842;}); break; case 297: _LL2841: yyval=( void*)({
! struct Cyc_PatternList_tok_struct* _temp2846=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2846[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2847; _temp2847.tag= Cyc_PatternList_tok;
! _temp2847.f1=({ struct Cyc_List_List* _temp2848=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2848->hd=( void*) Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2848->tl=
  Cyc_yyget_PatternList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2848;}); _temp2847;}); _temp2846;}); break; case 298:
! _LL2845: yyval=( void*)({ struct Cyc_FieldPattern_tok_struct* _temp2850=( struct
  Cyc_FieldPattern_tok_struct*) _cycalloc( sizeof( struct Cyc_FieldPattern_tok_struct));
! _temp2850[ 0]=({ struct Cyc_FieldPattern_tok_struct _temp2851; _temp2851.tag=
! Cyc_FieldPattern_tok; _temp2851.f1=({ struct _tuple13* _temp2852=( struct
! _tuple13*) _cycalloc( sizeof( struct _tuple13)); _temp2852->f1= 0; _temp2852->f2=
  Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2852;}); _temp2851;}); _temp2850;}); break; case 299:
! _LL2849: yyval=( void*)({ struct Cyc_FieldPattern_tok_struct* _temp2854=( struct
  Cyc_FieldPattern_tok_struct*) _cycalloc( sizeof( struct Cyc_FieldPattern_tok_struct));
! _temp2854[ 0]=({ struct Cyc_FieldPattern_tok_struct _temp2855; _temp2855.tag=
! Cyc_FieldPattern_tok; _temp2855.f1=({ struct _tuple13* _temp2856=( struct
! _tuple13*) _cycalloc( sizeof( struct _tuple13)); _temp2856->f1= Cyc_yyget_DesignatorList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2856->f2=
  Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2856;}); _temp2855;}); _temp2854;}); break; case 300:
! _LL2853: yyval=( void*)({ struct Cyc_FieldPatternList_tok_struct* _temp2858=(
  struct Cyc_FieldPatternList_tok_struct*) _cycalloc( sizeof( struct Cyc_FieldPatternList_tok_struct));
! _temp2858[ 0]=({ struct Cyc_FieldPatternList_tok_struct _temp2859; _temp2859.tag=
! Cyc_FieldPatternList_tok; _temp2859.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_FieldPatternList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2859;});
! _temp2858;}); break; case 301: _LL2857: yyval=( void*)({ struct Cyc_FieldPatternList_tok_struct*
! _temp2861=( struct Cyc_FieldPatternList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_FieldPatternList_tok_struct)); _temp2861[ 0]=({ struct Cyc_FieldPatternList_tok_struct
! _temp2862; _temp2862.tag= Cyc_FieldPatternList_tok; _temp2862.f1=({ struct Cyc_List_List*
! _temp2863=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2863->hd=( void*) Cyc_yyget_FieldPattern_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2863->tl= 0;
! _temp2863;}); _temp2862;}); _temp2861;}); break; case 302: _LL2860: yyval=( void*)({
! struct Cyc_FieldPatternList_tok_struct* _temp2865=( struct Cyc_FieldPatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_FieldPatternList_tok_struct)); _temp2865[ 0]=({
! struct Cyc_FieldPatternList_tok_struct _temp2866; _temp2866.tag= Cyc_FieldPatternList_tok;
! _temp2866.f1=({ struct Cyc_List_List* _temp2867=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2867->hd=( void*) Cyc_yyget_FieldPattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2867->tl=
  Cyc_yyget_FieldPatternList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2867;}); _temp2866;}); _temp2865;}); break; case 303:
! _LL2864: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 304: _LL2868: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2870=(
  struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2870[ 0]=({ struct Cyc_Exp_tok_struct _temp2871; _temp2871.tag= Cyc_Exp_tok;
! _temp2871.f1= Cyc_Absyn_seq_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2871;}); _temp2870;}); break; case 305: _LL2869: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 306: _LL2872:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2874=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2874[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2875; _temp2875.tag= Cyc_Exp_tok; _temp2875.f1= Cyc_Absyn_assignop_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Primopopt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2875;}); _temp2874;}); break; case 307: _LL2873: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2877=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2877[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2878; _temp2878.tag= Cyc_Primopopt_tok; _temp2878.f1=
! 0; _temp2878;}); _temp2877;}); break; case 308: _LL2876: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2880=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2880[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2881; _temp2881.tag= Cyc_Primopopt_tok; _temp2881.f1=({
! struct Cyc_Core_Opt* _temp2882=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2882->v=( void*)(( void*) Cyc_Absyn_Times); _temp2882;});
! _temp2881;}); _temp2880;}); break; case 309: _LL2879: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2884=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2884[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2885; _temp2885.tag= Cyc_Primopopt_tok; _temp2885.f1=({
! struct Cyc_Core_Opt* _temp2886=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2886->v=( void*)(( void*) Cyc_Absyn_Div); _temp2886;});
! _temp2885;}); _temp2884;}); break; case 310: _LL2883: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2888=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2888[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2889; _temp2889.tag= Cyc_Primopopt_tok; _temp2889.f1=({
! struct Cyc_Core_Opt* _temp2890=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2890->v=( void*)(( void*) Cyc_Absyn_Mod); _temp2890;});
! _temp2889;}); _temp2888;}); break; case 311: _LL2887: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2892=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2892[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2893; _temp2893.tag= Cyc_Primopopt_tok; _temp2893.f1=({
! struct Cyc_Core_Opt* _temp2894=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2894->v=( void*)(( void*) Cyc_Absyn_Plus); _temp2894;});
! _temp2893;}); _temp2892;}); break; case 312: _LL2891: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2896=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2896[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2897; _temp2897.tag= Cyc_Primopopt_tok; _temp2897.f1=({
! struct Cyc_Core_Opt* _temp2898=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2898->v=( void*)(( void*) Cyc_Absyn_Minus); _temp2898;});
! _temp2897;}); _temp2896;}); break; case 313: _LL2895: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2900=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2900[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2901; _temp2901.tag= Cyc_Primopopt_tok; _temp2901.f1=({
! struct Cyc_Core_Opt* _temp2902=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2902->v=( void*)(( void*) Cyc_Absyn_Bitlshift); _temp2902;});
! _temp2901;}); _temp2900;}); break; case 314: _LL2899: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2904=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2904[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2905; _temp2905.tag= Cyc_Primopopt_tok; _temp2905.f1=({
! struct Cyc_Core_Opt* _temp2906=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2906->v=( void*)(( void*) Cyc_Absyn_Bitlrshift); _temp2906;});
! _temp2905;}); _temp2904;}); break; case 315: _LL2903: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2908=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2908[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2909; _temp2909.tag= Cyc_Primopopt_tok; _temp2909.f1=({
! struct Cyc_Core_Opt* _temp2910=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2910->v=( void*)(( void*) Cyc_Absyn_Bitand); _temp2910;});
! _temp2909;}); _temp2908;}); break; case 316: _LL2907: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2912=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2912[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2913; _temp2913.tag= Cyc_Primopopt_tok; _temp2913.f1=({
! struct Cyc_Core_Opt* _temp2914=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2914->v=( void*)(( void*) Cyc_Absyn_Bitxor); _temp2914;});
! _temp2913;}); _temp2912;}); break; case 317: _LL2911: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2916=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2916[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2917; _temp2917.tag= Cyc_Primopopt_tok; _temp2917.f1=({
! struct Cyc_Core_Opt* _temp2918=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2918->v=( void*)(( void*) Cyc_Absyn_Bitor); _temp2918;});
! _temp2917;}); _temp2916;}); break; case 318: _LL2915: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 319: _LL2919:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2921=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2921[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2922; _temp2922.tag= Cyc_Exp_tok; _temp2922.f1= Cyc_Absyn_conditional_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  4)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2922;});
! _temp2921;}); break; case 320: _LL2920: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2924=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2924[ 0]=({ struct Cyc_Exp_tok_struct _temp2925; _temp2925.tag= Cyc_Exp_tok;
! _temp2925.f1= Cyc_Absyn_throw_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2925;}); _temp2924;}); break; case 321: _LL2923: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2927=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2927[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2928; _temp2928.tag= Cyc_Exp_tok; _temp2928.f1= Cyc_Absyn_New_exp( 0, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset +  1)]).last_line));
! _temp2928;}); _temp2927;}); break; case 322: _LL2926: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2930=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2930[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2931; _temp2931.tag= Cyc_Exp_tok; _temp2931.f1= Cyc_Absyn_New_exp( 0, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset +  1)]).last_line));
! _temp2931;}); _temp2930;}); break; case 323: _LL2929: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2933=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2933[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2934; _temp2934.tag= Cyc_Exp_tok; _temp2934.f1= Cyc_Absyn_New_exp(( struct
  Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2934;});
! _temp2933;}); break; case 324: _LL2932: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2936=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2936[ 0]=({ struct Cyc_Exp_tok_struct _temp2937; _temp2937.tag= Cyc_Exp_tok;
! _temp2937.f1= Cyc_Absyn_New_exp(( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2937;}); _temp2936;}); break; case 325: _LL2935: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 326: _LL2938:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 327: _LL2939: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2941=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2941[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2942; _temp2942.tag= Cyc_Exp_tok; _temp2942.f1= Cyc_Absyn_or_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2942;}); _temp2941;}); break; case 328: _LL2940: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 329: _LL2943:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2945=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2945[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2946; _temp2946.tag= Cyc_Exp_tok; _temp2946.f1= Cyc_Absyn_and_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2946;}); _temp2945;}); break; case 330: _LL2944: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 331: _LL2947:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2949=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2949[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2950; _temp2950.tag= Cyc_Exp_tok; _temp2950.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitor, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2950;});
! _temp2949;}); break; case 332: _LL2948: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 333: _LL2951:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2953=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2953[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2954; _temp2954.tag= Cyc_Exp_tok; _temp2954.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitxor, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2954;});
! _temp2953;}); break; case 334: _LL2952: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 335: _LL2955:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2957=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2957[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2958; _temp2958.tag= Cyc_Exp_tok; _temp2958.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitand, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2958;});
! _temp2957;}); break; case 336: _LL2956: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 337: _LL2959:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2961=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2961[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2962; _temp2962.tag= Cyc_Exp_tok; _temp2962.f1= Cyc_Absyn_eq_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2962;}); _temp2961;}); break; case 338: _LL2960: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2964=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2964[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2965; _temp2965.tag= Cyc_Exp_tok; _temp2965.f1= Cyc_Absyn_neq_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2965;}); _temp2964;}); break; case 339: _LL2963: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 340: _LL2966:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2968=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2968[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2969; _temp2969.tag= Cyc_Exp_tok; _temp2969.f1= Cyc_Absyn_lt_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2969;}); _temp2968;}); break; case 341: _LL2967: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2971=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2971[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2972; _temp2972.tag= Cyc_Exp_tok; _temp2972.f1= Cyc_Absyn_gt_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2972;}); _temp2971;}); break; case 342: _LL2970: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2974=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2974[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2975; _temp2975.tag= Cyc_Exp_tok; _temp2975.f1= Cyc_Absyn_lte_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2975;}); _temp2974;}); break; case 343: _LL2973: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2977=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2977[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2978; _temp2978.tag= Cyc_Exp_tok; _temp2978.f1= Cyc_Absyn_gte_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2978;}); _temp2977;}); break; case 344: _LL2976: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 345: _LL2979:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2981=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2981[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2982; _temp2982.tag= Cyc_Exp_tok; _temp2982.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitlshift, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2982;}); _temp2981;}); break; case 346: _LL2980: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2984=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2984[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2985; _temp2985.tag= Cyc_Exp_tok; _temp2985.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitlrshift, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2985;}); _temp2984;}); break; case 347: _LL2983: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 348: _LL2986:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2988=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2988[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2989; _temp2989.tag= Cyc_Exp_tok; _temp2989.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Plus, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2989;});
! _temp2988;}); break; case 349: _LL2987: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2991=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2991[ 0]=({ struct Cyc_Exp_tok_struct _temp2992; _temp2992.tag= Cyc_Exp_tok;
! _temp2992.f1= Cyc_Absyn_prim2_exp(( void*) Cyc_Absyn_Minus, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2992;}); _temp2991;}); break; case 350: _LL2990: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 351: _LL2993:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2995=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2995[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2996; _temp2996.tag= Cyc_Exp_tok; _temp2996.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Times, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2996;});
! _temp2995;}); break; case 352: _LL2994: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2998=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2998[ 0]=({ struct Cyc_Exp_tok_struct _temp2999; _temp2999.tag= Cyc_Exp_tok;
! _temp2999.f1= Cyc_Absyn_prim2_exp(( void*) Cyc_Absyn_Div, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2999;}); _temp2998;}); break; case 353: _LL2997: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3001=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3001[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3002; _temp3002.tag= Cyc_Exp_tok; _temp3002.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Mod, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3002;});
! _temp3001;}); break; case 354: _LL3000: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 355: _LL3003:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3005=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3005[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3006; _temp3006.tag= Cyc_Exp_tok; _temp3006.f1= Cyc_Absyn_cast_exp((* Cyc_yyget_ParamDecl_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])).f3, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3006;}); _temp3005;}); break; case 356: _LL3004: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 357: _LL3007:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3009=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3009[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3010; _temp3010.tag= Cyc_Exp_tok; _temp3010.f1= Cyc_Absyn_pre_inc_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3010;}); _temp3009;}); break; case 358: _LL3008: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3012=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3012[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3013; _temp3013.tag= Cyc_Exp_tok; _temp3013.f1= Cyc_Absyn_pre_dec_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3013;}); _temp3012;}); break; case 359: _LL3011: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3015=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3015[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3016; _temp3016.tag= Cyc_Exp_tok; _temp3016.f1= Cyc_Absyn_address_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3016;}); _temp3015;}); break; case 360: _LL3014: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3018=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3018[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3019; _temp3019.tag= Cyc_Exp_tok; _temp3019.f1= Cyc_Absyn_deref_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3019;}); _temp3018;}); break; case 361: _LL3017: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 362: _LL3020:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3022=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3022[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3023; _temp3023.tag= Cyc_Exp_tok; _temp3023.f1= Cyc_Absyn_prim1_exp( Cyc_yyget_Primop_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3023;}); _temp3022;}); break; case 363: _LL3021: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3025=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3025[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3026; _temp3026.tag= Cyc_Exp_tok; _temp3026.f1= Cyc_Absyn_sizeoftyp_exp((*
  Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)])).f3, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3026;});
! _temp3025;}); break; case 364: _LL3024: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3028=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3028[ 0]=({ struct Cyc_Exp_tok_struct _temp3029; _temp3029.tag= Cyc_Exp_tok;
! _temp3029.f1= Cyc_Absyn_sizeofexp_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3029;}); _temp3028;}); break; case 365: _LL3027: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3031=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3031[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3032; _temp3032.tag= Cyc_Exp_tok; _temp3032.f1= Cyc_Absyn_offsetof_exp((*
  Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)])).f3,( void*)({ struct Cyc_Absyn_StructField_struct*
! _temp3033=( struct Cyc_Absyn_StructField_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructField_struct));
! _temp3033[ 0]=({ struct Cyc_Absyn_StructField_struct _temp3034; _temp3034.tag=
! Cyc_Absyn_StructField; _temp3034.f1=({ struct _tagged_arr* _temp3035=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp3035[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp3035;});
! _temp3034;}); _temp3033;}), Cyc_Position_segment_of_abs(( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3032;});
! _temp3031;}); break; case 366: _LL3030: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3037=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3037[ 0]=({ struct Cyc_Exp_tok_struct _temp3038; _temp3038.tag= Cyc_Exp_tok;
! _temp3038.f1= Cyc_Absyn_offsetof_exp((* Cyc_yyget_ParamDecl_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)])).f3,( void*)({
! struct Cyc_Absyn_TupleIndex_struct* _temp3039=( struct Cyc_Absyn_TupleIndex_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_Absyn_TupleIndex_struct)); _temp3039[ 0]=({
! struct Cyc_Absyn_TupleIndex_struct _temp3040; _temp3040.tag= Cyc_Absyn_TupleIndex;
! _temp3040.f1=( unsigned int)(* Cyc_yyget_Int_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])).f2; _temp3040;});
! _temp3039;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3038;}); _temp3037;}); break; case 367:
! _LL3036: { struct Cyc_Position_Segment* _temp3042= Cyc_Position_segment_of_abs((
! yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
! yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); struct
! Cyc_List_List* _temp3043=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)(
! struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env, struct
! Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, _temp3042, Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)])); yyval=(
! void*)({ struct Cyc_Exp_tok_struct* _temp3044=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3044[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3045; _temp3045.tag= Cyc_Exp_tok; _temp3045.f1= Cyc_Absyn_gentyp_exp(
! _temp3043,(* Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)])).f3, Cyc_Position_segment_of_abs(( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3045;});
! _temp3044;}); break;} case 368: _LL3041: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3047=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3047[ 0]=({ struct Cyc_Exp_tok_struct _temp3048; _temp3048.tag= Cyc_Exp_tok;
! _temp3048.f1= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Malloc_e_struct*
! _temp3049=( struct Cyc_Absyn_Malloc_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Malloc_e_struct));
! _temp3049[ 0]=({ struct Cyc_Absyn_Malloc_e_struct _temp3050; _temp3050.tag= Cyc_Absyn_Malloc_e;
! _temp3050.f1= 0; _temp3050.f2=( void*) Cyc_Parse_speclist2typ((* Cyc_yyget_QualSpecList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));
! _temp3050;}); _temp3049;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3048;});
! _temp3047;}); break; case 369: _LL3046: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3052=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3052[ 0]=({ struct Cyc_Exp_tok_struct _temp3053; _temp3053.tag= Cyc_Exp_tok;
! _temp3053.f1= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Malloc_e_struct*
! _temp3054=( struct Cyc_Absyn_Malloc_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Malloc_e_struct));
! _temp3054[ 0]=({ struct Cyc_Absyn_Malloc_e_struct _temp3055; _temp3055.tag= Cyc_Absyn_Malloc_e;
! _temp3055.f1=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)]); _temp3055.f2=(
  void*) Cyc_Parse_speclist2typ((* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));
! _temp3055;}); _temp3054;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  8)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3053;});
! _temp3052;}); break; case 370: _LL3051: yyval=( void*)({ struct Cyc_Primop_tok_struct*
! _temp3057=( struct Cyc_Primop_tok_struct*) _cycalloc( sizeof( struct Cyc_Primop_tok_struct));
! _temp3057[ 0]=({ struct Cyc_Primop_tok_struct _temp3058; _temp3058.tag= Cyc_Primop_tok;
! _temp3058.f1=( void*)(( void*) Cyc_Absyn_Bitnot); _temp3058;}); _temp3057;});
! break; case 371: _LL3056: yyval=( void*)({ struct Cyc_Primop_tok_struct*
! _temp3060=( struct Cyc_Primop_tok_struct*) _cycalloc( sizeof( struct Cyc_Primop_tok_struct));
! _temp3060[ 0]=({ struct Cyc_Primop_tok_struct _temp3061; _temp3061.tag= Cyc_Primop_tok;
! _temp3061.f1=( void*)(( void*) Cyc_Absyn_Not); _temp3061;}); _temp3060;});
! break; case 372: _LL3059: yyval=( void*)({ struct Cyc_Primop_tok_struct*
! _temp3063=( struct Cyc_Primop_tok_struct*) _cycalloc( sizeof( struct Cyc_Primop_tok_struct));
! _temp3063[ 0]=({ struct Cyc_Primop_tok_struct _temp3064; _temp3064.tag= Cyc_Primop_tok;
! _temp3064.f1=( void*)(( void*) Cyc_Absyn_Minus); _temp3064;}); _temp3063;});
! break; case 373: _LL3062: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 374: _LL3065: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3067=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3067[ 0]=({ struct Cyc_Exp_tok_struct _temp3068; _temp3068.tag= Cyc_Exp_tok;
! _temp3068.f1= Cyc_Absyn_subscript_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3068;}); _temp3067;}); break; case 375: _LL3066: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3070=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3070[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3071; _temp3071.tag= Cyc_Exp_tok; _temp3071.f1= Cyc_Absyn_unknowncall_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]), 0, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3071;}); _temp3070;}); break; case 376:
! _LL3069: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3073=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3073[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3074; _temp3074.tag= Cyc_Exp_tok; _temp3074.f1= Cyc_Absyn_unknowncall_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  3)]), Cyc_yyget_ExpList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3074;});
! _temp3073;}); break; case 377: _LL3072: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3076=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3076[ 0]=({ struct Cyc_Exp_tok_struct _temp3077; _temp3077.tag= Cyc_Exp_tok;
! _temp3077.f1= Cyc_Absyn_structmember_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]),({ struct
! _tagged_arr* _temp3078=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp3078[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3078;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3077;}); _temp3076;}); break; case 378: _LL3075: { struct _tuple1* q= Cyc_yyget_QualId_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if( Cyc_Absyn_is_qvar_qualified(
  q)){ Cyc_Parse_err( _tag_arr("struct field name is qualified", sizeof(
  unsigned char), 31u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Exp_tok_struct* _temp3080=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3080[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3081; _temp3081.tag= Cyc_Exp_tok; _temp3081.f1= Cyc_Absyn_structmember_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]),(* q).f2, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3081;});
! _temp3080;}); break;} case 379: _LL3079: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3083=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3083[ 0]=({ struct Cyc_Exp_tok_struct _temp3084; _temp3084.tag= Cyc_Exp_tok;
! _temp3084.f1= Cyc_Absyn_structarrow_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]),({ struct
! _tagged_arr* _temp3085=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp3085[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3085;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3084;}); _temp3083;}); break; case 380: _LL3082: { struct _tuple1* q= Cyc_yyget_QualId_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if( Cyc_Absyn_is_qvar_qualified(
  q)){ Cyc_Parse_err( _tag_arr("struct field name is qualified", sizeof(
  unsigned char), 31u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Exp_tok_struct* _temp3087=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3087[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3088; _temp3088.tag= Cyc_Exp_tok; _temp3088.f1= Cyc_Absyn_structarrow_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]),(* q).f2, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3088;});
! _temp3087;}); break;} case 381: _LL3086: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3090=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3090[ 0]=({ struct Cyc_Exp_tok_struct _temp3091; _temp3091.tag= Cyc_Exp_tok;
! _temp3091.f1= Cyc_Absyn_post_inc_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3091;}); _temp3090;}); break; case 382: _LL3089: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3093=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3093[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3094; _temp3094.tag= Cyc_Exp_tok; _temp3094.f1= Cyc_Absyn_post_dec_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3094;}); _temp3093;}); break; case 383: _LL3092: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3096=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3096[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3097; _temp3097.tag= Cyc_Exp_tok; _temp3097.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_CompoundLit_e_struct* _temp3098=( struct Cyc_Absyn_CompoundLit_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_CompoundLit_e_struct)); _temp3098[ 0]=({
! struct Cyc_Absyn_CompoundLit_e_struct _temp3099; _temp3099.tag= Cyc_Absyn_CompoundLit_e;
! _temp3099.f1= Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp3099.f2=(( struct Cyc_List_List*(*)( struct
  Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp3099;});
! _temp3098;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3097;}); _temp3096;}); break; case 384:
! _LL3095: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3101=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3101[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3102; _temp3102.tag= Cyc_Exp_tok; _temp3102.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_CompoundLit_e_struct* _temp3103=( struct Cyc_Absyn_CompoundLit_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_CompoundLit_e_struct)); _temp3103[ 0]=({
! struct Cyc_Absyn_CompoundLit_e_struct _temp3104; _temp3104.tag= Cyc_Absyn_CompoundLit_e;
! _temp3104.f1= Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  5)]); _temp3104.f2=(( struct Cyc_List_List*(*)( struct
  Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); _temp3104;});
! _temp3103;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  6)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3102;}); _temp3101;}); break; case 385:
! _LL3100: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3106=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3106[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3107; _temp3107.tag= Cyc_Exp_tok; _temp3107.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Fill_e_struct* _temp3108=( struct Cyc_Absyn_Fill_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Fill_e_struct)); _temp3108[ 0]=({ struct Cyc_Absyn_Fill_e_struct
! _temp3109; _temp3109.tag= Cyc_Absyn_Fill_e; _temp3109.f1= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp3109;});
! _temp3108;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3107;}); _temp3106;}); break; case 386:
! _LL3105: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3111=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3111[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3112; _temp3112.tag= Cyc_Exp_tok; _temp3112.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Codegen_e_struct* _temp3113=( struct Cyc_Absyn_Codegen_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Codegen_e_struct)); _temp3113[ 0]=({ struct
! Cyc_Absyn_Codegen_e_struct _temp3114; _temp3114.tag= Cyc_Absyn_Codegen_e;
! _temp3114.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp3114;}); _temp3113;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3112;}); _temp3111;}); break; case 387: _LL3110: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3116=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3116[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3117; _temp3117.tag= Cyc_Exp_tok; _temp3117.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_UnknownId_e_struct* _temp3118=( struct Cyc_Absyn_UnknownId_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_e_struct)); _temp3118[ 0]=({
! struct Cyc_Absyn_UnknownId_e_struct _temp3119; _temp3119.tag= Cyc_Absyn_UnknownId_e;
! _temp3119.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp3119;}); _temp3118;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3117;});
! _temp3116;}); break; case 388: _LL3115: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 389: _LL3120:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3122=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3122[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3123; _temp3123.tag= Cyc_Exp_tok; _temp3123.f1= Cyc_Absyn_string_exp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3123;});
! _temp3122;}); break; case 390: _LL3121: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 391:
! _LL3124: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3126=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3126[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3127; _temp3127.tag= Cyc_Exp_tok; _temp3127.f1= Cyc_Absyn_noinstantiate_exp(
! Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnknownId_e_struct* _temp3128=(
  struct Cyc_Absyn_UnknownId_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_e_struct));
! _temp3128[ 0]=({ struct Cyc_Absyn_UnknownId_e_struct _temp3129; _temp3129.tag=
! Cyc_Absyn_UnknownId_e; _temp3129.f1= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp3129;});
! _temp3128;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  1)]).last_line)), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3127;});
! _temp3126;}); break; case 392: _LL3125: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3131=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3131[ 0]=({ struct Cyc_Exp_tok_struct _temp3132; _temp3132.tag= Cyc_Exp_tok;
! _temp3132.f1= Cyc_Absyn_instantiate_exp( Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnknownId_e_struct*
! _temp3133=( struct Cyc_Absyn_UnknownId_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_e_struct));
! _temp3133[ 0]=({ struct Cyc_Absyn_UnknownId_e_struct _temp3134; _temp3134.tag=
! Cyc_Absyn_UnknownId_e; _temp3134.f1= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp3134;});
! _temp3133;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).last_line)), Cyc_List_imp_rev( Cyc_yyget_TypeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3132;}); _temp3131;}); break; case 393: _LL3130: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3136=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3136[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3137; _temp3137.tag= Cyc_Exp_tok; _temp3137.f1= Cyc_Absyn_tuple_exp( Cyc_yyget_ExpList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3137;}); _temp3136;}); break; case 394: _LL3135: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3139=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3139[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3140; _temp3140.tag= Cyc_Exp_tok; _temp3140.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Struct_e_struct* _temp3141=( struct Cyc_Absyn_Struct_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Struct_e_struct)); _temp3141[ 0]=({ struct
! Cyc_Absyn_Struct_e_struct _temp3142; _temp3142.tag= Cyc_Absyn_Struct_e;
! _temp3142.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp3142.f2= 0; _temp3142.f3=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp3142.f4= 0;
! _temp3142;}); _temp3141;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3140;});
! _temp3139;}); break; case 395: _LL3138: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3144=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3144[ 0]=({ struct Cyc_Exp_tok_struct _temp3145; _temp3145.tag= Cyc_Exp_tok;
! _temp3145.f1= Cyc_Absyn_stmt_exp( Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3145;}); _temp3144;}); break; case 396: _LL3143: yyval=( void*)({ struct
! Cyc_ExpList_tok_struct* _temp3147=( struct Cyc_ExpList_tok_struct*) _cycalloc(
! sizeof( struct Cyc_ExpList_tok_struct)); _temp3147[ 0]=({ struct Cyc_ExpList_tok_struct
! _temp3148; _temp3148.tag= Cyc_ExpList_tok; _temp3148.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ExpList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp3148;});
! _temp3147;}); break; case 397: _LL3146: yyval=( void*)({ struct Cyc_ExpList_tok_struct*
! _temp3150=( struct Cyc_ExpList_tok_struct*) _cycalloc( sizeof( struct Cyc_ExpList_tok_struct));
! _temp3150[ 0]=({ struct Cyc_ExpList_tok_struct _temp3151; _temp3151.tag= Cyc_ExpList_tok;
! _temp3151.f1=({ struct Cyc_List_List* _temp3152=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3152->hd=( void*) Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3152->tl= 0;
! _temp3152;}); _temp3151;}); _temp3150;}); break; case 398: _LL3149: yyval=( void*)({
! struct Cyc_ExpList_tok_struct* _temp3154=( struct Cyc_ExpList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ExpList_tok_struct)); _temp3154[ 0]=({ struct Cyc_ExpList_tok_struct
! _temp3155; _temp3155.tag= Cyc_ExpList_tok; _temp3155.f1=({ struct Cyc_List_List*
! _temp3156=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp3156->hd=( void*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp3156->tl= Cyc_yyget_ExpList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp3156;});
! _temp3155;}); _temp3154;}); break; case 399: _LL3153: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3158=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3158[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3159; _temp3159.tag= Cyc_Exp_tok; _temp3159.f1= Cyc_Absyn_int_exp((* Cyc_yyget_Int_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1,(* Cyc_yyget_Int_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3159;});
! _temp3158;}); break; case 400: _LL3157: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3161=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3161[ 0]=({ struct Cyc_Exp_tok_struct _temp3162; _temp3162.tag= Cyc_Exp_tok;
! _temp3162.f1= Cyc_Absyn_char_exp( Cyc_yyget_Char_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3162;});
! _temp3161;}); break; case 401: _LL3160: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3164=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3164[ 0]=({ struct Cyc_Exp_tok_struct _temp3165; _temp3165.tag= Cyc_Exp_tok;
! _temp3165.f1= Cyc_Absyn_float_exp( Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3165;});
! _temp3164;}); break; case 402: _LL3163: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3167=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3167[ 0]=({ struct Cyc_Exp_tok_struct _temp3168; _temp3168.tag= Cyc_Exp_tok;
! _temp3168.f1= Cyc_Absyn_null_exp( Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3168;});
! _temp3167;}); break; case 403: _LL3166: yyval=( void*)({ struct Cyc_QualId_tok_struct*
! _temp3170=( struct Cyc_QualId_tok_struct*) _cycalloc( sizeof( struct Cyc_QualId_tok_struct));
! _temp3170[ 0]=({ struct Cyc_QualId_tok_struct _temp3171; _temp3171.tag= Cyc_QualId_tok;
! _temp3171.f1=({ struct _tuple1* _temp3172=( struct _tuple1*) _cycalloc( sizeof(
! struct _tuple1)); _temp3172->f1= Cyc_Absyn_rel_ns_null; _temp3172->f2=({ struct
! _tagged_arr* _temp3173=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp3173[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3173;}); _temp3172;});
! _temp3171;}); _temp3170;}); break; case 404: _LL3169: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; default: _LL3174:(
  int) _throw(( void*) Cyc_Yyimpossible);} yyvsp_offset -= yylen; yyssp_offset -=
  yylen; yylsp_offset -= yylen; yyvs[ _check_known_subscript_notnull( 10000u, ++
  yyvsp_offset)]= yyval; yylsp_offset ++; if( yylen ==  0){( yyls[
--- 3823,6809 ----
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)])); struct Cyc_Absyn_Decl* d; switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)])){ case Cyc_Parse_Struct_su:
! _LL1745: d= Cyc_Absyn_struct_decl(( void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt*
! _temp1747=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1747->v=( void*) Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp1747;}), _temp1744,({ struct Cyc_Core_Opt*
  _temp1748=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1748->v=( void*) Cyc_yyget_StructFieldDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1748;}), 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); break; case Cyc_Parse_Union_su: _LL1746: d= Cyc_Absyn_union_decl((
! void*) Cyc_Absyn_Public,({ struct Cyc_Core_Opt* _temp1750=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1750->v=( void*) Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1750;}),
! _temp1744,({ struct Cyc_Core_Opt* _temp1751=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1751->v=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1751;}),
  0, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line)); break;} yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1752=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1752[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1753; _temp1753.tag=
! Cyc_TypeSpecifier_tok; _temp1753.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1754=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1754[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1755; _temp1755.tag= Cyc_Parse_Decl_spec;
! _temp1755.f1= d; _temp1755;}); _temp1754;})); _temp1753;}); _temp1752;}); break;}
! case 83: _LL1743: switch( Cyc_yyget_StructOrUnion_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])){ case Cyc_Parse_Struct_su:
! _LL1757: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1759=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1759[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1760; _temp1760.tag=
! Cyc_TypeSpecifier_tok; _temp1760.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_StructType_struct* _temp1761=( struct Cyc_Absyn_StructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct)); _temp1761[ 0]=({ struct
! Cyc_Absyn_StructType_struct _temp1762; _temp1762.tag= Cyc_Absyn_StructType;
! _temp1762.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1762.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1762.f3= 0;
! _temp1762;}); _temp1761;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1760;});
! _temp1759;}); break; case Cyc_Parse_Union_su: _LL1758: yyval=( void*)({ struct
! Cyc_TypeSpecifier_tok_struct* _temp1764=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1764[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1765; _temp1765.tag= Cyc_TypeSpecifier_tok;
! _temp1765.f1=( void*) Cyc_Parse_type_spec(( void*)({ struct Cyc_Absyn_UnionType_struct*
! _temp1766=( struct Cyc_Absyn_UnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct));
! _temp1766[ 0]=({ struct Cyc_Absyn_UnionType_struct _temp1767; _temp1767.tag= Cyc_Absyn_UnionType;
! _temp1767.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1767.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1767.f3= 0;
! _temp1767;}); _temp1766;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1765;});
! _temp1764;}); break;} break; case 84: _LL1756: switch( Cyc_yyget_StructOrUnion_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])){ case Cyc_Parse_Struct_su:
! _LL1769: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1771=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1771[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1772; _temp1772.tag=
! Cyc_TypeSpecifier_tok; _temp1772.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_StructType_struct* _temp1773=( struct Cyc_Absyn_StructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct)); _temp1773[ 0]=({ struct
! Cyc_Absyn_StructType_struct _temp1774; _temp1774.tag= Cyc_Absyn_StructType;
! _temp1774.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1774.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1774.f3= 0;
! _temp1774;}); _temp1773;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1772;});
! _temp1771;}); break; case Cyc_Parse_Union_su: _LL1770: yyval=( void*)({ struct
! Cyc_TypeSpecifier_tok_struct* _temp1776=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1776[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1777; _temp1777.tag= Cyc_TypeSpecifier_tok;
! _temp1777.f1=( void*) Cyc_Parse_type_spec(( void*)({ struct Cyc_Absyn_UnionType_struct*
! _temp1778=( struct Cyc_Absyn_UnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct));
! _temp1778[ 0]=({ struct Cyc_Absyn_UnionType_struct _temp1779; _temp1779.tag= Cyc_Absyn_UnionType;
! _temp1779.f1=( struct _tuple1*) Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1779.f2= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1779.f3= 0;
! _temp1779;}); _temp1778;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp1777;});
! _temp1776;}); break;} break; case 85: _LL1768: yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp1781=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp1781[ 0]=({ struct Cyc_TypeList_tok_struct _temp1782; _temp1782.tag= Cyc_TypeList_tok;
! _temp1782.f1= 0; _temp1782;}); _temp1781;}); break; case 86: _LL1780: yyval=(
! void*)({ struct Cyc_TypeList_tok_struct* _temp1784=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp1784[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp1785; _temp1785.tag= Cyc_TypeList_tok; _temp1785.f1= Cyc_List_imp_rev( Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp1785;});
! _temp1784;}); break; case 87: _LL1783:(( struct Cyc_Lexing_lexbuf*)(( struct Cyc_Core_Opt*)
  _check_null( Cyc_Parse_lbuf))->v)->lex_curr_pos -= 1; yyval=( void*)({ struct
! Cyc_TypeList_tok_struct* _temp1787=( struct Cyc_TypeList_tok_struct*) _cycalloc(
! sizeof( struct Cyc_TypeList_tok_struct)); _temp1787[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp1788; _temp1788.tag= Cyc_TypeList_tok; _temp1788.f1= Cyc_List_imp_rev( Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp1788;});
! _temp1787;}); break; case 88: _LL1786: yyval=( void*)({ struct Cyc_StructOrUnion_tok_struct*
! _temp1790=( struct Cyc_StructOrUnion_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StructOrUnion_tok_struct)); _temp1790[ 0]=({ struct Cyc_StructOrUnion_tok_struct
! _temp1791; _temp1791.tag= Cyc_StructOrUnion_tok; _temp1791.f1= Cyc_Parse_Struct_su;
! _temp1791;}); _temp1790;}); break; case 89: _LL1789: yyval=( void*)({ struct Cyc_StructOrUnion_tok_struct*
! _temp1793=( struct Cyc_StructOrUnion_tok_struct*) _cycalloc_atomic( sizeof(
! struct Cyc_StructOrUnion_tok_struct)); _temp1793[ 0]=({ struct Cyc_StructOrUnion_tok_struct
! _temp1794; _temp1794.tag= Cyc_StructOrUnion_tok; _temp1794.f1= Cyc_Parse_Union_su;
! _temp1794;}); _temp1793;}); break; case 90: _LL1792: yyval=( void*)({ struct Cyc_StructFieldDeclList_tok_struct*
! _temp1796=( struct Cyc_StructFieldDeclList_tok_struct*) _cycalloc( sizeof(
! struct Cyc_StructFieldDeclList_tok_struct)); _temp1796[ 0]=({ struct Cyc_StructFieldDeclList_tok_struct
! _temp1797; _temp1797.tag= Cyc_StructFieldDeclList_tok; _temp1797.f1=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_flatten)((( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_StructFieldDeclListList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))); _temp1797;});
! _temp1796;}); break; case 91: _LL1795: yyval=( void*)({ struct Cyc_StructFieldDeclListList_tok_struct*
! _temp1799=( struct Cyc_StructFieldDeclListList_tok_struct*) _cycalloc( sizeof(
! struct Cyc_StructFieldDeclListList_tok_struct)); _temp1799[ 0]=({ struct Cyc_StructFieldDeclListList_tok_struct
! _temp1800; _temp1800.tag= Cyc_StructFieldDeclListList_tok; _temp1800.f1=({
! struct Cyc_List_List* _temp1801=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1801->hd=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1801->tl= 0;
! _temp1801;}); _temp1800;}); _temp1799;}); break; case 92: _LL1798: yyval=( void*)({
! struct Cyc_StructFieldDeclListList_tok_struct* _temp1803=( struct Cyc_StructFieldDeclListList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_StructFieldDeclListList_tok_struct)); _temp1803[ 0]=({
! struct Cyc_StructFieldDeclListList_tok_struct _temp1804; _temp1804.tag= Cyc_StructFieldDeclListList_tok;
! _temp1804.f1=({ struct Cyc_List_List* _temp1805=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1805->hd=( void*) Cyc_yyget_StructFieldDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1805->tl=
  Cyc_yyget_StructFieldDeclListList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp1805;}); _temp1804;}); _temp1803;}); break;
! case 93: _LL1802: yyval=( void*)({ struct Cyc_InitDeclList_tok_struct* _temp1807=(
  struct Cyc_InitDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct));
! _temp1807[ 0]=({ struct Cyc_InitDeclList_tok_struct _temp1808; _temp1808.tag=
! Cyc_InitDeclList_tok; _temp1808.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_InitDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp1808;});
! _temp1807;}); break; case 94: _LL1806: yyval=( void*)({ struct Cyc_InitDeclList_tok_struct*
! _temp1810=( struct Cyc_InitDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct));
! _temp1810[ 0]=({ struct Cyc_InitDeclList_tok_struct _temp1811; _temp1811.tag=
! Cyc_InitDeclList_tok; _temp1811.f1=({ struct Cyc_List_List* _temp1812=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1812->hd=( void*)
  Cyc_yyget_InitDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1812->tl= 0; _temp1812;}); _temp1811;}); _temp1810;});
! break; case 95: _LL1809: yyval=( void*)({ struct Cyc_InitDeclList_tok_struct*
! _temp1814=( struct Cyc_InitDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct));
! _temp1814[ 0]=({ struct Cyc_InitDeclList_tok_struct _temp1815; _temp1815.tag=
! Cyc_InitDeclList_tok; _temp1815.f1=({ struct Cyc_List_List* _temp1816=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1816->hd=( void*)
  Cyc_yyget_InitDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1816->tl= Cyc_yyget_InitDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1816;});
! _temp1815;}); _temp1814;}); break; case 96: _LL1813: yyval=( void*)({ struct Cyc_InitDecl_tok_struct*
! _temp1818=( struct Cyc_InitDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct));
! _temp1818[ 0]=({ struct Cyc_InitDecl_tok_struct _temp1819; _temp1819.tag= Cyc_InitDecl_tok;
! _temp1819.f1=({ struct _tuple14* _temp1820=( struct _tuple14*) _cycalloc(
! sizeof( struct _tuple14)); _temp1820->f1= Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1820->f2= 0;
! _temp1820;}); _temp1819;}); _temp1818;}); break; case 97: _LL1817: yyval=( void*)({
! struct Cyc_InitDecl_tok_struct* _temp1822=( struct Cyc_InitDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct)); _temp1822[ 0]=({ struct Cyc_InitDecl_tok_struct
! _temp1823; _temp1823.tag= Cyc_InitDecl_tok; _temp1823.f1=({ struct _tuple14*
! _temp1824=( struct _tuple14*) _cycalloc( sizeof( struct _tuple14)); _temp1824->f1=
  Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1824->f2=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1824;});
! _temp1823;}); _temp1822;}); break; case 98: _LL1821: { struct _tuple17 _temp1828;
! struct Cyc_List_List* _temp1829; struct Cyc_List_List* _temp1831; struct Cyc_Absyn_Tqual
! _temp1833; struct _tuple17* _temp1826= Cyc_yyget_QualSpecList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1828=*
! _temp1826; _LL1834: _temp1833= _temp1828.f1; goto _LL1832; _LL1832: _temp1831=
! _temp1828.f2; goto _LL1830; _LL1830: _temp1829= _temp1828.f3; goto _LL1827;
! _LL1827: { struct Cyc_List_List* _temp1837; struct Cyc_List_List* _temp1839;
! struct _tuple0 _temp1835=(( struct _tuple0(*)( struct Cyc_List_List* x)) Cyc_List_split)(
  Cyc_yyget_InitDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)])); _LL1840: _temp1839= _temp1835.f1; goto _LL1838; _LL1838:
! _temp1837= _temp1835.f2; goto _LL1836; _LL1836: { void* _temp1841= Cyc_Parse_speclist2typ(
! _temp1831, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset -  2)]).last_line)); struct Cyc_List_List* _temp1842=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)(
! Cyc_Parse_apply_tmss( _temp1833, _temp1841, _temp1839, _temp1829), _temp1837);
! yyval=( void*)({ struct Cyc_StructFieldDeclList_tok_struct* _temp1843=( struct
  Cyc_StructFieldDeclList_tok_struct*) _cycalloc( sizeof( struct Cyc_StructFieldDeclList_tok_struct));
! _temp1843[ 0]=({ struct Cyc_StructFieldDeclList_tok_struct _temp1844; _temp1844.tag=
! Cyc_StructFieldDeclList_tok; _temp1844.f1=(( struct Cyc_List_List*(*)( struct
  Cyc_Absyn_Structfield*(* f)( struct Cyc_Position_Segment*, struct _tuple9*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_make_struct_field,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line), _temp1842); _temp1844;}); _temp1843;}); break;}}}
! case 99: _LL1825: yyval=( void*)({ struct Cyc_QualSpecList_tok_struct* _temp1846=(
  struct Cyc_QualSpecList_tok_struct*) _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct));
! _temp1846[ 0]=({ struct Cyc_QualSpecList_tok_struct _temp1847; _temp1847.tag=
! Cyc_QualSpecList_tok; _temp1847.f1=({ struct _tuple17* _temp1848=( struct
! _tuple17*) _cycalloc( sizeof( struct _tuple17)); _temp1848->f1= Cyc_Absyn_empty_tqual();
! _temp1848->f2=({ struct Cyc_List_List* _temp1849=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1849->hd=( void*) Cyc_yyget_TypeSpecifier_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1849->tl=
! 0; _temp1849;}); _temp1848->f3= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1848;}); _temp1847;});
! _temp1846;}); break; case 100: _LL1845: yyval=( void*)({ struct Cyc_QualSpecList_tok_struct*
! _temp1851=( struct Cyc_QualSpecList_tok_struct*) _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct));
! _temp1851[ 0]=({ struct Cyc_QualSpecList_tok_struct _temp1852; _temp1852.tag=
! Cyc_QualSpecList_tok; _temp1852.f1=({ struct _tuple17* _temp1853=( struct
! _tuple17*) _cycalloc( sizeof( struct _tuple17)); _temp1853->f1=(* Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1; _temp1853->f2=({
! struct Cyc_List_List* _temp1854=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1854->hd=( void*) Cyc_yyget_TypeSpecifier_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1854->tl=(*
  Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])).f2; _temp1854;}); _temp1853->f3= Cyc_List_append( Cyc_yyget_AttributeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),(* Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f3); _temp1853;});
! _temp1852;}); _temp1851;}); break; case 101: _LL1850: yyval=( void*)({ struct
! Cyc_QualSpecList_tok_struct* _temp1856=( struct Cyc_QualSpecList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct)); _temp1856[ 0]=({ struct
! Cyc_QualSpecList_tok_struct _temp1857; _temp1857.tag= Cyc_QualSpecList_tok;
! _temp1857.f1=({ struct _tuple17* _temp1858=( struct _tuple17*) _cycalloc(
! sizeof( struct _tuple17)); _temp1858->f1= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1858->f2= 0;
! _temp1858->f3= Cyc_yyget_AttributeList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1858;}); _temp1857;}); _temp1856;}); break; case
! 102: _LL1855: yyval=( void*)({ struct Cyc_QualSpecList_tok_struct* _temp1860=(
  struct Cyc_QualSpecList_tok_struct*) _cycalloc( sizeof( struct Cyc_QualSpecList_tok_struct));
! _temp1860[ 0]=({ struct Cyc_QualSpecList_tok_struct _temp1861; _temp1861.tag=
! Cyc_QualSpecList_tok; _temp1861.f1=({ struct _tuple17* _temp1862=( struct
! _tuple17*) _cycalloc( sizeof( struct _tuple17)); _temp1862->f1= Cyc_Absyn_combine_tqual(
  Cyc_yyget_TypeQual_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]),(* Cyc_yyget_QualSpecList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1); _temp1862->f2=(*
  Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])).f2; _temp1862->f3= Cyc_List_append( Cyc_yyget_AttributeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),(* Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f3); _temp1862;});
! _temp1861;}); _temp1860;}); break; case 103: _LL1859: yyval=( void*)({ struct
! Cyc_InitDeclList_tok_struct* _temp1864=( struct Cyc_InitDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct)); _temp1864[ 0]=({ struct
! Cyc_InitDeclList_tok_struct _temp1865; _temp1865.tag= Cyc_InitDeclList_tok;
! _temp1865.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  Cyc_yyget_InitDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])); _temp1865;}); _temp1864;}); break; case 104: _LL1863: yyval=(
! void*)({ struct Cyc_InitDeclList_tok_struct* _temp1867=( struct Cyc_InitDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct)); _temp1867[ 0]=({ struct
! Cyc_InitDeclList_tok_struct _temp1868; _temp1868.tag= Cyc_InitDeclList_tok;
! _temp1868.f1=({ struct Cyc_List_List* _temp1869=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1869->hd=( void*) Cyc_yyget_InitDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1869->tl= 0;
! _temp1869;}); _temp1868;}); _temp1867;}); break; case 105: _LL1866: yyval=( void*)({
! struct Cyc_InitDeclList_tok_struct* _temp1871=( struct Cyc_InitDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDeclList_tok_struct)); _temp1871[ 0]=({ struct
! Cyc_InitDeclList_tok_struct _temp1872; _temp1872.tag= Cyc_InitDeclList_tok;
! _temp1872.f1=({ struct Cyc_List_List* _temp1873=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1873->hd=( void*) Cyc_yyget_InitDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1873->tl=
  Cyc_yyget_InitDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1873;}); _temp1872;}); _temp1871;}); break; case 106:
! _LL1870: yyval=( void*)({ struct Cyc_InitDecl_tok_struct* _temp1875=( struct Cyc_InitDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct)); _temp1875[ 0]=({ struct Cyc_InitDecl_tok_struct
! _temp1876; _temp1876.tag= Cyc_InitDecl_tok; _temp1876.f1=({ struct _tuple14*
! _temp1877=( struct _tuple14*) _cycalloc( sizeof( struct _tuple14)); _temp1877->f1=
  Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1877->f2= 0; _temp1877;}); _temp1876;}); _temp1875;});
! break; case 107: _LL1874: yyval=( void*)({ struct Cyc_InitDecl_tok_struct*
! _temp1879=( struct Cyc_InitDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct));
! _temp1879[ 0]=({ struct Cyc_InitDecl_tok_struct _temp1880; _temp1880.tag= Cyc_InitDecl_tok;
! _temp1880.f1=({ struct _tuple14* _temp1881=( struct _tuple14*) _cycalloc(
! sizeof( struct _tuple14)); _temp1881->f1=({ struct Cyc_Parse_Declarator*
! _temp1882=( struct Cyc_Parse_Declarator*) _cycalloc( sizeof( struct Cyc_Parse_Declarator));
! _temp1882->id=({ struct _tuple1* _temp1883=( struct _tuple1*) _cycalloc( sizeof(
! struct _tuple1)); _temp1883->f1= Cyc_Absyn_rel_ns_null; _temp1883->f2=
  _init_tag_arr(( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)),"",
! sizeof( unsigned char), 1u); _temp1883;}); _temp1882->tms= 0; _temp1882;});
! _temp1881->f2=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1881;}); _temp1880;});
! _temp1879;}); break; case 108: _LL1878: yyval=( void*)({ struct Cyc_InitDecl_tok_struct*
! _temp1885=( struct Cyc_InitDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_InitDecl_tok_struct));
! _temp1885[ 0]=({ struct Cyc_InitDecl_tok_struct _temp1886; _temp1886.tag= Cyc_InitDecl_tok;
! _temp1886.f1=({ struct _tuple14* _temp1887=( struct _tuple14*) _cycalloc(
! sizeof( struct _tuple14)); _temp1887->f1= Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1887->f2=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp1887;}); _temp1886;}); _temp1885;}); break; case
! 109: _LL1884: { struct Cyc_List_List* _temp1889=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line),
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)])); yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct*
! _temp1890=( struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1890[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1891; _temp1891.tag=
! Cyc_TypeSpecifier_tok; _temp1891.f1=( void*)(( void*)({ struct Cyc_Parse_Decl_spec_struct*
! _temp1892=( struct Cyc_Parse_Decl_spec_struct*) _cycalloc( sizeof( struct Cyc_Parse_Decl_spec_struct));
! _temp1892[ 0]=({ struct Cyc_Parse_Decl_spec_struct _temp1893; _temp1893.tag= Cyc_Parse_Decl_spec;
! _temp1893.f1= Cyc_Absyn_tunion_decl(( void*) Cyc_Absyn_Public, Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), _temp1889,({
! struct Cyc_Core_Opt* _temp1894=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1894->v=( void*) Cyc_yyget_TunionFieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1894;}), Cyc_yyget_Bool_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1893;}); _temp1892;})); _temp1891;}); _temp1890;}); break;} case 110:
! _LL1888: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1896=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1896[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1897; _temp1897.tag=
! Cyc_TypeSpecifier_tok; _temp1897.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TunionType_struct* _temp1898=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp1898[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp1899; _temp1899.tag= Cyc_Absyn_TunionType;
! _temp1899.f1=({ struct Cyc_Absyn_TunionInfo _temp1900; _temp1900.tunion_info=(
! void*)(( void*)({ struct Cyc_Absyn_UnknownTunion_struct* _temp1901=( struct Cyc_Absyn_UnknownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownTunion_struct)); _temp1901[ 0]=({
! struct Cyc_Absyn_UnknownTunion_struct _temp1902; _temp1902.tag= Cyc_Absyn_UnknownTunion;
! _temp1902.f1=({ struct Cyc_Absyn_UnknownTunionInfo _temp1903; _temp1903.name=
  Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
! -  1)]); _temp1903.is_xtunion= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp1903;});
! _temp1902;}); _temp1901;})); _temp1900.targs= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1900.rgn=( void*)
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
! 2)]); _temp1900;}); _temp1899;}); _temp1898;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp1897;}); _temp1896;}); break; case 111: _LL1895: yyval=( void*)({ struct
! Cyc_TypeSpecifier_tok_struct* _temp1905=( struct Cyc_TypeSpecifier_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct)); _temp1905[ 0]=({
! struct Cyc_TypeSpecifier_tok_struct _temp1906; _temp1906.tag= Cyc_TypeSpecifier_tok;
! _temp1906.f1=( void*) Cyc_Parse_type_spec(( void*)({ struct Cyc_Absyn_TunionType_struct*
! _temp1907=( struct Cyc_Absyn_TunionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct));
! _temp1907[ 0]=({ struct Cyc_Absyn_TunionType_struct _temp1908; _temp1908.tag=
! Cyc_Absyn_TunionType; _temp1908.f1=({ struct Cyc_Absyn_TunionInfo _temp1909;
! _temp1909.tunion_info=( void*)(( void*)({ struct Cyc_Absyn_UnknownTunion_struct*
! _temp1910=( struct Cyc_Absyn_UnknownTunion_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownTunion_struct)); _temp1910[ 0]=({ struct Cyc_Absyn_UnknownTunion_struct
! _temp1911; _temp1911.tag= Cyc_Absyn_UnknownTunion; _temp1911.f1=({ struct Cyc_Absyn_UnknownTunionInfo
! _temp1912; _temp1912.name= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1912.is_xtunion=
  Cyc_yyget_Bool_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
! 2)]); _temp1912;}); _temp1911;}); _temp1910;})); _temp1909.targs= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1909.rgn=(
! void*)(( void*) Cyc_Absyn_HeapRgn); _temp1909;}); _temp1908;}); _temp1907;}),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp1906;}); _temp1905;}); break; case 112:
! _LL1904: yyval=( void*)({ struct Cyc_TypeSpecifier_tok_struct* _temp1914=(
  struct Cyc_TypeSpecifier_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeSpecifier_tok_struct));
! _temp1914[ 0]=({ struct Cyc_TypeSpecifier_tok_struct _temp1915; _temp1915.tag=
! Cyc_TypeSpecifier_tok; _temp1915.f1=( void*) Cyc_Parse_type_spec(( void*)({
! struct Cyc_Absyn_TunionFieldType_struct* _temp1916=( struct Cyc_Absyn_TunionFieldType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionFieldType_struct)); _temp1916[ 0]=({
! struct Cyc_Absyn_TunionFieldType_struct _temp1917; _temp1917.tag= Cyc_Absyn_TunionFieldType;
! _temp1917.f1=({ struct Cyc_Absyn_TunionFieldInfo _temp1918; _temp1918.field_info=(
! void*)(( void*)({ struct Cyc_Absyn_UnknownTunionfield_struct* _temp1919=( struct
  Cyc_Absyn_UnknownTunionfield_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownTunionfield_struct));
! _temp1919[ 0]=({ struct Cyc_Absyn_UnknownTunionfield_struct _temp1920; _temp1920.tag=
! Cyc_Absyn_UnknownTunionfield; _temp1920.f1=({ struct Cyc_Absyn_UnknownTunionFieldInfo
! _temp1921; _temp1921.tunion_name= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp1921.field_name=
  Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
! -  1)]); _temp1921.is_xtunion= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1921;});
! _temp1920;}); _temp1919;})); _temp1918.targs= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1918;}); _temp1917;});
! _temp1916;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp1915;}); _temp1914;}); break; case 113:
! _LL1913: yyval=( void*)({ struct Cyc_Bool_tok_struct* _temp1923=( struct Cyc_Bool_tok_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_Bool_tok_struct)); _temp1923[ 0]=({ struct
! Cyc_Bool_tok_struct _temp1924; _temp1924.tag= Cyc_Bool_tok; _temp1924.f1= 0;
! _temp1924;}); _temp1923;}); break; case 114: _LL1922: yyval=( void*)({ struct
! Cyc_Bool_tok_struct* _temp1926=( struct Cyc_Bool_tok_struct*) _cycalloc_atomic(
! sizeof( struct Cyc_Bool_tok_struct)); _temp1926[ 0]=({ struct Cyc_Bool_tok_struct
! _temp1927; _temp1927.tag= Cyc_Bool_tok; _temp1927.f1= 1; _temp1927;}); _temp1926;});
! break; case 115: _LL1925: yyval=( void*)({ struct Cyc_TunionFieldList_tok_struct*
! _temp1929=( struct Cyc_TunionFieldList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_TunionFieldList_tok_struct)); _temp1929[ 0]=({ struct Cyc_TunionFieldList_tok_struct
! _temp1930; _temp1930.tag= Cyc_TunionFieldList_tok; _temp1930.f1=({ struct Cyc_List_List*
! _temp1931=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1931->hd=( void*) Cyc_yyget_TunionField_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1931->tl= 0;
! _temp1931;}); _temp1930;}); _temp1929;}); break; case 116: _LL1928: yyval=( void*)({
! struct Cyc_TunionFieldList_tok_struct* _temp1933=( struct Cyc_TunionFieldList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TunionFieldList_tok_struct)); _temp1933[ 0]=({
! struct Cyc_TunionFieldList_tok_struct _temp1934; _temp1934.tag= Cyc_TunionFieldList_tok;
! _temp1934.f1=({ struct Cyc_List_List* _temp1935=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1935->hd=( void*) Cyc_yyget_TunionField_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1935->tl=
! 0; _temp1935;}); _temp1934;}); _temp1933;}); break; case 117: _LL1932: yyval=(
! void*)({ struct Cyc_TunionFieldList_tok_struct* _temp1937=( struct Cyc_TunionFieldList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TunionFieldList_tok_struct)); _temp1937[ 0]=({
! struct Cyc_TunionFieldList_tok_struct _temp1938; _temp1938.tag= Cyc_TunionFieldList_tok;
! _temp1938.f1=({ struct Cyc_List_List* _temp1939=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1939->hd=( void*) Cyc_yyget_TunionField_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp1939->tl=
  Cyc_yyget_TunionFieldList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp1939;}); _temp1938;}); _temp1937;}); break; case 118:
! _LL1936: yyval=( void*)({ struct Cyc_TunionFieldList_tok_struct* _temp1941=(
  struct Cyc_TunionFieldList_tok_struct*) _cycalloc( sizeof( struct Cyc_TunionFieldList_tok_struct));
! _temp1941[ 0]=({ struct Cyc_TunionFieldList_tok_struct _temp1942; _temp1942.tag=
! Cyc_TunionFieldList_tok; _temp1942.f1=({ struct Cyc_List_List* _temp1943=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1943->hd=(
  void*) Cyc_yyget_TunionField_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp1943->tl= Cyc_yyget_TunionFieldList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1943;}); _temp1942;});
! _temp1941;}); break; case 119: _LL1940: yyval=( void*)({ struct Cyc_Scope_tok_struct*
! _temp1945=( struct Cyc_Scope_tok_struct*) _cycalloc( sizeof( struct Cyc_Scope_tok_struct));
! _temp1945[ 0]=({ struct Cyc_Scope_tok_struct _temp1946; _temp1946.tag= Cyc_Scope_tok;
! _temp1946.f1=( void*)(( void*) Cyc_Absyn_Public); _temp1946;}); _temp1945;});
! break; case 120: _LL1944: yyval=( void*)({ struct Cyc_Scope_tok_struct*
! _temp1948=( struct Cyc_Scope_tok_struct*) _cycalloc( sizeof( struct Cyc_Scope_tok_struct));
! _temp1948[ 0]=({ struct Cyc_Scope_tok_struct _temp1949; _temp1949.tag= Cyc_Scope_tok;
! _temp1949.f1=( void*)(( void*) Cyc_Absyn_Extern); _temp1949;}); _temp1948;});
! break; case 121: _LL1947: yyval=( void*)({ struct Cyc_Scope_tok_struct*
! _temp1951=( struct Cyc_Scope_tok_struct*) _cycalloc( sizeof( struct Cyc_Scope_tok_struct));
! _temp1951[ 0]=({ struct Cyc_Scope_tok_struct _temp1952; _temp1952.tag= Cyc_Scope_tok;
! _temp1952.f1=( void*)(( void*) Cyc_Absyn_Static); _temp1952;}); _temp1951;});
! break; case 122: _LL1950: yyval=( void*)({ struct Cyc_TunionField_tok_struct*
! _temp1954=( struct Cyc_TunionField_tok_struct*) _cycalloc( sizeof( struct Cyc_TunionField_tok_struct));
! _temp1954[ 0]=({ struct Cyc_TunionField_tok_struct _temp1955; _temp1955.tag= Cyc_TunionField_tok;
! _temp1955.f1=({ struct Cyc_Absyn_Tunionfield* _temp1956=( struct Cyc_Absyn_Tunionfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield)); _temp1956->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1956->tvs= 0;
! _temp1956->typs= 0; _temp1956->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp1956->sc=(
  void*) Cyc_yyget_Scope_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp1956;}); _temp1955;}); _temp1954;}); break; case 123:
! _LL1953: { struct Cyc_List_List* _temp1958=(( struct Cyc_List_List*(*)( struct
  _tuple11*(* f)( struct Cyc_Position_Segment*, struct _tuple2*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_get_tqual_typ, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line),((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))); struct Cyc_List_List*
! _temp1959=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
  Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line), Cyc_yyget_TypeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)])); yyval=(
! void*)({ struct Cyc_TunionField_tok_struct* _temp1960=( struct Cyc_TunionField_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TunionField_tok_struct)); _temp1960[ 0]=({ struct
! Cyc_TunionField_tok_struct _temp1961; _temp1961.tag= Cyc_TunionField_tok;
! _temp1961.f1=({ struct Cyc_Absyn_Tunionfield* _temp1962=( struct Cyc_Absyn_Tunionfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield)); _temp1962->name= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp1962->tvs=
! _temp1959; _temp1962->typs= _temp1958; _temp1962->loc= Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line);
! _temp1962->sc=( void*) Cyc_yyget_Scope_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  5)]); _temp1962;}); _temp1961;}); _temp1960;}); break;}
! case 124: _LL1957: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 125: _LL1963: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp1965=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp1965[ 0]=({ struct Cyc_Declarator_tok_struct _temp1966; _temp1966.tag= Cyc_Declarator_tok;
! _temp1966.f1=({ struct Cyc_Parse_Declarator* _temp1967=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1967->id=( Cyc_yyget_Declarator_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->id; _temp1967->tms=
  Cyc_List_imp_append( Cyc_yyget_TypeModifierList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_Declarator_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms); _temp1967;});
! _temp1966;}); _temp1965;}); break; case 126: _LL1964: yyval=( void*)({ struct
! Cyc_Declarator_tok_struct* _temp1969=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp1969[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp1970; _temp1970.tag= Cyc_Declarator_tok;
! _temp1970.f1=({ struct Cyc_Parse_Declarator* _temp1971=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1971->id= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp1971->tms= 0;
! _temp1971;}); _temp1970;}); _temp1969;}); break; case 127: _LL1968: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 128:
! _LL1972: yyval=( void*)({ struct Cyc_Declarator_tok_struct* _temp1974=( struct
  Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp1974[ 0]=({ struct Cyc_Declarator_tok_struct _temp1975; _temp1975.tag= Cyc_Declarator_tok;
! _temp1975.f1=({ struct Cyc_Parse_Declarator* _temp1976=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1976->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]))->id;
! _temp1976->tms=({ struct Cyc_List_List* _temp1977=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1977->hd=( void*)(( void*) Cyc_Absyn_Carray_mod);
! _temp1977->tl=( Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]))->tms; _temp1977;}); _temp1976;}); _temp1975;});
! _temp1974;}); break; case 129: _LL1973: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp1979=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp1979[ 0]=({ struct Cyc_Declarator_tok_struct _temp1980; _temp1980.tag= Cyc_Declarator_tok;
! _temp1980.f1=({ struct Cyc_Parse_Declarator* _temp1981=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp1981->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp1981->tms=({ struct Cyc_List_List* _temp1982=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1982->hd=( void*)(( void*)({
! struct Cyc_Absyn_ConstArray_mod_struct* _temp1983=( struct Cyc_Absyn_ConstArray_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ConstArray_mod_struct)); _temp1983[ 0]=({
! struct Cyc_Absyn_ConstArray_mod_struct _temp1984; _temp1984.tag= Cyc_Absyn_ConstArray_mod;
! _temp1984.f1= Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp1984;}); _temp1983;})); _temp1982->tl=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp1982;}); _temp1981;}); _temp1980;}); _temp1979;}); break; case 130: _LL1978: {
! struct _tuple16 _temp1988; struct Cyc_List_List* _temp1989; struct Cyc_Core_Opt*
! _temp1991; struct Cyc_Absyn_VarargInfo* _temp1993; int _temp1995; struct Cyc_List_List*
! _temp1997; struct _tuple16* _temp1986= Cyc_yyget_YY1( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp1988=*
! _temp1986; _LL1998: _temp1997= _temp1988.f1; goto _LL1996; _LL1996: _temp1995=
! _temp1988.f2; goto _LL1994; _LL1994: _temp1993= _temp1988.f3; goto _LL1992;
! _LL1992: _temp1991= _temp1988.f4; goto _LL1990; _LL1990: _temp1989= _temp1988.f5;
! goto _LL1987; _LL1987: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp1999=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp1999[ 0]=({ struct Cyc_Declarator_tok_struct _temp2000; _temp2000.tag= Cyc_Declarator_tok;
! _temp2000.f1=({ struct Cyc_Parse_Declarator* _temp2001=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2001->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2001->tms=({ struct Cyc_List_List* _temp2002=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2002->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2003=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2003[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2004; _temp2004.tag= Cyc_Absyn_Function_mod;
! _temp2004.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2005=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2005[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2006; _temp2006.tag= Cyc_Absyn_WithTypes;
! _temp2006.f1= _temp1997; _temp2006.f2= _temp1995; _temp2006.f3= _temp1993;
! _temp2006.f4= _temp1991; _temp2006.f5= _temp1989; _temp2006;}); _temp2005;}));
! _temp2004;}); _temp2003;})); _temp2002->tl=( Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms; _temp2002;});
! _temp2001;}); _temp2000;}); _temp1999;}); break;} case 131: _LL1985: yyval=(
! void*)({ struct Cyc_Declarator_tok_struct* _temp2008=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2008[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2009; _temp2009.tag= Cyc_Declarator_tok;
! _temp2009.f1=({ struct Cyc_Parse_Declarator* _temp2010=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2010->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]))->id;
! _temp2010->tms=({ struct Cyc_List_List* _temp2011=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2011->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2012=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2012[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2013; _temp2013.tag= Cyc_Absyn_Function_mod;
! _temp2013.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2014=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2014[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2015; _temp2015.tag= Cyc_Absyn_WithTypes;
! _temp2015.f1= 0; _temp2015.f2= 0; _temp2015.f3= 0; _temp2015.f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2015.f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2015;}); _temp2014;})); _temp2013;}); _temp2012;}));
! _temp2011->tl=( Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]))->tms; _temp2011;}); _temp2010;}); _temp2009;});
! _temp2008;}); break; case 132: _LL2007: yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp2017=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp2017[ 0]=({ struct Cyc_Declarator_tok_struct _temp2018; _temp2018.tag= Cyc_Declarator_tok;
! _temp2018.f1=({ struct Cyc_Parse_Declarator* _temp2019=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2019->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2019->tms=({ struct Cyc_List_List* _temp2020=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2020->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2021=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2021[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2022; _temp2022.tag= Cyc_Absyn_Function_mod;
! _temp2022.f1=( void*)(( void*)({ struct Cyc_Absyn_NoTypes_struct* _temp2023=(
  struct Cyc_Absyn_NoTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_NoTypes_struct));
! _temp2023[ 0]=({ struct Cyc_Absyn_NoTypes_struct _temp2024; _temp2024.tag= Cyc_Absyn_NoTypes;
! _temp2024.f1= Cyc_yyget_IdList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2024.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2024;});
! _temp2023;})); _temp2022;}); _temp2021;})); _temp2020->tl=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2020;}); _temp2019;}); _temp2018;}); _temp2017;}); break; case 133: _LL2016: {
! struct Cyc_List_List* _temp2026=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(*
  f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp2027=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp2027[ 0]=({ struct Cyc_Declarator_tok_struct _temp2028; _temp2028.tag= Cyc_Declarator_tok;
! _temp2028.f1=({ struct Cyc_Parse_Declarator* _temp2029=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2029->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2029->tms=({ struct Cyc_List_List* _temp2030=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2030->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2031=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2031[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2032; _temp2032.tag= Cyc_Absyn_TypeParams_mod;
! _temp2032.f1= _temp2026; _temp2032.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2032.f3=
! 0; _temp2032;}); _temp2031;})); _temp2030->tl=( Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms; _temp2030;});
! _temp2029;}); _temp2028;}); _temp2027;}); break;} case 134: _LL2025:(( struct
  Cyc_Lexing_lexbuf*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Parse_lbuf))->v)->lex_curr_pos
! -= 1;{ struct Cyc_List_List* _temp2034=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(*
  f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_Declarator_tok_struct*
! _temp2035=( struct Cyc_Declarator_tok_struct*) _cycalloc( sizeof( struct Cyc_Declarator_tok_struct));
! _temp2035[ 0]=({ struct Cyc_Declarator_tok_struct _temp2036; _temp2036.tag= Cyc_Declarator_tok;
! _temp2036.f1=({ struct Cyc_Parse_Declarator* _temp2037=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2037->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->id;
! _temp2037->tms=({ struct Cyc_List_List* _temp2038=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2038->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2039=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2039[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2040; _temp2040.tag= Cyc_Absyn_TypeParams_mod;
! _temp2040.f1= _temp2034; _temp2040.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2040.f3=
! 0; _temp2040;}); _temp2039;})); _temp2038->tl=( Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms; _temp2038;});
! _temp2037;}); _temp2036;}); _temp2035;}); break;} case 135: _LL2033: yyval=(
! void*)({ struct Cyc_Declarator_tok_struct* _temp2042=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2042[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2043; _temp2043.tag= Cyc_Declarator_tok;
! _temp2043.f1=({ struct Cyc_Parse_Declarator* _temp2044=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2044->id=( Cyc_yyget_Declarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))->id;
! _temp2044->tms=({ struct Cyc_List_List* _temp2045=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2045->hd=( void*)(( void*)({
! struct Cyc_Absyn_Attributes_mod_struct* _temp2046=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp2046[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp2047; _temp2047.tag= Cyc_Absyn_Attributes_mod;
! _temp2047.f1= Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp2047.f2= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2047;}); _temp2046;}));
! _temp2045->tl=( Cyc_yyget_Declarator_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]))->tms; _temp2045;}); _temp2044;}); _temp2043;});
! _temp2042;}); break; case 136: _LL2041: Cyc_Parse_err( _tag_arr("identifier has not been declared as a typedef",
  sizeof( unsigned char), 46u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line)); yyval=(
! void*)({ struct Cyc_Declarator_tok_struct* _temp2049=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2049[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2050; _temp2050.tag= Cyc_Declarator_tok;
! _temp2050.f1=({ struct Cyc_Parse_Declarator* _temp2051=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2051->id= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2051->tms= 0;
! _temp2051;}); _temp2050;}); _temp2049;}); break; case 137: _LL2048: yyval=( void*)({
! struct Cyc_Declarator_tok_struct* _temp2053=( struct Cyc_Declarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Declarator_tok_struct)); _temp2053[ 0]=({ struct
! Cyc_Declarator_tok_struct _temp2054; _temp2054.tag= Cyc_Declarator_tok;
! _temp2054.f1=({ struct Cyc_Parse_Declarator* _temp2055=( struct Cyc_Parse_Declarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Declarator)); _temp2055->id= Cyc_Absyn_exn_name;
! _temp2055->tms= 0; _temp2055;}); _temp2054;}); _temp2053;}); break; case 138:
! _LL2052: yyval=( void*)({ struct Cyc_TypeModifierList_tok_struct* _temp2057=(
  struct Cyc_TypeModifierList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct));
! _temp2057[ 0]=({ struct Cyc_TypeModifierList_tok_struct _temp2058; _temp2058.tag=
! Cyc_TypeModifierList_tok; _temp2058.f1=({ struct Cyc_List_List* _temp2059=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2059->hd=(
! void*)(( void*)({ struct Cyc_Absyn_Pointer_mod_struct* _temp2060=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2060[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2061; _temp2061.tag= Cyc_Absyn_Pointer_mod;
! _temp2061.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2061.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2061.f3= Cyc_Absyn_empty_tqual(); _temp2061;});
! _temp2060;})); _temp2059->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_yyget_AttributeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), 0); _temp2059;});
! _temp2058;}); _temp2057;}); break; case 139: _LL2056: yyval=( void*)({ struct
! Cyc_TypeModifierList_tok_struct* _temp2063=( struct Cyc_TypeModifierList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct)); _temp2063[ 0]=({
! struct Cyc_TypeModifierList_tok_struct _temp2064; _temp2064.tag= Cyc_TypeModifierList_tok;
! _temp2064.f1=({ struct Cyc_List_List* _temp2065=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2065->hd=( void*)(( void*)({
! struct Cyc_Absyn_Pointer_mod_struct* _temp2066=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2066[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2067; _temp2067.tag= Cyc_Absyn_Pointer_mod;
! _temp2067.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2067.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2067.f3= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2067;}); _temp2066;}));
! _temp2065->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line), Cyc_yyget_AttributeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), 0);
! _temp2065;}); _temp2064;}); _temp2063;}); break; case 140: _LL2062: yyval=( void*)({
! struct Cyc_TypeModifierList_tok_struct* _temp2069=( struct Cyc_TypeModifierList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct)); _temp2069[ 0]=({
! struct Cyc_TypeModifierList_tok_struct _temp2070; _temp2070.tag= Cyc_TypeModifierList_tok;
! _temp2070.f1=({ struct Cyc_List_List* _temp2071=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2071->hd=( void*)(( void*)({
! struct Cyc_Absyn_Pointer_mod_struct* _temp2072=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2072[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2073; _temp2073.tag= Cyc_Absyn_Pointer_mod;
! _temp2073.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2073.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2073.f3= Cyc_Absyn_empty_tqual(); _temp2073;});
! _temp2072;})); _temp2071->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line),
  Cyc_yyget_AttributeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), Cyc_yyget_TypeModifierList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2071;});
! _temp2070;}); _temp2069;}); break; case 141: _LL2068: yyval=( void*)({ struct
! Cyc_TypeModifierList_tok_struct* _temp2075=( struct Cyc_TypeModifierList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeModifierList_tok_struct)); _temp2075[ 0]=({
! struct Cyc_TypeModifierList_tok_struct _temp2076; _temp2076.tag= Cyc_TypeModifierList_tok;
! _temp2076.f1=({ struct Cyc_List_List* _temp2077=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2077->hd=( void*)(( void*)({
! struct Cyc_Absyn_Pointer_mod_struct* _temp2078=( struct Cyc_Absyn_Pointer_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Pointer_mod_struct)); _temp2078[ 0]=({
! struct Cyc_Absyn_Pointer_mod_struct _temp2079; _temp2079.tag= Cyc_Absyn_Pointer_mod;
! _temp2079.f1=( void*) Cyc_yyget_Pointer_Sort_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp2079.f2=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp2079.f3= Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2079;});
! _temp2078;})); _temp2077->tl= Cyc_Parse_attopt_to_tms( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line),
  Cyc_yyget_AttributeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_TypeModifierList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2077;});
! _temp2076;}); _temp2075;}); break; case 142: _LL2074: yyval=( void*)({ struct
! Cyc_Pointer_Sort_tok_struct* _temp2081=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2081[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2082; _temp2082.tag= Cyc_Pointer_Sort_tok;
! _temp2082.f1=( void*)(( void*)({ struct Cyc_Absyn_Nullable_ps_struct* _temp2083=(
  struct Cyc_Absyn_Nullable_ps_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Nullable_ps_struct));
! _temp2083[ 0]=({ struct Cyc_Absyn_Nullable_ps_struct _temp2084; _temp2084.tag=
! Cyc_Absyn_Nullable_ps; _temp2084.f1= Cyc_Absyn_exp_unsigned_one; _temp2084;});
! _temp2083;})); _temp2082;}); _temp2081;}); break; case 143: _LL2080: yyval=(
! void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2086=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2086[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2087; _temp2087.tag= Cyc_Pointer_Sort_tok;
! _temp2087.f1=( void*)(( void*)({ struct Cyc_Absyn_NonNullable_ps_struct*
! _temp2088=( struct Cyc_Absyn_NonNullable_ps_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_NonNullable_ps_struct)); _temp2088[ 0]=({ struct Cyc_Absyn_NonNullable_ps_struct
! _temp2089; _temp2089.tag= Cyc_Absyn_NonNullable_ps; _temp2089.f1= Cyc_Absyn_exp_unsigned_one;
! _temp2089;}); _temp2088;})); _temp2087;}); _temp2086;}); break; case 144:
! _LL2085: yyval=( void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2091=( struct
  Cyc_Pointer_Sort_tok_struct*) _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct));
! _temp2091[ 0]=({ struct Cyc_Pointer_Sort_tok_struct _temp2092; _temp2092.tag=
! Cyc_Pointer_Sort_tok; _temp2092.f1=( void*)(( void*)({ struct Cyc_Absyn_Nullable_ps_struct*
! _temp2093=( struct Cyc_Absyn_Nullable_ps_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Nullable_ps_struct));
! _temp2093[ 0]=({ struct Cyc_Absyn_Nullable_ps_struct _temp2094; _temp2094.tag=
! Cyc_Absyn_Nullable_ps; _temp2094.f1= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2094;});
! _temp2093;})); _temp2092;}); _temp2091;}); break; case 145: _LL2090: yyval=(
! void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2096=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2096[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2097; _temp2097.tag= Cyc_Pointer_Sort_tok;
! _temp2097.f1=( void*)(( void*)({ struct Cyc_Absyn_NonNullable_ps_struct*
! _temp2098=( struct Cyc_Absyn_NonNullable_ps_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_NonNullable_ps_struct)); _temp2098[ 0]=({ struct Cyc_Absyn_NonNullable_ps_struct
! _temp2099; _temp2099.tag= Cyc_Absyn_NonNullable_ps; _temp2099.f1= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2099;});
! _temp2098;})); _temp2097;}); _temp2096;}); break; case 146: _LL2095: yyval=(
! void*)({ struct Cyc_Pointer_Sort_tok_struct* _temp2101=( struct Cyc_Pointer_Sort_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pointer_Sort_tok_struct)); _temp2101[ 0]=({ struct
! Cyc_Pointer_Sort_tok_struct _temp2102; _temp2102.tag= Cyc_Pointer_Sort_tok;
! _temp2102.f1=( void*)(( void*) Cyc_Absyn_TaggedArray_ps); _temp2102;});
! _temp2101;}); break; case 147: _LL2100: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2104=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2104[ 0]=({ struct Cyc_Type_tok_struct _temp2105; _temp2105.tag= Cyc_Type_tok;
! _temp2105.f1=( void*) Cyc_Absyn_new_evar(({ struct Cyc_Core_Opt* _temp2106=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2106->v=(
! void*)(( void*) Cyc_Absyn_RgnKind); _temp2106;}), 0); _temp2105;}); _temp2104;});
! break; case 148: _LL2103: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 149: _LL2107: Cyc_Parse_set_vartyp_kind( Cyc_yyget_Type_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),( void*) Cyc_Absyn_RgnKind);
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 150: _LL2108: yyval=( void*)({ struct Cyc_Type_tok_struct* _temp2110=( struct
! Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct)); _temp2110[
! 0]=({ struct Cyc_Type_tok_struct _temp2111; _temp2111.tag= Cyc_Type_tok;
! _temp2111.f1=( void*) Cyc_Absyn_new_evar(({ struct Cyc_Core_Opt* _temp2112=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2112->v=(
! void*)(( void*) Cyc_Absyn_RgnKind); _temp2112;}), 0); _temp2111;}); _temp2110;});
! break; case 151: _LL2109: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 152: _LL2113: yyval=( void*)({ struct Cyc_TypeQual_tok_struct*
! _temp2115=( struct Cyc_TypeQual_tok_struct*) _cycalloc_atomic( sizeof( struct
! Cyc_TypeQual_tok_struct)); _temp2115[ 0]=({ struct Cyc_TypeQual_tok_struct
! _temp2116; _temp2116.tag= Cyc_TypeQual_tok; _temp2116.f1= Cyc_Absyn_combine_tqual(
  Cyc_yyget_TypeQual_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), Cyc_yyget_TypeQual_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2116;});
! _temp2115;}); break; case 153: _LL2114: yyval=( void*)({ struct Cyc_YY1_struct*
! _temp2118=( struct Cyc_YY1_struct*) _cycalloc( sizeof( struct Cyc_YY1_struct));
! _temp2118[ 0]=({ struct Cyc_YY1_struct _temp2119; _temp2119.tag= Cyc_YY1;
! _temp2119.f1=({ struct _tuple16* _temp2120=( struct _tuple16*) _cycalloc(
! sizeof( struct _tuple16)); _temp2120->f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); _temp2120->f2= 0;
! _temp2120->f3= 0; _temp2120->f4= Cyc_yyget_TypeOpt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2120->f5= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2120;});
! _temp2119;}); _temp2118;}); break; case 154: _LL2117: yyval=( void*)({ struct
! Cyc_YY1_struct* _temp2122=( struct Cyc_YY1_struct*) _cycalloc( sizeof( struct
! Cyc_YY1_struct)); _temp2122[ 0]=({ struct Cyc_YY1_struct _temp2123; _temp2123.tag=
! Cyc_YY1; _temp2123.f1=({ struct _tuple16* _temp2124=( struct _tuple16*)
! _cycalloc( sizeof( struct _tuple16)); _temp2124->f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)])); _temp2124->f2= 1;
! _temp2124->f3= 0; _temp2124->f4= Cyc_yyget_TypeOpt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2124->f5= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2124;});
! _temp2123;}); _temp2122;}); break; case 155: _LL2121: { struct _tuple2 _temp2128;
! void* _temp2129; struct Cyc_Absyn_Tqual _temp2131; struct Cyc_Core_Opt*
! _temp2133; struct _tuple2* _temp2126= Cyc_yyget_ParamDecl_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2128=*
! _temp2126; _LL2134: _temp2133= _temp2128.f1; goto _LL2132; _LL2132: _temp2131=
! _temp2128.f2; goto _LL2130; _LL2130: _temp2129= _temp2128.f3; goto _LL2127;
! _LL2127: { struct Cyc_Absyn_VarargInfo* _temp2135=({ struct Cyc_Absyn_VarargInfo*
! _temp2139=( struct Cyc_Absyn_VarargInfo*) _cycalloc( sizeof( struct Cyc_Absyn_VarargInfo));
! _temp2139->name= _temp2133; _temp2139->tq= _temp2131; _temp2139->type=( void*)
! _temp2129; _temp2139->inject= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2139;});
! yyval=( void*)({ struct Cyc_YY1_struct* _temp2136=( struct Cyc_YY1_struct*)
! _cycalloc( sizeof( struct Cyc_YY1_struct)); _temp2136[ 0]=({ struct Cyc_YY1_struct
! _temp2137; _temp2137.tag= Cyc_YY1; _temp2137.f1=({ struct _tuple16* _temp2138=(
! struct _tuple16*) _cycalloc( sizeof( struct _tuple16)); _temp2138->f1= 0;
! _temp2138->f2= 0; _temp2138->f3= _temp2135; _temp2138->f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2138->f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2138;}); _temp2137;}); _temp2136;}); break;}} case 156:
! _LL2125: { struct _tuple2 _temp2143; void* _temp2144; struct Cyc_Absyn_Tqual
! _temp2146; struct Cyc_Core_Opt* _temp2148; struct _tuple2* _temp2141= Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2143=*
! _temp2141; _LL2149: _temp2148= _temp2143.f1; goto _LL2147; _LL2147: _temp2146=
! _temp2143.f2; goto _LL2145; _LL2145: _temp2144= _temp2143.f3; goto _LL2142;
! _LL2142: { struct Cyc_Absyn_VarargInfo* _temp2150=({ struct Cyc_Absyn_VarargInfo*
! _temp2154=( struct Cyc_Absyn_VarargInfo*) _cycalloc( sizeof( struct Cyc_Absyn_VarargInfo));
! _temp2154->name= _temp2148; _temp2154->tq= _temp2146; _temp2154->type=( void*)
! _temp2144; _temp2154->inject= Cyc_yyget_Bool_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2154;});
! yyval=( void*)({ struct Cyc_YY1_struct* _temp2151=( struct Cyc_YY1_struct*)
! _cycalloc( sizeof( struct Cyc_YY1_struct)); _temp2151[ 0]=({ struct Cyc_YY1_struct
! _temp2152; _temp2152.tag= Cyc_YY1; _temp2152.f1=({ struct _tuple16* _temp2153=(
! struct _tuple16*) _cycalloc( sizeof( struct _tuple16)); _temp2153->f1=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ParamDeclList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)])); _temp2153->f2=
! 0; _temp2153->f3= _temp2150; _temp2153->f4= Cyc_yyget_TypeOpt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2153->f5= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2153;});
! _temp2152;}); _temp2151;}); break;}} case 157: _LL2140: yyval=( void*)({ struct
! Cyc_Type_tok_struct* _temp2156=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Type_tok_struct)); _temp2156[ 0]=({ struct Cyc_Type_tok_struct
! _temp2157; _temp2157.tag= Cyc_Type_tok; _temp2157.f1=( void*) Cyc_Parse_id2type(
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),
! Cyc_Absyn_empty_conref()); _temp2157;}); _temp2156;}); break; case 158: _LL2155:
! yyval=( void*)({ struct Cyc_Type_tok_struct* _temp2159=( struct Cyc_Type_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Type_tok_struct)); _temp2159[ 0]=({ struct Cyc_Type_tok_struct
! _temp2160; _temp2160.tag= Cyc_Type_tok; _temp2160.f1=( void*) Cyc_Parse_id2type(
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
  -  2)]), Cyc_Absyn_new_conref( Cyc_yyget_Kind_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]))); _temp2160;});
! _temp2159;}); break; case 159: _LL2158: yyval=( void*)({ struct Cyc_TypeOpt_tok_struct*
! _temp2162=( struct Cyc_TypeOpt_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeOpt_tok_struct));
! _temp2162[ 0]=({ struct Cyc_TypeOpt_tok_struct _temp2163; _temp2163.tag= Cyc_TypeOpt_tok;
! _temp2163.f1= 0; _temp2163;}); _temp2162;}); break; case 160: _LL2161: yyval=(
! void*)({ struct Cyc_TypeOpt_tok_struct* _temp2165=( struct Cyc_TypeOpt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeOpt_tok_struct)); _temp2165[ 0]=({ struct Cyc_TypeOpt_tok_struct
! _temp2166; _temp2166.tag= Cyc_TypeOpt_tok; _temp2166.f1=({ struct Cyc_Core_Opt*
! _temp2167=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2167->v=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2168=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2168[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2169; _temp2169.tag= Cyc_Absyn_JoinEff;
! _temp2169.f1= Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2169;}); _temp2168;})); _temp2167;}); _temp2166;});
! _temp2165;}); break; case 161: _LL2164: yyval=( void*)({ struct Cyc_Rgnorder_tok_struct*
! _temp2171=( struct Cyc_Rgnorder_tok_struct*) _cycalloc( sizeof( struct Cyc_Rgnorder_tok_struct));
! _temp2171[ 0]=({ struct Cyc_Rgnorder_tok_struct _temp2172; _temp2172.tag= Cyc_Rgnorder_tok;
! _temp2172.f1= 0; _temp2172;}); _temp2171;}); break; case 162: _LL2170: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 163:
! _LL2173: yyval=( void*)({ struct Cyc_Rgnorder_tok_struct* _temp2175=( struct Cyc_Rgnorder_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Rgnorder_tok_struct)); _temp2175[ 0]=({ struct Cyc_Rgnorder_tok_struct
! _temp2176; _temp2176.tag= Cyc_Rgnorder_tok; _temp2176.f1=({ struct Cyc_List_List*
! _temp2177=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2177->hd=( void*)({ struct _tuple18* _temp2178=( struct _tuple18*)
! _cycalloc( sizeof( struct _tuple18)); _temp2178->f1= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2178->f2= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2178;}); _temp2177->tl= 0; _temp2177;});
! _temp2176;}); _temp2175;}); break; case 164: _LL2174: yyval=( void*)({ struct
! Cyc_Rgnorder_tok_struct* _temp2180=( struct Cyc_Rgnorder_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Rgnorder_tok_struct)); _temp2180[ 0]=({ struct Cyc_Rgnorder_tok_struct
! _temp2181; _temp2181.tag= Cyc_Rgnorder_tok; _temp2181.f1=({ struct Cyc_List_List*
! _temp2182=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2182->hd=( void*)({ struct _tuple18* _temp2183=( struct _tuple18*)
! _cycalloc( sizeof( struct _tuple18)); _temp2183->f1= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2183->f2= Cyc_Parse_id2type( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind)); _temp2183;}); _temp2182->tl= Cyc_yyget_Rgnorder_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2182;});
! _temp2181;}); _temp2180;}); break; case 165: _LL2179: yyval=( void*)({ struct
! Cyc_Bool_tok_struct* _temp2185=( struct Cyc_Bool_tok_struct*) _cycalloc_atomic(
! sizeof( struct Cyc_Bool_tok_struct)); _temp2185[ 0]=({ struct Cyc_Bool_tok_struct
! _temp2186; _temp2186.tag= Cyc_Bool_tok; _temp2186.f1= 0; _temp2186;}); _temp2185;});
! break; case 166: _LL2184: { struct _tagged_arr _temp2188= Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if( Cyc_Std_zstrcmp(
! _temp2188, _tag_arr("inject", sizeof( unsigned char), 7u)) !=  0){ Cyc_Parse_err(
  _tag_arr("missing type in function declaration", sizeof( unsigned char), 37u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line));} yyval=( void*)({ struct Cyc_Bool_tok_struct*
! _temp2189=( struct Cyc_Bool_tok_struct*) _cycalloc_atomic( sizeof( struct Cyc_Bool_tok_struct));
! _temp2189[ 0]=({ struct Cyc_Bool_tok_struct _temp2190; _temp2190.tag= Cyc_Bool_tok;
! _temp2190.f1= 1; _temp2190;}); _temp2189;}); break;} case 167: _LL2187: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 168:
! _LL2191: yyval=( void*)({ struct Cyc_TypeList_tok_struct* _temp2193=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2193[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2194; _temp2194.tag= Cyc_TypeList_tok; _temp2194.f1= Cyc_List_imp_append(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2194;});
! _temp2193;}); break; case 169: _LL2192: yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp2196=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2196[ 0]=({ struct Cyc_TypeList_tok_struct _temp2197; _temp2197.tag= Cyc_TypeList_tok;
! _temp2197.f1= 0; _temp2197;}); _temp2196;}); break; case 170: _LL2195: yyval=
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case
! 171: _LL2198: yyval=( void*)({ struct Cyc_TypeList_tok_struct* _temp2200=(
  struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2200[ 0]=({ struct Cyc_TypeList_tok_struct _temp2201; _temp2201.tag= Cyc_TypeList_tok;
! _temp2201.f1=({ struct Cyc_List_List* _temp2202=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2202->hd=( void*)(( void*)({
! struct Cyc_Absyn_RgnsEff_struct* _temp2203=( struct Cyc_Absyn_RgnsEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct)); _temp2203[ 0]=({ struct
! Cyc_Absyn_RgnsEff_struct _temp2204; _temp2204.tag= Cyc_Absyn_RgnsEff; _temp2204.f1=(
  void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2204;}); _temp2203;})); _temp2202->tl= 0; _temp2202;});
! _temp2201;}); _temp2200;}); break; case 172: _LL2199: Cyc_Parse_set_vartyp_kind(
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),(
  void*) Cyc_Absyn_EffKind); yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp2206=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2206[ 0]=({ struct Cyc_TypeList_tok_struct _temp2207; _temp2207.tag= Cyc_TypeList_tok;
! _temp2207.f1=({ struct Cyc_List_List* _temp2208=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2208->hd=( void*) Cyc_yyget_Type_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2208->tl= 0;
! _temp2208;}); _temp2207;}); _temp2206;}); break; case 173: _LL2205: if( ! Cyc_Parse_set_vartyp_kind(
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]),(
  void*) Cyc_Absyn_RgnKind)){ Cyc_Parse_err( _tag_arr("expecting region kind",
  sizeof( unsigned char), 22u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_TypeList_tok_struct* _temp2210=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2210[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2211; _temp2211.tag= Cyc_TypeList_tok; _temp2211.f1=({ struct Cyc_List_List*
! _temp2212=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2212->hd=( void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp2213=(
  struct Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp2213[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp2214; _temp2214.tag= Cyc_Absyn_AccessEff;
! _temp2214.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2214;}); _temp2213;})); _temp2212->tl= 0;
! _temp2212;}); _temp2211;}); _temp2210;}); break; case 174: _LL2209: if( ! Cyc_Parse_set_vartyp_kind(
  Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]),( void*) Cyc_Absyn_RgnKind)){ Cyc_Parse_err( _tag_arr("expecting region kind",
  sizeof( unsigned char), 22u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));} yyval=(
! void*)({ struct Cyc_TypeList_tok_struct* _temp2216=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2216[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2217; _temp2217.tag= Cyc_TypeList_tok; _temp2217.f1=({ struct Cyc_List_List*
! _temp2218=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2218->hd=( void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp2219=(
  struct Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp2219[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp2220; _temp2220.tag= Cyc_Absyn_AccessEff;
! _temp2220.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2220;}); _temp2219;})); _temp2218->tl= Cyc_yyget_TypeList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2218;});
! _temp2217;}); _temp2216;}); break; case 175: _LL2215: yyval=( void*)({ struct
! Cyc_ParamDeclList_tok_struct* _temp2222=( struct Cyc_ParamDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDeclList_tok_struct)); _temp2222[ 0]=({
! struct Cyc_ParamDeclList_tok_struct _temp2223; _temp2223.tag= Cyc_ParamDeclList_tok;
! _temp2223.f1=({ struct Cyc_List_List* _temp2224=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2224->hd=( void*) Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2224->tl= 0;
! _temp2224;}); _temp2223;}); _temp2222;}); break; case 176: _LL2221: yyval=( void*)({
! struct Cyc_ParamDeclList_tok_struct* _temp2226=( struct Cyc_ParamDeclList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDeclList_tok_struct)); _temp2226[ 0]=({
! struct Cyc_ParamDeclList_tok_struct _temp2227; _temp2227.tag= Cyc_ParamDeclList_tok;
! _temp2227.f1=({ struct Cyc_List_List* _temp2228=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2228->hd=( void*) Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2228->tl=
  Cyc_yyget_ParamDeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2228;}); _temp2227;}); _temp2226;}); break; case 177:
! _LL2225: { struct _tuple17 _temp2232; struct Cyc_List_List* _temp2233; struct
! Cyc_List_List* _temp2235; struct Cyc_Absyn_Tqual _temp2237; struct _tuple17*
! _temp2230= Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2232=* _temp2230; _LL2238: _temp2237=
! _temp2232.f1; goto _LL2236; _LL2236: _temp2235= _temp2232.f2; goto _LL2234;
! _LL2234: _temp2233= _temp2232.f3; goto _LL2231; _LL2231: { struct Cyc_Parse_Declarator
! _temp2241; struct Cyc_List_List* _temp2242; struct _tuple1* _temp2244; struct
! Cyc_Parse_Declarator* _temp2239= Cyc_yyget_Declarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2241=* _temp2239;
! _LL2245: _temp2244= _temp2241.id; goto _LL2243; _LL2243: _temp2242= _temp2241.tms;
! goto _LL2240; _LL2240: { void* _temp2246= Cyc_Parse_speclist2typ( _temp2235, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! struct Cyc_List_List* _temp2249; struct Cyc_List_List* _temp2251; void*
! _temp2253; struct Cyc_Absyn_Tqual _temp2255; struct _tuple6 _temp2247= Cyc_Parse_apply_tms(
! _temp2237, _temp2246, _temp2233, _temp2242); _LL2256: _temp2255= _temp2247.f1;
! goto _LL2254; _LL2254: _temp2253= _temp2247.f2; goto _LL2252; _LL2252: _temp2251=
! _temp2247.f3; goto _LL2250; _LL2250: _temp2249= _temp2247.f4; goto _LL2248;
! _LL2248: if( _temp2251 !=  0){ Cyc_Parse_err( _tag_arr("parameter with bad type params",
  sizeof( unsigned char), 31u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} if( Cyc_Absyn_is_qvar_qualified(
! _temp2244)){ Cyc_Parse_err( _tag_arr("parameter cannot be qualified with a namespace",
  sizeof( unsigned char), 47u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));}{
! struct Cyc_Core_Opt* _temp2257=( struct Cyc_Core_Opt*)({ struct Cyc_Core_Opt*
! _temp2261=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2261->v=( void*)(* _temp2244).f2; _temp2261;}); if( _temp2249 !=  0){ Cyc_Parse_warn(
  _tag_arr("extra attributes on parameter, ignoring", sizeof( unsigned char), 40u),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).last_line));} yyval=( void*)({ struct Cyc_ParamDecl_tok_struct*
! _temp2258=( struct Cyc_ParamDecl_tok_struct*) _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct));
! _temp2258[ 0]=({ struct Cyc_ParamDecl_tok_struct _temp2259; _temp2259.tag= Cyc_ParamDecl_tok;
! _temp2259.f1=({ struct _tuple2* _temp2260=( struct _tuple2*) _cycalloc( sizeof(
! struct _tuple2)); _temp2260->f1= _temp2257; _temp2260->f2= _temp2255; _temp2260->f3=
! _temp2253; _temp2260;}); _temp2259;}); _temp2258;}); break;}}}} case 178:
! _LL2229: { struct _tuple17 _temp2265; struct Cyc_List_List* _temp2266; struct
! Cyc_List_List* _temp2268; struct Cyc_Absyn_Tqual _temp2270; struct _tuple17*
! _temp2263= Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2265=* _temp2263; _LL2271: _temp2270= _temp2265.f1;
! goto _LL2269; _LL2269: _temp2268= _temp2265.f2; goto _LL2267; _LL2267: _temp2266=
! _temp2265.f3; goto _LL2264; _LL2264: { void* _temp2272= Cyc_Parse_speclist2typ(
! _temp2268, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); if( _temp2266 !=  0){ Cyc_Parse_warn( _tag_arr("bad attributes on parameter, ignoring",
  sizeof( unsigned char), 38u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_ParamDecl_tok_struct* _temp2273=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2273[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2274; _temp2274.tag= Cyc_ParamDecl_tok; _temp2274.f1=({
! struct _tuple2* _temp2275=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2275->f1= 0; _temp2275->f2= _temp2270; _temp2275->f3= _temp2272; _temp2275;});
! _temp2274;}); _temp2273;}); break;}} case 179: _LL2262: { struct _tuple17
! _temp2279; struct Cyc_List_List* _temp2280; struct Cyc_List_List* _temp2282;
! struct Cyc_Absyn_Tqual _temp2284; struct _tuple17* _temp2277= Cyc_yyget_QualSpecList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2279=*
! _temp2277; _LL2285: _temp2284= _temp2279.f1; goto _LL2283; _LL2283: _temp2282=
! _temp2279.f2; goto _LL2281; _LL2281: _temp2280= _temp2279.f3; goto _LL2278;
! _LL2278: { void* _temp2286= Cyc_Parse_speclist2typ( _temp2282, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! struct Cyc_List_List* _temp2287=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms; struct Cyc_List_List*
! _temp2290; struct Cyc_List_List* _temp2292; void* _temp2294; struct Cyc_Absyn_Tqual
! _temp2296; struct _tuple6 _temp2288= Cyc_Parse_apply_tms( _temp2284, _temp2286,
! _temp2280, _temp2287); _LL2297: _temp2296= _temp2288.f1; goto _LL2295; _LL2295:
! _temp2294= _temp2288.f2; goto _LL2293; _LL2293: _temp2292= _temp2288.f3; goto
! _LL2291; _LL2291: _temp2290= _temp2288.f4; goto _LL2289; _LL2289: if( _temp2292
  !=  0){ Cyc_Parse_warn( _tag_arr("bad type parameters on formal argument, ignoring",
  sizeof( unsigned char), 49u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} if(
! _temp2290 !=  0){ Cyc_Parse_warn( _tag_arr("bad attributes on parameter, ignoring",
  sizeof( unsigned char), 38u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_ParamDecl_tok_struct* _temp2298=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2298[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2299; _temp2299.tag= Cyc_ParamDecl_tok; _temp2299.f1=({
! struct _tuple2* _temp2300=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2300->f1= 0; _temp2300->f2= _temp2296; _temp2300->f3= _temp2294; _temp2300;});
! _temp2299;}); _temp2298;}); break;}} case 180: _LL2276: yyval=( void*)({ struct
! Cyc_IdList_tok_struct* _temp2302=( struct Cyc_IdList_tok_struct*) _cycalloc(
! sizeof( struct Cyc_IdList_tok_struct)); _temp2302[ 0]=({ struct Cyc_IdList_tok_struct
! _temp2303; _temp2303.tag= Cyc_IdList_tok; _temp2303.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_IdList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2303;});
! _temp2302;}); break; case 181: _LL2301: yyval=( void*)({ struct Cyc_IdList_tok_struct*
! _temp2305=( struct Cyc_IdList_tok_struct*) _cycalloc( sizeof( struct Cyc_IdList_tok_struct));
! _temp2305[ 0]=({ struct Cyc_IdList_tok_struct _temp2306; _temp2306.tag= Cyc_IdList_tok;
! _temp2306.f1=({ struct Cyc_List_List* _temp2307=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2307->hd=( void*)({ struct
! _tagged_arr* _temp2308=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2308[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2308;}); _temp2307->tl=
! 0; _temp2307;}); _temp2306;}); _temp2305;}); break; case 182: _LL2304: yyval=(
! void*)({ struct Cyc_IdList_tok_struct* _temp2310=( struct Cyc_IdList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_IdList_tok_struct)); _temp2310[ 0]=({ struct Cyc_IdList_tok_struct
! _temp2311; _temp2311.tag= Cyc_IdList_tok; _temp2311.f1=({ struct Cyc_List_List*
! _temp2312=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2312->hd=( void*)({ struct _tagged_arr* _temp2313=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp2313[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2313;});
! _temp2312->tl= Cyc_yyget_IdList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2312;}); _temp2311;}); _temp2310;}); break; case 183:
! _LL2309: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 184: _LL2314: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 185: _LL2315: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2317=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2317[ 0]=({ struct Cyc_Exp_tok_struct _temp2318; _temp2318.tag= Cyc_Exp_tok;
! _temp2318.f1= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnresolvedMem_e_struct*
! _temp2319=( struct Cyc_Absyn_UnresolvedMem_e_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnresolvedMem_e_struct)); _temp2319[ 0]=({ struct Cyc_Absyn_UnresolvedMem_e_struct
! _temp2320; _temp2320.tag= Cyc_Absyn_UnresolvedMem_e; _temp2320.f1= 0; _temp2320.f2=
! 0; _temp2320;}); _temp2319;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2318;});
! _temp2317;}); break; case 186: _LL2316: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2322=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2322[ 0]=({ struct Cyc_Exp_tok_struct _temp2323; _temp2323.tag= Cyc_Exp_tok;
! _temp2323.f1= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnresolvedMem_e_struct*
! _temp2324=( struct Cyc_Absyn_UnresolvedMem_e_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnresolvedMem_e_struct)); _temp2324[ 0]=({ struct Cyc_Absyn_UnresolvedMem_e_struct
! _temp2325; _temp2325.tag= Cyc_Absyn_UnresolvedMem_e; _temp2325.f1= 0; _temp2325.f2=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp2325;});
! _temp2324;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2323;}); _temp2322;}); break; case 187:
! _LL2321: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2327=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2327[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2328; _temp2328.tag= Cyc_Exp_tok; _temp2328.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_UnresolvedMem_e_struct* _temp2329=( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnresolvedMem_e_struct)); _temp2329[ 0]=({
! struct Cyc_Absyn_UnresolvedMem_e_struct _temp2330; _temp2330.tag= Cyc_Absyn_UnresolvedMem_e;
! _temp2330.f1= 0; _temp2330.f2=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); _temp2330;});
! _temp2329;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2328;}); _temp2327;}); break; case 188:
! _LL2326: { struct Cyc_Absyn_Vardecl* _temp2332= Cyc_Absyn_new_vardecl(({ struct
! _tuple1* _temp2338=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1));
! _temp2338->f1=( void*) Cyc_Absyn_Loc_n; _temp2338->f2=({ struct _tagged_arr*
! _temp2339=( struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr));
! _temp2339[ 0]= Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  5)]); _temp2339;}); _temp2338;}), Cyc_Absyn_uint_t,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_uint_exp( 0, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).last_line)));
! _temp2332->tq=({ struct Cyc_Absyn_Tqual _temp2333; _temp2333.q_const= 1;
! _temp2333.q_volatile= 0; _temp2333.q_restrict= 1; _temp2333;}); yyval=( void*)({
! struct Cyc_Exp_tok_struct* _temp2334=( struct Cyc_Exp_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Exp_tok_struct)); _temp2334[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2335; _temp2335.tag= Cyc_Exp_tok; _temp2335.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Comprehension_e_struct* _temp2336=( struct Cyc_Absyn_Comprehension_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Comprehension_e_struct)); _temp2336[ 0]=({
! struct Cyc_Absyn_Comprehension_e_struct _temp2337; _temp2337.tag= Cyc_Absyn_Comprehension_e;
! _temp2337.f1= _temp2332; _temp2337.f2= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2337.f3= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2337;});
! _temp2336;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  7)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2335;}); _temp2334;}); break;} case
! 189: _LL2331: yyval=( void*)({ struct Cyc_InitializerList_tok_struct* _temp2341=(
  struct Cyc_InitializerList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct));
! _temp2341[ 0]=({ struct Cyc_InitializerList_tok_struct _temp2342; _temp2342.tag=
! Cyc_InitializerList_tok; _temp2342.f1=({ struct Cyc_List_List* _temp2343=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2343->hd=(
! void*)({ struct _tuple19* _temp2344=( struct _tuple19*) _cycalloc( sizeof(
! struct _tuple19)); _temp2344->f1= 0; _temp2344->f2= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2344;}); _temp2343->tl=
! 0; _temp2343;}); _temp2342;}); _temp2341;}); break; case 190: _LL2340: yyval=(
! void*)({ struct Cyc_InitializerList_tok_struct* _temp2346=( struct Cyc_InitializerList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct)); _temp2346[ 0]=({
! struct Cyc_InitializerList_tok_struct _temp2347; _temp2347.tag= Cyc_InitializerList_tok;
! _temp2347.f1=({ struct Cyc_List_List* _temp2348=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2348->hd=( void*)({ struct
! _tuple19* _temp2349=( struct _tuple19*) _cycalloc( sizeof( struct _tuple19));
! _temp2349->f1= Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2349->f2= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2349;});
! _temp2348->tl= 0; _temp2348;}); _temp2347;}); _temp2346;}); break; case 191:
! _LL2345: yyval=( void*)({ struct Cyc_InitializerList_tok_struct* _temp2351=(
  struct Cyc_InitializerList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct));
! _temp2351[ 0]=({ struct Cyc_InitializerList_tok_struct _temp2352; _temp2352.tag=
! Cyc_InitializerList_tok; _temp2352.f1=({ struct Cyc_List_List* _temp2353=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2353->hd=(
! void*)({ struct _tuple19* _temp2354=( struct _tuple19*) _cycalloc( sizeof(
! struct _tuple19)); _temp2354->f1= 0; _temp2354->f2= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2354;}); _temp2353->tl=
  Cyc_yyget_InitializerList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2353;}); _temp2352;}); _temp2351;}); break; case 192:
! _LL2350: yyval=( void*)({ struct Cyc_InitializerList_tok_struct* _temp2356=(
  struct Cyc_InitializerList_tok_struct*) _cycalloc( sizeof( struct Cyc_InitializerList_tok_struct));
! _temp2356[ 0]=({ struct Cyc_InitializerList_tok_struct _temp2357; _temp2357.tag=
! Cyc_InitializerList_tok; _temp2357.f1=({ struct Cyc_List_List* _temp2358=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2358->hd=(
! void*)({ struct _tuple19* _temp2359=( struct _tuple19*) _cycalloc( sizeof(
! struct _tuple19)); _temp2359->f1= Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2359->f2= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2359;});
! _temp2358->tl= Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2358;});
! _temp2357;}); _temp2356;}); break; case 193: _LL2355: yyval=( void*)({ struct
! Cyc_DesignatorList_tok_struct* _temp2361=( struct Cyc_DesignatorList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_DesignatorList_tok_struct)); _temp2361[ 0]=({
! struct Cyc_DesignatorList_tok_struct _temp2362; _temp2362.tag= Cyc_DesignatorList_tok;
! _temp2362.f1= Cyc_List_imp_rev( Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp2362;});
! _temp2361;}); break; case 194: _LL2360: yyval=( void*)({ struct Cyc_DesignatorList_tok_struct*
! _temp2364=( struct Cyc_DesignatorList_tok_struct*) _cycalloc( sizeof( struct Cyc_DesignatorList_tok_struct));
! _temp2364[ 0]=({ struct Cyc_DesignatorList_tok_struct _temp2365; _temp2365.tag=
! Cyc_DesignatorList_tok; _temp2365.f1=({ struct Cyc_List_List* _temp2366=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2366->hd=( void*)
  Cyc_yyget_Designator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2366->tl= 0; _temp2366;}); _temp2365;}); _temp2364;});
! break; case 195: _LL2363: yyval=( void*)({ struct Cyc_DesignatorList_tok_struct*
! _temp2368=( struct Cyc_DesignatorList_tok_struct*) _cycalloc( sizeof( struct Cyc_DesignatorList_tok_struct));
! _temp2368[ 0]=({ struct Cyc_DesignatorList_tok_struct _temp2369; _temp2369.tag=
! Cyc_DesignatorList_tok; _temp2369.f1=({ struct Cyc_List_List* _temp2370=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2370->hd=( void*)
  Cyc_yyget_Designator_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2370->tl= Cyc_yyget_DesignatorList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2370;});
! _temp2369;}); _temp2368;}); break; case 196: _LL2367: yyval=( void*)({ struct
! Cyc_Designator_tok_struct* _temp2372=( struct Cyc_Designator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Designator_tok_struct)); _temp2372[ 0]=({ struct
! Cyc_Designator_tok_struct _temp2373; _temp2373.tag= Cyc_Designator_tok;
! _temp2373.f1=( void*)(( void*)({ struct Cyc_Absyn_ArrayElement_struct* _temp2374=(
  struct Cyc_Absyn_ArrayElement_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayElement_struct));
! _temp2374[ 0]=({ struct Cyc_Absyn_ArrayElement_struct _temp2375; _temp2375.tag=
! Cyc_Absyn_ArrayElement; _temp2375.f1= Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2375;});
! _temp2374;})); _temp2373;}); _temp2372;}); break; case 197: _LL2371: yyval=(
! void*)({ struct Cyc_Designator_tok_struct* _temp2377=( struct Cyc_Designator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Designator_tok_struct)); _temp2377[ 0]=({ struct
! Cyc_Designator_tok_struct _temp2378; _temp2378.tag= Cyc_Designator_tok;
! _temp2378.f1=( void*)(( void*)({ struct Cyc_Absyn_FieldName_struct* _temp2379=(
  struct Cyc_Absyn_FieldName_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FieldName_struct));
! _temp2379[ 0]=({ struct Cyc_Absyn_FieldName_struct _temp2380; _temp2380.tag= Cyc_Absyn_FieldName;
! _temp2380.f1=({ struct _tagged_arr* _temp2381=( struct _tagged_arr*) _cycalloc(
! sizeof( struct _tagged_arr)); _temp2381[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2381;}); _temp2380;});
! _temp2379;})); _temp2378;}); _temp2377;}); break; case 198: _LL2376: { void*
! _temp2383= Cyc_Parse_speclist2typ((* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); struct Cyc_List_List*
! _temp2384=(* Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)])).f3; if( _temp2384 !=  0){ Cyc_Parse_warn( _tag_arr("ignoring attributes in type",
  sizeof( unsigned char), 28u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));}{ struct
! Cyc_Absyn_Tqual _temp2385=(* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1; yyval=( void*)({
! struct Cyc_ParamDecl_tok_struct* _temp2386=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2386[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2387; _temp2387.tag= Cyc_ParamDecl_tok; _temp2387.f1=({
! struct _tuple2* _temp2388=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2388->f1= 0; _temp2388->f2= _temp2385; _temp2388->f3= _temp2383; _temp2388;});
! _temp2387;}); _temp2386;}); break;}} case 199: _LL2382: { void* _temp2390= Cyc_Parse_speclist2typ((*
  Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)])).f2, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line)); struct
! Cyc_List_List* _temp2391=(* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])).f3; struct Cyc_Absyn_Tqual
! _temp2392=(* Cyc_yyget_QualSpecList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)])).f1; struct Cyc_List_List* _temp2393=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms; struct
! _tuple6 _temp2394= Cyc_Parse_apply_tms( _temp2392, _temp2390, _temp2391,
! _temp2393); if( _temp2394.f3 !=  0){ Cyc_Parse_warn( _tag_arr("bad type params, ignoring",
  sizeof( unsigned char), 26u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} if(
! _temp2394.f4 !=  0){ Cyc_Parse_warn( _tag_arr("bad specifiers, ignoring",
  sizeof( unsigned char), 25u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_ParamDecl_tok_struct* _temp2395=( struct Cyc_ParamDecl_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ParamDecl_tok_struct)); _temp2395[ 0]=({ struct
! Cyc_ParamDecl_tok_struct _temp2396; _temp2396.tag= Cyc_ParamDecl_tok; _temp2396.f1=({
! struct _tuple2* _temp2397=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2397->f1= 0; _temp2397->f2= _temp2394.f1; _temp2397->f3= _temp2394.f2;
! _temp2397;}); _temp2396;}); _temp2395;}); break;} case 200: _LL2389: yyval=(
! void*)({ struct Cyc_Type_tok_struct* _temp2399=( struct Cyc_Type_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Type_tok_struct)); _temp2399[ 0]=({ struct Cyc_Type_tok_struct
! _temp2400; _temp2400.tag= Cyc_Type_tok; _temp2400.f1=( void*)(* Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f3; _temp2400;});
! _temp2399;}); break; case 201: _LL2398: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2402=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2402[ 0]=({ struct Cyc_Type_tok_struct _temp2403; _temp2403.tag= Cyc_Type_tok;
! _temp2403.f1=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2404=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2404[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2405; _temp2405.tag= Cyc_Absyn_JoinEff;
! _temp2405.f1= 0; _temp2405;}); _temp2404;})); _temp2403;}); _temp2402;}); break;
! case 202: _LL2401: yyval=( void*)({ struct Cyc_Type_tok_struct* _temp2407=(
  struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2407[ 0]=({ struct Cyc_Type_tok_struct _temp2408; _temp2408.tag= Cyc_Type_tok;
! _temp2408.f1=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2409=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2409[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2410; _temp2410.tag= Cyc_Absyn_JoinEff;
! _temp2410.f1= Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2410;}); _temp2409;})); _temp2408;});
! _temp2407;}); break; case 203: _LL2406: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2412=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2412[ 0]=({ struct Cyc_Type_tok_struct _temp2413; _temp2413.tag= Cyc_Type_tok;
! _temp2413.f1=( void*)(( void*)({ struct Cyc_Absyn_RgnsEff_struct* _temp2414=(
  struct Cyc_Absyn_RgnsEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct));
! _temp2414[ 0]=({ struct Cyc_Absyn_RgnsEff_struct _temp2415; _temp2415.tag= Cyc_Absyn_RgnsEff;
! _temp2415.f1=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2415;}); _temp2414;})); _temp2413;});
! _temp2412;}); break; case 204: _LL2411: yyval=( void*)({ struct Cyc_Type_tok_struct*
! _temp2417=( struct Cyc_Type_tok_struct*) _cycalloc( sizeof( struct Cyc_Type_tok_struct));
! _temp2417[ 0]=({ struct Cyc_Type_tok_struct _temp2418; _temp2418.tag= Cyc_Type_tok;
! _temp2418.f1=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2419=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2419[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2420; _temp2420.tag= Cyc_Absyn_JoinEff;
! _temp2420.f1=({ struct Cyc_List_List* _temp2421=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2421->hd=( void*) Cyc_yyget_Type_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2421->tl=
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2421;}); _temp2420;}); _temp2419;})); _temp2418;});
! _temp2417;}); break; case 205: _LL2416: yyval=( void*)({ struct Cyc_TypeList_tok_struct*
! _temp2423=( struct Cyc_TypeList_tok_struct*) _cycalloc( sizeof( struct Cyc_TypeList_tok_struct));
! _temp2423[ 0]=({ struct Cyc_TypeList_tok_struct _temp2424; _temp2424.tag= Cyc_TypeList_tok;
! _temp2424.f1=({ struct Cyc_List_List* _temp2425=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2425->hd=( void*) Cyc_yyget_Type_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2425->tl= 0;
! _temp2425;}); _temp2424;}); _temp2423;}); break; case 206: _LL2422: yyval=( void*)({
! struct Cyc_TypeList_tok_struct* _temp2427=( struct Cyc_TypeList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_TypeList_tok_struct)); _temp2427[ 0]=({ struct Cyc_TypeList_tok_struct
! _temp2428; _temp2428.tag= Cyc_TypeList_tok; _temp2428.f1=({ struct Cyc_List_List*
! _temp2429=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2429->hd=( void*) Cyc_yyget_Type_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp2429->tl= Cyc_yyget_TypeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2429;});
! _temp2428;}); _temp2427;}); break; case 207: _LL2426: yyval=( void*)({ struct
! Cyc_AbstractDeclarator_tok_struct* _temp2431=( struct Cyc_AbstractDeclarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct)); _temp2431[ 0]=({
! struct Cyc_AbstractDeclarator_tok_struct _temp2432; _temp2432.tag= Cyc_AbstractDeclarator_tok;
! _temp2432.f1=({ struct Cyc_Parse_Abstractdeclarator* _temp2433=( struct Cyc_Parse_Abstractdeclarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator)); _temp2433->tms= Cyc_yyget_TypeModifierList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2433;});
! _temp2432;}); _temp2431;}); break; case 208: _LL2430: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 209: _LL2434:
! yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2436=( struct
  Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2436[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2437; _temp2437.tag=
! Cyc_AbstractDeclarator_tok; _temp2437.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2438=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2438->tms= Cyc_List_imp_append( Cyc_yyget_TypeModifierList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]),( Cyc_yyget_AbstractDeclarator_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]))->tms); _temp2438;});
! _temp2437;}); _temp2436;}); break; case 210: _LL2435: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 211:
! _LL2439: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2441=(
  struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2441[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2442; _temp2442.tag=
! Cyc_AbstractDeclarator_tok; _temp2442.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2443=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2443->tms=({ struct Cyc_List_List* _temp2444=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2444->hd=( void*)(( void*) Cyc_Absyn_Carray_mod);
! _temp2444->tl= 0; _temp2444;}); _temp2443;}); _temp2442;}); _temp2441;}); break;
! case 212: _LL2440: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2446=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2446[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2447; _temp2447.tag= Cyc_AbstractDeclarator_tok; _temp2447.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2448=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2448->tms=({ struct Cyc_List_List* _temp2449=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2449->hd=( void*)(( void*) Cyc_Absyn_Carray_mod);
! _temp2449->tl=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]))->tms; _temp2449;});
! _temp2448;}); _temp2447;}); _temp2446;}); break; case 213: _LL2445: yyval=( void*)({
! struct Cyc_AbstractDeclarator_tok_struct* _temp2451=( struct Cyc_AbstractDeclarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct)); _temp2451[ 0]=({
! struct Cyc_AbstractDeclarator_tok_struct _temp2452; _temp2452.tag= Cyc_AbstractDeclarator_tok;
! _temp2452.f1=({ struct Cyc_Parse_Abstractdeclarator* _temp2453=( struct Cyc_Parse_Abstractdeclarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator)); _temp2453->tms=({
! struct Cyc_List_List* _temp2454=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2454->hd=( void*)(( void*)({ struct Cyc_Absyn_ConstArray_mod_struct*
! _temp2455=( struct Cyc_Absyn_ConstArray_mod_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_ConstArray_mod_struct)); _temp2455[ 0]=({ struct Cyc_Absyn_ConstArray_mod_struct
! _temp2456; _temp2456.tag= Cyc_Absyn_ConstArray_mod; _temp2456.f1= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2456;});
! _temp2455;})); _temp2454->tl= 0; _temp2454;}); _temp2453;}); _temp2452;});
! _temp2451;}); break; case 214: _LL2450: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2458=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2458[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2459; _temp2459.tag= Cyc_AbstractDeclarator_tok; _temp2459.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2460=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2460->tms=({ struct Cyc_List_List* _temp2461=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2461->hd=( void*)(( void*)({
! struct Cyc_Absyn_ConstArray_mod_struct* _temp2462=( struct Cyc_Absyn_ConstArray_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ConstArray_mod_struct)); _temp2462[ 0]=({
! struct Cyc_Absyn_ConstArray_mod_struct _temp2463; _temp2463.tag= Cyc_Absyn_ConstArray_mod;
! _temp2463.f1= Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2463;}); _temp2462;})); _temp2461->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2461;}); _temp2460;}); _temp2459;}); _temp2458;}); break; case 215: _LL2457:
! yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2465=( struct
  Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2465[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2466; _temp2466.tag=
! Cyc_AbstractDeclarator_tok; _temp2466.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2467=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2467->tms=({ struct Cyc_List_List* _temp2468=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2468->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2469=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2469[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2470; _temp2470.tag= Cyc_Absyn_Function_mod;
! _temp2470.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2471=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2471[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2472; _temp2472.tag= Cyc_Absyn_WithTypes;
! _temp2472.f1= 0; _temp2472.f2= 0; _temp2472.f3= 0; _temp2472.f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2472.f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2472;}); _temp2471;})); _temp2470;}); _temp2469;}));
! _temp2468->tl= 0; _temp2468;}); _temp2467;}); _temp2466;}); _temp2465;}); break;
! case 216: _LL2464: { struct _tuple16 _temp2476; struct Cyc_List_List* _temp2477;
! struct Cyc_Core_Opt* _temp2479; struct Cyc_Absyn_VarargInfo* _temp2481; int
! _temp2483; struct Cyc_List_List* _temp2485; struct _tuple16* _temp2474= Cyc_yyget_YY1(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2476=*
! _temp2474; _LL2486: _temp2485= _temp2476.f1; goto _LL2484; _LL2484: _temp2483=
! _temp2476.f2; goto _LL2482; _LL2482: _temp2481= _temp2476.f3; goto _LL2480;
! _LL2480: _temp2479= _temp2476.f4; goto _LL2478; _LL2478: _temp2477= _temp2476.f5;
! goto _LL2475; _LL2475: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2487=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2487[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2488; _temp2488.tag= Cyc_AbstractDeclarator_tok; _temp2488.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2489=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2489->tms=({ struct Cyc_List_List* _temp2490=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2490->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2491=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2491[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2492; _temp2492.tag= Cyc_Absyn_Function_mod;
! _temp2492.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2493=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2493[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2494; _temp2494.tag= Cyc_Absyn_WithTypes;
! _temp2494.f1= _temp2485; _temp2494.f2= _temp2483; _temp2494.f3= _temp2481;
! _temp2494.f4= _temp2479; _temp2494.f5= _temp2477; _temp2494;}); _temp2493;}));
! _temp2492;}); _temp2491;})); _temp2490->tl= 0; _temp2490;}); _temp2489;});
! _temp2488;}); _temp2487;}); break;} case 217: _LL2473: yyval=( void*)({ struct
! Cyc_AbstractDeclarator_tok_struct* _temp2496=( struct Cyc_AbstractDeclarator_tok_struct*)
! _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct)); _temp2496[ 0]=({
! struct Cyc_AbstractDeclarator_tok_struct _temp2497; _temp2497.tag= Cyc_AbstractDeclarator_tok;
! _temp2497.f1=({ struct Cyc_Parse_Abstractdeclarator* _temp2498=( struct Cyc_Parse_Abstractdeclarator*)
! _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator)); _temp2498->tms=({
! struct Cyc_List_List* _temp2499=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2499->hd=( void*)(( void*)({ struct Cyc_Absyn_Function_mod_struct*
! _temp2500=( struct Cyc_Absyn_Function_mod_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct));
! _temp2500[ 0]=({ struct Cyc_Absyn_Function_mod_struct _temp2501; _temp2501.tag=
! Cyc_Absyn_Function_mod; _temp2501.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct*
! _temp2502=( struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2502[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2503; _temp2503.tag= Cyc_Absyn_WithTypes;
! _temp2503.f1= 0; _temp2503.f2= 0; _temp2503.f3= 0; _temp2503.f4= Cyc_yyget_TypeOpt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2503.f5=
  Cyc_yyget_Rgnorder_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2503;}); _temp2502;})); _temp2501;}); _temp2500;}));
! _temp2499->tl=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]))->tms; _temp2499;});
! _temp2498;}); _temp2497;}); _temp2496;}); break; case 218: _LL2495: { struct
! _tuple16 _temp2507; struct Cyc_List_List* _temp2508; struct Cyc_Core_Opt*
! _temp2510; struct Cyc_Absyn_VarargInfo* _temp2512; int _temp2514; struct Cyc_List_List*
! _temp2516; struct _tuple16* _temp2505= Cyc_yyget_YY1( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2507=*
! _temp2505; _LL2517: _temp2516= _temp2507.f1; goto _LL2515; _LL2515: _temp2514=
! _temp2507.f2; goto _LL2513; _LL2513: _temp2512= _temp2507.f3; goto _LL2511;
! _LL2511: _temp2510= _temp2507.f4; goto _LL2509; _LL2509: _temp2508= _temp2507.f5;
! goto _LL2506; _LL2506: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2518=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2518[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2519; _temp2519.tag= Cyc_AbstractDeclarator_tok; _temp2519.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2520=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2520->tms=({ struct Cyc_List_List* _temp2521=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2521->hd=( void*)(( void*)({
! struct Cyc_Absyn_Function_mod_struct* _temp2522=( struct Cyc_Absyn_Function_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Function_mod_struct)); _temp2522[ 0]=({
! struct Cyc_Absyn_Function_mod_struct _temp2523; _temp2523.tag= Cyc_Absyn_Function_mod;
! _temp2523.f1=( void*)(( void*)({ struct Cyc_Absyn_WithTypes_struct* _temp2524=(
  struct Cyc_Absyn_WithTypes_struct*) _cycalloc( sizeof( struct Cyc_Absyn_WithTypes_struct));
! _temp2524[ 0]=({ struct Cyc_Absyn_WithTypes_struct _temp2525; _temp2525.tag= Cyc_Absyn_WithTypes;
! _temp2525.f1= _temp2516; _temp2525.f2= _temp2514; _temp2525.f3= _temp2512;
! _temp2525.f4= _temp2510; _temp2525.f5= _temp2508; _temp2525;}); _temp2524;}));
! _temp2523;}); _temp2522;})); _temp2521->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2521;}); _temp2520;}); _temp2519;}); _temp2518;}); break;} case 219:
! _LL2504: { struct Cyc_List_List* _temp2527=(( struct Cyc_List_List*(*)( struct
  Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2528=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2528[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2529; _temp2529.tag= Cyc_AbstractDeclarator_tok; _temp2529.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2530=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2530->tms=({ struct Cyc_List_List* _temp2531=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2531->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2532=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2532[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2533; _temp2533.tag= Cyc_Absyn_TypeParams_mod;
! _temp2533.f1= _temp2527; _temp2533.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2533.f3=
! 0; _temp2533;}); _temp2532;})); _temp2531->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2531;}); _temp2530;}); _temp2529;}); _temp2528;}); break;} case 220:
! _LL2526:(( struct Cyc_Lexing_lexbuf*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Parse_lbuf))->v)->lex_curr_pos
! -= 1;{ struct Cyc_List_List* _temp2535=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(*
  f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment* env,
  struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line), Cyc_List_imp_rev(
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]))); yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct*
! _temp2536=( struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct
! Cyc_AbstractDeclarator_tok_struct)); _temp2536[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct
! _temp2537; _temp2537.tag= Cyc_AbstractDeclarator_tok; _temp2537.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2538=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2538->tms=({ struct Cyc_List_List* _temp2539=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2539->hd=( void*)(( void*)({
! struct Cyc_Absyn_TypeParams_mod_struct* _temp2540=( struct Cyc_Absyn_TypeParams_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TypeParams_mod_struct)); _temp2540[ 0]=({
! struct Cyc_Absyn_TypeParams_mod_struct _temp2541; _temp2541.tag= Cyc_Absyn_TypeParams_mod;
! _temp2541.f1= _temp2535; _temp2541.f2= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2541.f3=
! 0; _temp2541;}); _temp2540;})); _temp2539->tl=( Cyc_yyget_AbstractDeclarator_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]))->tms;
! _temp2539;}); _temp2538;}); _temp2537;}); _temp2536;}); break;} case 221:
! _LL2534: yyval=( void*)({ struct Cyc_AbstractDeclarator_tok_struct* _temp2543=(
  struct Cyc_AbstractDeclarator_tok_struct*) _cycalloc( sizeof( struct Cyc_AbstractDeclarator_tok_struct));
! _temp2543[ 0]=({ struct Cyc_AbstractDeclarator_tok_struct _temp2544; _temp2544.tag=
! Cyc_AbstractDeclarator_tok; _temp2544.f1=({ struct Cyc_Parse_Abstractdeclarator*
! _temp2545=( struct Cyc_Parse_Abstractdeclarator*) _cycalloc( sizeof( struct Cyc_Parse_Abstractdeclarator));
! _temp2545->tms=({ struct Cyc_List_List* _temp2546=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2546->hd=( void*)(( void*)({
! struct Cyc_Absyn_Attributes_mod_struct* _temp2547=( struct Cyc_Absyn_Attributes_mod_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Attributes_mod_struct)); _temp2547[ 0]=({
! struct Cyc_Absyn_Attributes_mod_struct _temp2548; _temp2548.tag= Cyc_Absyn_Attributes_mod;
! _temp2548.f1= Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp2548.f2= Cyc_yyget_AttributeList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2548;}); _temp2547;}));
! _temp2546->tl=( Cyc_yyget_AbstractDeclarator_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]))->tms; _temp2546;});
! _temp2545;}); _temp2544;}); _temp2543;}); break; case 222: _LL2542: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 223: _LL2549:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 224: _LL2550: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 225: _LL2551: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 226: _LL2552: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 227: _LL2553:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 228: _LL2554: if( Cyc_Std_zstrcmp( Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), _tag_arr("`H",
  sizeof( unsigned char), 3u)) ==  0){ Cyc_Parse_err( _tag_arr("bad occurrence of heap region `H",
  sizeof( unsigned char), 33u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line));}{
! struct Cyc_Absyn_Tvar* tv=({ struct Cyc_Absyn_Tvar* _temp2566=( struct Cyc_Absyn_Tvar*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tvar)); _temp2566->name=({ struct
! _tagged_arr* _temp2567=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2567[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2567;});
! _temp2566->identity= 0; _temp2566->kind= Cyc_Absyn_new_conref(( void*) Cyc_Absyn_RgnKind);
! _temp2566;}); void* t=( void*)({ struct Cyc_Absyn_VarType_struct* _temp2564=(
  struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2564[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2565; _temp2565.tag= Cyc_Absyn_VarType;
! _temp2565.f1= tv; _temp2565;}); _temp2564;}); yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2556=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2556[ 0]=({ struct Cyc_Stmt_tok_struct _temp2557; _temp2557.tag= Cyc_Stmt_tok;
! _temp2557.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Region_s_struct*
! _temp2558=( struct Cyc_Absyn_Region_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Region_s_struct));
! _temp2558[ 0]=({ struct Cyc_Absyn_Region_s_struct _temp2559; _temp2559.tag= Cyc_Absyn_Region_s;
! _temp2559.f1= tv; _temp2559.f2= Cyc_Absyn_new_vardecl(({ struct _tuple1*
! _temp2560=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp2560->f1=(
! void*) Cyc_Absyn_Loc_n; _temp2560->f2=({ struct _tagged_arr* _temp2561=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp2561[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2561;});
! _temp2560;}),( void*)({ struct Cyc_Absyn_RgnHandleType_struct* _temp2562=(
  struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct));
! _temp2562[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct _temp2563; _temp2563.tag=
! Cyc_Absyn_RgnHandleType; _temp2563.f1=( void*) t; _temp2563;}); _temp2562;}), 0);
! _temp2559.f3= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2559;}); _temp2558;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2557;});
! _temp2556;}); break;} case 229: _LL2555: if( Cyc_Std_zstrcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), _tag_arr("H",
  sizeof( unsigned char), 2u)) ==  0){ Cyc_Parse_err( _tag_arr("bad occurrence of heap region `H",
  sizeof( unsigned char), 33u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));}{
! struct Cyc_Absyn_Tvar* tv=({ struct Cyc_Absyn_Tvar* _temp2579=( struct Cyc_Absyn_Tvar*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tvar)); _temp2579->name=({ struct
! _tagged_arr* _temp2580=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2580[ 0]=( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp2582; _temp2582.tag= Cyc_Std_String_pa; _temp2582.f1=( struct _tagged_arr)
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset
! -  1)]);{ void* _temp2581[ 1u]={& _temp2582}; Cyc_Std_aprintf( _tag_arr("`%s",
! sizeof( unsigned char), 4u), _tag_arr( _temp2581, sizeof( void*), 1u));}});
! _temp2580;}); _temp2579->identity= 0; _temp2579->kind= Cyc_Absyn_new_conref((
! void*) Cyc_Absyn_RgnKind); _temp2579;}); void* t=( void*)({ struct Cyc_Absyn_VarType_struct*
! _temp2577=( struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2577[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2578; _temp2578.tag= Cyc_Absyn_VarType;
! _temp2578.f1= tv; _temp2578;}); _temp2577;}); yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2569=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2569[ 0]=({ struct Cyc_Stmt_tok_struct _temp2570; _temp2570.tag= Cyc_Stmt_tok;
! _temp2570.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Region_s_struct*
! _temp2571=( struct Cyc_Absyn_Region_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Region_s_struct));
! _temp2571[ 0]=({ struct Cyc_Absyn_Region_s_struct _temp2572; _temp2572.tag= Cyc_Absyn_Region_s;
! _temp2572.f1= tv; _temp2572.f2= Cyc_Absyn_new_vardecl(({ struct _tuple1*
! _temp2573=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp2573->f1=(
! void*) Cyc_Absyn_Loc_n; _temp2573->f2=({ struct _tagged_arr* _temp2574=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp2574[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2574;});
! _temp2573;}),( void*)({ struct Cyc_Absyn_RgnHandleType_struct* _temp2575=(
  struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct));
! _temp2575[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct _temp2576; _temp2576.tag=
! Cyc_Absyn_RgnHandleType; _temp2576.f1=( void*) t; _temp2576;}); _temp2575;}), 0);
! _temp2572.f3= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2572;}); _temp2571;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2570;});
! _temp2569;}); break;} case 230: _LL2568: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2584=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2584[ 0]=({ struct Cyc_Stmt_tok_struct _temp2585; _temp2585.tag= Cyc_Stmt_tok;
! _temp2585.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Cut_s_struct*
! _temp2586=( struct Cyc_Absyn_Cut_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Cut_s_struct));
! _temp2586[ 0]=({ struct Cyc_Absyn_Cut_s_struct _temp2587; _temp2587.tag= Cyc_Absyn_Cut_s;
! _temp2587.f1= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2587;}); _temp2586;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2585;});
! _temp2584;}); break; case 231: _LL2583: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2589=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2589[ 0]=({ struct Cyc_Stmt_tok_struct _temp2590; _temp2590.tag= Cyc_Stmt_tok;
! _temp2590.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Splice_s_struct*
! _temp2591=( struct Cyc_Absyn_Splice_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Splice_s_struct));
! _temp2591[ 0]=({ struct Cyc_Absyn_Splice_s_struct _temp2592; _temp2592.tag= Cyc_Absyn_Splice_s;
! _temp2592.f1= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2592;}); _temp2591;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2590;});
! _temp2589;}); break; case 232: _LL2588: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2594=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2594[ 0]=({ struct Cyc_Stmt_tok_struct _temp2595; _temp2595.tag= Cyc_Stmt_tok;
! _temp2595.f1= Cyc_Absyn_new_stmt(( void*)({ struct Cyc_Absyn_Label_s_struct*
! _temp2596=( struct Cyc_Absyn_Label_s_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Label_s_struct));
! _temp2596[ 0]=({ struct Cyc_Absyn_Label_s_struct _temp2597; _temp2597.tag= Cyc_Absyn_Label_s;
! _temp2597.f1=({ struct _tagged_arr* _temp2598=( struct _tagged_arr*) _cycalloc(
! sizeof( struct _tagged_arr)); _temp2598[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp2598;});
! _temp2597.f2= Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2597;}); _temp2596;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2595;});
! _temp2594;}); break; case 233: _LL2593: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2600=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2600[ 0]=({ struct Cyc_Stmt_tok_struct _temp2601; _temp2601.tag= Cyc_Stmt_tok;
! _temp2601.f1= Cyc_Absyn_skip_stmt( Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2601;});
! _temp2600;}); break; case 234: _LL2599: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2603=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2603[ 0]=({ struct Cyc_Stmt_tok_struct _temp2604; _temp2604.tag= Cyc_Stmt_tok;
! _temp2604.f1= Cyc_Absyn_exp_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2604;}); _temp2603;}); break; case 235: _LL2602: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2606=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2606[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2607; _temp2607.tag= Cyc_Stmt_tok; _temp2607.f1= Cyc_Absyn_skip_stmt( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2607;}); _temp2606;}); break; case 236: _LL2605: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 237:
! _LL2608: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2610=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2610[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2611; _temp2611.tag= Cyc_Stmt_tok; _temp2611.f1= Cyc_Parse_flatten_declarations(
  Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]), Cyc_Absyn_skip_stmt( 0)); _temp2611;}); _temp2610;}); break;
! case 238: _LL2609: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2613=(
  struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2613[ 0]=({ struct Cyc_Stmt_tok_struct _temp2614; _temp2614.tag= Cyc_Stmt_tok;
! _temp2614.f1= Cyc_Parse_flatten_declarations( Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2614;});
! _temp2613;}); break; case 239: _LL2612: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 240: _LL2615:
! yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2617=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2617[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2618; _temp2618.tag= Cyc_Stmt_tok; _temp2618.f1= Cyc_Absyn_seq_stmt( Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2618;}); _temp2617;}); break; case 241: _LL2616: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2620=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2620[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2621; _temp2621.tag= Cyc_Stmt_tok; _temp2621.f1= Cyc_Parse_flatten_decl(
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Fn_d_struct* _temp2622=( struct
  Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp2622[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp2623; _temp2623.tag= Cyc_Absyn_Fn_d;
! _temp2623.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2623;}); _temp2622;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)), Cyc_Absyn_skip_stmt(
! 0)); _temp2621;}); _temp2620;}); break; case 242: _LL2619: yyval=( void*)({
! struct Cyc_Stmt_tok_struct* _temp2625=( struct Cyc_Stmt_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Stmt_tok_struct)); _temp2625[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2626; _temp2626.tag= Cyc_Stmt_tok; _temp2626.f1= Cyc_Parse_flatten_decl(
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Fn_d_struct* _temp2627=( struct
  Cyc_Absyn_Fn_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Fn_d_struct));
! _temp2627[ 0]=({ struct Cyc_Absyn_Fn_d_struct _temp2628; _temp2628.tag= Cyc_Absyn_Fn_d;
! _temp2628.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp2628;}); _temp2627;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line)),
  Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]));
! _temp2626;}); _temp2625;}); break; case 243: _LL2624: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2630=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2630[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2631; _temp2631.tag= Cyc_Stmt_tok; _temp2631.f1= Cyc_Absyn_ifthenelse_stmt(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Absyn_skip_stmt( 0), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2631;});
! _temp2630;}); break; case 244: _LL2629: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2633=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2633[ 0]=({ struct Cyc_Stmt_tok_struct _temp2634; _temp2634.tag= Cyc_Stmt_tok;
! _temp2634.f1= Cyc_Absyn_ifthenelse_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2634;}); _temp2633;}); break; case 245: _LL2632: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2636=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2636[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2637; _temp2637.tag= Cyc_Stmt_tok; _temp2637.f1= Cyc_Absyn_switch_stmt( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_SwitchClauseList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2637;}); _temp2636;}); break; case 246: _LL2635: if( Cyc_Std_strcmp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)]), _tag_arr("C",
  sizeof( unsigned char), 2u)) !=  0){ Cyc_Parse_err( _tag_arr("only switch \"C\" { ... } is allowed",
  sizeof( unsigned char), 35u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2639=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2639[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2640; _temp2640.tag= Cyc_Stmt_tok; _temp2640.f1= Cyc_Absyn_new_stmt(( void*)({
! struct Cyc_Absyn_SwitchC_s_struct* _temp2641=( struct Cyc_Absyn_SwitchC_s_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_s_struct)); _temp2641[ 0]=({ struct
! Cyc_Absyn_SwitchC_s_struct _temp2642; _temp2642.tag= Cyc_Absyn_SwitchC_s;
! _temp2642.f1= Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  4)]); _temp2642.f2= Cyc_yyget_SwitchCClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2642;});
! _temp2641;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  7)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2640;}); _temp2639;}); break; case 247:
! _LL2638: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2644=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2644[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2645; _temp2645.tag= Cyc_Stmt_tok; _temp2645.f1= Cyc_Absyn_trycatch_stmt(
  Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  4)]), Cyc_yyget_SwitchClauseList_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2645;});
! _temp2644;}); break; case 248: _LL2643: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2647=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2647[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2648; _temp2648.tag= Cyc_SwitchClauseList_tok; _temp2648.f1= 0; _temp2648;});
! _temp2647;}); break; case 249: _LL2646: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2650=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2650[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2651; _temp2651.tag= Cyc_SwitchClauseList_tok; _temp2651.f1=({ struct Cyc_List_List*
! _temp2652=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2652->hd=( void*)({ struct Cyc_Absyn_Switch_clause* _temp2653=( struct Cyc_Absyn_Switch_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause)); _temp2653->pattern= Cyc_Absyn_new_pat((
  void*) Cyc_Absyn_Wild_p, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));
! _temp2653->pat_vars= 0; _temp2653->where_clause= 0; _temp2653->body= Cyc_yyget_Stmt_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2653->loc=
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line); _temp2653;}); _temp2652->tl= 0; _temp2652;});
! _temp2651;}); _temp2650;}); break; case 250: _LL2649: yyval=( void*)({ struct
! Cyc_SwitchClauseList_tok_struct* _temp2655=( struct Cyc_SwitchClauseList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_SwitchClauseList_tok_struct)); _temp2655[ 0]=({
! struct Cyc_SwitchClauseList_tok_struct _temp2656; _temp2656.tag= Cyc_SwitchClauseList_tok;
! _temp2656.f1=({ struct Cyc_List_List* _temp2657=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2657->hd=( void*)({ struct Cyc_Absyn_Switch_clause*
! _temp2658=( struct Cyc_Absyn_Switch_clause*) _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause));
! _temp2658->pattern= Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2658->pat_vars= 0; _temp2658->where_clause= 0;
! _temp2658->body= Cyc_Absyn_fallthru_stmt( 0, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2658->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2658;});
! _temp2657->tl= Cyc_yyget_SwitchClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2657;}); _temp2656;});
! _temp2655;}); break; case 251: _LL2654: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2660=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2660[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2661; _temp2661.tag= Cyc_SwitchClauseList_tok; _temp2661.f1=({ struct Cyc_List_List*
! _temp2662=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2662->hd=( void*)({ struct Cyc_Absyn_Switch_clause* _temp2663=( struct Cyc_Absyn_Switch_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause)); _temp2663->pattern= Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2663->pat_vars=
! 0; _temp2663->where_clause= 0; _temp2663->body= Cyc_yyget_Stmt_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2663->loc=
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line); _temp2663;}); _temp2662->tl= Cyc_yyget_SwitchClauseList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2662;});
! _temp2661;}); _temp2660;}); break; case 252: _LL2659: yyval=( void*)({ struct
! Cyc_SwitchClauseList_tok_struct* _temp2665=( struct Cyc_SwitchClauseList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_SwitchClauseList_tok_struct)); _temp2665[ 0]=({
! struct Cyc_SwitchClauseList_tok_struct _temp2666; _temp2666.tag= Cyc_SwitchClauseList_tok;
! _temp2666.f1=({ struct Cyc_List_List* _temp2667=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2667->hd=( void*)({ struct Cyc_Absyn_Switch_clause*
! _temp2668=( struct Cyc_Absyn_Switch_clause*) _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause));
! _temp2668->pattern= Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp2668->pat_vars= 0; _temp2668->where_clause=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2668->body= Cyc_Absyn_fallthru_stmt( 0, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2668->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2668;});
! _temp2667->tl= Cyc_yyget_SwitchClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2667;}); _temp2666;});
! _temp2665;}); break; case 253: _LL2664: yyval=( void*)({ struct Cyc_SwitchClauseList_tok_struct*
! _temp2670=( struct Cyc_SwitchClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchClauseList_tok_struct)); _temp2670[ 0]=({ struct Cyc_SwitchClauseList_tok_struct
! _temp2671; _temp2671.tag= Cyc_SwitchClauseList_tok; _temp2671.f1=({ struct Cyc_List_List*
! _temp2672=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2672->hd=( void*)({ struct Cyc_Absyn_Switch_clause* _temp2673=( struct Cyc_Absyn_Switch_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause)); _temp2673->pattern= Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]); _temp2673->pat_vars=
! 0; _temp2673->where_clause=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]); _temp2673->body=
  Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
! 1)]); _temp2673->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2673;});
! _temp2672->tl= Cyc_yyget_SwitchClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2672;}); _temp2671;});
! _temp2670;}); break; case 254: _LL2669: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct*
! _temp2675=( struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchCClauseList_tok_struct)); _temp2675[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct
! _temp2676; _temp2676.tag= Cyc_SwitchCClauseList_tok; _temp2676.f1= 0; _temp2676;});
! _temp2675;}); break; case 255: _LL2674: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct*
! _temp2678=( struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchCClauseList_tok_struct)); _temp2678[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct
! _temp2679; _temp2679.tag= Cyc_SwitchCClauseList_tok; _temp2679.f1=({ struct Cyc_List_List*
! _temp2680=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2680->hd=( void*)({ struct Cyc_Absyn_SwitchC_clause* _temp2681=( struct Cyc_Absyn_SwitchC_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_clause)); _temp2681->cnst_exp= 0;
! _temp2681->body= Cyc_Absyn_seq_stmt( Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Absyn_break_stmt( 0),
! 0); _temp2681->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2681;});
! _temp2680->tl= 0; _temp2680;}); _temp2679;}); _temp2678;}); break; case 256:
! _LL2677: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct* _temp2683=(
  struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct Cyc_SwitchCClauseList_tok_struct));
! _temp2683[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct _temp2684; _temp2684.tag=
! Cyc_SwitchCClauseList_tok; _temp2684.f1=({ struct Cyc_List_List* _temp2685=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2685->hd=(
! void*)({ struct Cyc_Absyn_SwitchC_clause* _temp2686=( struct Cyc_Absyn_SwitchC_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_clause)); _temp2686->cnst_exp=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  2)]); _temp2686->body= Cyc_Absyn_fallthru_stmt( 0, 0);
! _temp2686->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2686;});
! _temp2685->tl= Cyc_yyget_SwitchCClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2685;}); _temp2684;});
! _temp2683;}); break; case 257: _LL2682: yyval=( void*)({ struct Cyc_SwitchCClauseList_tok_struct*
! _temp2688=( struct Cyc_SwitchCClauseList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_SwitchCClauseList_tok_struct)); _temp2688[ 0]=({ struct Cyc_SwitchCClauseList_tok_struct
! _temp2689; _temp2689.tag= Cyc_SwitchCClauseList_tok; _temp2689.f1=({ struct Cyc_List_List*
! _temp2690=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2690->hd=( void*)({ struct Cyc_Absyn_SwitchC_clause* _temp2691=( struct Cyc_Absyn_SwitchC_clause*)
! _cycalloc( sizeof( struct Cyc_Absyn_SwitchC_clause)); _temp2691->cnst_exp=(
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  3)]); _temp2691->body= Cyc_Absyn_seq_stmt( Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Absyn_fallthru_stmt(
! 0, 0), 0); _temp2691->loc= Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line); _temp2691;});
! _temp2690->tl= Cyc_yyget_SwitchCClauseList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2690;}); _temp2689;});
! _temp2688;}); break; case 258: _LL2687: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2693=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2693[ 0]=({ struct Cyc_Stmt_tok_struct _temp2694; _temp2694.tag= Cyc_Stmt_tok;
! _temp2694.f1= Cyc_Absyn_while_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2694;}); _temp2693;}); break; case 259: _LL2692: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2696=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2696[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2697; _temp2697.tag= Cyc_Stmt_tok; _temp2697.f1= Cyc_Absyn_do_stmt( Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2697;}); _temp2696;}); break; case 260: _LL2695: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2699=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2699[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2700; _temp2700.tag= Cyc_Stmt_tok; _temp2700.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_Absyn_true_exp( 0), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2700;}); _temp2699;}); break; case 261: _LL2698: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2702=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2702[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2703; _temp2703.tag= Cyc_Stmt_tok; _temp2703.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_Absyn_true_exp( 0), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2703;}); _temp2702;}); break; case 262: _LL2701: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2705=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2705[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2706; _temp2706.tag= Cyc_Stmt_tok; _temp2706.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  3)]), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2706;}); _temp2705;}); break; case 263: _LL2704: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2708=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2708[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2709; _temp2709.tag= Cyc_Stmt_tok; _temp2709.f1= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  4)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2709;}); _temp2708;}); break; case 264: _LL2707: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2711=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2711[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2712; _temp2712.tag= Cyc_Stmt_tok; _temp2712.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_Absyn_true_exp(
  0), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2712;}); _temp2711;}); break; case 265: _LL2710: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2714=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2714[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2715; _temp2715.tag= Cyc_Stmt_tok; _temp2715.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_Absyn_true_exp(
  0), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2715;});
! _temp2714;}); break; case 266: _LL2713: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2717=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2717[ 0]=({ struct Cyc_Stmt_tok_struct _temp2718; _temp2718.tag= Cyc_Stmt_tok;
! _temp2718.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), Cyc_Absyn_false_exp(
  0), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2718;});
! _temp2717;}); break; case 267: _LL2716: yyval=( void*)({ struct Cyc_Stmt_tok_struct*
! _temp2720=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof( struct Cyc_Stmt_tok_struct));
! _temp2720[ 0]=({ struct Cyc_Stmt_tok_struct _temp2721; _temp2721.tag= Cyc_Stmt_tok;
! _temp2721.f1= Cyc_Absyn_for_stmt( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  8)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2721;}); _temp2720;}); break; case 268: _LL2719: { struct Cyc_List_List*
! _temp2723= Cyc_yyget_DeclList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); struct Cyc_Absyn_Stmt* _temp2724= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp(
  0), Cyc_Absyn_true_exp( 0), Cyc_Absyn_false_exp( 0), Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  5)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2725=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2725[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2726; _temp2726.tag= Cyc_Stmt_tok; _temp2726.f1= Cyc_Parse_flatten_declarations(
! _temp2723, _temp2724); _temp2726;}); _temp2725;}); break;} case 269: _LL2722: {
! struct Cyc_List_List* _temp2728= Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); struct Cyc_Absyn_Stmt*
! _temp2729= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp( 0), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), Cyc_Absyn_false_exp(
  0), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2730=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2730[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2731; _temp2731.tag= Cyc_Stmt_tok; _temp2731.f1= Cyc_Parse_flatten_declarations(
! _temp2728, _temp2729); _temp2731;}); _temp2730;}); break;} case 270: _LL2727: {
! struct Cyc_List_List* _temp2733= Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); struct Cyc_Absyn_Stmt*
! _temp2734= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp( 0), Cyc_Absyn_true_exp( 0),
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]), Cyc_yyget_Stmt_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2735=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2735[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2736; _temp2736.tag= Cyc_Stmt_tok; _temp2736.f1= Cyc_Parse_flatten_declarations(
! _temp2733, _temp2734); _temp2736;}); _temp2735;}); break;} case 271: _LL2732: {
! struct Cyc_List_List* _temp2738= Cyc_yyget_DeclList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  5)]); struct Cyc_Absyn_Stmt*
! _temp2739= Cyc_Absyn_for_stmt( Cyc_Absyn_false_exp( 0), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Stmt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  7)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); yyval=(
! void*)({ struct Cyc_Stmt_tok_struct* _temp2740=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2740[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2741; _temp2741.tag= Cyc_Stmt_tok; _temp2741.f1= Cyc_Parse_flatten_declarations(
! _temp2738, _temp2739); _temp2741;}); _temp2740;}); break;} case 272: _LL2737:
! yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2743=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2743[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2744; _temp2744.tag= Cyc_Stmt_tok; _temp2744.f1= Cyc_Absyn_goto_stmt(({
! struct _tagged_arr* _temp2745=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2745[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2745;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2744;}); _temp2743;}); break; case 273: _LL2742: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2747=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2747[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2748; _temp2748.tag= Cyc_Stmt_tok; _temp2748.f1= Cyc_Absyn_continue_stmt(
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line)); _temp2748;}); _temp2747;}); break; case 274:
! _LL2746: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2750=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2750[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2751; _temp2751.tag= Cyc_Stmt_tok; _temp2751.f1= Cyc_Absyn_break_stmt( Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2751;}); _temp2750;}); break; case 275: _LL2749: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2753=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2753[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2754; _temp2754.tag= Cyc_Stmt_tok; _temp2754.f1= Cyc_Absyn_return_stmt( 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line)); _temp2754;}); _temp2753;}); break; case 276:
! _LL2752: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2756=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2756[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2757; _temp2757.tag= Cyc_Stmt_tok; _temp2757.f1= Cyc_Absyn_return_stmt((
  struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).last_line));
! _temp2757;}); _temp2756;}); break; case 277: _LL2755: yyval=( void*)({ struct
! Cyc_Stmt_tok_struct* _temp2759=( struct Cyc_Stmt_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Stmt_tok_struct)); _temp2759[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2760; _temp2760.tag= Cyc_Stmt_tok; _temp2760.f1= Cyc_Absyn_fallthru_stmt( 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  1)]).last_line)); _temp2760;}); _temp2759;}); break; case 278:
! _LL2758: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2762=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2762[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2763; _temp2763.tag= Cyc_Stmt_tok; _temp2763.f1= Cyc_Absyn_fallthru_stmt( 0,
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  3)]).last_line)); _temp2763;}); _temp2762;}); break; case 279:
! _LL2761: yyval=( void*)({ struct Cyc_Stmt_tok_struct* _temp2765=( struct Cyc_Stmt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Stmt_tok_struct)); _temp2765[ 0]=({ struct Cyc_Stmt_tok_struct
! _temp2766; _temp2766.tag= Cyc_Stmt_tok; _temp2766.f1= Cyc_Absyn_fallthru_stmt(
  Cyc_yyget_ExpList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).last_line));
! _temp2766;}); _temp2765;}); break; case 280: _LL2764: yyval=( void*)({ struct
! Cyc_Pattern_tok_struct* _temp2768=( struct Cyc_Pattern_tok_struct*) _cycalloc(
! sizeof( struct Cyc_Pattern_tok_struct)); _temp2768[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2769; _temp2769.tag= Cyc_Pattern_tok; _temp2769.f1= Cyc_Absyn_new_pat((
  void*) Cyc_Absyn_Wild_p, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2769;});
! _temp2768;}); break; case 281: _LL2767: yyval= yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 282:
! _LL2770: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2772=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2772[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2773; _temp2773.tag= Cyc_Pattern_tok; _temp2773.f1= Cyc_Absyn_new_pat((
! void*)({ struct Cyc_Absyn_Int_p_struct* _temp2774=( struct Cyc_Absyn_Int_p_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Int_p_struct)); _temp2774[ 0]=({ struct Cyc_Absyn_Int_p_struct
! _temp2775; _temp2775.tag= Cyc_Absyn_Int_p; _temp2775.f1=( void*)(* Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1; _temp2775.f2=(*
  Cyc_yyget_Int_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2;
! _temp2775;}); _temp2774;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2773;});
! _temp2772;}); break; case 283: _LL2771: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2777=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2777[ 0]=({ struct Cyc_Pattern_tok_struct _temp2778; _temp2778.tag= Cyc_Pattern_tok;
! _temp2778.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Int_p_struct*
! _temp2779=( struct Cyc_Absyn_Int_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Int_p_struct));
! _temp2779[ 0]=({ struct Cyc_Absyn_Int_p_struct _temp2780; _temp2780.tag= Cyc_Absyn_Int_p;
! _temp2780.f1=( void*)(( void*) Cyc_Absyn_Signed); _temp2780.f2= -(* Cyc_yyget_Int_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2; _temp2780;});
! _temp2779;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2778;}); _temp2777;}); break; case 284:
! _LL2776: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2782=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2782[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2783; _temp2783.tag= Cyc_Pattern_tok; _temp2783.f1= Cyc_Absyn_new_pat((
! void*)({ struct Cyc_Absyn_Float_p_struct* _temp2784=( struct Cyc_Absyn_Float_p_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Float_p_struct)); _temp2784[ 0]=({ struct
! Cyc_Absyn_Float_p_struct _temp2785; _temp2785.tag= Cyc_Absyn_Float_p; _temp2785.f1=
  Cyc_yyget_String_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]);
! _temp2785;}); _temp2784;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2783;});
! _temp2782;}); break; case 285: _LL2781: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2787=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2787[ 0]=({ struct Cyc_Pattern_tok_struct _temp2788; _temp2788.tag= Cyc_Pattern_tok;
! _temp2788.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Char_p_struct*
! _temp2789=( struct Cyc_Absyn_Char_p_struct*) _cycalloc_atomic( sizeof( struct
! Cyc_Absyn_Char_p_struct)); _temp2789[ 0]=({ struct Cyc_Absyn_Char_p_struct
! _temp2790; _temp2790.tag= Cyc_Absyn_Char_p; _temp2790.f1= Cyc_yyget_Char_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2790;});
! _temp2789;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp2788;}); _temp2787;}); break; case 286:
! _LL2786: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2792=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2792[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2793; _temp2793.tag= Cyc_Pattern_tok; _temp2793.f1= Cyc_Absyn_new_pat((
  void*) Cyc_Absyn_Null_p, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2793;});
! _temp2792;}); break; case 287: _LL2791: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2795=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2795[ 0]=({ struct Cyc_Pattern_tok_struct _temp2796; _temp2796.tag= Cyc_Pattern_tok;
! _temp2796.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_UnknownId_p_struct*
! _temp2797=( struct Cyc_Absyn_UnknownId_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_p_struct));
! _temp2797[ 0]=({ struct Cyc_Absyn_UnknownId_p_struct _temp2798; _temp2798.tag=
! Cyc_Absyn_UnknownId_p; _temp2798.f1= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2798;}); _temp2797;}),
  Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
  yylsp_offset)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp2796;}); _temp2795;}); break; case 288:
! _LL2794: { struct Cyc_List_List* _temp2800=(( struct Cyc_List_List*(*)( struct
  Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line),
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)])); yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2801=(
  struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2801[ 0]=({ struct Cyc_Pattern_tok_struct _temp2802; _temp2802.tag= Cyc_Pattern_tok;
! _temp2802.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_UnknownCall_p_struct*
! _temp2803=( struct Cyc_Absyn_UnknownCall_p_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownCall_p_struct)); _temp2803[ 0]=({ struct Cyc_Absyn_UnknownCall_p_struct
! _temp2804; _temp2804.tag= Cyc_Absyn_UnknownCall_p; _temp2804.f1= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp2804.f2=
! _temp2800; _temp2804.f3= Cyc_yyget_PatternList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2804;});
! _temp2803;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2802;}); _temp2801;}); break;} case
! 289: _LL2799: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2806=( struct
  Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2806[ 0]=({ struct Cyc_Pattern_tok_struct _temp2807; _temp2807.tag= Cyc_Pattern_tok;
! _temp2807.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Tuple_p_struct*
! _temp2808=( struct Cyc_Absyn_Tuple_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Tuple_p_struct));
! _temp2808[ 0]=({ struct Cyc_Absyn_Tuple_p_struct _temp2809; _temp2809.tag= Cyc_Absyn_Tuple_p;
! _temp2809.f1= Cyc_yyget_PatternList_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  1)]); _temp2809;}); _temp2808;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2807;}); _temp2806;}); break; case 290: _LL2805: { struct Cyc_List_List*
! _temp2811=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*,
  void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
  Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line), Cyc_yyget_TypeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); yyval=(
! void*)({ struct Cyc_Pattern_tok_struct* _temp2812=( struct Cyc_Pattern_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Pattern_tok_struct)); _temp2812[ 0]=({ struct Cyc_Pattern_tok_struct
! _temp2813; _temp2813.tag= Cyc_Pattern_tok; _temp2813.f1= Cyc_Absyn_new_pat((
! void*)({ struct Cyc_Absyn_UnknownFields_p_struct* _temp2814=( struct Cyc_Absyn_UnknownFields_p_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownFields_p_struct)); _temp2814[ 0]=({
! struct Cyc_Absyn_UnknownFields_p_struct _temp2815; _temp2815.tag= Cyc_Absyn_UnknownFields_p;
! _temp2815.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp2815.f2= _temp2811; _temp2815.f3= 0; _temp2815;});
! _temp2814;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2813;}); _temp2812;}); break;} case
! 291: _LL2810: { struct Cyc_List_List* _temp2817=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Tvar*(* f)( struct Cyc_Position_Segment*, void*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Parse_typ2tvar, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).last_line),
  Cyc_yyget_TypeList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)])); yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2818=(
  struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2818[ 0]=({ struct Cyc_Pattern_tok_struct _temp2819; _temp2819.tag= Cyc_Pattern_tok;
! _temp2819.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_UnknownFields_p_struct*
! _temp2820=( struct Cyc_Absyn_UnknownFields_p_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownFields_p_struct)); _temp2820[ 0]=({ struct Cyc_Absyn_UnknownFields_p_struct
! _temp2821; _temp2821.tag= Cyc_Absyn_UnknownFields_p; _temp2821.f1= Cyc_yyget_QualId_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp2821.f2=
! _temp2817; _temp2821.f3= Cyc_yyget_FieldPatternList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2821;});
! _temp2820;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp2819;}); _temp2818;}); break;} case
! 292: _LL2816: yyval=( void*)({ struct Cyc_Pattern_tok_struct* _temp2823=( struct
  Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2823[ 0]=({ struct Cyc_Pattern_tok_struct _temp2824; _temp2824.tag= Cyc_Pattern_tok;
! _temp2824.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Pointer_p_struct*
! _temp2825=( struct Cyc_Absyn_Pointer_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Pointer_p_struct));
! _temp2825[ 0]=({ struct Cyc_Absyn_Pointer_p_struct _temp2826; _temp2826.tag= Cyc_Absyn_Pointer_p;
! _temp2826.f1= Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2826;}); _temp2825;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2824;});
! _temp2823;}); break; case 293: _LL2822: yyval=( void*)({ struct Cyc_Pattern_tok_struct*
! _temp2828=( struct Cyc_Pattern_tok_struct*) _cycalloc( sizeof( struct Cyc_Pattern_tok_struct));
! _temp2828[ 0]=({ struct Cyc_Pattern_tok_struct _temp2829; _temp2829.tag= Cyc_Pattern_tok;
! _temp2829.f1= Cyc_Absyn_new_pat(( void*)({ struct Cyc_Absyn_Reference_p_struct*
! _temp2830=( struct Cyc_Absyn_Reference_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Reference_p_struct));
! _temp2830[ 0]=({ struct Cyc_Absyn_Reference_p_struct _temp2831; _temp2831.tag=
! Cyc_Absyn_Reference_p; _temp2831.f1= Cyc_Absyn_new_vardecl(({ struct _tuple1*
! _temp2832=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp2832->f1=(
! void*) Cyc_Absyn_Loc_n; _temp2832->f2=({ struct _tagged_arr* _temp2833=( struct
! _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr)); _temp2833[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2833;});
! _temp2832;}),( void*) Cyc_Absyn_VoidType, 0); _temp2831;}); _temp2830;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2829;}); _temp2828;}); break; case 294: _LL2827: yyval=( void*)({ struct
! Cyc_PatternList_tok_struct* _temp2835=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2835[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2836; _temp2836.tag= Cyc_PatternList_tok;
! _temp2836.f1= 0; _temp2836;}); _temp2835;}); break; case 295: _LL2834: yyval=(
! void*)({ struct Cyc_PatternList_tok_struct* _temp2838=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2838[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2839; _temp2839.tag= Cyc_PatternList_tok;
! _temp2839.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  Cyc_yyget_PatternList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)])); _temp2839;}); _temp2838;}); break; case 296: _LL2837: yyval=(
! void*)({ struct Cyc_PatternList_tok_struct* _temp2841=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2841[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2842; _temp2842.tag= Cyc_PatternList_tok;
! _temp2842.f1=({ struct Cyc_List_List* _temp2843=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2843->hd=( void*) Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2843->tl= 0;
! _temp2843;}); _temp2842;}); _temp2841;}); break; case 297: _LL2840: yyval=( void*)({
! struct Cyc_PatternList_tok_struct* _temp2845=( struct Cyc_PatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_PatternList_tok_struct)); _temp2845[ 0]=({ struct
! Cyc_PatternList_tok_struct _temp2846; _temp2846.tag= Cyc_PatternList_tok;
! _temp2846.f1=({ struct Cyc_List_List* _temp2847=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2847->hd=( void*) Cyc_yyget_Pattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2847->tl=
  Cyc_yyget_PatternList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2847;}); _temp2846;}); _temp2845;}); break; case 298:
! _LL2844: yyval=( void*)({ struct Cyc_FieldPattern_tok_struct* _temp2849=( struct
  Cyc_FieldPattern_tok_struct*) _cycalloc( sizeof( struct Cyc_FieldPattern_tok_struct));
! _temp2849[ 0]=({ struct Cyc_FieldPattern_tok_struct _temp2850; _temp2850.tag=
! Cyc_FieldPattern_tok; _temp2850.f1=({ struct _tuple13* _temp2851=( struct
! _tuple13*) _cycalloc( sizeof( struct _tuple13)); _temp2851->f1= 0; _temp2851->f2=
  Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2851;}); _temp2850;}); _temp2849;}); break; case 299:
! _LL2848: yyval=( void*)({ struct Cyc_FieldPattern_tok_struct* _temp2853=( struct
  Cyc_FieldPattern_tok_struct*) _cycalloc( sizeof( struct Cyc_FieldPattern_tok_struct));
! _temp2853[ 0]=({ struct Cyc_FieldPattern_tok_struct _temp2854; _temp2854.tag=
! Cyc_FieldPattern_tok; _temp2854.f1=({ struct _tuple13* _temp2855=( struct
! _tuple13*) _cycalloc( sizeof( struct _tuple13)); _temp2855->f1= Cyc_yyget_DesignatorList_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp2855->f2=
  Cyc_yyget_Pattern_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp2855;}); _temp2854;}); _temp2853;}); break; case 300:
! _LL2852: yyval=( void*)({ struct Cyc_FieldPatternList_tok_struct* _temp2857=(
  struct Cyc_FieldPatternList_tok_struct*) _cycalloc( sizeof( struct Cyc_FieldPatternList_tok_struct));
! _temp2857[ 0]=({ struct Cyc_FieldPatternList_tok_struct _temp2858; _temp2858.tag=
! Cyc_FieldPatternList_tok; _temp2858.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( Cyc_yyget_FieldPatternList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp2858;});
! _temp2857;}); break; case 301: _LL2856: yyval=( void*)({ struct Cyc_FieldPatternList_tok_struct*
! _temp2860=( struct Cyc_FieldPatternList_tok_struct*) _cycalloc( sizeof( struct
! Cyc_FieldPatternList_tok_struct)); _temp2860[ 0]=({ struct Cyc_FieldPatternList_tok_struct
! _temp2861; _temp2861.tag= Cyc_FieldPatternList_tok; _temp2861.f1=({ struct Cyc_List_List*
! _temp2862=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2862->hd=( void*) Cyc_yyget_FieldPattern_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2862->tl= 0;
! _temp2862;}); _temp2861;}); _temp2860;}); break; case 302: _LL2859: yyval=( void*)({
! struct Cyc_FieldPatternList_tok_struct* _temp2864=( struct Cyc_FieldPatternList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_FieldPatternList_tok_struct)); _temp2864[ 0]=({
! struct Cyc_FieldPatternList_tok_struct _temp2865; _temp2865.tag= Cyc_FieldPatternList_tok;
! _temp2865.f1=({ struct Cyc_List_List* _temp2866=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2866->hd=( void*) Cyc_yyget_FieldPattern_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp2866->tl=
  Cyc_yyget_FieldPatternList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  2)]); _temp2866;}); _temp2865;}); _temp2864;}); break; case 303:
! _LL2863: yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)];
! break; case 304: _LL2867: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2869=(
  struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2869[ 0]=({ struct Cyc_Exp_tok_struct _temp2870; _temp2870.tag= Cyc_Exp_tok;
! _temp2870.f1= Cyc_Absyn_seq_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2870;}); _temp2869;}); break; case 305: _LL2868: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 306: _LL2871:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2873=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2873[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2874; _temp2874.tag= Cyc_Exp_tok; _temp2874.f1= Cyc_Absyn_assignop_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Primopopt_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2874;}); _temp2873;}); break; case 307: _LL2872: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2876=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2876[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2877; _temp2877.tag= Cyc_Primopopt_tok; _temp2877.f1=
! 0; _temp2877;}); _temp2876;}); break; case 308: _LL2875: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2879=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2879[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2880; _temp2880.tag= Cyc_Primopopt_tok; _temp2880.f1=({
! struct Cyc_Core_Opt* _temp2881=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2881->v=( void*)(( void*) Cyc_Absyn_Times); _temp2881;});
! _temp2880;}); _temp2879;}); break; case 309: _LL2878: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2883=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2883[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2884; _temp2884.tag= Cyc_Primopopt_tok; _temp2884.f1=({
! struct Cyc_Core_Opt* _temp2885=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2885->v=( void*)(( void*) Cyc_Absyn_Div); _temp2885;});
! _temp2884;}); _temp2883;}); break; case 310: _LL2882: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2887=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2887[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2888; _temp2888.tag= Cyc_Primopopt_tok; _temp2888.f1=({
! struct Cyc_Core_Opt* _temp2889=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2889->v=( void*)(( void*) Cyc_Absyn_Mod); _temp2889;});
! _temp2888;}); _temp2887;}); break; case 311: _LL2886: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2891=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2891[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2892; _temp2892.tag= Cyc_Primopopt_tok; _temp2892.f1=({
! struct Cyc_Core_Opt* _temp2893=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2893->v=( void*)(( void*) Cyc_Absyn_Plus); _temp2893;});
! _temp2892;}); _temp2891;}); break; case 312: _LL2890: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2895=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2895[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2896; _temp2896.tag= Cyc_Primopopt_tok; _temp2896.f1=({
! struct Cyc_Core_Opt* _temp2897=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2897->v=( void*)(( void*) Cyc_Absyn_Minus); _temp2897;});
! _temp2896;}); _temp2895;}); break; case 313: _LL2894: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2899=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2899[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2900; _temp2900.tag= Cyc_Primopopt_tok; _temp2900.f1=({
! struct Cyc_Core_Opt* _temp2901=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2901->v=( void*)(( void*) Cyc_Absyn_Bitlshift); _temp2901;});
! _temp2900;}); _temp2899;}); break; case 314: _LL2898: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2903=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2903[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2904; _temp2904.tag= Cyc_Primopopt_tok; _temp2904.f1=({
! struct Cyc_Core_Opt* _temp2905=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2905->v=( void*)(( void*) Cyc_Absyn_Bitlrshift); _temp2905;});
! _temp2904;}); _temp2903;}); break; case 315: _LL2902: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2907=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2907[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2908; _temp2908.tag= Cyc_Primopopt_tok; _temp2908.f1=({
! struct Cyc_Core_Opt* _temp2909=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2909->v=( void*)(( void*) Cyc_Absyn_Bitand); _temp2909;});
! _temp2908;}); _temp2907;}); break; case 316: _LL2906: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2911=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2911[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2912; _temp2912.tag= Cyc_Primopopt_tok; _temp2912.f1=({
! struct Cyc_Core_Opt* _temp2913=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2913->v=( void*)(( void*) Cyc_Absyn_Bitxor); _temp2913;});
! _temp2912;}); _temp2911;}); break; case 317: _LL2910: yyval=( void*)({ struct
! Cyc_Primopopt_tok_struct* _temp2915=( struct Cyc_Primopopt_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Primopopt_tok_struct)); _temp2915[ 0]=({ struct
! Cyc_Primopopt_tok_struct _temp2916; _temp2916.tag= Cyc_Primopopt_tok; _temp2916.f1=({
! struct Cyc_Core_Opt* _temp2917=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2917->v=( void*)(( void*) Cyc_Absyn_Bitor); _temp2917;});
! _temp2916;}); _temp2915;}); break; case 318: _LL2914: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 319: _LL2918:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2920=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2920[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2921; _temp2921.tag= Cyc_Exp_tok; _temp2921.f1= Cyc_Absyn_conditional_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  4)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2921;});
! _temp2920;}); break; case 320: _LL2919: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2923=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2923[ 0]=({ struct Cyc_Exp_tok_struct _temp2924; _temp2924.tag= Cyc_Exp_tok;
! _temp2924.f1= Cyc_Absyn_throw_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2924;}); _temp2923;}); break; case 321: _LL2922: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2926=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2926[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2927; _temp2927.tag= Cyc_Exp_tok; _temp2927.f1= Cyc_Absyn_New_exp( 0, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset +  1)]).last_line));
! _temp2927;}); _temp2926;}); break; case 322: _LL2925: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2929=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2929[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2930; _temp2930.tag= Cyc_Exp_tok; _temp2930.f1= Cyc_Absyn_New_exp( 0, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset +  1)]).last_line));
! _temp2930;}); _temp2929;}); break; case 323: _LL2928: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2932=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2932[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2933; _temp2933.tag= Cyc_Exp_tok; _temp2933.f1= Cyc_Absyn_New_exp(( struct
  Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2933;});
! _temp2932;}); break; case 324: _LL2931: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2935=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2935[ 0]=({ struct Cyc_Exp_tok_struct _temp2936; _temp2936.tag= Cyc_Exp_tok;
! _temp2936.f1= Cyc_Absyn_New_exp(( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2936;}); _temp2935;}); break; case 325: _LL2934: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 326: _LL2937:
  yyval= yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case
! 327: _LL2938: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2940=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2940[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2941; _temp2941.tag= Cyc_Exp_tok; _temp2941.f1= Cyc_Absyn_or_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2941;}); _temp2940;}); break; case 328: _LL2939: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 329: _LL2942:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2944=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2944[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2945; _temp2945.tag= Cyc_Exp_tok; _temp2945.f1= Cyc_Absyn_and_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2945;}); _temp2944;}); break; case 330: _LL2943: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 331: _LL2946:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2948=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2948[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2949; _temp2949.tag= Cyc_Exp_tok; _temp2949.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitor, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2949;});
! _temp2948;}); break; case 332: _LL2947: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 333: _LL2950:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2952=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2952[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2953; _temp2953.tag= Cyc_Exp_tok; _temp2953.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitxor, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2953;});
! _temp2952;}); break; case 334: _LL2951: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 335: _LL2954:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2956=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2956[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2957; _temp2957.tag= Cyc_Exp_tok; _temp2957.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitand, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2957;});
! _temp2956;}); break; case 336: _LL2955: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 337: _LL2958:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2960=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2960[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2961; _temp2961.tag= Cyc_Exp_tok; _temp2961.f1= Cyc_Absyn_eq_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2961;}); _temp2960;}); break; case 338: _LL2959: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2963=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2963[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2964; _temp2964.tag= Cyc_Exp_tok; _temp2964.f1= Cyc_Absyn_neq_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2964;}); _temp2963;}); break; case 339: _LL2962: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 340: _LL2965:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2967=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2967[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2968; _temp2968.tag= Cyc_Exp_tok; _temp2968.f1= Cyc_Absyn_lt_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2968;}); _temp2967;}); break; case 341: _LL2966: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2970=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2970[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2971; _temp2971.tag= Cyc_Exp_tok; _temp2971.f1= Cyc_Absyn_gt_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2971;}); _temp2970;}); break; case 342: _LL2969: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2973=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2973[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2974; _temp2974.tag= Cyc_Exp_tok; _temp2974.f1= Cyc_Absyn_lte_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2974;}); _temp2973;}); break; case 343: _LL2972: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2976=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2976[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2977; _temp2977.tag= Cyc_Exp_tok; _temp2977.f1= Cyc_Absyn_gte_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2977;}); _temp2976;}); break; case 344: _LL2975: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 345: _LL2978:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2980=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2980[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2981; _temp2981.tag= Cyc_Exp_tok; _temp2981.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitlshift, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2981;}); _temp2980;}); break; case 346: _LL2979: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp2983=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp2983[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2984; _temp2984.tag= Cyc_Exp_tok; _temp2984.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Bitlrshift, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2984;}); _temp2983;}); break; case 347: _LL2982: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 348: _LL2985:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2987=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2987[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2988; _temp2988.tag= Cyc_Exp_tok; _temp2988.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Plus, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2988;});
! _temp2987;}); break; case 349: _LL2986: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2990=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2990[ 0]=({ struct Cyc_Exp_tok_struct _temp2991; _temp2991.tag= Cyc_Exp_tok;
! _temp2991.f1= Cyc_Absyn_prim2_exp(( void*) Cyc_Absyn_Minus, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2991;}); _temp2990;}); break; case 350: _LL2989: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 351: _LL2992:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp2994=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp2994[ 0]=({ struct Cyc_Exp_tok_struct
! _temp2995; _temp2995.tag= Cyc_Exp_tok; _temp2995.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Times, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp2995;});
! _temp2994;}); break; case 352: _LL2993: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp2997=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp2997[ 0]=({ struct Cyc_Exp_tok_struct _temp2998; _temp2998.tag= Cyc_Exp_tok;
! _temp2998.f1= Cyc_Absyn_prim2_exp(( void*) Cyc_Absyn_Div, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp2998;}); _temp2997;}); break; case 353: _LL2996: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3000=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3000[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3001; _temp3001.tag= Cyc_Exp_tok; _temp3001.f1= Cyc_Absyn_prim2_exp(( void*)
  Cyc_Absyn_Mod, Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  2)]), Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
  10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3001;});
! _temp3000;}); break; case 354: _LL2999: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 355: _LL3002:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3004=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3004[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3005; _temp3005.tag= Cyc_Exp_tok; _temp3005.f1= Cyc_Absyn_cast_exp((* Cyc_yyget_ParamDecl_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])).f3, Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3005;}); _temp3004;}); break; case 356: _LL3003: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 357: _LL3006:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3008=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3008[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3009; _temp3009.tag= Cyc_Exp_tok; _temp3009.f1= Cyc_Absyn_pre_inc_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3009;}); _temp3008;}); break; case 358: _LL3007: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3011=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3011[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3012; _temp3012.tag= Cyc_Exp_tok; _temp3012.f1= Cyc_Absyn_pre_dec_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3012;}); _temp3011;}); break; case 359: _LL3010: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3014=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3014[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3015; _temp3015.tag= Cyc_Exp_tok; _temp3015.f1= Cyc_Absyn_address_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3015;}); _temp3014;}); break; case 360: _LL3013: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3017=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3017[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3018; _temp3018.tag= Cyc_Exp_tok; _temp3018.f1= Cyc_Absyn_deref_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3018;}); _temp3017;}); break; case 361: _LL3016: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 362: _LL3019:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3021=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3021[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3022; _temp3022.tag= Cyc_Exp_tok; _temp3022.f1= Cyc_Absyn_prim1_exp( Cyc_yyget_Primop_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3022;}); _temp3021;}); break; case 363: _LL3020: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3024=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3024[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3025; _temp3025.tag= Cyc_Exp_tok; _temp3025.f1= Cyc_Absyn_sizeoftyp_exp((*
  Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)])).f3, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3025;});
! _temp3024;}); break; case 364: _LL3023: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3027=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3027[ 0]=({ struct Cyc_Exp_tok_struct _temp3028; _temp3028.tag= Cyc_Exp_tok;
! _temp3028.f1= Cyc_Absyn_sizeofexp_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3028;}); _temp3027;}); break; case 365: _LL3026: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3030=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3030[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3031; _temp3031.tag= Cyc_Exp_tok; _temp3031.f1= Cyc_Absyn_offsetof_exp((*
  Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)])).f3,({ struct _tagged_arr* _temp3032=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp3032[ 0]= Cyc_yyget_String_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp3032;}),
! Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull( 10000u,
! yylsp_offset)]).last_line)); _temp3031;}); _temp3030;}); break; case 366:
! _LL3029: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3034=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3034[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3035; _temp3035.tag= Cyc_Exp_tok; _temp3035.f1= Cyc_Absyn_gentyp_exp((* Cyc_yyget_ParamDecl_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])).f3, Cyc_Position_segment_of_abs((
! yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
! yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3035;}); _temp3034;}); break; case 367: _LL3033: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3037=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3037[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3038; _temp3038.tag= Cyc_Exp_tok; _temp3038.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Malloc_e_struct* _temp3039=( struct Cyc_Absyn_Malloc_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Malloc_e_struct)); _temp3039[ 0]=({ struct
! Cyc_Absyn_Malloc_e_struct _temp3040; _temp3040.tag= Cyc_Absyn_Malloc_e;
! _temp3040.f1= 0; _temp3040.f2=( void*) Cyc_Parse_speclist2typ((* Cyc_yyget_QualSpecList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));
! _temp3040;}); _temp3039;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  6)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3038;});
! _temp3037;}); break; case 368: _LL3036: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3042=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3042[ 0]=({ struct Cyc_Exp_tok_struct _temp3043; _temp3043.tag= Cyc_Exp_tok;
! _temp3043.f1= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Malloc_e_struct*
! _temp3044=( struct Cyc_Absyn_Malloc_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Malloc_e_struct));
! _temp3044[ 0]=({ struct Cyc_Absyn_Malloc_e_struct _temp3045; _temp3045.tag= Cyc_Absyn_Malloc_e;
! _temp3045.f1=( struct Cyc_Absyn_Exp*) Cyc_yyget_Exp_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  6)]); _temp3045.f2=(
  void*) Cyc_Parse_speclist2typ((* Cyc_yyget_QualSpecList_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).last_line));
! _temp3045;}); _temp3044;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  8)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3043;});
! _temp3042;}); break; case 369: _LL3041: yyval=( void*)({ struct Cyc_Primop_tok_struct*
! _temp3047=( struct Cyc_Primop_tok_struct*) _cycalloc( sizeof( struct Cyc_Primop_tok_struct));
! _temp3047[ 0]=({ struct Cyc_Primop_tok_struct _temp3048; _temp3048.tag= Cyc_Primop_tok;
! _temp3048.f1=( void*)(( void*) Cyc_Absyn_Bitnot); _temp3048;}); _temp3047;});
! break; case 370: _LL3046: yyval=( void*)({ struct Cyc_Primop_tok_struct*
! _temp3050=( struct Cyc_Primop_tok_struct*) _cycalloc( sizeof( struct Cyc_Primop_tok_struct));
! _temp3050[ 0]=({ struct Cyc_Primop_tok_struct _temp3051; _temp3051.tag= Cyc_Primop_tok;
! _temp3051.f1=( void*)(( void*) Cyc_Absyn_Not); _temp3051;}); _temp3050;});
! break; case 371: _LL3049: yyval=( void*)({ struct Cyc_Primop_tok_struct*
! _temp3053=( struct Cyc_Primop_tok_struct*) _cycalloc( sizeof( struct Cyc_Primop_tok_struct));
! _temp3053[ 0]=({ struct Cyc_Primop_tok_struct _temp3054; _temp3054.tag= Cyc_Primop_tok;
! _temp3054.f1=( void*)(( void*) Cyc_Absyn_Minus); _temp3054;}); _temp3053;});
! break; case 372: _LL3052: yyval= yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]; break; case 373: _LL3055: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3057=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3057[ 0]=({ struct Cyc_Exp_tok_struct _temp3058; _temp3058.tag= Cyc_Exp_tok;
! _temp3058.f1= Cyc_Absyn_subscript_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  3)]), Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3058;}); _temp3057;}); break; case 374: _LL3056: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3060=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3060[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3061; _temp3061.tag= Cyc_Exp_tok; _temp3061.f1= Cyc_Absyn_unknowncall_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]), 0, Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  2)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3061;}); _temp3060;}); break; case 375:
! _LL3059: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3063=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3063[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3064; _temp3064.tag= Cyc_Exp_tok; _temp3064.f1= Cyc_Absyn_unknowncall_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  3)]), Cyc_yyget_ExpList_tok( yyvs[ _check_known_subscript_notnull( 10000u,
  yyvsp_offset -  1)]), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3064;});
! _temp3063;}); break; case 376: _LL3062: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3066=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3066[ 0]=({ struct Cyc_Exp_tok_struct _temp3067; _temp3067.tag= Cyc_Exp_tok;
! _temp3067.f1= Cyc_Absyn_structmember_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]),({ struct
! _tagged_arr* _temp3068=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp3068[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3068;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3067;}); _temp3066;}); break; case 377: _LL3065: { struct _tuple1* q= Cyc_yyget_QualId_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if( Cyc_Absyn_is_qvar_qualified(
  q)){ Cyc_Parse_err( _tag_arr("struct field name is qualified", sizeof(
  unsigned char), 31u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Exp_tok_struct* _temp3070=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3070[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3071; _temp3071.tag= Cyc_Exp_tok; _temp3071.f1= Cyc_Absyn_structmember_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]),(* q).f2, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3071;});
! _temp3070;}); break;} case 378: _LL3069: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3073=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3073[ 0]=({ struct Cyc_Exp_tok_struct _temp3074; _temp3074.tag= Cyc_Exp_tok;
! _temp3074.f1= Cyc_Absyn_structarrow_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]),({ struct
! _tagged_arr* _temp3075=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp3075[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3075;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3074;}); _temp3073;}); break; case 379: _LL3072: { struct _tuple1* q= Cyc_yyget_QualId_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); if( Cyc_Absyn_is_qvar_qualified(
  q)){ Cyc_Parse_err( _tag_arr("struct field name is qualified", sizeof(
  unsigned char), 31u), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));} yyval=(
! void*)({ struct Cyc_Exp_tok_struct* _temp3077=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3077[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3078; _temp3078.tag= Cyc_Exp_tok; _temp3078.f1= Cyc_Absyn_structarrow_exp(
  Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset - 
  2)]),(* q).f2, Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  2)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3078;});
! _temp3077;}); break;} case 380: _LL3076: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3080=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3080[ 0]=({ struct Cyc_Exp_tok_struct _temp3081; _temp3081.tag= Cyc_Exp_tok;
! _temp3081.f1= Cyc_Absyn_post_inc_exp( Cyc_yyget_Exp_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3081;}); _temp3080;}); break; case 381: _LL3079: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3083=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3083[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3084; _temp3084.tag= Cyc_Exp_tok; _temp3084.f1= Cyc_Absyn_post_dec_exp( Cyc_yyget_Exp_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3084;}); _temp3083;}); break; case 382: _LL3082: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3086=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3086[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3087; _temp3087.tag= Cyc_Exp_tok; _temp3087.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_CompoundLit_e_struct* _temp3088=( struct Cyc_Absyn_CompoundLit_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_CompoundLit_e_struct)); _temp3088[ 0]=({
! struct Cyc_Absyn_CompoundLit_e_struct _temp3089; _temp3089.tag= Cyc_Absyn_CompoundLit_e;
! _temp3089.f1= Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  4)]); _temp3089.f2=(( struct Cyc_List_List*(*)( struct
  Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp3089;});
! _temp3088;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  5)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3087;}); _temp3086;}); break; case 383:
! _LL3085: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3091=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3091[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3092; _temp3092.tag= Cyc_Exp_tok; _temp3092.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_CompoundLit_e_struct* _temp3093=( struct Cyc_Absyn_CompoundLit_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_CompoundLit_e_struct)); _temp3093[ 0]=({
! struct Cyc_Absyn_CompoundLit_e_struct _temp3094; _temp3094.tag= Cyc_Absyn_CompoundLit_e;
! _temp3094.f1= Cyc_yyget_ParamDecl_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset -  5)]); _temp3094.f2=(( struct Cyc_List_List*(*)( struct
  Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)])); _temp3094;});
! _temp3093;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  6)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3092;}); _temp3091;}); break; case 384:
! _LL3090: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3096=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3096[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3097; _temp3097.tag= Cyc_Exp_tok; _temp3097.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Fill_e_struct* _temp3098=( struct Cyc_Absyn_Fill_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Fill_e_struct)); _temp3098[ 0]=({ struct Cyc_Absyn_Fill_e_struct
! _temp3099; _temp3099.tag= Cyc_Absyn_Fill_e; _temp3099.f1= Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp3099;});
! _temp3098;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  3)]).first_line,( yyls[ _check_known_subscript_notnull(
! 10000u, yylsp_offset)]).last_line)); _temp3097;}); _temp3096;}); break; case 385:
! _LL3095: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3101=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3101[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3102; _temp3102.tag= Cyc_Exp_tok; _temp3102.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Codegen_e_struct* _temp3103=( struct Cyc_Absyn_Codegen_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Codegen_e_struct)); _temp3103[ 0]=({ struct
! Cyc_Absyn_Codegen_e_struct _temp3104; _temp3104.tag= Cyc_Absyn_Codegen_e;
! _temp3104.f1= Cyc_yyget_FnDecl_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  1)]); _temp3104;}); _temp3103;}), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3102;}); _temp3101;}); break; case 386: _LL3100: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3106=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3106[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3107; _temp3107.tag= Cyc_Exp_tok; _temp3107.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_UnknownId_e_struct* _temp3108=( struct Cyc_Absyn_UnknownId_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_e_struct)); _temp3108[ 0]=({
! struct Cyc_Absyn_UnknownId_e_struct _temp3109; _temp3109.tag= Cyc_Absyn_UnknownId_e;
! _temp3109.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset)]); _temp3109;}); _temp3108;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3107;});
! _temp3106;}); break; case 387: _LL3105: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; case 388: _LL3110:
! yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3112=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3112[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3113; _temp3113.tag= Cyc_Exp_tok; _temp3113.f1= Cyc_Absyn_string_exp( Cyc_yyget_String_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3113;});
! _temp3112;}); break; case 389: _LL3111: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]; break; case 390:
! _LL3114: yyval=( void*)({ struct Cyc_Exp_tok_struct* _temp3116=( struct Cyc_Exp_tok_struct*)
! _cycalloc( sizeof( struct Cyc_Exp_tok_struct)); _temp3116[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3117; _temp3117.tag= Cyc_Exp_tok; _temp3117.f1= Cyc_Absyn_noinstantiate_exp(
! Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnknownId_e_struct* _temp3118=(
  struct Cyc_Absyn_UnknownId_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_e_struct));
! _temp3118[ 0]=({ struct Cyc_Absyn_UnknownId_e_struct _temp3119; _temp3119.tag=
! Cyc_Absyn_UnknownId_e; _temp3119.f1= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]); _temp3119;});
! _temp3118;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  1)]).first_line,( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  1)]).last_line)), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  1)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3117;});
! _temp3116;}); break; case 391: _LL3115: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3121=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3121[ 0]=({ struct Cyc_Exp_tok_struct _temp3122; _temp3122.tag= Cyc_Exp_tok;
! _temp3122.f1= Cyc_Absyn_instantiate_exp( Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_UnknownId_e_struct*
! _temp3123=( struct Cyc_Absyn_UnknownId_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnknownId_e_struct));
! _temp3123[ 0]=({ struct Cyc_Absyn_UnknownId_e_struct _temp3124; _temp3124.tag=
! Cyc_Absyn_UnknownId_e; _temp3124.f1= Cyc_yyget_QualId_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  4)]); _temp3124;});
! _temp3123;}), Cyc_Position_segment_of_abs(( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).first_line,( yyls[ _check_known_subscript_notnull(
  10000u, yylsp_offset -  4)]).last_line)), Cyc_List_imp_rev( Cyc_yyget_TypeList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3122;}); _temp3121;}); break; case 392: _LL3120: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3126=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3126[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3127; _temp3127.tag= Cyc_Exp_tok; _temp3127.f1= Cyc_Absyn_tuple_exp( Cyc_yyget_ExpList_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3127;}); _temp3126;}); break; case 393: _LL3125: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3129=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3129[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3130; _temp3130.tag= Cyc_Exp_tok; _temp3130.f1= Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Struct_e_struct* _temp3131=( struct Cyc_Absyn_Struct_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Struct_e_struct)); _temp3131[ 0]=({ struct
! Cyc_Absyn_Struct_e_struct _temp3132; _temp3132.tag= Cyc_Absyn_Struct_e;
! _temp3132.f1= Cyc_yyget_QualId_tok( yyvs[ _check_known_subscript_notnull( 10000u,
! yyvsp_offset -  3)]); _temp3132.f2= 0; _temp3132.f3=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_InitializerList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  1)])); _temp3132.f4= 0;
! _temp3132;}); _temp3131;}), Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset -  3)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3130;});
! _temp3129;}); break; case 394: _LL3128: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3134=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3134[ 0]=({ struct Cyc_Exp_tok_struct _temp3135; _temp3135.tag= Cyc_Exp_tok;
! _temp3135.f1= Cyc_Absyn_stmt_exp( Cyc_yyget_Stmt_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset -  4)]).first_line,(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line));
! _temp3135;}); _temp3134;}); break; case 395: _LL3133: yyval=( void*)({ struct
! Cyc_ExpList_tok_struct* _temp3137=( struct Cyc_ExpList_tok_struct*) _cycalloc(
! sizeof( struct Cyc_ExpList_tok_struct)); _temp3137[ 0]=({ struct Cyc_ExpList_tok_struct
! _temp3138; _temp3138.tag= Cyc_ExpList_tok; _temp3138.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( Cyc_yyget_ExpList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)])); _temp3138;});
! _temp3137;}); break; case 396: _LL3136: yyval=( void*)({ struct Cyc_ExpList_tok_struct*
! _temp3140=( struct Cyc_ExpList_tok_struct*) _cycalloc( sizeof( struct Cyc_ExpList_tok_struct));
! _temp3140[ 0]=({ struct Cyc_ExpList_tok_struct _temp3141; _temp3141.tag= Cyc_ExpList_tok;
! _temp3141.f1=({ struct Cyc_List_List* _temp3142=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3142->hd=( void*) Cyc_yyget_Exp_tok(
! yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3142->tl= 0;
! _temp3142;}); _temp3141;}); _temp3140;}); break; case 397: _LL3139: yyval=( void*)({
! struct Cyc_ExpList_tok_struct* _temp3144=( struct Cyc_ExpList_tok_struct*)
! _cycalloc( sizeof( struct Cyc_ExpList_tok_struct)); _temp3144[ 0]=({ struct Cyc_ExpList_tok_struct
! _temp3145; _temp3145.tag= Cyc_ExpList_tok; _temp3145.f1=({ struct Cyc_List_List*
! _temp3146=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp3146->hd=( void*) Cyc_yyget_Exp_tok( yyvs[ _check_known_subscript_notnull(
! 10000u, yyvsp_offset)]); _temp3146->tl= Cyc_yyget_ExpList_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset -  2)]); _temp3146;});
! _temp3145;}); _temp3144;}); break; case 398: _LL3143: yyval=( void*)({ struct
! Cyc_Exp_tok_struct* _temp3148=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof(
! struct Cyc_Exp_tok_struct)); _temp3148[ 0]=({ struct Cyc_Exp_tok_struct
! _temp3149; _temp3149.tag= Cyc_Exp_tok; _temp3149.f1= Cyc_Absyn_int_exp((* Cyc_yyget_Int_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f1,(* Cyc_yyget_Int_tok(
  yyvs[ _check_known_subscript_notnull( 10000u, yyvsp_offset)])).f2, Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3149;});
! _temp3148;}); break; case 399: _LL3147: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3151=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3151[ 0]=({ struct Cyc_Exp_tok_struct _temp3152; _temp3152.tag= Cyc_Exp_tok;
! _temp3152.f1= Cyc_Absyn_char_exp( Cyc_yyget_Char_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3152;});
! _temp3151;}); break; case 400: _LL3150: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3154=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3154[ 0]=({ struct Cyc_Exp_tok_struct _temp3155; _temp3155.tag= Cyc_Exp_tok;
! _temp3155.f1= Cyc_Absyn_float_exp( Cyc_yyget_String_tok( yyvs[
  _check_known_subscript_notnull( 10000u, yyvsp_offset)]), Cyc_Position_segment_of_abs((
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3155;});
! _temp3154;}); break; case 401: _LL3153: yyval=( void*)({ struct Cyc_Exp_tok_struct*
! _temp3157=( struct Cyc_Exp_tok_struct*) _cycalloc( sizeof( struct Cyc_Exp_tok_struct));
! _temp3157[ 0]=({ struct Cyc_Exp_tok_struct _temp3158; _temp3158.tag= Cyc_Exp_tok;
! _temp3158.f1= Cyc_Absyn_null_exp( Cyc_Position_segment_of_abs(( yyls[
  _check_known_subscript_notnull( 10000u, yylsp_offset)]).first_line,( yyls[
! _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_line)); _temp3158;});
! _temp3157;}); break; case 402: _LL3156: yyval=( void*)({ struct Cyc_QualId_tok_struct*
! _temp3160=( struct Cyc_QualId_tok_struct*) _cycalloc( sizeof( struct Cyc_QualId_tok_struct));
! _temp3160[ 0]=({ struct Cyc_QualId_tok_struct _temp3161; _temp3161.tag= Cyc_QualId_tok;
! _temp3161.f1=({ struct _tuple1* _temp3162=( struct _tuple1*) _cycalloc( sizeof(
! struct _tuple1)); _temp3162->f1= Cyc_Absyn_rel_ns_null; _temp3162->f2=({ struct
! _tagged_arr* _temp3163=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp3163[ 0]= Cyc_yyget_String_tok( yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]); _temp3163;}); _temp3162;});
! _temp3161;}); _temp3160;}); break; case 403: _LL3159: yyval= yyvs[
! _check_known_subscript_notnull( 10000u, yyvsp_offset)]; break; default: _LL3164:(
  int) _throw(( void*) Cyc_Yyimpossible);} yyvsp_offset -= yylen; yyssp_offset -=
  yylen; yylsp_offset -= yylen; yyvs[ _check_known_subscript_notnull( 10000u, ++
  yyvsp_offset)]= yyval; yylsp_offset ++; if( yylen ==  0){( yyls[
***************
*** 6840,6867 ****
  _check_known_subscript_notnull( 10000u,( yylsp_offset +  yylen) -  1)]).last_line;(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_column=( yyls[
  _check_known_subscript_notnull( 10000u,( yylsp_offset +  yylen) -  1)]).last_column;}
! yyn=( int) Cyc_yyr1[ _check_known_subscript_notnull( 405u, yyn)]; yystate= Cyc_yypgoto[
  _check_known_subscript_notnull( 112u, yyn -  121)] +  yyss[
  _check_known_subscript_notnull( 10000u, yyssp_offset)]; if(( yystate >=  0?
! yystate <=  4329: 0)? Cyc_yycheck[ _check_known_subscript_notnull( 4330u,
  yystate)] ==  yyss[ _check_known_subscript_notnull( 10000u, yyssp_offset)]: 0){
! yystate=( int) Cyc_yytable[ _check_known_subscript_notnull( 4330u, yystate)];}
  else{ yystate=( int) Cyc_yydefgoto[ _check_known_subscript_notnull( 112u, yyn - 
  121)];} goto yynewstate; yyerrlab: if( yyerrstatus ==  0){ ++ Cyc_yynerrs; yyn=(
! int) Cyc_yypact[ _check_known_subscript_notnull( 801u, yystate)]; if( yyn >  -
! 32768? yyn <  4329: 0){ int sze= 0; struct _tagged_arr msg; int x; int count;
  count= 0; for( x= yyn <  0? - yyn: 0; x <  233u /  sizeof( unsigned char*); x ++){
! if( Cyc_yycheck[ _check_known_subscript_notnull( 4330u, x +  yyn)] ==  x){( sze
  += Cyc_Std_strlen( Cyc_yytname[ _check_known_subscript_notnull( 233u, x)]) +  15,
! count ++);}} msg=({ unsigned int _temp3176=( unsigned int)( sze +  15);
! unsigned char* _temp3177=( unsigned char*) _cycalloc_atomic( _check_times(
! sizeof( unsigned char), _temp3176)); struct _tagged_arr _temp3179= _tag_arr(
! _temp3177, sizeof( unsigned char),( unsigned int)( sze +  15));{ unsigned int
! _temp3178= _temp3176; unsigned int i; for( i= 0; i <  _temp3178; i ++){
! _temp3177[ i]='\000';}}; _temp3179;}); Cyc_Std_strcpy( msg, _tag_arr("parse error",
  sizeof( unsigned char), 12u)); if( count <  5){ count= 0; for( x= yyn <  0? -
  yyn: 0; x <  233u /  sizeof( unsigned char*); x ++){ if( Cyc_yycheck[
! _check_known_subscript_notnull( 4330u, x +  yyn)] ==  x){ Cyc_Std_strcat( msg,
  count ==  0? _tag_arr(", expecting `", sizeof( unsigned char), 14u): _tag_arr(" or `",
  sizeof( unsigned char), 6u)); Cyc_Std_strcat( msg, Cyc_yytname[
  _check_known_subscript_notnull( 233u, x)]); Cyc_Std_strcat( msg, _tag_arr("'",
--- 6817,6844 ----
  _check_known_subscript_notnull( 10000u,( yylsp_offset +  yylen) -  1)]).last_line;(
  yyls[ _check_known_subscript_notnull( 10000u, yylsp_offset)]).last_column=( yyls[
  _check_known_subscript_notnull( 10000u,( yylsp_offset +  yylen) -  1)]).last_column;}
! yyn=( int) Cyc_yyr1[ _check_known_subscript_notnull( 404u, yyn)]; yystate= Cyc_yypgoto[
  _check_known_subscript_notnull( 112u, yyn -  121)] +  yyss[
  _check_known_subscript_notnull( 10000u, yyssp_offset)]; if(( yystate >=  0?
! yystate <=  4371: 0)? Cyc_yycheck[ _check_known_subscript_notnull( 4372u,
  yystate)] ==  yyss[ _check_known_subscript_notnull( 10000u, yyssp_offset)]: 0){
! yystate=( int) Cyc_yytable[ _check_known_subscript_notnull( 4372u, yystate)];}
  else{ yystate=( int) Cyc_yydefgoto[ _check_known_subscript_notnull( 112u, yyn - 
  121)];} goto yynewstate; yyerrlab: if( yyerrstatus ==  0){ ++ Cyc_yynerrs; yyn=(
! int) Cyc_yypact[ _check_known_subscript_notnull( 798u, yystate)]; if( yyn >  -
! 32768? yyn <  4371: 0){ int sze= 0; struct _tagged_arr msg; int x; int count;
  count= 0; for( x= yyn <  0? - yyn: 0; x <  233u /  sizeof( unsigned char*); x ++){
! if( Cyc_yycheck[ _check_known_subscript_notnull( 4372u, x +  yyn)] ==  x){( sze
  += Cyc_Std_strlen( Cyc_yytname[ _check_known_subscript_notnull( 233u, x)]) +  15,
! count ++);}} msg=({ unsigned int _temp3166=( unsigned int)( sze +  15);
! unsigned char* _temp3167=( unsigned char*) _cycalloc_atomic( _check_times(
! sizeof( unsigned char), _temp3166)); struct _tagged_arr _temp3169= _tag_arr(
! _temp3167, sizeof( unsigned char),( unsigned int)( sze +  15));{ unsigned int
! _temp3168= _temp3166; unsigned int i; for( i= 0; i <  _temp3168; i ++){
! _temp3167[ i]='\000';}}; _temp3169;}); Cyc_Std_strcpy( msg, _tag_arr("parse error",
  sizeof( unsigned char), 12u)); if( count <  5){ count= 0; for( x= yyn <  0? -
  yyn: 0; x <  233u /  sizeof( unsigned char*); x ++){ if( Cyc_yycheck[
! _check_known_subscript_notnull( 4372u, x +  yyn)] ==  x){ Cyc_Std_strcat( msg,
  count ==  0? _tag_arr(", expecting `", sizeof( unsigned char), 14u): _tag_arr(" or `",
  sizeof( unsigned char), 6u)); Cyc_Std_strcat( msg, Cyc_yytname[
  _check_known_subscript_notnull( 233u, x)]); Cyc_Std_strcat( msg, _tag_arr("'",
***************
*** 6871,6952 ****
  Cyc_yychar= - 2;} yyerrstatus= 3; goto yyerrhandle; yyerrdefault: yyerrpop: if(
  yyssp_offset ==  0){ return 1;} yyvsp_offset --; yystate=( int) yyss[
  _check_known_subscript_notnull( 10000u, -- yyssp_offset)]; yylsp_offset --;
! yyerrhandle: yyn=( int) Cyc_yypact[ _check_known_subscript_notnull( 801u,
  yystate)]; if( yyn ==  - 32768){ goto yyerrdefault;} yyn += 1; if(( yyn <  0? 1:
! yyn >  4329)? 1: Cyc_yycheck[ _check_known_subscript_notnull( 4330u, yyn)] !=  1){
! goto yyerrdefault;} yyn=( int) Cyc_yytable[ _check_known_subscript_notnull( 4330u,
  yyn)]; if( yyn <  0){ if( yyn ==  - 32768){ goto yyerrpop;} yyn= - yyn; goto
! yyreduce;} else{ if( yyn ==  0){ goto yyerrpop;}} if( yyn ==  800){ return 0;}
  yyvs[ _check_known_subscript_notnull( 10000u, ++ yyvsp_offset)]= Cyc_yylval;
  yyls[ _check_known_subscript_notnull( 10000u, ++ yylsp_offset)]= Cyc_yylloc;
! goto yynewstate;} void Cyc_yyprint( int i, void* v){ void* _temp3189= v; struct
! _tuple15* _temp3207; struct _tuple15 _temp3209; int _temp3210; unsigned char
! _temp3212; short _temp3214; struct _tagged_arr _temp3216; struct Cyc_Core_Opt*
! _temp3218; struct Cyc_Core_Opt* _temp3220; struct Cyc_Core_Opt _temp3222; struct
! _tagged_arr* _temp3223; struct _tuple1* _temp3225; struct _tuple1 _temp3227;
! struct _tagged_arr* _temp3228; void* _temp3230; _LL3191: if(*(( void**)
! _temp3189) ==  Cyc_Int_tok){ _LL3208: _temp3207=(( struct Cyc_Int_tok_struct*)
! _temp3189)->f1; _temp3209=* _temp3207; _LL3211: _temp3210= _temp3209.f2; goto
! _LL3192;} else{ goto _LL3193;} _LL3193: if(*(( void**) _temp3189) ==  Cyc_Char_tok){
! _LL3213: _temp3212=(( struct Cyc_Char_tok_struct*) _temp3189)->f1; goto _LL3194;}
! else{ goto _LL3195;} _LL3195: if(*(( void**) _temp3189) ==  Cyc_Short_tok){
! _LL3215: _temp3214=(( struct Cyc_Short_tok_struct*) _temp3189)->f1; goto _LL3196;}
! else{ goto _LL3197;} _LL3197: if(*(( void**) _temp3189) ==  Cyc_String_tok){
! _LL3217: _temp3216=(( struct Cyc_String_tok_struct*) _temp3189)->f1; goto
! _LL3198;} else{ goto _LL3199;} _LL3199: if(*(( void**) _temp3189) ==  Cyc_Stringopt_tok){
! _LL3219: _temp3218=(( struct Cyc_Stringopt_tok_struct*) _temp3189)->f1; if(
! _temp3218 ==  0){ goto _LL3200;} else{ goto _LL3201;}} else{ goto _LL3201;}
! _LL3201: if(*(( void**) _temp3189) ==  Cyc_Stringopt_tok){ _LL3221: _temp3220=((
! struct Cyc_Stringopt_tok_struct*) _temp3189)->f1; if( _temp3220 ==  0){ goto
! _LL3203;} else{ _temp3222=* _temp3220; _LL3224: _temp3223=( struct _tagged_arr*)
! _temp3222.v; goto _LL3202;}} else{ goto _LL3203;} _LL3203: if(*(( void**)
! _temp3189) ==  Cyc_QualId_tok){ _LL3226: _temp3225=(( struct Cyc_QualId_tok_struct*)
! _temp3189)->f1; _temp3227=* _temp3225; _LL3231: _temp3230= _temp3227.f1; goto
! _LL3229; _LL3229: _temp3228= _temp3227.f2; goto _LL3204;} else{ goto _LL3205;}
! _LL3205: goto _LL3206; _LL3192:({ struct Cyc_Std_Int_pa_struct _temp3233;
! _temp3233.tag= Cyc_Std_Int_pa; _temp3233.f1=( int)(( unsigned int) _temp3210);{
! void* _temp3232[ 1u]={& _temp3233}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%d",
! sizeof( unsigned char), 3u), _tag_arr( _temp3232, sizeof( void*), 1u));}}); goto
! _LL3190; _LL3194:({ struct Cyc_Std_Int_pa_struct _temp3235; _temp3235.tag= Cyc_Std_Int_pa;
! _temp3235.f1=( int)(( unsigned int)(( int) _temp3212));{ void* _temp3234[ 1u]={&
! _temp3235}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%c", sizeof(
! unsigned char), 3u), _tag_arr( _temp3234, sizeof( void*), 1u));}}); goto _LL3190;
! _LL3196:({ struct Cyc_Std_Int_pa_struct _temp3237; _temp3237.tag= Cyc_Std_Int_pa;
! _temp3237.f1=( int)(( unsigned int)(( int) _temp3214));{ void* _temp3236[ 1u]={&
! _temp3237}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%ds", sizeof(
! unsigned char), 4u), _tag_arr( _temp3236, sizeof( void*), 1u));}}); goto _LL3190;
! _LL3198:({ struct Cyc_Std_String_pa_struct _temp3239; _temp3239.tag= Cyc_Std_String_pa;
! _temp3239.f1=( struct _tagged_arr) _temp3216;{ void* _temp3238[ 1u]={& _temp3239};
  Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("\"%s\"", sizeof( unsigned char), 5u),
! _tag_arr( _temp3238, sizeof( void*), 1u));}}); goto _LL3190; _LL3200:({ void*
! _temp3240[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("NULL", sizeof(
! unsigned char), 5u), _tag_arr( _temp3240, sizeof( void*), 0u));}); goto _LL3190;
! _LL3202:({ struct Cyc_Std_String_pa_struct _temp3242; _temp3242.tag= Cyc_Std_String_pa;
! _temp3242.f1=( struct _tagged_arr)* _temp3223;{ void* _temp3241[ 1u]={&
! _temp3242}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("\"%s\"", sizeof(
! unsigned char), 5u), _tag_arr( _temp3241, sizeof( void*), 1u));}}); goto _LL3190;
! _LL3204: { struct Cyc_List_List* _temp3243= 0;{ void* _temp3244= _temp3230;
! struct Cyc_List_List* _temp3252; struct Cyc_List_List* _temp3254; _LL3246: if((
! unsigned int) _temp3244 >  1u?*(( int*) _temp3244) ==  Cyc_Absyn_Rel_n: 0){
! _LL3253: _temp3252=(( struct Cyc_Absyn_Rel_n_struct*) _temp3244)->f1; goto
! _LL3247;} else{ goto _LL3248;} _LL3248: if(( unsigned int) _temp3244 >  1u?*((
! int*) _temp3244) ==  Cyc_Absyn_Abs_n: 0){ _LL3255: _temp3254=(( struct Cyc_Absyn_Abs_n_struct*)
! _temp3244)->f1; goto _LL3249;} else{ goto _LL3250;} _LL3250: if( _temp3244 == (
! void*) Cyc_Absyn_Loc_n){ goto _LL3251;} else{ goto _LL3245;} _LL3247: _temp3243=
! _temp3252; goto _LL3245; _LL3249: _temp3243= _temp3254; goto _LL3245; _LL3251:
! goto _LL3245; _LL3245:;} for( 0; _temp3243 !=  0; _temp3243=(( struct Cyc_List_List*)
! _check_null( _temp3243))->tl){({ struct Cyc_Std_String_pa_struct _temp3257;
! _temp3257.tag= Cyc_Std_String_pa; _temp3257.f1=( struct _tagged_arr)*(( struct
! _tagged_arr*)(( struct Cyc_List_List*) _check_null( _temp3243))->hd);{ void*
! _temp3256[ 1u]={& _temp3257}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s::",
! sizeof( unsigned char), 5u), _tag_arr( _temp3256, sizeof( void*), 1u));}});}({
! struct Cyc_Std_String_pa_struct _temp3259; _temp3259.tag= Cyc_Std_String_pa;
! _temp3259.f1=( struct _tagged_arr)* _temp3228;{ void* _temp3258[ 1u]={&
! _temp3259}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s::", sizeof(
! unsigned char), 5u), _tag_arr( _temp3258, sizeof( void*), 1u));}}); goto _LL3190;}
! _LL3206:({ void* _temp3260[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("?",
! sizeof( unsigned char), 2u), _tag_arr( _temp3260, sizeof( void*), 0u));}); goto
! _LL3190; _LL3190:;} struct Cyc_List_List* Cyc_Parse_parse_file( struct Cyc_Std___sFILE*
! f){ Cyc_Parse_parse_result= 0; Cyc_Parse_lbuf=({ struct Cyc_Core_Opt* _temp3261=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp3261->v=(
! void*) Cyc_Lexing_from_file( f); _temp3261;}); Cyc_yyparse(); return Cyc_Parse_parse_result;}
--- 6848,6929 ----
  Cyc_yychar= - 2;} yyerrstatus= 3; goto yyerrhandle; yyerrdefault: yyerrpop: if(
  yyssp_offset ==  0){ return 1;} yyvsp_offset --; yystate=( int) yyss[
  _check_known_subscript_notnull( 10000u, -- yyssp_offset)]; yylsp_offset --;
! yyerrhandle: yyn=( int) Cyc_yypact[ _check_known_subscript_notnull( 798u,
  yystate)]; if( yyn ==  - 32768){ goto yyerrdefault;} yyn += 1; if(( yyn <  0? 1:
! yyn >  4371)? 1: Cyc_yycheck[ _check_known_subscript_notnull( 4372u, yyn)] !=  1){
! goto yyerrdefault;} yyn=( int) Cyc_yytable[ _check_known_subscript_notnull( 4372u,
  yyn)]; if( yyn <  0){ if( yyn ==  - 32768){ goto yyerrpop;} yyn= - yyn; goto
! yyreduce;} else{ if( yyn ==  0){ goto yyerrpop;}} if( yyn ==  797){ return 0;}
  yyvs[ _check_known_subscript_notnull( 10000u, ++ yyvsp_offset)]= Cyc_yylval;
  yyls[ _check_known_subscript_notnull( 10000u, ++ yylsp_offset)]= Cyc_yylloc;
! goto yynewstate;} void Cyc_yyprint( int i, void* v){ void* _temp3179= v; struct
! _tuple15* _temp3197; struct _tuple15 _temp3199; int _temp3200; unsigned char
! _temp3202; short _temp3204; struct _tagged_arr _temp3206; struct Cyc_Core_Opt*
! _temp3208; struct Cyc_Core_Opt* _temp3210; struct Cyc_Core_Opt _temp3212; struct
! _tagged_arr* _temp3213; struct _tuple1* _temp3215; struct _tuple1 _temp3217;
! struct _tagged_arr* _temp3218; void* _temp3220; _LL3181: if(*(( void**)
! _temp3179) ==  Cyc_Int_tok){ _LL3198: _temp3197=(( struct Cyc_Int_tok_struct*)
! _temp3179)->f1; _temp3199=* _temp3197; _LL3201: _temp3200= _temp3199.f2; goto
! _LL3182;} else{ goto _LL3183;} _LL3183: if(*(( void**) _temp3179) ==  Cyc_Char_tok){
! _LL3203: _temp3202=(( struct Cyc_Char_tok_struct*) _temp3179)->f1; goto _LL3184;}
! else{ goto _LL3185;} _LL3185: if(*(( void**) _temp3179) ==  Cyc_Short_tok){
! _LL3205: _temp3204=(( struct Cyc_Short_tok_struct*) _temp3179)->f1; goto _LL3186;}
! else{ goto _LL3187;} _LL3187: if(*(( void**) _temp3179) ==  Cyc_String_tok){
! _LL3207: _temp3206=(( struct Cyc_String_tok_struct*) _temp3179)->f1; goto
! _LL3188;} else{ goto _LL3189;} _LL3189: if(*(( void**) _temp3179) ==  Cyc_Stringopt_tok){
! _LL3209: _temp3208=(( struct Cyc_Stringopt_tok_struct*) _temp3179)->f1; if(
! _temp3208 ==  0){ goto _LL3190;} else{ goto _LL3191;}} else{ goto _LL3191;}
! _LL3191: if(*(( void**) _temp3179) ==  Cyc_Stringopt_tok){ _LL3211: _temp3210=((
! struct Cyc_Stringopt_tok_struct*) _temp3179)->f1; if( _temp3210 ==  0){ goto
! _LL3193;} else{ _temp3212=* _temp3210; _LL3214: _temp3213=( struct _tagged_arr*)
! _temp3212.v; goto _LL3192;}} else{ goto _LL3193;} _LL3193: if(*(( void**)
! _temp3179) ==  Cyc_QualId_tok){ _LL3216: _temp3215=(( struct Cyc_QualId_tok_struct*)
! _temp3179)->f1; _temp3217=* _temp3215; _LL3221: _temp3220= _temp3217.f1; goto
! _LL3219; _LL3219: _temp3218= _temp3217.f2; goto _LL3194;} else{ goto _LL3195;}
! _LL3195: goto _LL3196; _LL3182:({ struct Cyc_Std_Int_pa_struct _temp3223;
! _temp3223.tag= Cyc_Std_Int_pa; _temp3223.f1=( int)(( unsigned int) _temp3200);{
! void* _temp3222[ 1u]={& _temp3223}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%d",
! sizeof( unsigned char), 3u), _tag_arr( _temp3222, sizeof( void*), 1u));}}); goto
! _LL3180; _LL3184:({ struct Cyc_Std_Int_pa_struct _temp3225; _temp3225.tag= Cyc_Std_Int_pa;
! _temp3225.f1=( int)(( unsigned int)(( int) _temp3202));{ void* _temp3224[ 1u]={&
! _temp3225}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%c", sizeof(
! unsigned char), 3u), _tag_arr( _temp3224, sizeof( void*), 1u));}}); goto _LL3180;
! _LL3186:({ struct Cyc_Std_Int_pa_struct _temp3227; _temp3227.tag= Cyc_Std_Int_pa;
! _temp3227.f1=( int)(( unsigned int)(( int) _temp3204));{ void* _temp3226[ 1u]={&
! _temp3227}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%ds", sizeof(
! unsigned char), 4u), _tag_arr( _temp3226, sizeof( void*), 1u));}}); goto _LL3180;
! _LL3188:({ struct Cyc_Std_String_pa_struct _temp3229; _temp3229.tag= Cyc_Std_String_pa;
! _temp3229.f1=( struct _tagged_arr) _temp3206;{ void* _temp3228[ 1u]={& _temp3229};
  Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("\"%s\"", sizeof( unsigned char), 5u),
! _tag_arr( _temp3228, sizeof( void*), 1u));}}); goto _LL3180; _LL3190:({ void*
! _temp3230[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("NULL", sizeof(
! unsigned char), 5u), _tag_arr( _temp3230, sizeof( void*), 0u));}); goto _LL3180;
! _LL3192:({ struct Cyc_Std_String_pa_struct _temp3232; _temp3232.tag= Cyc_Std_String_pa;
! _temp3232.f1=( struct _tagged_arr)* _temp3213;{ void* _temp3231[ 1u]={&
! _temp3232}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("\"%s\"", sizeof(
! unsigned char), 5u), _tag_arr( _temp3231, sizeof( void*), 1u));}}); goto _LL3180;
! _LL3194: { struct Cyc_List_List* _temp3233= 0;{ void* _temp3234= _temp3220;
! struct Cyc_List_List* _temp3242; struct Cyc_List_List* _temp3244; _LL3236: if((
! unsigned int) _temp3234 >  1u?*(( int*) _temp3234) ==  Cyc_Absyn_Rel_n: 0){
! _LL3243: _temp3242=(( struct Cyc_Absyn_Rel_n_struct*) _temp3234)->f1; goto
! _LL3237;} else{ goto _LL3238;} _LL3238: if(( unsigned int) _temp3234 >  1u?*((
! int*) _temp3234) ==  Cyc_Absyn_Abs_n: 0){ _LL3245: _temp3244=(( struct Cyc_Absyn_Abs_n_struct*)
! _temp3234)->f1; goto _LL3239;} else{ goto _LL3240;} _LL3240: if( _temp3234 == (
! void*) Cyc_Absyn_Loc_n){ goto _LL3241;} else{ goto _LL3235;} _LL3237: _temp3233=
! _temp3242; goto _LL3235; _LL3239: _temp3233= _temp3244; goto _LL3235; _LL3241:
! goto _LL3235; _LL3235:;} for( 0; _temp3233 !=  0; _temp3233=(( struct Cyc_List_List*)
! _check_null( _temp3233))->tl){({ struct Cyc_Std_String_pa_struct _temp3247;
! _temp3247.tag= Cyc_Std_String_pa; _temp3247.f1=( struct _tagged_arr)*(( struct
! _tagged_arr*)(( struct Cyc_List_List*) _check_null( _temp3233))->hd);{ void*
! _temp3246[ 1u]={& _temp3247}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s::",
! sizeof( unsigned char), 5u), _tag_arr( _temp3246, sizeof( void*), 1u));}});}({
! struct Cyc_Std_String_pa_struct _temp3249; _temp3249.tag= Cyc_Std_String_pa;
! _temp3249.f1=( struct _tagged_arr)* _temp3218;{ void* _temp3248[ 1u]={&
! _temp3249}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s::", sizeof(
! unsigned char), 5u), _tag_arr( _temp3248, sizeof( void*), 1u));}}); goto _LL3180;}
! _LL3196:({ void* _temp3250[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("?",
! sizeof( unsigned char), 2u), _tag_arr( _temp3250, sizeof( void*), 0u));}); goto
! _LL3180; _LL3180:;} struct Cyc_List_List* Cyc_Parse_parse_file( struct Cyc_Std___sFILE*
! f){ Cyc_Parse_parse_result= 0; Cyc_Parse_lbuf=({ struct Cyc_Core_Opt* _temp3251=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp3251->v=(
! void*) Cyc_Lexing_from_file( f); _temp3251;}); Cyc_yyparse(); return Cyc_Parse_parse_result;}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tc.c powerpc-apple-rhapsody/src/tc.c
*** i686-unknown-linux/src/tc.c	Wed Oct 10 15:39:58 2001
--- powerpc-apple-rhapsody/src/tc.c	Wed Oct 10 15:39:32 2001
***************
*** 282,288 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 282,288 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 373,435 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 373,432 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 1472,1478 ****
  0){( void*)( _temp652->sc=( void*)(( void*) Cyc_Absyn_ExternC));} if( _temp652->initializer
  !=  0){ void* _temp683=( void*)(( struct Cyc_Absyn_Exp*) _check_null( _temp652->initializer))->r;
  void* _temp689; _LL685: if(*(( int*) _temp683) ==  Cyc_Absyn_Gentyp_e){ _LL690:
! _temp689=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*) _temp683)->f2; goto
  _LL686;} else{ goto _LL687;} _LL687: goto _LL688; _LL686: { struct Cyc_Absyn_Exp*
  _temp693; struct Cyc_List_List* _temp695; struct Cyc_Dict_Dict* _temp697; struct
  _tuple3 _temp691= Cyc_Tcgenrep_tcGenrep( te, ge, loc, _temp689, dict); _LL698:
--- 1469,1475 ----
  0){( void*)( _temp652->sc=( void*)(( void*) Cyc_Absyn_ExternC));} if( _temp652->initializer
  !=  0){ void* _temp683=( void*)(( struct Cyc_Absyn_Exp*) _check_null( _temp652->initializer))->r;
  void* _temp689; _LL685: if(*(( int*) _temp683) ==  Cyc_Absyn_Gentyp_e){ _LL690:
! _temp689=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*) _temp683)->f1; goto
  _LL686;} else{ goto _LL687;} _LL687: goto _LL688; _LL686: { struct Cyc_Absyn_Exp*
  _temp693; struct Cyc_List_List* _temp695; struct Cyc_Dict_Dict* _temp697; struct
  _tuple3 _temp691= Cyc_Tcgenrep_tcGenrep( te, ge, loc, _temp689, dict); _LL698:
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tcdecl.c powerpc-apple-rhapsody/src/tcdecl.c
*** i686-unknown-linux/src/tcdecl.c	Wed Oct 10 15:40:00 2001
--- powerpc-apple-rhapsody/src/tcdecl.c	Wed Oct 10 15:39:32 2001
***************
*** 224,270 ****
  } ; extern unsigned char Cyc_Core_Impossible[ 15u]; struct Cyc_Core_Impossible_struct{
  unsigned char* tag; struct _tagged_arr f1; } ; extern unsigned char Cyc_Core_Not_found[
  14u]; extern unsigned char Cyc_Core_Unreachable[ 16u]; struct Cyc_Core_Unreachable_struct{
! unsigned char* tag; struct _tagged_arr f1; } ; extern struct _RegionHandle* Cyc_Core_heap_region;
! extern unsigned char* string_to_Cstring( struct _tagged_arr); extern
! unsigned char* underlying_Cstring( struct _tagged_arr); extern struct
! _tagged_arr Cstring_to_string( unsigned char*); extern struct _tagged_arr
! wrap_Cstring_as_string( unsigned char*, unsigned int); extern struct _tagged_arr
! ntCsl_to_ntsl( unsigned char**); struct Cyc_Std___sFILE; extern struct Cyc_Std___sFILE*
! Cyc_Std_stderr; extern unsigned char Cyc_Std_FileCloseError[ 19u]; extern
! unsigned char Cyc_Std_FileOpenError[ 18u]; struct Cyc_Std_FileOpenError_struct{
! unsigned char* tag; struct _tagged_arr f1; } ; static const int Cyc_Std_String_pa=
! 0; struct Cyc_Std_String_pa_struct{ int tag; struct _tagged_arr f1; } ; static
! const int Cyc_Std_Int_pa= 1; struct Cyc_Std_Int_pa_struct{ int tag; unsigned int
! f1; } ; static const int Cyc_Std_Double_pa= 2; struct Cyc_Std_Double_pa_struct{
! int tag; double f1; } ; static const int Cyc_Std_ShortPtr_pa= 3; struct Cyc_Std_ShortPtr_pa_struct{
! int tag; short* f1; } ; static const int Cyc_Std_IntPtr_pa= 4; struct Cyc_Std_IntPtr_pa_struct{
! int tag; unsigned int* f1; } ; extern int Cyc_Std_fprintf( struct Cyc_Std___sFILE*,
! struct _tagged_arr fmt, struct _tagged_arr); extern struct _tagged_arr Cyc_Std_aprintf(
! struct _tagged_arr fmt, struct _tagged_arr); extern struct _tagged_arr Cyc_Std_vrprintf(
! struct _RegionHandle* r1, struct _tagged_arr fmt, struct _tagged_arr ap); static
! const int Cyc_Std_ShortPtr_sa= 0; struct Cyc_Std_ShortPtr_sa_struct{ int tag;
! short* f1; } ; static const int Cyc_Std_UShortPtr_sa= 1; struct Cyc_Std_UShortPtr_sa_struct{
! int tag; unsigned short* f1; } ; static const int Cyc_Std_IntPtr_sa= 2; struct
! Cyc_Std_IntPtr_sa_struct{ int tag; int* f1; } ; static const int Cyc_Std_UIntPtr_sa=
! 3; struct Cyc_Std_UIntPtr_sa_struct{ int tag; unsigned int* f1; } ; static const
! int Cyc_Std_StringPtr_sa= 4; struct Cyc_Std_StringPtr_sa_struct{ int tag; struct
! _tagged_arr f1; } ; static const int Cyc_Std_DoublePtr_sa= 5; struct Cyc_Std_DoublePtr_sa_struct{
! int tag; double* f1; } ; static const int Cyc_Std_FloatPtr_sa= 6; struct Cyc_Std_FloatPtr_sa_struct{
! int tag; float* f1; } ; struct Cyc_List_List{ void* hd; struct Cyc_List_List* tl;
! } ; extern int Cyc_List_length( struct Cyc_List_List* x); extern struct Cyc_List_List*
! Cyc_List_map_c( void*(* f)( void*, void*), void* env, struct Cyc_List_List* x);
! extern unsigned char Cyc_List_List_mismatch[ 18u]; extern struct Cyc_List_List*
! Cyc_List_imp_rev( struct Cyc_List_List* x); extern struct Cyc_List_List* Cyc_List_append(
! struct Cyc_List_List* x, struct Cyc_List_List* y); extern unsigned char Cyc_List_Nth[
! 8u]; extern int Cyc_List_exists_c( int(* pred)( void*, void*), void* env, struct
! Cyc_List_List* x); struct Cyc_Lineno_Pos{ struct _tagged_arr logical_file;
! struct _tagged_arr line; int line_no; int col; } ; extern unsigned char Cyc_Position_Exit[
! 9u]; struct Cyc_Position_Segment; static const int Cyc_Position_Lex= 0; static
! const int Cyc_Position_Parse= 1; static const int Cyc_Position_Elab= 2; struct
! Cyc_Position_Error{ struct _tagged_arr source; struct Cyc_Position_Segment* seg;
! void* kind; struct _tagged_arr desc; } ; extern struct Cyc_Position_Error* Cyc_Position_mk_err_elab(
! struct Cyc_Position_Segment*, struct _tagged_arr); extern unsigned char Cyc_Position_Nocontext[
! 14u]; extern void Cyc_Position_post_error( struct Cyc_Position_Error*); struct
  _tuple0{ void* f1; struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar; struct Cyc_Absyn_Tqual;
  struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo; struct Cyc_Absyn_VarargInfo;
  struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo; struct Cyc_Absyn_TunionFieldInfo;
--- 224,247 ----
  } ; extern unsigned char Cyc_Core_Impossible[ 15u]; struct Cyc_Core_Impossible_struct{
  unsigned char* tag; struct _tagged_arr f1; } ; extern unsigned char Cyc_Core_Not_found[
  14u]; extern unsigned char Cyc_Core_Unreachable[ 16u]; struct Cyc_Core_Unreachable_struct{
! unsigned char* tag; struct _tagged_arr f1; } ; extern unsigned char*
! string_to_Cstring( struct _tagged_arr); extern unsigned char* underlying_Cstring(
! struct _tagged_arr); extern struct _tagged_arr Cstring_to_string( unsigned char*);
! extern struct _tagged_arr wrap_Cstring_as_string( unsigned char*, unsigned int);
! extern struct _tagged_arr ntCsl_to_ntsl( unsigned char**); struct Cyc_List_List{
! void* hd; struct Cyc_List_List* tl; } ; extern int Cyc_List_length( struct Cyc_List_List*
! x); extern struct Cyc_List_List* Cyc_List_map_c( void*(* f)( void*, void*), void*
! env, struct Cyc_List_List* x); extern unsigned char Cyc_List_List_mismatch[ 18u];
! extern struct Cyc_List_List* Cyc_List_imp_rev( struct Cyc_List_List* x); extern
! struct Cyc_List_List* Cyc_List_append( struct Cyc_List_List* x, struct Cyc_List_List*
! y); extern unsigned char Cyc_List_Nth[ 8u]; extern int Cyc_List_exists_c( int(*
! pred)( void*, void*), void* env, struct Cyc_List_List* x); struct Cyc_Lineno_Pos{
! struct _tagged_arr logical_file; struct _tagged_arr line; int line_no; int col;
! } ; extern unsigned char Cyc_Position_Exit[ 9u]; struct Cyc_Position_Segment;
! static const int Cyc_Position_Lex= 0; static const int Cyc_Position_Parse= 1;
! static const int Cyc_Position_Elab= 2; struct Cyc_Position_Error{ struct
! _tagged_arr source; struct Cyc_Position_Segment* seg; void* kind; struct
! _tagged_arr desc; } ; extern unsigned char Cyc_Position_Nocontext[ 14u]; struct
  _tuple0{ void* f1; struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar; struct Cyc_Absyn_Tqual;
  struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo; struct Cyc_Absyn_VarargInfo;
  struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo; struct Cyc_Absyn_TunionFieldInfo;
***************
*** 301,307 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 278,284 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 392,454 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 369,428 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 577,586 ****
  void*); extern unsigned char Cyc_Tcdecl_Incompatible[ 17u]; struct Cyc_Tcdecl_Xtunionfielddecl{
  struct Cyc_Absyn_Tuniondecl* base; struct Cyc_Absyn_Tunionfield* field; } ;
  extern void Cyc_Tcdecl_merr( struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg1, struct _tagged_arr fmt, struct _tagged_arr ap); struct
! _tuple3{ void* f1; int f2; } ; extern struct _tuple3 Cyc_Tcdecl_merge_scope(
! void* s0, void* s1, struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg); extern struct Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_structdecl(
  struct Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* msg); extern struct Cyc_Absyn_Uniondecl* Cyc_Tcdecl_merge_uniondecl(
  struct Cyc_Absyn_Uniondecl* d0, struct Cyc_Absyn_Uniondecl* d1, struct Cyc_Position_Segment*
--- 551,560 ----
  void*); extern unsigned char Cyc_Tcdecl_Incompatible[ 17u]; struct Cyc_Tcdecl_Xtunionfielddecl{
  struct Cyc_Absyn_Tuniondecl* base; struct Cyc_Absyn_Tunionfield* field; } ;
  extern void Cyc_Tcdecl_merr( struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg0, struct _tagged_arr msg1); struct _tuple3{ void* f1; int f2; }
! ; extern struct _tuple3 Cyc_Tcdecl_merge_scope( void* s0, void* s1, struct
! _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg); extern struct Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_structdecl(
  struct Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* msg); extern struct Cyc_Absyn_Uniondecl* Cyc_Tcdecl_merge_uniondecl(
  struct Cyc_Absyn_Uniondecl* d0, struct Cyc_Absyn_Uniondecl* d1, struct Cyc_Position_Segment*
***************
*** 603,628 ****
  unsigned char Cyc_Dict_Absent[ 11u]; extern int Cyc_Std_strptrcmp( struct
  _tagged_arr* s1, struct _tagged_arr* s2); extern int Cyc_Std_zstrptrcmp( struct
  _tagged_arr*, struct _tagged_arr*); extern struct _tagged_arr Cyc_Std_strconcat(
! struct _tagged_arr, struct _tagged_arr); struct Cyc_Set_Set; extern
! unsigned char Cyc_Set_Absent[ 11u]; static const int Cyc_Tcenv_VarRes= 0; struct
! Cyc_Tcenv_VarRes_struct{ int tag; void* f1; } ; static const int Cyc_Tcenv_StructRes=
! 1; struct Cyc_Tcenv_StructRes_struct{ int tag; struct Cyc_Absyn_Structdecl* f1;
! } ; static const int Cyc_Tcenv_TunionRes= 2; struct Cyc_Tcenv_TunionRes_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; struct Cyc_Absyn_Tunionfield* f2; } ;
! static const int Cyc_Tcenv_EnumRes= 3; struct Cyc_Tcenv_EnumRes_struct{ int tag;
! struct Cyc_Absyn_Enumdecl* f1; struct Cyc_Absyn_Enumfield* f2; } ; struct Cyc_Tcenv_Genv{
! struct Cyc_Set_Set* namespaces; struct Cyc_Dict_Dict* structdecls; struct Cyc_Dict_Dict*
! uniondecls; struct Cyc_Dict_Dict* tuniondecls; struct Cyc_Dict_Dict* enumdecls;
! struct Cyc_Dict_Dict* typedefs; struct Cyc_Dict_Dict* ordinaries; struct Cyc_List_List*
! availables; } ; struct Cyc_Tcenv_Fenv; static const int Cyc_Tcenv_NotLoop_j= 0;
! static const int Cyc_Tcenv_CaseEnd_j= 1; static const int Cyc_Tcenv_FnEnd_j= 2;
! static const int Cyc_Tcenv_Stmt_j= 0; struct Cyc_Tcenv_Stmt_j_struct{ int tag;
! struct Cyc_Absyn_Stmt* f1; } ; static const int Cyc_Tcenv_Outermost= 0; struct
! Cyc_Tcenv_Outermost_struct{ int tag; void* f1; } ; static const int Cyc_Tcenv_Frame=
! 1; struct Cyc_Tcenv_Frame_struct{ int tag; void* f1; void* f2; } ; static const
! int Cyc_Tcenv_Hidden= 2; struct Cyc_Tcenv_Hidden_struct{ int tag; void* f1; void*
! f2; } ; struct Cyc_Tcenv_Tenv{ struct Cyc_List_List* ns; struct Cyc_Dict_Dict*
! ae; struct Cyc_Core_Opt* le; } ; extern unsigned char Cyc_Tcutil_TypeErr[ 12u];
  extern int Cyc_Tcutil_unify( void*, void*); extern void* Cyc_Tcutil_substitute(
  struct Cyc_List_List*, void*); extern int Cyc_Tcutil_equal_tqual( struct Cyc_Absyn_Tqual
  tq1, struct Cyc_Absyn_Tqual tq2); extern int Cyc_Tcutil_same_atts( struct Cyc_List_List*,
--- 577,623 ----
  unsigned char Cyc_Dict_Absent[ 11u]; extern int Cyc_Std_strptrcmp( struct
  _tagged_arr* s1, struct _tagged_arr* s2); extern int Cyc_Std_zstrptrcmp( struct
  _tagged_arr*, struct _tagged_arr*); extern struct _tagged_arr Cyc_Std_strconcat(
! struct _tagged_arr, struct _tagged_arr); struct Cyc_Std___sFILE; extern struct
! Cyc_Std___sFILE* Cyc_Std_stderr; extern unsigned char Cyc_Std_FileCloseError[ 19u];
! extern unsigned char Cyc_Std_FileOpenError[ 18u]; struct Cyc_Std_FileOpenError_struct{
! unsigned char* tag; struct _tagged_arr f1; } ; static const int Cyc_Std_String_pa=
! 0; struct Cyc_Std_String_pa_struct{ int tag; struct _tagged_arr f1; } ; static
! const int Cyc_Std_Int_pa= 1; struct Cyc_Std_Int_pa_struct{ int tag; unsigned int
! f1; } ; static const int Cyc_Std_Double_pa= 2; struct Cyc_Std_Double_pa_struct{
! int tag; double f1; } ; static const int Cyc_Std_ShortPtr_pa= 3; struct Cyc_Std_ShortPtr_pa_struct{
! int tag; short* f1; } ; static const int Cyc_Std_IntPtr_pa= 4; struct Cyc_Std_IntPtr_pa_struct{
! int tag; unsigned int* f1; } ; extern int Cyc_Std_fprintf( struct Cyc_Std___sFILE*,
! struct _tagged_arr fmt, struct _tagged_arr); extern struct _tagged_arr Cyc_Std_aprintf(
! struct _tagged_arr fmt, struct _tagged_arr); static const int Cyc_Std_ShortPtr_sa=
! 0; struct Cyc_Std_ShortPtr_sa_struct{ int tag; short* f1; } ; static const int
! Cyc_Std_UShortPtr_sa= 1; struct Cyc_Std_UShortPtr_sa_struct{ int tag;
! unsigned short* f1; } ; static const int Cyc_Std_IntPtr_sa= 2; struct Cyc_Std_IntPtr_sa_struct{
! int tag; int* f1; } ; static const int Cyc_Std_UIntPtr_sa= 3; struct Cyc_Std_UIntPtr_sa_struct{
! int tag; unsigned int* f1; } ; static const int Cyc_Std_StringPtr_sa= 4; struct
! Cyc_Std_StringPtr_sa_struct{ int tag; struct _tagged_arr f1; } ; static const
! int Cyc_Std_DoublePtr_sa= 5; struct Cyc_Std_DoublePtr_sa_struct{ int tag; double*
! f1; } ; static const int Cyc_Std_FloatPtr_sa= 6; struct Cyc_Std_FloatPtr_sa_struct{
! int tag; float* f1; } ; struct Cyc_Set_Set; extern unsigned char Cyc_Set_Absent[
! 11u]; static const int Cyc_Tcenv_VarRes= 0; struct Cyc_Tcenv_VarRes_struct{ int
! tag; void* f1; } ; static const int Cyc_Tcenv_StructRes= 1; struct Cyc_Tcenv_StructRes_struct{
! int tag; struct Cyc_Absyn_Structdecl* f1; } ; static const int Cyc_Tcenv_TunionRes=
! 2; struct Cyc_Tcenv_TunionRes_struct{ int tag; struct Cyc_Absyn_Tuniondecl* f1;
! struct Cyc_Absyn_Tunionfield* f2; } ; static const int Cyc_Tcenv_EnumRes= 3;
! struct Cyc_Tcenv_EnumRes_struct{ int tag; struct Cyc_Absyn_Enumdecl* f1; struct
! Cyc_Absyn_Enumfield* f2; } ; struct Cyc_Tcenv_Genv{ struct Cyc_Set_Set*
! namespaces; struct Cyc_Dict_Dict* structdecls; struct Cyc_Dict_Dict* uniondecls;
! struct Cyc_Dict_Dict* tuniondecls; struct Cyc_Dict_Dict* enumdecls; struct Cyc_Dict_Dict*
! typedefs; struct Cyc_Dict_Dict* ordinaries; struct Cyc_List_List* availables; }
! ; struct Cyc_Tcenv_Fenv; static const int Cyc_Tcenv_NotLoop_j= 0; static const
! int Cyc_Tcenv_CaseEnd_j= 1; static const int Cyc_Tcenv_FnEnd_j= 2; static const
! int Cyc_Tcenv_Stmt_j= 0; struct Cyc_Tcenv_Stmt_j_struct{ int tag; struct Cyc_Absyn_Stmt*
! f1; } ; static const int Cyc_Tcenv_Outermost= 0; struct Cyc_Tcenv_Outermost_struct{
! int tag; void* f1; } ; static const int Cyc_Tcenv_Frame= 1; struct Cyc_Tcenv_Frame_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Tcenv_Hidden= 2; struct
! Cyc_Tcenv_Hidden_struct{ int tag; void* f1; void* f2; } ; struct Cyc_Tcenv_Tenv{
! struct Cyc_List_List* ns; struct Cyc_Dict_Dict* ae; struct Cyc_Core_Opt* le; } ;
! extern unsigned char Cyc_Tcutil_TypeErr[ 12u]; extern void Cyc_Tcutil_terr(
! struct Cyc_Position_Segment*, struct _tagged_arr fmt, struct _tagged_arr ap);
  extern int Cyc_Tcutil_unify( void*, void*); extern void* Cyc_Tcutil_substitute(
  struct Cyc_List_List*, void*); extern int Cyc_Tcutil_equal_tqual( struct Cyc_Absyn_Tqual
  tq1, struct Cyc_Absyn_Tqual tq2); extern int Cyc_Tcutil_same_atts( struct Cyc_List_List*,
***************
*** 636,863 ****
  extern struct _tagged_arr Cyc_Absynpp_qvar2string( struct _tuple0*); extern
  struct _tagged_arr Cyc_Absynpp_scope2string( void* sc); unsigned char Cyc_Tcdecl_Incompatible[
  17u]="\000\000\000\000Incompatible"; void Cyc_Tcdecl_merr( struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg1, struct _tagged_arr fmt, struct _tagged_arr ap){
! if( msg1 ==  0){( int) _throw(( void*) Cyc_Tcdecl_Incompatible);}{ struct
! _tagged_arr fmt2=( struct _tagged_arr) Cyc_Std_strconcat( _tag_arr("%s ",
! sizeof( unsigned char), 4u), fmt); struct _tagged_arr ap2=({ unsigned int _temp0=
! _get_arr_size( ap, sizeof( void*)) +  1; void** _temp1=( void**) _cycalloc(
! _check_times( sizeof( void*), _temp0)); struct _tagged_arr _temp5= _tag_arr(
! _temp1, sizeof( void*), _get_arr_size( ap, sizeof( void*)) +  1);{ unsigned int
! _temp2= _temp0; unsigned int i; for( i= 0; i <  _temp2; i ++){ _temp1[ i]= i == 
! 0?( void*)({ struct Cyc_Std_String_pa_struct* _temp3=( struct Cyc_Std_String_pa_struct*)
! _cycalloc( sizeof( struct Cyc_Std_String_pa_struct)); _temp3[ 0]=({ struct Cyc_Std_String_pa_struct
! _temp4; _temp4.tag= Cyc_Std_String_pa; _temp4.f1=( struct _tagged_arr)*(( struct
! _tagged_arr*) _check_null( msg1)); _temp4;}); _temp3;}):*(( void**)
! _check_unknown_subscript( ap, sizeof( void*),( int)( i -  1)));}}; _temp5;});
! Cyc_Position_post_error( Cyc_Position_mk_err_elab( loc,( struct _tagged_arr) Cyc_Std_vrprintf(
! Cyc_Core_heap_region, fmt2, ap2)));}} static void Cyc_Tcdecl_merge_scope_err(
! void* s0, void* s1, struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg){({ struct Cyc_Std_String_pa_struct _temp10;
! _temp10.tag= Cyc_Std_String_pa; _temp10.f1=( struct _tagged_arr) Cyc_Absynpp_scope2string(
! s0);{ struct Cyc_Std_String_pa_struct _temp9; _temp9.tag= Cyc_Std_String_pa;
! _temp9.f1=( struct _tagged_arr) Cyc_Absynpp_scope2string( s1);{ struct Cyc_Std_String_pa_struct
! _temp8; _temp8.tag= Cyc_Std_String_pa; _temp8.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp7; _temp7.tag= Cyc_Std_String_pa; _temp7.f1=(
! struct _tagged_arr) t;{ void* _temp6[ 4u]={& _temp7,& _temp8,& _temp9,& _temp10};
! Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s is %s whereas expected scope is %s",
! sizeof( unsigned char), 41u), _tag_arr( _temp6, sizeof( void*), 4u));}}}}});}
! struct _tuple4{ void* f1; void* f2; } ; struct _tuple3 Cyc_Tcdecl_merge_scope(
! void* s0, void* s1, struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg){{ struct _tuple4 _temp12=({ struct _tuple4 _temp11;
! _temp11.f1= s0; _temp11.f2= s1; _temp11;}); void* _temp32; void* _temp34; void*
! _temp36; void* _temp38; void* _temp40; void* _temp42; void* _temp44; void*
! _temp46; void* _temp48; void* _temp50; void* _temp52; void* _temp54; _LL14:
! _LL35: _temp34= _temp12.f1; if( _temp34 == ( void*) Cyc_Absyn_ExternC){ goto
! _LL33;} else{ goto _LL16;} _LL33: _temp32= _temp12.f2; if( _temp32 == ( void*)
! Cyc_Absyn_ExternC){ goto _LL15;} else{ goto _LL16;} _LL16: _LL37: _temp36=
! _temp12.f1; if( _temp36 == ( void*) Cyc_Absyn_ExternC){ goto _LL17;} else{ goto
! _LL18;} _LL18: _LL39: _temp38= _temp12.f2; if( _temp38 == ( void*) Cyc_Absyn_ExternC){
! goto _LL19;} else{ goto _LL20;} _LL20: _LL41: _temp40= _temp12.f2; if( _temp40
! == ( void*) Cyc_Absyn_Extern){ goto _LL21;} else{ goto _LL22;} _LL22: _LL43:
! _temp42= _temp12.f1; if( _temp42 == ( void*) Cyc_Absyn_Extern){ goto _LL23;}
! else{ goto _LL24;} _LL24: _LL47: _temp46= _temp12.f1; if( _temp46 == ( void*)
! Cyc_Absyn_Static){ goto _LL45;} else{ goto _LL26;} _LL45: _temp44= _temp12.f2;
! if( _temp44 == ( void*) Cyc_Absyn_Static){ goto _LL25;} else{ goto _LL26;} _LL26:
! _LL51: _temp50= _temp12.f1; if( _temp50 == ( void*) Cyc_Absyn_Public){ goto
! _LL49;} else{ goto _LL28;} _LL49: _temp48= _temp12.f2; if( _temp48 == ( void*)
! Cyc_Absyn_Public){ goto _LL27;} else{ goto _LL28;} _LL28: _LL55: _temp54=
! _temp12.f1; if( _temp54 == ( void*) Cyc_Absyn_Abstract){ goto _LL53;} else{ goto
! _LL30;} _LL53: _temp52= _temp12.f2; if( _temp52 == ( void*) Cyc_Absyn_Abstract){
! goto _LL29;} else{ goto _LL30;} _LL30: goto _LL31; _LL15: goto _LL13; _LL17:
! goto _LL19; _LL19: Cyc_Tcdecl_merge_scope_err( s0, s1, t, v, loc, msg); return({
! struct _tuple3 _temp56; _temp56.f1= s1; _temp56.f2= 0; _temp56;}); _LL21: s1= s0;
! goto _LL13; _LL23: goto _LL13; _LL25: goto _LL27; _LL27: goto _LL29; _LL29: goto
! _LL13; _LL31: Cyc_Tcdecl_merge_scope_err( s0, s1, t, v, loc, msg); return({
! struct _tuple3 _temp57; _temp57.f1= s1; _temp57.f2= 0; _temp57;}); _LL13:;}
! return({ struct _tuple3 _temp58; _temp58.f1= s1; _temp58.f2= 1; _temp58;});}
! static int Cyc_Tcdecl_check_type( void* t0, void* t1){ return Cyc_Tcutil_unify(
! t0, t1);} static unsigned int Cyc_Tcdecl_get_uint_const_value( struct Cyc_Absyn_Exp*
! e){ void* _temp59=( void*) e->r; void* _temp65; int _temp67; _LL61: if(*(( int*)
! _temp59) ==  Cyc_Absyn_Const_e){ _LL66: _temp65=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp59)->f1; if(( unsigned int) _temp65 >  1u?*(( int*) _temp65) ==  Cyc_Absyn_Int_c:
! 0){ _LL68: _temp67=(( struct Cyc_Absyn_Int_c_struct*) _temp65)->f2; goto _LL62;}
! else{ goto _LL63;}} else{ goto _LL63;} _LL63: goto _LL64; _LL62: return(
! unsigned int) _temp67; _LL64:( int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct*
! _temp69=( struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct
! Cyc_Core_Invalid_argument_struct)); _temp69[ 0]=({ struct Cyc_Core_Invalid_argument_struct
! _temp70; _temp70.tag= Cyc_Core_Invalid_argument; _temp70.f1= _tag_arr("Tcdecl::get_uint_const_value",
! sizeof( unsigned char), 29u); _temp70;}); _temp69;})); _LL60:;} inline static
! int Cyc_Tcdecl_check_tvs( struct Cyc_List_List* tvs0, struct Cyc_List_List* tvs1,
! struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment* loc,
! struct _tagged_arr* msg){ if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! tvs0) != (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( tvs1)){({ struct
! Cyc_Std_String_pa_struct _temp73; _temp73.tag= Cyc_Std_String_pa; _temp73.f1=(
! struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp72; _temp72.tag=
! Cyc_Std_String_pa; _temp72.f1=( struct _tagged_arr) t;{ void* _temp71[ 2u]={&
! _temp72,& _temp73}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s has a different number of type parameters",
! sizeof( unsigned char), 48u), _tag_arr( _temp71, sizeof( void*), 2u));}}});
! return 0;}{ struct Cyc_List_List* _temp74= tvs0; struct Cyc_List_List* _temp75=
! tvs1; for( 0; _temp74 !=  0;( _temp74=(( struct Cyc_List_List*) _check_null(
! _temp74))->tl, _temp75=(( struct Cyc_List_List*) _check_null( _temp75))->tl)){
! struct Cyc_Absyn_Conref* _temp76= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( _temp74))->hd)->kind); struct Cyc_Absyn_Conref*
! _temp77= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( _temp75))->hd)->kind); if( Cyc_Absyn_conref_val( _temp76) !=  Cyc_Absyn_conref_val(
! _temp77)){({ struct Cyc_Std_String_pa_struct _temp83; _temp83.tag= Cyc_Std_String_pa;
! _temp83.f1=( struct _tagged_arr) Cyc_Absynpp_ckind2string( _temp77);{ struct Cyc_Std_String_pa_struct
! _temp82; _temp82.tag= Cyc_Std_String_pa; _temp82.f1=( struct _tagged_arr)*((
! struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( _temp74))->hd)->name;{
! struct Cyc_Std_String_pa_struct _temp81; _temp81.tag= Cyc_Std_String_pa; _temp81.f1=(
! struct _tagged_arr) Cyc_Absynpp_ckind2string( _temp76);{ struct Cyc_Std_String_pa_struct
! _temp80; _temp80.tag= Cyc_Std_String_pa; _temp80.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp79; _temp79.tag= Cyc_Std_String_pa; _temp79.f1=(
! struct _tagged_arr) t;{ void* _temp78[ 5u]={& _temp79,& _temp80,& _temp81,&
! _temp82,& _temp83}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s has a different kind (%s) for type parameter %s (%s)",
! sizeof( unsigned char), 59u), _tag_arr( _temp78, sizeof( void*), 5u));}}}}}});
! return 0;}} return 1;}} static int Cyc_Tcdecl_check_atts( struct Cyc_List_List*
! atts0, struct Cyc_List_List* atts1, struct _tagged_arr t, struct _tagged_arr v,
! struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){ if( ! Cyc_Tcutil_same_atts(
! atts0, atts1)){({ struct Cyc_Std_String_pa_struct _temp86; _temp86.tag= Cyc_Std_String_pa;
! _temp86.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp85;
! _temp85.tag= Cyc_Std_String_pa; _temp85.f1=( struct _tagged_arr) t;{ void*
! _temp84[ 2u]={& _temp85,& _temp86}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s has different attributes",
! sizeof( unsigned char), 31u), _tag_arr( _temp84, sizeof( void*), 2u));}}});
! return 0;} return 1;} struct _tuple5{ struct Cyc_Absyn_Tvar* f1; void* f2; } ;
! static struct Cyc_List_List* Cyc_Tcdecl_build_tvs_map( struct Cyc_List_List*
! tvs0, struct Cyc_List_List* tvs1){ struct Cyc_List_List* _temp87= 0; for( 0;
! tvs0 !=  0;( tvs0=(( struct Cyc_List_List*) _check_null( tvs0))->tl, tvs1=((
! struct Cyc_List_List*) _check_null( tvs1))->tl)){ _temp87=({ struct Cyc_List_List*
! _temp88=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp88->hd=( void*)({ struct _tuple5* _temp89=( struct _tuple5*) _cycalloc(
! sizeof( struct _tuple5)); _temp89->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( tvs1))->hd; _temp89->f2=( void*)({ struct Cyc_Absyn_VarType_struct*
! _temp90=( struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp90[ 0]=({ struct Cyc_Absyn_VarType_struct _temp91; _temp91.tag= Cyc_Absyn_VarType;
! _temp91.f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs0))->hd;
! _temp91;}); _temp90;}); _temp89;}); _temp88->tl= _temp87; _temp88;});} return
! _temp87;} struct _tuple6{ struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; } ;
! static struct Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_struct_or_union_decl(
  struct Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct
  _tagged_arr t, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){
! struct _tagged_arr _temp92= Cyc_Absynpp_qvar2string(( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( d0->name))->v); int _temp93= 1; if( ! Cyc_Tcdecl_check_tvs(
! d0->tvs, d1->tvs, t, _temp92, loc, msg)){ return 0;}{ int _temp96; void* _temp98;
! struct _tuple3 _temp94= Cyc_Tcdecl_merge_scope(( void*) d0->sc,( void*) d1->sc,
! t, _temp92, loc, msg); _LL99: _temp98= _temp94.f1; goto _LL97; _LL97: _temp96=
! _temp94.f2; goto _LL95; _LL95: if( ! _temp96){ _temp93= 0;} if( ! Cyc_Tcdecl_check_atts(
! d0->attributes, d1->attributes, t, _temp92, loc, msg)){ _temp93= 0;}{ struct Cyc_Absyn_Structdecl*
! d2;{ struct _tuple6 _temp101=({ struct _tuple6 _temp100; _temp100.f1= d0->fields;
! _temp100.f2= d1->fields; _temp100;}); struct Cyc_Core_Opt* _temp109; struct Cyc_Core_Opt*
! _temp111; struct Cyc_Core_Opt* _temp113; struct Cyc_Core_Opt _temp115; struct
! Cyc_List_List* _temp116; struct Cyc_Core_Opt* _temp118; struct Cyc_Core_Opt
! _temp120; struct Cyc_List_List* _temp121; _LL103: _LL110: _temp109= _temp101.f2;
! if( _temp109 ==  0){ goto _LL104;} else{ goto _LL105;} _LL105: _LL112: _temp111=
! _temp101.f1; if( _temp111 ==  0){ goto _LL106;} else{ goto _LL107;} _LL107:
! _LL119: _temp118= _temp101.f1; if( _temp118 ==  0){ goto _LL102;} else{ _temp120=*
! _temp118; _LL122: _temp121=( struct Cyc_List_List*) _temp120.v; goto _LL114;}
! _LL114: _temp113= _temp101.f2; if( _temp113 ==  0){ goto _LL102;} else{ _temp115=*
! _temp113; _LL117: _temp116=( struct Cyc_List_List*) _temp115.v; goto _LL108;}
! _LL104: d2= d0; goto _LL102; _LL106: d2= d1; goto _LL102; _LL108: { struct Cyc_List_List*
! _temp123= Cyc_Tcdecl_build_tvs_map( d0->tvs, d1->tvs); for( 0; _temp121 !=  0?
! _temp116 !=  0: 0;( _temp121=(( struct Cyc_List_List*) _check_null( _temp121))->tl,
! _temp116=(( struct Cyc_List_List*) _check_null( _temp116))->tl)){ struct Cyc_Absyn_Structfield
! _temp126; struct Cyc_List_List* _temp127; struct Cyc_Absyn_Exp* _temp129; void*
! _temp131; struct Cyc_Absyn_Tqual _temp133; struct _tagged_arr* _temp135; struct
! Cyc_Absyn_Structfield* _temp124=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( _temp121))->hd; _temp126=* _temp124; _LL136: _temp135= _temp126.name;
! goto _LL134; _LL134: _temp133= _temp126.tq; goto _LL132; _LL132: _temp131=( void*)
! _temp126.type; goto _LL130; _LL130: _temp129= _temp126.width; goto _LL128;
! _LL128: _temp127= _temp126.attributes; goto _LL125; _LL125: { struct Cyc_Absyn_Structfield
! _temp139; struct Cyc_List_List* _temp140; struct Cyc_Absyn_Exp* _temp142; void*
! _temp144; struct Cyc_Absyn_Tqual _temp146; struct _tagged_arr* _temp148; struct
! Cyc_Absyn_Structfield* _temp137=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( _temp116))->hd; _temp139=* _temp137; _LL149: _temp148= _temp139.name;
! goto _LL147; _LL147: _temp146= _temp139.tq; goto _LL145; _LL145: _temp144=( void*)
! _temp139.type; goto _LL143; _LL143: _temp142= _temp139.width; goto _LL141;
! _LL141: _temp140= _temp139.attributes; goto _LL138; _LL138: if( Cyc_Std_zstrptrcmp(
! _temp135, _temp148) !=  0){({ struct Cyc_Std_String_pa_struct _temp154; _temp154.tag=
! Cyc_Std_String_pa; _temp154.f1=( struct _tagged_arr)* _temp148;{ struct Cyc_Std_String_pa_struct
! _temp153; _temp153.tag= Cyc_Std_String_pa; _temp153.f1=( struct _tagged_arr)*
! _temp135;{ struct Cyc_Std_String_pa_struct _temp152; _temp152.tag= Cyc_Std_String_pa;
! _temp152.f1=( struct _tagged_arr) _temp92;{ struct Cyc_Std_String_pa_struct
! _temp151; _temp151.tag= Cyc_Std_String_pa; _temp151.f1=( struct _tagged_arr) t;{
! void* _temp150[ 4u]={& _temp151,& _temp152,& _temp153,& _temp154}; Cyc_Tcdecl_merr(
! loc, msg, _tag_arr("%s %s : field name mismatch %s != %s", sizeof( unsigned char),
! 37u), _tag_arr( _temp150, sizeof( void*), 4u));}}}}}); return 0;} if( ! Cyc_Tcutil_same_atts(
! _temp127, _temp140)){({ struct Cyc_Std_String_pa_struct _temp158; _temp158.tag=
! Cyc_Std_String_pa; _temp158.f1=( struct _tagged_arr)* _temp135;{ struct Cyc_Std_String_pa_struct
! _temp157; _temp157.tag= Cyc_Std_String_pa; _temp157.f1=( struct _tagged_arr)
! _temp92;{ struct Cyc_Std_String_pa_struct _temp156; _temp156.tag= Cyc_Std_String_pa;
! _temp156.f1=( struct _tagged_arr) t;{ void* _temp155[ 3u]={& _temp156,& _temp157,&
! _temp158}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s : attribute mismatch on field %s",
! sizeof( unsigned char), 39u), _tag_arr( _temp155, sizeof( void*), 3u));}}}});
! _temp93= 0;} if( ! Cyc_Tcutil_equal_tqual( _temp133, _temp146)){({ struct Cyc_Std_String_pa_struct
! _temp162; _temp162.tag= Cyc_Std_String_pa; _temp162.f1=( struct _tagged_arr)*
! _temp135;{ struct Cyc_Std_String_pa_struct _temp161; _temp161.tag= Cyc_Std_String_pa;
! _temp161.f1=( struct _tagged_arr) _temp92;{ struct Cyc_Std_String_pa_struct
! _temp160; _temp160.tag= Cyc_Std_String_pa; _temp160.f1=( struct _tagged_arr) t;{
! void* _temp159[ 3u]={& _temp160,& _temp161,& _temp162}; Cyc_Tcdecl_merr( loc,
! msg, _tag_arr("%s %s : qualifier mismatch on field %s", sizeof( unsigned char),
! 39u), _tag_arr( _temp159, sizeof( void*), 3u));}}}}); _temp93= 0;} if((((
! _temp129 !=  0? _temp142 !=  0: 0)? Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp129)) !=  Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp142)): 0)? 1:( _temp129 ==  0? _temp142 !=  0: 0))? 1:(
! _temp129 !=  0? _temp142 ==  0: 0)){({ struct Cyc_Std_String_pa_struct _temp166;
! _temp166.tag= Cyc_Std_String_pa; _temp166.f1=( struct _tagged_arr)* _temp135;{
! struct Cyc_Std_String_pa_struct _temp165; _temp165.tag= Cyc_Std_String_pa;
! _temp165.f1=( struct _tagged_arr) _temp92;{ struct Cyc_Std_String_pa_struct
! _temp164; _temp164.tag= Cyc_Std_String_pa; _temp164.f1=( struct _tagged_arr) t;{
! void* _temp163[ 3u]={& _temp164,& _temp165,& _temp166}; Cyc_Tcdecl_merr( loc,
! msg, _tag_arr("%s %s : bitfield mismatch on field %s", sizeof( unsigned char),
! 38u), _tag_arr( _temp163, sizeof( void*), 3u));}}}}); _temp93= 0;}{ void*
! subst_t1= Cyc_Tcutil_substitute( _temp123, _temp144); if( ! Cyc_Tcdecl_check_type(
! _temp131, subst_t1)){({ struct Cyc_Std_String_pa_struct _temp172; _temp172.tag=
! Cyc_Std_String_pa; _temp172.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! subst_t1);{ struct Cyc_Std_String_pa_struct _temp171; _temp171.tag= Cyc_Std_String_pa;
! _temp171.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( _temp131);{ struct Cyc_Std_String_pa_struct
! _temp170; _temp170.tag= Cyc_Std_String_pa; _temp170.f1=( struct _tagged_arr)*
! _temp135;{ struct Cyc_Std_String_pa_struct _temp169; _temp169.tag= Cyc_Std_String_pa;
! _temp169.f1=( struct _tagged_arr) _temp92;{ struct Cyc_Std_String_pa_struct
! _temp168; _temp168.tag= Cyc_Std_String_pa; _temp168.f1=( struct _tagged_arr) t;{
! void* _temp167[ 5u]={& _temp168,& _temp169,& _temp170,& _temp171,& _temp172};
! Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s : type mismatch on field %s: %s != %s",
! sizeof( unsigned char), 44u), _tag_arr( _temp167, sizeof( void*), 5u));}}}}}});
! _temp93= 0;}}}} if( _temp121 !=  0){({ struct Cyc_Std_String_pa_struct _temp176;
! _temp176.tag= Cyc_Std_String_pa; _temp176.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp121))->hd)->name;{ struct Cyc_Std_String_pa_struct
! _temp175; _temp175.tag= Cyc_Std_String_pa; _temp175.f1=( struct _tagged_arr)
! _temp92;{ struct Cyc_Std_String_pa_struct _temp174; _temp174.tag= Cyc_Std_String_pa;
! _temp174.f1=( struct _tagged_arr) t;{ void* _temp173[ 3u]={& _temp174,& _temp175,&
! _temp176}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s is missing field %s",
! sizeof( unsigned char), 26u), _tag_arr( _temp173, sizeof( void*), 3u));}}}});
! _temp93= 0;} if( _temp116 !=  0){({ struct Cyc_Std_String_pa_struct _temp180;
! _temp180.tag= Cyc_Std_String_pa; _temp180.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp116))->hd)->name;{ struct Cyc_Std_String_pa_struct
! _temp179; _temp179.tag= Cyc_Std_String_pa; _temp179.f1=( struct _tagged_arr)
! _temp92;{ struct Cyc_Std_String_pa_struct _temp178; _temp178.tag= Cyc_Std_String_pa;
! _temp178.f1=( struct _tagged_arr) t;{ void* _temp177[ 3u]={& _temp178,& _temp179,&
! _temp180}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s has extra field %s",
! sizeof( unsigned char), 25u), _tag_arr( _temp177, sizeof( void*), 3u));}}}});
! _temp93= 0;} d2= d0; goto _LL102;} _LL102:;} if( ! _temp93){ return 0;} if(
! _temp98 == ( void*) d2->sc){ return( struct Cyc_Absyn_Structdecl*) d2;} else{ d2=({
! struct Cyc_Absyn_Structdecl* _temp181=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp181[ 0]=* d2; _temp181;});( void*)(
! d2->sc=( void*) _temp98); return( struct Cyc_Absyn_Structdecl*) d2;}}}} struct
  Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_structdecl( struct Cyc_Absyn_Structdecl*
  d0, struct Cyc_Absyn_Structdecl* d1, struct Cyc_Position_Segment* loc, struct
  _tagged_arr* msg){ return Cyc_Tcdecl_merge_struct_or_union_decl( d0, d1,
--- 631,857 ----
  extern struct _tagged_arr Cyc_Absynpp_qvar2string( struct _tuple0*); extern
  struct _tagged_arr Cyc_Absynpp_scope2string( void* sc); unsigned char Cyc_Tcdecl_Incompatible[
  17u]="\000\000\000\000Incompatible"; void Cyc_Tcdecl_merr( struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg1, struct _tagged_arr msg2){ if( msg1 ==  0){( int)
! _throw(( void*) Cyc_Tcdecl_Incompatible);} else{({ struct Cyc_Std_String_pa_struct
! _temp2; _temp2.tag= Cyc_Std_String_pa; _temp2.f1=( struct _tagged_arr) msg2;{
! struct Cyc_Std_String_pa_struct _temp1; _temp1.tag= Cyc_Std_String_pa; _temp1.f1=(
! struct _tagged_arr)*(( struct _tagged_arr*) _check_null( msg1));{ void* _temp0[
! 2u]={& _temp1,& _temp2}; Cyc_Tcutil_terr( loc, _tag_arr("%s %s", sizeof(
! unsigned char), 6u), _tag_arr( _temp0, sizeof( void*), 2u));}}});}} static void
! Cyc_Tcdecl_merge_scope_err( void* s0, void* s1, struct _tagged_arr t, struct
! _tagged_arr v, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){ Cyc_Tcdecl_merr(
! loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp7; _temp7.tag=
! Cyc_Std_String_pa; _temp7.f1=( struct _tagged_arr) Cyc_Absynpp_scope2string( s0);{
! struct Cyc_Std_String_pa_struct _temp6; _temp6.tag= Cyc_Std_String_pa; _temp6.f1=(
! struct _tagged_arr) Cyc_Absynpp_scope2string( s1);{ struct Cyc_Std_String_pa_struct
! _temp5; _temp5.tag= Cyc_Std_String_pa; _temp5.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp4; _temp4.tag= Cyc_Std_String_pa; _temp4.f1=(
! struct _tagged_arr) t;{ void* _temp3[ 4u]={& _temp4,& _temp5,& _temp6,& _temp7};
! Cyc_Std_aprintf( _tag_arr("%s %s is %s whereas expected scope is %s", sizeof(
! unsigned char), 41u), _tag_arr( _temp3, sizeof( void*), 4u));}}}}}));} struct
! _tuple4{ void* f1; void* f2; } ; struct _tuple3 Cyc_Tcdecl_merge_scope( void* s0,
! void* s1, struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg){{ struct _tuple4 _temp9=({ struct _tuple4 _temp8;
! _temp8.f1= s0; _temp8.f2= s1; _temp8;}); void* _temp29; void* _temp31; void*
! _temp33; void* _temp35; void* _temp37; void* _temp39; void* _temp41; void*
! _temp43; void* _temp45; void* _temp47; void* _temp49; void* _temp51; _LL11:
! _LL32: _temp31= _temp9.f1; if( _temp31 == ( void*) Cyc_Absyn_ExternC){ goto
! _LL30;} else{ goto _LL13;} _LL30: _temp29= _temp9.f2; if( _temp29 == ( void*)
! Cyc_Absyn_ExternC){ goto _LL12;} else{ goto _LL13;} _LL13: _LL34: _temp33=
! _temp9.f1; if( _temp33 == ( void*) Cyc_Absyn_ExternC){ goto _LL14;} else{ goto
! _LL15;} _LL15: _LL36: _temp35= _temp9.f2; if( _temp35 == ( void*) Cyc_Absyn_ExternC){
! goto _LL16;} else{ goto _LL17;} _LL17: _LL38: _temp37= _temp9.f2; if( _temp37 == (
! void*) Cyc_Absyn_Extern){ goto _LL18;} else{ goto _LL19;} _LL19: _LL40: _temp39=
! _temp9.f1; if( _temp39 == ( void*) Cyc_Absyn_Extern){ goto _LL20;} else{ goto
! _LL21;} _LL21: _LL44: _temp43= _temp9.f1; if( _temp43 == ( void*) Cyc_Absyn_Static){
! goto _LL42;} else{ goto _LL23;} _LL42: _temp41= _temp9.f2; if( _temp41 == ( void*)
! Cyc_Absyn_Static){ goto _LL22;} else{ goto _LL23;} _LL23: _LL48: _temp47= _temp9.f1;
! if( _temp47 == ( void*) Cyc_Absyn_Public){ goto _LL46;} else{ goto _LL25;} _LL46:
! _temp45= _temp9.f2; if( _temp45 == ( void*) Cyc_Absyn_Public){ goto _LL24;}
! else{ goto _LL25;} _LL25: _LL52: _temp51= _temp9.f1; if( _temp51 == ( void*) Cyc_Absyn_Abstract){
! goto _LL50;} else{ goto _LL27;} _LL50: _temp49= _temp9.f2; if( _temp49 == ( void*)
! Cyc_Absyn_Abstract){ goto _LL26;} else{ goto _LL27;} _LL27: goto _LL28; _LL12:
! goto _LL10; _LL14: goto _LL16; _LL16: Cyc_Tcdecl_merge_scope_err( s0, s1, t, v,
! loc, msg); return({ struct _tuple3 _temp53; _temp53.f1= s1; _temp53.f2= 0;
! _temp53;}); _LL18: s1= s0; goto _LL10; _LL20: goto _LL10; _LL22: goto _LL10;
! _LL24: goto _LL10; _LL26: goto _LL10; _LL28: Cyc_Tcdecl_merge_scope_err( s0, s1,
! t, v, loc, msg); return({ struct _tuple3 _temp54; _temp54.f1= s1; _temp54.f2= 0;
! _temp54;}); _LL10:;} return({ struct _tuple3 _temp55; _temp55.f1= s1; _temp55.f2=
! 1; _temp55;});} static int Cyc_Tcdecl_check_type( void* t0, void* t1){ return
! Cyc_Tcutil_unify( t0, t1);} static unsigned int Cyc_Tcdecl_get_uint_const_value(
! struct Cyc_Absyn_Exp* e){ void* _temp56=( void*) e->r; void* _temp62; int
! _temp64; _LL58: if(*(( int*) _temp56) ==  Cyc_Absyn_Const_e){ _LL63: _temp62=(
! void*)(( struct Cyc_Absyn_Const_e_struct*) _temp56)->f1; if(( unsigned int)
! _temp62 >  1u?*(( int*) _temp62) ==  Cyc_Absyn_Int_c: 0){ _LL65: _temp64=((
! struct Cyc_Absyn_Int_c_struct*) _temp62)->f2; goto _LL59;} else{ goto _LL60;}}
! else{ goto _LL60;} _LL60: goto _LL61; _LL59: return( unsigned int) _temp64;
! _LL61:( int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct* _temp66=(
! struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct));
! _temp66[ 0]=({ struct Cyc_Core_Invalid_argument_struct _temp67; _temp67.tag= Cyc_Core_Invalid_argument;
! _temp67.f1= _tag_arr("Tcdecl::get_uint_const_value", sizeof( unsigned char), 29u);
! _temp67;}); _temp66;})); _LL57:;} inline static int Cyc_Tcdecl_check_tvs( struct
! Cyc_List_List* tvs0, struct Cyc_List_List* tvs1, struct _tagged_arr t, struct
! _tagged_arr v, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){ if(((
! int(*)( struct Cyc_List_List* x)) Cyc_List_length)( tvs0) != (( int(*)( struct
! Cyc_List_List* x)) Cyc_List_length)( tvs1)){ Cyc_Tcdecl_merr( loc, msg,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp70; _temp70.tag= Cyc_Std_String_pa;
! _temp70.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp69;
! _temp69.tag= Cyc_Std_String_pa; _temp69.f1=( struct _tagged_arr) t;{ void*
! _temp68[ 2u]={& _temp69,& _temp70}; Cyc_Std_aprintf( _tag_arr("%s %s has a different number of type parameters",
! sizeof( unsigned char), 48u), _tag_arr( _temp68, sizeof( void*), 2u));}}}));
! return 0;}{ struct Cyc_List_List* _temp71= tvs0; struct Cyc_List_List* _temp72=
! tvs1; for( 0; _temp71 !=  0;( _temp71=(( struct Cyc_List_List*) _check_null(
! _temp71))->tl, _temp72=(( struct Cyc_List_List*) _check_null( _temp72))->tl)){
! struct Cyc_Absyn_Conref* _temp73= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( _temp71))->hd)->kind); struct Cyc_Absyn_Conref*
! _temp74= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( _temp72))->hd)->kind); if( Cyc_Absyn_conref_val( _temp73) !=  Cyc_Absyn_conref_val(
! _temp74)){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp80; _temp80.tag= Cyc_Std_String_pa; _temp80.f1=( struct _tagged_arr) Cyc_Absynpp_ckind2string(
! _temp74);{ struct Cyc_Std_String_pa_struct _temp79; _temp79.tag= Cyc_Std_String_pa;
! _temp79.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( _temp71))->hd)->name;{ struct Cyc_Std_String_pa_struct _temp78;
! _temp78.tag= Cyc_Std_String_pa; _temp78.f1=( struct _tagged_arr) Cyc_Absynpp_ckind2string(
! _temp73);{ struct Cyc_Std_String_pa_struct _temp77; _temp77.tag= Cyc_Std_String_pa;
! _temp77.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp76;
! _temp76.tag= Cyc_Std_String_pa; _temp76.f1=( struct _tagged_arr) t;{ void*
! _temp75[ 5u]={& _temp76,& _temp77,& _temp78,& _temp79,& _temp80}; Cyc_Std_aprintf(
! _tag_arr("%s %s has a different kind (%s) for type parameter %s (%s)", sizeof(
! unsigned char), 59u), _tag_arr( _temp75, sizeof( void*), 5u));}}}}}})); return 0;}}
! return 1;}} inline static int Cyc_Tcdecl_check_atts( struct Cyc_List_List* atts0,
! struct Cyc_List_List* atts1, struct _tagged_arr t, struct _tagged_arr v, struct
! Cyc_Position_Segment* loc, struct _tagged_arr* msg){ if( ! Cyc_Tcutil_same_atts(
! atts0, atts1)){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp83; _temp83.tag= Cyc_Std_String_pa; _temp83.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp82; _temp82.tag= Cyc_Std_String_pa; _temp82.f1=(
! struct _tagged_arr) t;{ void* _temp81[ 2u]={& _temp82,& _temp83}; Cyc_Std_aprintf(
! _tag_arr("%s %s has different attributes", sizeof( unsigned char), 31u),
! _tag_arr( _temp81, sizeof( void*), 2u));}}})); return 0;} else{ return 1;}}
! struct _tuple5{ struct Cyc_Absyn_Tvar* f1; void* f2; } ; inline static struct
! Cyc_List_List* Cyc_Tcdecl_build_tvs_map( struct Cyc_List_List* tvs0, struct Cyc_List_List*
! tvs1){ struct Cyc_List_List* _temp84= 0; for( 0; tvs0 !=  0;( tvs0=(( struct Cyc_List_List*)
! _check_null( tvs0))->tl, tvs1=(( struct Cyc_List_List*) _check_null( tvs1))->tl)){
! _temp84=({ struct Cyc_List_List* _temp85=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp85->hd=( void*)({ struct _tuple5* _temp86=(
! struct _tuple5*) _cycalloc( sizeof( struct _tuple5)); _temp86->f1=( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( tvs1))->hd; _temp86->f2=( void*)({ struct
! Cyc_Absyn_VarType_struct* _temp87=( struct Cyc_Absyn_VarType_struct*) _cycalloc(
! sizeof( struct Cyc_Absyn_VarType_struct)); _temp87[ 0]=({ struct Cyc_Absyn_VarType_struct
! _temp88; _temp88.tag= Cyc_Absyn_VarType; _temp88.f1=( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( tvs0))->hd; _temp88;}); _temp87;}); _temp86;});
! _temp85->tl= _temp84; _temp85;});} return _temp84;} struct _tuple6{ struct Cyc_Core_Opt*
! f1; struct Cyc_Core_Opt* f2; } ; static struct Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_struct_or_union_decl(
  struct Cyc_Absyn_Structdecl* d0, struct Cyc_Absyn_Structdecl* d1, struct
  _tagged_arr t, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){
! struct _tagged_arr _temp89= Cyc_Absynpp_qvar2string(( struct _tuple0*)(( struct
! Cyc_Core_Opt*) _check_null( d0->name))->v); int _temp90= 1; if( ! Cyc_Tcdecl_check_tvs(
! d0->tvs, d1->tvs, t, _temp89, loc, msg)){ return 0;}{ int _temp93; void* _temp95;
! struct _tuple3 _temp91= Cyc_Tcdecl_merge_scope(( void*) d0->sc,( void*) d1->sc,
! t, _temp89, loc, msg); _LL96: _temp95= _temp91.f1; goto _LL94; _LL94: _temp93=
! _temp91.f2; goto _LL92; _LL92: if( ! _temp93){ _temp90= 0;} if( ! Cyc_Tcdecl_check_atts(
! d0->attributes, d1->attributes, t, _temp89, loc, msg)){ _temp90= 0;}{ struct Cyc_Absyn_Structdecl*
! d2;{ struct _tuple6 _temp98=({ struct _tuple6 _temp97; _temp97.f1= d0->fields;
! _temp97.f2= d1->fields; _temp97;}); struct Cyc_Core_Opt* _temp106; struct Cyc_Core_Opt*
! _temp108; struct Cyc_Core_Opt* _temp110; struct Cyc_Core_Opt _temp112; struct
! Cyc_List_List* _temp113; struct Cyc_Core_Opt* _temp115; struct Cyc_Core_Opt
! _temp117; struct Cyc_List_List* _temp118; _LL100: _LL107: _temp106= _temp98.f2;
! if( _temp106 ==  0){ goto _LL101;} else{ goto _LL102;} _LL102: _LL109: _temp108=
! _temp98.f1; if( _temp108 ==  0){ goto _LL103;} else{ goto _LL104;} _LL104:
! _LL116: _temp115= _temp98.f1; if( _temp115 ==  0){ goto _LL99;} else{ _temp117=*
! _temp115; _LL119: _temp118=( struct Cyc_List_List*) _temp117.v; goto _LL111;}
! _LL111: _temp110= _temp98.f2; if( _temp110 ==  0){ goto _LL99;} else{ _temp112=*
! _temp110; _LL114: _temp113=( struct Cyc_List_List*) _temp112.v; goto _LL105;}
! _LL101: d2= d0; goto _LL99; _LL103: d2= d1; goto _LL99; _LL105: { struct Cyc_List_List*
! _temp120= Cyc_Tcdecl_build_tvs_map( d0->tvs, d1->tvs); for( 0; _temp118 !=  0?
! _temp113 !=  0: 0;( _temp118=(( struct Cyc_List_List*) _check_null( _temp118))->tl,
! _temp113=(( struct Cyc_List_List*) _check_null( _temp113))->tl)){ struct Cyc_Absyn_Structfield
! _temp123; struct Cyc_List_List* _temp124; struct Cyc_Absyn_Exp* _temp126; void*
! _temp128; struct Cyc_Absyn_Tqual _temp130; struct _tagged_arr* _temp132; struct
! Cyc_Absyn_Structfield* _temp121=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( _temp118))->hd; _temp123=* _temp121; _LL133: _temp132= _temp123.name;
! goto _LL131; _LL131: _temp130= _temp123.tq; goto _LL129; _LL129: _temp128=( void*)
! _temp123.type; goto _LL127; _LL127: _temp126= _temp123.width; goto _LL125;
! _LL125: _temp124= _temp123.attributes; goto _LL122; _LL122: { struct Cyc_Absyn_Structfield
! _temp136; struct Cyc_List_List* _temp137; struct Cyc_Absyn_Exp* _temp139; void*
! _temp141; struct Cyc_Absyn_Tqual _temp143; struct _tagged_arr* _temp145; struct
! Cyc_Absyn_Structfield* _temp134=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( _temp113))->hd; _temp136=* _temp134; _LL146: _temp145= _temp136.name;
! goto _LL144; _LL144: _temp143= _temp136.tq; goto _LL142; _LL142: _temp141=( void*)
! _temp136.type; goto _LL140; _LL140: _temp139= _temp136.width; goto _LL138;
! _LL138: _temp137= _temp136.attributes; goto _LL135; _LL135: if( Cyc_Std_zstrptrcmp(
! _temp132, _temp145) !=  0){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp151; _temp151.tag= Cyc_Std_String_pa;
! _temp151.f1=( struct _tagged_arr)* _temp145;{ struct Cyc_Std_String_pa_struct
! _temp150; _temp150.tag= Cyc_Std_String_pa; _temp150.f1=( struct _tagged_arr)*
! _temp132;{ struct Cyc_Std_String_pa_struct _temp149; _temp149.tag= Cyc_Std_String_pa;
! _temp149.f1=( struct _tagged_arr) _temp89;{ struct Cyc_Std_String_pa_struct
! _temp148; _temp148.tag= Cyc_Std_String_pa; _temp148.f1=( struct _tagged_arr) t;{
! void* _temp147[ 4u]={& _temp148,& _temp149,& _temp150,& _temp151}; Cyc_Std_aprintf(
! _tag_arr("%s %s : field name mismatch %s != %s", sizeof( unsigned char), 37u),
! _tag_arr( _temp147, sizeof( void*), 4u));}}}}})); return 0;} if( ! Cyc_Tcutil_same_atts(
! _temp124, _temp137)){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct
! Cyc_Std_String_pa_struct _temp155; _temp155.tag= Cyc_Std_String_pa; _temp155.f1=(
! struct _tagged_arr)* _temp132;{ struct Cyc_Std_String_pa_struct _temp154;
! _temp154.tag= Cyc_Std_String_pa; _temp154.f1=( struct _tagged_arr) _temp89;{
! struct Cyc_Std_String_pa_struct _temp153; _temp153.tag= Cyc_Std_String_pa;
! _temp153.f1=( struct _tagged_arr) t;{ void* _temp152[ 3u]={& _temp153,& _temp154,&
! _temp155}; Cyc_Std_aprintf( _tag_arr("%s %s : attribute mismatch on field %s",
! sizeof( unsigned char), 39u), _tag_arr( _temp152, sizeof( void*), 3u));}}}}));
! _temp90= 0;} if( ! Cyc_Tcutil_equal_tqual( _temp130, _temp143)){ Cyc_Tcdecl_merr(
! loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp159;
! _temp159.tag= Cyc_Std_String_pa; _temp159.f1=( struct _tagged_arr)* _temp132;{
! struct Cyc_Std_String_pa_struct _temp158; _temp158.tag= Cyc_Std_String_pa;
! _temp158.f1=( struct _tagged_arr) _temp89;{ struct Cyc_Std_String_pa_struct
! _temp157; _temp157.tag= Cyc_Std_String_pa; _temp157.f1=( struct _tagged_arr) t;{
! void* _temp156[ 3u]={& _temp157,& _temp158,& _temp159}; Cyc_Std_aprintf(
! _tag_arr("%s %s : qualifier mismatch on field %s", sizeof( unsigned char), 39u),
! _tag_arr( _temp156, sizeof( void*), 3u));}}}})); _temp90= 0;} if(((( _temp126 != 
! 0? _temp139 !=  0: 0)? Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp126)) !=  Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp139)): 0)? 1:( _temp126 ==  0? _temp139 !=  0: 0))? 1:(
! _temp126 !=  0? _temp139 ==  0: 0)){ Cyc_Tcdecl_merr( loc, msg,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp163; _temp163.tag= Cyc_Std_String_pa;
! _temp163.f1=( struct _tagged_arr)* _temp132;{ struct Cyc_Std_String_pa_struct
! _temp162; _temp162.tag= Cyc_Std_String_pa; _temp162.f1=( struct _tagged_arr)
! _temp89;{ struct Cyc_Std_String_pa_struct _temp161; _temp161.tag= Cyc_Std_String_pa;
! _temp161.f1=( struct _tagged_arr) t;{ void* _temp160[ 3u]={& _temp161,& _temp162,&
! _temp163}; Cyc_Std_aprintf( _tag_arr("%s %s : bitfield mismatch on field %s",
! sizeof( unsigned char), 38u), _tag_arr( _temp160, sizeof( void*), 3u));}}}}));
! _temp90= 0;}{ void* subst_t1= Cyc_Tcutil_substitute( _temp120, _temp141); if( !
! Cyc_Tcdecl_check_type( _temp128, subst_t1)){ Cyc_Tcdecl_merr( loc, msg,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp169; _temp169.tag= Cyc_Std_String_pa;
! _temp169.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( subst_t1);{ struct Cyc_Std_String_pa_struct
! _temp168; _temp168.tag= Cyc_Std_String_pa; _temp168.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp128);{ struct Cyc_Std_String_pa_struct _temp167; _temp167.tag= Cyc_Std_String_pa;
! _temp167.f1=( struct _tagged_arr)* _temp132;{ struct Cyc_Std_String_pa_struct
! _temp166; _temp166.tag= Cyc_Std_String_pa; _temp166.f1=( struct _tagged_arr)
! _temp89;{ struct Cyc_Std_String_pa_struct _temp165; _temp165.tag= Cyc_Std_String_pa;
! _temp165.f1=( struct _tagged_arr) t;{ void* _temp164[ 5u]={& _temp165,& _temp166,&
! _temp167,& _temp168,& _temp169}; Cyc_Std_aprintf( _tag_arr("%s %s : type mismatch on field %s: %s != %s",
! sizeof( unsigned char), 44u), _tag_arr( _temp164, sizeof( void*), 5u));}}}}}}));
! _temp90= 0;}}}} if( _temp118 !=  0){ Cyc_Tcdecl_merr( loc, msg,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp173; _temp173.tag= Cyc_Std_String_pa;
! _temp173.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( _temp118))->hd)->name;{ struct Cyc_Std_String_pa_struct _temp172;
! _temp172.tag= Cyc_Std_String_pa; _temp172.f1=( struct _tagged_arr) _temp89;{
! struct Cyc_Std_String_pa_struct _temp171; _temp171.tag= Cyc_Std_String_pa;
! _temp171.f1=( struct _tagged_arr) t;{ void* _temp170[ 3u]={& _temp171,& _temp172,&
! _temp173}; Cyc_Std_aprintf( _tag_arr("%s %s is missing field %s", sizeof(
! unsigned char), 26u), _tag_arr( _temp170, sizeof( void*), 3u));}}}})); _temp90=
! 0;} if( _temp113 !=  0){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp177; _temp177.tag= Cyc_Std_String_pa;
! _temp177.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( _temp113))->hd)->name;{ struct Cyc_Std_String_pa_struct _temp176;
! _temp176.tag= Cyc_Std_String_pa; _temp176.f1=( struct _tagged_arr) _temp89;{
! struct Cyc_Std_String_pa_struct _temp175; _temp175.tag= Cyc_Std_String_pa;
! _temp175.f1=( struct _tagged_arr) t;{ void* _temp174[ 3u]={& _temp175,& _temp176,&
! _temp177}; Cyc_Std_aprintf( _tag_arr("%s %s has extra field %s", sizeof(
! unsigned char), 25u), _tag_arr( _temp174, sizeof( void*), 3u));}}}})); _temp90=
! 0;} d2= d0; goto _LL99;} _LL99:;} if( ! _temp90){ return 0;} if( _temp95 == (
! void*) d2->sc){ return( struct Cyc_Absyn_Structdecl*) d2;} else{ d2=({ struct
! Cyc_Absyn_Structdecl* _temp178=( struct Cyc_Absyn_Structdecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl)); _temp178[ 0]=* d2; _temp178;});( void*)(
! d2->sc=( void*) _temp95); return( struct Cyc_Absyn_Structdecl*) d2;}}}} struct
  Cyc_Absyn_Structdecl* Cyc_Tcdecl_merge_structdecl( struct Cyc_Absyn_Structdecl*
  d0, struct Cyc_Absyn_Structdecl* d1, struct Cyc_Position_Segment* loc, struct
  _tagged_arr* msg){ return Cyc_Tcdecl_merge_struct_or_union_decl( d0, d1,
***************
*** 867,1332 ****
  Cyc_Absyn_Uniondecl*) Cyc_Tcdecl_merge_struct_or_union_decl(( struct Cyc_Absyn_Structdecl*)
  d0,( struct Cyc_Absyn_Structdecl*) d1, _tag_arr("union", sizeof( unsigned char),
  6u), loc, msg);} inline static struct _tagged_arr Cyc_Tcdecl_is_x2string( int
! is_x){ return is_x? _tag_arr("xtunion", sizeof( unsigned char), 8u): _tag_arr("tunion",
! sizeof( unsigned char), 7u);} struct _tuple7{ struct Cyc_Absyn_Tqual f1; void*
! f2; } ; static struct Cyc_Absyn_Tunionfield* Cyc_Tcdecl_merge_tunionfield(
  struct Cyc_Absyn_Tunionfield* f0, struct Cyc_Absyn_Tunionfield* f1, struct Cyc_List_List*
  inst, struct _tagged_arr t, struct _tagged_arr v, struct _tagged_arr* msg){
  struct Cyc_Position_Segment* loc= f1->loc; if( Cyc_Std_zstrptrcmp((* f0->name).f2,(*
! f1->name).f2) !=  0){({ struct Cyc_Std_String_pa_struct _temp186; _temp186.tag=
! Cyc_Std_String_pa; _temp186.f1=( struct _tagged_arr)*(* f0->name).f2;{ struct
! Cyc_Std_String_pa_struct _temp185; _temp185.tag= Cyc_Std_String_pa; _temp185.f1=(
! struct _tagged_arr)*(* f1->name).f2;{ struct Cyc_Std_String_pa_struct _temp184;
! _temp184.tag= Cyc_Std_String_pa; _temp184.f1=( struct _tagged_arr) v;{ struct
  Cyc_Std_String_pa_struct _temp183; _temp183.tag= Cyc_Std_String_pa; _temp183.f1=(
! struct _tagged_arr) t;{ void* _temp182[ 4u]={& _temp183,& _temp184,& _temp185,&
! _temp186}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s: field name mismatch %s != %s",
! sizeof( unsigned char), 36u), _tag_arr( _temp182, sizeof( void*), 4u));}}}}});
! return 0;}{ struct _tagged_arr _temp187=*(* f0->name).f2; int _temp193; void*
! _temp195; struct _tuple3 _temp191= Cyc_Tcdecl_merge_scope(( void*) f0->sc,( void*)
! f1->sc,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp190;
! _temp190.tag= Cyc_Std_String_pa; _temp190.f1=( struct _tagged_arr) v;{ struct
! Cyc_Std_String_pa_struct _temp189; _temp189.tag= Cyc_Std_String_pa; _temp189.f1=(
! struct _tagged_arr) t;{ void* _temp188[ 2u]={& _temp189,& _temp190}; Cyc_Std_aprintf(
! _tag_arr("in %s %s, field", sizeof( unsigned char), 16u), _tag_arr( _temp188,
! sizeof( void*), 2u));}}}), _temp187, loc, msg); _LL196: _temp195= _temp191.f1;
! goto _LL194; _LL194: _temp193= _temp191.f2; goto _LL192; _LL192: { struct Cyc_List_List*
! _temp197= f0->tvs; struct Cyc_List_List* _temp198= f1->tvs; if((( int(*)( struct
! Cyc_List_List* x)) Cyc_List_length)( _temp197) != (( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( _temp198)){({ struct Cyc_Std_String_pa_struct _temp202;
! _temp202.tag= Cyc_Std_String_pa; _temp202.f1=( struct _tagged_arr) _temp187;{
! struct Cyc_Std_String_pa_struct _temp201; _temp201.tag= Cyc_Std_String_pa;
! _temp201.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp200;
! _temp200.tag= Cyc_Std_String_pa; _temp200.f1=( struct _tagged_arr) t;{ void*
! _temp199[ 3u]={& _temp200,& _temp201,& _temp202}; Cyc_Tcdecl_merr( loc, msg,
! _tag_arr("%s %s, field %s: type parameter number mismatch", sizeof(
! unsigned char), 48u), _tag_arr( _temp199, sizeof( void*), 3u));}}}}); return 0;}{
! struct Cyc_List_List* _temp203= Cyc_Tcdecl_build_tvs_map( _temp197, _temp198);
! struct Cyc_List_List* _temp204= f0->typs; struct Cyc_List_List* _temp205= f1->typs;
! if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp204) != (( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp205)){({ struct Cyc_Std_String_pa_struct
! _temp209; _temp209.tag= Cyc_Std_String_pa; _temp209.f1=( struct _tagged_arr)
! _temp187;{ struct Cyc_Std_String_pa_struct _temp208; _temp208.tag= Cyc_Std_String_pa;
! _temp208.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp207;
! _temp207.tag= Cyc_Std_String_pa; _temp207.f1=( struct _tagged_arr) t;{ void*
! _temp206[ 3u]={& _temp207,& _temp208,& _temp209}; Cyc_Tcdecl_merr( loc, msg,
! _tag_arr("%s %s, field %s: parameter number mismatch", sizeof( unsigned char),
! 43u), _tag_arr( _temp206, sizeof( void*), 3u));}}}}); _temp193= 0;} for( 0;
! _temp204 !=  0;( _temp204=(( struct Cyc_List_List*) _check_null( _temp204))->tl,
! _temp205=(( struct Cyc_List_List*) _check_null( _temp205))->tl)){ if( ! Cyc_Tcutil_equal_tqual((*((
! struct _tuple7*)(( struct Cyc_List_List*) _check_null( _temp204))->hd)).f1,(*((
! struct _tuple7*)(( struct Cyc_List_List*) _check_null( _temp205))->hd)).f1)){({
! struct Cyc_Std_String_pa_struct _temp213; _temp213.tag= Cyc_Std_String_pa;
! _temp213.f1=( struct _tagged_arr) _temp187;{ struct Cyc_Std_String_pa_struct
! _temp212; _temp212.tag= Cyc_Std_String_pa; _temp212.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp211; _temp211.tag= Cyc_Std_String_pa;
! _temp211.f1=( struct _tagged_arr) t;{ void* _temp210[ 3u]={& _temp211,& _temp212,&
! _temp213}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s, field %s: parameter qualifier",
! sizeof( unsigned char), 37u), _tag_arr( _temp210, sizeof( void*), 3u));}}}});
! _temp193= 0;}{ void* subst_t1= Cyc_Tcutil_substitute((( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp203,
! inst),(*(( struct _tuple7*)(( struct Cyc_List_List*) _check_null( _temp205))->hd)).f2);
  if( ! Cyc_Tcdecl_check_type((*(( struct _tuple7*)(( struct Cyc_List_List*)
! _check_null( _temp204))->hd)).f2, subst_t1)){({ struct Cyc_Std_String_pa_struct
! _temp219; _temp219.tag= Cyc_Std_String_pa; _temp219.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! subst_t1);{ struct Cyc_Std_String_pa_struct _temp218; _temp218.tag= Cyc_Std_String_pa;
! _temp218.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((*(( struct _tuple7*)((
! struct Cyc_List_List*) _check_null( _temp204))->hd)).f2);{ struct Cyc_Std_String_pa_struct
! _temp217; _temp217.tag= Cyc_Std_String_pa; _temp217.f1=( struct _tagged_arr)
! _temp187;{ struct Cyc_Std_String_pa_struct _temp216; _temp216.tag= Cyc_Std_String_pa;
! _temp216.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp215;
! _temp215.tag= Cyc_Std_String_pa; _temp215.f1=( struct _tagged_arr) t;{ void*
! _temp214[ 5u]={& _temp215,& _temp216,& _temp217,& _temp218,& _temp219}; Cyc_Tcdecl_merr(
! loc, msg, _tag_arr("%s %s, field %s: parameter type mismatch %s != %s", sizeof(
! unsigned char), 50u), _tag_arr( _temp214, sizeof( void*), 5u));}}}}}}); _temp193=
! 0;}}} if( ! _temp193){ return 0;} if(( void*) f0->sc !=  _temp195){ struct Cyc_Absyn_Tunionfield*
! _temp220=({ struct Cyc_Absyn_Tunionfield* _temp221=( struct Cyc_Absyn_Tunionfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield)); _temp221[ 0]=* f0; _temp221;});(
! void*)((( struct Cyc_Absyn_Tunionfield*) _check_null( _temp220))->sc=( void*)
! _temp195); return _temp220;} else{ return( struct Cyc_Absyn_Tunionfield*) f0;}}}}}
! static int Cyc_Tcdecl_substitute_tunionfield_f1( struct _tagged_arr* name,
! struct Cyc_Absyn_Tvar* x){ return Cyc_Std_strptrcmp( x->name, name) ==  0;}
! static struct _tuple7* Cyc_Tcdecl_substitute_tunionfield_f2( struct Cyc_List_List*
! inst, struct _tuple7* x){ struct _tuple7 _temp224; void* _temp225; struct Cyc_Absyn_Tqual
! _temp227; struct _tuple7* _temp222= x; _temp224=* _temp222; _LL228: _temp227=
! _temp224.f1; goto _LL226; _LL226: _temp225= _temp224.f2; goto _LL223; _LL223:
! return({ struct _tuple7* _temp229=( struct _tuple7*) _cycalloc( sizeof( struct
! _tuple7)); _temp229->f1= _temp227; _temp229->f2= Cyc_Tcutil_substitute( inst,
! _temp225); _temp229;});} static struct Cyc_Absyn_Tunionfield* Cyc_Tcdecl_substitute_tunionfield(
  struct Cyc_List_List* d0tvs, struct Cyc_List_List* d1tvs, struct Cyc_List_List*
! inst1, struct Cyc_Absyn_Tunionfield* f1){ struct Cyc_Absyn_Tunionfield* _temp230=({
! struct Cyc_Absyn_Tunionfield* _temp240=( struct Cyc_Absyn_Tunionfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield)); _temp240[ 0]=* f1; _temp240;});
! struct Cyc_List_List* _temp231= 0;{ struct Cyc_List_List* _temp232= f1->tvs;
! for( 0; _temp232 !=  0; _temp232=(( struct Cyc_List_List*) _check_null( _temp232))->tl){
  struct Cyc_Absyn_Tvar* tv=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( _temp232))->hd; if((( int(*)( int(* pred)( struct _tagged_arr*,
  struct Cyc_Absyn_Tvar*), struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)(
  Cyc_Tcdecl_substitute_tunionfield_f1, tv->name, d0tvs)? 1:(( int(*)( int(* pred)(
  struct _tagged_arr*, struct Cyc_Absyn_Tvar*), struct _tagged_arr* env, struct
  Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcdecl_substitute_tunionfield_f1, tv->name,
  d1tvs)){ int i= 0; struct _tagged_arr base=* tv->name; struct _tagged_arr*
! new_name; do { new_name=({ struct _tagged_arr* _temp233=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp233[ 0]=( struct _tagged_arr) Cyc_Std_strconcat(
! base,( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp235; _temp235.tag=
! Cyc_Std_Int_pa; _temp235.f1=( int)(( unsigned int) i);{ void* _temp234[ 1u]={&
! _temp235}; Cyc_Std_aprintf( _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr(
! _temp234, sizeof( void*), 1u));}})); _temp233;}); i ++;} while ((( int(*)( int(*
  pred)( struct _tagged_arr*, struct Cyc_Absyn_Tvar*), struct _tagged_arr* env,
  struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcdecl_substitute_tunionfield_f1,
  new_name, d0tvs)? 1:(( int(*)( int(* pred)( struct _tagged_arr*, struct Cyc_Absyn_Tvar*),
  struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcdecl_substitute_tunionfield_f1,
! tv->name, d1tvs)); tv=({ struct Cyc_Absyn_Tvar* _temp236=( struct Cyc_Absyn_Tvar*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tvar)); _temp236[ 0]=* tv; _temp236;}); tv->name=
! new_name;} _temp231=({ struct Cyc_List_List* _temp237=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp237->hd=( void*) tv; _temp237->tl=
! _temp231; _temp237;});}} _temp231=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_imp_rev)( _temp231); _temp230->tvs= _temp231;{ struct Cyc_List_List*
! _temp238= Cyc_Tcdecl_build_tvs_map( _temp231, f1->tvs); struct Cyc_List_List*
! _temp239=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_append)( _temp238, inst1); _temp230->typs=(( struct Cyc_List_List*(*)(
  struct _tuple7*(* f)( struct Cyc_List_List*, struct _tuple7*), struct Cyc_List_List*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcdecl_substitute_tunionfield_f2,
! _temp239, f1->typs); return _temp230;}} static struct Cyc_List_List* Cyc_Tcdecl_merge_xtunion_fields(
  struct Cyc_List_List* f0s, struct Cyc_List_List* f1s, struct Cyc_List_List* inst,
  struct Cyc_List_List* tvs0, struct Cyc_List_List* tvs1, int* res, int* incl,
  struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment* loc,
  struct _tagged_arr* msg){ struct Cyc_List_List** f2sp=({ struct Cyc_List_List**
! _temp249=( struct Cyc_List_List**) _cycalloc( sizeof( struct Cyc_List_List*));
! _temp249[ 0]= 0; _temp249;}); struct Cyc_List_List** _temp241= f2sp; int cmp= -
  1; for( 0; f0s !=  0? f1s !=  0: 0; f1s=(( struct Cyc_List_List*) _check_null(
  f1s))->tl){ while( f0s !=  0?( cmp= Cyc_Absyn_qvar_cmp((( struct Cyc_Absyn_Tunionfield*)((
  struct Cyc_List_List*) _check_null( f0s))->hd)->name,(( struct Cyc_Absyn_Tunionfield*)((
  struct Cyc_List_List*) _check_null( f1s))->hd)->name)) <  0: 0) { struct Cyc_List_List*
! _temp242=({ struct Cyc_List_List* _temp243=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp243->hd=( void*)(( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( f0s))->hd); _temp243->tl= 0; _temp243;});*
! _temp241= _temp242; _temp241=&(( struct Cyc_List_List*) _check_null( _temp242))->tl;
  f0s=(( struct Cyc_List_List*) _check_null( f0s))->tl;} if( f0s ==  0? 1: cmp > 
! 0){* incl= 0;{ struct Cyc_List_List* _temp244=({ struct Cyc_List_List* _temp245=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp245->hd=(
  void*) Cyc_Tcdecl_substitute_tunionfield( tvs0, tvs1, inst,( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( f1s))->hd); _temp245->tl= 0; _temp245;});*
! _temp241= _temp244; _temp241=&(( struct Cyc_List_List*) _check_null( _temp244))->tl;}}
! else{ struct Cyc_Absyn_Tunionfield* _temp246= Cyc_Tcdecl_merge_tunionfield((
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( f0s))->hd,(
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( f1s))->hd,
! inst, t, v, msg); if( _temp246 !=  0){ if( _temp246 != ( struct Cyc_Absyn_Tunionfield*)((
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( f0s))->hd)){*
! incl= 0;}{ struct Cyc_List_List* _temp247=({ struct Cyc_List_List* _temp248=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp248->hd=(
! void*)(( struct Cyc_Absyn_Tunionfield*) _check_null( _temp246)); _temp248->tl= 0;
! _temp248;});* _temp241= _temp247; _temp241=&(( struct Cyc_List_List*)
! _check_null( _temp247))->tl;}} else{* res= 0;} f0s=(( struct Cyc_List_List*)
! _check_null( f0s))->tl;}} if( f1s !=  0){* incl= 0;* _temp241= f1s;} else{*
! _temp241= f0s;} return* f2sp;} struct _tuple8{ struct Cyc_List_List* f1; struct
  Cyc_List_List* f2; } ; static struct _tuple8 Cyc_Tcdecl_split( struct Cyc_List_List*
! f){ if( f ==  0){ return({ struct _tuple8 _temp250; _temp250.f1= 0; _temp250.f2=
! 0; _temp250;});} if((( struct Cyc_List_List*) _check_null( f))->tl ==  0){
! return({ struct _tuple8 _temp251; _temp251.f1= f; _temp251.f2= 0; _temp251;});}{
! struct Cyc_List_List* _temp254; struct Cyc_List_List* _temp256; struct _tuple8
! _temp252= Cyc_Tcdecl_split((( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( f))->tl))->tl); _LL257: _temp256= _temp252.f1; goto _LL255; _LL255:
! _temp254= _temp252.f2; goto _LL253; _LL253: return({ struct _tuple8 _temp258;
! _temp258.f1=({ struct Cyc_List_List* _temp260=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp260->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null( f))->hd); _temp260->tl= _temp256; _temp260;}); _temp258.f2=({
! struct Cyc_List_List* _temp259=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp259->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null((( struct Cyc_List_List*) _check_null( f))->tl))->hd); _temp259->tl=
! _temp254; _temp259;}); _temp258;});}} struct Cyc_List_List* Cyc_Tcdecl_sort_xtunion_fields(
  struct Cyc_List_List* f, int* res, struct _tagged_arr* v, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg){ struct Cyc_List_List* _temp263; struct Cyc_List_List*
! _temp265; struct _tuple8 _temp261=(( struct _tuple8(*)( struct Cyc_List_List* f))
! Cyc_Tcdecl_split)( f); _LL266: _temp265= _temp261.f1; goto _LL264; _LL264:
! _temp263= _temp261.f2; goto _LL262; _LL262: if( _temp265 !=  0?(( struct Cyc_List_List*)
! _check_null( _temp265))->tl !=  0: 0){ _temp265= Cyc_Tcdecl_sort_xtunion_fields(
! _temp265, res, v, loc, msg);} if( _temp263 !=  0?(( struct Cyc_List_List*)
! _check_null( _temp263))->tl !=  0: 0){ _temp263= Cyc_Tcdecl_sort_xtunion_fields(
! _temp263, res, v, loc, msg);} return Cyc_Tcdecl_merge_xtunion_fields( _temp265,
! _temp263, 0, 0, 0, res,({ int* _temp267=( int*) _cycalloc_atomic( sizeof( int));
! _temp267[ 0]= 1; _temp267;}), _tag_arr("xtunion", sizeof( unsigned char), 8u),*
  v, loc, msg);} struct Cyc_Absyn_Tuniondecl* Cyc_Tcdecl_merge_tuniondecl( struct
  Cyc_Absyn_Tuniondecl* d0, struct Cyc_Absyn_Tuniondecl* d1, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg){ struct _tagged_arr _temp268= Cyc_Absynpp_qvar2string(
  d0->name); struct _tagged_arr t= _tag_arr("[x]tunion", sizeof( unsigned char),
! 10u); int _temp269= 1; if( d0->is_xtunion !=  d1->is_xtunion){({ struct Cyc_Std_String_pa_struct
! _temp273; _temp273.tag= Cyc_Std_String_pa; _temp273.f1=( struct _tagged_arr) Cyc_Tcdecl_is_x2string(
! d1->is_xtunion);{ struct Cyc_Std_String_pa_struct _temp272; _temp272.tag= Cyc_Std_String_pa;
! _temp272.f1=( struct _tagged_arr) Cyc_Tcdecl_is_x2string( d0->is_xtunion);{
! struct Cyc_Std_String_pa_struct _temp271; _temp271.tag= Cyc_Std_String_pa;
! _temp271.f1=( struct _tagged_arr) _temp268;{ void* _temp270[ 3u]={& _temp271,&
! _temp272,& _temp273}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("expected %s to be a %s instead of a %s",
! sizeof( unsigned char), 39u), _tag_arr( _temp270, sizeof( void*), 3u));}}}});
! _temp269= 0;} else{ t= Cyc_Tcdecl_is_x2string( d0->is_xtunion);} if( ! Cyc_Tcdecl_check_tvs(
! d0->tvs, d1->tvs, t, _temp268, loc, msg)){ return 0;}{ int _temp276; void*
! _temp278; struct _tuple3 _temp274= Cyc_Tcdecl_merge_scope(( void*) d0->sc,( void*)
! d1->sc, t, _temp268, loc, msg); _LL279: _temp278= _temp274.f1; goto _LL277;
! _LL277: _temp276= _temp274.f2; goto _LL275; _LL275: if( ! _temp276){ _temp269= 0;}{
! struct Cyc_Absyn_Tuniondecl* d2;{ struct _tuple6 _temp281=({ struct _tuple6
! _temp280; _temp280.f1= d0->fields; _temp280.f2= d1->fields; _temp280;}); struct
! Cyc_Core_Opt* _temp289; struct Cyc_Core_Opt* _temp291; struct Cyc_Core_Opt*
! _temp293; struct Cyc_Core_Opt _temp295; struct Cyc_List_List* _temp296; struct
! Cyc_Core_Opt* _temp298; struct Cyc_Core_Opt _temp300; struct Cyc_List_List*
! _temp301; _LL283: _LL290: _temp289= _temp281.f2; if( _temp289 ==  0){ goto
! _LL284;} else{ goto _LL285;} _LL285: _LL292: _temp291= _temp281.f1; if( _temp291
! ==  0){ goto _LL286;} else{ goto _LL287;} _LL287: _LL299: _temp298= _temp281.f1;
! if( _temp298 ==  0){ goto _LL282;} else{ _temp300=* _temp298; _LL302: _temp301=(
! struct Cyc_List_List*) _temp300.v; goto _LL294;} _LL294: _temp293= _temp281.f2;
! if( _temp293 ==  0){ goto _LL282;} else{ _temp295=* _temp293; _LL297: _temp296=(
! struct Cyc_List_List*) _temp295.v; goto _LL288;} _LL284: d2= d0; goto _LL282;
! _LL286: d2= d1; goto _LL282; _LL288: { struct Cyc_List_List* _temp303= Cyc_Tcdecl_build_tvs_map(
! d0->tvs, d1->tvs); if( d0->is_xtunion){ int _temp304= 1; struct Cyc_List_List*
! _temp305= Cyc_Tcdecl_merge_xtunion_fields( _temp301, _temp296, _temp303, d0->tvs,
! d1->tvs,& _temp269,& _temp304, t, _temp268, loc, msg); if( _temp304){ d2= d0;}
! else{ d2=({ struct Cyc_Absyn_Tuniondecl* _temp306=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp306[ 0]=* d0; _temp306;});(
! void*)( d2->sc=( void*) _temp278); d2->fields=({ struct Cyc_Core_Opt* _temp307=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp307->v=(
! void*) _temp305; _temp307;});}} else{ for( 0; _temp301 !=  0? _temp296 !=  0: 0;(
! _temp301=(( struct Cyc_List_List*) _check_null( _temp301))->tl, _temp296=((
! struct Cyc_List_List*) _check_null( _temp296))->tl)){ Cyc_Tcdecl_merge_tunionfield((
! struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( _temp301))->hd,(
! struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( _temp296))->hd,
! _temp303, t, _temp268, msg);} if( _temp301 !=  0){({ struct Cyc_Std_String_pa_struct
! _temp311; _temp311.tag= Cyc_Std_String_pa; _temp311.f1=( struct _tagged_arr)*(*((
! struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( _temp296))->hd)->name).f2;{
! struct Cyc_Std_String_pa_struct _temp310; _temp310.tag= Cyc_Std_String_pa;
! _temp310.f1=( struct _tagged_arr) _temp268;{ struct Cyc_Std_String_pa_struct
! _temp309; _temp309.tag= Cyc_Std_String_pa; _temp309.f1=( struct _tagged_arr) t;{
! void* _temp308[ 3u]={& _temp309,& _temp310,& _temp311}; Cyc_Tcdecl_merr( loc,
! msg, _tag_arr("%s %s has extra field %s", sizeof( unsigned char), 25u), _tag_arr(
! _temp308, sizeof( void*), 3u));}}}}); _temp269= 0;} if( _temp296 !=  0){({
! struct Cyc_Std_String_pa_struct _temp315; _temp315.tag= Cyc_Std_String_pa;
! _temp315.f1=( struct _tagged_arr)*(*(( struct Cyc_Absyn_Tunionfield*)(( struct
! Cyc_List_List*) _check_null( _temp296))->hd)->name).f2;{ struct Cyc_Std_String_pa_struct
! _temp314; _temp314.tag= Cyc_Std_String_pa; _temp314.f1=( struct _tagged_arr)
! _temp268;{ struct Cyc_Std_String_pa_struct _temp313; _temp313.tag= Cyc_Std_String_pa;
! _temp313.f1=( struct _tagged_arr) t;{ void* _temp312[ 3u]={& _temp313,& _temp314,&
! _temp315}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s is missing field %s",
! sizeof( unsigned char), 26u), _tag_arr( _temp312, sizeof( void*), 3u));}}}});
! _temp269= 0;} d2= d0;} goto _LL282;} _LL282:;} if( ! _temp269){ return 0;} if(
! _temp278 == ( void*) d2->sc){ return( struct Cyc_Absyn_Tuniondecl*) d2;} else{
! d2=({ struct Cyc_Absyn_Tuniondecl* _temp316=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp316[ 0]=* d2; _temp316;});(
! void*)( d2->sc=( void*) _temp278); return( struct Cyc_Absyn_Tuniondecl*) d2;}}}}
! struct Cyc_Absyn_Enumdecl* Cyc_Tcdecl_merge_enumdecl( struct Cyc_Absyn_Enumdecl*
! d0, struct Cyc_Absyn_Enumdecl* d1, struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg){ struct _tagged_arr _temp317= Cyc_Absynpp_qvar2string( d0->name);
! int _temp318= 1; int _temp321; void* _temp323; struct _tuple3 _temp319= Cyc_Tcdecl_merge_scope((
  void*) d0->sc,( void*) d1->sc, _tag_arr("enum", sizeof( unsigned char), 5u),
! _temp317, loc, msg); _LL324: _temp323= _temp319.f1; goto _LL322; _LL322:
! _temp321= _temp319.f2; goto _LL320; _LL320: if( ! _temp321){ _temp318= 0;}{
! struct Cyc_Absyn_Enumdecl* d2;{ struct _tuple6 _temp326=({ struct _tuple6
! _temp325; _temp325.f1= d0->fields; _temp325.f2= d1->fields; _temp325;}); struct
! Cyc_Core_Opt* _temp334; struct Cyc_Core_Opt* _temp336; struct Cyc_Core_Opt*
! _temp338; struct Cyc_Core_Opt _temp340; struct Cyc_List_List* _temp341; struct
! Cyc_Core_Opt* _temp343; struct Cyc_Core_Opt _temp345; struct Cyc_List_List*
! _temp346; _LL328: _LL335: _temp334= _temp326.f2; if( _temp334 ==  0){ goto
! _LL329;} else{ goto _LL330;} _LL330: _LL337: _temp336= _temp326.f1; if( _temp336
! ==  0){ goto _LL331;} else{ goto _LL332;} _LL332: _LL344: _temp343= _temp326.f1;
! if( _temp343 ==  0){ goto _LL327;} else{ _temp345=* _temp343; _LL347: _temp346=(
! struct Cyc_List_List*) _temp345.v; goto _LL339;} _LL339: _temp338= _temp326.f2;
! if( _temp338 ==  0){ goto _LL327;} else{ _temp340=* _temp338; _LL342: _temp341=(
! struct Cyc_List_List*) _temp340.v; goto _LL333;} _LL329: d2= d0; goto _LL327;
! _LL331: d2= d1; goto _LL327; _LL333: for( 0; _temp346 !=  0? _temp341 !=  0: 0;(
! _temp346=(( struct Cyc_List_List*) _check_null( _temp346))->tl, _temp341=((
! struct Cyc_List_List*) _check_null( _temp341))->tl)){ struct Cyc_Absyn_Enumfield
! _temp350; struct Cyc_Position_Segment* _temp351; struct Cyc_Absyn_Exp* _temp353;
! struct _tuple0* _temp355; struct _tuple0 _temp357; struct _tagged_arr* _temp358;
! struct Cyc_Absyn_Enumfield* _temp348=( struct Cyc_Absyn_Enumfield*)(( struct Cyc_List_List*)
! _check_null( _temp346))->hd; _temp350=* _temp348; _LL356: _temp355= _temp350.name;
! _temp357=* _temp355; _LL359: _temp358= _temp357.f2; goto _LL354; _LL354:
! _temp353= _temp350.tag; goto _LL352; _LL352: _temp351= _temp350.loc; goto _LL349;
! _LL349: { struct Cyc_Absyn_Enumfield _temp362; struct Cyc_Position_Segment*
! _temp363; struct Cyc_Absyn_Exp* _temp365; struct _tuple0* _temp367; struct
! _tuple0 _temp369; struct _tagged_arr* _temp370; struct Cyc_Absyn_Enumfield*
! _temp360=( struct Cyc_Absyn_Enumfield*)(( struct Cyc_List_List*) _check_null(
! _temp341))->hd; _temp362=* _temp360; _LL368: _temp367= _temp362.name; _temp369=*
! _temp367; _LL371: _temp370= _temp369.f2; goto _LL366; _LL366: _temp365= _temp362.tag;
! goto _LL364; _LL364: _temp363= _temp362.loc; goto _LL361; _LL361: if( Cyc_Std_zstrptrcmp(
! _temp358, _temp370) !=  0){({ struct Cyc_Std_String_pa_struct _temp375; _temp375.tag=
! Cyc_Std_String_pa; _temp375.f1=( struct _tagged_arr)* _temp370;{ struct Cyc_Std_String_pa_struct
! _temp374; _temp374.tag= Cyc_Std_String_pa; _temp374.f1=( struct _tagged_arr)*
! _temp358;{ struct Cyc_Std_String_pa_struct _temp373; _temp373.tag= Cyc_Std_String_pa;
! _temp373.f1=( struct _tagged_arr) _temp317;{ void* _temp372[ 3u]={& _temp373,&
! _temp374,& _temp375}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("enum %s: field name mismatch %s != %s",
! sizeof( unsigned char), 38u), _tag_arr( _temp372, sizeof( void*), 3u));}}}});
! _temp318= 0;} if( Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp353)) !=  Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp365))){({ struct Cyc_Std_String_pa_struct _temp378; _temp378.tag=
! Cyc_Std_String_pa; _temp378.f1=( struct _tagged_arr)* _temp370;{ struct Cyc_Std_String_pa_struct
! _temp377; _temp377.tag= Cyc_Std_String_pa; _temp377.f1=( struct _tagged_arr)
! _temp317;{ void* _temp376[ 2u]={& _temp377,& _temp378}; Cyc_Tcdecl_merr( loc,
! msg, _tag_arr("enum %s, field %s, value mismatch", sizeof( unsigned char), 34u),
! _tag_arr( _temp376, sizeof( void*), 2u));}}}); _temp318= 0;}}} d2= d0; goto
! _LL327; _LL327:;} if( ! _temp318){ return 0;} if(( void*) d2->sc ==  _temp323){
  return( struct Cyc_Absyn_Enumdecl*) d2;} else{ d2=({ struct Cyc_Absyn_Enumdecl*
! _temp379=( struct Cyc_Absyn_Enumdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl));
! _temp379[ 0]=* d2; _temp379;});( void*)( d2->sc=( void*) _temp323); return(
  struct Cyc_Absyn_Enumdecl*) d2;}}} inline static struct _tuple3 Cyc_Tcdecl_check_var_or_fn_decl(
  void* sc0, void* t0, struct Cyc_Absyn_Tqual tq0, struct Cyc_List_List* atts0,
  void* sc1, void* t1, struct Cyc_Absyn_Tqual tq1, struct Cyc_List_List* atts1,
  struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment* loc,
! struct _tagged_arr* msg){ int _temp380= 1; int _temp383; void* _temp385; struct
! _tuple3 _temp381= Cyc_Tcdecl_merge_scope( sc0, sc1, t, v, loc, msg); _LL386:
! _temp385= _temp381.f1; goto _LL384; _LL384: _temp383= _temp381.f2; goto _LL382;
! _LL382: if( ! _temp383){ _temp380= 0;} if( ! Cyc_Tcdecl_check_type( t0, t1)){({
! struct Cyc_Std_String_pa_struct _temp391; _temp391.tag= Cyc_Std_String_pa;
! _temp391.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t0);{ struct Cyc_Std_String_pa_struct
! _temp390; _temp390.tag= Cyc_Std_String_pa; _temp390.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t1);{ struct Cyc_Std_String_pa_struct _temp389; _temp389.tag= Cyc_Std_String_pa;
! _temp389.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp388;
! _temp388.tag= Cyc_Std_String_pa; _temp388.f1=( struct _tagged_arr) t;{ void*
! _temp387[ 4u]={& _temp388,& _temp389,& _temp390,& _temp391}; Cyc_Tcdecl_merr(
! loc, msg, _tag_arr("%s %s has type %s instead of %s", sizeof( unsigned char), 32u),
! _tag_arr( _temp387, sizeof( void*), 4u));}}}}}); _temp380= 0;} if( ! Cyc_Tcutil_equal_tqual(
! tq0, tq1)){({ struct Cyc_Std_String_pa_struct _temp394; _temp394.tag= Cyc_Std_String_pa;
! _temp394.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp393;
! _temp393.tag= Cyc_Std_String_pa; _temp393.f1=( struct _tagged_arr) t;{ void*
! _temp392[ 2u]={& _temp393,& _temp394}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s has different type qualifiers",
! sizeof( unsigned char), 36u), _tag_arr( _temp392, sizeof( void*), 2u));}}});
! _temp380= 0;} if( ! Cyc_Tcutil_same_atts( atts0, atts1)){({ struct Cyc_Std_String_pa_struct
! _temp397; _temp397.tag= Cyc_Std_String_pa; _temp397.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp396; _temp396.tag= Cyc_Std_String_pa;
! _temp396.f1=( struct _tagged_arr) t;{ void* _temp395[ 2u]={& _temp396,& _temp397};
! Cyc_Tcdecl_merr( loc, msg, _tag_arr("%s %s has different attributes", sizeof(
! unsigned char), 31u), _tag_arr( _temp395, sizeof( void*), 2u));}}});({ void*
! _temp398[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("previous attributes: ",
! sizeof( unsigned char), 22u), _tag_arr( _temp398, sizeof( void*), 0u));}); for(
  0; atts0 !=  0; atts0=(( struct Cyc_List_List*) _check_null( atts0))->tl){({
! struct Cyc_Std_String_pa_struct _temp400; _temp400.tag= Cyc_Std_String_pa;
! _temp400.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string(( void*)(( struct
! Cyc_List_List*) _check_null( atts0))->hd);{ void* _temp399[ 1u]={& _temp400};
  Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s ", sizeof( unsigned char), 4u),
! _tag_arr( _temp399, sizeof( void*), 1u));}});}({ void* _temp401[ 0u]={}; Cyc_Std_fprintf(
  Cyc_Std_stderr, _tag_arr("\ncurrent attributes: ", sizeof( unsigned char), 22u),
! _tag_arr( _temp401, sizeof( void*), 0u));}); for( 0; atts1 !=  0; atts1=((
  struct Cyc_List_List*) _check_null( atts1))->tl){({ struct Cyc_Std_String_pa_struct
! _temp403; _temp403.tag= Cyc_Std_String_pa; _temp403.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( atts1))->hd);{ void* _temp402[ 1u]={&
! _temp403}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s ", sizeof(
! unsigned char), 4u), _tag_arr( _temp402, sizeof( void*), 1u));}});}({ void*
! _temp404[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("\n", sizeof(
! unsigned char), 2u), _tag_arr( _temp404, sizeof( void*), 0u));}); _temp380= 0;}
! return({ struct _tuple3 _temp405; _temp405.f1= _temp385; _temp405.f2= _temp380;
! _temp405;});} struct Cyc_Absyn_Vardecl* Cyc_Tcdecl_merge_vardecl( struct Cyc_Absyn_Vardecl*
  d0, struct Cyc_Absyn_Vardecl* d1, struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg){ struct _tagged_arr _temp406= Cyc_Absynpp_qvar2string( d0->name);
! int _temp409; void* _temp411; struct _tuple3 _temp407= Cyc_Tcdecl_check_var_or_fn_decl((
  void*) d0->sc,( void*) d0->type, d0->tq, d0->attributes,( void*) d1->sc,( void*)
  d1->type, d1->tq, d1->attributes, _tag_arr("variable", sizeof( unsigned char), 9u),
! _temp406, loc, msg); _LL412: _temp411= _temp407.f1; goto _LL410; _LL410:
! _temp409= _temp407.f2; goto _LL408; _LL408: if( ! _temp409){ return 0;} if((
! void*) d0->sc ==  _temp411){ return( struct Cyc_Absyn_Vardecl*) d0;} else{
! struct Cyc_Absyn_Vardecl* _temp413=({ struct Cyc_Absyn_Vardecl* _temp414=(
  struct Cyc_Absyn_Vardecl*) _cycalloc( sizeof( struct Cyc_Absyn_Vardecl));
! _temp414[ 0]=* d0; _temp414;});( void*)((( struct Cyc_Absyn_Vardecl*)
! _check_null( _temp413))->sc=( void*) _temp411); return _temp413;}} struct Cyc_Absyn_Typedefdecl*
  Cyc_Tcdecl_merge_typedefdecl( struct Cyc_Absyn_Typedefdecl* d0, struct Cyc_Absyn_Typedefdecl*
  d1, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){ struct
! _tagged_arr _temp415= Cyc_Absynpp_qvar2string( d0->name); if( ! Cyc_Tcdecl_check_tvs(
! d0->tvs, d1->tvs, _tag_arr("typedef", sizeof( unsigned char), 8u), _temp415, loc,
! msg)){ return 0;}{ struct Cyc_List_List* _temp416= Cyc_Tcdecl_build_tvs_map( d0->tvs,
! d1->tvs); void* subst_defn1= Cyc_Tcutil_substitute( _temp416,( void*) d1->defn);
! if( ! Cyc_Tcdecl_check_type(( void*) d0->defn, subst_defn1)){({ struct Cyc_Std_String_pa_struct
! _temp420; _temp420.tag= Cyc_Std_String_pa; _temp420.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*) d0->defn);{ struct Cyc_Std_String_pa_struct _temp419; _temp419.tag= Cyc_Std_String_pa;
! _temp419.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( subst_defn1);{ struct
! Cyc_Std_String_pa_struct _temp418; _temp418.tag= Cyc_Std_String_pa; _temp418.f1=(
! struct _tagged_arr) _temp415;{ void* _temp417[ 3u]={& _temp418,& _temp419,&
! _temp420}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("typedef %s does not refer to the same type: %s != %s",
! sizeof( unsigned char), 53u), _tag_arr( _temp417, sizeof( void*), 3u));}}}});
  return 0;} return( struct Cyc_Absyn_Typedefdecl*) d0;}} void* Cyc_Tcdecl_merge_binding(
  void* b0, void* b1, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){
! struct _tuple4 _temp422=({ struct _tuple4 _temp421; _temp421.f1= b0; _temp421.f2=
! b1; _temp421;}); void* _temp436; void* _temp438; void* _temp440; struct Cyc_Absyn_Vardecl*
! _temp442; void* _temp444; struct Cyc_Absyn_Vardecl* _temp446; void* _temp448;
! struct Cyc_Absyn_Fndecl* _temp450; void* _temp452; struct Cyc_Absyn_Vardecl*
! _temp454; void* _temp456; struct Cyc_Absyn_Fndecl* _temp458; void* _temp460;
! void* _temp462; struct Cyc_Absyn_Vardecl* _temp464; void* _temp466; struct Cyc_Absyn_Fndecl*
! _temp468; _LL424: _LL439: _temp438= _temp422.f1; if( _temp438 == ( void*) Cyc_Absyn_Unresolved_b){
! goto _LL437;} else{ goto _LL426;} _LL437: _temp436= _temp422.f2; if( _temp436 == (
! void*) Cyc_Absyn_Unresolved_b){ goto _LL425;} else{ goto _LL426;} _LL426: _LL445:
! _temp444= _temp422.f1; if(( unsigned int) _temp444 >  1u?*(( int*) _temp444) == 
! Cyc_Absyn_Global_b: 0){ _LL447: _temp446=(( struct Cyc_Absyn_Global_b_struct*)
! _temp444)->f1; goto _LL441;} else{ goto _LL428;} _LL441: _temp440= _temp422.f2;
! if(( unsigned int) _temp440 >  1u?*(( int*) _temp440) ==  Cyc_Absyn_Global_b: 0){
! _LL443: _temp442=(( struct Cyc_Absyn_Global_b_struct*) _temp440)->f1; goto
! _LL427;} else{ goto _LL428;} _LL428: _LL453: _temp452= _temp422.f1; if((
! unsigned int) _temp452 >  1u?*(( int*) _temp452) ==  Cyc_Absyn_Global_b: 0){
! _LL455: _temp454=(( struct Cyc_Absyn_Global_b_struct*) _temp452)->f1; goto
! _LL449;} else{ goto _LL430;} _LL449: _temp448= _temp422.f2; if(( unsigned int)
! _temp448 >  1u?*(( int*) _temp448) ==  Cyc_Absyn_Funname_b: 0){ _LL451: _temp450=((
! struct Cyc_Absyn_Funname_b_struct*) _temp448)->f1; goto _LL429;} else{ goto
! _LL430;} _LL430: _LL461: _temp460= _temp422.f1; if(( unsigned int) _temp460 >  1u?*((
! int*) _temp460) ==  Cyc_Absyn_Funname_b: 0){ goto _LL457;} else{ goto _LL432;}
! _LL457: _temp456= _temp422.f2; if(( unsigned int) _temp456 >  1u?*(( int*)
! _temp456) ==  Cyc_Absyn_Funname_b: 0){ _LL459: _temp458=(( struct Cyc_Absyn_Funname_b_struct*)
! _temp456)->f1; goto _LL431;} else{ goto _LL432;} _LL432: _LL467: _temp466=
! _temp422.f1; if(( unsigned int) _temp466 >  1u?*(( int*) _temp466) ==  Cyc_Absyn_Funname_b:
! 0){ _LL469: _temp468=(( struct Cyc_Absyn_Funname_b_struct*) _temp466)->f1; goto
! _LL463;} else{ goto _LL434;} _LL463: _temp462= _temp422.f2; if(( unsigned int)
! _temp462 >  1u?*(( int*) _temp462) ==  Cyc_Absyn_Global_b: 0){ _LL465: _temp464=((
! struct Cyc_Absyn_Global_b_struct*) _temp462)->f1; goto _LL433;} else{ goto
! _LL434;} _LL434: goto _LL435; _LL425: return( void*) Cyc_Absyn_Unresolved_b;
! _LL427: { struct Cyc_Absyn_Vardecl* _temp470= Cyc_Tcdecl_merge_vardecl( _temp446,
! _temp442, loc, msg); if( _temp470 ==  0){ return( void*) Cyc_Absyn_Unresolved_b;}
! if(( struct Cyc_Absyn_Vardecl*) _temp446 ==  _temp470){ return b0;} else{ if((
! struct Cyc_Absyn_Vardecl*) _temp442 ==  _temp470){ return b1;} else{ return(
! void*)({ struct Cyc_Absyn_Global_b_struct* _temp471=( struct Cyc_Absyn_Global_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Global_b_struct)); _temp471[ 0]=({ struct
! Cyc_Absyn_Global_b_struct _temp472; _temp472.tag= Cyc_Absyn_Global_b; _temp472.f1=(
! struct Cyc_Absyn_Vardecl*) _check_null( _temp470); _temp472;}); _temp471;});}}}
! _LL429: { int _temp475; struct _tuple3 _temp473= Cyc_Tcdecl_check_var_or_fn_decl((
! void*) _temp454->sc,( void*) _temp454->type, _temp454->tq, _temp454->attributes,(
! void*) _temp450->sc,( void*)(( struct Cyc_Core_Opt*) _check_null( _temp450->cached_typ))->v,
! Cyc_Absyn_empty_tqual(), _temp450->attributes, _tag_arr("function", sizeof(
! unsigned char), 9u), Cyc_Absynpp_qvar2string( _temp454->name), loc, msg); _LL476:
! _temp475= _temp473.f2; goto _LL474; _LL474: return _temp475? b1:( void*) Cyc_Absyn_Unresolved_b;}
! _LL431:({ struct Cyc_Std_String_pa_struct _temp478; _temp478.tag= Cyc_Std_String_pa;
! _temp478.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp458->name);{
! void* _temp477[ 1u]={& _temp478}; Cyc_Tcdecl_merr( loc, msg, _tag_arr("redefinition of function %s",
! sizeof( unsigned char), 28u), _tag_arr( _temp477, sizeof( void*), 1u));}});
! return( void*) Cyc_Absyn_Unresolved_b; _LL433: { int _temp481; struct _tuple3
! _temp479= Cyc_Tcdecl_check_var_or_fn_decl(( void*) _temp468->sc,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp468->cached_typ))->v, Cyc_Absyn_empty_tqual(),
! _temp468->attributes,( void*) _temp464->sc,( void*) _temp464->type, _temp464->tq,
! _temp464->attributes, _tag_arr("variable", sizeof( unsigned char), 9u), Cyc_Absynpp_qvar2string(
! _temp468->name), loc, msg); _LL482: _temp481= _temp479.f2; goto _LL480; _LL480:
! return _temp481? b0:( void*) Cyc_Absyn_Unresolved_b;} _LL435:( int) _throw((
! void*)({ struct Cyc_Core_Invalid_argument_struct* _temp483=( struct Cyc_Core_Invalid_argument_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct)); _temp483[ 0]=({
! struct Cyc_Core_Invalid_argument_struct _temp484; _temp484.tag= Cyc_Core_Invalid_argument;
! _temp484.f1= _tag_arr("Tcdecl::merge_binding", sizeof( unsigned char), 22u);
! _temp484;}); _temp483;})); _LL423:;} struct Cyc_Tcdecl_Xtunionfielddecl* Cyc_Tcdecl_merge_xtunionfielddecl(
! struct Cyc_Tcdecl_Xtunionfielddecl* d0, struct Cyc_Tcdecl_Xtunionfielddecl* d1,
! struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){ struct Cyc_Tcdecl_Xtunionfielddecl
! _temp487; struct Cyc_Absyn_Tunionfield* _temp488; struct Cyc_Absyn_Tuniondecl*
! _temp490; struct Cyc_Tcdecl_Xtunionfielddecl* _temp485= d0; _temp487=* _temp485;
! _LL491: _temp490= _temp487.base; goto _LL489; _LL489: _temp488= _temp487.field;
! goto _LL486; _LL486: { struct Cyc_Tcdecl_Xtunionfielddecl _temp494; struct Cyc_Absyn_Tunionfield*
! _temp495; struct Cyc_Absyn_Tuniondecl* _temp497; struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp492= d1; _temp494=* _temp492; _LL498: _temp497= _temp494.base; goto _LL496;
! _LL496: _temp495= _temp494.field; goto _LL493; _LL493: { struct _tagged_arr
! _temp499= Cyc_Absynpp_qvar2string( _temp488->name); if( Cyc_Absyn_qvar_cmp(
! _temp490->name, _temp497->name) !=  0){({ struct Cyc_Std_String_pa_struct
! _temp503; _temp503.tag= Cyc_Std_String_pa; _temp503.f1=( struct _tagged_arr)
! _temp499;{ struct Cyc_Std_String_pa_struct _temp502; _temp502.tag= Cyc_Std_String_pa;
! _temp502.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp497->name);{
! struct Cyc_Std_String_pa_struct _temp501; _temp501.tag= Cyc_Std_String_pa;
! _temp501.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp490->name);{
! void* _temp500[ 3u]={& _temp501,& _temp502,& _temp503}; Cyc_Tcdecl_merr( loc,
! msg, _tag_arr("xtunions %s and %s have both a field named %s", sizeof(
! unsigned char), 46u), _tag_arr( _temp500, sizeof( void*), 3u));}}}}); return 0;}
! if( ! Cyc_Tcdecl_check_tvs( _temp490->tvs, _temp497->tvs, _tag_arr("xtunion",
! sizeof( unsigned char), 8u), Cyc_Absynpp_qvar2string( _temp490->name), loc, msg)){
! return 0;}{ struct Cyc_List_List* _temp504= Cyc_Tcdecl_build_tvs_map( _temp490->tvs,
! _temp497->tvs); struct Cyc_Absyn_Tunionfield* _temp505= Cyc_Tcdecl_merge_tunionfield(
! _temp488, _temp495, _temp504, _tag_arr("xtunionfield", sizeof( unsigned char),
! 13u), _temp499, msg); if( _temp505 ==  0){ return 0;} if( _temp505 == ( struct
! Cyc_Absyn_Tunionfield*) _temp488){ return( struct Cyc_Tcdecl_Xtunionfielddecl*)
! d0;} else{ return({ struct Cyc_Tcdecl_Xtunionfielddecl* _temp506=( struct Cyc_Tcdecl_Xtunionfielddecl*)
! _cycalloc( sizeof( struct Cyc_Tcdecl_Xtunionfielddecl)); _temp506->base=
! _temp490; _temp506->field=( struct Cyc_Absyn_Tunionfield*) _check_null( _temp505);
! _temp506;});}}}}}
--- 861,1330 ----
  Cyc_Absyn_Uniondecl*) Cyc_Tcdecl_merge_struct_or_union_decl(( struct Cyc_Absyn_Structdecl*)
  d0,( struct Cyc_Absyn_Structdecl*) d1, _tag_arr("union", sizeof( unsigned char),
  6u), loc, msg);} inline static struct _tagged_arr Cyc_Tcdecl_is_x2string( int
! is_x){ if( is_x){ return _tag_arr("xtunion", sizeof( unsigned char), 8u);} else{
! return _tag_arr("tunion", sizeof( unsigned char), 7u);}} struct _tuple7{ struct
! Cyc_Absyn_Tqual f1; void* f2; } ; static struct Cyc_Absyn_Tunionfield* Cyc_Tcdecl_merge_tunionfield(
  struct Cyc_Absyn_Tunionfield* f0, struct Cyc_Absyn_Tunionfield* f1, struct Cyc_List_List*
  inst, struct _tagged_arr t, struct _tagged_arr v, struct _tagged_arr* msg){
  struct Cyc_Position_Segment* loc= f1->loc; if( Cyc_Std_zstrptrcmp((* f0->name).f2,(*
! f1->name).f2) !=  0){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct
  Cyc_Std_String_pa_struct _temp183; _temp183.tag= Cyc_Std_String_pa; _temp183.f1=(
! struct _tagged_arr)*(* f0->name).f2;{ struct Cyc_Std_String_pa_struct _temp182;
! _temp182.tag= Cyc_Std_String_pa; _temp182.f1=( struct _tagged_arr)*(* f1->name).f2;{
! struct Cyc_Std_String_pa_struct _temp181; _temp181.tag= Cyc_Std_String_pa;
! _temp181.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp180;
! _temp180.tag= Cyc_Std_String_pa; _temp180.f1=( struct _tagged_arr) t;{ void*
! _temp179[ 4u]={& _temp180,& _temp181,& _temp182,& _temp183}; Cyc_Std_aprintf(
! _tag_arr("%s %s: field name mismatch %s != %s", sizeof( unsigned char), 36u),
! _tag_arr( _temp179, sizeof( void*), 4u));}}}}})); return 0;}{ struct _tagged_arr
! _temp184=*(* f0->name).f2; int _temp190; void* _temp192; struct _tuple3 _temp188=
! Cyc_Tcdecl_merge_scope(( void*) f0->sc,( void*) f1->sc,( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp187; _temp187.tag= Cyc_Std_String_pa;
! _temp187.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp186;
! _temp186.tag= Cyc_Std_String_pa; _temp186.f1=( struct _tagged_arr) t;{ void*
! _temp185[ 2u]={& _temp186,& _temp187}; Cyc_Std_aprintf( _tag_arr("in %s %s, field",
! sizeof( unsigned char), 16u), _tag_arr( _temp185, sizeof( void*), 2u));}}}),
! _temp184, loc, msg); _LL193: _temp192= _temp188.f1; goto _LL191; _LL191:
! _temp190= _temp188.f2; goto _LL189; _LL189: { struct Cyc_List_List* _temp194= f0->tvs;
! struct Cyc_List_List* _temp195= f1->tvs; if((( int(*)( struct Cyc_List_List* x))
! Cyc_List_length)( _temp194) != (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp195)){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp199; _temp199.tag= Cyc_Std_String_pa; _temp199.f1=( struct _tagged_arr)
! _temp184;{ struct Cyc_Std_String_pa_struct _temp198; _temp198.tag= Cyc_Std_String_pa;
! _temp198.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp197;
! _temp197.tag= Cyc_Std_String_pa; _temp197.f1=( struct _tagged_arr) t;{ void*
! _temp196[ 3u]={& _temp197,& _temp198,& _temp199}; Cyc_Std_aprintf( _tag_arr("%s %s, field %s: type parameter number mismatch",
! sizeof( unsigned char), 48u), _tag_arr( _temp196, sizeof( void*), 3u));}}}}));
! return 0;}{ struct Cyc_List_List* _temp200= Cyc_Tcdecl_build_tvs_map( _temp194,
! _temp195); struct Cyc_List_List* _temp201= f0->typs; struct Cyc_List_List*
! _temp202= f1->typs; if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp201) != (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp202)){
! Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp206; _temp206.tag= Cyc_Std_String_pa; _temp206.f1=( struct _tagged_arr)
! _temp184;{ struct Cyc_Std_String_pa_struct _temp205; _temp205.tag= Cyc_Std_String_pa;
! _temp205.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct _temp204;
! _temp204.tag= Cyc_Std_String_pa; _temp204.f1=( struct _tagged_arr) t;{ void*
! _temp203[ 3u]={& _temp204,& _temp205,& _temp206}; Cyc_Std_aprintf( _tag_arr("%s %s, field %s: parameter number mismatch",
! sizeof( unsigned char), 43u), _tag_arr( _temp203, sizeof( void*), 3u));}}}}));
! _temp190= 0;} for( 0; _temp201 !=  0;( _temp201=(( struct Cyc_List_List*)
! _check_null( _temp201))->tl, _temp202=(( struct Cyc_List_List*) _check_null(
! _temp202))->tl)){ if( ! Cyc_Tcutil_equal_tqual((*(( struct _tuple7*)(( struct
! Cyc_List_List*) _check_null( _temp201))->hd)).f1,(*(( struct _tuple7*)(( struct
! Cyc_List_List*) _check_null( _temp202))->hd)).f1)){ Cyc_Tcdecl_merr( loc, msg,(
! struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp210; _temp210.tag=
! Cyc_Std_String_pa; _temp210.f1=( struct _tagged_arr) _temp184;{ struct Cyc_Std_String_pa_struct
! _temp209; _temp209.tag= Cyc_Std_String_pa; _temp209.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp208; _temp208.tag= Cyc_Std_String_pa;
! _temp208.f1=( struct _tagged_arr) t;{ void* _temp207[ 3u]={& _temp208,& _temp209,&
! _temp210}; Cyc_Std_aprintf( _tag_arr("%s %s, field %s: parameter qualifier",
! sizeof( unsigned char), 37u), _tag_arr( _temp207, sizeof( void*), 3u));}}}}));
! _temp190= 0;}{ void* subst_t1= Cyc_Tcutil_substitute((( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( _temp200,
! inst),(*(( struct _tuple7*)(( struct Cyc_List_List*) _check_null( _temp202))->hd)).f2);
  if( ! Cyc_Tcdecl_check_type((*(( struct _tuple7*)(( struct Cyc_List_List*)
! _check_null( _temp201))->hd)).f2, subst_t1)){ Cyc_Tcdecl_merr( loc, msg,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp216; _temp216.tag= Cyc_Std_String_pa;
! _temp216.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( subst_t1);{ struct Cyc_Std_String_pa_struct
! _temp215; _temp215.tag= Cyc_Std_String_pa; _temp215.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((*((
! struct _tuple7*)(( struct Cyc_List_List*) _check_null( _temp201))->hd)).f2);{
! struct Cyc_Std_String_pa_struct _temp214; _temp214.tag= Cyc_Std_String_pa;
! _temp214.f1=( struct _tagged_arr) _temp184;{ struct Cyc_Std_String_pa_struct
! _temp213; _temp213.tag= Cyc_Std_String_pa; _temp213.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp212; _temp212.tag= Cyc_Std_String_pa;
! _temp212.f1=( struct _tagged_arr) t;{ void* _temp211[ 5u]={& _temp212,& _temp213,&
! _temp214,& _temp215,& _temp216}; Cyc_Std_aprintf( _tag_arr("%s %s, field %s: parameter type mismatch %s != %s",
! sizeof( unsigned char), 50u), _tag_arr( _temp211, sizeof( void*), 5u));}}}}}}));
! _temp190= 0;}}} if( ! _temp190){ return 0;} if(( void*) f0->sc !=  _temp192){
! struct Cyc_Absyn_Tunionfield* _temp217=({ struct Cyc_Absyn_Tunionfield* _temp218=(
! struct Cyc_Absyn_Tunionfield*) _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield));
! _temp218[ 0]=* f0; _temp218;});( void*)((( struct Cyc_Absyn_Tunionfield*)
! _check_null( _temp217))->sc=( void*) _temp192); return _temp217;} else{ return(
! struct Cyc_Absyn_Tunionfield*) f0;}}}}} static int Cyc_Tcdecl_substitute_tunionfield_f1(
! struct _tagged_arr* name, struct Cyc_Absyn_Tvar* x){ return Cyc_Std_strptrcmp( x->name,
! name) ==  0;} static struct _tuple7* Cyc_Tcdecl_substitute_tunionfield_f2(
! struct Cyc_List_List* inst, struct _tuple7* x){ struct _tuple7 _temp221; void*
! _temp222; struct Cyc_Absyn_Tqual _temp224; struct _tuple7* _temp219= x; _temp221=*
! _temp219; _LL225: _temp224= _temp221.f1; goto _LL223; _LL223: _temp222= _temp221.f2;
! goto _LL220; _LL220: return({ struct _tuple7* _temp226=( struct _tuple7*)
! _cycalloc( sizeof( struct _tuple7)); _temp226->f1= _temp224; _temp226->f2= Cyc_Tcutil_substitute(
! inst, _temp222); _temp226;});} static struct Cyc_Absyn_Tunionfield* Cyc_Tcdecl_substitute_tunionfield(
  struct Cyc_List_List* d0tvs, struct Cyc_List_List* d1tvs, struct Cyc_List_List*
! inst1, struct Cyc_Absyn_Tunionfield* f1){ struct Cyc_Absyn_Tunionfield* _temp227=({
! struct Cyc_Absyn_Tunionfield* _temp237=( struct Cyc_Absyn_Tunionfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tunionfield)); _temp237[ 0]=* f1; _temp237;});
! struct Cyc_List_List* _temp228= 0;{ struct Cyc_List_List* _temp229= f1->tvs;
! for( 0; _temp229 !=  0; _temp229=(( struct Cyc_List_List*) _check_null( _temp229))->tl){
  struct Cyc_Absyn_Tvar* tv=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( _temp229))->hd; if((( int(*)( int(* pred)( struct _tagged_arr*,
  struct Cyc_Absyn_Tvar*), struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)(
  Cyc_Tcdecl_substitute_tunionfield_f1, tv->name, d0tvs)? 1:(( int(*)( int(* pred)(
  struct _tagged_arr*, struct Cyc_Absyn_Tvar*), struct _tagged_arr* env, struct
  Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcdecl_substitute_tunionfield_f1, tv->name,
  d1tvs)){ int i= 0; struct _tagged_arr base=* tv->name; struct _tagged_arr*
! new_name; do { new_name=({ struct _tagged_arr* _temp230=( struct _tagged_arr*)
! _cycalloc( sizeof( struct _tagged_arr)); _temp230[ 0]=( struct _tagged_arr) Cyc_Std_strconcat(
! base,( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp232; _temp232.tag=
! Cyc_Std_Int_pa; _temp232.f1=( int)(( unsigned int) i);{ void* _temp231[ 1u]={&
! _temp232}; Cyc_Std_aprintf( _tag_arr("%d", sizeof( unsigned char), 3u), _tag_arr(
! _temp231, sizeof( void*), 1u));}})); _temp230;}); i ++;} while ((( int(*)( int(*
  pred)( struct _tagged_arr*, struct Cyc_Absyn_Tvar*), struct _tagged_arr* env,
  struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcdecl_substitute_tunionfield_f1,
  new_name, d0tvs)? 1:(( int(*)( int(* pred)( struct _tagged_arr*, struct Cyc_Absyn_Tvar*),
  struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcdecl_substitute_tunionfield_f1,
! tv->name, d1tvs)); tv=({ struct Cyc_Absyn_Tvar* _temp233=( struct Cyc_Absyn_Tvar*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tvar)); _temp233[ 0]=* tv; _temp233;}); tv->name=
! new_name;} _temp228=({ struct Cyc_List_List* _temp234=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp234->hd=( void*) tv; _temp234->tl=
! _temp228; _temp234;});}} _temp228=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_imp_rev)( _temp228); _temp227->tvs= _temp228;{ struct Cyc_List_List*
! _temp235= Cyc_Tcdecl_build_tvs_map( _temp228, f1->tvs); struct Cyc_List_List*
! _temp236=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_append)( _temp235, inst1); _temp227->typs=(( struct Cyc_List_List*(*)(
  struct _tuple7*(* f)( struct Cyc_List_List*, struct _tuple7*), struct Cyc_List_List*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcdecl_substitute_tunionfield_f2,
! _temp236, f1->typs); return _temp227;}} static struct Cyc_List_List* Cyc_Tcdecl_merge_xtunion_fields(
  struct Cyc_List_List* f0s, struct Cyc_List_List* f1s, struct Cyc_List_List* inst,
  struct Cyc_List_List* tvs0, struct Cyc_List_List* tvs1, int* res, int* incl,
  struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment* loc,
  struct _tagged_arr* msg){ struct Cyc_List_List** f2sp=({ struct Cyc_List_List**
! _temp246=( struct Cyc_List_List**) _cycalloc( sizeof( struct Cyc_List_List*));
! _temp246[ 0]= 0; _temp246;}); struct Cyc_List_List** _temp238= f2sp; int cmp= -
  1; for( 0; f0s !=  0? f1s !=  0: 0; f1s=(( struct Cyc_List_List*) _check_null(
  f1s))->tl){ while( f0s !=  0?( cmp= Cyc_Absyn_qvar_cmp((( struct Cyc_Absyn_Tunionfield*)((
  struct Cyc_List_List*) _check_null( f0s))->hd)->name,(( struct Cyc_Absyn_Tunionfield*)((
  struct Cyc_List_List*) _check_null( f1s))->hd)->name)) <  0: 0) { struct Cyc_List_List*
! _temp239=({ struct Cyc_List_List* _temp240=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp240->hd=( void*)(( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( f0s))->hd); _temp240->tl= 0; _temp240;});*
! _temp238= _temp239; _temp238=&(( struct Cyc_List_List*) _check_null( _temp239))->tl;
  f0s=(( struct Cyc_List_List*) _check_null( f0s))->tl;} if( f0s ==  0? 1: cmp > 
! 0){* incl= 0;{ struct Cyc_List_List* _temp241=({ struct Cyc_List_List* _temp242=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp242->hd=(
  void*) Cyc_Tcdecl_substitute_tunionfield( tvs0, tvs1, inst,( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( f1s))->hd); _temp242->tl= 0; _temp242;});*
! _temp238= _temp241; _temp238=&(( struct Cyc_List_List*) _check_null( _temp241))->tl;}}
! else{ struct Cyc_Absyn_Tunionfield* _temp243= Cyc_Tcdecl_merge_tunionfield((
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( f0s))->hd,(
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( f1s))->hd,
! inst, t, v, msg); if( _temp243 !=  0){ if( _temp243 != ( struct Cyc_Absyn_Tunionfield*)((
  struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( f0s))->hd)){*
! incl= 0;}{ struct Cyc_List_List* _temp244=({ struct Cyc_List_List* _temp245=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp245->hd=(
! void*)(( struct Cyc_Absyn_Tunionfield*) _check_null( _temp243)); _temp245->tl= 0;
! _temp245;});* _temp238= _temp244; _temp238=&(( struct Cyc_List_List*)
! _check_null( _temp244))->tl;}} else{* res= 0;} f0s=(( struct Cyc_List_List*)
! _check_null( f0s))->tl;}} if( f1s !=  0){* incl= 0;* _temp238= f1s;} else{*
! _temp238= f0s;} return* f2sp;} struct _tuple8{ struct Cyc_List_List* f1; struct
  Cyc_List_List* f2; } ; static struct _tuple8 Cyc_Tcdecl_split( struct Cyc_List_List*
! f){ if( f ==  0){ return({ struct _tuple8 _temp247; _temp247.f1= 0; _temp247.f2=
! 0; _temp247;});} if((( struct Cyc_List_List*) _check_null( f))->tl ==  0){
! return({ struct _tuple8 _temp248; _temp248.f1= f; _temp248.f2= 0; _temp248;});}{
! struct Cyc_List_List* _temp251; struct Cyc_List_List* _temp253; struct _tuple8
! _temp249= Cyc_Tcdecl_split((( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( f))->tl))->tl); _LL254: _temp253= _temp249.f1; goto _LL252; _LL252:
! _temp251= _temp249.f2; goto _LL250; _LL250: return({ struct _tuple8 _temp255;
! _temp255.f1=({ struct Cyc_List_List* _temp257=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp257->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null( f))->hd); _temp257->tl= _temp253; _temp257;}); _temp255.f2=({
! struct Cyc_List_List* _temp256=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp256->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null((( struct Cyc_List_List*) _check_null( f))->tl))->hd); _temp256->tl=
! _temp251; _temp256;}); _temp255;});}} struct Cyc_List_List* Cyc_Tcdecl_sort_xtunion_fields(
  struct Cyc_List_List* f, int* res, struct _tagged_arr* v, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg){ struct Cyc_List_List* _temp260; struct Cyc_List_List*
! _temp262; struct _tuple8 _temp258=(( struct _tuple8(*)( struct Cyc_List_List* f))
! Cyc_Tcdecl_split)( f); _LL263: _temp262= _temp258.f1; goto _LL261; _LL261:
! _temp260= _temp258.f2; goto _LL259; _LL259: if( _temp262 !=  0?(( struct Cyc_List_List*)
! _check_null( _temp262))->tl !=  0: 0){ _temp262= Cyc_Tcdecl_sort_xtunion_fields(
! _temp262, res, v, loc, msg);} if( _temp260 !=  0?(( struct Cyc_List_List*)
! _check_null( _temp260))->tl !=  0: 0){ _temp260= Cyc_Tcdecl_sort_xtunion_fields(
! _temp260, res, v, loc, msg);} return Cyc_Tcdecl_merge_xtunion_fields( _temp262,
! _temp260, 0, 0, 0, res,({ int* _temp264=( int*) _cycalloc_atomic( sizeof( int));
! _temp264[ 0]= 1; _temp264;}), _tag_arr("xtunion", sizeof( unsigned char), 8u),*
  v, loc, msg);} struct Cyc_Absyn_Tuniondecl* Cyc_Tcdecl_merge_tuniondecl( struct
  Cyc_Absyn_Tuniondecl* d0, struct Cyc_Absyn_Tuniondecl* d1, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* msg){ struct _tagged_arr _temp265= Cyc_Absynpp_qvar2string(
  d0->name); struct _tagged_arr t= _tag_arr("[x]tunion", sizeof( unsigned char),
! 10u); int _temp266= 1; if( d0->is_xtunion !=  d1->is_xtunion){ Cyc_Tcdecl_merr(
! loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp270;
! _temp270.tag= Cyc_Std_String_pa; _temp270.f1=( struct _tagged_arr) Cyc_Tcdecl_is_x2string(
! d1->is_xtunion);{ struct Cyc_Std_String_pa_struct _temp269; _temp269.tag= Cyc_Std_String_pa;
! _temp269.f1=( struct _tagged_arr) Cyc_Tcdecl_is_x2string( d0->is_xtunion);{
! struct Cyc_Std_String_pa_struct _temp268; _temp268.tag= Cyc_Std_String_pa;
! _temp268.f1=( struct _tagged_arr) _temp265;{ void* _temp267[ 3u]={& _temp268,&
! _temp269,& _temp270}; Cyc_Std_aprintf( _tag_arr("expected %s to be a %s instead of a %s",
! sizeof( unsigned char), 39u), _tag_arr( _temp267, sizeof( void*), 3u));}}}}));
! _temp266= 0;} else{ t= Cyc_Tcdecl_is_x2string( d0->is_xtunion);} if( ! Cyc_Tcdecl_check_tvs(
! d0->tvs, d1->tvs, t, _temp265, loc, msg)){ return 0;}{ int _temp273; void*
! _temp275; struct _tuple3 _temp271= Cyc_Tcdecl_merge_scope(( void*) d0->sc,( void*)
! d1->sc, t, _temp265, loc, msg); _LL276: _temp275= _temp271.f1; goto _LL274;
! _LL274: _temp273= _temp271.f2; goto _LL272; _LL272: if( ! _temp273){ _temp266= 0;}{
! struct Cyc_Absyn_Tuniondecl* d2;{ struct _tuple6 _temp278=({ struct _tuple6
! _temp277; _temp277.f1= d0->fields; _temp277.f2= d1->fields; _temp277;}); struct
! Cyc_Core_Opt* _temp286; struct Cyc_Core_Opt* _temp288; struct Cyc_Core_Opt*
! _temp290; struct Cyc_Core_Opt _temp292; struct Cyc_List_List* _temp293; struct
! Cyc_Core_Opt* _temp295; struct Cyc_Core_Opt _temp297; struct Cyc_List_List*
! _temp298; _LL280: _LL287: _temp286= _temp278.f2; if( _temp286 ==  0){ goto
! _LL281;} else{ goto _LL282;} _LL282: _LL289: _temp288= _temp278.f1; if( _temp288
! ==  0){ goto _LL283;} else{ goto _LL284;} _LL284: _LL296: _temp295= _temp278.f1;
! if( _temp295 ==  0){ goto _LL279;} else{ _temp297=* _temp295; _LL299: _temp298=(
! struct Cyc_List_List*) _temp297.v; goto _LL291;} _LL291: _temp290= _temp278.f2;
! if( _temp290 ==  0){ goto _LL279;} else{ _temp292=* _temp290; _LL294: _temp293=(
! struct Cyc_List_List*) _temp292.v; goto _LL285;} _LL281: d2= d0; goto _LL279;
! _LL283: d2= d1; goto _LL279; _LL285: { struct Cyc_List_List* _temp300= Cyc_Tcdecl_build_tvs_map(
! d0->tvs, d1->tvs); if( d0->is_xtunion){ int _temp301= 1; struct Cyc_List_List*
! _temp302= Cyc_Tcdecl_merge_xtunion_fields( _temp298, _temp293, _temp300, d0->tvs,
! d1->tvs,& _temp266,& _temp301, t, _temp265, loc, msg); if( _temp301){ d2= d0;}
! else{ d2=({ struct Cyc_Absyn_Tuniondecl* _temp303=( struct Cyc_Absyn_Tuniondecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl)); _temp303[ 0]=* d0; _temp303;});(
! void*)( d2->sc=( void*) _temp275); d2->fields=({ struct Cyc_Core_Opt* _temp304=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp304->v=(
! void*) _temp302; _temp304;});}} else{ for( 0; _temp298 !=  0? _temp293 !=  0: 0;(
! _temp298=(( struct Cyc_List_List*) _check_null( _temp298))->tl, _temp293=((
! struct Cyc_List_List*) _check_null( _temp293))->tl)){ Cyc_Tcdecl_merge_tunionfield((
! struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( _temp298))->hd,(
! struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( _temp293))->hd,
! _temp300, t, _temp265, msg);} if( _temp298 !=  0){ Cyc_Tcdecl_merr( loc, msg,(
! struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp308; _temp308.tag=
! Cyc_Std_String_pa; _temp308.f1=( struct _tagged_arr)*(*(( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp293))->hd)->name).f2;{ struct Cyc_Std_String_pa_struct
! _temp307; _temp307.tag= Cyc_Std_String_pa; _temp307.f1=( struct _tagged_arr)
! _temp265;{ struct Cyc_Std_String_pa_struct _temp306; _temp306.tag= Cyc_Std_String_pa;
! _temp306.f1=( struct _tagged_arr) t;{ void* _temp305[ 3u]={& _temp306,& _temp307,&
! _temp308}; Cyc_Std_aprintf( _tag_arr("%s %s has extra field %s", sizeof(
! unsigned char), 25u), _tag_arr( _temp305, sizeof( void*), 3u));}}}})); _temp266=
! 0;} if( _temp293 !=  0){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp312; _temp312.tag= Cyc_Std_String_pa;
! _temp312.f1=( struct _tagged_arr)*(*(( struct Cyc_Absyn_Tunionfield*)(( struct
! Cyc_List_List*) _check_null( _temp293))->hd)->name).f2;{ struct Cyc_Std_String_pa_struct
! _temp311; _temp311.tag= Cyc_Std_String_pa; _temp311.f1=( struct _tagged_arr)
! _temp265;{ struct Cyc_Std_String_pa_struct _temp310; _temp310.tag= Cyc_Std_String_pa;
! _temp310.f1=( struct _tagged_arr) t;{ void* _temp309[ 3u]={& _temp310,& _temp311,&
! _temp312}; Cyc_Std_aprintf( _tag_arr("%s %s is missing field %s", sizeof(
! unsigned char), 26u), _tag_arr( _temp309, sizeof( void*), 3u));}}}})); _temp266=
! 0;} d2= d0;} goto _LL279;} _LL279:;} if( ! _temp266){ return 0;} if( _temp275 == (
! void*) d2->sc){ return( struct Cyc_Absyn_Tuniondecl*) d2;} else{ d2=({ struct
! Cyc_Absyn_Tuniondecl* _temp313=( struct Cyc_Absyn_Tuniondecl*) _cycalloc(
! sizeof( struct Cyc_Absyn_Tuniondecl)); _temp313[ 0]=* d2; _temp313;});( void*)(
! d2->sc=( void*) _temp275); return( struct Cyc_Absyn_Tuniondecl*) d2;}}}} struct
! Cyc_Absyn_Enumdecl* Cyc_Tcdecl_merge_enumdecl( struct Cyc_Absyn_Enumdecl* d0,
! struct Cyc_Absyn_Enumdecl* d1, struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg){ struct _tagged_arr _temp314= Cyc_Absynpp_qvar2string( d0->name);
! int _temp315= 1; int _temp318; void* _temp320; struct _tuple3 _temp316= Cyc_Tcdecl_merge_scope((
  void*) d0->sc,( void*) d1->sc, _tag_arr("enum", sizeof( unsigned char), 5u),
! _temp314, loc, msg); _LL321: _temp320= _temp316.f1; goto _LL319; _LL319:
! _temp318= _temp316.f2; goto _LL317; _LL317: if( ! _temp318){ _temp315= 0;}{
! struct Cyc_Absyn_Enumdecl* d2;{ struct _tuple6 _temp323=({ struct _tuple6
! _temp322; _temp322.f1= d0->fields; _temp322.f2= d1->fields; _temp322;}); struct
! Cyc_Core_Opt* _temp331; struct Cyc_Core_Opt* _temp333; struct Cyc_Core_Opt*
! _temp335; struct Cyc_Core_Opt _temp337; struct Cyc_List_List* _temp338; struct
! Cyc_Core_Opt* _temp340; struct Cyc_Core_Opt _temp342; struct Cyc_List_List*
! _temp343; _LL325: _LL332: _temp331= _temp323.f2; if( _temp331 ==  0){ goto
! _LL326;} else{ goto _LL327;} _LL327: _LL334: _temp333= _temp323.f1; if( _temp333
! ==  0){ goto _LL328;} else{ goto _LL329;} _LL329: _LL341: _temp340= _temp323.f1;
! if( _temp340 ==  0){ goto _LL324;} else{ _temp342=* _temp340; _LL344: _temp343=(
! struct Cyc_List_List*) _temp342.v; goto _LL336;} _LL336: _temp335= _temp323.f2;
! if( _temp335 ==  0){ goto _LL324;} else{ _temp337=* _temp335; _LL339: _temp338=(
! struct Cyc_List_List*) _temp337.v; goto _LL330;} _LL326: d2= d0; goto _LL324;
! _LL328: d2= d1; goto _LL324; _LL330: for( 0; _temp343 !=  0? _temp338 !=  0: 0;(
! _temp343=(( struct Cyc_List_List*) _check_null( _temp343))->tl, _temp338=((
! struct Cyc_List_List*) _check_null( _temp338))->tl)){ struct Cyc_Absyn_Enumfield
! _temp347; struct Cyc_Position_Segment* _temp348; struct Cyc_Absyn_Exp* _temp350;
! struct _tuple0* _temp352; struct Cyc_Absyn_Enumfield* _temp345=( struct Cyc_Absyn_Enumfield*)((
! struct Cyc_List_List*) _check_null( _temp343))->hd; _temp347=* _temp345; _LL353:
! _temp352= _temp347.name; goto _LL351; _LL351: _temp350= _temp347.tag; goto
! _LL349; _LL349: _temp348= _temp347.loc; goto _LL346; _LL346: { struct Cyc_Absyn_Enumfield
! _temp356; struct Cyc_Position_Segment* _temp357; struct Cyc_Absyn_Exp* _temp359;
! struct _tuple0* _temp361; struct Cyc_Absyn_Enumfield* _temp354=( struct Cyc_Absyn_Enumfield*)((
! struct Cyc_List_List*) _check_null( _temp338))->hd; _temp356=* _temp354; _LL362:
! _temp361= _temp356.name; goto _LL360; _LL360: _temp359= _temp356.tag; goto
! _LL358; _LL358: _temp357= _temp356.loc; goto _LL355; _LL355: if( Cyc_Std_zstrptrcmp((*
! _temp361).f2,(* _temp352).f2) !=  0){ Cyc_Tcdecl_merr( loc, msg,( struct
! _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp366; _temp366.tag= Cyc_Std_String_pa;
! _temp366.f1=( struct _tagged_arr)*(* _temp352).f2;{ struct Cyc_Std_String_pa_struct
! _temp365; _temp365.tag= Cyc_Std_String_pa; _temp365.f1=( struct _tagged_arr)*(*
! _temp361).f2;{ struct Cyc_Std_String_pa_struct _temp364; _temp364.tag= Cyc_Std_String_pa;
! _temp364.f1=( struct _tagged_arr) _temp314;{ void* _temp363[ 3u]={& _temp364,&
! _temp365,& _temp366}; Cyc_Std_aprintf( _tag_arr("enum %s: field name mismatch %s != %s",
! sizeof( unsigned char), 38u), _tag_arr( _temp363, sizeof( void*), 3u));}}}}));
! _temp315= 0;} if( Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp350)) !=  Cyc_Tcdecl_get_uint_const_value(( struct Cyc_Absyn_Exp*)
! _check_null( _temp359))){ Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp369; _temp369.tag= Cyc_Std_String_pa;
! _temp369.f1=( struct _tagged_arr)*(* _temp361).f2;{ struct Cyc_Std_String_pa_struct
! _temp368; _temp368.tag= Cyc_Std_String_pa; _temp368.f1=( struct _tagged_arr)
! _temp314;{ void* _temp367[ 2u]={& _temp368,& _temp369}; Cyc_Std_aprintf(
! _tag_arr("enum %s, field %s, value mismatch", sizeof( unsigned char), 34u),
! _tag_arr( _temp367, sizeof( void*), 2u));}}})); _temp315= 0;}}} d2= d0; goto
! _LL324; _LL324:;} if( ! _temp315){ return 0;} if(( void*) d2->sc ==  _temp320){
  return( struct Cyc_Absyn_Enumdecl*) d2;} else{ d2=({ struct Cyc_Absyn_Enumdecl*
! _temp370=( struct Cyc_Absyn_Enumdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Enumdecl));
! _temp370[ 0]=* d2; _temp370;});( void*)( d2->sc=( void*) _temp320); return(
  struct Cyc_Absyn_Enumdecl*) d2;}}} inline static struct _tuple3 Cyc_Tcdecl_check_var_or_fn_decl(
  void* sc0, void* t0, struct Cyc_Absyn_Tqual tq0, struct Cyc_List_List* atts0,
  void* sc1, void* t1, struct Cyc_Absyn_Tqual tq1, struct Cyc_List_List* atts1,
  struct _tagged_arr t, struct _tagged_arr v, struct Cyc_Position_Segment* loc,
! struct _tagged_arr* msg){ int _temp371= 1; int _temp374; void* _temp376; struct
! _tuple3 _temp372= Cyc_Tcdecl_merge_scope( sc0, sc1, t, v, loc, msg); _LL377:
! _temp376= _temp372.f1; goto _LL375; _LL375: _temp374= _temp372.f2; goto _LL373;
! _LL373: if( ! _temp374){ _temp371= 0;} if( ! Cyc_Tcdecl_check_type( t0, t1)){
! Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp382; _temp382.tag= Cyc_Std_String_pa; _temp382.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t0);{ struct Cyc_Std_String_pa_struct _temp381; _temp381.tag= Cyc_Std_String_pa;
! _temp381.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t1);{ struct Cyc_Std_String_pa_struct
! _temp380; _temp380.tag= Cyc_Std_String_pa; _temp380.f1=( struct _tagged_arr) v;{
! struct Cyc_Std_String_pa_struct _temp379; _temp379.tag= Cyc_Std_String_pa;
! _temp379.f1=( struct _tagged_arr) t;{ void* _temp378[ 4u]={& _temp379,& _temp380,&
! _temp381,& _temp382}; Cyc_Std_aprintf( _tag_arr("%s %s has type %s instead of %s",
! sizeof( unsigned char), 32u), _tag_arr( _temp378, sizeof( void*), 4u));}}}}}));
! _temp371= 0;} if( ! Cyc_Tcutil_equal_tqual( tq0, tq1)){ Cyc_Tcdecl_merr( loc,
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp385; _temp385.tag=
! Cyc_Std_String_pa; _temp385.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct
! _temp384; _temp384.tag= Cyc_Std_String_pa; _temp384.f1=( struct _tagged_arr) t;{
! void* _temp383[ 2u]={& _temp384,& _temp385}; Cyc_Std_aprintf( _tag_arr("%s %s has different type qualifiers",
! sizeof( unsigned char), 36u), _tag_arr( _temp383, sizeof( void*), 2u));}}}));
! _temp371= 0;} if( ! Cyc_Tcutil_same_atts( atts0, atts1)){ Cyc_Tcdecl_merr( loc,
! msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp388; _temp388.tag=
! Cyc_Std_String_pa; _temp388.f1=( struct _tagged_arr) v;{ struct Cyc_Std_String_pa_struct
! _temp387; _temp387.tag= Cyc_Std_String_pa; _temp387.f1=( struct _tagged_arr) t;{
! void* _temp386[ 2u]={& _temp387,& _temp388}; Cyc_Std_aprintf( _tag_arr("%s %s has different attributes",
! sizeof( unsigned char), 31u), _tag_arr( _temp386, sizeof( void*), 2u));}}}));({
! void* _temp389[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("previous attributes: ",
! sizeof( unsigned char), 22u), _tag_arr( _temp389, sizeof( void*), 0u));}); for(
  0; atts0 !=  0; atts0=(( struct Cyc_List_List*) _check_null( atts0))->tl){({
! struct Cyc_Std_String_pa_struct _temp391; _temp391.tag= Cyc_Std_String_pa;
! _temp391.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string(( void*)(( struct
! Cyc_List_List*) _check_null( atts0))->hd);{ void* _temp390[ 1u]={& _temp391};
  Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s ", sizeof( unsigned char), 4u),
! _tag_arr( _temp390, sizeof( void*), 1u));}});}({ void* _temp392[ 0u]={}; Cyc_Std_fprintf(
  Cyc_Std_stderr, _tag_arr("\ncurrent attributes: ", sizeof( unsigned char), 22u),
! _tag_arr( _temp392, sizeof( void*), 0u));}); for( 0; atts1 !=  0; atts1=((
  struct Cyc_List_List*) _check_null( atts1))->tl){({ struct Cyc_Std_String_pa_struct
! _temp394; _temp394.tag= Cyc_Std_String_pa; _temp394.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( atts1))->hd);{ void* _temp393[ 1u]={&
! _temp394}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("%s ", sizeof(
! unsigned char), 4u), _tag_arr( _temp393, sizeof( void*), 1u));}});}({ void*
! _temp395[ 0u]={}; Cyc_Std_fprintf( Cyc_Std_stderr, _tag_arr("\n", sizeof(
! unsigned char), 2u), _tag_arr( _temp395, sizeof( void*), 0u));}); _temp371= 0;}
! return({ struct _tuple3 _temp396; _temp396.f1= _temp376; _temp396.f2= _temp371;
! _temp396;});} struct Cyc_Absyn_Vardecl* Cyc_Tcdecl_merge_vardecl( struct Cyc_Absyn_Vardecl*
  d0, struct Cyc_Absyn_Vardecl* d1, struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg){ struct _tagged_arr _temp397= Cyc_Absynpp_qvar2string( d0->name);
! int _temp400; void* _temp402; struct _tuple3 _temp398= Cyc_Tcdecl_check_var_or_fn_decl((
  void*) d0->sc,( void*) d0->type, d0->tq, d0->attributes,( void*) d1->sc,( void*)
  d1->type, d1->tq, d1->attributes, _tag_arr("variable", sizeof( unsigned char), 9u),
! _temp397, loc, msg); _LL403: _temp402= _temp398.f1; goto _LL401; _LL401:
! _temp400= _temp398.f2; goto _LL399; _LL399: if( ! _temp400){ return 0;} if((
! void*) d0->sc ==  _temp402){ return( struct Cyc_Absyn_Vardecl*) d0;} else{
! struct Cyc_Absyn_Vardecl* _temp404=({ struct Cyc_Absyn_Vardecl* _temp405=(
  struct Cyc_Absyn_Vardecl*) _cycalloc( sizeof( struct Cyc_Absyn_Vardecl));
! _temp405[ 0]=* d0; _temp405;});( void*)((( struct Cyc_Absyn_Vardecl*)
! _check_null( _temp404))->sc=( void*) _temp402); return _temp404;}} struct Cyc_Absyn_Typedefdecl*
  Cyc_Tcdecl_merge_typedefdecl( struct Cyc_Absyn_Typedefdecl* d0, struct Cyc_Absyn_Typedefdecl*
  d1, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){ struct
! _tagged_arr _temp406= Cyc_Absynpp_qvar2string( d0->name); if( ! Cyc_Tcdecl_check_tvs(
! d0->tvs, d1->tvs, _tag_arr("typedef", sizeof( unsigned char), 8u), _temp406, loc,
! msg)){ return 0;}{ struct Cyc_List_List* _temp407= Cyc_Tcdecl_build_tvs_map( d0->tvs,
! d1->tvs); void* subst_defn1= Cyc_Tcutil_substitute( _temp407,( void*) d1->defn);
! if( ! Cyc_Tcdecl_check_type(( void*) d0->defn, subst_defn1)){ Cyc_Tcdecl_merr(
! loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct _temp411;
! _temp411.tag= Cyc_Std_String_pa; _temp411.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*) d0->defn);{ struct Cyc_Std_String_pa_struct _temp410; _temp410.tag= Cyc_Std_String_pa;
! _temp410.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( subst_defn1);{ struct
! Cyc_Std_String_pa_struct _temp409; _temp409.tag= Cyc_Std_String_pa; _temp409.f1=(
! struct _tagged_arr) _temp406;{ void* _temp408[ 3u]={& _temp409,& _temp410,&
! _temp411}; Cyc_Std_aprintf( _tag_arr("typedef %s does not refer to the same type: %s != %s",
! sizeof( unsigned char), 53u), _tag_arr( _temp408, sizeof( void*), 3u));}}}}));
  return 0;} return( struct Cyc_Absyn_Typedefdecl*) d0;}} void* Cyc_Tcdecl_merge_binding(
  void* b0, void* b1, struct Cyc_Position_Segment* loc, struct _tagged_arr* msg){
! struct _tuple4 _temp413=({ struct _tuple4 _temp412; _temp412.f1= b0; _temp412.f2=
! b1; _temp412;}); void* _temp427; void* _temp429; void* _temp431; struct Cyc_Absyn_Vardecl*
! _temp433; void* _temp435; struct Cyc_Absyn_Vardecl* _temp437; void* _temp439;
! struct Cyc_Absyn_Fndecl* _temp441; void* _temp443; struct Cyc_Absyn_Vardecl*
! _temp445; void* _temp447; struct Cyc_Absyn_Fndecl* _temp449; void* _temp451;
! void* _temp453; struct Cyc_Absyn_Vardecl* _temp455; void* _temp457; struct Cyc_Absyn_Fndecl*
! _temp459; _LL415: _LL430: _temp429= _temp413.f1; if( _temp429 == ( void*) Cyc_Absyn_Unresolved_b){
! goto _LL428;} else{ goto _LL417;} _LL428: _temp427= _temp413.f2; if( _temp427 == (
! void*) Cyc_Absyn_Unresolved_b){ goto _LL416;} else{ goto _LL417;} _LL417: _LL436:
! _temp435= _temp413.f1; if(( unsigned int) _temp435 >  1u?*(( int*) _temp435) == 
! Cyc_Absyn_Global_b: 0){ _LL438: _temp437=(( struct Cyc_Absyn_Global_b_struct*)
! _temp435)->f1; goto _LL432;} else{ goto _LL419;} _LL432: _temp431= _temp413.f2;
! if(( unsigned int) _temp431 >  1u?*(( int*) _temp431) ==  Cyc_Absyn_Global_b: 0){
! _LL434: _temp433=(( struct Cyc_Absyn_Global_b_struct*) _temp431)->f1; goto
! _LL418;} else{ goto _LL419;} _LL419: _LL444: _temp443= _temp413.f1; if((
! unsigned int) _temp443 >  1u?*(( int*) _temp443) ==  Cyc_Absyn_Global_b: 0){
! _LL446: _temp445=(( struct Cyc_Absyn_Global_b_struct*) _temp443)->f1; goto
! _LL440;} else{ goto _LL421;} _LL440: _temp439= _temp413.f2; if(( unsigned int)
! _temp439 >  1u?*(( int*) _temp439) ==  Cyc_Absyn_Funname_b: 0){ _LL442: _temp441=((
! struct Cyc_Absyn_Funname_b_struct*) _temp439)->f1; goto _LL420;} else{ goto
! _LL421;} _LL421: _LL452: _temp451= _temp413.f1; if(( unsigned int) _temp451 >  1u?*((
! int*) _temp451) ==  Cyc_Absyn_Funname_b: 0){ goto _LL448;} else{ goto _LL423;}
! _LL448: _temp447= _temp413.f2; if(( unsigned int) _temp447 >  1u?*(( int*)
! _temp447) ==  Cyc_Absyn_Funname_b: 0){ _LL450: _temp449=(( struct Cyc_Absyn_Funname_b_struct*)
! _temp447)->f1; goto _LL422;} else{ goto _LL423;} _LL423: _LL458: _temp457=
! _temp413.f1; if(( unsigned int) _temp457 >  1u?*(( int*) _temp457) ==  Cyc_Absyn_Funname_b:
! 0){ _LL460: _temp459=(( struct Cyc_Absyn_Funname_b_struct*) _temp457)->f1; goto
! _LL454;} else{ goto _LL425;} _LL454: _temp453= _temp413.f2; if(( unsigned int)
! _temp453 >  1u?*(( int*) _temp453) ==  Cyc_Absyn_Global_b: 0){ _LL456: _temp455=((
! struct Cyc_Absyn_Global_b_struct*) _temp453)->f1; goto _LL424;} else{ goto
! _LL425;} _LL425: goto _LL426; _LL416: return( void*) Cyc_Absyn_Unresolved_b;
! _LL418: { struct Cyc_Absyn_Vardecl* _temp461= Cyc_Tcdecl_merge_vardecl( _temp437,
! _temp433, loc, msg); if( _temp461 ==  0){ return( void*) Cyc_Absyn_Unresolved_b;}
! if(( struct Cyc_Absyn_Vardecl*) _temp437 ==  _temp461){ return b0;} else{ if((
! struct Cyc_Absyn_Vardecl*) _temp433 ==  _temp461){ return b1;} else{ return(
! void*)({ struct Cyc_Absyn_Global_b_struct* _temp462=( struct Cyc_Absyn_Global_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Global_b_struct)); _temp462[ 0]=({ struct
! Cyc_Absyn_Global_b_struct _temp463; _temp463.tag= Cyc_Absyn_Global_b; _temp463.f1=(
! struct Cyc_Absyn_Vardecl*) _check_null( _temp461); _temp463;}); _temp462;});}}}
! _LL420: { int _temp466; struct _tuple3 _temp464= Cyc_Tcdecl_check_var_or_fn_decl((
! void*) _temp445->sc,( void*) _temp445->type, _temp445->tq, _temp445->attributes,(
! void*) _temp441->sc,( void*)(( struct Cyc_Core_Opt*) _check_null( _temp441->cached_typ))->v,
! Cyc_Absyn_empty_tqual(), _temp441->attributes, _tag_arr("function", sizeof(
! unsigned char), 9u), Cyc_Absynpp_qvar2string( _temp445->name), loc, msg); _LL467:
! _temp466= _temp464.f2; goto _LL465; _LL465: if( ! _temp466){ return( void*) Cyc_Absyn_Unresolved_b;}
! return b1;} _LL422: Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp469; _temp469.tag= Cyc_Std_String_pa; _temp469.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp449->name);{ void* _temp468[ 1u]={& _temp469}; Cyc_Std_aprintf( _tag_arr("redefinition of function %s",
! sizeof( unsigned char), 28u), _tag_arr( _temp468, sizeof( void*), 1u));}}));
! return( void*) Cyc_Absyn_Unresolved_b; _LL424: { int _temp472; struct _tuple3
! _temp470= Cyc_Tcdecl_check_var_or_fn_decl(( void*) _temp459->sc,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp459->cached_typ))->v, Cyc_Absyn_empty_tqual(),
! _temp459->attributes,( void*) _temp455->sc,( void*) _temp455->type, _temp455->tq,
! _temp455->attributes, _tag_arr("variable", sizeof( unsigned char), 9u), Cyc_Absynpp_qvar2string(
! _temp459->name), loc, msg); _LL473: _temp472= _temp470.f2; goto _LL471; _LL471:
! if( ! _temp472){ return( void*) Cyc_Absyn_Unresolved_b;} return b0;} _LL426:(
! int) _throw(( void*)({ struct Cyc_Core_Invalid_argument_struct* _temp474=(
! struct Cyc_Core_Invalid_argument_struct*) _cycalloc( sizeof( struct Cyc_Core_Invalid_argument_struct));
! _temp474[ 0]=({ struct Cyc_Core_Invalid_argument_struct _temp475; _temp475.tag=
! Cyc_Core_Invalid_argument; _temp475.f1= _tag_arr("Tcdecl::merge_binding",
! sizeof( unsigned char), 22u); _temp475;}); _temp474;})); _LL414:;} struct Cyc_Tcdecl_Xtunionfielddecl*
! Cyc_Tcdecl_merge_xtunionfielddecl( struct Cyc_Tcdecl_Xtunionfielddecl* d0,
! struct Cyc_Tcdecl_Xtunionfielddecl* d1, struct Cyc_Position_Segment* loc, struct
! _tagged_arr* msg){ struct Cyc_Tcdecl_Xtunionfielddecl _temp478; struct Cyc_Absyn_Tunionfield*
! _temp479; struct Cyc_Absyn_Tuniondecl* _temp481; struct Cyc_Tcdecl_Xtunionfielddecl*
! _temp476= d0; _temp478=* _temp476; _LL482: _temp481= _temp478.base; goto _LL480;
! _LL480: _temp479= _temp478.field; goto _LL477; _LL477: { struct Cyc_Tcdecl_Xtunionfielddecl
! _temp485; struct Cyc_Absyn_Tunionfield* _temp486; struct Cyc_Absyn_Tuniondecl*
! _temp488; struct Cyc_Tcdecl_Xtunionfielddecl* _temp483= d1; _temp485=* _temp483;
! _LL489: _temp488= _temp485.base; goto _LL487; _LL487: _temp486= _temp485.field;
! goto _LL484; _LL484: { struct _tagged_arr _temp490= Cyc_Absynpp_qvar2string(
! _temp479->name); if( Cyc_Absyn_qvar_cmp( _temp481->name, _temp488->name) !=  0){
! Cyc_Tcdecl_merr( loc, msg,( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp494; _temp494.tag= Cyc_Std_String_pa; _temp494.f1=( struct _tagged_arr)
! _temp490;{ struct Cyc_Std_String_pa_struct _temp493; _temp493.tag= Cyc_Std_String_pa;
! _temp493.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp488->name);{
! struct Cyc_Std_String_pa_struct _temp492; _temp492.tag= Cyc_Std_String_pa;
! _temp492.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp481->name);{
! void* _temp491[ 3u]={& _temp492,& _temp493,& _temp494}; Cyc_Std_aprintf(
! _tag_arr("xtunions %s and %s have both a field named %s", sizeof( unsigned char),
! 46u), _tag_arr( _temp491, sizeof( void*), 3u));}}}})); return 0;} if( ! Cyc_Tcdecl_check_tvs(
! _temp481->tvs, _temp488->tvs, _tag_arr("xtunion", sizeof( unsigned char), 8u),
! Cyc_Absynpp_qvar2string( _temp481->name), loc, msg)){ return 0;}{ struct Cyc_List_List*
! _temp495= Cyc_Tcdecl_build_tvs_map( _temp481->tvs, _temp488->tvs); struct Cyc_Absyn_Tunionfield*
! _temp496= Cyc_Tcdecl_merge_tunionfield( _temp479, _temp486, _temp495, _tag_arr("xtunionfield",
! sizeof( unsigned char), 13u), _temp490, msg); if( _temp496 ==  0){ return 0;}
! if( _temp496 == ( struct Cyc_Absyn_Tunionfield*) _temp479){ return( struct Cyc_Tcdecl_Xtunionfielddecl*)
! d0;} else{ return({ struct Cyc_Tcdecl_Xtunionfielddecl* _temp497=( struct Cyc_Tcdecl_Xtunionfielddecl*)
! _cycalloc( sizeof( struct Cyc_Tcdecl_Xtunionfielddecl)); _temp497->base=
! _temp481; _temp497->field=( struct Cyc_Absyn_Tunionfield*) _check_null( _temp496);
! _temp497;});}}}}}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tcenv.c powerpc-apple-rhapsody/src/tcenv.c
*** i686-unknown-linux/src/tcenv.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/tcenv.c	Wed Oct 10 15:39:32 2001
***************
*** 313,319 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 313,319 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 404,466 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 404,463 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tcexp.c powerpc-apple-rhapsody/src/tcexp.c
*** i686-unknown-linux/src/tcexp.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/tcexp.c	Wed Oct 10 15:39:32 2001
***************
*** 240,257 ****
  y); extern struct Cyc_List_List* Cyc_List_rappend( struct _RegionHandle*, struct
  Cyc_List_List* x, struct Cyc_List_List* y); extern unsigned char Cyc_List_Nth[ 8u];
  extern void* Cyc_List_nth( struct Cyc_List_List* x, int n); extern struct Cyc_List_List*
! Cyc_List_nth_tail( struct Cyc_List_List* x, int i); extern int Cyc_List_exists_c(
! int(* pred)( void*, void*), void* env, struct Cyc_List_List* x); extern struct
! Cyc_List_List* Cyc_List_zip( struct Cyc_List_List* x, struct Cyc_List_List* y);
! extern struct Cyc_List_List* Cyc_List_rzip( struct _RegionHandle* r1, struct
! _RegionHandle* r2, struct Cyc_List_List* x, struct Cyc_List_List* y); struct Cyc_Lineno_Pos{
! struct _tagged_arr logical_file; struct _tagged_arr line; int line_no; int col;
! } ; extern unsigned char Cyc_Position_Exit[ 9u]; struct Cyc_Position_Segment;
! static const int Cyc_Position_Lex= 0; static const int Cyc_Position_Parse= 1;
! static const int Cyc_Position_Elab= 2; struct Cyc_Position_Error{ struct
! _tagged_arr source; struct Cyc_Position_Segment* seg; void* kind; struct
! _tagged_arr desc; } ; extern unsigned char Cyc_Position_Nocontext[ 14u]; struct
! _tuple1{ void* f1; struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar; struct Cyc_Absyn_Tqual;
  struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo; struct Cyc_Absyn_VarargInfo;
  struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo; struct Cyc_Absyn_TunionFieldInfo;
  struct Cyc_Absyn_VarargCallInfo; struct Cyc_Absyn_Exp; struct Cyc_Absyn_Stmt;
--- 240,256 ----
  y); extern struct Cyc_List_List* Cyc_List_rappend( struct _RegionHandle*, struct
  Cyc_List_List* x, struct Cyc_List_List* y); extern unsigned char Cyc_List_Nth[ 8u];
  extern void* Cyc_List_nth( struct Cyc_List_List* x, int n); extern struct Cyc_List_List*
! Cyc_List_nth_tail( struct Cyc_List_List* x, int i); extern struct Cyc_List_List*
! Cyc_List_zip( struct Cyc_List_List* x, struct Cyc_List_List* y); extern struct
! Cyc_List_List* Cyc_List_rzip( struct _RegionHandle* r1, struct _RegionHandle* r2,
! struct Cyc_List_List* x, struct Cyc_List_List* y); struct Cyc_Lineno_Pos{ struct
! _tagged_arr logical_file; struct _tagged_arr line; int line_no; int col; } ;
! extern unsigned char Cyc_Position_Exit[ 9u]; struct Cyc_Position_Segment; static
! const int Cyc_Position_Lex= 0; static const int Cyc_Position_Parse= 1; static
! const int Cyc_Position_Elab= 2; struct Cyc_Position_Error{ struct _tagged_arr
! source; struct Cyc_Position_Segment* seg; void* kind; struct _tagged_arr desc; }
! ; extern unsigned char Cyc_Position_Nocontext[ 14u]; struct _tuple1{ void* f1;
! struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar; struct Cyc_Absyn_Tqual;
  struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo; struct Cyc_Absyn_VarargInfo;
  struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo; struct Cyc_Absyn_TunionFieldInfo;
  struct Cyc_Absyn_VarargCallInfo; struct Cyc_Absyn_Exp; struct Cyc_Absyn_Stmt;
***************
*** 287,293 ****
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 286,292 ----
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 378,440 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple1* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple1* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple2{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple2* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 377,436 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple1* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple1* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple2{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple2* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple1* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 578,585 ****
  _tagged_arr*); extern struct Cyc_Absyn_Structfield* Cyc_Absyn_lookup_struct_field(
  struct Cyc_Absyn_Structdecl*, struct _tagged_arr*); extern struct Cyc_Absyn_Structfield*
  Cyc_Absyn_lookup_union_field( struct Cyc_Absyn_Uniondecl*, struct _tagged_arr*);
! extern int Cyc_Std_strcmp( struct _tagged_arr s1, struct _tagged_arr s2); extern
! int Cyc_Std_zstrcmp( struct _tagged_arr, struct _tagged_arr); struct Cyc_Std___sFILE;
  extern unsigned char Cyc_Std_FileCloseError[ 19u]; extern unsigned char Cyc_Std_FileOpenError[
  18u]; struct Cyc_Std_FileOpenError_struct{ unsigned char* tag; struct
  _tagged_arr f1; } ; static const int Cyc_Std_String_pa= 0; struct Cyc_Std_String_pa_struct{
--- 574,580 ----
  _tagged_arr*); extern struct Cyc_Absyn_Structfield* Cyc_Absyn_lookup_struct_field(
  struct Cyc_Absyn_Structdecl*, struct _tagged_arr*); extern struct Cyc_Absyn_Structfield*
  Cyc_Absyn_lookup_union_field( struct Cyc_Absyn_Uniondecl*, struct _tagged_arr*);
! extern int Cyc_Std_zstrcmp( struct _tagged_arr, struct _tagged_arr); struct Cyc_Std___sFILE;
  extern unsigned char Cyc_Std_FileCloseError[ 19u]; extern unsigned char Cyc_Std_FileOpenError[
  18u]; struct Cyc_Std_FileOpenError_struct{ unsigned char* tag; struct
  _tagged_arr f1; } ; static const int Cyc_Std_String_pa= 0; struct Cyc_Std_String_pa_struct{
***************
*** 1535,1544 ****
  struct Cyc_Absyn_VarargInfo _temp719=*(( struct Cyc_Absyn_VarargInfo*)
  _check_null( _temp702)); _LL724: _temp723=( void*) _temp719.type; goto _LL722;
  _LL722: _temp721= _temp719.inject; goto _LL720; _LL720: { struct Cyc_Absyn_VarargCallInfo*
! _temp725=({ struct Cyc_Absyn_VarargCallInfo* _temp755=( struct Cyc_Absyn_VarargCallInfo*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarargCallInfo)); _temp755->num_varargs= 0;
! _temp755->injectors= 0; _temp755->vai=( struct Cyc_Absyn_VarargInfo*)
! _check_null( _temp702); _temp755;});* vararg_call_info=( struct Cyc_Absyn_VarargCallInfo*)
  _temp725; if( ! _temp721){ for( 0; _temp671 !=  0; _temp671=(( struct Cyc_List_List*)
  _check_null( _temp671))->tl){ struct Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( _temp671))->hd;(( struct Cyc_Absyn_VarargCallInfo*)
--- 1530,1539 ----
  struct Cyc_Absyn_VarargInfo _temp719=*(( struct Cyc_Absyn_VarargInfo*)
  _check_null( _temp702)); _LL724: _temp723=( void*) _temp719.type; goto _LL722;
  _LL722: _temp721= _temp719.inject; goto _LL720; _LL720: { struct Cyc_Absyn_VarargCallInfo*
! _temp725=({ struct Cyc_Absyn_VarargCallInfo* _temp754=( struct Cyc_Absyn_VarargCallInfo*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarargCallInfo)); _temp754->num_varargs= 0;
! _temp754->injectors= 0; _temp754->vai=( struct Cyc_Absyn_VarargInfo*)
! _check_null( _temp702); _temp754;});* vararg_call_info=( struct Cyc_Absyn_VarargCallInfo*)
  _temp725; if( ! _temp721){ for( 0; _temp671 !=  0; _temp671=(( struct Cyc_List_List*)
  _check_null( _temp671))->tl){ struct Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( _temp671))->hd;(( struct Cyc_Absyn_VarargCallInfo*)
***************
*** 1552,2929 ****
  unsigned char), 49u), _tag_arr( _temp726, sizeof( void*), 2u));}}});}}} else{
  void* _temp729= Cyc_Tcutil_compress( _temp723); struct Cyc_Absyn_TunionInfo
  _temp735; void* _temp737; struct Cyc_List_List* _temp739; void* _temp741; struct
! Cyc_Absyn_Tuniondecl** _temp743; struct Cyc_Absyn_Tuniondecl* _temp745; _LL731:
! if(( unsigned int) _temp729 >  4u?*(( int*) _temp729) ==  Cyc_Absyn_TunionType:
! 0){ _LL736: _temp735=(( struct Cyc_Absyn_TunionType_struct*) _temp729)->f1;
! _LL742: _temp741=( void*) _temp735.tunion_info; if(*(( int*) _temp741) ==  Cyc_Absyn_KnownTunion){
! _LL744: _temp743=(( struct Cyc_Absyn_KnownTunion_struct*) _temp741)->f1;
! _temp745=* _temp743; goto _LL740;} else{ goto _LL733;} _LL740: _temp739=
! _temp735.targs; goto _LL738; _LL738: _temp737=( void*) _temp735.rgn; goto _LL732;}
! else{ goto _LL733;} _LL733: goto _LL734; _LL732: { struct Cyc_Absyn_Tuniondecl*
! _temp746=* Cyc_Tcenv_lookup_tuniondecl( te, loc, _temp745->name); struct Cyc_List_List*
! fields= 0; if( _temp746->fields ==  0){({ struct Cyc_Std_String_pa_struct
! _temp748; _temp748.tag= Cyc_Std_String_pa; _temp748.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp723);{ void* _temp747[ 1u]={& _temp748}; Cyc_Tcutil_terr( loc, _tag_arr("can't inject into %s",
! sizeof( unsigned char), 21u), _tag_arr( _temp747, sizeof( void*), 1u));}});}
  else{ fields=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null(
! _temp746->fields))->v;} if( ! Cyc_Tcutil_unify( _temp737, Cyc_Tcenv_curr_rgn( te))){({
! void* _temp749[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("bad region for injected varargs",
! sizeof( unsigned char), 32u), _tag_arr( _temp749, sizeof( void*), 0u));});}{
! struct _RegionHandle _temp750= _new_region(); struct _RegionHandle* rgn=&
! _temp750; _push_region( rgn);{ struct Cyc_List_List* _temp751=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp746->tvs, _temp739);
  for( 0; _temp671 !=  0; _temp671=(( struct Cyc_List_List*) _check_null( _temp671))->tl){((
  struct Cyc_Absyn_VarargCallInfo*) _check_null( _temp725))->num_varargs ++;{
  struct Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( _temp671))->hd; Cyc_Tcexp_tcExp( te, 0, e1);{ struct Cyc_Absyn_Tunionfield*
! _temp752= Cyc_Tcexp_tcInjection( te, e1, _temp723, rgn, _temp751, fields); if(
! _temp752 !=  0){(( struct Cyc_Absyn_VarargCallInfo*) _check_null( _temp725))->injectors=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(((
  struct Cyc_Absyn_VarargCallInfo*) _check_null( _temp725))->injectors,({ struct
! Cyc_List_List* _temp753=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp753->hd=( void*)(( struct Cyc_Absyn_Tunionfield*) _check_null( _temp752));
! _temp753->tl= 0; _temp753;}));}}}}}; _pop_region( rgn);} goto _LL730;} _LL734:({
! void* _temp754[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("bad inject vararg type",
! sizeof( unsigned char), 23u), _tag_arr( _temp754, sizeof( void*), 0u));}); goto
  _LL730; _LL730:;}}}}}}{ struct Cyc_List_List* a= _temp698; for( 0; a !=  0; a=((
! struct Cyc_List_List*) _check_null( a))->tl){ void* _temp756=( void*)(( struct
! Cyc_List_List*) _check_null( a))->hd; int _temp762; int _temp764; void* _temp766;
! _LL758: if(( unsigned int) _temp756 >  16u?*(( int*) _temp756) ==  Cyc_Absyn_Format_att:
! 0){ _LL767: _temp766=( void*)(( struct Cyc_Absyn_Format_att_struct*) _temp756)->f1;
! goto _LL765; _LL765: _temp764=(( struct Cyc_Absyn_Format_att_struct*) _temp756)->f2;
! goto _LL763; _LL763: _temp762=(( struct Cyc_Absyn_Format_att_struct*) _temp756)->f3;
! goto _LL759;} else{ goto _LL760;} _LL760: goto _LL761; _LL759:{ struct
! _handler_cons _temp768; _push_handler(& _temp768);{ int _temp770= 0; if( setjmp(
! _temp768.handler)){ _temp770= 1;} if( ! _temp770){{ struct Cyc_Absyn_Exp*
! _temp771=(( struct Cyc_Absyn_Exp*(*)( struct Cyc_List_List* x, int n)) Cyc_List_nth)(
! args, _temp764 -  1); struct Cyc_Core_Opt* fmt_args; if( _temp762 ==  0){
! fmt_args= 0;} else{ fmt_args=({ struct Cyc_Core_Opt* _temp772=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp772->v=( void*)(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, int i)) Cyc_List_nth_tail)( args, _temp762 -  1);
! _temp772;});}{ void* _temp773= _temp766; _LL775: if( _temp773 == ( void*) Cyc_Absyn_Printf_ft){
! goto _LL776;} else{ goto _LL777;} _LL777: if( _temp773 == ( void*) Cyc_Absyn_Scanf_ft){
! goto _LL778;} else{ goto _LL774;} _LL776: Cyc_Tcexp_check_format_args( te,
! _temp771, fmt_args, Cyc_Formatstr_get_format_typs); goto _LL774; _LL778: Cyc_Tcexp_check_format_args(
! te, _temp771, fmt_args, Cyc_Formatstr_get_scanf_typs); goto _LL774; _LL774:;}};
! _pop_handler();} else{ void* _temp769=( void*) _exn_thrown; void* _temp780=
! _temp769; _LL782: if( _temp780 ==  Cyc_List_Nth){ goto _LL783;} else{ goto
! _LL784;} _LL784: goto _LL785; _LL783:({ void* _temp786[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("bad format arguments", sizeof( unsigned char), 21u), _tag_arr(
! _temp786, sizeof( void*), 0u));}); goto _LL781; _LL785:( void) _throw( _temp780);
! _LL781:;}}} goto _LL757; _LL761: goto _LL757; _LL757:;}} Cyc_Tcenv_check_effect_accessible(
  te, loc,( void*)(( struct Cyc_Core_Opt*) _check_null( _temp710))->v); Cyc_Tcenv_check_rgn_partial_order(
! te, loc, _temp700); return _temp708; _LL695: return({ void* _temp787[ 0u]={};
  Cyc_Tcexp_expr_err( te, loc, _tag_arr("expected pointer to function", sizeof(
! unsigned char), 29u), _tag_arr( _temp787, sizeof( void*), 0u));}); _LL691:;}
! _LL677: return({ void* _temp788[ 0u]={}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expected pointer to function",
! sizeof( unsigned char), 29u), _tag_arr( _temp788, sizeof( void*), 0u));});
  _LL673:;}} static void* Cyc_Tcexp_tcThrow( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment*
  loc, void** topt, struct Cyc_Absyn_Exp* e){ Cyc_Tcexp_tcExp( te,( void**)& Cyc_Absyn_exn_typ,
  e); if( ! Cyc_Tcutil_coerce_arg( te, e, Cyc_Absyn_exn_typ)){({ struct Cyc_Std_String_pa_struct
! _temp790; _temp790.tag= Cyc_Std_String_pa; _temp790.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);{ void* _temp789[ 1u]={&
! _temp790}; Cyc_Tcutil_terr( loc, _tag_arr("expected xtunion exn but found %s",
! sizeof( unsigned char), 34u), _tag_arr( _temp789, sizeof( void*), 1u));}});}
! return Cyc_Absyn_wildtyp(({ struct Cyc_Core_Opt* _temp791=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp791->v=( void*) Cyc_Tcenv_lookup_type_vars(
! te); _temp791;}));} static void* Cyc_Tcexp_tcInstantiate( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e,
  struct Cyc_List_List* ts){ Cyc_Tcexp_tcExpNoInst( te, 0, e);( void*)((( struct
  Cyc_Core_Opt*) _check_null( e->topt))->v=( void*) Cyc_Absyn_pointer_expand((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v));{ void* t1= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);{ void* _temp792= t1;
! struct Cyc_Absyn_PtrInfo _temp798; struct Cyc_Absyn_Conref* _temp800; struct Cyc_Absyn_Tqual
! _temp802; struct Cyc_Absyn_Conref* _temp804; void* _temp806; void* _temp808;
! _LL794: if(( unsigned int) _temp792 >  4u?*(( int*) _temp792) ==  Cyc_Absyn_PointerType:
! 0){ _LL799: _temp798=(( struct Cyc_Absyn_PointerType_struct*) _temp792)->f1;
! _LL809: _temp808=( void*) _temp798.elt_typ; goto _LL807; _LL807: _temp806=( void*)
! _temp798.rgn_typ; goto _LL805; _LL805: _temp804= _temp798.nullable; goto _LL803;
! _LL803: _temp802= _temp798.tq; goto _LL801; _LL801: _temp800= _temp798.bounds;
! goto _LL795;} else{ goto _LL796;} _LL796: goto _LL797; _LL795:{ void* _temp810=
! Cyc_Tcutil_compress( _temp808); struct Cyc_Absyn_FnInfo _temp816; struct Cyc_List_List*
! _temp818; struct Cyc_List_List* _temp820; struct Cyc_Absyn_VarargInfo* _temp822;
! int _temp824; struct Cyc_List_List* _temp826; void* _temp828; struct Cyc_Core_Opt*
! _temp830; struct Cyc_List_List* _temp832; _LL812: if(( unsigned int) _temp810 > 
! 4u?*(( int*) _temp810) ==  Cyc_Absyn_FnType: 0){ _LL817: _temp816=(( struct Cyc_Absyn_FnType_struct*)
! _temp810)->f1; _LL833: _temp832= _temp816.tvars; goto _LL831; _LL831: _temp830=
! _temp816.effect; goto _LL829; _LL829: _temp828=( void*) _temp816.ret_typ; goto
! _LL827; _LL827: _temp826= _temp816.args; goto _LL825; _LL825: _temp824= _temp816.c_varargs;
! goto _LL823; _LL823: _temp822= _temp816.cyc_varargs; goto _LL821; _LL821:
! _temp820= _temp816.rgn_po; goto _LL819; _LL819: _temp818= _temp816.attributes;
! goto _LL813;} else{ goto _LL814;} _LL814: goto _LL815; _LL813: { struct Cyc_List_List*
  instantiation= 0; if( Cyc_List_length( ts) != (( int(*)( struct Cyc_List_List* x))
! Cyc_List_length)( _temp832)){ return({ void* _temp834[ 0u]={}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("type instantiation mismatch", sizeof( unsigned char), 28u),
! _tag_arr( _temp834, sizeof( void*), 0u));});} for( 0; ts !=  0;( ts=(( struct
! Cyc_List_List*) _check_null( ts))->tl, _temp832=(( struct Cyc_List_List*)
! _check_null( _temp832))->tl)){ void* k= Cyc_Absyn_conref_val((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( _temp832))->hd)->kind); Cyc_Tcutil_check_type(
  loc, te, Cyc_Tcenv_lookup_type_vars( te), k, 1,( void*)(( struct Cyc_List_List*)
! _check_null( ts))->hd); instantiation=({ struct Cyc_List_List* _temp835=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp835->hd=( void*)({
! struct _tuple5* _temp836=( struct _tuple5*) _cycalloc( sizeof( struct _tuple5));
! _temp836->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! _temp832))->hd; _temp836->f2=( void*)(( struct Cyc_List_List*) _check_null( ts))->hd;
! _temp836;}); _temp835->tl= instantiation; _temp835;});}{ void* new_fn_typ= Cyc_Tcutil_substitute(
! instantiation,( void*)({ struct Cyc_Absyn_FnType_struct* _temp840=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp840[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp841; _temp841.tag= Cyc_Absyn_FnType; _temp841.f1=({ struct Cyc_Absyn_FnInfo
! _temp842; _temp842.tvars= 0; _temp842.effect= _temp830; _temp842.ret_typ=( void*)
! _temp828; _temp842.args= _temp826; _temp842.c_varargs= _temp824; _temp842.cyc_varargs=
! _temp822; _temp842.rgn_po= _temp820; _temp842.attributes= _temp818; _temp842;});
! _temp841;}); _temp840;})); void* new_typ=( void*)({ struct Cyc_Absyn_PointerType_struct*
! _temp837=( struct Cyc_Absyn_PointerType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct));
! _temp837[ 0]=({ struct Cyc_Absyn_PointerType_struct _temp838; _temp838.tag= Cyc_Absyn_PointerType;
! _temp838.f1=({ struct Cyc_Absyn_PtrInfo _temp839; _temp839.elt_typ=( void*)
! new_fn_typ; _temp839.rgn_typ=( void*) _temp806; _temp839.nullable= _temp804;
! _temp839.tq= _temp802; _temp839.bounds= _temp800; _temp839;}); _temp838;});
! _temp837;}); return new_typ;}} _LL815: goto _LL811; _LL811:;} goto _LL793;
! _LL797: goto _LL793; _LL793:;} return({ struct Cyc_Std_String_pa_struct _temp844;
! _temp844.tag= Cyc_Std_String_pa; _temp844.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t1);{ void* _temp843[ 1u]={& _temp844}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting polymorphic type but found %s",
! sizeof( unsigned char), 40u), _tag_arr( _temp843, sizeof( void*), 1u));}});}}
  static void* Cyc_Tcexp_tcCast( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment*
  loc, void** topt, void* t, struct Cyc_Absyn_Exp* e){ Cyc_Tcutil_check_type( loc,
  te, Cyc_Tcenv_lookup_type_vars( te),( void*) Cyc_Absyn_MemKind, 1, t); Cyc_Tcexp_tcExp(
  te, 0, e);{ void* t2=( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v;
  if( ! Cyc_Tcutil_silent_castable( te, loc, t2, t)? ! Cyc_Tcutil_castable( te,
! loc, t2, t): 0){ return({ struct Cyc_Std_String_pa_struct _temp847; _temp847.tag=
! Cyc_Std_String_pa; _temp847.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! struct Cyc_Std_String_pa_struct _temp846; _temp846.tag= Cyc_Std_String_pa;
! _temp846.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t2);{ void* _temp845[
! 2u]={& _temp846,& _temp847}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("cannot cast %s to %s",
! sizeof( unsigned char), 21u), _tag_arr( _temp845, sizeof( void*), 2u));}}});}
  return t;}} static void* Cyc_Tcexp_tcAddress( struct Cyc_Tcenv_Tenv* te, struct
  Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e){ void**
! _temp848= 0; struct Cyc_Absyn_Tqual _temp849= Cyc_Absyn_empty_tqual(); if( topt
! !=  0){ void* _temp850= Cyc_Tcutil_compress(*(( void**) _check_null( topt)));
! struct Cyc_Absyn_PtrInfo _temp856; struct Cyc_Absyn_Tqual _temp858; void*
! _temp860; _LL852: if(( unsigned int) _temp850 >  4u?*(( int*) _temp850) ==  Cyc_Absyn_PointerType:
! 0){ _LL857: _temp856=(( struct Cyc_Absyn_PointerType_struct*) _temp850)->f1;
! _LL861: _temp860=( void*) _temp856.elt_typ; goto _LL859; _LL859: _temp858=
! _temp856.tq; goto _LL853;} else{ goto _LL854;} _LL854: goto _LL855; _LL853:
! _temp848=({ void** _temp862=( void**) _cycalloc( sizeof( void*)); _temp862[ 0]=
! _temp860; _temp862;}); _temp849= _temp858; goto _LL851; _LL855: goto _LL851;
! _LL851:;} Cyc_Tcexp_tcExpNoInst( te, _temp848, e);{ void* _temp863=( void*) e->r;
! _LL865: if(*(( int*) _temp863) ==  Cyc_Absyn_Struct_e){ goto _LL866;} else{ goto
! _LL867;} _LL867: if(*(( int*) _temp863) ==  Cyc_Absyn_Tuple_e){ goto _LL868;}
! else{ goto _LL869;} _LL869: goto _LL870; _LL866: goto _LL868; _LL868:({ void*
! _temp871[ 0u]={}; Cyc_Tcutil_warn( loc, _tag_arr("& used to allocate", sizeof(
! unsigned char), 19u), _tag_arr( _temp871, sizeof( void*), 0u));});{ void*(*
! _temp872)( void* t, void* rgn, struct Cyc_Absyn_Tqual tq)= Cyc_Absyn_at_typ; if(
! topt !=  0){ void* _temp873= Cyc_Tcutil_compress(*(( void**) _check_null( topt)));
! struct Cyc_Absyn_PtrInfo _temp879; struct Cyc_Absyn_Conref* _temp881; _LL875:
! if(( unsigned int) _temp873 >  4u?*(( int*) _temp873) ==  Cyc_Absyn_PointerType:
! 0){ _LL880: _temp879=(( struct Cyc_Absyn_PointerType_struct*) _temp873)->f1;
! _LL882: _temp881= _temp879.nullable; goto _LL876;} else{ goto _LL877;} _LL877:
! goto _LL878; _LL876: if((( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp881)){ _temp872= Cyc_Absyn_star_typ;} goto _LL874; _LL878: goto _LL874;
! _LL874:;} return _temp872(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v,(
! void*) Cyc_Absyn_HeapRgn, _temp849);} _LL870: goto _LL864; _LL864:;}{ void*
! _temp885; int _temp887; struct _tuple6 _temp883= Cyc_Tcutil_addressof_props( te,
! e); _LL888: _temp887= _temp883.f1; goto _LL886; _LL886: _temp885= _temp883.f2;
! goto _LL884; _LL884: { struct Cyc_Absyn_Tqual tq= Cyc_Absyn_empty_tqual(); if(
! _temp887){ tq.q_const= 1;}{ void* t= Cyc_Absyn_at_typ(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v, _temp885, tq); return t;}}}} static void* Cyc_Tcexp_tcSizeof(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, void*
  t){ Cyc_Tcutil_check_type( loc, te, Cyc_Tcenv_lookup_type_vars( te),( void*) Cyc_Absyn_MemKind,
  1, t); if( ! Cyc_Evexp_okay_szofarg( t)){({ struct Cyc_Std_String_pa_struct
! _temp890; _temp890.tag= Cyc_Std_String_pa; _temp890.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t);{ void* _temp889[ 1u]={& _temp890}; Cyc_Tcutil_terr( loc, _tag_arr("sizeof applied to type %s, which has unknown size here",
! sizeof( unsigned char), 55u), _tag_arr( _temp889, sizeof( void*), 1u));}});}
! return Cyc_Absyn_uint_t;} int Cyc_Tcexp_structfield_has_name( struct _tagged_arr*
! n, struct Cyc_Absyn_Structfield* sf){ return Cyc_Std_strcmp(* n,* sf->name) == 
! 0;} static void* Cyc_Tcexp_tcOffsetof( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment*
! loc, void** topt, void* t, void* n){ Cyc_Tcutil_check_type( loc, te, Cyc_Tcenv_lookup_type_vars(
! te),( void*) Cyc_Absyn_MemKind, 1, t);{ void* _temp891= n; struct _tagged_arr*
! _temp897; unsigned int _temp899; _LL893: if(*(( int*) _temp891) ==  Cyc_Absyn_StructField){
! _LL898: _temp897=(( struct Cyc_Absyn_StructField_struct*) _temp891)->f1; goto
! _LL894;} else{ goto _LL895;} _LL895: if(*(( int*) _temp891) ==  Cyc_Absyn_TupleIndex){
! _LL900: _temp899=(( struct Cyc_Absyn_TupleIndex_struct*) _temp891)->f1; goto
! _LL896;} else{ goto _LL892;} _LL894: { int bad_type= 1;{ void* _temp901= Cyc_Tcutil_compress(
! t); struct Cyc_Absyn_Structdecl** _temp913; struct _tuple1* _temp915; struct Cyc_List_List*
! _temp917; struct Cyc_Absyn_Uniondecl** _temp919; struct _tuple1* _temp921;
! struct Cyc_List_List* _temp923; _LL903: if(( unsigned int) _temp901 >  4u?*((
! int*) _temp901) ==  Cyc_Absyn_StructType: 0){ _LL916: _temp915=(( struct Cyc_Absyn_StructType_struct*)
! _temp901)->f1; goto _LL914; _LL914: _temp913=(( struct Cyc_Absyn_StructType_struct*)
! _temp901)->f3; goto _LL904;} else{ goto _LL905;} _LL905: if(( unsigned int)
! _temp901 >  4u?*(( int*) _temp901) ==  Cyc_Absyn_AnonStructType: 0){ _LL918:
! _temp917=(( struct Cyc_Absyn_AnonStructType_struct*) _temp901)->f1; goto _LL906;}
! else{ goto _LL907;} _LL907: if(( unsigned int) _temp901 >  4u?*(( int*) _temp901)
! ==  Cyc_Absyn_UnionType: 0){ _LL922: _temp921=(( struct Cyc_Absyn_UnionType_struct*)
! _temp901)->f1; goto _LL920; _LL920: _temp919=(( struct Cyc_Absyn_UnionType_struct*)
! _temp901)->f3; goto _LL908;} else{ goto _LL909;} _LL909: if(( unsigned int)
! _temp901 >  4u?*(( int*) _temp901) ==  Cyc_Absyn_AnonUnionType: 0){ _LL924:
! _temp923=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp901)->f1; goto _LL910;}
! else{ goto _LL911;} _LL911: goto _LL912; _LL904: if( _temp913 ==  0){ return({
! void* _temp925[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("offsetof on unchecked StructType",
! sizeof( unsigned char), 33u), _tag_arr( _temp925, sizeof( void*), 0u));});} if((*((
! struct Cyc_Absyn_Structdecl**) _check_null( _temp913)))->fields ==  0){ goto
! _LL902;} if( !(( int(*)( int(* pred)( struct _tagged_arr*, struct Cyc_Absyn_Structfield*),
! struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcexp_structfield_has_name,
! _temp897,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null((*((
! struct Cyc_Absyn_Structdecl**) _check_null( _temp913)))->fields))->v)){({ struct
! Cyc_Std_String_pa_struct _temp927; _temp927.tag= Cyc_Std_String_pa; _temp927.f1=(
! struct _tagged_arr)* _temp897;{ void* _temp926[ 1u]={& _temp927}; Cyc_Tcutil_terr(
! loc, _tag_arr("no field of struct has name %s", sizeof( unsigned char), 31u),
! _tag_arr( _temp926, sizeof( void*), 1u));}});} bad_type= 0; goto _LL902; _LL906:
! if( !(( int(*)( int(* pred)( struct _tagged_arr*, struct Cyc_Absyn_Structfield*),
! struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcexp_structfield_has_name,
! _temp897, _temp917)){({ struct Cyc_Std_String_pa_struct _temp929; _temp929.tag=
! Cyc_Std_String_pa; _temp929.f1=( struct _tagged_arr)* _temp897;{ void* _temp928[
! 1u]={& _temp929}; Cyc_Tcutil_terr( loc, _tag_arr("no field of struct has name %s",
! sizeof( unsigned char), 31u), _tag_arr( _temp928, sizeof( void*), 1u));}});}
! bad_type= 0; goto _LL902; _LL908: if( _temp919 ==  0){ return({ void* _temp930[
! 0u]={}; Cyc_Tcutil_impos( _tag_arr("offsetof on unchecked UnionType", sizeof(
! unsigned char), 32u), _tag_arr( _temp930, sizeof( void*), 0u));});} if((*((
! struct Cyc_Absyn_Uniondecl**) _check_null( _temp919)))->fields ==  0){ goto
! _LL902;} if( !(( int(*)( int(* pred)( struct _tagged_arr*, struct Cyc_Absyn_Structfield*),
! struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcexp_structfield_has_name,
! _temp897,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null((*((
! struct Cyc_Absyn_Uniondecl**) _check_null( _temp919)))->fields))->v)){({ struct
! Cyc_Std_String_pa_struct _temp932; _temp932.tag= Cyc_Std_String_pa; _temp932.f1=(
! struct _tagged_arr)* _temp897;{ void* _temp931[ 1u]={& _temp932}; Cyc_Tcutil_terr(
! loc, _tag_arr("no field of union has name %s", sizeof( unsigned char), 30u),
! _tag_arr( _temp931, sizeof( void*), 1u));}});} bad_type= 0; goto _LL902; _LL910:
! if( !(( int(*)( int(* pred)( struct _tagged_arr*, struct Cyc_Absyn_Structfield*),
! struct _tagged_arr* env, struct Cyc_List_List* x)) Cyc_List_exists_c)( Cyc_Tcexp_structfield_has_name,
! _temp897, _temp923)){({ struct Cyc_Std_String_pa_struct _temp934; _temp934.tag=
! Cyc_Std_String_pa; _temp934.f1=( struct _tagged_arr)* _temp897;{ void* _temp933[
! 1u]={& _temp934}; Cyc_Tcutil_terr( loc, _tag_arr("no field of anonymous union has name %s",
! sizeof( unsigned char), 40u), _tag_arr( _temp933, sizeof( void*), 1u));}});}
! bad_type= 0; goto _LL902; _LL912: goto _LL902; _LL902:;} if( bad_type){({ struct
! Cyc_Std_String_pa_struct _temp936; _temp936.tag= Cyc_Std_String_pa; _temp936.f1=(
! struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp935[ 1u]={& _temp936};
! Cyc_Tcutil_terr( loc, _tag_arr("%s is not a known struct/union type", sizeof(
! unsigned char), 36u), _tag_arr( _temp935, sizeof( void*), 1u));}});} goto _LL892;}
! _LL896: { int bad_type= 1;{ void* _temp937= Cyc_Tcutil_compress( t); struct Cyc_Absyn_Structdecl**
! _temp953; struct Cyc_List_List* _temp955; struct Cyc_Absyn_Uniondecl** _temp957;
! struct Cyc_List_List* _temp959; struct Cyc_List_List* _temp961; struct Cyc_Absyn_TunionFieldInfo
! _temp963; void* _temp965; struct Cyc_Absyn_Tunionfield* _temp967; struct Cyc_Absyn_Tuniondecl*
! _temp969; _LL939: if(( unsigned int) _temp937 >  4u?*(( int*) _temp937) ==  Cyc_Absyn_StructType:
! 0){ _LL954: _temp953=(( struct Cyc_Absyn_StructType_struct*) _temp937)->f3; goto
! _LL940;} else{ goto _LL941;} _LL941: if(( unsigned int) _temp937 >  4u?*(( int*)
! _temp937) ==  Cyc_Absyn_AnonStructType: 0){ _LL956: _temp955=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp937)->f1; goto _LL942;} else{ goto _LL943;} _LL943: if(( unsigned int)
! _temp937 >  4u?*(( int*) _temp937) ==  Cyc_Absyn_UnionType: 0){ _LL958: _temp957=((
! struct Cyc_Absyn_UnionType_struct*) _temp937)->f3; goto _LL944;} else{ goto
! _LL945;} _LL945: if(( unsigned int) _temp937 >  4u?*(( int*) _temp937) ==  Cyc_Absyn_AnonUnionType:
! 0){ _LL960: _temp959=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp937)->f1;
! goto _LL946;} else{ goto _LL947;} _LL947: if(( unsigned int) _temp937 >  4u?*((
! int*) _temp937) ==  Cyc_Absyn_TupleType: 0){ _LL962: _temp961=(( struct Cyc_Absyn_TupleType_struct*)
! _temp937)->f1; goto _LL948;} else{ goto _LL949;} _LL949: if(( unsigned int)
! _temp937 >  4u?*(( int*) _temp937) ==  Cyc_Absyn_TunionFieldType: 0){ _LL964:
! _temp963=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp937)->f1; _LL966:
! _temp965=( void*) _temp963.field_info; if(*(( int*) _temp965) ==  Cyc_Absyn_KnownTunionfield){
! _LL970: _temp969=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp965)->f1;
! goto _LL968; _LL968: _temp967=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp965)->f2; goto _LL950;} else{ goto _LL951;}} else{ goto _LL951;} _LL951:
! goto _LL952; _LL940: if( _temp953 ==  0){ return({ void* _temp971[ 0u]={}; Cyc_Tcutil_impos(
! _tag_arr("offsetof on unchecked StructType", sizeof( unsigned char), 33u),
! _tag_arr( _temp971, sizeof( void*), 0u));});} if((*(( struct Cyc_Absyn_Structdecl**)
! _check_null( _temp953)))->fields ==  0){ goto _LL938;} if((( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null((*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp953)))->fields))->v)
! <=  _temp899){({ struct Cyc_Std_Int_pa_struct _temp974; _temp974.tag= Cyc_Std_Int_pa;
! _temp974.f1=( int) _temp899;{ struct Cyc_Std_Int_pa_struct _temp973; _temp973.tag=
! Cyc_Std_Int_pa; _temp973.f1=( int)(( unsigned int)(( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null((*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp953)))->fields))->v));{
! void* _temp972[ 2u]={& _temp973,& _temp974}; Cyc_Tcutil_terr( loc, _tag_arr("struct has too few components: %d <= %d",
! sizeof( unsigned char), 40u), _tag_arr( _temp972, sizeof( void*), 2u));}}});}
! bad_type= 0; goto _LL938; _LL942: if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp955) <=  _temp899){({ struct Cyc_Std_Int_pa_struct _temp977; _temp977.tag=
! Cyc_Std_Int_pa; _temp977.f1=( int) _temp899;{ struct Cyc_Std_Int_pa_struct
! _temp976; _temp976.tag= Cyc_Std_Int_pa; _temp976.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp955));{ void* _temp975[ 2u]={&
! _temp976,& _temp977}; Cyc_Tcutil_terr( loc, _tag_arr("struct has too few components: %d <= %d",
! sizeof( unsigned char), 40u), _tag_arr( _temp975, sizeof( void*), 2u));}}});}
! bad_type= 0; goto _LL938; _LL944: if( _temp957 ==  0){ return({ void* _temp978[
! 0u]={}; Cyc_Tcutil_impos( _tag_arr("offsetof on unchecked UnionType", sizeof(
! unsigned char), 32u), _tag_arr( _temp978, sizeof( void*), 0u));});} if((*((
! struct Cyc_Absyn_Uniondecl**) _check_null( _temp957)))->fields ==  0){ goto
! _LL938;} if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null((*(( struct Cyc_Absyn_Uniondecl**) _check_null(
! _temp957)))->fields))->v) <=  _temp899){({ struct Cyc_Std_Int_pa_struct _temp981;
! _temp981.tag= Cyc_Std_Int_pa; _temp981.f1=( int) _temp899;{ struct Cyc_Std_Int_pa_struct
! _temp980; _temp980.tag= Cyc_Std_Int_pa; _temp980.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null((*(( struct Cyc_Absyn_Uniondecl**) _check_null( _temp957)))->fields))->v));{
! void* _temp979[ 2u]={& _temp980,& _temp981}; Cyc_Tcutil_terr( loc, _tag_arr("union has too few components: %d <= %d",
! sizeof( unsigned char), 39u), _tag_arr( _temp979, sizeof( void*), 2u));}}});}
! bad_type= 0; goto _LL938; _LL946: if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp959) <=  _temp899){({ struct Cyc_Std_Int_pa_struct _temp984; _temp984.tag=
! Cyc_Std_Int_pa; _temp984.f1=( int) _temp899;{ struct Cyc_Std_Int_pa_struct
! _temp983; _temp983.tag= Cyc_Std_Int_pa; _temp983.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp959));{ void* _temp982[ 2u]={&
! _temp983,& _temp984}; Cyc_Tcutil_terr( loc, _tag_arr("union has too few components: %d <= %d",
! sizeof( unsigned char), 39u), _tag_arr( _temp982, sizeof( void*), 2u));}}});}
! bad_type= 0; goto _LL938; _LL948: if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp961) <=  _temp899){({ struct Cyc_Std_Int_pa_struct _temp987; _temp987.tag=
! Cyc_Std_Int_pa; _temp987.f1=( int) _temp899;{ struct Cyc_Std_Int_pa_struct
! _temp986; _temp986.tag= Cyc_Std_Int_pa; _temp986.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp961));{ void* _temp985[ 2u]={&
! _temp986,& _temp987}; Cyc_Tcutil_terr( loc, _tag_arr("tuple has too few components: %d <= %d",
! sizeof( unsigned char), 39u), _tag_arr( _temp985, sizeof( void*), 2u));}}});}
! bad_type= 0; goto _LL938; _LL950: if((( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp967->typs) <  _temp899){({ struct Cyc_Std_Int_pa_struct _temp990; _temp990.tag=
! Cyc_Std_Int_pa; _temp990.f1=( int) _temp899;{ struct Cyc_Std_Int_pa_struct
! _temp989; _temp989.tag= Cyc_Std_Int_pa; _temp989.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp967->typs));{ void* _temp988[ 2u]={&
! _temp989,& _temp990}; Cyc_Tcutil_terr( loc, _tag_arr("tunionfield has too few components: %d < %d",
! sizeof( unsigned char), 44u), _tag_arr( _temp988, sizeof( void*), 2u));}}});}
! bad_type= 0; goto _LL938; _LL952: goto _LL938; _LL938:;} if( bad_type){({ struct
! Cyc_Std_String_pa_struct _temp992; _temp992.tag= Cyc_Std_String_pa; _temp992.f1=(
! struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp991[ 1u]={& _temp992};
! Cyc_Tcutil_terr( loc, _tag_arr("%s is not a known struct/union/tuple/tunion type",
! sizeof( unsigned char), 49u), _tag_arr( _temp991, sizeof( void*), 1u));}});}
! goto _LL892;} _LL892:;} return Cyc_Absyn_uint_t;} static void* Cyc_Tcexp_tcDeref(
! struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
! Cyc_Absyn_Exp* e){ Cyc_Tcexp_tcExp( te, 0, e);{ void* t= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v); void* _temp993= t;
! struct Cyc_Absyn_PtrInfo _temp999; struct Cyc_Absyn_Conref* _temp1001; void*
! _temp1003; void* _temp1005; _LL995: if(( unsigned int) _temp993 >  4u?*(( int*)
! _temp993) ==  Cyc_Absyn_PointerType: 0){ _LL1000: _temp999=(( struct Cyc_Absyn_PointerType_struct*)
! _temp993)->f1; _LL1006: _temp1005=( void*) _temp999.elt_typ; goto _LL1004;
! _LL1004: _temp1003=( void*) _temp999.rgn_typ; goto _LL1002; _LL1002: _temp1001=
! _temp999.bounds; goto _LL996;} else{ goto _LL997;} _LL997: goto _LL998; _LL996:
! Cyc_Tcenv_check_rgn_accessible( te, loc, _temp1003); Cyc_Tcutil_check_nonzero_bound(
! loc, _temp1001); return _temp1005; _LL998: return({ struct Cyc_Std_String_pa_struct
! _temp1008; _temp1008.tag= Cyc_Std_String_pa; _temp1008.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ void* _temp1007[ 1u]={& _temp1008}; Cyc_Tcexp_expr_err(
! te, loc, _tag_arr("expecting * or @ type but found %s", sizeof( unsigned char),
! 35u), _tag_arr( _temp1007, sizeof( void*), 1u));}}); _LL994:;}} static void* Cyc_Tcexp_tcStructMember(
! struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
! Cyc_Absyn_Exp* outer_e, struct Cyc_Absyn_Exp* e, struct _tagged_arr* f){ Cyc_Tcexp_tcExpNoPromote(
  te, 0, e);{ void* t= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v); void* _temp1009= t; struct Cyc_Absyn_Structdecl**
! _temp1025; struct Cyc_Absyn_Structdecl* _temp1027; struct Cyc_List_List*
! _temp1028; struct _tuple1* _temp1030; struct Cyc_List_List* _temp1032; struct
! Cyc_List_List* _temp1034; struct Cyc_Absyn_Uniondecl** _temp1036; struct Cyc_Absyn_Uniondecl*
! _temp1038; struct Cyc_List_List* _temp1039; struct _tuple1* _temp1041; _LL1011:
! if(( unsigned int) _temp1009 >  4u?*(( int*) _temp1009) ==  Cyc_Absyn_StructType:
! 0){ _LL1031: _temp1030=(( struct Cyc_Absyn_StructType_struct*) _temp1009)->f1;
! goto _LL1029; _LL1029: _temp1028=(( struct Cyc_Absyn_StructType_struct*)
! _temp1009)->f2; goto _LL1026; _LL1026: _temp1025=(( struct Cyc_Absyn_StructType_struct*)
! _temp1009)->f3; if( _temp1025 ==  0){ goto _LL1013;} else{ _temp1027=* _temp1025;
! goto _LL1012;}} else{ goto _LL1013;} _LL1013: if(( unsigned int) _temp1009 >  4u?*((
! int*) _temp1009) ==  Cyc_Absyn_AnonStructType: 0){ _LL1033: _temp1032=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp1009)->f1; goto _LL1014;} else{ goto
! _LL1015;} _LL1015: if(( unsigned int) _temp1009 >  4u?*(( int*) _temp1009) == 
! Cyc_Absyn_AnonUnionType: 0){ _LL1035: _temp1034=(( struct Cyc_Absyn_AnonUnionType_struct*)
! _temp1009)->f1; goto _LL1016;} else{ goto _LL1017;} _LL1017: if(( unsigned int)
! _temp1009 >  4u?*(( int*) _temp1009) ==  Cyc_Absyn_UnionType: 0){ _LL1042:
! _temp1041=(( struct Cyc_Absyn_UnionType_struct*) _temp1009)->f1; goto _LL1040;
! _LL1040: _temp1039=(( struct Cyc_Absyn_UnionType_struct*) _temp1009)->f2; goto
! _LL1037; _LL1037: _temp1036=(( struct Cyc_Absyn_UnionType_struct*) _temp1009)->f3;
! if( _temp1036 ==  0){ goto _LL1019;} else{ _temp1038=* _temp1036; goto _LL1018;}}
! else{ goto _LL1019;} _LL1019: if(( unsigned int) _temp1009 >  4u?*(( int*)
! _temp1009) ==  Cyc_Absyn_ArrayType: 0){ goto _LL1043;} else{ goto _LL1021;}
! _LL1043: if( Cyc_Std_zstrcmp(* f, _tag_arr("size", sizeof( unsigned char), 5u))
! ==  0){ goto _LL1020;} else{ goto _LL1021;} _LL1021: if(( unsigned int)
! _temp1009 >  4u?*(( int*) _temp1009) ==  Cyc_Absyn_PointerType: 0){ goto _LL1044;}
! else{ goto _LL1023;} _LL1044: if( Cyc_Std_zstrcmp(* f, _tag_arr("size", sizeof(
! unsigned char), 5u)) ==  0){ goto _LL1022;} else{ goto _LL1023;} _LL1023: goto
! _LL1024; _LL1012: if( _temp1030 ==  0){ return({ void* _temp1045[ 0u]={}; Cyc_Tcexp_expr_err(
! te, loc, _tag_arr("unresolved struct type (COMPILER ERROR)", sizeof(
! unsigned char), 40u), _tag_arr( _temp1045, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Structfield*
! _temp1046= Cyc_Absyn_lookup_struct_field( _temp1027, f); if( _temp1046 ==  0){
! return({ struct Cyc_Std_String_pa_struct _temp1049; _temp1049.tag= Cyc_Std_String_pa;
! _temp1049.f1=( struct _tagged_arr)* f;{ struct Cyc_Std_String_pa_struct
! _temp1048; _temp1048.tag= Cyc_Std_String_pa; _temp1048.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp1030));{ void*
! _temp1047[ 2u]={& _temp1048,& _temp1049}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("struct %s has no %s field",
! sizeof( unsigned char), 26u), _tag_arr( _temp1047, sizeof( void*), 2u));}}});}{
! void* t2;{ struct _RegionHandle _temp1050= _new_region(); struct _RegionHandle*
! rgn=& _temp1050; _push_region( rgn);{ struct Cyc_List_List* _temp1051=(( struct
  Cyc_List_List*(*)( struct _RegionHandle* r1, struct _RegionHandle* r2, struct
! Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp1027->tvs,
! _temp1028); t2= Cyc_Tcutil_rsubstitute( rgn, _temp1051,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1046))->type);}; _pop_region( rgn);} return t2;}} _LL1014: {
! struct Cyc_Absyn_Structfield* _temp1052= Cyc_Absyn_lookup_field( _temp1032, f);
! if( _temp1052 ==  0){ return({ struct Cyc_Std_String_pa_struct _temp1054;
! _temp1054.tag= Cyc_Std_String_pa; _temp1054.f1=( struct _tagged_arr)* f;{ void*
! _temp1053[ 1u]={& _temp1054}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("struct has no %s field",
! sizeof( unsigned char), 23u), _tag_arr( _temp1053, sizeof( void*), 1u));}});}
! return( void*)(( struct Cyc_Absyn_Structfield*) _check_null( _temp1052))->type;}
! _LL1016: { struct Cyc_Absyn_Structfield* _temp1055= Cyc_Absyn_lookup_field(
! _temp1034, f); if( _temp1055 ==  0){ return({ struct Cyc_Std_String_pa_struct
! _temp1057; _temp1057.tag= Cyc_Std_String_pa; _temp1057.f1=( struct _tagged_arr)*
! f;{ void* _temp1056[ 1u]={& _temp1057}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("union has no %s field",
! sizeof( unsigned char), 22u), _tag_arr( _temp1056, sizeof( void*), 1u));}});}
! return( void*)(( struct Cyc_Absyn_Structfield*) _check_null( _temp1055))->type;}
! _LL1018: if( _temp1041 ==  0){ return({ void* _temp1058[ 0u]={}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("unresolved union type (COMPILER ERROR)", sizeof(
! unsigned char), 39u), _tag_arr( _temp1058, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Structfield*
! _temp1059= Cyc_Absyn_lookup_union_field( _temp1038, f); if( _temp1059 ==  0){
! return({ struct Cyc_Std_String_pa_struct _temp1062; _temp1062.tag= Cyc_Std_String_pa;
! _temp1062.f1=( struct _tagged_arr)* f;{ struct Cyc_Std_String_pa_struct
! _temp1061; _temp1061.tag= Cyc_Std_String_pa; _temp1061.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp1041));{ void*
! _temp1060[ 2u]={& _temp1061,& _temp1062}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("union %s has no %s field",
! sizeof( unsigned char), 25u), _tag_arr( _temp1060, sizeof( void*), 2u));}}});}{
! struct Cyc_List_List* _temp1063=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)( _temp1038->tvs, _temp1039); void*
! _temp1064= Cyc_Tcutil_substitute( _temp1063,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1059))->type); return _temp1064;}} _LL1020:( void*)( outer_e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Primop_e_struct* _temp1065=( struct Cyc_Absyn_Primop_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Primop_e_struct)); _temp1065[ 0]=({ struct
! Cyc_Absyn_Primop_e_struct _temp1066; _temp1066.tag= Cyc_Absyn_Primop_e;
! _temp1066.f1=( void*)(( void*) Cyc_Absyn_Size); _temp1066.f2=({ struct Cyc_List_List*
! _temp1067=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1067->hd=( void*) e; _temp1067->tl= 0; _temp1067;}); _temp1066;});
! _temp1065;}))); return Cyc_Absyn_uint_t; _LL1022:( void*)( outer_e->r=( void*)((
! void*)({ struct Cyc_Absyn_Primop_e_struct* _temp1068=( struct Cyc_Absyn_Primop_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Primop_e_struct)); _temp1068[ 0]=({ struct
! Cyc_Absyn_Primop_e_struct _temp1069; _temp1069.tag= Cyc_Absyn_Primop_e;
! _temp1069.f1=( void*)(( void*) Cyc_Absyn_Size); _temp1069.f2=({ struct Cyc_List_List*
! _temp1070=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1070->hd=( void*) e; _temp1070->tl= 0; _temp1070;}); _temp1069;});
! _temp1068;}))); return Cyc_Absyn_uint_t; _LL1024: if( Cyc_Std_zstrcmp(* f,
! _tag_arr("size", sizeof( unsigned char), 5u)) ==  0){ return({ struct Cyc_Std_String_pa_struct
! _temp1072; _temp1072.tag= Cyc_Std_String_pa; _temp1072.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ void* _temp1071[ 1u]={& _temp1072}; Cyc_Tcexp_expr_err(
! te, loc, _tag_arr("expecting struct, union or array, found %s", sizeof(
! unsigned char), 43u), _tag_arr( _temp1071, sizeof( void*), 1u));}});} else{
! return({ struct Cyc_Std_String_pa_struct _temp1074; _temp1074.tag= Cyc_Std_String_pa;
! _temp1074.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp1073[
! 1u]={& _temp1074}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting struct or union, found %s",
! sizeof( unsigned char), 36u), _tag_arr( _temp1073, sizeof( void*), 1u));}});}
! _LL1010:;}} static void* Cyc_Tcexp_tcStructArrow( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e, struct
  _tagged_arr* f){ Cyc_Tcexp_tcExp( te, 0, e);{ void* t= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v); void* _temp1075= t;
! struct Cyc_Absyn_PtrInfo _temp1081; struct Cyc_Absyn_Conref* _temp1083; void*
! _temp1085; void* _temp1087; _LL1077: if(( unsigned int) _temp1075 >  4u?*(( int*)
! _temp1075) ==  Cyc_Absyn_PointerType: 0){ _LL1082: _temp1081=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1075)->f1; _LL1088: _temp1087=( void*) _temp1081.elt_typ; goto _LL1086;
! _LL1086: _temp1085=( void*) _temp1081.rgn_typ; goto _LL1084; _LL1084: _temp1083=
! _temp1081.bounds; goto _LL1078;} else{ goto _LL1079;} _LL1079: goto _LL1080;
! _LL1078: Cyc_Tcutil_check_nonzero_bound( loc, _temp1083);{ void* _temp1089= Cyc_Tcutil_compress(
! _temp1087); struct Cyc_Absyn_Structdecl** _temp1101; struct Cyc_Absyn_Structdecl*
! _temp1103; struct Cyc_List_List* _temp1104; struct _tuple1* _temp1106; struct
! Cyc_Absyn_Uniondecl** _temp1108; struct Cyc_Absyn_Uniondecl* _temp1110; struct
! Cyc_List_List* _temp1111; struct _tuple1* _temp1113; struct Cyc_List_List*
! _temp1115; struct Cyc_List_List* _temp1117; _LL1091: if(( unsigned int)
! _temp1089 >  4u?*(( int*) _temp1089) ==  Cyc_Absyn_StructType: 0){ _LL1107:
! _temp1106=(( struct Cyc_Absyn_StructType_struct*) _temp1089)->f1; goto _LL1105;
! _LL1105: _temp1104=(( struct Cyc_Absyn_StructType_struct*) _temp1089)->f2; goto
! _LL1102; _LL1102: _temp1101=(( struct Cyc_Absyn_StructType_struct*) _temp1089)->f3;
! if( _temp1101 ==  0){ goto _LL1093;} else{ _temp1103=* _temp1101; goto _LL1092;}}
! else{ goto _LL1093;} _LL1093: if(( unsigned int) _temp1089 >  4u?*(( int*)
! _temp1089) ==  Cyc_Absyn_UnionType: 0){ _LL1114: _temp1113=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1089)->f1; goto _LL1112; _LL1112: _temp1111=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1089)->f2; goto _LL1109; _LL1109: _temp1108=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1089)->f3; if( _temp1108 ==  0){ goto _LL1095;} else{ _temp1110=* _temp1108;
! goto _LL1094;}} else{ goto _LL1095;} _LL1095: if(( unsigned int) _temp1089 >  4u?*((
! int*) _temp1089) ==  Cyc_Absyn_AnonStructType: 0){ _LL1116: _temp1115=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp1089)->f1; goto _LL1096;} else{ goto
! _LL1097;} _LL1097: if(( unsigned int) _temp1089 >  4u?*(( int*) _temp1089) == 
! Cyc_Absyn_AnonUnionType: 0){ _LL1118: _temp1117=(( struct Cyc_Absyn_AnonUnionType_struct*)
! _temp1089)->f1; goto _LL1098;} else{ goto _LL1099;} _LL1099: goto _LL1100;
! _LL1092: { struct Cyc_Absyn_Structfield* _temp1119= Cyc_Absyn_lookup_struct_field(
! _temp1103, f); if( _temp1119 ==  0){ return({ struct Cyc_Std_String_pa_struct
! _temp1122; _temp1122.tag= Cyc_Std_String_pa; _temp1122.f1=( struct _tagged_arr)*
! f;{ struct Cyc_Std_String_pa_struct _temp1121; _temp1121.tag= Cyc_Std_String_pa;
! _temp1121.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(( struct _tuple1*)
! _check_null( _temp1106));{ void* _temp1120[ 2u]={& _temp1121,& _temp1122}; Cyc_Tcexp_expr_err(
! te, loc, _tag_arr("struct %s has no %s field", sizeof( unsigned char), 26u),
! _tag_arr( _temp1120, sizeof( void*), 2u));}}});}{ void* t3;{ struct
! _RegionHandle _temp1123= _new_region(); struct _RegionHandle* rgn=& _temp1123;
! _push_region( rgn);{ struct Cyc_List_List* _temp1124=(( struct Cyc_List_List*(*)(
! struct _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp1103->tvs, _temp1104);
! t3= Cyc_Tcutil_rsubstitute( rgn, _temp1124,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1119))->type);}; _pop_region( rgn);} Cyc_Tcenv_check_rgn_accessible(
! te, loc, _temp1085); return t3;}} _LL1094: { struct Cyc_Absyn_Structfield*
! _temp1125= Cyc_Absyn_lookup_union_field( _temp1110, f); if( _temp1125 ==  0){
! return({ struct Cyc_Std_String_pa_struct _temp1128; _temp1128.tag= Cyc_Std_String_pa;
! _temp1128.f1=( struct _tagged_arr)* f;{ struct Cyc_Std_String_pa_struct
! _temp1127; _temp1127.tag= Cyc_Std_String_pa; _temp1127.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp1113));{ void*
! _temp1126[ 2u]={& _temp1127,& _temp1128}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("union %s has no %s field",
! sizeof( unsigned char), 25u), _tag_arr( _temp1126, sizeof( void*), 2u));}}});}{
! struct Cyc_List_List* _temp1129=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)( _temp1110->tvs, _temp1111); void*
! _temp1130= Cyc_Tcutil_substitute( _temp1129,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1125))->type); Cyc_Tcenv_check_rgn_accessible( te, loc,
! _temp1085); return _temp1130;}} _LL1096: { struct Cyc_Absyn_Structfield*
! _temp1131= Cyc_Absyn_lookup_field( _temp1115, f); if( _temp1131 ==  0){ return({
! struct Cyc_Std_String_pa_struct _temp1133; _temp1133.tag= Cyc_Std_String_pa;
! _temp1133.f1=( struct _tagged_arr)* f;{ void* _temp1132[ 1u]={& _temp1133}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("struct has no %s field", sizeof( unsigned char), 23u),
! _tag_arr( _temp1132, sizeof( void*), 1u));}});} return( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1131))->type;} _LL1098: { struct Cyc_Absyn_Structfield*
! _temp1134= Cyc_Absyn_lookup_field( _temp1117, f); if( _temp1134 ==  0){ return({
! struct Cyc_Std_String_pa_struct _temp1136; _temp1136.tag= Cyc_Std_String_pa;
! _temp1136.f1=( struct _tagged_arr)* f;{ void* _temp1135[ 1u]={& _temp1136}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("union has no %s field", sizeof( unsigned char), 22u),
! _tag_arr( _temp1135, sizeof( void*), 1u));}});} return( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1134))->type;} _LL1100: return({ struct Cyc_Std_String_pa_struct
! _temp1138; _temp1138.tag= Cyc_Std_String_pa; _temp1138.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ void* _temp1137[ 1u]={& _temp1138}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("expecting struct pointer, found %s", sizeof( unsigned char),
! 35u), _tag_arr( _temp1137, sizeof( void*), 1u));}}); _LL1090:;} _LL1080: return({
! struct Cyc_Std_String_pa_struct _temp1140; _temp1140.tag= Cyc_Std_String_pa;
! _temp1140.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp1139[
! 1u]={& _temp1140}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting struct pointer, found %s",
! sizeof( unsigned char), 35u), _tag_arr( _temp1139, sizeof( void*), 1u));}});
! _LL1076:;}} static void* Cyc_Tcexp_ithTupleType( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Position_Segment* loc, struct Cyc_List_List* ts, struct Cyc_Absyn_Exp*
  index){ unsigned int i= Cyc_Evexp_eval_const_uint_exp( index); struct
! _handler_cons _temp1141; _push_handler(& _temp1141);{ int _temp1143= 0; if(
! setjmp( _temp1141.handler)){ _temp1143= 1;} if( ! _temp1143){{ void* _temp1144=(*((
  struct _tuple8*(*)( struct Cyc_List_List* x, int n)) Cyc_List_nth)( ts,( int) i)).f2;
! _npop_handler( 0u); return _temp1144;}; _pop_handler();} else{ void* _temp1142=(
! void*) _exn_thrown; void* _temp1146= _temp1142; _LL1148: if( _temp1146 ==  Cyc_List_Nth){
! goto _LL1149;} else{ goto _LL1150;} _LL1150: goto _LL1151; _LL1149: return({
! struct Cyc_Std_Int_pa_struct _temp1154; _temp1154.tag= Cyc_Std_Int_pa; _temp1154.f1=(
  int)(( unsigned int)(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( ts));{
! struct Cyc_Std_Int_pa_struct _temp1153; _temp1153.tag= Cyc_Std_Int_pa; _temp1153.f1=(
! int) i;{ void* _temp1152[ 2u]={& _temp1153,& _temp1154}; Cyc_Tcexp_expr_err( te,
  loc, _tag_arr("index is %d but tuple has only %d fields", sizeof( unsigned char),
! 41u), _tag_arr( _temp1152, sizeof( void*), 2u));}}}); _LL1151:( void) _throw(
! _temp1146); _LL1147:;}}} static void* Cyc_Tcexp_tcSubscript( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e1,
  struct Cyc_Absyn_Exp* e2){ Cyc_Tcexp_tcExp( te, 0, e1); Cyc_Tcexp_tcExp( te, 0,
  e2);{ void* t1= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
  e1->topt))->v); void* t2= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
  _check_null( e2->topt))->v); if( ! Cyc_Tcutil_coerce_sint_typ( te, e2)){ return({
! struct Cyc_Std_String_pa_struct _temp1156; _temp1156.tag= Cyc_Std_String_pa;
! _temp1156.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t2);{ void* _temp1155[
! 1u]={& _temp1156}; Cyc_Tcexp_expr_err( te, e2->loc, _tag_arr("expecting int subscript, found %s",
! sizeof( unsigned char), 34u), _tag_arr( _temp1155, sizeof( void*), 1u));}});}{
! void* _temp1157= t1; struct Cyc_Absyn_PtrInfo _temp1165; struct Cyc_Absyn_Conref*
! _temp1167; struct Cyc_Absyn_Tqual _temp1169; void* _temp1171; void* _temp1173;
! struct Cyc_List_List* _temp1175; _LL1159: if(( unsigned int) _temp1157 >  4u?*((
! int*) _temp1157) ==  Cyc_Absyn_PointerType: 0){ _LL1166: _temp1165=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1157)->f1; _LL1174: _temp1173=( void*) _temp1165.elt_typ; goto _LL1172;
! _LL1172: _temp1171=( void*) _temp1165.rgn_typ; goto _LL1170; _LL1170: _temp1169=
! _temp1165.tq; goto _LL1168; _LL1168: _temp1167= _temp1165.bounds; goto _LL1160;}
! else{ goto _LL1161;} _LL1161: if(( unsigned int) _temp1157 >  4u?*(( int*)
! _temp1157) ==  Cyc_Absyn_TupleType: 0){ _LL1176: _temp1175=(( struct Cyc_Absyn_TupleType_struct*)
! _temp1157)->f1; goto _LL1162;} else{ goto _LL1163;} _LL1163: goto _LL1164;
! _LL1160: if( Cyc_Tcutil_is_const_exp( te, e2)){ Cyc_Tcutil_check_bound( loc, Cyc_Evexp_eval_const_uint_exp(
! e2), _temp1167);} else{ if( Cyc_Tcutil_is_bound_one( _temp1167)){({ void*
! _temp1177[ 0u]={}; Cyc_Tcutil_warn( e1->loc, _tag_arr("subscript applied to pointer to one object",
! sizeof( unsigned char), 43u), _tag_arr( _temp1177, sizeof( void*), 0u));});} Cyc_Tcutil_check_nonzero_bound(
! loc, _temp1167);} Cyc_Tcenv_check_rgn_accessible( te, loc, _temp1171); return
! _temp1173; _LL1162: return Cyc_Tcexp_ithTupleType( te, loc, _temp1175, e2);
! _LL1164: return({ struct Cyc_Std_String_pa_struct _temp1179; _temp1179.tag= Cyc_Std_String_pa;
! _temp1179.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t1);{ void* _temp1178[
! 1u]={& _temp1179}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("subscript applied to %s",
! sizeof( unsigned char), 24u), _tag_arr( _temp1178, sizeof( void*), 1u));}});
! _LL1158:;}}} static void* Cyc_Tcexp_tcTuple( struct Cyc_Tcenv_Tenv* te, struct
  Cyc_Position_Segment* loc, void** topt, struct Cyc_List_List* es){ int done= 0;
! struct Cyc_List_List* fields= 0; if( topt !=  0){ void* _temp1180= Cyc_Tcutil_compress(*((
! void**) _check_null( topt))); struct Cyc_List_List* _temp1186; _LL1182: if((
! unsigned int) _temp1180 >  4u?*(( int*) _temp1180) ==  Cyc_Absyn_TupleType: 0){
! _LL1187: _temp1186=(( struct Cyc_Absyn_TupleType_struct*) _temp1180)->f1; goto
! _LL1183;} else{ goto _LL1184;} _LL1184: goto _LL1185; _LL1183: if((( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp1186) != (( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( es)){({ void* _temp1188[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("tuple expression has the wrong number of fields", sizeof(
! unsigned char), 48u), _tag_arr( _temp1188, sizeof( void*), 0u));}); goto _LL1181;}
! for( 0; es !=  0;( es=(( struct Cyc_List_List*) _check_null( es))->tl, _temp1186=((
! struct Cyc_List_List*) _check_null( _temp1186))->tl)){ void* _temp1189=(*((
! struct _tuple8*)(( struct Cyc_List_List*) _check_null( _temp1186))->hd)).f2; Cyc_Tcexp_tcExpInitializer(
! te,( void**)& _temp1189,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
! _check_null( es))->hd); fields=({ struct Cyc_List_List* _temp1190=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1190->hd=( void*)({ struct
! _tuple8* _temp1191=( struct _tuple8*) _cycalloc( sizeof( struct _tuple8));
! _temp1191->f1=(*(( struct _tuple8*)(( struct Cyc_List_List*) _check_null(
! _temp1186))->hd)).f1; _temp1191->f2=( void*)(( struct Cyc_Core_Opt*) _check_null(((
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd)->topt))->v;
! _temp1191;}); _temp1190->tl= fields; _temp1190;});} done= 1; goto _LL1181;
! _LL1185: goto _LL1181; _LL1181:;} if( ! done){ for( 0; es !=  0; es=(( struct
  Cyc_List_List*) _check_null( es))->tl){ Cyc_Tcexp_tcExpInitializer( te, 0,(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd); fields=({
! struct Cyc_List_List* _temp1192=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1192->hd=( void*)({ struct _tuple8* _temp1193=(
! struct _tuple8*) _cycalloc( sizeof( struct _tuple8)); _temp1193->f1= Cyc_Absyn_empty_tqual();
! _temp1193->f2=( void*)(( struct Cyc_Core_Opt*) _check_null((( struct Cyc_Absyn_Exp*)((
! struct Cyc_List_List*) _check_null( es))->hd)->topt))->v; _temp1193;});
! _temp1192->tl= fields; _temp1192;});}} return( void*)({ struct Cyc_Absyn_TupleType_struct*
! _temp1194=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp1194[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp1195; _temp1195.tag= Cyc_Absyn_TupleType;
! _temp1195.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
! fields); _temp1195;}); _temp1194;});} static void* Cyc_Tcexp_tcCompoundLit(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
! _tuple2* t, struct Cyc_List_List* des){ return({ void* _temp1196[ 0u]={}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("tcCompoundLit", sizeof( unsigned char), 14u), _tag_arr(
! _temp1196, sizeof( void*), 0u));});} static void* Cyc_Tcexp_tcArray( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** elt_topt, struct Cyc_List_List* des){
  struct Cyc_List_List* es=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)(
  struct _tuple7*), struct Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Absyn_Exp*(*)(
  struct _tuple7*)) Cyc_Core_snd, des); void* res= Cyc_Absyn_new_evar(( struct Cyc_Core_Opt*)&
! Cyc_Tcexp_mk,({ struct Cyc_Core_Opt* _temp1219=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1219->v=( void*) Cyc_Tcenv_lookup_type_vars(
! te); _temp1219;})); struct Cyc_Absyn_Const_e_struct* _temp1197=({ struct Cyc_Absyn_Const_e_struct*
! _temp1215=( struct Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp1215[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp1216; _temp1216.tag= Cyc_Absyn_Const_e;
! _temp1216.f1=( void*)(( void*)({ struct Cyc_Absyn_Int_c_struct* _temp1217=(
  struct Cyc_Absyn_Int_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct));
! _temp1217[ 0]=({ struct Cyc_Absyn_Int_c_struct _temp1218; _temp1218.tag= Cyc_Absyn_Int_c;
! _temp1218.f1=( void*)(( void*) Cyc_Absyn_Unsigned); _temp1218.f2=(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( es); _temp1218;}); _temp1217;}));
! _temp1216;}); _temp1215;}); struct Cyc_Absyn_Exp* sz_exp= Cyc_Absyn_new_exp((
! void*) _temp1197, loc); sz_exp->topt=({ struct Cyc_Core_Opt* _temp1198=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1198->v=( void*)
! Cyc_Absyn_uint_t; _temp1198;});{ void* res_t2=( void*)({ struct Cyc_Absyn_ArrayType_struct*
! _temp1213=( struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp1213[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp1214; _temp1214.tag= Cyc_Absyn_ArrayType;
! _temp1214.f1=( void*) res; _temp1214.f2= Cyc_Absyn_empty_tqual(); _temp1214.f3=(
! struct Cyc_Absyn_Exp*) sz_exp; _temp1214;}); _temp1213;});{ struct Cyc_List_List*
  es2= es; for( 0; es2 !=  0; es2=(( struct Cyc_List_List*) _check_null( es2))->tl){
  Cyc_Tcexp_tcExpInitializer( te, elt_topt,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( es2))->hd);}} if( ! Cyc_Tcutil_coerce_list( te, res, es)){({ struct
! Cyc_Std_String_pa_struct _temp1200; _temp1200.tag= Cyc_Std_String_pa; _temp1200.f1=(
! struct _tagged_arr) Cyc_Absynpp_typ2string( res);{ void* _temp1199[ 1u]={&
! _temp1200}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( es))->hd)->loc, _tag_arr("elements of array do not all have the same type (%s)",
! sizeof( unsigned char), 53u), _tag_arr( _temp1199, sizeof( void*), 1u));}});}{
  int offset= 0; for( 0; des !=  0;( offset ++, des=(( struct Cyc_List_List*)
  _check_null( des))->tl)){ struct Cyc_List_List* ds=(*(( struct _tuple7*)((
  struct Cyc_List_List*) _check_null( des))->hd)).f1; if( ds !=  0){ void*
! _temp1201=( void*)(( struct Cyc_List_List*) _check_null( ds))->hd; struct Cyc_Absyn_Exp*
! _temp1207; _LL1203: if(*(( int*) _temp1201) ==  Cyc_Absyn_FieldName){ goto
! _LL1204;} else{ goto _LL1205;} _LL1205: if(*(( int*) _temp1201) ==  Cyc_Absyn_ArrayElement){
! _LL1208: _temp1207=(( struct Cyc_Absyn_ArrayElement_struct*) _temp1201)->f1;
! goto _LL1206;} else{ goto _LL1202;} _LL1204:({ void* _temp1209[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("only array index designators are supported", sizeof(
! unsigned char), 43u), _tag_arr( _temp1209, sizeof( void*), 0u));}); goto _LL1202;
! _LL1206: Cyc_Tcexp_tcExpInitializer( te, 0, _temp1207);{ unsigned int i= Cyc_Evexp_eval_const_uint_exp(
! _temp1207); if( i !=  offset){({ struct Cyc_Std_Int_pa_struct _temp1212;
! _temp1212.tag= Cyc_Std_Int_pa; _temp1212.f1=( int) i;{ struct Cyc_Std_Int_pa_struct
! _temp1211; _temp1211.tag= Cyc_Std_Int_pa; _temp1211.f1=( int)(( unsigned int)
! offset);{ void* _temp1210[ 2u]={& _temp1211,& _temp1212}; Cyc_Tcutil_terr(
! _temp1207->loc, _tag_arr("expecting index designator %d but found %d", sizeof(
! unsigned char), 43u), _tag_arr( _temp1210, sizeof( void*), 2u));}}});} goto
! _LL1202;} _LL1202:;}}} return res_t2;}} static void* Cyc_Tcexp_tcComprehension(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Exp* bound, struct Cyc_Absyn_Exp* body){
  Cyc_Tcexp_tcExp( te, 0, bound); if( ! Cyc_Tcutil_coerce_uint_typ( te, bound)){({
! struct Cyc_Std_String_pa_struct _temp1221; _temp1221.tag= Cyc_Std_String_pa;
! _temp1221.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*)
! _check_null( bound->topt))->v);{ void* _temp1220[ 1u]={& _temp1221}; Cyc_Tcutil_terr(
  bound->loc, _tag_arr("expecting unsigned int, found %s", sizeof( unsigned char),
! 33u), _tag_arr( _temp1220, sizeof( void*), 1u));}});} if( !( vd->tq).q_const){({
! void* _temp1222[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Tcutil_impos)( _tag_arr("comprehension index variable is not declared const!",
! sizeof( unsigned char), 52u), _tag_arr( _temp1222, sizeof( void*), 0u));});} if(
  te->le !=  0){ te= Cyc_Tcenv_new_block( loc, te); te= Cyc_Tcenv_add_local_var(
! loc, te, vd);}{ struct Cyc_Absyn_PtrInfo pinfo; void** _temp1223= 0; struct Cyc_Absyn_Tqual*
! _temp1224= 0; if( topt !=  0){ void* _temp1225= Cyc_Tcutil_compress(*(( void**)
! _check_null( topt))); struct Cyc_Absyn_PtrInfo _temp1233; struct Cyc_Absyn_Exp*
! _temp1235; struct Cyc_Absyn_Tqual _temp1237; struct Cyc_Absyn_Tqual* _temp1239;
! void* _temp1240; void** _temp1242; _LL1227: if(( unsigned int) _temp1225 >  4u?*((
! int*) _temp1225) ==  Cyc_Absyn_PointerType: 0){ _LL1234: _temp1233=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1225)->f1; goto _LL1228;} else{ goto _LL1229;} _LL1229: if(( unsigned int)
! _temp1225 >  4u?*(( int*) _temp1225) ==  Cyc_Absyn_ArrayType: 0){ _LL1241:
! _temp1240=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1225)->f1;
! _temp1242=( void**)&(( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1225)->f1);
! goto _LL1238; _LL1238: _temp1237=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1225)->f2; _temp1239=( struct Cyc_Absyn_Tqual*)&(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1225)->f2; goto _LL1236; _LL1236: _temp1235=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1225)->f3; goto _LL1230;} else{ goto _LL1231;} _LL1231: goto _LL1232;
! _LL1228: pinfo= _temp1233; _temp1223=( void**)(( void**)(( void*)& pinfo.elt_typ));
! _temp1224=( struct Cyc_Absyn_Tqual*)& pinfo.tq; goto _LL1226; _LL1230: _temp1223=(
! void**) _temp1242; _temp1224=( struct Cyc_Absyn_Tqual*) _temp1239; goto _LL1226;
! _LL1232: goto _LL1226; _LL1226:;}{ void* t= Cyc_Tcexp_tcExp( te, _temp1223, body);
! if( te->le ==  0){ if( ! Cyc_Tcutil_is_const_exp( te, bound)){({ void* _temp1243[
  0u]={}; Cyc_Tcutil_terr( bound->loc, _tag_arr("bound is not constant", sizeof(
! unsigned char), 22u), _tag_arr( _temp1243, sizeof( void*), 0u));});} if( ! Cyc_Tcutil_is_const_exp(
! te, body)){({ void* _temp1244[ 0u]={}; Cyc_Tcutil_terr( bound->loc, _tag_arr("body is not constant",
! sizeof( unsigned char), 21u), _tag_arr( _temp1244, sizeof( void*), 0u));});}}
! return( void*)({ struct Cyc_Absyn_ArrayType_struct* _temp1245=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp1245[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp1246; _temp1246.tag= Cyc_Absyn_ArrayType;
! _temp1246.f1=( void*) t; _temp1246.f2= _temp1224 ==  0? Cyc_Absyn_empty_tqual():*((
! struct Cyc_Absyn_Tqual*) _check_null( _temp1224)); _temp1246.f3=( struct Cyc_Absyn_Exp*)
! bound; _temp1246;}); _temp1245;});}}} struct _tuple9{ struct Cyc_Absyn_Structfield*
  f1; struct Cyc_Absyn_Exp* f2; } ; static void* Cyc_Tcexp_tcStruct( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** topt, struct _tuple1** tn, struct
  Cyc_Core_Opt** otyps, struct Cyc_List_List* args, struct Cyc_Absyn_Structdecl**
  sd_opt){ struct Cyc_Absyn_Structdecl* sd; if(* sd_opt !=  0){ sd=( struct Cyc_Absyn_Structdecl*)
! _check_null(* sd_opt);} else{{ struct _handler_cons _temp1247; _push_handler(&
! _temp1247);{ int _temp1249= 0; if( setjmp( _temp1247.handler)){ _temp1249= 1;}
! if( ! _temp1249){ sd=* Cyc_Tcenv_lookup_structdecl( te, loc,* tn);; _pop_handler();}
! else{ void* _temp1248=( void*) _exn_thrown; void* _temp1251= _temp1248; _LL1253:
! if( _temp1251 ==  Cyc_Dict_Absent){ goto _LL1254;} else{ goto _LL1255;} _LL1255:
! goto _LL1256; _LL1254:({ struct Cyc_Std_String_pa_struct _temp1258; _temp1258.tag=
! Cyc_Std_String_pa; _temp1258.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(*
! tn);{ void* _temp1257[ 1u]={& _temp1258}; Cyc_Tcutil_terr( loc, _tag_arr("unbound struct name %s",
! sizeof( unsigned char), 23u), _tag_arr( _temp1257, sizeof( void*), 1u));}});
  return topt !=  0?*(( void**) _check_null( topt)):( void*) Cyc_Absyn_VoidType;
! _LL1256:( void) _throw( _temp1251); _LL1252:;}}}* sd_opt=( struct Cyc_Absyn_Structdecl*)
  sd; if( sd->name !=  0){* tn=( struct _tuple1*)(( struct Cyc_Core_Opt*)
! _check_null( sd->name))->v;}}{ struct _RegionHandle _temp1259= _new_region();
! struct _RegionHandle* rgn=& _temp1259; _push_region( rgn);{ struct _tuple4
! _temp1260=({ struct _tuple4 _temp1284; _temp1284.f1= Cyc_Tcenv_lookup_type_vars(
! te); _temp1284.f2= rgn; _temp1284;}); struct Cyc_List_List* _temp1261=(( struct
  Cyc_List_List*(*)( struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*,
  struct Cyc_Absyn_Tvar*), struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)(
! rgn, Cyc_Tcutil_r_make_inst_var,& _temp1260, sd->tvs); struct Cyc_List_List*
! _temp1262=(( struct Cyc_List_List*(*)( void*(* f)( struct _tuple5*), struct Cyc_List_List*
! x)) Cyc_List_map)(( void*(*)( struct _tuple5*)) Cyc_Core_snd, _temp1261); struct
! Cyc_Absyn_StructType_struct* _temp1263=({ struct Cyc_Absyn_StructType_struct*
! _temp1281=( struct Cyc_Absyn_StructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct));
! _temp1281[ 0]=({ struct Cyc_Absyn_StructType_struct _temp1282; _temp1282.tag=
! Cyc_Absyn_StructType; _temp1282.f1=( struct _tuple1*)* tn; _temp1282.f2=
! _temp1262; _temp1282.f3=({ struct Cyc_Absyn_Structdecl** _temp1283=( struct Cyc_Absyn_Structdecl**)
! _cycalloc( sizeof( struct Cyc_Absyn_Structdecl*)); _temp1283[ 0]= sd; _temp1283;});
! _temp1282;}); _temp1281;}); if( topt !=  0){ Cyc_Tcutil_unify(( void*) _temp1263,*((
! void**) _check_null( topt)));}* otyps=({ struct Cyc_Core_Opt* _temp1264=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1264->v=( void*)
! _temp1262; _temp1264;}); if( sd->fields ==  0){({ void* _temp1265[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("can't build abstract struct", sizeof( unsigned char), 28u),
! _tag_arr( _temp1265, sizeof( void*), 0u));});{ void* _temp1266=( void*)
! _temp1263; _npop_handler( 0u); return _temp1266;}}{ struct Cyc_List_List* fields=((
  struct Cyc_List_List*(*)( struct _RegionHandle* rgn, struct Cyc_Position_Segment*
  loc, struct Cyc_List_List* des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)(
  rgn, loc, args,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( sd->fields))->v);
  for( 0; fields !=  0; fields=(( struct Cyc_List_List*) _check_null( fields))->tl){
! struct _tuple9 _temp1269; struct Cyc_Absyn_Exp* _temp1270; struct Cyc_Absyn_Structfield*
! _temp1272; struct _tuple9* _temp1267=( struct _tuple9*)(( struct Cyc_List_List*)
! _check_null( fields))->hd; _temp1269=* _temp1267; _LL1273: _temp1272= _temp1269.f1;
! goto _LL1271; _LL1271: _temp1270= _temp1269.f2; goto _LL1268; _LL1268: { void*
! _temp1274= Cyc_Tcutil_rsubstitute( rgn, _temp1261,( void*) _temp1272->type); Cyc_Tcexp_tcExpInitializer(
! te,( void**)& _temp1274, _temp1270); if( ! Cyc_Tcutil_coerce_arg( te, _temp1270,
! _temp1274)){({ struct Cyc_Std_String_pa_struct _temp1279; _temp1279.tag= Cyc_Std_String_pa;
! _temp1279.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1270->topt))->v);{ struct Cyc_Std_String_pa_struct _temp1278;
! _temp1278.tag= Cyc_Std_String_pa; _temp1278.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp1274);{ struct Cyc_Std_String_pa_struct _temp1277; _temp1277.tag= Cyc_Std_String_pa;
! _temp1277.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(* tn);{ struct Cyc_Std_String_pa_struct
! _temp1276; _temp1276.tag= Cyc_Std_String_pa; _temp1276.f1=( struct _tagged_arr)*
! _temp1272->name;{ void* _temp1275[ 4u]={& _temp1276,& _temp1277,& _temp1278,&
! _temp1279}; Cyc_Tcutil_terr( _temp1270->loc, _tag_arr("field %s of struct %s expects type %s != %s",
! sizeof( unsigned char), 44u), _tag_arr( _temp1275, sizeof( void*), 4u));}}}}});}}}{
! void* _temp1280=( void*) _temp1263; _npop_handler( 0u); return _temp1280;}}};
  _pop_region( rgn);}} static void* Cyc_Tcexp_tcAnonStruct( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void* ts, struct Cyc_List_List* args){{
! struct _RegionHandle _temp1285= _new_region(); struct _RegionHandle* rgn=&
! _temp1285; _push_region( rgn);{ void* _temp1286= Cyc_Tcutil_compress( ts);
! struct Cyc_List_List* _temp1292; _LL1288: if(( unsigned int) _temp1286 >  4u?*((
! int*) _temp1286) ==  Cyc_Absyn_AnonStructType: 0){ _LL1293: _temp1292=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp1286)->f1; goto _LL1289;} else{ goto
! _LL1290;} _LL1290: goto _LL1291; _LL1289: { struct Cyc_List_List* fields=((
  struct Cyc_List_List*(*)( struct _RegionHandle* rgn, struct Cyc_Position_Segment*
  loc, struct Cyc_List_List* des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)(
! rgn, loc, args, _temp1292); for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
! _check_null( fields))->tl){ struct _tuple9 _temp1296; struct Cyc_Absyn_Exp*
! _temp1297; struct Cyc_Absyn_Structfield* _temp1299; struct _tuple9* _temp1294=(
! struct _tuple9*)(( struct Cyc_List_List*) _check_null( fields))->hd; _temp1296=*
! _temp1294; _LL1300: _temp1299= _temp1296.f1; goto _LL1298; _LL1298: _temp1297=
! _temp1296.f2; goto _LL1295; _LL1295: Cyc_Tcexp_tcExpInitializer( te,( void**)((
! void**)(( void*)& _temp1299->type)), _temp1297); if( ! Cyc_Tcutil_coerce_arg( te,
! _temp1297,( void*) _temp1299->type)){({ struct Cyc_Std_String_pa_struct
! _temp1304; _temp1304.tag= Cyc_Std_String_pa; _temp1304.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp1297->topt))->v);{
! struct Cyc_Std_String_pa_struct _temp1303; _temp1303.tag= Cyc_Std_String_pa;
! _temp1303.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*) _temp1299->type);{
! struct Cyc_Std_String_pa_struct _temp1302; _temp1302.tag= Cyc_Std_String_pa;
! _temp1302.f1=( struct _tagged_arr)* _temp1299->name;{ void* _temp1301[ 3u]={&
! _temp1302,& _temp1303,& _temp1304}; Cyc_Tcutil_terr( _temp1297->loc, _tag_arr("field %s of struct expects type %s != %s",
! sizeof( unsigned char), 41u), _tag_arr( _temp1301, sizeof( void*), 3u));}}}});}}
! goto _LL1287;} _LL1291:({ void* _temp1305[ 0u]={};(( int(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("tcAnonStruct:  not an AnonStructType",
! sizeof( unsigned char), 37u), _tag_arr( _temp1305, sizeof( void*), 0u));}); goto
! _LL1287; _LL1287:;}; _pop_region( rgn);} return ts;} static void* Cyc_Tcexp_tcTunion(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Exp* e, struct Cyc_Core_Opt** all_ref, struct Cyc_Core_Opt** exist_ref,
  struct Cyc_List_List* es, struct Cyc_Absyn_Tuniondecl* tud, struct Cyc_Absyn_Tunionfield*
! tuf){ struct _RegionHandle _temp1306= _new_region(); struct _RegionHandle* rgn=&
! _temp1306; _push_region( rgn);{ struct _tuple4 _temp1307=({ struct _tuple4
! _temp1353; _temp1353.f1= Cyc_Tcenv_lookup_type_vars( te); _temp1353.f2= rgn;
! _temp1353;}); struct Cyc_List_List* _temp1308=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp1307, tud->tvs); struct Cyc_List_List* _temp1309=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp1307, tuf->tvs); struct Cyc_List_List* _temp1310=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
! struct _tuple5*)) Cyc_Core_snd, _temp1308); struct Cyc_List_List* _temp1311=((
  struct Cyc_List_List*(*)( void*(* f)( struct _tuple5*), struct Cyc_List_List* x))
! Cyc_List_map)(( void*(*)( struct _tuple5*)) Cyc_Core_snd, _temp1309); struct Cyc_List_List*
! _temp1312=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_rappend)( rgn, _temp1308, _temp1309);*
! all_ref=({ struct Cyc_Core_Opt* _temp1313=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1313->v=( void*) _temp1310; _temp1313;});*
! exist_ref=({ struct Cyc_Core_Opt* _temp1314=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1314->v=( void*) _temp1311; _temp1314;});{
! void* res=( void*)({ struct Cyc_Absyn_TunionFieldType_struct* _temp1348=( struct
  Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionFieldType_struct));
! _temp1348[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct _temp1349; _temp1349.tag=
! Cyc_Absyn_TunionFieldType; _temp1349.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp1350; _temp1350.field_info=( void*)(( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp1351=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp1351[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp1352; _temp1352.tag= Cyc_Absyn_KnownTunionfield; _temp1352.f1= tud;
! _temp1352.f2= tuf; _temp1352;}); _temp1351;})); _temp1350.targs= _temp1310;
! _temp1350;}); _temp1349;}); _temp1348;}); if( topt !=  0){ void* _temp1315= Cyc_Tcutil_compress(*((
! void**) _check_null( topt))); struct Cyc_Absyn_TunionInfo _temp1323; void*
! _temp1325; struct Cyc_List_List* _temp1327; _LL1317: if(( unsigned int)
! _temp1315 >  4u?*(( int*) _temp1315) ==  Cyc_Absyn_TunionFieldType: 0){ goto
! _LL1318;} else{ goto _LL1319;} _LL1319: if(( unsigned int) _temp1315 >  4u?*((
! int*) _temp1315) ==  Cyc_Absyn_TunionType: 0){ _LL1324: _temp1323=(( struct Cyc_Absyn_TunionType_struct*)
! _temp1315)->f1; _LL1328: _temp1327= _temp1323.targs; goto _LL1326; _LL1326:
! _temp1325=( void*) _temp1323.rgn; goto _LL1320;} else{ goto _LL1321;} _LL1321:
! goto _LL1322; _LL1318: Cyc_Tcutil_unify(*(( void**) _check_null( topt)), res);
! goto _LL1316; _LL1320:{ struct Cyc_List_List* a= _temp1310; for( 0; a !=  0?
! _temp1327 !=  0: 0;( a=(( struct Cyc_List_List*) _check_null( a))->tl, _temp1327=((
! struct Cyc_List_List*) _check_null( _temp1327))->tl)){ Cyc_Tcutil_unify(( void*)((
  struct Cyc_List_List*) _check_null( a))->hd,( void*)(( struct Cyc_List_List*)
! _check_null( _temp1327))->hd);}} if( tuf->typs ==  0? es ==  0: 0){ e->topt=({
! struct Cyc_Core_Opt* _temp1329=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1329->v=( void*) res; _temp1329;}); res=( void*)({ struct
! Cyc_Absyn_TunionType_struct* _temp1330=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp1330[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp1331; _temp1331.tag= Cyc_Absyn_TunionType;
! _temp1331.f1=({ struct Cyc_Absyn_TunionInfo _temp1332; _temp1332.tunion_info=(
! void*)(( void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp1333=( struct Cyc_Absyn_KnownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp1333[ 0]=({
! struct Cyc_Absyn_KnownTunion_struct _temp1334; _temp1334.tag= Cyc_Absyn_KnownTunion;
! _temp1334.f1=({ struct Cyc_Absyn_Tuniondecl** _temp1335=( struct Cyc_Absyn_Tuniondecl**)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl*)); _temp1335[ 0]= tud; _temp1335;});
! _temp1334;}); _temp1333;})); _temp1332.targs= _temp1310; _temp1332.rgn=( void*)
! _temp1325; _temp1332;}); _temp1331;}); _temp1330;}); Cyc_Tcutil_unchecked_cast(
! te, e, res);{ void* _temp1336= res; _npop_handler( 0u); return _temp1336;}} goto
! _LL1316; _LL1322: goto _LL1316; _LL1316:;}{ struct Cyc_List_List* ts= tuf->typs;
  for( 0; es !=  0? ts !=  0: 0;( es=(( struct Cyc_List_List*) _check_null( es))->tl,
  ts=(( struct Cyc_List_List*) _check_null( ts))->tl)){ struct Cyc_Absyn_Exp* e=(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd; void* t=
! Cyc_Tcutil_rsubstitute( rgn, _temp1312,(*(( struct _tuple8*)(( struct Cyc_List_List*)
  _check_null( ts))->hd)).f2); Cyc_Tcexp_tcExpInitializer( te,( void**)& t, e);
  if( ! Cyc_Tcutil_coerce_arg( te, e, t)){({ struct Cyc_Std_String_pa_struct
! _temp1340; _temp1340.tag= Cyc_Std_String_pa; _temp1340.f1=( struct _tagged_arr)(
  e->topt ==  0? _tag_arr("?", sizeof( unsigned char), 2u): Cyc_Absynpp_typ2string((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v));{ struct Cyc_Std_String_pa_struct
! _temp1339; _temp1339.tag= Cyc_Std_String_pa; _temp1339.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ struct Cyc_Std_String_pa_struct _temp1338;
! _temp1338.tag= Cyc_Std_String_pa; _temp1338.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! tuf->name);{ void* _temp1337[ 3u]={& _temp1338,& _temp1339,& _temp1340}; Cyc_Tcutil_terr(
  e->loc, _tag_arr("tunion constructor %s expects argument of type %s but this argument has type %s",
! sizeof( unsigned char), 80u), _tag_arr( _temp1337, sizeof( void*), 3u));}}}});}}
! if( es !=  0){ void* _temp1343=({ struct Cyc_Std_String_pa_struct _temp1342;
! _temp1342.tag= Cyc_Std_String_pa; _temp1342.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! tuf->name);{ void* _temp1341[ 1u]={& _temp1342}; Cyc_Tcexp_expr_err( te,((
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd)->loc,
  _tag_arr("too many arguments for tunion constructor %s", sizeof( unsigned char),
! 45u), _tag_arr( _temp1341, sizeof( void*), 1u));}}); _npop_handler( 0u); return
! _temp1343;} if( ts !=  0){ void* _temp1346=({ struct Cyc_Std_String_pa_struct
! _temp1345; _temp1345.tag= Cyc_Std_String_pa; _temp1345.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( tuf->name);{ void* _temp1344[ 1u]={& _temp1345}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("too few arguments for tunion constructor %s", sizeof(
! unsigned char), 44u), _tag_arr( _temp1344, sizeof( void*), 1u));}});
! _npop_handler( 0u); return _temp1346;}{ void* _temp1347= res; _npop_handler( 0u);
! return _temp1347;}}}}; _pop_region( rgn);} static void* Cyc_Tcexp_tcMalloc(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Exp* ropt, void* t){ void* rgn=( void*) Cyc_Absyn_HeapRgn; if( ropt != 
  0){ void* expected_type=( void*)({ struct Cyc_Absyn_RgnHandleType_struct*
! _temp1364=( struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_RgnHandleType_struct)); _temp1364[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct
! _temp1365; _temp1365.tag= Cyc_Absyn_RgnHandleType; _temp1365.f1=( void*) Cyc_Absyn_new_evar((
! struct Cyc_Core_Opt*)& Cyc_Tcexp_rk,({ struct Cyc_Core_Opt* _temp1366=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1366->v=( void*)
! Cyc_Tcenv_lookup_type_vars( te); _temp1366;})); _temp1365;}); _temp1364;}); void*
  handle_type= Cyc_Tcexp_tcExp( te,( void**)& expected_type,( struct Cyc_Absyn_Exp*)
! _check_null( ropt)); void* _temp1354= Cyc_Tcutil_compress( handle_type); void*
! _temp1360; _LL1356: if(( unsigned int) _temp1354 >  4u?*(( int*) _temp1354) == 
! Cyc_Absyn_RgnHandleType: 0){ _LL1361: _temp1360=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1354)->f1; goto _LL1357;} else{ goto _LL1358;} _LL1358: goto _LL1359;
! _LL1357: rgn= _temp1360; Cyc_Tcenv_check_rgn_accessible( te, loc, rgn); goto
! _LL1355; _LL1359:({ struct Cyc_Std_String_pa_struct _temp1363; _temp1363.tag=
! Cyc_Std_String_pa; _temp1363.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! handle_type);{ void* _temp1362[ 1u]={& _temp1363}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)
  _check_null( ropt))->loc, _tag_arr("expecting region_t type but found %s",
! sizeof( unsigned char), 37u), _tag_arr( _temp1362, sizeof( void*), 1u));}});
! goto _LL1355; _LL1355:;} Cyc_Tcutil_check_type( loc, te, Cyc_Tcenv_lookup_type_vars(
! te),( void*) Cyc_Absyn_MemKind, 1, t);{ void* _temp1367= t; struct Cyc_Absyn_TunionFieldInfo
! _temp1373; void* _temp1375; struct Cyc_Absyn_Tunionfield* _temp1377; _LL1369:
! if(( unsigned int) _temp1367 >  4u?*(( int*) _temp1367) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1374: _temp1373=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1367)->f1;
! _LL1376: _temp1375=( void*) _temp1373.field_info; if(*(( int*) _temp1375) == 
! Cyc_Absyn_KnownTunionfield){ _LL1378: _temp1377=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1375)->f2; goto _LL1370;} else{ goto _LL1371;}} else{ goto _LL1371;}
! _LL1371: goto _LL1372; _LL1370: if( _temp1377->tvs !=  0){({ void* _temp1379[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("malloc with existential types not yet implemented",
! sizeof( unsigned char), 50u), _tag_arr( _temp1379, sizeof( void*), 0u));});}
! goto _LL1368; _LL1372: goto _LL1368; _LL1368:;}{ void*(* _temp1380)( void* t,
  void* rgn, struct Cyc_Absyn_Tqual tq)= Cyc_Absyn_at_typ; if( topt !=  0){ void*
! _temp1381= Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_Absyn_PtrInfo
! _temp1387; struct Cyc_Absyn_Conref* _temp1389; _LL1383: if(( unsigned int)
! _temp1381 >  4u?*(( int*) _temp1381) ==  Cyc_Absyn_PointerType: 0){ _LL1388:
! _temp1387=(( struct Cyc_Absyn_PointerType_struct*) _temp1381)->f1; _LL1390:
! _temp1389= _temp1387.nullable; goto _LL1384;} else{ goto _LL1385;} _LL1385: goto
! _LL1386; _LL1384: if((( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp1389)){ _temp1380= Cyc_Absyn_star_typ;} goto _LL1382; _LL1386: goto _LL1382;
! _LL1382:;} return _temp1380( t, rgn, Cyc_Absyn_empty_tqual());}} static void*
  Cyc_Tcexp_tcStmtExp( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc,
  void** topt, struct Cyc_Absyn_Stmt* s){ Cyc_Tcstmt_tcStmt( Cyc_Tcenv_set_encloser(
  te, s), s, 1); Cyc_NewControlFlow_set_encloser( s, Cyc_Tcenv_get_encloser( te));
! while( 1) { void* _temp1391=( void*) s->r; struct Cyc_Absyn_Exp* _temp1401;
! struct Cyc_Absyn_Stmt* _temp1403; struct Cyc_Absyn_Stmt* _temp1405; struct Cyc_Absyn_Stmt*
! _temp1407; struct Cyc_Absyn_Decl* _temp1409; _LL1393: if(( unsigned int)
! _temp1391 >  1u?*(( int*) _temp1391) ==  Cyc_Absyn_Exp_s: 0){ _LL1402: _temp1401=((
! struct Cyc_Absyn_Exp_s_struct*) _temp1391)->f1; goto _LL1394;} else{ goto
! _LL1395;} _LL1395: if(( unsigned int) _temp1391 >  1u?*(( int*) _temp1391) == 
! Cyc_Absyn_Seq_s: 0){ _LL1406: _temp1405=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1391)->f1; goto _LL1404; _LL1404: _temp1403=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1391)->f2; goto _LL1396;} else{ goto _LL1397;} _LL1397: if(( unsigned int)
! _temp1391 >  1u?*(( int*) _temp1391) ==  Cyc_Absyn_Decl_s: 0){ _LL1410:
! _temp1409=(( struct Cyc_Absyn_Decl_s_struct*) _temp1391)->f1; goto _LL1408;
! _LL1408: _temp1407=(( struct Cyc_Absyn_Decl_s_struct*) _temp1391)->f2; goto
! _LL1398;} else{ goto _LL1399;} _LL1399: goto _LL1400; _LL1394: return( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1401->topt))->v; _LL1396: s= _temp1403;
! continue; _LL1398: s= _temp1407; continue; _LL1400: return({ void* _temp1411[ 0u]={};
  Cyc_Tcexp_expr_err( te, loc, _tag_arr("statement expression must end with expression",
! sizeof( unsigned char), 46u), _tag_arr( _temp1411, sizeof( void*), 0u));});
! _LL1392:;}} static void* Cyc_Tcexp_tcCodegen( struct Cyc_Tcenv_Tenv* te, struct
  Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Fndecl* fd){ return({
! void* _temp1412[ 0u]={}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("tcCodegen",
! sizeof( unsigned char), 10u), _tag_arr( _temp1412, sizeof( void*), 0u));});}
  static void* Cyc_Tcexp_tcFill( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment*
! loc, void** topt, struct Cyc_Absyn_Exp* e){ return({ void* _temp1413[ 0u]={};
  Cyc_Tcexp_expr_err( te, loc, _tag_arr("tcFill", sizeof( unsigned char), 7u),
! _tag_arr( _temp1413, sizeof( void*), 0u));});} static void* Cyc_Tcexp_tcNew(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Exp* rgn_handle, struct Cyc_Absyn_Exp* e, struct Cyc_Absyn_Exp* e1){
  void* rgn=( void*) Cyc_Absyn_HeapRgn; if( rgn_handle !=  0){ void* expected_type=(
! void*)({ struct Cyc_Absyn_RgnHandleType_struct* _temp1424=( struct Cyc_Absyn_RgnHandleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct)); _temp1424[ 0]=({
! struct Cyc_Absyn_RgnHandleType_struct _temp1425; _temp1425.tag= Cyc_Absyn_RgnHandleType;
! _temp1425.f1=( void*) Cyc_Absyn_new_evar(( struct Cyc_Core_Opt*)& Cyc_Tcexp_rk,({
! struct Cyc_Core_Opt* _temp1426=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1426->v=( void*) Cyc_Tcenv_lookup_type_vars( te); _temp1426;}));
! _temp1425;}); _temp1424;}); void* handle_type= Cyc_Tcexp_tcExp( te,( void**)&
  expected_type,( struct Cyc_Absyn_Exp*) _check_null( rgn_handle)); void*
! _temp1414= Cyc_Tcutil_compress( handle_type); void* _temp1420; _LL1416: if((
! unsigned int) _temp1414 >  4u?*(( int*) _temp1414) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL1421: _temp1420=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1414)->f1; goto _LL1417;} else{ goto _LL1418;} _LL1418: goto _LL1419;
! _LL1417: rgn= _temp1420; Cyc_Tcenv_check_rgn_accessible( te, loc, rgn); goto
! _LL1415; _LL1419:({ struct Cyc_Std_String_pa_struct _temp1423; _temp1423.tag=
! Cyc_Std_String_pa; _temp1423.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! handle_type);{ void* _temp1422[ 1u]={& _temp1423}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)
  _check_null( rgn_handle))->loc, _tag_arr("expecting region_t type but found %s",
! sizeof( unsigned char), 37u), _tag_arr( _temp1422, sizeof( void*), 1u));}});
! goto _LL1415; _LL1415:;}{ void* _temp1427=( void*) e1->r; struct Cyc_Absyn_Exp*
! _temp1439; struct Cyc_Absyn_Exp* _temp1441; struct Cyc_Absyn_Vardecl* _temp1443;
! struct Cyc_List_List* _temp1445; struct Cyc_Core_Opt* _temp1447; struct Cyc_List_List*
! _temp1449; void* _temp1451; struct _tagged_arr _temp1453; _LL1429: if(*(( int*)
! _temp1427) ==  Cyc_Absyn_Comprehension_e){ _LL1444: _temp1443=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1427)->f1; goto _LL1442; _LL1442: _temp1441=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1427)->f2; goto _LL1440; _LL1440: _temp1439=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1427)->f3; goto _LL1430;} else{ goto _LL1431;} _LL1431: if(*(( int*)
! _temp1427) ==  Cyc_Absyn_UnresolvedMem_e){ _LL1448: _temp1447=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1427)->f1; goto _LL1446; _LL1446: _temp1445=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1427)->f2; goto _LL1432;} else{ goto _LL1433;} _LL1433: if(*(( int*)
! _temp1427) ==  Cyc_Absyn_Array_e){ _LL1450: _temp1449=(( struct Cyc_Absyn_Array_e_struct*)
! _temp1427)->f1; goto _LL1434;} else{ goto _LL1435;} _LL1435: if(*(( int*)
! _temp1427) ==  Cyc_Absyn_Const_e){ _LL1452: _temp1451=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp1427)->f1; if(( unsigned int) _temp1451 >  1u?*(( int*) _temp1451) ==  Cyc_Absyn_String_c:
! 0){ _LL1454: _temp1453=(( struct Cyc_Absyn_String_c_struct*) _temp1451)->f1;
! goto _LL1436;} else{ goto _LL1437;}} else{ goto _LL1437;} _LL1437: goto _LL1438;
! _LL1430: { void* _temp1455= Cyc_Tcexp_tcExpNoPromote( te, topt, e1); void*
! _temp1456= Cyc_Tcutil_compress( _temp1455); struct Cyc_Absyn_Tqual _temp1462;
! void* _temp1464; _LL1458: if(( unsigned int) _temp1456 >  4u?*(( int*) _temp1456)
! ==  Cyc_Absyn_ArrayType: 0){ _LL1465: _temp1464=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1456)->f1; goto _LL1463; _LL1463: _temp1462=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1456)->f2; goto _LL1459;} else{ goto _LL1460;} _LL1460: goto _LL1461;
! _LL1459: { void* b= Cyc_Tcutil_is_const_exp( te, _temp1441)?( void*)({ struct
! Cyc_Absyn_Upper_b_struct* _temp1470=( struct Cyc_Absyn_Upper_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct)); _temp1470[ 0]=({ struct
! Cyc_Absyn_Upper_b_struct _temp1471; _temp1471.tag= Cyc_Absyn_Upper_b; _temp1471.f1=
! _temp1441; _temp1471;}); _temp1470;}):( void*) Cyc_Absyn_Unknown_b; void*
! res_typ=( void*)({ struct Cyc_Absyn_PointerType_struct* _temp1467=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp1467[ 0]=({
! struct Cyc_Absyn_PointerType_struct _temp1468; _temp1468.tag= Cyc_Absyn_PointerType;
! _temp1468.f1=({ struct Cyc_Absyn_PtrInfo _temp1469; _temp1469.elt_typ=( void*)
! _temp1464; _temp1469.rgn_typ=( void*) rgn; _temp1469.nullable=(( struct Cyc_Absyn_Conref*(*)())
! Cyc_Absyn_empty_conref)(); _temp1469.tq= _temp1462; _temp1469.bounds= Cyc_Absyn_new_conref(
! b); _temp1469;}); _temp1468;}); _temp1467;}); if( topt !=  0){ if( ! Cyc_Tcutil_unify(*((
  void**) _check_null( topt)), res_typ)? Cyc_Tcutil_silent_castable( te, loc,
  res_typ,*(( void**) _check_null( topt))): 0){ e->topt=({ struct Cyc_Core_Opt*
! _temp1466=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1466->v=( void*) res_typ; _temp1466;}); Cyc_Tcutil_unchecked_cast( te, e,*((
  void**) _check_null( topt))); res_typ=*(( void**) _check_null( topt));}} return
! res_typ;} _LL1461: return({ void* _temp1472[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("tcNew: comprehension returned non-array type",
! sizeof( unsigned char), 45u), _tag_arr( _temp1472, sizeof( void*), 0u));});
! _LL1457:;} _LL1432:( void*)( e1->r=( void*)(( void*)({ struct Cyc_Absyn_Array_e_struct*
! _temp1473=( struct Cyc_Absyn_Array_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Array_e_struct));
! _temp1473[ 0]=({ struct Cyc_Absyn_Array_e_struct _temp1474; _temp1474.tag= Cyc_Absyn_Array_e;
! _temp1474.f1= _temp1445; _temp1474;}); _temp1473;}))); _temp1449= _temp1445;
! goto _LL1434; _LL1434: { void** elt_typ_opt= 0; if( topt !=  0){ void* _temp1475=
  Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_Absyn_PtrInfo
! _temp1481; struct Cyc_Absyn_Tqual _temp1483; void* _temp1485; void** _temp1487;
! _LL1477: if(( unsigned int) _temp1475 >  4u?*(( int*) _temp1475) ==  Cyc_Absyn_PointerType:
! 0){ _LL1482: _temp1481=(( struct Cyc_Absyn_PointerType_struct*) _temp1475)->f1;
! _LL1486: _temp1485=( void*) _temp1481.elt_typ; _temp1487=( void**)&((( struct
! Cyc_Absyn_PointerType_struct*) _temp1475)->f1).elt_typ; goto _LL1484; _LL1484:
! _temp1483= _temp1481.tq; goto _LL1478;} else{ goto _LL1479;} _LL1479: goto
! _LL1480; _LL1478: elt_typ_opt=( void**) _temp1487; goto _LL1476; _LL1480: goto
! _LL1476; _LL1476:;}{ void* _temp1488= Cyc_Tcexp_tcExpNoPromote( te, elt_typ_opt,
! e1); void* res_typ;{ void* _temp1489= Cyc_Tcutil_compress( _temp1488); struct
! Cyc_Absyn_Exp* _temp1495; struct Cyc_Absyn_Tqual _temp1497; void* _temp1499;
! _LL1491: if(( unsigned int) _temp1489 >  4u?*(( int*) _temp1489) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1500: _temp1499=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1489)->f1;
! goto _LL1498; _LL1498: _temp1497=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1489)->f2; goto _LL1496; _LL1496: _temp1495=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1489)->f3; goto _LL1492;} else{ goto _LL1493;} _LL1493: goto _LL1494;
! _LL1492: res_typ=( void*)({ struct Cyc_Absyn_PointerType_struct* _temp1501=(
  struct Cyc_Absyn_PointerType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct));
! _temp1501[ 0]=({ struct Cyc_Absyn_PointerType_struct _temp1502; _temp1502.tag=
! Cyc_Absyn_PointerType; _temp1502.f1=({ struct Cyc_Absyn_PtrInfo _temp1503;
! _temp1503.elt_typ=( void*) _temp1499; _temp1503.rgn_typ=( void*) rgn; _temp1503.nullable=((
! struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)(); _temp1503.tq=
! _temp1497; _temp1503.bounds= Cyc_Absyn_new_conref(( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1504=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1504[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1505; _temp1505.tag= Cyc_Absyn_Upper_b;
! _temp1505.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1495); _temp1505;});
! _temp1504;})); _temp1503;}); _temp1502;}); _temp1501;}); if( topt !=  0){ if( !
  Cyc_Tcutil_unify(*(( void**) _check_null( topt)), res_typ)? Cyc_Tcutil_silent_castable(
  te, loc, res_typ,*(( void**) _check_null( topt))): 0){ e->topt=({ struct Cyc_Core_Opt*
! _temp1506=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1506->v=( void*) res_typ; _temp1506;}); Cyc_Tcutil_unchecked_cast( te, e,*((
  void**) _check_null( topt))); res_typ=*(( void**) _check_null( topt));}} goto
! _LL1490; _LL1494: return({ void* _temp1507[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("tcExpNoPromote on Array_e returned non-array type",
! sizeof( unsigned char), 50u), _tag_arr( _temp1507, sizeof( void*), 0u));});
! _LL1490:;} return res_typ;}} _LL1436: { void* _temp1508= Cyc_Absyn_atb_typ( Cyc_Absyn_uchar_t,
! rgn, Cyc_Absyn_const_tqual(),( void*) Cyc_Absyn_Unknown_b); void* _temp1509= Cyc_Tcexp_tcExp(
! te,( void**)& _temp1508, e1); return Cyc_Absyn_atb_typ( _temp1509, rgn, Cyc_Absyn_empty_tqual(),(
! void*)({ struct Cyc_Absyn_Upper_b_struct* _temp1510=( struct Cyc_Absyn_Upper_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct)); _temp1510[ 0]=({ struct
! Cyc_Absyn_Upper_b_struct _temp1511; _temp1511.tag= Cyc_Absyn_Upper_b; _temp1511.f1=
! Cyc_Absyn_uint_exp( 1, 0); _temp1511;}); _temp1510;}));} _LL1438: { void** topt2=
! 0; if( topt !=  0){ void* _temp1512= Cyc_Tcutil_compress(*(( void**) _check_null(
! topt))); struct Cyc_Absyn_PtrInfo _temp1520; struct Cyc_Absyn_Conref* _temp1522;
! void* _temp1524; void** _temp1526; _LL1514: if(( unsigned int) _temp1512 >  4u?*((
! int*) _temp1512) ==  Cyc_Absyn_PointerType: 0){ _LL1521: _temp1520=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1512)->f1; _LL1525: _temp1524=( void*) _temp1520.elt_typ; _temp1526=( void**)&(((
! struct Cyc_Absyn_PointerType_struct*) _temp1512)->f1).elt_typ; goto _LL1523;
! _LL1523: _temp1522= _temp1520.nullable; goto _LL1515;} else{ goto _LL1516;}
! _LL1516: if(( unsigned int) _temp1512 >  4u?*(( int*) _temp1512) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL1517;} else{ goto _LL1518;} _LL1518: goto _LL1519; _LL1515: topt2=(
! void**) _temp1526; goto _LL1513; _LL1517: topt2=({ void** _temp1527=( void**)
! _cycalloc( sizeof( void*)); _temp1527[ 0]=*(( void**) _check_null( topt));
! _temp1527;}); goto _LL1513; _LL1519: goto _LL1513; _LL1513:;}{ void* telt= Cyc_Tcexp_tcExp(
  te, topt2, e1); void* res_typ=( void*)({ struct Cyc_Absyn_PointerType_struct*
! _temp1529=( struct Cyc_Absyn_PointerType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct));
! _temp1529[ 0]=({ struct Cyc_Absyn_PointerType_struct _temp1530; _temp1530.tag=
! Cyc_Absyn_PointerType; _temp1530.f1=({ struct Cyc_Absyn_PtrInfo _temp1531;
! _temp1531.elt_typ=( void*) telt; _temp1531.rgn_typ=( void*) rgn; _temp1531.nullable=((
! struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)(); _temp1531.tq= Cyc_Absyn_empty_tqual();
! _temp1531.bounds= Cyc_Absyn_new_conref(( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1532=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1532[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1533; _temp1533.tag= Cyc_Absyn_Upper_b;
! _temp1533.f1= Cyc_Absyn_uint_exp( 1, 0); _temp1533;}); _temp1532;})); _temp1531;});
! _temp1530;}); _temp1529;}); if( topt !=  0){ if( ! Cyc_Tcutil_unify(*(( void**)
  _check_null( topt)), res_typ)? Cyc_Tcutil_silent_castable( te, loc, res_typ,*((
! void**) _check_null( topt))): 0){ e->topt=({ struct Cyc_Core_Opt* _temp1528=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1528->v=(
! void*) res_typ; _temp1528;}); Cyc_Tcutil_unchecked_cast( te, e,*(( void**)
  _check_null( topt))); res_typ=*(( void**) _check_null( topt));}} return res_typ;}}
! _LL1428:;}} void* Cyc_Tcexp_tcExp( struct Cyc_Tcenv_Tenv* te, void** topt,
  struct Cyc_Absyn_Exp* e){ void* t= Cyc_Tcutil_compress( Cyc_Tcexp_tcExpNoPromote(
! te, topt, e)); void* _temp1534= t; struct Cyc_Absyn_Exp* _temp1540; struct Cyc_Absyn_Tqual
! _temp1542; void* _temp1544; _LL1536: if(( unsigned int) _temp1534 >  4u?*(( int*)
! _temp1534) ==  Cyc_Absyn_ArrayType: 0){ _LL1545: _temp1544=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1534)->f1; goto _LL1543; _LL1543: _temp1542=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1534)->f2; goto _LL1541; _LL1541: _temp1540=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1534)->f3; goto _LL1537;} else{ goto _LL1538;} _LL1538: goto _LL1539;
! _LL1537: { void* _temp1548; struct _tuple6 _temp1546= Cyc_Tcutil_addressof_props(
! te, e); _LL1549: _temp1548= _temp1546.f2; goto _LL1547; _LL1547: { void*
! _temp1550= _temp1540 ==  0?( void*) Cyc_Absyn_Unknown_b:( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1551=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1551[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1552; _temp1552.tag= Cyc_Absyn_Upper_b;
! _temp1552.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1540); _temp1552;});
! _temp1551;}); t= Cyc_Absyn_atb_typ( _temp1544, _temp1548, _temp1542, _temp1550);(
  void*)((( struct Cyc_Core_Opt*) _check_null( e->topt))->v=( void*) t); return t;}}
! _LL1539: return t; _LL1535:;} void* Cyc_Tcexp_tcExpInitializer( struct Cyc_Tcenv_Tenv*
  te, void** topt, struct Cyc_Absyn_Exp* e){ void* t= Cyc_Tcexp_tcExpNoPromote( te,
! topt, e); void* _temp1553=( void*) e->r; void* _temp1563; _LL1555: if(*(( int*)
! _temp1553) ==  Cyc_Absyn_Array_e){ goto _LL1556;} else{ goto _LL1557;} _LL1557:
! if(*(( int*) _temp1553) ==  Cyc_Absyn_Comprehension_e){ goto _LL1558;} else{
! goto _LL1559;} _LL1559: if(*(( int*) _temp1553) ==  Cyc_Absyn_Const_e){ _LL1564:
! _temp1563=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp1553)->f1; if((
! unsigned int) _temp1563 >  1u?*(( int*) _temp1563) ==  Cyc_Absyn_String_c: 0){
! goto _LL1560;} else{ goto _LL1561;}} else{ goto _LL1561;} _LL1561: goto _LL1562;
! _LL1556: return t; _LL1558: return t; _LL1560: return t; _LL1562: t= Cyc_Tcutil_compress(
! t);{ void* _temp1565= t; struct Cyc_Absyn_Exp* _temp1571; struct Cyc_Absyn_Tqual
! _temp1573; void* _temp1575; _LL1567: if(( unsigned int) _temp1565 >  4u?*(( int*)
! _temp1565) ==  Cyc_Absyn_ArrayType: 0){ _LL1576: _temp1575=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1565)->f1; goto _LL1574; _LL1574: _temp1573=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1565)->f2; goto _LL1572; _LL1572: _temp1571=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1565)->f3; goto _LL1568;} else{ goto _LL1569;} _LL1569: goto _LL1570;
! _LL1568: { void* _temp1579; struct _tuple6 _temp1577= Cyc_Tcutil_addressof_props(
! te, e); _LL1580: _temp1579= _temp1577.f2; goto _LL1578; _LL1578: { void* b=
! _temp1571 ==  0?( void*) Cyc_Absyn_Unknown_b:( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1581=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1581[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1582; _temp1582.tag= Cyc_Absyn_Upper_b;
! _temp1582.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1571); _temp1582;});
! _temp1581;}); t= Cyc_Absyn_atb_typ( _temp1575, _temp1579, _temp1573, b); Cyc_Tcutil_unchecked_cast(
! te, e, t); return t;}} _LL1570: return t; _LL1566:;} _LL1554:;} static void* Cyc_Tcexp_tcExpNoPromote(
  struct Cyc_Tcenv_Tenv* te, void** topt, struct Cyc_Absyn_Exp* e){{ void*
! _temp1583=( void*) e->r; struct Cyc_Absyn_Exp* _temp1589; _LL1585: if(*(( int*)
! _temp1583) ==  Cyc_Absyn_NoInstantiate_e){ _LL1590: _temp1589=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp1583)->f1; goto _LL1586;} else{ goto _LL1587;} _LL1587: goto _LL1588;
! _LL1586: Cyc_Tcexp_tcExpNoInst( te, topt, _temp1589);( void*)((( struct Cyc_Core_Opt*)
! _check_null( _temp1589->topt))->v=( void*) Cyc_Absyn_pointer_expand(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1589->topt))->v)); e->topt= _temp1589->topt;
! goto _LL1584; _LL1588: Cyc_Tcexp_tcExpNoInst( te, topt, e);( void*)((( struct
  Cyc_Core_Opt*) _check_null( e->topt))->v=( void*) Cyc_Absyn_pointer_expand((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v));{ void* _temp1591=
  Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);
! struct Cyc_Absyn_PtrInfo _temp1597; struct Cyc_Absyn_Conref* _temp1599; struct
! Cyc_Absyn_Tqual _temp1601; struct Cyc_Absyn_Conref* _temp1603; void* _temp1605;
! void* _temp1607; _LL1593: if(( unsigned int) _temp1591 >  4u?*(( int*) _temp1591)
! ==  Cyc_Absyn_PointerType: 0){ _LL1598: _temp1597=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1591)->f1; _LL1608: _temp1607=( void*) _temp1597.elt_typ; goto _LL1606;
! _LL1606: _temp1605=( void*) _temp1597.rgn_typ; goto _LL1604; _LL1604: _temp1603=
! _temp1597.nullable; goto _LL1602; _LL1602: _temp1601= _temp1597.tq; goto _LL1600;
! _LL1600: _temp1599= _temp1597.bounds; goto _LL1594;} else{ goto _LL1595;}
! _LL1595: goto _LL1596; _LL1594:{ void* _temp1609= Cyc_Tcutil_compress( _temp1607);
! struct Cyc_Absyn_FnInfo _temp1615; struct Cyc_List_List* _temp1617; struct Cyc_List_List*
! _temp1619; struct Cyc_Absyn_VarargInfo* _temp1621; int _temp1623; struct Cyc_List_List*
! _temp1625; void* _temp1627; struct Cyc_Core_Opt* _temp1629; struct Cyc_List_List*
! _temp1631; _LL1611: if(( unsigned int) _temp1609 >  4u?*(( int*) _temp1609) == 
! Cyc_Absyn_FnType: 0){ _LL1616: _temp1615=(( struct Cyc_Absyn_FnType_struct*)
! _temp1609)->f1; _LL1632: _temp1631= _temp1615.tvars; goto _LL1630; _LL1630:
! _temp1629= _temp1615.effect; goto _LL1628; _LL1628: _temp1627=( void*) _temp1615.ret_typ;
! goto _LL1626; _LL1626: _temp1625= _temp1615.args; goto _LL1624; _LL1624:
! _temp1623= _temp1615.c_varargs; goto _LL1622; _LL1622: _temp1621= _temp1615.cyc_varargs;
! goto _LL1620; _LL1620: _temp1619= _temp1615.rgn_po; goto _LL1618; _LL1618:
! _temp1617= _temp1615.attributes; goto _LL1612;} else{ goto _LL1613;} _LL1613:
! goto _LL1614; _LL1612: if( _temp1631 !=  0){ struct _RegionHandle _temp1633=
! _new_region(); struct _RegionHandle* rgn=& _temp1633; _push_region( rgn);{
! struct _tuple4 _temp1634=({ struct _tuple4 _temp1644; _temp1644.f1= Cyc_Tcenv_lookup_type_vars(
! te); _temp1644.f2= rgn; _temp1644;}); struct Cyc_List_List* inst=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp1634, _temp1631); struct Cyc_List_List* ts=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
  struct _tuple5*)) Cyc_Core_snd, inst); void* ftyp= Cyc_Tcutil_rsubstitute( rgn,
! inst,( void*)({ struct Cyc_Absyn_FnType_struct* _temp1641=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1641[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1642; _temp1642.tag= Cyc_Absyn_FnType; _temp1642.f1=({ struct Cyc_Absyn_FnInfo
! _temp1643; _temp1643.tvars= 0; _temp1643.effect= _temp1629; _temp1643.ret_typ=(
! void*) _temp1627; _temp1643.args= _temp1625; _temp1643.c_varargs= _temp1623;
! _temp1643.cyc_varargs= _temp1621; _temp1643.rgn_po= _temp1619; _temp1643.attributes=
! _temp1617; _temp1643;}); _temp1642;}); _temp1641;})); void* new_typ=( void*)({
! struct Cyc_Absyn_PointerType_struct* _temp1638=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp1638[ 0]=({
! struct Cyc_Absyn_PointerType_struct _temp1639; _temp1639.tag= Cyc_Absyn_PointerType;
! _temp1639.f1=({ struct Cyc_Absyn_PtrInfo _temp1640; _temp1640.elt_typ=( void*)
! ftyp; _temp1640.rgn_typ=( void*) _temp1605; _temp1640.nullable= _temp1603;
! _temp1640.tq= _temp1601; _temp1640.bounds= _temp1599; _temp1640;}); _temp1639;});
! _temp1638;}); struct Cyc_Absyn_Exp* inner= Cyc_Absyn_copy_exp( e);( void*)( e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Instantiate_e_struct* _temp1635=( struct Cyc_Absyn_Instantiate_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Instantiate_e_struct)); _temp1635[ 0]=({
! struct Cyc_Absyn_Instantiate_e_struct _temp1636; _temp1636.tag= Cyc_Absyn_Instantiate_e;
! _temp1636.f1= inner; _temp1636.f2= ts; _temp1636;}); _temp1635;}))); e->topt=({
! struct Cyc_Core_Opt* _temp1637=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1637->v=( void*) new_typ; _temp1637;});}; _pop_region( rgn);}
! goto _LL1610; _LL1614: goto _LL1610; _LL1610:;} goto _LL1592; _LL1596: goto
! _LL1592; _LL1592:;} goto _LL1584; _LL1584:;} return( void*)(( struct Cyc_Core_Opt*)
  _check_null( e->topt))->v;} static void Cyc_Tcexp_tcExpNoInst( struct Cyc_Tcenv_Tenv*
  te, void** topt, struct Cyc_Absyn_Exp* e){ struct Cyc_Position_Segment* loc= e->loc;
! void* t;{ void* _temp1645=( void*) e->r; struct Cyc_Absyn_Exp* _temp1721; struct
! _tuple1* _temp1723; struct Cyc_List_List* _temp1725; struct Cyc_Absyn_Exp*
! _temp1727; struct Cyc_List_List* _temp1729; struct Cyc_Core_Opt* _temp1731; void*
! _temp1733; void* _temp1735; struct _tuple1* _temp1737; struct Cyc_List_List*
! _temp1739; void* _temp1741; void* _temp1743; struct Cyc_Absyn_Exp* _temp1745;
! struct Cyc_Absyn_Exp* _temp1747; struct Cyc_Core_Opt* _temp1749; struct Cyc_Absyn_Exp*
! _temp1751; struct Cyc_Absyn_Exp* _temp1753; struct Cyc_Absyn_Exp* _temp1755;
! struct Cyc_Absyn_Exp* _temp1757; struct Cyc_Absyn_Exp* _temp1759; struct Cyc_Absyn_Exp*
! _temp1761; struct Cyc_Absyn_VarargCallInfo* _temp1763; struct Cyc_Absyn_VarargCallInfo**
! _temp1765; struct Cyc_List_List* _temp1766; struct Cyc_Absyn_Exp* _temp1768;
! struct Cyc_Absyn_Exp* _temp1770; struct Cyc_List_List* _temp1772; struct Cyc_Absyn_Exp*
! _temp1774; struct Cyc_Absyn_Exp* _temp1776; void* _temp1778; struct Cyc_Absyn_Exp*
! _temp1780; struct Cyc_Absyn_Exp* _temp1782; struct Cyc_Absyn_Exp* _temp1784;
! struct Cyc_Absyn_Exp* _temp1786; void* _temp1788; void* _temp1790; void*
! _temp1792; struct Cyc_Absyn_Exp* _temp1794; struct _tagged_arr* _temp1796;
! struct Cyc_Absyn_Exp* _temp1798; struct _tagged_arr* _temp1800; struct Cyc_Absyn_Exp*
! _temp1802; struct Cyc_Absyn_Exp* _temp1804; struct Cyc_Absyn_Exp* _temp1806;
! struct Cyc_List_List* _temp1808; struct Cyc_List_List* _temp1810; struct _tuple2*
! _temp1812; struct Cyc_List_List* _temp1814; struct Cyc_Absyn_Stmt* _temp1816;
! struct Cyc_Absyn_Fndecl* _temp1818; struct Cyc_Absyn_Exp* _temp1820; struct Cyc_Absyn_Exp*
! _temp1822; struct Cyc_Absyn_Exp* _temp1824; struct Cyc_Absyn_Vardecl* _temp1826;
! struct Cyc_Absyn_Structdecl* _temp1828; struct Cyc_Absyn_Structdecl** _temp1830;
! struct Cyc_List_List* _temp1831; struct Cyc_Core_Opt* _temp1833; struct Cyc_Core_Opt**
! _temp1835; struct _tuple1* _temp1836; struct _tuple1** _temp1838; struct Cyc_List_List*
! _temp1839; void* _temp1841; struct Cyc_Absyn_Tunionfield* _temp1843; struct Cyc_Absyn_Tuniondecl*
! _temp1845; struct Cyc_List_List* _temp1847; struct Cyc_Core_Opt* _temp1849;
! struct Cyc_Core_Opt** _temp1851; struct Cyc_Core_Opt* _temp1852; struct Cyc_Core_Opt**
! _temp1854; struct Cyc_Absyn_Enumfield* _temp1855; struct Cyc_Absyn_Enumdecl*
! _temp1857; struct _tuple1* _temp1859; struct _tuple1** _temp1861; void*
! _temp1862; struct Cyc_Absyn_Exp* _temp1864; _LL1647: if(*(( int*) _temp1645) == 
! Cyc_Absyn_NoInstantiate_e){ _LL1722: _temp1721=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp1645)->f1; goto _LL1648;} else{ goto _LL1649;} _LL1649: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_UnknownId_e){ _LL1724: _temp1723=(( struct Cyc_Absyn_UnknownId_e_struct*)
! _temp1645)->f1; goto _LL1650;} else{ goto _LL1651;} _LL1651: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_UnknownCall_e){ _LL1728: _temp1727=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp1645)->f1; goto _LL1726; _LL1726: _temp1725=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp1645)->f2; goto _LL1652;} else{ goto _LL1653;} _LL1653: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_UnresolvedMem_e){ _LL1732: _temp1731=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1645)->f1; goto _LL1730; _LL1730: _temp1729=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1645)->f2; goto _LL1654;} else{ goto _LL1655;} _LL1655: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Const_e){ _LL1734: _temp1733=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp1645)->f1; goto _LL1656;} else{ goto _LL1657;} _LL1657: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Var_e){ _LL1738: _temp1737=(( struct Cyc_Absyn_Var_e_struct*)
! _temp1645)->f1; goto _LL1736; _LL1736: _temp1735=( void*)(( struct Cyc_Absyn_Var_e_struct*)
! _temp1645)->f2; goto _LL1658;} else{ goto _LL1659;} _LL1659: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Primop_e){ _LL1742: _temp1741=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp1645)->f1; goto _LL1740; _LL1740: _temp1739=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp1645)->f2; goto _LL1660;} else{ goto _LL1661;} _LL1661: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Increment_e){ _LL1746: _temp1745=(( struct Cyc_Absyn_Increment_e_struct*)
! _temp1645)->f1; goto _LL1744; _LL1744: _temp1743=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp1645)->f2; goto _LL1662;} else{ goto _LL1663;} _LL1663: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_AssignOp_e){ _LL1752: _temp1751=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp1645)->f1; goto _LL1750; _LL1750: _temp1749=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp1645)->f2; goto _LL1748; _LL1748: _temp1747=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp1645)->f3; goto _LL1664;} else{ goto _LL1665;} _LL1665: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Conditional_e){ _LL1758: _temp1757=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp1645)->f1; goto _LL1756; _LL1756: _temp1755=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp1645)->f2; goto _LL1754; _LL1754: _temp1753=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp1645)->f3; goto _LL1666;} else{ goto _LL1667;} _LL1667: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_SeqExp_e){ _LL1762: _temp1761=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp1645)->f1; goto _LL1760; _LL1760: _temp1759=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp1645)->f2; goto _LL1668;} else{ goto _LL1669;} _LL1669: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_FnCall_e){ _LL1769: _temp1768=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1645)->f1; goto _LL1767; _LL1767: _temp1766=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1645)->f2; goto _LL1764; _LL1764: _temp1763=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1645)->f3; _temp1765=( struct Cyc_Absyn_VarargCallInfo**)&(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1645)->f3; goto _LL1670;} else{ goto _LL1671;} _LL1671: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Throw_e){ _LL1771: _temp1770=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp1645)->f1; goto _LL1672;} else{ goto _LL1673;} _LL1673: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Instantiate_e){ _LL1775: _temp1774=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp1645)->f1; goto _LL1773; _LL1773: _temp1772=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp1645)->f2; goto _LL1674;} else{ goto _LL1675;} _LL1675: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Cast_e){ _LL1779: _temp1778=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1645)->f1; goto _LL1777; _LL1777: _temp1776=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1645)->f2; goto _LL1676;} else{ goto _LL1677;} _LL1677: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Address_e){ _LL1781: _temp1780=(( struct Cyc_Absyn_Address_e_struct*)
! _temp1645)->f1; goto _LL1678;} else{ goto _LL1679;} _LL1679: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_New_e){ _LL1785: _temp1784=(( struct Cyc_Absyn_New_e_struct*)
! _temp1645)->f1; goto _LL1783; _LL1783: _temp1782=(( struct Cyc_Absyn_New_e_struct*)
! _temp1645)->f2; goto _LL1680;} else{ goto _LL1681;} _LL1681: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Sizeofexp_e){ _LL1787: _temp1786=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp1645)->f1; goto _LL1682;} else{ goto _LL1683;} _LL1683: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Sizeoftyp_e){ _LL1789: _temp1788=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp1645)->f1; goto _LL1684;} else{ goto _LL1685;} _LL1685: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Offsetof_e){ _LL1793: _temp1792=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp1645)->f1; goto _LL1791; _LL1791: _temp1790=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp1645)->f2; goto _LL1686;} else{ goto _LL1687;} _LL1687: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Gentyp_e){ goto _LL1688;} else{ goto _LL1689;} _LL1689:
! if(*(( int*) _temp1645) ==  Cyc_Absyn_Deref_e){ _LL1795: _temp1794=(( struct Cyc_Absyn_Deref_e_struct*)
! _temp1645)->f1; goto _LL1690;} else{ goto _LL1691;} _LL1691: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_StructMember_e){ _LL1799: _temp1798=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp1645)->f1; goto _LL1797; _LL1797: _temp1796=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp1645)->f2; goto _LL1692;} else{ goto _LL1693;} _LL1693: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_StructArrow_e){ _LL1803: _temp1802=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp1645)->f1; goto _LL1801; _LL1801: _temp1800=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp1645)->f2; goto _LL1694;} else{ goto _LL1695;} _LL1695: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Subscript_e){ _LL1807: _temp1806=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp1645)->f1; goto _LL1805; _LL1805: _temp1804=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp1645)->f2; goto _LL1696;} else{ goto _LL1697;} _LL1697: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Tuple_e){ _LL1809: _temp1808=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp1645)->f1; goto _LL1698;} else{ goto _LL1699;} _LL1699: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_CompoundLit_e){ _LL1813: _temp1812=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp1645)->f1; goto _LL1811; _LL1811: _temp1810=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp1645)->f2; goto _LL1700;} else{ goto _LL1701;} _LL1701: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Array_e){ _LL1815: _temp1814=(( struct Cyc_Absyn_Array_e_struct*)
! _temp1645)->f1; goto _LL1702;} else{ goto _LL1703;} _LL1703: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_StmtExp_e){ _LL1817: _temp1816=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp1645)->f1; goto _LL1704;} else{ goto _LL1705;} _LL1705: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Codegen_e){ _LL1819: _temp1818=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp1645)->f1; goto _LL1706;} else{ goto _LL1707;} _LL1707: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Fill_e){ _LL1821: _temp1820=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp1645)->f1; goto _LL1708;} else{ goto _LL1709;} _LL1709: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Comprehension_e){ _LL1827: _temp1826=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1645)->f1; goto _LL1825; _LL1825: _temp1824=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1645)->f2; goto _LL1823; _LL1823: _temp1822=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1645)->f3; goto _LL1710;} else{ goto _LL1711;} _LL1711: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Struct_e){ _LL1837: _temp1836=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1645)->f1; _temp1838=( struct _tuple1**)&(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1645)->f1; goto _LL1834; _LL1834: _temp1833=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1645)->f2; _temp1835=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1645)->f2; goto _LL1832; _LL1832: _temp1831=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1645)->f3; goto _LL1829; _LL1829: _temp1828=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1645)->f4; _temp1830=( struct Cyc_Absyn_Structdecl**)&(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1645)->f4; goto _LL1712;} else{ goto _LL1713;} _LL1713: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_AnonStruct_e){ _LL1842: _temp1841=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp1645)->f1; goto _LL1840; _LL1840: _temp1839=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp1645)->f2; goto _LL1714;} else{ goto _LL1715;} _LL1715: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Tunion_e){ _LL1853: _temp1852=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1645)->f1; _temp1854=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1645)->f1; goto _LL1850; _LL1850: _temp1849=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1645)->f2; _temp1851=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1645)->f2; goto _LL1848; _LL1848: _temp1847=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1645)->f3; goto _LL1846; _LL1846: _temp1845=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1645)->f4; goto _LL1844; _LL1844: _temp1843=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1645)->f5; goto _LL1716;} else{ goto _LL1717;} _LL1717: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Enum_e){ _LL1860: _temp1859=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1645)->f1; _temp1861=( struct _tuple1**)&(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1645)->f1; goto _LL1858; _LL1858: _temp1857=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1645)->f2; goto _LL1856; _LL1856: _temp1855=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1645)->f3; goto _LL1718;} else{ goto _LL1719;} _LL1719: if(*(( int*)
! _temp1645) ==  Cyc_Absyn_Malloc_e){ _LL1865: _temp1864=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp1645)->f1; goto _LL1863; _LL1863: _temp1862=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp1645)->f2; goto _LL1720;} else{ goto _LL1646;} _LL1648: Cyc_Tcexp_tcExpNoInst(
! te, 0, _temp1721); return; _LL1650: Cyc_Tcexp_resolve_unknown_id( te, e,
! _temp1723); Cyc_Tcexp_tcExpNoInst( te, topt, e); return; _LL1652: Cyc_Tcexp_resolve_unknown_fn(
! te, e, _temp1727, _temp1725); Cyc_Tcexp_tcExpNoInst( te, topt, e); return;
! _LL1654: Cyc_Tcexp_resolve_unresolved_mem( te, loc, topt, e, _temp1729); Cyc_Tcexp_tcExpNoInst(
! te, topt, e); return; _LL1656: t= Cyc_Tcexp_tcConst( te, loc, topt, _temp1733, e);
! goto _LL1646; _LL1658: t= Cyc_Tcexp_tcVar( te, loc, _temp1737, _temp1735); goto
! _LL1646; _LL1660: t= Cyc_Tcexp_tcPrimop( te, loc, topt, _temp1741, _temp1739);
! goto _LL1646; _LL1662: t= Cyc_Tcexp_tcIncrement( te, loc, topt, _temp1745,
! _temp1743); goto _LL1646; _LL1664: t= Cyc_Tcexp_tcAssignOp( te, loc, topt,
! _temp1751, _temp1749, _temp1747); goto _LL1646; _LL1666: t= Cyc_Tcexp_tcConditional(
! te, loc, topt, _temp1757, _temp1755, _temp1753); goto _LL1646; _LL1668: t= Cyc_Tcexp_tcSeqExp(
! te, loc, topt, _temp1761, _temp1759); goto _LL1646; _LL1670: t= Cyc_Tcexp_tcFnCall(
! te, loc, topt, _temp1768, _temp1766, _temp1765); goto _LL1646; _LL1672: t= Cyc_Tcexp_tcThrow(
! te, loc, topt, _temp1770); goto _LL1646; _LL1674: t= Cyc_Tcexp_tcInstantiate( te,
! loc, topt, _temp1774, _temp1772); goto _LL1646; _LL1676: t= Cyc_Tcexp_tcCast( te,
! loc, topt, _temp1778, _temp1776); goto _LL1646; _LL1678: t= Cyc_Tcexp_tcAddress(
! te, loc, topt, _temp1780); goto _LL1646; _LL1680: t= Cyc_Tcexp_tcNew( te, loc,
! topt, _temp1784, e, _temp1782); goto _LL1646; _LL1682: { void* _temp1866= Cyc_Tcexp_tcExpNoPromote(
! te, 0, _temp1786); t= Cyc_Tcexp_tcSizeof( te, loc, topt, _temp1866); goto
! _LL1646;} _LL1684: t= Cyc_Tcexp_tcSizeof( te, loc, topt, _temp1788); goto
! _LL1646; _LL1686: t= Cyc_Tcexp_tcOffsetof( te, loc, topt, _temp1792, _temp1790);
! goto _LL1646; _LL1688:({ void* _temp1867[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("gen() not in top-level initializer",
! sizeof( unsigned char), 35u), _tag_arr( _temp1867, sizeof( void*), 0u));});
! return; _LL1690: t= Cyc_Tcexp_tcDeref( te, loc, topt, _temp1794); goto _LL1646;
! _LL1692: t= Cyc_Tcexp_tcStructMember( te, loc, topt, e, _temp1798, _temp1796);
! goto _LL1646; _LL1694: t= Cyc_Tcexp_tcStructArrow( te, loc, topt, _temp1802,
! _temp1800); goto _LL1646; _LL1696: t= Cyc_Tcexp_tcSubscript( te, loc, topt,
! _temp1806, _temp1804); goto _LL1646; _LL1698: t= Cyc_Tcexp_tcTuple( te, loc,
! topt, _temp1808); goto _LL1646; _LL1700: t= Cyc_Tcexp_tcCompoundLit( te, loc,
! topt, _temp1812, _temp1810); goto _LL1646; _LL1702: { void** elt_topt= 0; if(
! topt !=  0){ void* _temp1868= Cyc_Tcutil_compress(*(( void**) _check_null( topt)));
! void* _temp1874; void** _temp1876; _LL1870: if(( unsigned int) _temp1868 >  4u?*((
! int*) _temp1868) ==  Cyc_Absyn_ArrayType: 0){ _LL1875: _temp1874=( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp1868)->f1; _temp1876=( void**)&(( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp1868)->f1); goto _LL1871;} else{ goto
! _LL1872;} _LL1872: goto _LL1873; _LL1871: elt_topt=( void**) _temp1876; goto
! _LL1869; _LL1873: goto _LL1869; _LL1869:;} t= Cyc_Tcexp_tcArray( te, loc,
! elt_topt, _temp1814); goto _LL1646;} _LL1704: t= Cyc_Tcexp_tcStmtExp( te, loc,
! topt, _temp1816); goto _LL1646; _LL1706: t= Cyc_Tcexp_tcCodegen( te, loc, topt,
! _temp1818); goto _LL1646; _LL1708: t= Cyc_Tcexp_tcFill( te, loc, topt, _temp1820);
! goto _LL1646; _LL1710: t= Cyc_Tcexp_tcComprehension( te, loc, topt, _temp1826,
! _temp1824, _temp1822); goto _LL1646; _LL1712: t= Cyc_Tcexp_tcStruct( te, loc,
! topt, _temp1838, _temp1835, _temp1831, _temp1830); goto _LL1646; _LL1714: t= Cyc_Tcexp_tcAnonStruct(
! te, loc, _temp1841, _temp1839); goto _LL1646; _LL1716: t= Cyc_Tcexp_tcTunion( te,
! loc, topt, e, _temp1854, _temp1851, _temp1847, _temp1845, _temp1843); goto
! _LL1646; _LL1718:* _temp1861=(( struct Cyc_Absyn_Enumfield*) _check_null(
! _temp1855))->name; t=( void*)({ struct Cyc_Absyn_EnumType_struct* _temp1877=(
  struct Cyc_Absyn_EnumType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_EnumType_struct));
! _temp1877[ 0]=({ struct Cyc_Absyn_EnumType_struct _temp1878; _temp1878.tag= Cyc_Absyn_EnumType;
! _temp1878.f1=(( struct Cyc_Absyn_Enumdecl*) _check_null( _temp1857))->name;
! _temp1878.f2= _temp1857; _temp1878;}); _temp1877;}); goto _LL1646; _LL1720: t=
! Cyc_Tcexp_tcMalloc( te, loc, topt, _temp1864, _temp1862); goto _LL1646; _LL1646:;}
! e->topt=({ struct Cyc_Core_Opt* _temp1879=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1879->v=( void*) t; _temp1879;});}
--- 1547,2788 ----
  unsigned char), 49u), _tag_arr( _temp726, sizeof( void*), 2u));}}});}}} else{
  void* _temp729= Cyc_Tcutil_compress( _temp723); struct Cyc_Absyn_TunionInfo
  _temp735; void* _temp737; struct Cyc_List_List* _temp739; void* _temp741; struct
! Cyc_Absyn_Tuniondecl* _temp743; _LL731: if(( unsigned int) _temp729 >  4u?*((
! int*) _temp729) ==  Cyc_Absyn_TunionType: 0){ _LL736: _temp735=(( struct Cyc_Absyn_TunionType_struct*)
! _temp729)->f1; _LL742: _temp741=( void*) _temp735.tunion_info; if(*(( int*)
! _temp741) ==  Cyc_Absyn_KnownTunion){ _LL744: _temp743=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp741)->f1; goto _LL740;} else{ goto _LL733;} _LL740: _temp739= _temp735.targs;
! goto _LL738; _LL738: _temp737=( void*) _temp735.rgn; goto _LL732;} else{ goto
! _LL733;} _LL733: goto _LL734; _LL732: { struct Cyc_Absyn_Tuniondecl* _temp745=*
! Cyc_Tcenv_lookup_tuniondecl( te, loc, _temp743->name); struct Cyc_List_List*
! fields= 0; if( _temp745->fields ==  0){({ struct Cyc_Std_String_pa_struct
! _temp747; _temp747.tag= Cyc_Std_String_pa; _temp747.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp723);{ void* _temp746[ 1u]={& _temp747}; Cyc_Tcutil_terr( loc, _tag_arr("can't inject into %s",
! sizeof( unsigned char), 21u), _tag_arr( _temp746, sizeof( void*), 1u));}});}
  else{ fields=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null(
! _temp745->fields))->v;} if( ! Cyc_Tcutil_unify( _temp737, Cyc_Tcenv_curr_rgn( te))){({
! void* _temp748[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("bad region for injected varargs",
! sizeof( unsigned char), 32u), _tag_arr( _temp748, sizeof( void*), 0u));});}{
! struct _RegionHandle _temp749= _new_region(); struct _RegionHandle* rgn=&
! _temp749; _push_region( rgn);{ struct Cyc_List_List* _temp750=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp745->tvs, _temp739);
  for( 0; _temp671 !=  0; _temp671=(( struct Cyc_List_List*) _check_null( _temp671))->tl){((
  struct Cyc_Absyn_VarargCallInfo*) _check_null( _temp725))->num_varargs ++;{
  struct Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( _temp671))->hd; Cyc_Tcexp_tcExp( te, 0, e1);{ struct Cyc_Absyn_Tunionfield*
! _temp751= Cyc_Tcexp_tcInjection( te, e1, _temp723, rgn, _temp750, fields); if(
! _temp751 !=  0){(( struct Cyc_Absyn_VarargCallInfo*) _check_null( _temp725))->injectors=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(((
  struct Cyc_Absyn_VarargCallInfo*) _check_null( _temp725))->injectors,({ struct
! Cyc_List_List* _temp752=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp752->hd=( void*)(( struct Cyc_Absyn_Tunionfield*) _check_null( _temp751));
! _temp752->tl= 0; _temp752;}));}}}}}; _pop_region( rgn);} goto _LL730;} _LL734:({
! void* _temp753[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("bad inject vararg type",
! sizeof( unsigned char), 23u), _tag_arr( _temp753, sizeof( void*), 0u));}); goto
  _LL730; _LL730:;}}}}}}{ struct Cyc_List_List* a= _temp698; for( 0; a !=  0; a=((
! struct Cyc_List_List*) _check_null( a))->tl){ void* _temp755=( void*)(( struct
! Cyc_List_List*) _check_null( a))->hd; int _temp761; int _temp763; void* _temp765;
! _LL757: if(( unsigned int) _temp755 >  16u?*(( int*) _temp755) ==  Cyc_Absyn_Format_att:
! 0){ _LL766: _temp765=( void*)(( struct Cyc_Absyn_Format_att_struct*) _temp755)->f1;
! goto _LL764; _LL764: _temp763=(( struct Cyc_Absyn_Format_att_struct*) _temp755)->f2;
! goto _LL762; _LL762: _temp761=(( struct Cyc_Absyn_Format_att_struct*) _temp755)->f3;
! goto _LL758;} else{ goto _LL759;} _LL759: goto _LL760; _LL758:{ struct
! _handler_cons _temp767; _push_handler(& _temp767);{ int _temp769= 0; if( setjmp(
! _temp767.handler)){ _temp769= 1;} if( ! _temp769){{ struct Cyc_Absyn_Exp*
! _temp770=(( struct Cyc_Absyn_Exp*(*)( struct Cyc_List_List* x, int n)) Cyc_List_nth)(
! args, _temp763 -  1); struct Cyc_Core_Opt* fmt_args; if( _temp761 ==  0){
! fmt_args= 0;} else{ fmt_args=({ struct Cyc_Core_Opt* _temp771=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp771->v=( void*)(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x, int i)) Cyc_List_nth_tail)( args, _temp761 -  1);
! _temp771;});}{ void* _temp772= _temp765; _LL774: if( _temp772 == ( void*) Cyc_Absyn_Printf_ft){
! goto _LL775;} else{ goto _LL776;} _LL776: if( _temp772 == ( void*) Cyc_Absyn_Scanf_ft){
! goto _LL777;} else{ goto _LL773;} _LL775: Cyc_Tcexp_check_format_args( te,
! _temp770, fmt_args, Cyc_Formatstr_get_format_typs); goto _LL773; _LL777: Cyc_Tcexp_check_format_args(
! te, _temp770, fmt_args, Cyc_Formatstr_get_scanf_typs); goto _LL773; _LL773:;}};
! _pop_handler();} else{ void* _temp768=( void*) _exn_thrown; void* _temp779=
! _temp768; _LL781: if( _temp779 ==  Cyc_List_Nth){ goto _LL782;} else{ goto
! _LL783;} _LL783: goto _LL784; _LL782:({ void* _temp785[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("bad format arguments", sizeof( unsigned char), 21u), _tag_arr(
! _temp785, sizeof( void*), 0u));}); goto _LL780; _LL784:( void) _throw( _temp779);
! _LL780:;}}} goto _LL756; _LL760: goto _LL756; _LL756:;}} Cyc_Tcenv_check_effect_accessible(
  te, loc,( void*)(( struct Cyc_Core_Opt*) _check_null( _temp710))->v); Cyc_Tcenv_check_rgn_partial_order(
! te, loc, _temp700); return _temp708; _LL695: return({ void* _temp786[ 0u]={};
  Cyc_Tcexp_expr_err( te, loc, _tag_arr("expected pointer to function", sizeof(
! unsigned char), 29u), _tag_arr( _temp786, sizeof( void*), 0u));}); _LL691:;}
! _LL677: return({ void* _temp787[ 0u]={}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expected pointer to function",
! sizeof( unsigned char), 29u), _tag_arr( _temp787, sizeof( void*), 0u));});
  _LL673:;}} static void* Cyc_Tcexp_tcThrow( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment*
  loc, void** topt, struct Cyc_Absyn_Exp* e){ Cyc_Tcexp_tcExp( te,( void**)& Cyc_Absyn_exn_typ,
  e); if( ! Cyc_Tcutil_coerce_arg( te, e, Cyc_Absyn_exn_typ)){({ struct Cyc_Std_String_pa_struct
! _temp789; _temp789.tag= Cyc_Std_String_pa; _temp789.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);{ void* _temp788[ 1u]={&
! _temp789}; Cyc_Tcutil_terr( loc, _tag_arr("expected xtunion exn but found %s",
! sizeof( unsigned char), 34u), _tag_arr( _temp788, sizeof( void*), 1u));}});}
! return Cyc_Absyn_wildtyp(({ struct Cyc_Core_Opt* _temp790=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp790->v=( void*) Cyc_Tcenv_lookup_type_vars(
! te); _temp790;}));} static void* Cyc_Tcexp_tcInstantiate( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e,
  struct Cyc_List_List* ts){ Cyc_Tcexp_tcExpNoInst( te, 0, e);( void*)((( struct
  Cyc_Core_Opt*) _check_null( e->topt))->v=( void*) Cyc_Absyn_pointer_expand((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v));{ void* t1= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);{ void* _temp791= t1;
! struct Cyc_Absyn_PtrInfo _temp797; struct Cyc_Absyn_Conref* _temp799; struct Cyc_Absyn_Tqual
! _temp801; struct Cyc_Absyn_Conref* _temp803; void* _temp805; void* _temp807;
! _LL793: if(( unsigned int) _temp791 >  4u?*(( int*) _temp791) ==  Cyc_Absyn_PointerType:
! 0){ _LL798: _temp797=(( struct Cyc_Absyn_PointerType_struct*) _temp791)->f1;
! _LL808: _temp807=( void*) _temp797.elt_typ; goto _LL806; _LL806: _temp805=( void*)
! _temp797.rgn_typ; goto _LL804; _LL804: _temp803= _temp797.nullable; goto _LL802;
! _LL802: _temp801= _temp797.tq; goto _LL800; _LL800: _temp799= _temp797.bounds;
! goto _LL794;} else{ goto _LL795;} _LL795: goto _LL796; _LL794:{ void* _temp809=
! Cyc_Tcutil_compress( _temp807); struct Cyc_Absyn_FnInfo _temp815; struct Cyc_List_List*
! _temp817; struct Cyc_List_List* _temp819; struct Cyc_Absyn_VarargInfo* _temp821;
! int _temp823; struct Cyc_List_List* _temp825; void* _temp827; struct Cyc_Core_Opt*
! _temp829; struct Cyc_List_List* _temp831; _LL811: if(( unsigned int) _temp809 > 
! 4u?*(( int*) _temp809) ==  Cyc_Absyn_FnType: 0){ _LL816: _temp815=(( struct Cyc_Absyn_FnType_struct*)
! _temp809)->f1; _LL832: _temp831= _temp815.tvars; goto _LL830; _LL830: _temp829=
! _temp815.effect; goto _LL828; _LL828: _temp827=( void*) _temp815.ret_typ; goto
! _LL826; _LL826: _temp825= _temp815.args; goto _LL824; _LL824: _temp823= _temp815.c_varargs;
! goto _LL822; _LL822: _temp821= _temp815.cyc_varargs; goto _LL820; _LL820:
! _temp819= _temp815.rgn_po; goto _LL818; _LL818: _temp817= _temp815.attributes;
! goto _LL812;} else{ goto _LL813;} _LL813: goto _LL814; _LL812: { struct Cyc_List_List*
  instantiation= 0; if( Cyc_List_length( ts) != (( int(*)( struct Cyc_List_List* x))
! Cyc_List_length)( _temp831)){ return({ void* _temp833[ 0u]={}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("type instantiation mismatch", sizeof( unsigned char), 28u),
! _tag_arr( _temp833, sizeof( void*), 0u));});} for( 0; ts !=  0;( ts=(( struct
! Cyc_List_List*) _check_null( ts))->tl, _temp831=(( struct Cyc_List_List*)
! _check_null( _temp831))->tl)){ void* k= Cyc_Absyn_conref_val((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( _temp831))->hd)->kind); Cyc_Tcutil_check_type(
  loc, te, Cyc_Tcenv_lookup_type_vars( te), k, 1,( void*)(( struct Cyc_List_List*)
! _check_null( ts))->hd); instantiation=({ struct Cyc_List_List* _temp834=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp834->hd=( void*)({
! struct _tuple5* _temp835=( struct _tuple5*) _cycalloc( sizeof( struct _tuple5));
! _temp835->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! _temp831))->hd; _temp835->f2=( void*)(( struct Cyc_List_List*) _check_null( ts))->hd;
! _temp835;}); _temp834->tl= instantiation; _temp834;});}{ void* new_fn_typ= Cyc_Tcutil_substitute(
! instantiation,( void*)({ struct Cyc_Absyn_FnType_struct* _temp839=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp839[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp840; _temp840.tag= Cyc_Absyn_FnType; _temp840.f1=({ struct Cyc_Absyn_FnInfo
! _temp841; _temp841.tvars= 0; _temp841.effect= _temp829; _temp841.ret_typ=( void*)
! _temp827; _temp841.args= _temp825; _temp841.c_varargs= _temp823; _temp841.cyc_varargs=
! _temp821; _temp841.rgn_po= _temp819; _temp841.attributes= _temp817; _temp841;});
! _temp840;}); _temp839;})); void* new_typ=( void*)({ struct Cyc_Absyn_PointerType_struct*
! _temp836=( struct Cyc_Absyn_PointerType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct));
! _temp836[ 0]=({ struct Cyc_Absyn_PointerType_struct _temp837; _temp837.tag= Cyc_Absyn_PointerType;
! _temp837.f1=({ struct Cyc_Absyn_PtrInfo _temp838; _temp838.elt_typ=( void*)
! new_fn_typ; _temp838.rgn_typ=( void*) _temp805; _temp838.nullable= _temp803;
! _temp838.tq= _temp801; _temp838.bounds= _temp799; _temp838;}); _temp837;});
! _temp836;}); return new_typ;}} _LL814: goto _LL810; _LL810:;} goto _LL792;
! _LL796: goto _LL792; _LL792:;} return({ struct Cyc_Std_String_pa_struct _temp843;
! _temp843.tag= Cyc_Std_String_pa; _temp843.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t1);{ void* _temp842[ 1u]={& _temp843}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting polymorphic type but found %s",
! sizeof( unsigned char), 40u), _tag_arr( _temp842, sizeof( void*), 1u));}});}}
  static void* Cyc_Tcexp_tcCast( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment*
  loc, void** topt, void* t, struct Cyc_Absyn_Exp* e){ Cyc_Tcutil_check_type( loc,
  te, Cyc_Tcenv_lookup_type_vars( te),( void*) Cyc_Absyn_MemKind, 1, t); Cyc_Tcexp_tcExp(
  te, 0, e);{ void* t2=( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v;
  if( ! Cyc_Tcutil_silent_castable( te, loc, t2, t)? ! Cyc_Tcutil_castable( te,
! loc, t2, t): 0){ return({ struct Cyc_Std_String_pa_struct _temp846; _temp846.tag=
! Cyc_Std_String_pa; _temp846.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! struct Cyc_Std_String_pa_struct _temp845; _temp845.tag= Cyc_Std_String_pa;
! _temp845.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t2);{ void* _temp844[
! 2u]={& _temp845,& _temp846}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("cannot cast %s to %s",
! sizeof( unsigned char), 21u), _tag_arr( _temp844, sizeof( void*), 2u));}}});}
  return t;}} static void* Cyc_Tcexp_tcAddress( struct Cyc_Tcenv_Tenv* te, struct
  Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e){ void**
! _temp847= 0; struct Cyc_Absyn_Tqual _temp848= Cyc_Absyn_empty_tqual(); if( topt
! !=  0){ void* _temp849= Cyc_Tcutil_compress(*(( void**) _check_null( topt)));
! struct Cyc_Absyn_PtrInfo _temp855; struct Cyc_Absyn_Tqual _temp857; void*
! _temp859; _LL851: if(( unsigned int) _temp849 >  4u?*(( int*) _temp849) ==  Cyc_Absyn_PointerType:
! 0){ _LL856: _temp855=(( struct Cyc_Absyn_PointerType_struct*) _temp849)->f1;
! _LL860: _temp859=( void*) _temp855.elt_typ; goto _LL858; _LL858: _temp857=
! _temp855.tq; goto _LL852;} else{ goto _LL853;} _LL853: goto _LL854; _LL852:
! _temp847=({ void** _temp861=( void**) _cycalloc( sizeof( void*)); _temp861[ 0]=
! _temp859; _temp861;}); _temp848= _temp857; goto _LL850; _LL854: goto _LL850;
! _LL850:;} Cyc_Tcexp_tcExpNoInst( te, _temp847, e);{ void* _temp862=( void*) e->r;
! _LL864: if(*(( int*) _temp862) ==  Cyc_Absyn_Struct_e){ goto _LL865;} else{ goto
! _LL866;} _LL866: if(*(( int*) _temp862) ==  Cyc_Absyn_Tuple_e){ goto _LL867;}
! else{ goto _LL868;} _LL868: goto _LL869; _LL865: goto _LL867; _LL867:({ void*
! _temp870[ 0u]={}; Cyc_Tcutil_warn( loc, _tag_arr("& used to allocate", sizeof(
! unsigned char), 19u), _tag_arr( _temp870, sizeof( void*), 0u));});{ void*(*
! _temp871)( void* t, void* rgn, struct Cyc_Absyn_Tqual tq)= Cyc_Absyn_at_typ; if(
! topt !=  0){ void* _temp872= Cyc_Tcutil_compress(*(( void**) _check_null( topt)));
! struct Cyc_Absyn_PtrInfo _temp878; struct Cyc_Absyn_Conref* _temp880; _LL874:
! if(( unsigned int) _temp872 >  4u?*(( int*) _temp872) ==  Cyc_Absyn_PointerType:
! 0){ _LL879: _temp878=(( struct Cyc_Absyn_PointerType_struct*) _temp872)->f1;
! _LL881: _temp880= _temp878.nullable; goto _LL875;} else{ goto _LL876;} _LL876:
! goto _LL877; _LL875: if((( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp880)){ _temp871= Cyc_Absyn_star_typ;} goto _LL873; _LL877: goto _LL873;
! _LL873:;} return _temp871(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v,(
! void*) Cyc_Absyn_HeapRgn, _temp848);} _LL869: goto _LL863; _LL863:;}{ void*
! _temp884; int _temp886; struct _tuple6 _temp882= Cyc_Tcutil_addressof_props( te,
! e); _LL887: _temp886= _temp882.f1; goto _LL885; _LL885: _temp884= _temp882.f2;
! goto _LL883; _LL883: { struct Cyc_Absyn_Tqual tq= Cyc_Absyn_empty_tqual(); if(
! _temp886){ tq.q_const= 1;}{ void* t= Cyc_Absyn_at_typ(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v, _temp884, tq); return t;}}}} static void* Cyc_Tcexp_tcSizeof(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, void*
  t){ Cyc_Tcutil_check_type( loc, te, Cyc_Tcenv_lookup_type_vars( te),( void*) Cyc_Absyn_MemKind,
  1, t); if( ! Cyc_Evexp_okay_szofarg( t)){({ struct Cyc_Std_String_pa_struct
! _temp889; _temp889.tag= Cyc_Std_String_pa; _temp889.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t);{ void* _temp888[ 1u]={& _temp889}; Cyc_Tcutil_terr( loc, _tag_arr("sizeof applied to type %s, which has unknown size here",
! sizeof( unsigned char), 55u), _tag_arr( _temp888, sizeof( void*), 1u));}});}
! return Cyc_Absyn_uint_t;} static void* Cyc_Tcexp_tcOffsetof( struct Cyc_Tcenv_Tenv*
! te, struct Cyc_Position_Segment* loc, void** topt, void* t, struct _tagged_arr*
! n){ Cyc_Tcutil_check_type( loc, te, Cyc_Tcenv_lookup_type_vars( te),( void*) Cyc_Absyn_MemKind,
! 1, t);{ int bad_type= 1;{ void* _temp890= Cyc_Tcutil_compress( t); struct Cyc_Absyn_Structdecl**
! _temp898; _LL892: if(( unsigned int) _temp890 >  4u?*(( int*) _temp890) ==  Cyc_Absyn_StructType:
! 0){ _LL899: _temp898=(( struct Cyc_Absyn_StructType_struct*) _temp890)->f3; goto
! _LL893;} else{ goto _LL894;} _LL894: if(( unsigned int) _temp890 >  4u?*(( int*)
! _temp890) ==  Cyc_Absyn_AnonStructType: 0){ goto _LL895;} else{ goto _LL896;}
! _LL896: goto _LL897; _LL893: if( _temp898 ==  0){ return({ void* _temp900[ 0u]={};
! Cyc_Tcutil_impos( _tag_arr("offsetof on unchecked StructType", sizeof(
! unsigned char), 33u), _tag_arr( _temp900, sizeof( void*), 0u));});} if((*((
! struct Cyc_Absyn_Structdecl**) _check_null( _temp898)))->fields ==  0){ goto
! _LL891;} goto _LL895; _LL895: bad_type= 0; goto _LL891; _LL897: goto _LL891;
! _LL891:;} if( bad_type){({ struct Cyc_Std_String_pa_struct _temp902; _temp902.tag=
! Cyc_Std_String_pa; _temp902.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! void* _temp901[ 1u]={& _temp902}; Cyc_Tcutil_terr( loc, _tag_arr("%s is not a known struct type",
! sizeof( unsigned char), 30u), _tag_arr( _temp901, sizeof( void*), 1u));}});}
! return Cyc_Absyn_uint_t;}} static void* Cyc_Tcexp_tcDeref( struct Cyc_Tcenv_Tenv*
! te, struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e){ Cyc_Tcexp_tcExp(
  te, 0, e);{ void* t= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v); void* _temp903= t; struct Cyc_Absyn_PtrInfo _temp909;
! struct Cyc_Absyn_Conref* _temp911; void* _temp913; void* _temp915; _LL905: if((
! unsigned int) _temp903 >  4u?*(( int*) _temp903) ==  Cyc_Absyn_PointerType: 0){
! _LL910: _temp909=(( struct Cyc_Absyn_PointerType_struct*) _temp903)->f1; _LL916:
! _temp915=( void*) _temp909.elt_typ; goto _LL914; _LL914: _temp913=( void*)
! _temp909.rgn_typ; goto _LL912; _LL912: _temp911= _temp909.bounds; goto _LL906;}
! else{ goto _LL907;} _LL907: goto _LL908; _LL906: Cyc_Tcenv_check_rgn_accessible(
! te, loc, _temp913); Cyc_Tcutil_check_nonzero_bound( loc, _temp911); return
! _temp915; _LL908: return({ struct Cyc_Std_String_pa_struct _temp918; _temp918.tag=
! Cyc_Std_String_pa; _temp918.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! void* _temp917[ 1u]={& _temp918}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting * or @ type but found %s",
! sizeof( unsigned char), 35u), _tag_arr( _temp917, sizeof( void*), 1u));}});
! _LL904:;}} static void* Cyc_Tcexp_tcStructMember( struct Cyc_Tcenv_Tenv* te,
! struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* outer_e,
! struct Cyc_Absyn_Exp* e, struct _tagged_arr* f){ Cyc_Tcexp_tcExpNoPromote( te, 0,
! e);{ void* t= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
! e->topt))->v); void* _temp919= t; struct Cyc_Absyn_Structdecl** _temp935; struct
! Cyc_Absyn_Structdecl* _temp937; struct Cyc_List_List* _temp938; struct _tuple1*
! _temp940; struct Cyc_List_List* _temp942; struct Cyc_List_List* _temp944; struct
! Cyc_Absyn_Uniondecl** _temp946; struct Cyc_Absyn_Uniondecl* _temp948; struct Cyc_List_List*
! _temp949; struct _tuple1* _temp951; _LL921: if(( unsigned int) _temp919 >  4u?*((
! int*) _temp919) ==  Cyc_Absyn_StructType: 0){ _LL941: _temp940=(( struct Cyc_Absyn_StructType_struct*)
! _temp919)->f1; goto _LL939; _LL939: _temp938=(( struct Cyc_Absyn_StructType_struct*)
! _temp919)->f2; goto _LL936; _LL936: _temp935=(( struct Cyc_Absyn_StructType_struct*)
! _temp919)->f3; if( _temp935 ==  0){ goto _LL923;} else{ _temp937=* _temp935;
! goto _LL922;}} else{ goto _LL923;} _LL923: if(( unsigned int) _temp919 >  4u?*((
! int*) _temp919) ==  Cyc_Absyn_AnonStructType: 0){ _LL943: _temp942=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp919)->f1; goto _LL924;} else{ goto _LL925;} _LL925: if(( unsigned int)
! _temp919 >  4u?*(( int*) _temp919) ==  Cyc_Absyn_AnonUnionType: 0){ _LL945:
! _temp944=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp919)->f1; goto _LL926;}
! else{ goto _LL927;} _LL927: if(( unsigned int) _temp919 >  4u?*(( int*) _temp919)
! ==  Cyc_Absyn_UnionType: 0){ _LL952: _temp951=(( struct Cyc_Absyn_UnionType_struct*)
! _temp919)->f1; goto _LL950; _LL950: _temp949=(( struct Cyc_Absyn_UnionType_struct*)
! _temp919)->f2; goto _LL947; _LL947: _temp946=(( struct Cyc_Absyn_UnionType_struct*)
! _temp919)->f3; if( _temp946 ==  0){ goto _LL929;} else{ _temp948=* _temp946;
! goto _LL928;}} else{ goto _LL929;} _LL929: if(( unsigned int) _temp919 >  4u?*((
! int*) _temp919) ==  Cyc_Absyn_ArrayType: 0){ goto _LL953;} else{ goto _LL931;}
! _LL953: if( Cyc_Std_zstrcmp(* f, _tag_arr("size", sizeof( unsigned char), 5u))
! ==  0){ goto _LL930;} else{ goto _LL931;} _LL931: if(( unsigned int) _temp919 > 
! 4u?*(( int*) _temp919) ==  Cyc_Absyn_PointerType: 0){ goto _LL954;} else{ goto
! _LL933;} _LL954: if( Cyc_Std_zstrcmp(* f, _tag_arr("size", sizeof( unsigned char),
! 5u)) ==  0){ goto _LL932;} else{ goto _LL933;} _LL933: goto _LL934; _LL922: if(
! _temp940 ==  0){ return({ void* _temp955[ 0u]={}; Cyc_Tcexp_expr_err( te, loc,
! _tag_arr("unresolved struct type (COMPILER ERROR)", sizeof( unsigned char), 40u),
! _tag_arr( _temp955, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Structfield*
! _temp956= Cyc_Absyn_lookup_struct_field( _temp937, f); if( _temp956 ==  0){
! return({ struct Cyc_Std_String_pa_struct _temp959; _temp959.tag= Cyc_Std_String_pa;
! _temp959.f1=( struct _tagged_arr)* f;{ struct Cyc_Std_String_pa_struct _temp958;
! _temp958.tag= Cyc_Std_String_pa; _temp958.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
! struct _tuple1*) _check_null( _temp940));{ void* _temp957[ 2u]={& _temp958,&
! _temp959}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("struct %s has no %s field",
! sizeof( unsigned char), 26u), _tag_arr( _temp957, sizeof( void*), 2u));}}});}{
! void* t2;{ struct _RegionHandle _temp960= _new_region(); struct _RegionHandle*
! rgn=& _temp960; _push_region( rgn);{ struct Cyc_List_List* _temp961=(( struct
  Cyc_List_List*(*)( struct _RegionHandle* r1, struct _RegionHandle* r2, struct
! Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp937->tvs,
! _temp938); t2= Cyc_Tcutil_rsubstitute( rgn, _temp961,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp956))->type);}; _pop_region( rgn);} return t2;}} _LL924: {
! struct Cyc_Absyn_Structfield* _temp962= Cyc_Absyn_lookup_field( _temp942, f);
! if( _temp962 ==  0){ return({ struct Cyc_Std_String_pa_struct _temp964; _temp964.tag=
! Cyc_Std_String_pa; _temp964.f1=( struct _tagged_arr)* f;{ void* _temp963[ 1u]={&
! _temp964}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("struct has no %s field",
! sizeof( unsigned char), 23u), _tag_arr( _temp963, sizeof( void*), 1u));}});}
! return( void*)(( struct Cyc_Absyn_Structfield*) _check_null( _temp962))->type;}
! _LL926: { struct Cyc_Absyn_Structfield* _temp965= Cyc_Absyn_lookup_field(
! _temp944, f); if( _temp965 ==  0){ return({ struct Cyc_Std_String_pa_struct
! _temp967; _temp967.tag= Cyc_Std_String_pa; _temp967.f1=( struct _tagged_arr)* f;{
! void* _temp966[ 1u]={& _temp967}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("union has no %s field",
! sizeof( unsigned char), 22u), _tag_arr( _temp966, sizeof( void*), 1u));}});}
! return( void*)(( struct Cyc_Absyn_Structfield*) _check_null( _temp965))->type;}
! _LL928: if( _temp951 ==  0){ return({ void* _temp968[ 0u]={}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("unresolved union type (COMPILER ERROR)", sizeof(
! unsigned char), 39u), _tag_arr( _temp968, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Structfield*
! _temp969= Cyc_Absyn_lookup_union_field( _temp948, f); if( _temp969 ==  0){
! return({ struct Cyc_Std_String_pa_struct _temp972; _temp972.tag= Cyc_Std_String_pa;
! _temp972.f1=( struct _tagged_arr)* f;{ struct Cyc_Std_String_pa_struct _temp971;
! _temp971.tag= Cyc_Std_String_pa; _temp971.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
! struct _tuple1*) _check_null( _temp951));{ void* _temp970[ 2u]={& _temp971,&
! _temp972}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("union %s has no %s field",
! sizeof( unsigned char), 25u), _tag_arr( _temp970, sizeof( void*), 2u));}}});}{
! struct Cyc_List_List* _temp973=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)( _temp948->tvs, _temp949); void*
! _temp974= Cyc_Tcutil_substitute( _temp973,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp969))->type); return _temp974;}} _LL930:( void*)( outer_e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Primop_e_struct* _temp975=( struct Cyc_Absyn_Primop_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Primop_e_struct)); _temp975[ 0]=({ struct
! Cyc_Absyn_Primop_e_struct _temp976; _temp976.tag= Cyc_Absyn_Primop_e; _temp976.f1=(
! void*)(( void*) Cyc_Absyn_Size); _temp976.f2=({ struct Cyc_List_List* _temp977=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp977->hd=(
! void*) e; _temp977->tl= 0; _temp977;}); _temp976;}); _temp975;}))); return Cyc_Absyn_uint_t;
! _LL932:( void*)( outer_e->r=( void*)(( void*)({ struct Cyc_Absyn_Primop_e_struct*
! _temp978=( struct Cyc_Absyn_Primop_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Primop_e_struct));
! _temp978[ 0]=({ struct Cyc_Absyn_Primop_e_struct _temp979; _temp979.tag= Cyc_Absyn_Primop_e;
! _temp979.f1=( void*)(( void*) Cyc_Absyn_Size); _temp979.f2=({ struct Cyc_List_List*
! _temp980=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp980->hd=( void*) e; _temp980->tl= 0; _temp980;}); _temp979;}); _temp978;})));
! return Cyc_Absyn_uint_t; _LL934: if( Cyc_Std_zstrcmp(* f, _tag_arr("size",
! sizeof( unsigned char), 5u)) ==  0){ return({ struct Cyc_Std_String_pa_struct
! _temp982; _temp982.tag= Cyc_Std_String_pa; _temp982.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t);{ void* _temp981[ 1u]={& _temp982}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting struct, union or array, found %s",
! sizeof( unsigned char), 43u), _tag_arr( _temp981, sizeof( void*), 1u));}});}
! else{ return({ struct Cyc_Std_String_pa_struct _temp984; _temp984.tag= Cyc_Std_String_pa;
! _temp984.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp983[ 1u]={&
! _temp984}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting struct or union, found %s",
! sizeof( unsigned char), 36u), _tag_arr( _temp983, sizeof( void*), 1u));}});}
! _LL920:;}} static void* Cyc_Tcexp_tcStructArrow( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e, struct
  _tagged_arr* f){ Cyc_Tcexp_tcExp( te, 0, e);{ void* t= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v); void* _temp985= t;
! struct Cyc_Absyn_PtrInfo _temp991; struct Cyc_Absyn_Conref* _temp993; void*
! _temp995; void* _temp997; _LL987: if(( unsigned int) _temp985 >  4u?*(( int*)
! _temp985) ==  Cyc_Absyn_PointerType: 0){ _LL992: _temp991=(( struct Cyc_Absyn_PointerType_struct*)
! _temp985)->f1; _LL998: _temp997=( void*) _temp991.elt_typ; goto _LL996; _LL996:
! _temp995=( void*) _temp991.rgn_typ; goto _LL994; _LL994: _temp993= _temp991.bounds;
! goto _LL988;} else{ goto _LL989;} _LL989: goto _LL990; _LL988: Cyc_Tcutil_check_nonzero_bound(
! loc, _temp993);{ void* _temp999= Cyc_Tcutil_compress( _temp997); struct Cyc_Absyn_Structdecl**
! _temp1011; struct Cyc_Absyn_Structdecl* _temp1013; struct Cyc_List_List*
! _temp1014; struct _tuple1* _temp1016; struct Cyc_Absyn_Uniondecl** _temp1018;
! struct Cyc_Absyn_Uniondecl* _temp1020; struct Cyc_List_List* _temp1021; struct
! _tuple1* _temp1023; struct Cyc_List_List* _temp1025; struct Cyc_List_List*
! _temp1027; _LL1001: if(( unsigned int) _temp999 >  4u?*(( int*) _temp999) == 
! Cyc_Absyn_StructType: 0){ _LL1017: _temp1016=(( struct Cyc_Absyn_StructType_struct*)
! _temp999)->f1; goto _LL1015; _LL1015: _temp1014=(( struct Cyc_Absyn_StructType_struct*)
! _temp999)->f2; goto _LL1012; _LL1012: _temp1011=(( struct Cyc_Absyn_StructType_struct*)
! _temp999)->f3; if( _temp1011 ==  0){ goto _LL1003;} else{ _temp1013=* _temp1011;
! goto _LL1002;}} else{ goto _LL1003;} _LL1003: if(( unsigned int) _temp999 >  4u?*((
! int*) _temp999) ==  Cyc_Absyn_UnionType: 0){ _LL1024: _temp1023=(( struct Cyc_Absyn_UnionType_struct*)
! _temp999)->f1; goto _LL1022; _LL1022: _temp1021=(( struct Cyc_Absyn_UnionType_struct*)
! _temp999)->f2; goto _LL1019; _LL1019: _temp1018=(( struct Cyc_Absyn_UnionType_struct*)
! _temp999)->f3; if( _temp1018 ==  0){ goto _LL1005;} else{ _temp1020=* _temp1018;
! goto _LL1004;}} else{ goto _LL1005;} _LL1005: if(( unsigned int) _temp999 >  4u?*((
! int*) _temp999) ==  Cyc_Absyn_AnonStructType: 0){ _LL1026: _temp1025=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp999)->f1; goto _LL1006;} else{ goto
! _LL1007;} _LL1007: if(( unsigned int) _temp999 >  4u?*(( int*) _temp999) ==  Cyc_Absyn_AnonUnionType:
! 0){ _LL1028: _temp1027=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp999)->f1;
! goto _LL1008;} else{ goto _LL1009;} _LL1009: goto _LL1010; _LL1002: { struct Cyc_Absyn_Structfield*
! _temp1029= Cyc_Absyn_lookup_struct_field( _temp1013, f); if( _temp1029 ==  0){
! return({ struct Cyc_Std_String_pa_struct _temp1032; _temp1032.tag= Cyc_Std_String_pa;
! _temp1032.f1=( struct _tagged_arr)* f;{ struct Cyc_Std_String_pa_struct
! _temp1031; _temp1031.tag= Cyc_Std_String_pa; _temp1031.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp1016));{ void*
! _temp1030[ 2u]={& _temp1031,& _temp1032}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("struct %s has no %s field",
! sizeof( unsigned char), 26u), _tag_arr( _temp1030, sizeof( void*), 2u));}}});}{
! void* t3;{ struct _RegionHandle _temp1033= _new_region(); struct _RegionHandle*
! rgn=& _temp1033; _push_region( rgn);{ struct Cyc_List_List* _temp1034=(( struct
! Cyc_List_List*(*)( struct _RegionHandle* r1, struct _RegionHandle* r2, struct
! Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp1013->tvs,
! _temp1014); t3= Cyc_Tcutil_rsubstitute( rgn, _temp1034,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1029))->type);}; _pop_region( rgn);} Cyc_Tcenv_check_rgn_accessible(
! te, loc, _temp995); return t3;}} _LL1004: { struct Cyc_Absyn_Structfield*
! _temp1035= Cyc_Absyn_lookup_union_field( _temp1020, f); if( _temp1035 ==  0){
! return({ struct Cyc_Std_String_pa_struct _temp1038; _temp1038.tag= Cyc_Std_String_pa;
! _temp1038.f1=( struct _tagged_arr)* f;{ struct Cyc_Std_String_pa_struct
! _temp1037; _temp1037.tag= Cyc_Std_String_pa; _temp1037.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp1023));{ void*
! _temp1036[ 2u]={& _temp1037,& _temp1038}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("union %s has no %s field",
! sizeof( unsigned char), 25u), _tag_arr( _temp1036, sizeof( void*), 2u));}}});}{
! struct Cyc_List_List* _temp1039=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)( _temp1020->tvs, _temp1021); void*
! _temp1040= Cyc_Tcutil_substitute( _temp1039,( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1035))->type); Cyc_Tcenv_check_rgn_accessible( te, loc,
! _temp995); return _temp1040;}} _LL1006: { struct Cyc_Absyn_Structfield*
! _temp1041= Cyc_Absyn_lookup_field( _temp1025, f); if( _temp1041 ==  0){ return({
! struct Cyc_Std_String_pa_struct _temp1043; _temp1043.tag= Cyc_Std_String_pa;
! _temp1043.f1=( struct _tagged_arr)* f;{ void* _temp1042[ 1u]={& _temp1043}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("struct has no %s field", sizeof( unsigned char), 23u),
! _tag_arr( _temp1042, sizeof( void*), 1u));}});} return( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1041))->type;} _LL1008: { struct Cyc_Absyn_Structfield*
! _temp1044= Cyc_Absyn_lookup_field( _temp1027, f); if( _temp1044 ==  0){ return({
! struct Cyc_Std_String_pa_struct _temp1046; _temp1046.tag= Cyc_Std_String_pa;
! _temp1046.f1=( struct _tagged_arr)* f;{ void* _temp1045[ 1u]={& _temp1046}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("union has no %s field", sizeof( unsigned char), 22u),
! _tag_arr( _temp1045, sizeof( void*), 1u));}});} return( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp1044))->type;} _LL1010: return({ struct Cyc_Std_String_pa_struct
! _temp1048; _temp1048.tag= Cyc_Std_String_pa; _temp1048.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ void* _temp1047[ 1u]={& _temp1048}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("expecting struct pointer, found %s", sizeof( unsigned char),
! 35u), _tag_arr( _temp1047, sizeof( void*), 1u));}}); _LL1000:;} _LL990: return({
! struct Cyc_Std_String_pa_struct _temp1050; _temp1050.tag= Cyc_Std_String_pa;
! _temp1050.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp1049[
! 1u]={& _temp1050}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("expecting struct pointer, found %s",
! sizeof( unsigned char), 35u), _tag_arr( _temp1049, sizeof( void*), 1u));}});
! _LL986:;}} static void* Cyc_Tcexp_ithTupleType( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Position_Segment* loc, struct Cyc_List_List* ts, struct Cyc_Absyn_Exp*
  index){ unsigned int i= Cyc_Evexp_eval_const_uint_exp( index); struct
! _handler_cons _temp1051; _push_handler(& _temp1051);{ int _temp1053= 0; if(
! setjmp( _temp1051.handler)){ _temp1053= 1;} if( ! _temp1053){{ void* _temp1054=(*((
  struct _tuple8*(*)( struct Cyc_List_List* x, int n)) Cyc_List_nth)( ts,( int) i)).f2;
! _npop_handler( 0u); return _temp1054;}; _pop_handler();} else{ void* _temp1052=(
! void*) _exn_thrown; void* _temp1056= _temp1052; _LL1058: if( _temp1056 ==  Cyc_List_Nth){
! goto _LL1059;} else{ goto _LL1060;} _LL1060: goto _LL1061; _LL1059: return({
! struct Cyc_Std_Int_pa_struct _temp1064; _temp1064.tag= Cyc_Std_Int_pa; _temp1064.f1=(
  int)(( unsigned int)(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( ts));{
! struct Cyc_Std_Int_pa_struct _temp1063; _temp1063.tag= Cyc_Std_Int_pa; _temp1063.f1=(
! int) i;{ void* _temp1062[ 2u]={& _temp1063,& _temp1064}; Cyc_Tcexp_expr_err( te,
  loc, _tag_arr("index is %d but tuple has only %d fields", sizeof( unsigned char),
! 41u), _tag_arr( _temp1062, sizeof( void*), 2u));}}}); _LL1061:( void) _throw(
! _temp1056); _LL1057:;}}} static void* Cyc_Tcexp_tcSubscript( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Exp* e1,
  struct Cyc_Absyn_Exp* e2){ Cyc_Tcexp_tcExp( te, 0, e1); Cyc_Tcexp_tcExp( te, 0,
  e2);{ void* t1= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
  e1->topt))->v); void* t2= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
  _check_null( e2->topt))->v); if( ! Cyc_Tcutil_coerce_sint_typ( te, e2)){ return({
! struct Cyc_Std_String_pa_struct _temp1066; _temp1066.tag= Cyc_Std_String_pa;
! _temp1066.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t2);{ void* _temp1065[
! 1u]={& _temp1066}; Cyc_Tcexp_expr_err( te, e2->loc, _tag_arr("expecting int subscript, found %s",
! sizeof( unsigned char), 34u), _tag_arr( _temp1065, sizeof( void*), 1u));}});}{
! void* _temp1067= t1; struct Cyc_Absyn_PtrInfo _temp1075; struct Cyc_Absyn_Conref*
! _temp1077; struct Cyc_Absyn_Tqual _temp1079; void* _temp1081; void* _temp1083;
! struct Cyc_List_List* _temp1085; _LL1069: if(( unsigned int) _temp1067 >  4u?*((
! int*) _temp1067) ==  Cyc_Absyn_PointerType: 0){ _LL1076: _temp1075=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1067)->f1; _LL1084: _temp1083=( void*) _temp1075.elt_typ; goto _LL1082;
! _LL1082: _temp1081=( void*) _temp1075.rgn_typ; goto _LL1080; _LL1080: _temp1079=
! _temp1075.tq; goto _LL1078; _LL1078: _temp1077= _temp1075.bounds; goto _LL1070;}
! else{ goto _LL1071;} _LL1071: if(( unsigned int) _temp1067 >  4u?*(( int*)
! _temp1067) ==  Cyc_Absyn_TupleType: 0){ _LL1086: _temp1085=(( struct Cyc_Absyn_TupleType_struct*)
! _temp1067)->f1; goto _LL1072;} else{ goto _LL1073;} _LL1073: goto _LL1074;
! _LL1070: if( Cyc_Tcutil_is_const_exp( te, e2)){ Cyc_Tcutil_check_bound( loc, Cyc_Evexp_eval_const_uint_exp(
! e2), _temp1077);} else{ if( Cyc_Tcutil_is_bound_one( _temp1077)){({ void*
! _temp1087[ 0u]={}; Cyc_Tcutil_warn( e1->loc, _tag_arr("subscript applied to pointer to one object",
! sizeof( unsigned char), 43u), _tag_arr( _temp1087, sizeof( void*), 0u));});} Cyc_Tcutil_check_nonzero_bound(
! loc, _temp1077);} Cyc_Tcenv_check_rgn_accessible( te, loc, _temp1081); return
! _temp1083; _LL1072: return Cyc_Tcexp_ithTupleType( te, loc, _temp1085, e2);
! _LL1074: return({ struct Cyc_Std_String_pa_struct _temp1089; _temp1089.tag= Cyc_Std_String_pa;
! _temp1089.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t1);{ void* _temp1088[
! 1u]={& _temp1089}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("subscript applied to %s",
! sizeof( unsigned char), 24u), _tag_arr( _temp1088, sizeof( void*), 1u));}});
! _LL1068:;}}} static void* Cyc_Tcexp_tcTuple( struct Cyc_Tcenv_Tenv* te, struct
  Cyc_Position_Segment* loc, void** topt, struct Cyc_List_List* es){ int done= 0;
! struct Cyc_List_List* fields= 0; if( topt !=  0){ void* _temp1090= Cyc_Tcutil_compress(*((
! void**) _check_null( topt))); struct Cyc_List_List* _temp1096; _LL1092: if((
! unsigned int) _temp1090 >  4u?*(( int*) _temp1090) ==  Cyc_Absyn_TupleType: 0){
! _LL1097: _temp1096=(( struct Cyc_Absyn_TupleType_struct*) _temp1090)->f1; goto
! _LL1093;} else{ goto _LL1094;} _LL1094: goto _LL1095; _LL1093: if((( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp1096) != (( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( es)){({ void* _temp1098[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("tuple expression has the wrong number of fields", sizeof(
! unsigned char), 48u), _tag_arr( _temp1098, sizeof( void*), 0u));}); goto _LL1091;}
! for( 0; es !=  0;( es=(( struct Cyc_List_List*) _check_null( es))->tl, _temp1096=((
! struct Cyc_List_List*) _check_null( _temp1096))->tl)){ void* _temp1099=(*((
! struct _tuple8*)(( struct Cyc_List_List*) _check_null( _temp1096))->hd)).f2; Cyc_Tcexp_tcExpInitializer(
! te,( void**)& _temp1099,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
! _check_null( es))->hd); fields=({ struct Cyc_List_List* _temp1100=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1100->hd=( void*)({ struct
! _tuple8* _temp1101=( struct _tuple8*) _cycalloc( sizeof( struct _tuple8));
! _temp1101->f1=(*(( struct _tuple8*)(( struct Cyc_List_List*) _check_null(
! _temp1096))->hd)).f1; _temp1101->f2=( void*)(( struct Cyc_Core_Opt*) _check_null(((
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd)->topt))->v;
! _temp1101;}); _temp1100->tl= fields; _temp1100;});} done= 1; goto _LL1091;
! _LL1095: goto _LL1091; _LL1091:;} if( ! done){ for( 0; es !=  0; es=(( struct
  Cyc_List_List*) _check_null( es))->tl){ Cyc_Tcexp_tcExpInitializer( te, 0,(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd); fields=({
! struct Cyc_List_List* _temp1102=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1102->hd=( void*)({ struct _tuple8* _temp1103=(
! struct _tuple8*) _cycalloc( sizeof( struct _tuple8)); _temp1103->f1= Cyc_Absyn_empty_tqual();
! _temp1103->f2=( void*)(( struct Cyc_Core_Opt*) _check_null((( struct Cyc_Absyn_Exp*)((
! struct Cyc_List_List*) _check_null( es))->hd)->topt))->v; _temp1103;});
! _temp1102->tl= fields; _temp1102;});}} return( void*)({ struct Cyc_Absyn_TupleType_struct*
! _temp1104=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp1104[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp1105; _temp1105.tag= Cyc_Absyn_TupleType;
! _temp1105.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
! fields); _temp1105;}); _temp1104;});} static void* Cyc_Tcexp_tcCompoundLit(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
! _tuple2* t, struct Cyc_List_List* des){ return({ void* _temp1106[ 0u]={}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("tcCompoundLit", sizeof( unsigned char), 14u), _tag_arr(
! _temp1106, sizeof( void*), 0u));});} static void* Cyc_Tcexp_tcArray( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** elt_topt, struct Cyc_List_List* des){
  struct Cyc_List_List* es=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)(
  struct _tuple7*), struct Cyc_List_List* x)) Cyc_List_map)(( struct Cyc_Absyn_Exp*(*)(
  struct _tuple7*)) Cyc_Core_snd, des); void* res= Cyc_Absyn_new_evar(( struct Cyc_Core_Opt*)&
! Cyc_Tcexp_mk,({ struct Cyc_Core_Opt* _temp1129=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1129->v=( void*) Cyc_Tcenv_lookup_type_vars(
! te); _temp1129;})); struct Cyc_Absyn_Const_e_struct* _temp1107=({ struct Cyc_Absyn_Const_e_struct*
! _temp1125=( struct Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp1125[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp1126; _temp1126.tag= Cyc_Absyn_Const_e;
! _temp1126.f1=( void*)(( void*)({ struct Cyc_Absyn_Int_c_struct* _temp1127=(
  struct Cyc_Absyn_Int_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct));
! _temp1127[ 0]=({ struct Cyc_Absyn_Int_c_struct _temp1128; _temp1128.tag= Cyc_Absyn_Int_c;
! _temp1128.f1=( void*)(( void*) Cyc_Absyn_Unsigned); _temp1128.f2=(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( es); _temp1128;}); _temp1127;}));
! _temp1126;}); _temp1125;}); struct Cyc_Absyn_Exp* sz_exp= Cyc_Absyn_new_exp((
! void*) _temp1107, loc); sz_exp->topt=({ struct Cyc_Core_Opt* _temp1108=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1108->v=( void*)
! Cyc_Absyn_uint_t; _temp1108;});{ void* res_t2=( void*)({ struct Cyc_Absyn_ArrayType_struct*
! _temp1123=( struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp1123[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp1124; _temp1124.tag= Cyc_Absyn_ArrayType;
! _temp1124.f1=( void*) res; _temp1124.f2= Cyc_Absyn_empty_tqual(); _temp1124.f3=(
! struct Cyc_Absyn_Exp*) sz_exp; _temp1124;}); _temp1123;});{ struct Cyc_List_List*
  es2= es; for( 0; es2 !=  0; es2=(( struct Cyc_List_List*) _check_null( es2))->tl){
  Cyc_Tcexp_tcExpInitializer( te, elt_topt,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( es2))->hd);}} if( ! Cyc_Tcutil_coerce_list( te, res, es)){({ struct
! Cyc_Std_String_pa_struct _temp1110; _temp1110.tag= Cyc_Std_String_pa; _temp1110.f1=(
! struct _tagged_arr) Cyc_Absynpp_typ2string( res);{ void* _temp1109[ 1u]={&
! _temp1110}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( es))->hd)->loc, _tag_arr("elements of array do not all have the same type (%s)",
! sizeof( unsigned char), 53u), _tag_arr( _temp1109, sizeof( void*), 1u));}});}{
  int offset= 0; for( 0; des !=  0;( offset ++, des=(( struct Cyc_List_List*)
  _check_null( des))->tl)){ struct Cyc_List_List* ds=(*(( struct _tuple7*)((
  struct Cyc_List_List*) _check_null( des))->hd)).f1; if( ds !=  0){ void*
! _temp1111=( void*)(( struct Cyc_List_List*) _check_null( ds))->hd; struct Cyc_Absyn_Exp*
! _temp1117; _LL1113: if(*(( int*) _temp1111) ==  Cyc_Absyn_FieldName){ goto
! _LL1114;} else{ goto _LL1115;} _LL1115: if(*(( int*) _temp1111) ==  Cyc_Absyn_ArrayElement){
! _LL1118: _temp1117=(( struct Cyc_Absyn_ArrayElement_struct*) _temp1111)->f1;
! goto _LL1116;} else{ goto _LL1112;} _LL1114:({ void* _temp1119[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("only array index designators are supported", sizeof(
! unsigned char), 43u), _tag_arr( _temp1119, sizeof( void*), 0u));}); goto _LL1112;
! _LL1116: Cyc_Tcexp_tcExpInitializer( te, 0, _temp1117);{ unsigned int i= Cyc_Evexp_eval_const_uint_exp(
! _temp1117); if( i !=  offset){({ struct Cyc_Std_Int_pa_struct _temp1122;
! _temp1122.tag= Cyc_Std_Int_pa; _temp1122.f1=( int) i;{ struct Cyc_Std_Int_pa_struct
! _temp1121; _temp1121.tag= Cyc_Std_Int_pa; _temp1121.f1=( int)(( unsigned int)
! offset);{ void* _temp1120[ 2u]={& _temp1121,& _temp1122}; Cyc_Tcutil_terr(
! _temp1117->loc, _tag_arr("expecting index designator %d but found %d", sizeof(
! unsigned char), 43u), _tag_arr( _temp1120, sizeof( void*), 2u));}}});} goto
! _LL1112;} _LL1112:;}}} return res_t2;}} static void* Cyc_Tcexp_tcComprehension(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Exp* bound, struct Cyc_Absyn_Exp* body){
  Cyc_Tcexp_tcExp( te, 0, bound); if( ! Cyc_Tcutil_coerce_uint_typ( te, bound)){({
! struct Cyc_Std_String_pa_struct _temp1131; _temp1131.tag= Cyc_Std_String_pa;
! _temp1131.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*)
! _check_null( bound->topt))->v);{ void* _temp1130[ 1u]={& _temp1131}; Cyc_Tcutil_terr(
  bound->loc, _tag_arr("expecting unsigned int, found %s", sizeof( unsigned char),
! 33u), _tag_arr( _temp1130, sizeof( void*), 1u));}});} if( !( vd->tq).q_const){({
! void* _temp1132[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Tcutil_impos)( _tag_arr("comprehension index variable is not declared const!",
! sizeof( unsigned char), 52u), _tag_arr( _temp1132, sizeof( void*), 0u));});} if(
  te->le !=  0){ te= Cyc_Tcenv_new_block( loc, te); te= Cyc_Tcenv_add_local_var(
! loc, te, vd);}{ struct Cyc_Absyn_PtrInfo pinfo; void** _temp1133= 0; struct Cyc_Absyn_Tqual*
! _temp1134= 0; if( topt !=  0){ void* _temp1135= Cyc_Tcutil_compress(*(( void**)
! _check_null( topt))); struct Cyc_Absyn_PtrInfo _temp1143; struct Cyc_Absyn_Exp*
! _temp1145; struct Cyc_Absyn_Tqual _temp1147; struct Cyc_Absyn_Tqual* _temp1149;
! void* _temp1150; void** _temp1152; _LL1137: if(( unsigned int) _temp1135 >  4u?*((
! int*) _temp1135) ==  Cyc_Absyn_PointerType: 0){ _LL1144: _temp1143=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1135)->f1; goto _LL1138;} else{ goto _LL1139;} _LL1139: if(( unsigned int)
! _temp1135 >  4u?*(( int*) _temp1135) ==  Cyc_Absyn_ArrayType: 0){ _LL1151:
! _temp1150=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1135)->f1;
! _temp1152=( void**)&(( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1135)->f1);
! goto _LL1148; _LL1148: _temp1147=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1135)->f2; _temp1149=( struct Cyc_Absyn_Tqual*)&(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1135)->f2; goto _LL1146; _LL1146: _temp1145=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1135)->f3; goto _LL1140;} else{ goto _LL1141;} _LL1141: goto _LL1142;
! _LL1138: pinfo= _temp1143; _temp1133=( void**)(( void**)(( void*)& pinfo.elt_typ));
! _temp1134=( struct Cyc_Absyn_Tqual*)& pinfo.tq; goto _LL1136; _LL1140: _temp1133=(
! void**) _temp1152; _temp1134=( struct Cyc_Absyn_Tqual*) _temp1149; goto _LL1136;
! _LL1142: goto _LL1136; _LL1136:;}{ void* t= Cyc_Tcexp_tcExp( te, _temp1133, body);
! if( te->le ==  0){ if( ! Cyc_Tcutil_is_const_exp( te, bound)){({ void* _temp1153[
  0u]={}; Cyc_Tcutil_terr( bound->loc, _tag_arr("bound is not constant", sizeof(
! unsigned char), 22u), _tag_arr( _temp1153, sizeof( void*), 0u));});} if( ! Cyc_Tcutil_is_const_exp(
! te, body)){({ void* _temp1154[ 0u]={}; Cyc_Tcutil_terr( bound->loc, _tag_arr("body is not constant",
! sizeof( unsigned char), 21u), _tag_arr( _temp1154, sizeof( void*), 0u));});}}
! return( void*)({ struct Cyc_Absyn_ArrayType_struct* _temp1155=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp1155[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp1156; _temp1156.tag= Cyc_Absyn_ArrayType;
! _temp1156.f1=( void*) t; _temp1156.f2= _temp1134 ==  0? Cyc_Absyn_empty_tqual():*((
! struct Cyc_Absyn_Tqual*) _check_null( _temp1134)); _temp1156.f3=( struct Cyc_Absyn_Exp*)
! bound; _temp1156;}); _temp1155;});}}} struct _tuple9{ struct Cyc_Absyn_Structfield*
  f1; struct Cyc_Absyn_Exp* f2; } ; static void* Cyc_Tcexp_tcStruct( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void** topt, struct _tuple1** tn, struct
  Cyc_Core_Opt** otyps, struct Cyc_List_List* args, struct Cyc_Absyn_Structdecl**
  sd_opt){ struct Cyc_Absyn_Structdecl* sd; if(* sd_opt !=  0){ sd=( struct Cyc_Absyn_Structdecl*)
! _check_null(* sd_opt);} else{{ struct _handler_cons _temp1157; _push_handler(&
! _temp1157);{ int _temp1159= 0; if( setjmp( _temp1157.handler)){ _temp1159= 1;}
! if( ! _temp1159){ sd=* Cyc_Tcenv_lookup_structdecl( te, loc,* tn);; _pop_handler();}
! else{ void* _temp1158=( void*) _exn_thrown; void* _temp1161= _temp1158; _LL1163:
! if( _temp1161 ==  Cyc_Dict_Absent){ goto _LL1164;} else{ goto _LL1165;} _LL1165:
! goto _LL1166; _LL1164:({ struct Cyc_Std_String_pa_struct _temp1168; _temp1168.tag=
! Cyc_Std_String_pa; _temp1168.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(*
! tn);{ void* _temp1167[ 1u]={& _temp1168}; Cyc_Tcutil_terr( loc, _tag_arr("unbound struct name %s",
! sizeof( unsigned char), 23u), _tag_arr( _temp1167, sizeof( void*), 1u));}});
  return topt !=  0?*(( void**) _check_null( topt)):( void*) Cyc_Absyn_VoidType;
! _LL1166:( void) _throw( _temp1161); _LL1162:;}}}* sd_opt=( struct Cyc_Absyn_Structdecl*)
  sd; if( sd->name !=  0){* tn=( struct _tuple1*)(( struct Cyc_Core_Opt*)
! _check_null( sd->name))->v;}}{ struct _RegionHandle _temp1169= _new_region();
! struct _RegionHandle* rgn=& _temp1169; _push_region( rgn);{ struct _tuple4
! _temp1170=({ struct _tuple4 _temp1194; _temp1194.f1= Cyc_Tcenv_lookup_type_vars(
! te); _temp1194.f2= rgn; _temp1194;}); struct Cyc_List_List* _temp1171=(( struct
  Cyc_List_List*(*)( struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*,
  struct Cyc_Absyn_Tvar*), struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)(
! rgn, Cyc_Tcutil_r_make_inst_var,& _temp1170, sd->tvs); struct Cyc_List_List*
! _temp1172=(( struct Cyc_List_List*(*)( void*(* f)( struct _tuple5*), struct Cyc_List_List*
! x)) Cyc_List_map)(( void*(*)( struct _tuple5*)) Cyc_Core_snd, _temp1171); struct
! Cyc_Absyn_StructType_struct* _temp1173=({ struct Cyc_Absyn_StructType_struct*
! _temp1191=( struct Cyc_Absyn_StructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct));
! _temp1191[ 0]=({ struct Cyc_Absyn_StructType_struct _temp1192; _temp1192.tag=
! Cyc_Absyn_StructType; _temp1192.f1=( struct _tuple1*)* tn; _temp1192.f2=
! _temp1172; _temp1192.f3=({ struct Cyc_Absyn_Structdecl** _temp1193=( struct Cyc_Absyn_Structdecl**)
! _cycalloc( sizeof( struct Cyc_Absyn_Structdecl*)); _temp1193[ 0]= sd; _temp1193;});
! _temp1192;}); _temp1191;}); if( topt !=  0){ Cyc_Tcutil_unify(( void*) _temp1173,*((
! void**) _check_null( topt)));}* otyps=({ struct Cyc_Core_Opt* _temp1174=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1174->v=( void*)
! _temp1172; _temp1174;}); if( sd->fields ==  0){({ void* _temp1175[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("can't build abstract struct", sizeof( unsigned char), 28u),
! _tag_arr( _temp1175, sizeof( void*), 0u));});{ void* _temp1176=( void*)
! _temp1173; _npop_handler( 0u); return _temp1176;}}{ struct Cyc_List_List* fields=((
  struct Cyc_List_List*(*)( struct _RegionHandle* rgn, struct Cyc_Position_Segment*
  loc, struct Cyc_List_List* des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)(
  rgn, loc, args,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( sd->fields))->v);
  for( 0; fields !=  0; fields=(( struct Cyc_List_List*) _check_null( fields))->tl){
! struct _tuple9 _temp1179; struct Cyc_Absyn_Exp* _temp1180; struct Cyc_Absyn_Structfield*
! _temp1182; struct _tuple9* _temp1177=( struct _tuple9*)(( struct Cyc_List_List*)
! _check_null( fields))->hd; _temp1179=* _temp1177; _LL1183: _temp1182= _temp1179.f1;
! goto _LL1181; _LL1181: _temp1180= _temp1179.f2; goto _LL1178; _LL1178: { void*
! _temp1184= Cyc_Tcutil_rsubstitute( rgn, _temp1171,( void*) _temp1182->type); Cyc_Tcexp_tcExpInitializer(
! te,( void**)& _temp1184, _temp1180); if( ! Cyc_Tcutil_coerce_arg( te, _temp1180,
! _temp1184)){({ struct Cyc_Std_String_pa_struct _temp1189; _temp1189.tag= Cyc_Std_String_pa;
! _temp1189.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1180->topt))->v);{ struct Cyc_Std_String_pa_struct _temp1188;
! _temp1188.tag= Cyc_Std_String_pa; _temp1188.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp1184);{ struct Cyc_Std_String_pa_struct _temp1187; _temp1187.tag= Cyc_Std_String_pa;
! _temp1187.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(* tn);{ struct Cyc_Std_String_pa_struct
! _temp1186; _temp1186.tag= Cyc_Std_String_pa; _temp1186.f1=( struct _tagged_arr)*
! _temp1182->name;{ void* _temp1185[ 4u]={& _temp1186,& _temp1187,& _temp1188,&
! _temp1189}; Cyc_Tcutil_terr( _temp1180->loc, _tag_arr("field %s of struct %s expects type %s != %s",
! sizeof( unsigned char), 44u), _tag_arr( _temp1185, sizeof( void*), 4u));}}}}});}}}{
! void* _temp1190=( void*) _temp1173; _npop_handler( 0u); return _temp1190;}}};
  _pop_region( rgn);}} static void* Cyc_Tcexp_tcAnonStruct( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Position_Segment* loc, void* ts, struct Cyc_List_List* args){{
! struct _RegionHandle _temp1195= _new_region(); struct _RegionHandle* rgn=&
! _temp1195; _push_region( rgn);{ void* _temp1196= Cyc_Tcutil_compress( ts);
! struct Cyc_List_List* _temp1202; _LL1198: if(( unsigned int) _temp1196 >  4u?*((
! int*) _temp1196) ==  Cyc_Absyn_AnonStructType: 0){ _LL1203: _temp1202=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp1196)->f1; goto _LL1199;} else{ goto
! _LL1200;} _LL1200: goto _LL1201; _LL1199: { struct Cyc_List_List* fields=((
  struct Cyc_List_List*(*)( struct _RegionHandle* rgn, struct Cyc_Position_Segment*
  loc, struct Cyc_List_List* des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)(
! rgn, loc, args, _temp1202); for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
! _check_null( fields))->tl){ struct _tuple9 _temp1206; struct Cyc_Absyn_Exp*
! _temp1207; struct Cyc_Absyn_Structfield* _temp1209; struct _tuple9* _temp1204=(
! struct _tuple9*)(( struct Cyc_List_List*) _check_null( fields))->hd; _temp1206=*
! _temp1204; _LL1210: _temp1209= _temp1206.f1; goto _LL1208; _LL1208: _temp1207=
! _temp1206.f2; goto _LL1205; _LL1205: Cyc_Tcexp_tcExpInitializer( te,( void**)((
! void**)(( void*)& _temp1209->type)), _temp1207); if( ! Cyc_Tcutil_coerce_arg( te,
! _temp1207,( void*) _temp1209->type)){({ struct Cyc_Std_String_pa_struct
! _temp1214; _temp1214.tag= Cyc_Std_String_pa; _temp1214.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp1207->topt))->v);{
! struct Cyc_Std_String_pa_struct _temp1213; _temp1213.tag= Cyc_Std_String_pa;
! _temp1213.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*) _temp1209->type);{
! struct Cyc_Std_String_pa_struct _temp1212; _temp1212.tag= Cyc_Std_String_pa;
! _temp1212.f1=( struct _tagged_arr)* _temp1209->name;{ void* _temp1211[ 3u]={&
! _temp1212,& _temp1213,& _temp1214}; Cyc_Tcutil_terr( _temp1207->loc, _tag_arr("field %s of struct expects type %s != %s",
! sizeof( unsigned char), 41u), _tag_arr( _temp1211, sizeof( void*), 3u));}}}});}}
! goto _LL1197;} _LL1201:({ void* _temp1215[ 0u]={};(( int(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("tcAnonStruct:  not an AnonStructType",
! sizeof( unsigned char), 37u), _tag_arr( _temp1215, sizeof( void*), 0u));}); goto
! _LL1197; _LL1197:;}; _pop_region( rgn);} return ts;} static void* Cyc_Tcexp_tcTunion(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Exp* e, struct Cyc_Core_Opt** all_ref, struct Cyc_Core_Opt** exist_ref,
  struct Cyc_List_List* es, struct Cyc_Absyn_Tuniondecl* tud, struct Cyc_Absyn_Tunionfield*
! tuf){ struct _RegionHandle _temp1216= _new_region(); struct _RegionHandle* rgn=&
! _temp1216; _push_region( rgn);{ struct _tuple4 _temp1217=({ struct _tuple4
! _temp1262; _temp1262.f1= Cyc_Tcenv_lookup_type_vars( te); _temp1262.f2= rgn;
! _temp1262;}); struct Cyc_List_List* _temp1218=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp1217, tud->tvs); struct Cyc_List_List* _temp1219=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp1217, tuf->tvs); struct Cyc_List_List* _temp1220=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
! struct _tuple5*)) Cyc_Core_snd, _temp1218); struct Cyc_List_List* _temp1221=((
  struct Cyc_List_List*(*)( void*(* f)( struct _tuple5*), struct Cyc_List_List* x))
! Cyc_List_map)(( void*(*)( struct _tuple5*)) Cyc_Core_snd, _temp1219); struct Cyc_List_List*
! _temp1222=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_rappend)( rgn, _temp1218, _temp1219);*
! all_ref=({ struct Cyc_Core_Opt* _temp1223=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1223->v=( void*) _temp1220; _temp1223;});*
! exist_ref=({ struct Cyc_Core_Opt* _temp1224=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1224->v=( void*) _temp1221; _temp1224;});{
! void* res=( void*)({ struct Cyc_Absyn_TunionFieldType_struct* _temp1257=( struct
  Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionFieldType_struct));
! _temp1257[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct _temp1258; _temp1258.tag=
! Cyc_Absyn_TunionFieldType; _temp1258.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp1259; _temp1259.field_info=( void*)(( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp1260=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp1260[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp1261; _temp1261.tag= Cyc_Absyn_KnownTunionfield; _temp1261.f1= tud;
! _temp1261.f2= tuf; _temp1261;}); _temp1260;})); _temp1259.targs= _temp1220;
! _temp1259;}); _temp1258;}); _temp1257;}); if( topt !=  0){ void* _temp1225= Cyc_Tcutil_compress(*((
! void**) _check_null( topt))); struct Cyc_Absyn_TunionInfo _temp1233; void*
! _temp1235; struct Cyc_List_List* _temp1237; _LL1227: if(( unsigned int)
! _temp1225 >  4u?*(( int*) _temp1225) ==  Cyc_Absyn_TunionFieldType: 0){ goto
! _LL1228;} else{ goto _LL1229;} _LL1229: if(( unsigned int) _temp1225 >  4u?*((
! int*) _temp1225) ==  Cyc_Absyn_TunionType: 0){ _LL1234: _temp1233=(( struct Cyc_Absyn_TunionType_struct*)
! _temp1225)->f1; _LL1238: _temp1237= _temp1233.targs; goto _LL1236; _LL1236:
! _temp1235=( void*) _temp1233.rgn; goto _LL1230;} else{ goto _LL1231;} _LL1231:
! goto _LL1232; _LL1228: Cyc_Tcutil_unify(*(( void**) _check_null( topt)), res);
! goto _LL1226; _LL1230:{ struct Cyc_List_List* a= _temp1220; for( 0; a !=  0?
! _temp1237 !=  0: 0;( a=(( struct Cyc_List_List*) _check_null( a))->tl, _temp1237=((
! struct Cyc_List_List*) _check_null( _temp1237))->tl)){ Cyc_Tcutil_unify(( void*)((
  struct Cyc_List_List*) _check_null( a))->hd,( void*)(( struct Cyc_List_List*)
! _check_null( _temp1237))->hd);}} if( tuf->typs ==  0? es ==  0: 0){ e->topt=({
! struct Cyc_Core_Opt* _temp1239=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1239->v=( void*) res; _temp1239;}); res=( void*)({ struct
! Cyc_Absyn_TunionType_struct* _temp1240=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp1240[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp1241; _temp1241.tag= Cyc_Absyn_TunionType;
! _temp1241.f1=({ struct Cyc_Absyn_TunionInfo _temp1242; _temp1242.tunion_info=(
! void*)(( void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp1243=( struct Cyc_Absyn_KnownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp1243[ 0]=({
! struct Cyc_Absyn_KnownTunion_struct _temp1244; _temp1244.tag= Cyc_Absyn_KnownTunion;
! _temp1244.f1= tud; _temp1244;}); _temp1243;})); _temp1242.targs= _temp1220;
! _temp1242.rgn=( void*) _temp1235; _temp1242;}); _temp1241;}); _temp1240;}); Cyc_Tcutil_unchecked_cast(
! te, e, res);{ void* _temp1245= res; _npop_handler( 0u); return _temp1245;}} goto
! _LL1226; _LL1232: goto _LL1226; _LL1226:;}{ struct Cyc_List_List* ts= tuf->typs;
  for( 0; es !=  0? ts !=  0: 0;( es=(( struct Cyc_List_List*) _check_null( es))->tl,
  ts=(( struct Cyc_List_List*) _check_null( ts))->tl)){ struct Cyc_Absyn_Exp* e=(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd; void* t=
! Cyc_Tcutil_rsubstitute( rgn, _temp1222,(*(( struct _tuple8*)(( struct Cyc_List_List*)
  _check_null( ts))->hd)).f2); Cyc_Tcexp_tcExpInitializer( te,( void**)& t, e);
  if( ! Cyc_Tcutil_coerce_arg( te, e, t)){({ struct Cyc_Std_String_pa_struct
! _temp1249; _temp1249.tag= Cyc_Std_String_pa; _temp1249.f1=( struct _tagged_arr)(
  e->topt ==  0? _tag_arr("?", sizeof( unsigned char), 2u): Cyc_Absynpp_typ2string((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v));{ struct Cyc_Std_String_pa_struct
! _temp1248; _temp1248.tag= Cyc_Std_String_pa; _temp1248.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ struct Cyc_Std_String_pa_struct _temp1247;
! _temp1247.tag= Cyc_Std_String_pa; _temp1247.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! tuf->name);{ void* _temp1246[ 3u]={& _temp1247,& _temp1248,& _temp1249}; Cyc_Tcutil_terr(
  e->loc, _tag_arr("tunion constructor %s expects argument of type %s but this argument has type %s",
! sizeof( unsigned char), 80u), _tag_arr( _temp1246, sizeof( void*), 3u));}}}});}}
! if( es !=  0){ void* _temp1252=({ struct Cyc_Std_String_pa_struct _temp1251;
! _temp1251.tag= Cyc_Std_String_pa; _temp1251.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! tuf->name);{ void* _temp1250[ 1u]={& _temp1251}; Cyc_Tcexp_expr_err( te,((
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( es))->hd)->loc,
  _tag_arr("too many arguments for tunion constructor %s", sizeof( unsigned char),
! 45u), _tag_arr( _temp1250, sizeof( void*), 1u));}}); _npop_handler( 0u); return
! _temp1252;} if( ts !=  0){ void* _temp1255=({ struct Cyc_Std_String_pa_struct
! _temp1254; _temp1254.tag= Cyc_Std_String_pa; _temp1254.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( tuf->name);{ void* _temp1253[ 1u]={& _temp1254}; Cyc_Tcexp_expr_err(
  te, loc, _tag_arr("too few arguments for tunion constructor %s", sizeof(
! unsigned char), 44u), _tag_arr( _temp1253, sizeof( void*), 1u));}});
! _npop_handler( 0u); return _temp1255;}{ void* _temp1256= res; _npop_handler( 0u);
! return _temp1256;}}}}; _pop_region( rgn);} static void* Cyc_Tcexp_tcMalloc(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Exp* ropt, void* t){ void* rgn=( void*) Cyc_Absyn_HeapRgn; if( ropt != 
  0){ void* expected_type=( void*)({ struct Cyc_Absyn_RgnHandleType_struct*
! _temp1273=( struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_RgnHandleType_struct)); _temp1273[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct
! _temp1274; _temp1274.tag= Cyc_Absyn_RgnHandleType; _temp1274.f1=( void*) Cyc_Absyn_new_evar((
! struct Cyc_Core_Opt*)& Cyc_Tcexp_rk,({ struct Cyc_Core_Opt* _temp1275=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1275->v=( void*)
! Cyc_Tcenv_lookup_type_vars( te); _temp1275;})); _temp1274;}); _temp1273;}); void*
  handle_type= Cyc_Tcexp_tcExp( te,( void**)& expected_type,( struct Cyc_Absyn_Exp*)
! _check_null( ropt)); void* _temp1263= Cyc_Tcutil_compress( handle_type); void*
! _temp1269; _LL1265: if(( unsigned int) _temp1263 >  4u?*(( int*) _temp1263) == 
! Cyc_Absyn_RgnHandleType: 0){ _LL1270: _temp1269=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1263)->f1; goto _LL1266;} else{ goto _LL1267;} _LL1267: goto _LL1268;
! _LL1266: rgn= _temp1269; Cyc_Tcenv_check_rgn_accessible( te, loc, rgn); goto
! _LL1264; _LL1268:({ struct Cyc_Std_String_pa_struct _temp1272; _temp1272.tag=
! Cyc_Std_String_pa; _temp1272.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! handle_type);{ void* _temp1271[ 1u]={& _temp1272}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)
  _check_null( ropt))->loc, _tag_arr("expecting region_t type but found %s",
! sizeof( unsigned char), 37u), _tag_arr( _temp1271, sizeof( void*), 1u));}});
! goto _LL1264; _LL1264:;} Cyc_Tcutil_check_type( loc, te, Cyc_Tcenv_lookup_type_vars(
! te),( void*) Cyc_Absyn_MemKind, 1, t);{ void* _temp1276= t; struct Cyc_Absyn_TunionFieldInfo
! _temp1282; void* _temp1284; struct Cyc_Absyn_Tunionfield* _temp1286; _LL1278:
! if(( unsigned int) _temp1276 >  4u?*(( int*) _temp1276) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1283: _temp1282=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1276)->f1;
! _LL1285: _temp1284=( void*) _temp1282.field_info; if(*(( int*) _temp1284) == 
! Cyc_Absyn_KnownTunionfield){ _LL1287: _temp1286=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1284)->f2; goto _LL1279;} else{ goto _LL1280;}} else{ goto _LL1280;}
! _LL1280: goto _LL1281; _LL1279: if( _temp1286->tvs !=  0){({ void* _temp1288[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("malloc with existential types not yet implemented",
! sizeof( unsigned char), 50u), _tag_arr( _temp1288, sizeof( void*), 0u));});}
! goto _LL1277; _LL1281: goto _LL1277; _LL1277:;}{ void*(* _temp1289)( void* t,
  void* rgn, struct Cyc_Absyn_Tqual tq)= Cyc_Absyn_at_typ; if( topt !=  0){ void*
! _temp1290= Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_Absyn_PtrInfo
! _temp1296; struct Cyc_Absyn_Conref* _temp1298; _LL1292: if(( unsigned int)
! _temp1290 >  4u?*(( int*) _temp1290) ==  Cyc_Absyn_PointerType: 0){ _LL1297:
! _temp1296=(( struct Cyc_Absyn_PointerType_struct*) _temp1290)->f1; _LL1299:
! _temp1298= _temp1296.nullable; goto _LL1293;} else{ goto _LL1294;} _LL1294: goto
! _LL1295; _LL1293: if((( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp1298)){ _temp1289= Cyc_Absyn_star_typ;} goto _LL1291; _LL1295: goto _LL1291;
! _LL1291:;} return _temp1289( t, rgn, Cyc_Absyn_empty_tqual());}} static void*
  Cyc_Tcexp_tcStmtExp( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc,
  void** topt, struct Cyc_Absyn_Stmt* s){ Cyc_Tcstmt_tcStmt( Cyc_Tcenv_set_encloser(
  te, s), s, 1); Cyc_NewControlFlow_set_encloser( s, Cyc_Tcenv_get_encloser( te));
! while( 1) { void* _temp1300=( void*) s->r; struct Cyc_Absyn_Exp* _temp1310;
! struct Cyc_Absyn_Stmt* _temp1312; struct Cyc_Absyn_Stmt* _temp1314; struct Cyc_Absyn_Stmt*
! _temp1316; struct Cyc_Absyn_Decl* _temp1318; _LL1302: if(( unsigned int)
! _temp1300 >  1u?*(( int*) _temp1300) ==  Cyc_Absyn_Exp_s: 0){ _LL1311: _temp1310=((
! struct Cyc_Absyn_Exp_s_struct*) _temp1300)->f1; goto _LL1303;} else{ goto
! _LL1304;} _LL1304: if(( unsigned int) _temp1300 >  1u?*(( int*) _temp1300) == 
! Cyc_Absyn_Seq_s: 0){ _LL1315: _temp1314=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1300)->f1; goto _LL1313; _LL1313: _temp1312=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1300)->f2; goto _LL1305;} else{ goto _LL1306;} _LL1306: if(( unsigned int)
! _temp1300 >  1u?*(( int*) _temp1300) ==  Cyc_Absyn_Decl_s: 0){ _LL1319:
! _temp1318=(( struct Cyc_Absyn_Decl_s_struct*) _temp1300)->f1; goto _LL1317;
! _LL1317: _temp1316=(( struct Cyc_Absyn_Decl_s_struct*) _temp1300)->f2; goto
! _LL1307;} else{ goto _LL1308;} _LL1308: goto _LL1309; _LL1303: return( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1310->topt))->v; _LL1305: s= _temp1312;
! continue; _LL1307: s= _temp1316; continue; _LL1309: return({ void* _temp1320[ 0u]={};
  Cyc_Tcexp_expr_err( te, loc, _tag_arr("statement expression must end with expression",
! sizeof( unsigned char), 46u), _tag_arr( _temp1320, sizeof( void*), 0u));});
! _LL1301:;}} static void* Cyc_Tcexp_tcCodegen( struct Cyc_Tcenv_Tenv* te, struct
  Cyc_Position_Segment* loc, void** topt, struct Cyc_Absyn_Fndecl* fd){ return({
! void* _temp1321[ 0u]={}; Cyc_Tcexp_expr_err( te, loc, _tag_arr("tcCodegen",
! sizeof( unsigned char), 10u), _tag_arr( _temp1321, sizeof( void*), 0u));});}
  static void* Cyc_Tcexp_tcFill( struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment*
! loc, void** topt, struct Cyc_Absyn_Exp* e){ return({ void* _temp1322[ 0u]={};
  Cyc_Tcexp_expr_err( te, loc, _tag_arr("tcFill", sizeof( unsigned char), 7u),
! _tag_arr( _temp1322, sizeof( void*), 0u));});} static void* Cyc_Tcexp_tcNew(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void** topt, struct
  Cyc_Absyn_Exp* rgn_handle, struct Cyc_Absyn_Exp* e, struct Cyc_Absyn_Exp* e1){
  void* rgn=( void*) Cyc_Absyn_HeapRgn; if( rgn_handle !=  0){ void* expected_type=(
! void*)({ struct Cyc_Absyn_RgnHandleType_struct* _temp1333=( struct Cyc_Absyn_RgnHandleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnHandleType_struct)); _temp1333[ 0]=({
! struct Cyc_Absyn_RgnHandleType_struct _temp1334; _temp1334.tag= Cyc_Absyn_RgnHandleType;
! _temp1334.f1=( void*) Cyc_Absyn_new_evar(( struct Cyc_Core_Opt*)& Cyc_Tcexp_rk,({
! struct Cyc_Core_Opt* _temp1335=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1335->v=( void*) Cyc_Tcenv_lookup_type_vars( te); _temp1335;}));
! _temp1334;}); _temp1333;}); void* handle_type= Cyc_Tcexp_tcExp( te,( void**)&
  expected_type,( struct Cyc_Absyn_Exp*) _check_null( rgn_handle)); void*
! _temp1323= Cyc_Tcutil_compress( handle_type); void* _temp1329; _LL1325: if((
! unsigned int) _temp1323 >  4u?*(( int*) _temp1323) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL1330: _temp1329=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1323)->f1; goto _LL1326;} else{ goto _LL1327;} _LL1327: goto _LL1328;
! _LL1326: rgn= _temp1329; Cyc_Tcenv_check_rgn_accessible( te, loc, rgn); goto
! _LL1324; _LL1328:({ struct Cyc_Std_String_pa_struct _temp1332; _temp1332.tag=
! Cyc_Std_String_pa; _temp1332.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! handle_type);{ void* _temp1331[ 1u]={& _temp1332}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)
  _check_null( rgn_handle))->loc, _tag_arr("expecting region_t type but found %s",
! sizeof( unsigned char), 37u), _tag_arr( _temp1331, sizeof( void*), 1u));}});
! goto _LL1324; _LL1324:;}{ void* _temp1336=( void*) e1->r; struct Cyc_Absyn_Exp*
! _temp1348; struct Cyc_Absyn_Exp* _temp1350; struct Cyc_Absyn_Vardecl* _temp1352;
! struct Cyc_List_List* _temp1354; struct Cyc_Core_Opt* _temp1356; struct Cyc_List_List*
! _temp1358; void* _temp1360; struct _tagged_arr _temp1362; _LL1338: if(*(( int*)
! _temp1336) ==  Cyc_Absyn_Comprehension_e){ _LL1353: _temp1352=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1336)->f1; goto _LL1351; _LL1351: _temp1350=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1336)->f2; goto _LL1349; _LL1349: _temp1348=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1336)->f3; goto _LL1339;} else{ goto _LL1340;} _LL1340: if(*(( int*)
! _temp1336) ==  Cyc_Absyn_UnresolvedMem_e){ _LL1357: _temp1356=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1336)->f1; goto _LL1355; _LL1355: _temp1354=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1336)->f2; goto _LL1341;} else{ goto _LL1342;} _LL1342: if(*(( int*)
! _temp1336) ==  Cyc_Absyn_Array_e){ _LL1359: _temp1358=(( struct Cyc_Absyn_Array_e_struct*)
! _temp1336)->f1; goto _LL1343;} else{ goto _LL1344;} _LL1344: if(*(( int*)
! _temp1336) ==  Cyc_Absyn_Const_e){ _LL1361: _temp1360=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp1336)->f1; if(( unsigned int) _temp1360 >  1u?*(( int*) _temp1360) ==  Cyc_Absyn_String_c:
! 0){ _LL1363: _temp1362=(( struct Cyc_Absyn_String_c_struct*) _temp1360)->f1;
! goto _LL1345;} else{ goto _LL1346;}} else{ goto _LL1346;} _LL1346: goto _LL1347;
! _LL1339: { void* _temp1364= Cyc_Tcexp_tcExpNoPromote( te, topt, e1); void*
! _temp1365= Cyc_Tcutil_compress( _temp1364); struct Cyc_Absyn_Tqual _temp1371;
! void* _temp1373; _LL1367: if(( unsigned int) _temp1365 >  4u?*(( int*) _temp1365)
! ==  Cyc_Absyn_ArrayType: 0){ _LL1374: _temp1373=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1365)->f1; goto _LL1372; _LL1372: _temp1371=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1365)->f2; goto _LL1368;} else{ goto _LL1369;} _LL1369: goto _LL1370;
! _LL1368: { void* b= Cyc_Tcutil_is_const_exp( te, _temp1350)?( void*)({ struct
! Cyc_Absyn_Upper_b_struct* _temp1379=( struct Cyc_Absyn_Upper_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct)); _temp1379[ 0]=({ struct
! Cyc_Absyn_Upper_b_struct _temp1380; _temp1380.tag= Cyc_Absyn_Upper_b; _temp1380.f1=
! _temp1350; _temp1380;}); _temp1379;}):( void*) Cyc_Absyn_Unknown_b; void*
! res_typ=( void*)({ struct Cyc_Absyn_PointerType_struct* _temp1376=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp1376[ 0]=({
! struct Cyc_Absyn_PointerType_struct _temp1377; _temp1377.tag= Cyc_Absyn_PointerType;
! _temp1377.f1=({ struct Cyc_Absyn_PtrInfo _temp1378; _temp1378.elt_typ=( void*)
! _temp1373; _temp1378.rgn_typ=( void*) rgn; _temp1378.nullable=(( struct Cyc_Absyn_Conref*(*)())
! Cyc_Absyn_empty_conref)(); _temp1378.tq= _temp1371; _temp1378.bounds= Cyc_Absyn_new_conref(
! b); _temp1378;}); _temp1377;}); _temp1376;}); if( topt !=  0){ if( ! Cyc_Tcutil_unify(*((
  void**) _check_null( topt)), res_typ)? Cyc_Tcutil_silent_castable( te, loc,
  res_typ,*(( void**) _check_null( topt))): 0){ e->topt=({ struct Cyc_Core_Opt*
! _temp1375=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1375->v=( void*) res_typ; _temp1375;}); Cyc_Tcutil_unchecked_cast( te, e,*((
  void**) _check_null( topt))); res_typ=*(( void**) _check_null( topt));}} return
! res_typ;} _LL1370: return({ void* _temp1381[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("tcNew: comprehension returned non-array type",
! sizeof( unsigned char), 45u), _tag_arr( _temp1381, sizeof( void*), 0u));});
! _LL1366:;} _LL1341:( void*)( e1->r=( void*)(( void*)({ struct Cyc_Absyn_Array_e_struct*
! _temp1382=( struct Cyc_Absyn_Array_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Array_e_struct));
! _temp1382[ 0]=({ struct Cyc_Absyn_Array_e_struct _temp1383; _temp1383.tag= Cyc_Absyn_Array_e;
! _temp1383.f1= _temp1354; _temp1383;}); _temp1382;}))); _temp1358= _temp1354;
! goto _LL1343; _LL1343: { void** elt_typ_opt= 0; if( topt !=  0){ void* _temp1384=
  Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_Absyn_PtrInfo
! _temp1390; struct Cyc_Absyn_Tqual _temp1392; void* _temp1394; void** _temp1396;
! _LL1386: if(( unsigned int) _temp1384 >  4u?*(( int*) _temp1384) ==  Cyc_Absyn_PointerType:
! 0){ _LL1391: _temp1390=(( struct Cyc_Absyn_PointerType_struct*) _temp1384)->f1;
! _LL1395: _temp1394=( void*) _temp1390.elt_typ; _temp1396=( void**)&((( struct
! Cyc_Absyn_PointerType_struct*) _temp1384)->f1).elt_typ; goto _LL1393; _LL1393:
! _temp1392= _temp1390.tq; goto _LL1387;} else{ goto _LL1388;} _LL1388: goto
! _LL1389; _LL1387: elt_typ_opt=( void**) _temp1396; goto _LL1385; _LL1389: goto
! _LL1385; _LL1385:;}{ void* _temp1397= Cyc_Tcexp_tcExpNoPromote( te, elt_typ_opt,
! e1); void* res_typ;{ void* _temp1398= Cyc_Tcutil_compress( _temp1397); struct
! Cyc_Absyn_Exp* _temp1404; struct Cyc_Absyn_Tqual _temp1406; void* _temp1408;
! _LL1400: if(( unsigned int) _temp1398 >  4u?*(( int*) _temp1398) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1409: _temp1408=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1398)->f1;
! goto _LL1407; _LL1407: _temp1406=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1398)->f2; goto _LL1405; _LL1405: _temp1404=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1398)->f3; goto _LL1401;} else{ goto _LL1402;} _LL1402: goto _LL1403;
! _LL1401: res_typ=( void*)({ struct Cyc_Absyn_PointerType_struct* _temp1410=(
  struct Cyc_Absyn_PointerType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct));
! _temp1410[ 0]=({ struct Cyc_Absyn_PointerType_struct _temp1411; _temp1411.tag=
! Cyc_Absyn_PointerType; _temp1411.f1=({ struct Cyc_Absyn_PtrInfo _temp1412;
! _temp1412.elt_typ=( void*) _temp1408; _temp1412.rgn_typ=( void*) rgn; _temp1412.nullable=((
! struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)(); _temp1412.tq=
! _temp1406; _temp1412.bounds= Cyc_Absyn_new_conref(( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1413=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1413[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1414; _temp1414.tag= Cyc_Absyn_Upper_b;
! _temp1414.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1404); _temp1414;});
! _temp1413;})); _temp1412;}); _temp1411;}); _temp1410;}); if( topt !=  0){ if( !
  Cyc_Tcutil_unify(*(( void**) _check_null( topt)), res_typ)? Cyc_Tcutil_silent_castable(
  te, loc, res_typ,*(( void**) _check_null( topt))): 0){ e->topt=({ struct Cyc_Core_Opt*
! _temp1415=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1415->v=( void*) res_typ; _temp1415;}); Cyc_Tcutil_unchecked_cast( te, e,*((
  void**) _check_null( topt))); res_typ=*(( void**) _check_null( topt));}} goto
! _LL1399; _LL1403: return({ void* _temp1416[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("tcExpNoPromote on Array_e returned non-array type",
! sizeof( unsigned char), 50u), _tag_arr( _temp1416, sizeof( void*), 0u));});
! _LL1399:;} return res_typ;}} _LL1345: { void* _temp1417= Cyc_Absyn_atb_typ( Cyc_Absyn_uchar_t,
! rgn, Cyc_Absyn_const_tqual(),( void*) Cyc_Absyn_Unknown_b); void* _temp1418= Cyc_Tcexp_tcExp(
! te,( void**)& _temp1417, e1); return Cyc_Absyn_atb_typ( _temp1418, rgn, Cyc_Absyn_empty_tqual(),(
! void*)({ struct Cyc_Absyn_Upper_b_struct* _temp1419=( struct Cyc_Absyn_Upper_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct)); _temp1419[ 0]=({ struct
! Cyc_Absyn_Upper_b_struct _temp1420; _temp1420.tag= Cyc_Absyn_Upper_b; _temp1420.f1=
! Cyc_Absyn_uint_exp( 1, 0); _temp1420;}); _temp1419;}));} _LL1347: { void** topt2=
! 0; if( topt !=  0){ void* _temp1421= Cyc_Tcutil_compress(*(( void**) _check_null(
! topt))); struct Cyc_Absyn_PtrInfo _temp1429; struct Cyc_Absyn_Conref* _temp1431;
! void* _temp1433; void** _temp1435; _LL1423: if(( unsigned int) _temp1421 >  4u?*((
! int*) _temp1421) ==  Cyc_Absyn_PointerType: 0){ _LL1430: _temp1429=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1421)->f1; _LL1434: _temp1433=( void*) _temp1429.elt_typ; _temp1435=( void**)&(((
! struct Cyc_Absyn_PointerType_struct*) _temp1421)->f1).elt_typ; goto _LL1432;
! _LL1432: _temp1431= _temp1429.nullable; goto _LL1424;} else{ goto _LL1425;}
! _LL1425: if(( unsigned int) _temp1421 >  4u?*(( int*) _temp1421) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL1426;} else{ goto _LL1427;} _LL1427: goto _LL1428; _LL1424: topt2=(
! void**) _temp1435; goto _LL1422; _LL1426: topt2=({ void** _temp1436=( void**)
! _cycalloc( sizeof( void*)); _temp1436[ 0]=*(( void**) _check_null( topt));
! _temp1436;}); goto _LL1422; _LL1428: goto _LL1422; _LL1422:;}{ void* telt= Cyc_Tcexp_tcExp(
  te, topt2, e1); void* res_typ=( void*)({ struct Cyc_Absyn_PointerType_struct*
! _temp1438=( struct Cyc_Absyn_PointerType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct));
! _temp1438[ 0]=({ struct Cyc_Absyn_PointerType_struct _temp1439; _temp1439.tag=
! Cyc_Absyn_PointerType; _temp1439.f1=({ struct Cyc_Absyn_PtrInfo _temp1440;
! _temp1440.elt_typ=( void*) telt; _temp1440.rgn_typ=( void*) rgn; _temp1440.nullable=((
! struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)(); _temp1440.tq= Cyc_Absyn_empty_tqual();
! _temp1440.bounds= Cyc_Absyn_new_conref(( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1441=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1441[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1442; _temp1442.tag= Cyc_Absyn_Upper_b;
! _temp1442.f1= Cyc_Absyn_uint_exp( 1, 0); _temp1442;}); _temp1441;})); _temp1440;});
! _temp1439;}); _temp1438;}); if( topt !=  0){ if( ! Cyc_Tcutil_unify(*(( void**)
  _check_null( topt)), res_typ)? Cyc_Tcutil_silent_castable( te, loc, res_typ,*((
! void**) _check_null( topt))): 0){ e->topt=({ struct Cyc_Core_Opt* _temp1437=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1437->v=(
! void*) res_typ; _temp1437;}); Cyc_Tcutil_unchecked_cast( te, e,*(( void**)
  _check_null( topt))); res_typ=*(( void**) _check_null( topt));}} return res_typ;}}
! _LL1337:;}} void* Cyc_Tcexp_tcExp( struct Cyc_Tcenv_Tenv* te, void** topt,
  struct Cyc_Absyn_Exp* e){ void* t= Cyc_Tcutil_compress( Cyc_Tcexp_tcExpNoPromote(
! te, topt, e)); void* _temp1443= t; struct Cyc_Absyn_Exp* _temp1449; struct Cyc_Absyn_Tqual
! _temp1451; void* _temp1453; _LL1445: if(( unsigned int) _temp1443 >  4u?*(( int*)
! _temp1443) ==  Cyc_Absyn_ArrayType: 0){ _LL1454: _temp1453=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1443)->f1; goto _LL1452; _LL1452: _temp1451=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1443)->f2; goto _LL1450; _LL1450: _temp1449=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1443)->f3; goto _LL1446;} else{ goto _LL1447;} _LL1447: goto _LL1448;
! _LL1446: { void* _temp1457; struct _tuple6 _temp1455= Cyc_Tcutil_addressof_props(
! te, e); _LL1458: _temp1457= _temp1455.f2; goto _LL1456; _LL1456: { void*
! _temp1459= _temp1449 ==  0?( void*) Cyc_Absyn_Unknown_b:( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1460=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1460[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1461; _temp1461.tag= Cyc_Absyn_Upper_b;
! _temp1461.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1449); _temp1461;});
! _temp1460;}); t= Cyc_Absyn_atb_typ( _temp1453, _temp1457, _temp1451, _temp1459);(
  void*)((( struct Cyc_Core_Opt*) _check_null( e->topt))->v=( void*) t); return t;}}
! _LL1448: return t; _LL1444:;} void* Cyc_Tcexp_tcExpInitializer( struct Cyc_Tcenv_Tenv*
  te, void** topt, struct Cyc_Absyn_Exp* e){ void* t= Cyc_Tcexp_tcExpNoPromote( te,
! topt, e); void* _temp1462=( void*) e->r; void* _temp1472; _LL1464: if(*(( int*)
! _temp1462) ==  Cyc_Absyn_Array_e){ goto _LL1465;} else{ goto _LL1466;} _LL1466:
! if(*(( int*) _temp1462) ==  Cyc_Absyn_Comprehension_e){ goto _LL1467;} else{
! goto _LL1468;} _LL1468: if(*(( int*) _temp1462) ==  Cyc_Absyn_Const_e){ _LL1473:
! _temp1472=( void*)(( struct Cyc_Absyn_Const_e_struct*) _temp1462)->f1; if((
! unsigned int) _temp1472 >  1u?*(( int*) _temp1472) ==  Cyc_Absyn_String_c: 0){
! goto _LL1469;} else{ goto _LL1470;}} else{ goto _LL1470;} _LL1470: goto _LL1471;
! _LL1465: return t; _LL1467: return t; _LL1469: return t; _LL1471: t= Cyc_Tcutil_compress(
! t);{ void* _temp1474= t; struct Cyc_Absyn_Exp* _temp1480; struct Cyc_Absyn_Tqual
! _temp1482; void* _temp1484; _LL1476: if(( unsigned int) _temp1474 >  4u?*(( int*)
! _temp1474) ==  Cyc_Absyn_ArrayType: 0){ _LL1485: _temp1484=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1474)->f1; goto _LL1483; _LL1483: _temp1482=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1474)->f2; goto _LL1481; _LL1481: _temp1480=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1474)->f3; goto _LL1477;} else{ goto _LL1478;} _LL1478: goto _LL1479;
! _LL1477: { void* _temp1488; struct _tuple6 _temp1486= Cyc_Tcutil_addressof_props(
! te, e); _LL1489: _temp1488= _temp1486.f2; goto _LL1487; _LL1487: { void* b=
! _temp1480 ==  0?( void*) Cyc_Absyn_Unknown_b:( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp1490=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp1490[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp1491; _temp1491.tag= Cyc_Absyn_Upper_b;
! _temp1491.f1=( struct Cyc_Absyn_Exp*) _check_null( _temp1480); _temp1491;});
! _temp1490;}); t= Cyc_Absyn_atb_typ( _temp1484, _temp1488, _temp1482, b); Cyc_Tcutil_unchecked_cast(
! te, e, t); return t;}} _LL1479: return t; _LL1475:;} _LL1463:;} static void* Cyc_Tcexp_tcExpNoPromote(
  struct Cyc_Tcenv_Tenv* te, void** topt, struct Cyc_Absyn_Exp* e){{ void*
! _temp1492=( void*) e->r; struct Cyc_Absyn_Exp* _temp1498; _LL1494: if(*(( int*)
! _temp1492) ==  Cyc_Absyn_NoInstantiate_e){ _LL1499: _temp1498=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp1492)->f1; goto _LL1495;} else{ goto _LL1496;} _LL1496: goto _LL1497;
! _LL1495: Cyc_Tcexp_tcExpNoInst( te, topt, _temp1498);( void*)((( struct Cyc_Core_Opt*)
! _check_null( _temp1498->topt))->v=( void*) Cyc_Absyn_pointer_expand(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1498->topt))->v)); e->topt= _temp1498->topt;
! goto _LL1493; _LL1497: Cyc_Tcexp_tcExpNoInst( te, topt, e);( void*)((( struct
  Cyc_Core_Opt*) _check_null( e->topt))->v=( void*) Cyc_Absyn_pointer_expand((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v));{ void* _temp1500=
  Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);
! struct Cyc_Absyn_PtrInfo _temp1506; struct Cyc_Absyn_Conref* _temp1508; struct
! Cyc_Absyn_Tqual _temp1510; struct Cyc_Absyn_Conref* _temp1512; void* _temp1514;
! void* _temp1516; _LL1502: if(( unsigned int) _temp1500 >  4u?*(( int*) _temp1500)
! ==  Cyc_Absyn_PointerType: 0){ _LL1507: _temp1506=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1500)->f1; _LL1517: _temp1516=( void*) _temp1506.elt_typ; goto _LL1515;
! _LL1515: _temp1514=( void*) _temp1506.rgn_typ; goto _LL1513; _LL1513: _temp1512=
! _temp1506.nullable; goto _LL1511; _LL1511: _temp1510= _temp1506.tq; goto _LL1509;
! _LL1509: _temp1508= _temp1506.bounds; goto _LL1503;} else{ goto _LL1504;}
! _LL1504: goto _LL1505; _LL1503:{ void* _temp1518= Cyc_Tcutil_compress( _temp1516);
! struct Cyc_Absyn_FnInfo _temp1524; struct Cyc_List_List* _temp1526; struct Cyc_List_List*
! _temp1528; struct Cyc_Absyn_VarargInfo* _temp1530; int _temp1532; struct Cyc_List_List*
! _temp1534; void* _temp1536; struct Cyc_Core_Opt* _temp1538; struct Cyc_List_List*
! _temp1540; _LL1520: if(( unsigned int) _temp1518 >  4u?*(( int*) _temp1518) == 
! Cyc_Absyn_FnType: 0){ _LL1525: _temp1524=(( struct Cyc_Absyn_FnType_struct*)
! _temp1518)->f1; _LL1541: _temp1540= _temp1524.tvars; goto _LL1539; _LL1539:
! _temp1538= _temp1524.effect; goto _LL1537; _LL1537: _temp1536=( void*) _temp1524.ret_typ;
! goto _LL1535; _LL1535: _temp1534= _temp1524.args; goto _LL1533; _LL1533:
! _temp1532= _temp1524.c_varargs; goto _LL1531; _LL1531: _temp1530= _temp1524.cyc_varargs;
! goto _LL1529; _LL1529: _temp1528= _temp1524.rgn_po; goto _LL1527; _LL1527:
! _temp1526= _temp1524.attributes; goto _LL1521;} else{ goto _LL1522;} _LL1522:
! goto _LL1523; _LL1521: if( _temp1540 !=  0){ struct _RegionHandle _temp1542=
! _new_region(); struct _RegionHandle* rgn=& _temp1542; _push_region( rgn);{
! struct _tuple4 _temp1543=({ struct _tuple4 _temp1553; _temp1553.f1= Cyc_Tcenv_lookup_type_vars(
! te); _temp1553.f2= rgn; _temp1553;}); struct Cyc_List_List* inst=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp1543, _temp1540); struct Cyc_List_List* ts=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
  struct _tuple5*)) Cyc_Core_snd, inst); void* ftyp= Cyc_Tcutil_rsubstitute( rgn,
! inst,( void*)({ struct Cyc_Absyn_FnType_struct* _temp1550=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1550[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1551; _temp1551.tag= Cyc_Absyn_FnType; _temp1551.f1=({ struct Cyc_Absyn_FnInfo
! _temp1552; _temp1552.tvars= 0; _temp1552.effect= _temp1538; _temp1552.ret_typ=(
! void*) _temp1536; _temp1552.args= _temp1534; _temp1552.c_varargs= _temp1532;
! _temp1552.cyc_varargs= _temp1530; _temp1552.rgn_po= _temp1528; _temp1552.attributes=
! _temp1526; _temp1552;}); _temp1551;}); _temp1550;})); void* new_typ=( void*)({
! struct Cyc_Absyn_PointerType_struct* _temp1547=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp1547[ 0]=({
! struct Cyc_Absyn_PointerType_struct _temp1548; _temp1548.tag= Cyc_Absyn_PointerType;
! _temp1548.f1=({ struct Cyc_Absyn_PtrInfo _temp1549; _temp1549.elt_typ=( void*)
! ftyp; _temp1549.rgn_typ=( void*) _temp1514; _temp1549.nullable= _temp1512;
! _temp1549.tq= _temp1510; _temp1549.bounds= _temp1508; _temp1549;}); _temp1548;});
! _temp1547;}); struct Cyc_Absyn_Exp* inner= Cyc_Absyn_copy_exp( e);( void*)( e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Instantiate_e_struct* _temp1544=( struct Cyc_Absyn_Instantiate_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Instantiate_e_struct)); _temp1544[ 0]=({
! struct Cyc_Absyn_Instantiate_e_struct _temp1545; _temp1545.tag= Cyc_Absyn_Instantiate_e;
! _temp1545.f1= inner; _temp1545.f2= ts; _temp1545;}); _temp1544;}))); e->topt=({
! struct Cyc_Core_Opt* _temp1546=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1546->v=( void*) new_typ; _temp1546;});}; _pop_region( rgn);}
! goto _LL1519; _LL1523: goto _LL1519; _LL1519:;} goto _LL1501; _LL1505: goto
! _LL1501; _LL1501:;} goto _LL1493; _LL1493:;} return( void*)(( struct Cyc_Core_Opt*)
  _check_null( e->topt))->v;} static void Cyc_Tcexp_tcExpNoInst( struct Cyc_Tcenv_Tenv*
  te, void** topt, struct Cyc_Absyn_Exp* e){ struct Cyc_Position_Segment* loc= e->loc;
! void* t;{ void* _temp1554=( void*) e->r; struct Cyc_Absyn_Exp* _temp1630; struct
! _tuple1* _temp1632; struct Cyc_List_List* _temp1634; struct Cyc_Absyn_Exp*
! _temp1636; struct Cyc_List_List* _temp1638; struct Cyc_Core_Opt* _temp1640; void*
! _temp1642; void* _temp1644; struct _tuple1* _temp1646; struct Cyc_List_List*
! _temp1648; void* _temp1650; void* _temp1652; struct Cyc_Absyn_Exp* _temp1654;
! struct Cyc_Absyn_Exp* _temp1656; struct Cyc_Core_Opt* _temp1658; struct Cyc_Absyn_Exp*
! _temp1660; struct Cyc_Absyn_Exp* _temp1662; struct Cyc_Absyn_Exp* _temp1664;
! struct Cyc_Absyn_Exp* _temp1666; struct Cyc_Absyn_Exp* _temp1668; struct Cyc_Absyn_Exp*
! _temp1670; struct Cyc_Absyn_VarargCallInfo* _temp1672; struct Cyc_Absyn_VarargCallInfo**
! _temp1674; struct Cyc_List_List* _temp1675; struct Cyc_Absyn_Exp* _temp1677;
! struct Cyc_Absyn_Exp* _temp1679; struct Cyc_List_List* _temp1681; struct Cyc_Absyn_Exp*
! _temp1683; struct Cyc_Absyn_Exp* _temp1685; void* _temp1687; struct Cyc_Absyn_Exp*
! _temp1689; struct Cyc_Absyn_Exp* _temp1691; struct Cyc_Absyn_Exp* _temp1693;
! struct Cyc_Absyn_Exp* _temp1695; void* _temp1697; struct _tagged_arr* _temp1699;
! void* _temp1701; void* _temp1703; struct Cyc_Absyn_Exp* _temp1705; struct
! _tagged_arr* _temp1707; struct Cyc_Absyn_Exp* _temp1709; struct _tagged_arr*
! _temp1711; struct Cyc_Absyn_Exp* _temp1713; struct Cyc_Absyn_Exp* _temp1715;
! struct Cyc_Absyn_Exp* _temp1717; struct Cyc_List_List* _temp1719; struct Cyc_List_List*
! _temp1721; struct _tuple2* _temp1723; struct Cyc_List_List* _temp1725; struct
! Cyc_Absyn_Stmt* _temp1727; struct Cyc_Absyn_Fndecl* _temp1729; struct Cyc_Absyn_Exp*
! _temp1731; struct Cyc_Absyn_Exp* _temp1733; struct Cyc_Absyn_Exp* _temp1735;
! struct Cyc_Absyn_Vardecl* _temp1737; struct Cyc_Absyn_Structdecl* _temp1739;
! struct Cyc_Absyn_Structdecl** _temp1741; struct Cyc_List_List* _temp1742; struct
! Cyc_Core_Opt* _temp1744; struct Cyc_Core_Opt** _temp1746; struct _tuple1*
! _temp1747; struct _tuple1** _temp1749; struct Cyc_List_List* _temp1750; void*
! _temp1752; struct Cyc_Absyn_Tunionfield* _temp1754; struct Cyc_Absyn_Tuniondecl*
! _temp1756; struct Cyc_List_List* _temp1758; struct Cyc_Core_Opt* _temp1760;
! struct Cyc_Core_Opt** _temp1762; struct Cyc_Core_Opt* _temp1763; struct Cyc_Core_Opt**
! _temp1765; struct Cyc_Absyn_Enumfield* _temp1766; struct Cyc_Absyn_Enumdecl*
! _temp1768; struct _tuple1* _temp1770; struct _tuple1** _temp1772; void*
! _temp1773; struct Cyc_Absyn_Exp* _temp1775; _LL1556: if(*(( int*) _temp1554) == 
! Cyc_Absyn_NoInstantiate_e){ _LL1631: _temp1630=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp1554)->f1; goto _LL1557;} else{ goto _LL1558;} _LL1558: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_UnknownId_e){ _LL1633: _temp1632=(( struct Cyc_Absyn_UnknownId_e_struct*)
! _temp1554)->f1; goto _LL1559;} else{ goto _LL1560;} _LL1560: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_UnknownCall_e){ _LL1637: _temp1636=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp1554)->f1; goto _LL1635; _LL1635: _temp1634=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp1554)->f2; goto _LL1561;} else{ goto _LL1562;} _LL1562: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_UnresolvedMem_e){ _LL1641: _temp1640=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1554)->f1; goto _LL1639; _LL1639: _temp1638=(( struct Cyc_Absyn_UnresolvedMem_e_struct*)
! _temp1554)->f2; goto _LL1563;} else{ goto _LL1564;} _LL1564: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Const_e){ _LL1643: _temp1642=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp1554)->f1; goto _LL1565;} else{ goto _LL1566;} _LL1566: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Var_e){ _LL1647: _temp1646=(( struct Cyc_Absyn_Var_e_struct*)
! _temp1554)->f1; goto _LL1645; _LL1645: _temp1644=( void*)(( struct Cyc_Absyn_Var_e_struct*)
! _temp1554)->f2; goto _LL1567;} else{ goto _LL1568;} _LL1568: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Primop_e){ _LL1651: _temp1650=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp1554)->f1; goto _LL1649; _LL1649: _temp1648=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp1554)->f2; goto _LL1569;} else{ goto _LL1570;} _LL1570: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Increment_e){ _LL1655: _temp1654=(( struct Cyc_Absyn_Increment_e_struct*)
! _temp1554)->f1; goto _LL1653; _LL1653: _temp1652=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp1554)->f2; goto _LL1571;} else{ goto _LL1572;} _LL1572: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_AssignOp_e){ _LL1661: _temp1660=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp1554)->f1; goto _LL1659; _LL1659: _temp1658=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp1554)->f2; goto _LL1657; _LL1657: _temp1656=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp1554)->f3; goto _LL1573;} else{ goto _LL1574;} _LL1574: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Conditional_e){ _LL1667: _temp1666=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp1554)->f1; goto _LL1665; _LL1665: _temp1664=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp1554)->f2; goto _LL1663; _LL1663: _temp1662=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp1554)->f3; goto _LL1575;} else{ goto _LL1576;} _LL1576: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_SeqExp_e){ _LL1671: _temp1670=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp1554)->f1; goto _LL1669; _LL1669: _temp1668=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp1554)->f2; goto _LL1577;} else{ goto _LL1578;} _LL1578: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_FnCall_e){ _LL1678: _temp1677=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1554)->f1; goto _LL1676; _LL1676: _temp1675=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1554)->f2; goto _LL1673; _LL1673: _temp1672=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1554)->f3; _temp1674=( struct Cyc_Absyn_VarargCallInfo**)&(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp1554)->f3; goto _LL1579;} else{ goto _LL1580;} _LL1580: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Throw_e){ _LL1680: _temp1679=(( struct Cyc_Absyn_Throw_e_struct*)
! _temp1554)->f1; goto _LL1581;} else{ goto _LL1582;} _LL1582: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Instantiate_e){ _LL1684: _temp1683=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp1554)->f1; goto _LL1682; _LL1682: _temp1681=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp1554)->f2; goto _LL1583;} else{ goto _LL1584;} _LL1584: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Cast_e){ _LL1688: _temp1687=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1554)->f1; goto _LL1686; _LL1686: _temp1685=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1554)->f2; goto _LL1585;} else{ goto _LL1586;} _LL1586: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Address_e){ _LL1690: _temp1689=(( struct Cyc_Absyn_Address_e_struct*)
! _temp1554)->f1; goto _LL1587;} else{ goto _LL1588;} _LL1588: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_New_e){ _LL1694: _temp1693=(( struct Cyc_Absyn_New_e_struct*)
! _temp1554)->f1; goto _LL1692; _LL1692: _temp1691=(( struct Cyc_Absyn_New_e_struct*)
! _temp1554)->f2; goto _LL1589;} else{ goto _LL1590;} _LL1590: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Sizeofexp_e){ _LL1696: _temp1695=(( struct Cyc_Absyn_Sizeofexp_e_struct*)
! _temp1554)->f1; goto _LL1591;} else{ goto _LL1592;} _LL1592: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Sizeoftyp_e){ _LL1698: _temp1697=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*)
! _temp1554)->f1; goto _LL1593;} else{ goto _LL1594;} _LL1594: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Offsetof_e){ _LL1702: _temp1701=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp1554)->f1; goto _LL1700; _LL1700: _temp1699=(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp1554)->f2; goto _LL1595;} else{ goto _LL1596;} _LL1596: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Gentyp_e){ _LL1704: _temp1703=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*)
! _temp1554)->f1; goto _LL1597;} else{ goto _LL1598;} _LL1598: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Deref_e){ _LL1706: _temp1705=(( struct Cyc_Absyn_Deref_e_struct*)
! _temp1554)->f1; goto _LL1599;} else{ goto _LL1600;} _LL1600: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_StructMember_e){ _LL1710: _temp1709=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp1554)->f1; goto _LL1708; _LL1708: _temp1707=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp1554)->f2; goto _LL1601;} else{ goto _LL1602;} _LL1602: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_StructArrow_e){ _LL1714: _temp1713=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp1554)->f1; goto _LL1712; _LL1712: _temp1711=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp1554)->f2; goto _LL1603;} else{ goto _LL1604;} _LL1604: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Subscript_e){ _LL1718: _temp1717=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp1554)->f1; goto _LL1716; _LL1716: _temp1715=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp1554)->f2; goto _LL1605;} else{ goto _LL1606;} _LL1606: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Tuple_e){ _LL1720: _temp1719=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp1554)->f1; goto _LL1607;} else{ goto _LL1608;} _LL1608: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_CompoundLit_e){ _LL1724: _temp1723=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp1554)->f1; goto _LL1722; _LL1722: _temp1721=(( struct Cyc_Absyn_CompoundLit_e_struct*)
! _temp1554)->f2; goto _LL1609;} else{ goto _LL1610;} _LL1610: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Array_e){ _LL1726: _temp1725=(( struct Cyc_Absyn_Array_e_struct*)
! _temp1554)->f1; goto _LL1611;} else{ goto _LL1612;} _LL1612: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_StmtExp_e){ _LL1728: _temp1727=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp1554)->f1; goto _LL1613;} else{ goto _LL1614;} _LL1614: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Codegen_e){ _LL1730: _temp1729=(( struct Cyc_Absyn_Codegen_e_struct*)
! _temp1554)->f1; goto _LL1615;} else{ goto _LL1616;} _LL1616: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Fill_e){ _LL1732: _temp1731=(( struct Cyc_Absyn_Fill_e_struct*)
! _temp1554)->f1; goto _LL1617;} else{ goto _LL1618;} _LL1618: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Comprehension_e){ _LL1738: _temp1737=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1554)->f1; goto _LL1736; _LL1736: _temp1735=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1554)->f2; goto _LL1734; _LL1734: _temp1733=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1554)->f3; goto _LL1619;} else{ goto _LL1620;} _LL1620: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Struct_e){ _LL1748: _temp1747=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1554)->f1; _temp1749=( struct _tuple1**)&(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1554)->f1; goto _LL1745; _LL1745: _temp1744=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1554)->f2; _temp1746=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1554)->f2; goto _LL1743; _LL1743: _temp1742=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1554)->f3; goto _LL1740; _LL1740: _temp1739=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1554)->f4; _temp1741=( struct Cyc_Absyn_Structdecl**)&(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1554)->f4; goto _LL1621;} else{ goto _LL1622;} _LL1622: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_AnonStruct_e){ _LL1753: _temp1752=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp1554)->f1; goto _LL1751; _LL1751: _temp1750=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp1554)->f2; goto _LL1623;} else{ goto _LL1624;} _LL1624: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Tunion_e){ _LL1764: _temp1763=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1554)->f1; _temp1765=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1554)->f1; goto _LL1761; _LL1761: _temp1760=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1554)->f2; _temp1762=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1554)->f2; goto _LL1759; _LL1759: _temp1758=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1554)->f3; goto _LL1757; _LL1757: _temp1756=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1554)->f4; goto _LL1755; _LL1755: _temp1754=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp1554)->f5; goto _LL1625;} else{ goto _LL1626;} _LL1626: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Enum_e){ _LL1771: _temp1770=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1554)->f1; _temp1772=( struct _tuple1**)&(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1554)->f1; goto _LL1769; _LL1769: _temp1768=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1554)->f2; goto _LL1767; _LL1767: _temp1766=(( struct Cyc_Absyn_Enum_e_struct*)
! _temp1554)->f3; goto _LL1627;} else{ goto _LL1628;} _LL1628: if(*(( int*)
! _temp1554) ==  Cyc_Absyn_Malloc_e){ _LL1776: _temp1775=(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp1554)->f1; goto _LL1774; _LL1774: _temp1773=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp1554)->f2; goto _LL1629;} else{ goto _LL1555;} _LL1557: Cyc_Tcexp_tcExpNoInst(
! te, 0, _temp1630); return; _LL1559: Cyc_Tcexp_resolve_unknown_id( te, e,
! _temp1632); Cyc_Tcexp_tcExpNoInst( te, topt, e); return; _LL1561: Cyc_Tcexp_resolve_unknown_fn(
! te, e, _temp1636, _temp1634); Cyc_Tcexp_tcExpNoInst( te, topt, e); return;
! _LL1563: Cyc_Tcexp_resolve_unresolved_mem( te, loc, topt, e, _temp1638); Cyc_Tcexp_tcExpNoInst(
! te, topt, e); return; _LL1565: t= Cyc_Tcexp_tcConst( te, loc, topt, _temp1642, e);
! goto _LL1555; _LL1567: t= Cyc_Tcexp_tcVar( te, loc, _temp1646, _temp1644); goto
! _LL1555; _LL1569: t= Cyc_Tcexp_tcPrimop( te, loc, topt, _temp1650, _temp1648);
! goto _LL1555; _LL1571: t= Cyc_Tcexp_tcIncrement( te, loc, topt, _temp1654,
! _temp1652); goto _LL1555; _LL1573: t= Cyc_Tcexp_tcAssignOp( te, loc, topt,
! _temp1660, _temp1658, _temp1656); goto _LL1555; _LL1575: t= Cyc_Tcexp_tcConditional(
! te, loc, topt, _temp1666, _temp1664, _temp1662); goto _LL1555; _LL1577: t= Cyc_Tcexp_tcSeqExp(
! te, loc, topt, _temp1670, _temp1668); goto _LL1555; _LL1579: t= Cyc_Tcexp_tcFnCall(
! te, loc, topt, _temp1677, _temp1675, _temp1674); goto _LL1555; _LL1581: t= Cyc_Tcexp_tcThrow(
! te, loc, topt, _temp1679); goto _LL1555; _LL1583: t= Cyc_Tcexp_tcInstantiate( te,
! loc, topt, _temp1683, _temp1681); goto _LL1555; _LL1585: t= Cyc_Tcexp_tcCast( te,
! loc, topt, _temp1687, _temp1685); goto _LL1555; _LL1587: t= Cyc_Tcexp_tcAddress(
! te, loc, topt, _temp1689); goto _LL1555; _LL1589: t= Cyc_Tcexp_tcNew( te, loc,
! topt, _temp1693, e, _temp1691); goto _LL1555; _LL1591: { void* _temp1777= Cyc_Tcexp_tcExpNoPromote(
! te, 0, _temp1695); t= Cyc_Tcexp_tcSizeof( te, loc, topt, _temp1777); goto
! _LL1555;} _LL1593: t= Cyc_Tcexp_tcSizeof( te, loc, topt, _temp1697); goto
! _LL1555; _LL1595: t= Cyc_Tcexp_tcOffsetof( te, loc, topt, _temp1701, _temp1699);
! goto _LL1555; _LL1597:({ void* _temp1778[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("gen() not in top-level initializer",
! sizeof( unsigned char), 35u), _tag_arr( _temp1778, sizeof( void*), 0u));});
! return; _LL1599: t= Cyc_Tcexp_tcDeref( te, loc, topt, _temp1705); goto _LL1555;
! _LL1601: t= Cyc_Tcexp_tcStructMember( te, loc, topt, e, _temp1709, _temp1707);
! goto _LL1555; _LL1603: t= Cyc_Tcexp_tcStructArrow( te, loc, topt, _temp1713,
! _temp1711); goto _LL1555; _LL1605: t= Cyc_Tcexp_tcSubscript( te, loc, topt,
! _temp1717, _temp1715); goto _LL1555; _LL1607: t= Cyc_Tcexp_tcTuple( te, loc,
! topt, _temp1719); goto _LL1555; _LL1609: t= Cyc_Tcexp_tcCompoundLit( te, loc,
! topt, _temp1723, _temp1721); goto _LL1555; _LL1611: { void** elt_topt= 0; if(
! topt !=  0){ void* _temp1779= Cyc_Tcutil_compress(*(( void**) _check_null( topt)));
! void* _temp1785; void** _temp1787; _LL1781: if(( unsigned int) _temp1779 >  4u?*((
! int*) _temp1779) ==  Cyc_Absyn_ArrayType: 0){ _LL1786: _temp1785=( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp1779)->f1; _temp1787=( void**)&(( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp1779)->f1); goto _LL1782;} else{ goto
! _LL1783;} _LL1783: goto _LL1784; _LL1782: elt_topt=( void**) _temp1787; goto
! _LL1780; _LL1784: goto _LL1780; _LL1780:;} t= Cyc_Tcexp_tcArray( te, loc,
! elt_topt, _temp1725); goto _LL1555;} _LL1613: t= Cyc_Tcexp_tcStmtExp( te, loc,
! topt, _temp1727); goto _LL1555; _LL1615: t= Cyc_Tcexp_tcCodegen( te, loc, topt,
! _temp1729); goto _LL1555; _LL1617: t= Cyc_Tcexp_tcFill( te, loc, topt, _temp1731);
! goto _LL1555; _LL1619: t= Cyc_Tcexp_tcComprehension( te, loc, topt, _temp1737,
! _temp1735, _temp1733); goto _LL1555; _LL1621: t= Cyc_Tcexp_tcStruct( te, loc,
! topt, _temp1749, _temp1746, _temp1742, _temp1741); goto _LL1555; _LL1623: t= Cyc_Tcexp_tcAnonStruct(
! te, loc, _temp1752, _temp1750); goto _LL1555; _LL1625: t= Cyc_Tcexp_tcTunion( te,
! loc, topt, e, _temp1765, _temp1762, _temp1758, _temp1756, _temp1754); goto
! _LL1555; _LL1627:* _temp1772=(( struct Cyc_Absyn_Enumfield*) _check_null(
! _temp1766))->name; t=( void*)({ struct Cyc_Absyn_EnumType_struct* _temp1788=(
  struct Cyc_Absyn_EnumType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_EnumType_struct));
! _temp1788[ 0]=({ struct Cyc_Absyn_EnumType_struct _temp1789; _temp1789.tag= Cyc_Absyn_EnumType;
! _temp1789.f1=(( struct Cyc_Absyn_Enumdecl*) _check_null( _temp1768))->name;
! _temp1789.f2= _temp1768; _temp1789;}); _temp1788;}); goto _LL1555; _LL1629: t=
! Cyc_Tcexp_tcMalloc( te, loc, topt, _temp1775, _temp1773); goto _LL1555; _LL1555:;}
! e->topt=({ struct Cyc_Core_Opt* _temp1790=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp1790->v=( void*) t; _temp1790;});}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tcgenrep.c powerpc-apple-rhapsody/src/tcgenrep.c
*** i686-unknown-linux/src/tcgenrep.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/tcgenrep.c	Wed Oct 10 15:39:34 2001
***************
*** 234,280 ****
  extern struct Cyc_List_List* Cyc_List_map( void*(* f)( void*), struct Cyc_List_List*
  x); extern struct Cyc_List_List* Cyc_List_map_c( void*(* f)( void*, void*), void*
  env, struct Cyc_List_List* x); extern unsigned char Cyc_List_List_mismatch[ 18u];
! extern void* Cyc_List_fold_left( void*(* f)( void*, void*), void* accum, struct
! Cyc_List_List* x); extern void* Cyc_List_fold_right_c( void*(* f)( void*, void*,
! void*), void*, struct Cyc_List_List* x, void* accum); extern struct Cyc_List_List*
  Cyc_List_imp_append( struct Cyc_List_List* x, struct Cyc_List_List* y); extern
  struct Cyc_List_List* Cyc_List_flatten( struct Cyc_List_List* x); extern
! unsigned char Cyc_List_Nth[ 8u]; extern int Cyc_List_forall( int(* pred)( void*),
! struct Cyc_List_List* x); extern struct Cyc_List_List* Cyc_List_zip( struct Cyc_List_List*
! x, struct Cyc_List_List* y); extern struct Cyc_List_List* Cyc_List_tabulate( int
! n, void*(* f)( int)); extern struct Cyc_List_List* Cyc_List_filter( int(* f)(
! void*), struct Cyc_List_List* x); struct Cyc_Dict_Dict; extern unsigned char Cyc_Dict_Present[
! 12u]; extern unsigned char Cyc_Dict_Absent[ 11u]; extern struct Cyc_Dict_Dict*
! Cyc_Dict_empty( int(* cmp)( void*, void*)); extern struct Cyc_Dict_Dict* Cyc_Dict_insert(
! struct Cyc_Dict_Dict* d, void* k, void* v); extern void* Cyc_Dict_lookup( struct
! Cyc_Dict_Dict* d, void* k); extern struct Cyc_Core_Opt* Cyc_Dict_lookup_opt(
! struct Cyc_Dict_Dict* d, void* k); extern void Cyc_Dict_iter( void(* f)( void*,
! void*), struct Cyc_Dict_Dict* d); extern int Cyc_Std_strcmp( struct _tagged_arr
! s1, struct _tagged_arr s2); struct Cyc_Hashtable_Table; extern struct Cyc_Hashtable_Table*
! Cyc_Hashtable_create( int sz, int(* cmp)( void*, void*), int(* hash)( void*));
! extern void Cyc_Hashtable_insert( struct Cyc_Hashtable_Table* t, void* key, void*
! val); extern void* Cyc_Hashtable_lookup( struct Cyc_Hashtable_Table* t, void*
! key); struct Cyc_Lineno_Pos{ struct _tagged_arr logical_file; struct _tagged_arr
! line; int line_no; int col; } ; extern unsigned char Cyc_Position_Exit[ 9u];
! struct Cyc_Position_Segment; extern struct Cyc_Position_Segment* Cyc_Position_segment_of_abs(
! int, int); static const int Cyc_Position_Lex= 0; static const int Cyc_Position_Parse=
! 1; static const int Cyc_Position_Elab= 2; struct Cyc_Position_Error{ struct
! _tagged_arr source; struct Cyc_Position_Segment* seg; void* kind; struct
! _tagged_arr desc; } ; extern unsigned char Cyc_Position_Nocontext[ 14u]; static
! const int Cyc_Typerep_Var= 0; struct Cyc_Typerep_Var_struct{ int tag; struct
! _tagged_arr* f1; } ; static const int Cyc_Typerep_Int= 1; struct Cyc_Typerep_Int_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Typerep_Float= 0; static
! const int Cyc_Typerep_Double= 1; static const int Cyc_Typerep_ThinPtr= 2; struct
! Cyc_Typerep_ThinPtr_struct{ int tag; unsigned int f1; void* f2; } ; static const
! int Cyc_Typerep_FatPtr= 3; struct Cyc_Typerep_FatPtr_struct{ int tag; void* f1;
! } ; static const int Cyc_Typerep_Tuple= 4; struct _tuple0{ unsigned int f1; void*
! f2; } ; struct Cyc_Typerep_Tuple_struct{ int tag; unsigned int f1; struct
! _tagged_arr f2; } ; static const int Cyc_Typerep_TUnion= 5; struct Cyc_Typerep_TUnion_struct{
! int tag; struct _tagged_arr f1; } ; static const int Cyc_Typerep_Union= 6;
! struct Cyc_Typerep_Union_struct{ int tag; struct _tagged_arr f1; } ; static
! const int Cyc_Typerep_Forall= 7; struct Cyc_Typerep_Forall_struct{ int tag;
! struct _tagged_arr f1; void** f2; } ; static const int Cyc_Typerep_App= 8;
! struct Cyc_Typerep_App_struct{ int tag; void* f1; struct _tagged_arr f2; } ;
  struct _tuple1{ void* f1; struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar;
  struct Cyc_Absyn_Tqual; struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo;
  struct Cyc_Absyn_VarargInfo; struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo;
--- 234,278 ----
  extern struct Cyc_List_List* Cyc_List_map( void*(* f)( void*), struct Cyc_List_List*
  x); extern struct Cyc_List_List* Cyc_List_map_c( void*(* f)( void*, void*), void*
  env, struct Cyc_List_List* x); extern unsigned char Cyc_List_List_mismatch[ 18u];
! extern void* Cyc_List_fold_left_c( void*(* f)( void*, void*, void*), void*, void*
! accum, struct Cyc_List_List* x); extern void* Cyc_List_fold_right_c( void*(* f)(
! void*, void*, void*), void*, struct Cyc_List_List* x, void* accum); extern
! struct Cyc_List_List* Cyc_List_rev( struct Cyc_List_List* x); extern struct Cyc_List_List*
  Cyc_List_imp_append( struct Cyc_List_List* x, struct Cyc_List_List* y); extern
  struct Cyc_List_List* Cyc_List_flatten( struct Cyc_List_List* x); extern
! unsigned char Cyc_List_Nth[ 8u]; extern struct Cyc_List_List* Cyc_List_zip(
! struct Cyc_List_List* x, struct Cyc_List_List* y); extern struct Cyc_List_List*
! Cyc_List_tabulate( int n, void*(* f)( int)); struct Cyc_Dict_Dict; extern
! unsigned char Cyc_Dict_Present[ 12u]; extern unsigned char Cyc_Dict_Absent[ 11u];
! extern struct Cyc_Dict_Dict* Cyc_Dict_empty( int(* cmp)( void*, void*)); extern
! struct Cyc_Dict_Dict* Cyc_Dict_insert( struct Cyc_Dict_Dict* d, void* k, void* v);
! extern void* Cyc_Dict_lookup( struct Cyc_Dict_Dict* d, void* k); extern struct
! Cyc_Core_Opt* Cyc_Dict_lookup_opt( struct Cyc_Dict_Dict* d, void* k); extern
! void Cyc_Dict_iter( void(* f)( void*, void*), struct Cyc_Dict_Dict* d); extern
! int Cyc_Std_strcmp( struct _tagged_arr s1, struct _tagged_arr s2); struct Cyc_Hashtable_Table;
! extern struct Cyc_Hashtable_Table* Cyc_Hashtable_create( int sz, int(* cmp)(
! void*, void*), int(* hash)( void*)); extern void Cyc_Hashtable_insert( struct
! Cyc_Hashtable_Table* t, void* key, void* val); extern void* Cyc_Hashtable_lookup(
! struct Cyc_Hashtable_Table* t, void* key); struct Cyc_Lineno_Pos{ struct
! _tagged_arr logical_file; struct _tagged_arr line; int line_no; int col; } ;
! extern unsigned char Cyc_Position_Exit[ 9u]; struct Cyc_Position_Segment; static
! const int Cyc_Position_Lex= 0; static const int Cyc_Position_Parse= 1; static
! const int Cyc_Position_Elab= 2; struct Cyc_Position_Error{ struct _tagged_arr
! source; struct Cyc_Position_Segment* seg; void* kind; struct _tagged_arr desc; }
! ; extern unsigned char Cyc_Position_Nocontext[ 14u]; static const int Cyc_Typerep_Var=
! 0; struct Cyc_Typerep_Var_struct{ int tag; struct _tagged_arr* f1; } ; static
! const int Cyc_Typerep_Int= 1; struct Cyc_Typerep_Int_struct{ int tag;
! unsigned int f1; } ; static const int Cyc_Typerep_Float= 0; static const int Cyc_Typerep_Double=
! 1; static const int Cyc_Typerep_ThinPtr= 2; struct Cyc_Typerep_ThinPtr_struct{
! int tag; unsigned int f1; void* f2; } ; static const int Cyc_Typerep_FatPtr= 3;
! struct Cyc_Typerep_FatPtr_struct{ int tag; void* f1; } ; static const int Cyc_Typerep_Tuple=
! 4; struct _tuple0{ unsigned int f1; void* f2; } ; struct Cyc_Typerep_Tuple_struct{
! int tag; unsigned int f1; struct _tagged_arr f2; } ; static const int Cyc_Typerep_TUnion=
! 5; struct Cyc_Typerep_TUnion_struct{ int tag; struct _tagged_arr f1; } ; static
! const int Cyc_Typerep_Union= 6; struct Cyc_Typerep_Union_struct{ int tag; struct
! _tagged_arr f1; } ; static const int Cyc_Typerep_Forall= 7; struct Cyc_Typerep_Forall_struct{
! int tag; struct _tagged_arr f1; void** f2; } ; static const int Cyc_Typerep_App=
! 8; struct Cyc_Typerep_App_struct{ int tag; void* f1; struct _tagged_arr f2; } ;
  struct _tuple1{ void* f1; struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar;
  struct Cyc_Absyn_Tqual; struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo;
  struct Cyc_Absyn_VarargInfo; struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo;
***************
*** 312,318 ****
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 310,316 ----
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 403,465 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple1* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple1* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple2{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple2* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 401,460 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple1* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple1* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple2{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple2* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple1* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 582,599 ****
  Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_FieldName= 1; struct Cyc_Absyn_FieldName_struct{
  int tag; struct _tagged_arr* f1; } ; extern unsigned char Cyc_Absyn_EmptyAnnot[
  15u]; extern int Cyc_Absyn_qvar_cmp( struct _tuple1*, struct _tuple1*); extern
! void* Cyc_Absyn_conref_val( struct Cyc_Absyn_Conref* x); extern void* Cyc_Absyn_uchar_t;
! extern void* Cyc_Absyn_uint_t; extern void* Cyc_Absyn_at_typ( void* t, void* rgn,
! struct Cyc_Absyn_Tqual tq); extern struct Cyc_Absyn_Exp* Cyc_Absyn_const_exp(
! void*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_null_exp(
! struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_unknownid_exp(
! struct _tuple1*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_unknowncall_exp(
! struct Cyc_Absyn_Exp*, struct Cyc_List_List*, struct Cyc_Position_Segment*);
! extern struct Cyc_Absyn_Exp* Cyc_Absyn_cast_exp( void*, struct Cyc_Absyn_Exp*,
! struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_address_exp(
! struct Cyc_Absyn_Exp*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
! Cyc_Absyn_sizeoftyp_exp( void* t, struct Cyc_Position_Segment*); extern struct
! Cyc_Absyn_Exp* Cyc_Absyn_offsetof_exp( void*, void*, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_tuple_exp( struct Cyc_List_List*, struct
  Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_unresolvedmem_exp(
  struct Cyc_Core_Opt*, struct Cyc_List_List*, struct Cyc_Position_Segment*);
--- 577,594 ----
  Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_FieldName= 1; struct Cyc_Absyn_FieldName_struct{
  int tag; struct _tagged_arr* f1; } ; extern unsigned char Cyc_Absyn_EmptyAnnot[
  15u]; extern int Cyc_Absyn_qvar_cmp( struct _tuple1*, struct _tuple1*); extern
! void* Cyc_Absyn_conref_val( struct Cyc_Absyn_Conref* x); extern void* Cyc_Absyn_uint_t;
! extern void* Cyc_Absyn_at_typ( void* t, void* rgn, struct Cyc_Absyn_Tqual tq);
! extern struct Cyc_Absyn_Exp* Cyc_Absyn_const_exp( void*, struct Cyc_Position_Segment*);
! extern struct Cyc_Absyn_Exp* Cyc_Absyn_null_exp( struct Cyc_Position_Segment*);
! extern struct Cyc_Absyn_Exp* Cyc_Absyn_unknownid_exp( struct _tuple1*, struct
! Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_add_exp( struct
! Cyc_Absyn_Exp*, struct Cyc_Absyn_Exp*, struct Cyc_Position_Segment*); extern
! struct Cyc_Absyn_Exp* Cyc_Absyn_unknowncall_exp( struct Cyc_Absyn_Exp*, struct
! Cyc_List_List*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_cast_exp(
! void*, struct Cyc_Absyn_Exp*, struct Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp*
! Cyc_Absyn_address_exp( struct Cyc_Absyn_Exp*, struct Cyc_Position_Segment*);
! extern struct Cyc_Absyn_Exp* Cyc_Absyn_sizeoftyp_exp( void* t, struct Cyc_Position_Segment*);
  extern struct Cyc_Absyn_Exp* Cyc_Absyn_tuple_exp( struct Cyc_List_List*, struct
  Cyc_Position_Segment*); extern struct Cyc_Absyn_Exp* Cyc_Absyn_unresolvedmem_exp(
  struct Cyc_Core_Opt*, struct Cyc_List_List*, struct Cyc_Position_Segment*);
***************
*** 650,658 ****
  struct Cyc_Tcenv_Tenv*, struct Cyc_Position_Segment*, struct _tuple1*); extern
  unsigned char Cyc_Tcutil_TypeErr[ 12u]; extern void* Cyc_Tcutil_impos( struct
  _tagged_arr fmt, struct _tagged_arr ap); extern void Cyc_Tcutil_terr( struct Cyc_Position_Segment*,
! struct _tagged_arr fmt, struct _tagged_arr ap); extern void* Cyc_Tcutil_compress(
! void* t); extern void* Cyc_Tcutil_substitute( struct Cyc_List_List*, void*);
! extern void Cyc_Tcutil_check_valid_toplevel_type( struct Cyc_Position_Segment*,
  struct Cyc_Tcenv_Tenv*, void*); struct Cyc_Tcgenrep_RepInfo{ struct Cyc_List_List*
  decls; struct Cyc_Absyn_Exp* exp; struct Cyc_List_List* dependencies; struct Cyc_Core_Opt*
  fwd_decl; int emitted; } ; static int Cyc_Tcgenrep_typecmp( void* t1, void* t2){
--- 645,652 ----
  struct Cyc_Tcenv_Tenv*, struct Cyc_Position_Segment*, struct _tuple1*); extern
  unsigned char Cyc_Tcutil_TypeErr[ 12u]; extern void* Cyc_Tcutil_impos( struct
  _tagged_arr fmt, struct _tagged_arr ap); extern void Cyc_Tcutil_terr( struct Cyc_Position_Segment*,
! struct _tagged_arr fmt, struct _tagged_arr ap); extern void* Cyc_Tcutil_typ_kind(
! void* t); extern void Cyc_Tcutil_check_valid_toplevel_type( struct Cyc_Position_Segment*,
  struct Cyc_Tcenv_Tenv*, void*); struct Cyc_Tcgenrep_RepInfo{ struct Cyc_List_List*
  decls; struct Cyc_Absyn_Exp* exp; struct Cyc_List_List* dependencies; struct Cyc_Core_Opt*
  fwd_decl; int emitted; } ; static int Cyc_Tcgenrep_typecmp( void* t1, void* t2){
***************
*** 661,1633 ****
  t1str, t2str);}} struct Cyc_Dict_Dict* Cyc_Tcgenrep_empty_typerep_dict(){ return((
  struct Cyc_Dict_Dict*(*)( int(* cmp)( void*, void*))) Cyc_Dict_empty)( Cyc_Tcgenrep_typecmp);}
  void Cyc_Tcgenrep_print_dict_entry( void* type, struct Cyc_Tcgenrep_RepInfo*
! info){({ struct Cyc_Std_Int_pa_struct _temp3; _temp3.tag= Cyc_Std_Int_pa; _temp3.f1=(
! int)(( unsigned int) info->emitted);{ struct Cyc_Std_Int_pa_struct _temp2;
! _temp2.tag= Cyc_Std_Int_pa; _temp2.f1=( unsigned int) info;{ struct Cyc_Std_String_pa_struct
! _temp1; _temp1.tag= Cyc_Std_String_pa; _temp1.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! type);{ void* _temp0[ 3u]={& _temp1,& _temp2,& _temp3}; Cyc_Std_printf( _tag_arr("(%s,%x:%d,",
! sizeof( unsigned char), 11u), _tag_arr( _temp0, sizeof( void*), 3u));}}}});{
! struct Cyc_List_List* p= info->dependencies; for( 0; p !=  0; p=(( struct Cyc_List_List*)
! _check_null( p))->tl){({ struct Cyc_Std_Int_pa_struct _temp5; _temp5.tag= Cyc_Std_Int_pa;
! _temp5.f1=( unsigned int)(( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_List_List*)
! _check_null( p))->hd);{ void* _temp4[ 1u]={& _temp5}; Cyc_Std_printf( _tag_arr("%x",
! sizeof( unsigned char), 3u), _tag_arr( _temp4, sizeof( void*), 1u));}}); if(((
! struct Cyc_List_List*) _check_null( p))->tl !=  0){({ void* _temp6[ 0u]={}; Cyc_Std_printf(
! _tag_arr(",", sizeof( unsigned char), 2u), _tag_arr( _temp6, sizeof( void*), 0u));});}}}({
! void* _temp7[ 0u]={}; Cyc_Std_printf( _tag_arr(")\n", sizeof( unsigned char), 3u),
! _tag_arr( _temp7, sizeof( void*), 0u));});} void Cyc_Tcgenrep_print_typerep_dict(
! struct Cyc_Dict_Dict* dict){(( void(*)( void(* f)( void*, struct Cyc_Tcgenrep_RepInfo*),
! struct Cyc_Dict_Dict* d)) Cyc_Dict_iter)( Cyc_Tcgenrep_print_dict_entry, dict);}
! static int Cyc_Tcgenrep_rephash( struct Cyc_Tcgenrep_RepInfo* ri){ return( int)
! ri;} static int Cyc_Tcgenrep_repcmp( struct Cyc_Tcgenrep_RepInfo* r1, struct Cyc_Tcgenrep_RepInfo*
! r2){ unsigned int r1p; unsigned int r2p; r1p=( unsigned int) r1; r2p=(
! unsigned int) r2; if( r1 <  r2){ return - 1;} else{ if( r1 ==  r2){ return 0;}
! else{ return 1;}}} static struct Cyc_Absyn_Tunionfield* Cyc_Tcgenrep_getField(
! struct Cyc_Absyn_Tuniondecl* td, struct _tuple1* fieldname){ if( td->fields == 
! 0){({ void* _temp8[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr
! ap)) Cyc_Tcutil_impos)( _tag_arr("Could not find field in tuniondecl", sizeof(
! unsigned char), 35u), _tag_arr( _temp8, sizeof( void*), 0u));});} else{ struct
! Cyc_List_List* l=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null(
! td->fields))->v; for( 0; l !=  0; l=(( struct Cyc_List_List*) _check_null( l))->tl){
! if( ! Cyc_Absyn_qvar_cmp((( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( l))->hd)->name, fieldname)){ return( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( l))->hd;}}}({ void* _temp9[ 0u]={};(( int(*)(
! struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("Could not find field in tuniondecl",
! sizeof( unsigned char), 35u), _tag_arr( _temp9, sizeof( void*), 0u));});( int)
! _throw(( void*) Cyc_Tcutil_TypeErr);} static unsigned char _temp10[ 9u]="Tcgenrep";
! static struct _tagged_arr Cyc_Tcgenrep_tcgenrep_nm={ _temp10, _temp10, _temp10 + 
! 9u}; static struct Cyc_List_List Cyc_Tcgenrep_l={( void*)& Cyc_Tcgenrep_tcgenrep_nm,
  0}; static struct Cyc_Absyn_Abs_n_struct Cyc_Tcgenrep_tcgenrep_nmspace={ 1u,(
  struct Cyc_List_List*)& Cyc_Tcgenrep_l}; static void* Cyc_Tcgenrep_tcgenrep_nmspace2=(
! void*)& Cyc_Tcgenrep_tcgenrep_nmspace; static unsigned char _temp12[ 8u]="Typerep";
! static struct _tagged_arr Cyc_Tcgenrep_typerep_nm={ _temp12, _temp12, _temp12 + 
! 8u}; static struct Cyc_List_List Cyc_Tcgenrep_l2={( void*)& Cyc_Tcgenrep_typerep_nm,
  0}; static struct Cyc_Absyn_Abs_n_struct Cyc_Tcgenrep_typerep_nmspace={ 1u,(
  struct Cyc_List_List*)& Cyc_Tcgenrep_l2}; static struct Cyc_List_List* Cyc_Tcgenrep_dfsvisit(
  struct Cyc_Tcgenrep_RepInfo* ri, struct Cyc_Hashtable_Table* visited){ struct
! _handler_cons _temp14; _push_handler(& _temp14);{ int _temp16= 0; if( setjmp(
! _temp14.handler)){ _temp16= 1;} if( ! _temp16){(( int(*)( struct Cyc_Hashtable_Table*
  t, struct Cyc_Tcgenrep_RepInfo* key)) Cyc_Hashtable_lookup)( visited, ri);{
! struct Cyc_List_List* _temp17= 0; _npop_handler( 0u); return _temp17;};
! _pop_handler();} else{ void* _temp15=( void*) _exn_thrown; void* _temp19=
! _temp15; _LL21: if( _temp19 ==  Cyc_Core_Not_found){ goto _LL22;} else{ goto
! _LL23;} _LL23: goto _LL24; _LL22:(( void(*)( struct Cyc_Hashtable_Table* t,
  struct Cyc_Tcgenrep_RepInfo* key, int val)) Cyc_Hashtable_insert)( visited, ri,
  1);{ struct Cyc_List_List* ds= 0;{ struct Cyc_List_List* l= ri->dependencies;
  for( 0; l !=  0; l=(( struct Cyc_List_List*) _check_null( l))->tl){ ds=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
  ds, Cyc_Tcgenrep_dfsvisit(( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_List_List*)
  _check_null( l))->hd, visited));}} if( ri->emitted ==  0){ if( ri->fwd_decl != 
! 0){ ds=({ struct Cyc_List_List* _temp25=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp25->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp26[ 1u]; _temp26[ 0u]=( struct Cyc_Absyn_Decl*)(( struct Cyc_Core_Opt*)
  _check_null( ri->fwd_decl))->v;(( struct Cyc_List_List*(*)( struct _tagged_arr))
! Cyc_List_list)( _tag_arr( _temp26, sizeof( struct Cyc_Absyn_Decl*), 1u));});
! _temp25->tl= ds; _temp25;});}{ struct Cyc_List_List* _temp27=({ struct Cyc_List_List*
! _temp28=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp28->hd=( void*) ri->decls; _temp28->tl= 0; _temp28;}); ri->emitted= 1;
  return(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_imp_append)( ds, _temp27);}} else{ return ds;}} _LL24:( void)
! _throw( _temp19); _LL20:;}}} static struct Cyc_List_List* Cyc_Tcgenrep_dfs(
  struct Cyc_Tcgenrep_RepInfo* ri){ struct Cyc_Hashtable_Table* tab=(( struct Cyc_Hashtable_Table*(*)(
  int sz, int(* cmp)( struct Cyc_Tcgenrep_RepInfo*, struct Cyc_Tcgenrep_RepInfo*),
  int(* hash)( struct Cyc_Tcgenrep_RepInfo*))) Cyc_Hashtable_create)( 53, Cyc_Tcgenrep_repcmp,
  Cyc_Tcgenrep_rephash); struct Cyc_List_List* ds= Cyc_Tcgenrep_dfsvisit( ri, tab);
  return(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_flatten)(
! ds);} static unsigned char _temp29[ 11u]="Typestruct"; static struct _tagged_arr
! Cyc_Tcgenrep_typestruct_str={ _temp29, _temp29, _temp29 +  11u}; static
! unsigned char _temp30[ 4u]="Var"; static struct _tagged_arr Cyc_Tcgenrep_var_str={
! _temp30, _temp30, _temp30 +  4u}; static unsigned char _temp31[ 4u]="Int";
! static struct _tagged_arr Cyc_Tcgenrep_int_str={ _temp31, _temp31, _temp31 +  4u};
! static unsigned char _temp32[ 6u]="Float"; static struct _tagged_arr Cyc_Tcgenrep_float_str={
! _temp32, _temp32, _temp32 +  6u}; static unsigned char _temp33[ 7u]="Double";
! static struct _tagged_arr Cyc_Tcgenrep_double_str={ _temp33, _temp33, _temp33 + 
! 7u}; static unsigned char _temp34[ 8u]="ThinPtr"; static struct _tagged_arr Cyc_Tcgenrep_thinptr_str={
! _temp34, _temp34, _temp34 +  8u}; static unsigned char _temp35[ 7u]="FatPtr";
! static struct _tagged_arr Cyc_Tcgenrep_fatptr_str={ _temp35, _temp35, _temp35 + 
! 7u}; static unsigned char _temp36[ 6u]="Tuple"; static struct _tagged_arr Cyc_Tcgenrep_tuple_str={
! _temp36, _temp36, _temp36 +  6u}; static unsigned char _temp37[ 7u]="TUnion";
! static struct _tagged_arr Cyc_Tcgenrep_tunion_str={ _temp37, _temp37, _temp37 + 
! 7u}; static unsigned char _temp38[ 6u]="Union"; static struct _tagged_arr Cyc_Tcgenrep_union_str={
! _temp38, _temp38, _temp38 +  6u}; static struct _tuple1 Cyc_Tcgenrep_typestruct_name={(
  void*)& Cyc_Tcgenrep_typerep_nmspace,& Cyc_Tcgenrep_typestruct_str}; static
  struct Cyc_Absyn_Tuniondecl** Cyc_Tcgenrep_typestruct_decl= 0; static int Cyc_Tcgenrep_gen_id_counter=
  0; static struct _tagged_arr* Cyc_Tcgenrep_new_gen_id( struct _tagged_arr name){
! return({ struct _tagged_arr* _temp39=( struct _tagged_arr*) _cycalloc( sizeof(
! struct _tagged_arr)); _temp39[ 0]=( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp42; _temp42.tag= Cyc_Std_Int_pa; _temp42.f1=( int)(( unsigned int) Cyc_Tcgenrep_gen_id_counter
! ++);{ struct Cyc_Std_String_pa_struct _temp41; _temp41.tag= Cyc_Std_String_pa;
! _temp41.f1=( struct _tagged_arr) name;{ void* _temp40[ 2u]={& _temp41,& _temp42};
  Cyc_Std_aprintf( _tag_arr("_gen%s_%d", sizeof( unsigned char), 10u), _tag_arr(
! _temp40, sizeof( void*), 2u));}}}); _temp39;});} static void Cyc_Tcgenrep_print_params(
! struct Cyc_List_List* l){({ void* _temp43[ 0u]={}; Cyc_Std_printf( _tag_arr("<",
! sizeof( unsigned char), 2u), _tag_arr( _temp43, sizeof( void*), 0u));});{ struct
  Cyc_List_List* p= l; for( 0; p !=  0; p=(( struct Cyc_List_List*) _check_null( p))->tl){({
! struct Cyc_Std_Int_pa_struct _temp46; _temp46.tag= Cyc_Std_Int_pa; _temp46.f1=(
  int)(( unsigned int)(( int)((( struct Cyc_List_List*) _check_null( p))->tl !=  0?',':' ')));{
! struct Cyc_Std_String_pa_struct _temp45; _temp45.tag= Cyc_Std_String_pa; _temp45.f1=(
  struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_List_List*)
! _check_null( p))->hd);{ void* _temp44[ 2u]={& _temp45,& _temp46}; Cyc_Std_printf(
! _tag_arr("%s%c", sizeof( unsigned char), 5u), _tag_arr( _temp44, sizeof( void*),
! 2u));}}});}}({ void* _temp47[ 0u]={}; Cyc_Std_printf( _tag_arr(">\n", sizeof(
! unsigned char), 3u), _tag_arr( _temp47, sizeof( void*), 0u));});} static void
! Cyc_Tcgenrep_print_tvars( struct Cyc_List_List* l){({ void* _temp48[ 0u]={}; Cyc_Std_printf(
! _tag_arr("<", sizeof( unsigned char), 2u), _tag_arr( _temp48, sizeof( void*), 0u));});{
  struct Cyc_List_List* p= l; for( 0; p !=  0; p=(( struct Cyc_List_List*)
! _check_null( p))->tl){({ struct Cyc_Std_Int_pa_struct _temp51; _temp51.tag= Cyc_Std_Int_pa;
! _temp51.f1=( int)(( unsigned int)(( int)((( struct Cyc_List_List*) _check_null(
! p))->tl !=  0?',':' ')));{ struct Cyc_Std_String_pa_struct _temp50; _temp50.tag=
! Cyc_Std_String_pa; _temp50.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( p))->hd)->name;{ void* _temp49[ 2u]={&
! _temp50,& _temp51}; Cyc_Std_printf( _tag_arr("%s%c", sizeof( unsigned char), 5u),
! _tag_arr( _temp49, sizeof( void*), 2u));}}});}}({ void* _temp52[ 0u]={}; Cyc_Std_printf(
! _tag_arr(">\n", sizeof( unsigned char), 3u), _tag_arr( _temp52, sizeof( void*),
  0u));});} static struct Cyc_Absyn_Rel_n_struct Cyc_Tcgenrep_top_nm_0={ 0u, 0};
  static void* Cyc_Tcgenrep_top_nm=( void*)& Cyc_Tcgenrep_top_nm_0; static struct
  _tuple1* Cyc_Tcgenrep_toplevel_name( struct _tagged_arr* name){ return({ struct
! _tuple1* _temp54=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp54->f1=
! Cyc_Tcgenrep_top_nm; _temp54->f2=( struct _tagged_arr*) name; _temp54;});}
  static struct _tuple1* Cyc_Tcgenrep_relative_name( struct Cyc_List_List* pathl,
  struct _tagged_arr* name){ struct Cyc_Absyn_Rel_n_struct* path=({ struct Cyc_Absyn_Rel_n_struct*
! _temp56=( struct Cyc_Absyn_Rel_n_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Rel_n_struct));
! _temp56[ 0]=({ struct Cyc_Absyn_Rel_n_struct _temp57; _temp57.tag= Cyc_Absyn_Rel_n;
! _temp57.f1= pathl; _temp57;}); _temp56;}); return({ struct _tuple1* _temp55=(
! struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp55->f1=( void*) path;
! _temp55->f2=( struct _tagged_arr*) name; _temp55;});} static struct Cyc_Absyn_Decl*
  Cyc_Tcgenrep_gen_decl( struct _tagged_arr* name, void* type, struct Cyc_Absyn_Exp*
  init, struct Cyc_Position_Segment* seg){ struct _tuple1* qvar= Cyc_Tcgenrep_toplevel_name(
  name); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_new_vardecl( qvar, type, init);(
  void*)( vd->sc=( void*)(( void*) Cyc_Absyn_Static));{ struct Cyc_Absyn_Var_d_struct*
! r1=({ struct Cyc_Absyn_Var_d_struct* _temp58=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp58[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp59; _temp59.tag= Cyc_Absyn_Var_d; _temp59.f1= vd; _temp59;}); _temp58;});
  void* r2=( void*) r1; return Cyc_Absyn_new_decl( r2, seg);}} static struct Cyc_Absyn_Decl*
  Cyc_Tcgenrep_gen_vardecl_sc( struct _tagged_arr* name, void* type, struct Cyc_Absyn_Exp*
  init, void* sc, struct Cyc_Position_Segment* seg){ struct _tuple1* qvar= Cyc_Tcgenrep_toplevel_name(
  name); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_new_vardecl( qvar, type, init);(
  void*)( vd->sc=( void*) sc);{ struct Cyc_Absyn_Var_d_struct* r1=({ struct Cyc_Absyn_Var_d_struct*
! _temp60=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp60[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp61; _temp61.tag= Cyc_Absyn_Var_d;
! _temp61.f1= vd; _temp61;}); _temp60;}); void* r2=( void*) r1; return Cyc_Absyn_new_decl(
  r2, seg);}} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_cnst_string( struct
  _tagged_arr s, struct Cyc_Position_Segment* seg){ return Cyc_Absyn_const_exp((
! void*)({ struct Cyc_Absyn_String_c_struct* _temp62=( struct Cyc_Absyn_String_c_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_String_c_struct)); _temp62[ 0]=({ struct Cyc_Absyn_String_c_struct
! _temp63; _temp63.tag= Cyc_Absyn_String_c; _temp63.f1= s; _temp63;}); _temp62;}),
  seg);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_cnst_int( int i, struct Cyc_Position_Segment*
  seg){ return Cyc_Absyn_const_exp(( void*)({ struct Cyc_Absyn_Int_c_struct*
! _temp64=( struct Cyc_Absyn_Int_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct));
! _temp64[ 0]=({ struct Cyc_Absyn_Int_c_struct _temp65; _temp65.tag= Cyc_Absyn_Int_c;
! _temp65.f1=( void*)(( void*) Cyc_Absyn_Signed); _temp65.f2= i; _temp65;});
! _temp64;}), seg);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_cnst_int_cls(
  struct Cyc_Position_Segment* seg, int i){ return Cyc_Absyn_const_exp(( void*)({
! struct Cyc_Absyn_Int_c_struct* _temp66=( struct Cyc_Absyn_Int_c_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct)); _temp66[ 0]=({ struct Cyc_Absyn_Int_c_struct
! _temp67; _temp67.tag= Cyc_Absyn_Int_c; _temp67.f1=( void*)(( void*) Cyc_Absyn_Signed);
! _temp67.f2= i; _temp67;}); _temp66;}), seg);} static int Cyc_Tcgenrep_size_of2int(
! void* sz){ void* _temp68= sz; _LL70: if( _temp68 == ( void*) Cyc_Absyn_B1){ goto
! _LL71;} else{ goto _LL72;} _LL72: if( _temp68 == ( void*) Cyc_Absyn_B2){ goto
! _LL73;} else{ goto _LL74;} _LL74: if( _temp68 == ( void*) Cyc_Absyn_B4){ goto
! _LL75;} else{ goto _LL76;} _LL76: if( _temp68 == ( void*) Cyc_Absyn_B8){ goto
! _LL77;} else{ goto _LL69;} _LL71: return 8; _LL73: return 16; _LL75: return 32;
! _LL77: return 64; _LL69:;} static void* Cyc_Tcgenrep_array_typ( void* ty, struct
  Cyc_Absyn_Tqual tq, struct Cyc_Absyn_Exp* e){ return( void*)({ struct Cyc_Absyn_ArrayType_struct*
! _temp78=( struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp78[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp79; _temp79.tag= Cyc_Absyn_ArrayType;
! _temp79.f1=( void*) ty; _temp79.f2= tq; _temp79.f3= e; _temp79;}); _temp78;});}
  static void* Cyc_Tcgenrep_tunion_typ( struct _tagged_arr* name){ return( void*)({
! struct Cyc_Absyn_TunionType_struct* _temp80=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp80[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp81; _temp81.tag= Cyc_Absyn_TunionType; _temp81.f1=({
! struct Cyc_Absyn_TunionInfo _temp82; _temp82.tunion_info=( void*)(( void*)({
! struct Cyc_Absyn_UnknownTunion_struct* _temp83=( struct Cyc_Absyn_UnknownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownTunion_struct)); _temp83[ 0]=({
! struct Cyc_Absyn_UnknownTunion_struct _temp84; _temp84.tag= Cyc_Absyn_UnknownTunion;
! _temp84.f1=({ struct Cyc_Absyn_UnknownTunionInfo _temp85; _temp85.name= Cyc_Tcgenrep_toplevel_name(
! name); _temp85.is_xtunion= 0; _temp85;}); _temp84;}); _temp83;})); _temp82.targs=
! 0; _temp82.rgn=( void*)(( void*) Cyc_Absyn_HeapRgn); _temp82;}); _temp81;});
! _temp80;});} static void* Cyc_Tcgenrep_tunionfield_typ( struct _tagged_arr* name,
  struct _tagged_arr* fieldname){ return( void*)({ struct Cyc_Absyn_TunionFieldType_struct*
! _temp86=( struct Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_TunionFieldType_struct)); _temp86[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct
! _temp87; _temp87.tag= Cyc_Absyn_TunionFieldType; _temp87.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp88; _temp88.field_info=( void*)(( void*)({ struct Cyc_Absyn_UnknownTunionfield_struct*
! _temp89=( struct Cyc_Absyn_UnknownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownTunionfield_struct)); _temp89[ 0]=({ struct Cyc_Absyn_UnknownTunionfield_struct
! _temp90; _temp90.tag= Cyc_Absyn_UnknownTunionfield; _temp90.f1=({ struct Cyc_Absyn_UnknownTunionFieldInfo
! _temp91; _temp91.tunion_name= Cyc_Tcgenrep_toplevel_name( name); _temp91.field_name=
! Cyc_Tcgenrep_toplevel_name( fieldname); _temp91.is_xtunion= 0; _temp91;});
! _temp90;}); _temp89;})); _temp88.targs= 0; _temp88;}); _temp87;}); _temp86;});}
  static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_call_exp( struct _tuple1* name, struct
  Cyc_List_List* args, struct Cyc_Position_Segment* loc){ return Cyc_Absyn_unknowncall_exp(
  Cyc_Absyn_unknownid_exp( name, loc), args, loc);} static struct Cyc_Absyn_Decl*
  Cyc_Tcgenrep_tunion_constructor_decl( struct _tagged_arr* tunionname, struct
  _tagged_arr* fieldname, struct _tagged_arr* varname, struct Cyc_List_List* args,
! struct Cyc_Position_Segment* loc){ void* _temp92= Cyc_Tcgenrep_tunionfield_typ(
! tunionname, fieldname); struct Cyc_Absyn_Exp* _temp93= Cyc_Tcgenrep_call_exp(
  Cyc_Tcgenrep_toplevel_name( fieldname), args, loc); struct Cyc_Absyn_Decl*
! _temp94= Cyc_Tcgenrep_gen_decl( varname, _temp92,( struct Cyc_Absyn_Exp*)
! _temp93, loc); return _temp94;} struct _tuple4{ struct Cyc_Absyn_Tqual f1; void*
  f2; } ; static void* Cyc_Tcgenrep_get_second( struct _tuple4* pair){ return(*
  pair).f2;} struct _tuple5{ struct _tagged_arr* f1; struct Cyc_Absyn_Exp* f2; } ;
  static struct _tagged_arr* Cyc_Tcgenrep_get_first( struct _tuple5* pair){ return(*
! pair).f1;} static unsigned char _temp95[ 5u]="list"; static struct _tagged_arr
! Cyc_Tcgenrep_list_str={ _temp95, _temp95, _temp95 +  5u}; static unsigned char
! _temp96[ 5u]="List"; static struct _tagged_arr Cyc_Tcgenrep_List_str={ _temp96,
! _temp96, _temp96 +  5u}; struct _tuple6{ struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp*
  f2; } ; static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_tuple2_exp_cls( struct Cyc_Position_Segment*
! loc, struct _tuple6* es){ struct _tuple6 _temp99; struct Cyc_Absyn_Exp* _temp100;
! struct Cyc_Absyn_Exp* _temp102; struct _tuple6* _temp97= es; _temp99=* _temp97;
! _LL103: _temp102= _temp99.f1; goto _LL101; _LL101: _temp100= _temp99.f2; goto
! _LL98; _LL98: return Cyc_Absyn_tuple_exp(({ struct Cyc_Absyn_Exp* _temp104[ 2u];
! _temp104[ 1u]= _temp100; _temp104[ 0u]= _temp102;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp104, sizeof( struct Cyc_Absyn_Exp*),
! 2u));}), loc);} static unsigned char _temp105[ 5u]="NULL"; static struct
! _tagged_arr Cyc_Tcgenrep_null_str={ _temp105, _temp105, _temp105 +  5u}; static
  struct Cyc_Absyn_Exp* Cyc_Tcgenrep_list_exp( struct Cyc_List_List* l, struct Cyc_Position_Segment*
  loc){ if( l ==  0){ return Cyc_Absyn_null_exp( loc);} return Cyc_Tcgenrep_call_exp(
! Cyc_Tcgenrep_toplevel_name(& Cyc_Tcgenrep_list_str), l, loc);} struct _tuple7{
! void* f1; struct Cyc_Position_Segment* f2; } ; static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_make_offsetof_exp(
! struct _tuple7* typeloc, int index){ struct _tuple7 _temp108; struct Cyc_Position_Segment*
! _temp109; void* _temp111; struct _tuple7* _temp106= typeloc; _temp108=* _temp106;
! _LL112: _temp111= _temp108.f1; goto _LL110; _LL110: _temp109= _temp108.f2; goto
! _LL107; _LL107: return Cyc_Absyn_offsetof_exp( _temp111,( void*)({ struct Cyc_Absyn_TupleIndex_struct*
! _temp113=( struct Cyc_Absyn_TupleIndex_struct*) _cycalloc_atomic( sizeof( struct
! Cyc_Absyn_TupleIndex_struct)); _temp113[ 0]=({ struct Cyc_Absyn_TupleIndex_struct
! _temp114; _temp114.tag= Cyc_Absyn_TupleIndex; _temp114.f1=( unsigned int) index;
! _temp114;}); _temp113;}), _temp109);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_get_and_cast_ri_exp(
! struct Cyc_Position_Segment* loc, struct Cyc_Tcgenrep_RepInfo* info){ return Cyc_Absyn_cast_exp(
! Cyc_Tcgenrep_tunion_typ(& Cyc_Tcgenrep_typestruct_str),( struct Cyc_Absyn_Exp*)
! _check_null( info->exp), loc);} static struct _tuple5* Cyc_Tcgenrep_gen_id_for_exp(
! struct Cyc_Absyn_Exp* e){ return({ struct _tuple5* _temp115=( struct _tuple5*)
! _cycalloc( sizeof( struct _tuple5)); _temp115->f1= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("tuple", sizeof( unsigned char), 6u)); _temp115->f2= e; _temp115;});}
! static struct Cyc_Absyn_Decl* Cyc_Tcgenrep_gen_decl_cls( struct _tuple7* env,
! struct _tuple5* name_exp){ struct _tuple7 _temp118; struct Cyc_Position_Segment*
! _temp119; void* _temp121; struct _tuple7* _temp116= env; _temp118=* _temp116;
! _LL122: _temp121= _temp118.f1; goto _LL120; _LL120: _temp119= _temp118.f2; goto
! _LL117; _LL117: { struct _tuple5 _temp125; struct Cyc_Absyn_Exp* _temp126;
! struct _tagged_arr* _temp128; struct _tuple5* _temp123= name_exp; _temp125=*
! _temp123; _LL129: _temp128= _temp125.f1; goto _LL127; _LL127: _temp126= _temp125.f2;
! goto _LL124; _LL124: return Cyc_Tcgenrep_gen_decl( _temp128, _temp121,( struct
! Cyc_Absyn_Exp*) _temp126, _temp119);}} struct _tuple8{ struct Cyc_List_List* f1;
! struct Cyc_Absyn_Exp* f2; } ; static struct _tuple8* Cyc_Tcgenrep_null_designator_exp(
! struct Cyc_Absyn_Exp* e){ return({ struct _tuple8* _temp130=( struct _tuple8*)
! _cycalloc( sizeof( struct _tuple8)); _temp130->f1= 0; _temp130->f2= e; _temp130;});}
  static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_arr_init_exp( struct Cyc_List_List* l,
! struct Cyc_Position_Segment* loc){ struct Cyc_List_List* _temp131=(( struct Cyc_List_List*(*)(
! struct _tuple8*(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)(
  Cyc_Tcgenrep_null_designator_exp, l); return Cyc_Absyn_unresolvedmem_exp( 0,
! _temp131, loc);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_address_exp_cls(
  struct Cyc_Position_Segment* loc, struct Cyc_Absyn_Exp* e){ return Cyc_Absyn_address_exp(
  e, loc);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_unknownid_exp_cls( struct
  Cyc_Position_Segment* loc, struct _tuple1* e){ return Cyc_Absyn_unknownid_exp( e,
! loc);} static int Cyc_Tcgenrep_has_bitfield( struct Cyc_Absyn_Structfield* sf){
! return sf->width !=  0;} static int Cyc_Tcgenrep_add_bitfield_sizes( int total,
! struct Cyc_Absyn_Structfield* sf){ return( int)( Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( sf->width)) +  total);} static void* Cyc_Tcgenrep_select_structfield_type(
! struct Cyc_Absyn_Structfield* sf){ if( Cyc_Std_strcmp(* sf->name, _tag_arr("",
! sizeof( unsigned char), 1u)) ==  0){({ void* _temp132[ 0u]={};(( int(*)( struct
! _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): anonymous (padding) structfield not handled yet",
! sizeof( unsigned char), 55u), _tag_arr( _temp132, sizeof( void*), 0u));});} if(
! Cyc_Tcgenrep_has_bitfield( sf)){({ void* _temp133[ 0u]={};(( int(*)( struct
! _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): mixed struct bitfields and union bitfields not handled",
! sizeof( unsigned char), 62u), _tag_arr( _temp133, sizeof( void*), 0u));});}
  return( void*) sf->type;} static struct Cyc_Dict_Dict* Cyc_Tcgenrep_update_info(
  struct Cyc_Dict_Dict* dict, void* type, struct Cyc_List_List* decls, struct Cyc_Absyn_Exp*
  exp, struct Cyc_List_List* dependencies, struct Cyc_Core_Opt* fwd_decl){ struct
! Cyc_Core_Opt* _temp134=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* d, void*
! k)) Cyc_Dict_lookup_opt)( dict, type); if( _temp134 !=  0){ if((( struct Cyc_Tcgenrep_RepInfo*)((
! struct Cyc_Core_Opt*) _check_null( _temp134))->v)->decls !=  0){ Cyc_Tcgenrep_print_typerep_dict(
! dict);({ void* _temp135[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
! _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("Updating non-forward declaration",
! sizeof( unsigned char), 33u), _tag_arr( _temp135, sizeof( void*), 0u));});}((
! struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*) _check_null( _temp134))->v)->decls=
  decls;(( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*) _check_null(
! _temp134))->v)->exp= exp;(( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*)
! _check_null( _temp134))->v)->dependencies= dependencies; return dict;} else{
! return(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, void* k, struct Cyc_Tcgenrep_RepInfo*
! v)) Cyc_Dict_insert)( dict, type,({ struct Cyc_Tcgenrep_RepInfo* _temp136=(
  struct Cyc_Tcgenrep_RepInfo*) _cycalloc( sizeof( struct Cyc_Tcgenrep_RepInfo));
! _temp136->decls= decls; _temp136->exp= exp; _temp136->dependencies= dependencies;
! _temp136->fwd_decl= fwd_decl; _temp136->emitted= 0; _temp136;}));}} static
  struct Cyc_Absyn_Tqual Cyc_Tcgenrep_tq_none={ 0, 0, 0}; static struct _tuple4*
  Cyc_Tcgenrep_tqual_type( struct Cyc_Absyn_Tqual* tq, void* type){ return({
! struct _tuple4* _temp137=( struct _tuple4*) _cycalloc( sizeof( struct _tuple4));
! _temp137->f1=*(( struct Cyc_Absyn_Tqual*) _check_null( tq)); _temp137->f2= type;
! _temp137;});} static void* Cyc_Tcgenrep_tuple_typ( struct Cyc_List_List* types){
! struct Cyc_List_List* _temp138=(( struct Cyc_List_List*(*)( struct _tuple4*(* f)(
  struct Cyc_Absyn_Tqual*, void*), struct Cyc_Absyn_Tqual* env, struct Cyc_List_List*
  x)) Cyc_List_map_c)( Cyc_Tcgenrep_tqual_type,( struct Cyc_Absyn_Tqual*)& Cyc_Tcgenrep_tq_none,
  types); struct Cyc_Absyn_TupleType_struct* tuple_type_base=({ struct Cyc_Absyn_TupleType_struct*
! _temp139=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp139[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp140; _temp140.tag= Cyc_Absyn_TupleType;
! _temp140.f1= _temp138; _temp140;}); _temp139;}); void* tuple_type=( void*)
! tuple_type_base; return tuple_type;} static struct _tuple8* Cyc_Tcgenrep_array_decls(
  void* type, struct Cyc_List_List* exps, struct Cyc_Position_Segment* loc){
! struct Cyc_List_List* _temp141=(( struct Cyc_List_List*(*)( struct _tuple5*(* f)(
  struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_gen_id_for_exp,
! exps); struct Cyc_List_List* _temp142=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Decl*(*
! f)( struct _tuple7*, struct _tuple5*), struct _tuple7* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcgenrep_gen_decl_cls,({ struct _tuple7* _temp155=(
! struct _tuple7*) _cycalloc( sizeof( struct _tuple7)); _temp155->f1= type;
! _temp155->f2= loc; _temp155;}), _temp141); struct Cyc_List_List* _temp143=((
  struct Cyc_List_List*(*)( struct _tagged_arr*(* f)( struct _tuple5*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Tcgenrep_get_first, _temp141); struct Cyc_List_List*
! _temp144=(( struct Cyc_List_List*(*)( struct _tuple1*(* f)( struct _tagged_arr*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_toplevel_name, _temp143);
! struct Cyc_List_List* _temp145=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(*
  f)( struct Cyc_Position_Segment*, struct _tuple1*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_unknownid_exp_cls,
! loc, _temp144); struct Cyc_List_List* _temp146=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*, struct Cyc_Absyn_Exp*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_address_exp_cls,
! loc, _temp145); struct Cyc_Absyn_Exp* _temp147= Cyc_Tcgenrep_arr_init_exp(
! _temp146, loc); struct _tagged_arr* _temp148= Cyc_Tcgenrep_new_gen_id( _tag_arr("arr",
! sizeof( unsigned char), 4u)); void* _temp149= Cyc_Absyn_at_typ( type,( void*)
! Cyc_Absyn_HeapRgn, Cyc_Tcgenrep_tq_none); void* _temp150= Cyc_Tcgenrep_array_typ(
! _temp149, Cyc_Tcgenrep_tq_none, 0); struct Cyc_Absyn_Decl* _temp151= Cyc_Tcgenrep_gen_decl(
! _temp148, _temp150,( struct Cyc_Absyn_Exp*) _temp147, loc); struct Cyc_Absyn_Exp*
! _temp152= Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp148), loc);
! return({ struct _tuple8* _temp153=( struct _tuple8*) _cycalloc( sizeof( struct
! _tuple8)); _temp153->f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_imp_append)( _temp142,({ struct Cyc_Absyn_Decl*
! _temp154[ 1u]; _temp154[ 0u]= _temp151;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp154, sizeof( struct Cyc_Absyn_Decl*),
! 1u));})); _temp153->f2= _temp152; _temp153;});} static void* Cyc_Tcgenrep_check_tunionfield_and_get_type(
! struct Cyc_Absyn_Tunionfield* tuf){ if( tuf->tvs !=  0){({ void* _temp156[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("gen(): tunionfield type varaibles not handled", sizeof( unsigned char),
! 46u), _tag_arr( _temp156, sizeof( void*), 0u));});} return( void*)({ struct Cyc_Absyn_TupleType_struct*
! _temp157=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp157[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp158; _temp158.tag= Cyc_Absyn_TupleType;
! _temp158.f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_imp_append)(({ struct _tuple4* _temp159[ 1u]; _temp159[ 0u]=({
! struct _tuple4* _temp160=( struct _tuple4*) _cycalloc( sizeof( struct _tuple4));
! _temp160->f1= Cyc_Tcgenrep_tq_none; _temp160->f2= Cyc_Absyn_uint_t; _temp160;});((
! struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp159, sizeof( struct _tuple4*), 1u));}), tuf->typs); _temp158;}); _temp157;});}
! static int Cyc_Tcgenrep_filter_empty_tunionfield( struct Cyc_Absyn_Tunionfield*
! tuf){ return tuf->typs !=  0;} static struct _tagged_arr* Cyc_Tcgenrep_get_tunionfield_name(
! struct Cyc_Absyn_Tunionfield* tuf){ return(* tuf->name).f2;} static void* Cyc_Tcgenrep_id(
! void* x){ return x;} struct Cyc_Absyn_Structfield* Cyc_Tcgenrep_substitute_structfield_type(
! struct Cyc_List_List* subst, struct Cyc_Absyn_Structfield* sf){ return({ struct
! Cyc_Absyn_Structfield* _temp161=( struct Cyc_Absyn_Structfield*) _cycalloc(
! sizeof( struct Cyc_Absyn_Structfield)); _temp161->name= sf->name; _temp161->tq=
! sf->tq; _temp161->type=( void*) Cyc_Tcutil_substitute( subst,( void*) sf->type);
! _temp161->width= sf->width; _temp161->attributes= sf->attributes; _temp161;});}
! struct _tuple4* Cyc_Tcgenrep_substitute_tqual_type( struct Cyc_List_List* subst,
! struct _tuple4* pair){ struct _tuple4 _temp164; void* _temp165; struct Cyc_Absyn_Tqual
! _temp167; struct _tuple4* _temp162= pair; _temp164=* _temp162; _LL168: _temp167=
! _temp164.f1; goto _LL166; _LL166: _temp165= _temp164.f2; goto _LL163; _LL163:
! return({ struct _tuple4* _temp169=( struct _tuple4*) _cycalloc( sizeof( struct
! _tuple4)); _temp169->f1= _temp167; _temp169->f2= Cyc_Tcutil_substitute( subst,
! _temp165); _temp169;});} struct Cyc_Absyn_Tunionfield* Cyc_Tcgenrep_substitute_tunionfield_type(
! struct Cyc_List_List* subst, struct Cyc_Absyn_Tunionfield* tf){ return({ struct
! Cyc_Absyn_Tunionfield* _temp170=( struct Cyc_Absyn_Tunionfield*) _cycalloc(
! sizeof( struct Cyc_Absyn_Tunionfield)); _temp170->name= tf->name; _temp170->tvs=
! tf->tvs; _temp170->typs=(( struct Cyc_List_List*(*)( struct _tuple4*(* f)(
! struct Cyc_List_List*, struct _tuple4*), struct Cyc_List_List* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcgenrep_substitute_tqual_type, subst, tf->typs);
! _temp170->loc= tf->loc; _temp170->sc=( void*)(( void*) tf->sc); _temp170;});}
! void* Cyc_Tcgenrep_monomorphize_type( void* type){ void* _temp171= Cyc_Tcutil_compress(
! type); struct Cyc_Absyn_Structdecl** _temp181; struct Cyc_List_List* _temp183;
! struct _tuple1* _temp185; struct Cyc_Absyn_Uniondecl** _temp187; struct Cyc_List_List*
! _temp189; struct _tuple1* _temp191; struct Cyc_Absyn_TunionInfo _temp193; void*
! _temp195; struct Cyc_List_List* _temp197; void* _temp199; struct Cyc_Absyn_Tuniondecl**
! _temp201; struct Cyc_Absyn_Tuniondecl* _temp203; _LL173: if(( unsigned int)
! _temp171 >  4u?*(( int*) _temp171) ==  Cyc_Absyn_StructType: 0){ _LL186:
! _temp185=(( struct Cyc_Absyn_StructType_struct*) _temp171)->f1; goto _LL184;
! _LL184: _temp183=(( struct Cyc_Absyn_StructType_struct*) _temp171)->f2; goto
! _LL182; _LL182: _temp181=(( struct Cyc_Absyn_StructType_struct*) _temp171)->f3;
! goto _LL174;} else{ goto _LL175;} _LL175: if(( unsigned int) _temp171 >  4u?*((
! int*) _temp171) ==  Cyc_Absyn_UnionType: 0){ _LL192: _temp191=(( struct Cyc_Absyn_UnionType_struct*)
! _temp171)->f1; goto _LL190; _LL190: _temp189=(( struct Cyc_Absyn_UnionType_struct*)
! _temp171)->f2; goto _LL188; _LL188: _temp187=(( struct Cyc_Absyn_UnionType_struct*)
! _temp171)->f3; goto _LL176;} else{ goto _LL177;} _LL177: if(( unsigned int)
! _temp171 >  4u?*(( int*) _temp171) ==  Cyc_Absyn_TunionType: 0){ _LL194:
! _temp193=(( struct Cyc_Absyn_TunionType_struct*) _temp171)->f1; _LL200: _temp199=(
! void*) _temp193.tunion_info; if(*(( int*) _temp199) ==  Cyc_Absyn_KnownTunion){
! _LL202: _temp201=(( struct Cyc_Absyn_KnownTunion_struct*) _temp199)->f1;
! _temp203=* _temp201; goto _LL198;} else{ goto _LL179;} _LL198: _temp197=
! _temp193.targs; goto _LL196; _LL196: _temp195=( void*) _temp193.rgn; goto _LL178;}
! else{ goto _LL179;} _LL179: goto _LL180; _LL174: if( _temp181 ==  0){({ void*
! _temp204[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("struct decl must exist at this point", sizeof( unsigned char), 37u),
! _tag_arr( _temp204, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Structdecl*
! _temp205=*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp181)); struct Cyc_List_List*
! _temp206= _temp205->tvs; if( Cyc_List_length( _temp183) != (( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( _temp206)){({ struct Cyc_Std_Int_pa_struct _temp209;
! _temp209.tag= Cyc_Std_Int_pa; _temp209.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp206));{ struct Cyc_Std_Int_pa_struct
! _temp208; _temp208.tag= Cyc_Std_Int_pa; _temp208.f1=( int)(( unsigned int) Cyc_List_length(
! _temp183));{ void* _temp207[ 2u]={& _temp208,& _temp209};(( int(*)( struct
! _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): number of params %d differs from number of tyvars %d",
! sizeof( unsigned char), 60u), _tag_arr( _temp207, sizeof( void*), 2u));}}});}{
! struct Cyc_List_List* _temp210=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)( _temp206, _temp183); struct Cyc_Core_Opt*
! fields= 0; if( _temp205->fields !=  0){ fields=({ struct Cyc_Core_Opt* _temp211=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp211->v=(
! void*)(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(* f)( struct
! Cyc_List_List*, struct Cyc_Absyn_Structfield*), struct Cyc_List_List* env,
! struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_substitute_structfield_type,
! _temp210,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp205->fields))->v);
! _temp211;});}{ struct Cyc_Absyn_Structdecl* stdecl2=({ struct Cyc_Absyn_Structdecl*
! _temp217=( struct Cyc_Absyn_Structdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Structdecl));
! _temp217->sc=( void*)(( void*) _temp205->sc); _temp217->name= _temp205->name;
! _temp217->tvs= 0; _temp217->fields= fields; _temp217->attributes= _temp205->attributes;
! _temp217;}); struct Cyc_Absyn_Structdecl** _temp212=({ struct Cyc_Absyn_Structdecl**
! _temp216=( struct Cyc_Absyn_Structdecl**) _cycalloc( sizeof( struct Cyc_Absyn_Structdecl*));
! _temp216[ 0]= stdecl2; _temp216;}); struct Cyc_Absyn_StructType_struct* _temp213=({
! struct Cyc_Absyn_StructType_struct* _temp214=( struct Cyc_Absyn_StructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct)); _temp214[ 0]=({ struct
! Cyc_Absyn_StructType_struct _temp215; _temp215.tag= Cyc_Absyn_StructType;
! _temp215.f1= _temp185; _temp215.f2= _temp183; _temp215.f3= _temp212; _temp215;});
! _temp214;}); return( void*) _temp213;}}} _LL176: if( _temp187 ==  0){({ void*
! _temp218[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("struct decl must exist at this point", sizeof( unsigned char), 37u),
! _tag_arr( _temp218, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Uniondecl*
! _temp219=*(( struct Cyc_Absyn_Uniondecl**) _check_null( _temp187)); struct Cyc_List_List*
! _temp220= _temp219->tvs; if( Cyc_List_length( _temp189) != (( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( _temp220)){({ struct Cyc_Std_Int_pa_struct _temp223;
! _temp223.tag= Cyc_Std_Int_pa; _temp223.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp220));{ struct Cyc_Std_Int_pa_struct
! _temp222; _temp222.tag= Cyc_Std_Int_pa; _temp222.f1=( int)(( unsigned int) Cyc_List_length(
! _temp189));{ void* _temp221[ 2u]={& _temp222,& _temp223};(( int(*)( struct
! _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): number of params %d differs from number of tyvars %d",
! sizeof( unsigned char), 60u), _tag_arr( _temp221, sizeof( void*), 2u));}}});}{
! struct Cyc_List_List* _temp224=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)( _temp220, _temp189); struct Cyc_Core_Opt*
! fields= 0; if( _temp219->fields !=  0){ fields=({ struct Cyc_Core_Opt* _temp225=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp225->v=(
! void*)(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(* f)( struct
! Cyc_List_List*, struct Cyc_Absyn_Structfield*), struct Cyc_List_List* env,
! struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_substitute_structfield_type,
! _temp224,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp219->fields))->v);
! _temp225;});}{ struct Cyc_Absyn_Structdecl* udecl2=({ struct Cyc_Absyn_Structdecl*
! _temp231=( struct Cyc_Absyn_Structdecl*) _cycalloc( sizeof( struct Cyc_Absyn_Structdecl));
! _temp231->sc=( void*)(( void*) _temp219->sc); _temp231->name= _temp219->name;
! _temp231->tvs= 0; _temp231->fields= fields; _temp231->attributes= _temp219->attributes;
! _temp231;}); struct Cyc_Absyn_Structdecl** _temp226=({ struct Cyc_Absyn_Structdecl**
! _temp230=( struct Cyc_Absyn_Structdecl**) _cycalloc( sizeof( struct Cyc_Absyn_Structdecl*));
! _temp230[ 0]= udecl2; _temp230;}); struct Cyc_Absyn_StructType_struct* _temp227=({
! struct Cyc_Absyn_StructType_struct* _temp228=( struct Cyc_Absyn_StructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct)); _temp228[ 0]=({ struct
! Cyc_Absyn_StructType_struct _temp229; _temp229.tag= Cyc_Absyn_StructType;
! _temp229.f1= _temp191; _temp229.f2= _temp189; _temp229.f3= _temp226; _temp229;});
! _temp228;}); return( void*) _temp227;}}} _LL178: { struct Cyc_List_List*
! _temp232= _temp203->tvs; if( Cyc_List_length( _temp197) != (( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( _temp232)){({ struct Cyc_Std_Int_pa_struct _temp235;
! _temp235.tag= Cyc_Std_Int_pa; _temp235.f1=( int)(( unsigned int)(( int(*)(
! struct Cyc_List_List* x)) Cyc_List_length)( _temp232));{ struct Cyc_Std_Int_pa_struct
! _temp234; _temp234.tag= Cyc_Std_Int_pa; _temp234.f1=( int)(( unsigned int) Cyc_List_length(
! _temp197));{ void* _temp233[ 2u]={& _temp234,& _temp235};(( int(*)( struct
! _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): number of params %d differs from number of tyvars %d",
! sizeof( unsigned char), 60u), _tag_arr( _temp233, sizeof( void*), 2u));}}});}{
! struct Cyc_List_List* _temp236=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_zip)( _temp232, _temp197); struct Cyc_Core_Opt*
! fields= 0; if( _temp203->fields !=  0){ fields=({ struct Cyc_Core_Opt* _temp237=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp237->v=(
! void*)(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Tunionfield*(* f)( struct
! Cyc_List_List*, struct Cyc_Absyn_Tunionfield*), struct Cyc_List_List* env,
! struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_substitute_tunionfield_type,
! _temp236,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp203->fields))->v);
! _temp237;});}{ struct Cyc_Absyn_Tuniondecl* _temp238=({ struct Cyc_Absyn_Tuniondecl*
! _temp247=( struct Cyc_Absyn_Tuniondecl*) _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl));
! _temp247->sc=( void*)(( void*) _temp203->sc); _temp247->name= _temp203->name;
! _temp247->tvs= 0; _temp247->fields= fields; _temp247->is_xtunion= _temp203->is_xtunion;
! _temp247;}); struct Cyc_Absyn_TunionType_struct* _temp239=({ struct Cyc_Absyn_TunionType_struct*
! _temp241=( struct Cyc_Absyn_TunionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct));
! _temp241[ 0]=({ struct Cyc_Absyn_TunionType_struct _temp242; _temp242.tag= Cyc_Absyn_TunionType;
! _temp242.f1=({ struct Cyc_Absyn_TunionInfo _temp243; _temp243.tunion_info=( void*)((
! void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp244=( struct Cyc_Absyn_KnownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp244[ 0]=({ struct
! Cyc_Absyn_KnownTunion_struct _temp245; _temp245.tag= Cyc_Absyn_KnownTunion;
! _temp245.f1=({ struct Cyc_Absyn_Tuniondecl** _temp246=( struct Cyc_Absyn_Tuniondecl**)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl*)); _temp246[ 0]= _temp238;
! _temp246;}); _temp245;}); _temp244;})); _temp243.targs= _temp197; _temp243.rgn=(
! void*) _temp195; _temp243;}); _temp242;}); _temp241;}); struct Cyc_Position_Segment*
! _temp240= Cyc_Position_segment_of_abs( 0, 0); return( void*) _temp239;}}} _LL180:
! return type; _LL172:;} struct _tuple9{ struct Cyc_Dict_Dict* f1; struct Cyc_Tcgenrep_RepInfo*
  f2; } ; static struct _tuple9* Cyc_Tcgenrep_lookupRep( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment* loc, void* type);
  struct _tuple10{ struct Cyc_Dict_Dict* f1; struct Cyc_List_List* f2; } ; struct
  _tuple11{ struct Cyc_Tcenv_Tenv* f1; struct Cyc_Position_Segment* f2; } ; static
  struct _tuple10* Cyc_Tcgenrep_lookupRepsCls( struct _tuple11* env, void* type,
! struct _tuple10* carry){ struct _tuple9 _temp250; struct Cyc_Tcgenrep_RepInfo*
! _temp251; struct Cyc_Dict_Dict* _temp253; struct _tuple9* _temp248= Cyc_Tcgenrep_lookupRep((*
! env).f1,(* carry).f1,(* env).f2, type); _temp250=* _temp248; _LL254: _temp253=
! _temp250.f1; goto _LL252; _LL252: _temp251= _temp250.f2; goto _LL249; _LL249:
! return({ struct _tuple10* _temp255=( struct _tuple10*) _cycalloc( sizeof( struct
! _tuple10)); _temp255->f1= _temp253; _temp255->f2=({ struct Cyc_List_List*
! _temp256=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp256->hd=( void*) _temp251; _temp256->tl=(* carry).f2; _temp256;}); _temp255;});}
  static struct Cyc_Dict_Dict* Cyc_Tcgenrep_buildRepTuple( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment* loc, struct
  _tagged_arr* varname, void* type, struct Cyc_List_List* types){ struct Cyc_Absyn_Exp*
! _temp257= Cyc_Absyn_sizeoftyp_exp( type, loc); struct _tuple11* _temp258=({
! struct _tuple11* _temp284=( struct _tuple11*) _cycalloc( sizeof( struct _tuple11));
! _temp284->f1= te; _temp284->f2= loc; _temp284;}); struct _tuple10* _temp259=({
! struct _tuple10* _temp283=( struct _tuple10*) _cycalloc( sizeof( struct _tuple10));
! _temp283->f1= dict; _temp283->f2= 0; _temp283;}); struct _tuple10 _temp262;
! struct Cyc_List_List* _temp263; struct Cyc_Dict_Dict* _temp265; struct _tuple10*
! _temp260=(( struct _tuple10*(*)( struct _tuple10*(* f)( struct _tuple11*, void*,
  struct _tuple10*), struct _tuple11*, struct Cyc_List_List* x, struct _tuple10*
! accum)) Cyc_List_fold_right_c)( Cyc_Tcgenrep_lookupRepsCls, _temp258, types,
! _temp259); _temp262=* _temp260; _LL266: _temp265= _temp262.f1; goto _LL264;
! _LL264: _temp263= _temp262.f2; goto _LL261; _LL261: dict= _temp265;{ struct Cyc_List_List*
! _temp267=(( struct Cyc_List_List*(*)( int n, int(* f)( int))) Cyc_List_tabulate)(
! Cyc_List_length( types),( int(*)( int x)) Cyc_Tcgenrep_id); struct Cyc_List_List*
! _temp268=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct _tuple7*,
! int), struct _tuple7* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_make_offsetof_exp,({
! struct _tuple7* _temp282=( struct _tuple7*) _cycalloc( sizeof( struct _tuple7));
! _temp282->f1= type; _temp282->f2= loc; _temp282;}), _temp267); struct Cyc_List_List*
! _temp269=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
! struct Cyc_Tcgenrep_RepInfo*), struct Cyc_Position_Segment* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcgenrep_get_and_cast_ri_exp, loc, _temp263); struct
! Cyc_List_List* _temp270=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)(
! struct Cyc_Position_Segment*, struct _tuple6*), struct Cyc_Position_Segment* env,
! struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_tuple2_exp_cls, loc,((
! struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_zip)(
! _temp268, _temp269)); void* tuple_type= Cyc_Tcgenrep_tuple_typ(({ void* _temp281[
! 2u]; _temp281[ 1u]= Cyc_Tcgenrep_tunion_typ(& Cyc_Tcgenrep_typestruct_str);
! _temp281[ 0u]= Cyc_Absyn_uint_t; Cyc_List_list( _tag_arr( _temp281, sizeof( void*),
! 2u));})); struct _tuple8 _temp273; struct Cyc_Absyn_Exp* _temp274; struct Cyc_List_List*
! _temp276; struct _tuple8* _temp271= Cyc_Tcgenrep_array_decls( tuple_type,
! _temp270, loc); _temp273=* _temp271; _LL277: _temp276= _temp273.f1; goto _LL275;
! _LL275: _temp274= _temp273.f2; goto _LL272; _LL272: { struct Cyc_Absyn_Decl*
! _temp278= Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,&
! Cyc_Tcgenrep_tuple_str, varname,({ struct Cyc_Absyn_Exp* _temp280[ 2u]; _temp280[
! 1u]= _temp274; _temp280[ 0u]= _temp257;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp280, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), loc); return Cyc_Tcgenrep_update_info( dict, type,(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
! _temp276,({ struct Cyc_Absyn_Decl* _temp279[ 1u]; _temp279[ 0u]= _temp278;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp279, sizeof( struct Cyc_Absyn_Decl*), 1u));})),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( varname), loc), loc),
! _temp263, 0);}}} static struct Cyc_Dict_Dict* Cyc_Tcgenrep_buildRepUnion( struct
! Cyc_Tcenv_Tenv* te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment* loc,
! struct _tagged_arr* varname, void* type, struct Cyc_List_List* types){ struct
! _tuple11* _temp285=({ struct _tuple11* _temp306=( struct _tuple11*) _cycalloc(
! sizeof( struct _tuple11)); _temp306->f1= te; _temp306->f2= loc; _temp306;});
! struct _tuple10* _temp286=({ struct _tuple10* _temp305=( struct _tuple10*)
! _cycalloc( sizeof( struct _tuple10)); _temp305->f1= dict; _temp305->f2= 0;
! _temp305;}); struct _tuple10 _temp289; struct Cyc_List_List* _temp290; struct
! Cyc_Dict_Dict* _temp292; struct _tuple10* _temp287=(( struct _tuple10*(*)(
  struct _tuple10*(* f)( struct _tuple11*, void*, struct _tuple10*), struct
  _tuple11*, struct Cyc_List_List* x, struct _tuple10* accum)) Cyc_List_fold_right_c)(
! Cyc_Tcgenrep_lookupRepsCls, _temp285, types, _temp286); _temp289=* _temp287;
! _LL293: _temp292= _temp289.f1; goto _LL291; _LL291: _temp290= _temp289.f2; goto
! _LL288; _LL288: dict= _temp292;{ struct Cyc_List_List* _temp294=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*, struct Cyc_Tcgenrep_RepInfo*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_get_and_cast_ri_exp,
! loc, _temp290); struct _tuple8 _temp297; struct Cyc_Absyn_Exp* _temp298; struct
! Cyc_List_List* _temp300; struct _tuple8* _temp295= Cyc_Tcgenrep_array_decls( Cyc_Tcgenrep_tunion_typ(&
! Cyc_Tcgenrep_typestruct_str), _temp294, loc); _temp297=* _temp295; _LL301:
! _temp300= _temp297.f1; goto _LL299; _LL299: _temp298= _temp297.f2; goto _LL296;
! _LL296: { struct Cyc_Absyn_Decl* _temp302= Cyc_Tcgenrep_tunion_constructor_decl(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_union_str, varname,({ struct Cyc_Absyn_Exp*
! _temp304[ 1u]; _temp304[ 0u]= _temp298;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp304, sizeof( struct Cyc_Absyn_Exp*),
  1u));}), loc); return Cyc_Tcgenrep_update_info( dict, type,(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
! _temp300,({ struct Cyc_Absyn_Decl* _temp303[ 1u]; _temp303[ 0u]= _temp302;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp303, sizeof( struct Cyc_Absyn_Decl*), 1u));})),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( varname), loc), loc),
! _temp290, 0);}}} static struct Cyc_Dict_Dict* Cyc_Tcgenrep_buildRepTunion(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* varname, void* type, struct Cyc_List_List* types){
! struct _tuple11* _temp307=({ struct _tuple11* _temp333=( struct _tuple11*)
! _cycalloc( sizeof( struct _tuple11)); _temp333->f1= te; _temp333->f2= loc;
! _temp333;}); struct _tuple10* _temp308=({ struct _tuple10* _temp332=( struct
! _tuple10*) _cycalloc( sizeof( struct _tuple10)); _temp332->f1= dict; _temp332->f2=
! 0; _temp332;}); struct _tuple10 _temp311; struct Cyc_List_List* _temp312; struct
! Cyc_Dict_Dict* _temp314; struct _tuple10* _temp309=(( struct _tuple10*(*)(
  struct _tuple10*(* f)( struct _tuple11*, void*, struct _tuple10*), struct
  _tuple11*, struct Cyc_List_List* x, struct _tuple10* accum)) Cyc_List_fold_right_c)(
! Cyc_Tcgenrep_lookupRepsCls, _temp307, types, _temp308); _temp311=* _temp309;
! _LL315: _temp314= _temp311.f1; goto _LL313; _LL313: _temp312= _temp311.f2; goto
! _LL310; _LL310: dict= _temp314;{ struct Cyc_List_List* _temp316=(( struct Cyc_List_List*(*)(
  int n, int(* f)( int))) Cyc_List_tabulate)((( int(*)( struct Cyc_List_List* x))
! Cyc_List_length)( _temp312),( int(*)( int x)) Cyc_Tcgenrep_id); struct Cyc_List_List*
! _temp317=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
  int), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Tcgenrep_cnst_int_cls, loc, _temp316); struct Cyc_List_List* _temp318=((
  struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
  struct Cyc_Tcgenrep_RepInfo*), struct Cyc_Position_Segment* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcgenrep_get_and_cast_ri_exp, loc, _temp312); struct
! Cyc_List_List* _temp319=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_zip)( _temp317, _temp318); struct Cyc_List_List*
! _temp320=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
  struct _tuple6*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x))
! Cyc_List_map_c)( Cyc_Tcgenrep_tuple2_exp_cls, loc, _temp319); void* tuple_type=
! Cyc_Tcgenrep_tuple_typ(({ void* _temp331[ 2u]; _temp331[ 1u]= Cyc_Tcgenrep_tunion_typ(&
! Cyc_Tcgenrep_typestruct_str); _temp331[ 0u]= Cyc_Absyn_uint_t; Cyc_List_list(
! _tag_arr( _temp331, sizeof( void*), 2u));})); struct _tuple8 _temp323; struct
! Cyc_Absyn_Exp* _temp324; struct Cyc_List_List* _temp326; struct _tuple8*
! _temp321= Cyc_Tcgenrep_array_decls( tuple_type, _temp320, loc); _temp323=*
! _temp321; _LL327: _temp326= _temp323.f1; goto _LL325; _LL325: _temp324= _temp323.f2;
! goto _LL322; _LL322: { struct Cyc_Absyn_Decl* _temp328= Cyc_Tcgenrep_tunion_constructor_decl(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_tunion_str, varname,({ struct Cyc_Absyn_Exp*
! _temp330[ 1u]; _temp330[ 0u]= _temp324;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp330, sizeof( struct Cyc_Absyn_Exp*),
  1u));}), loc); return Cyc_Tcgenrep_update_info( dict, type,(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
! _temp326,({ struct Cyc_Absyn_Decl* _temp329[ 1u]; _temp329[ 0u]= _temp328;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp329, sizeof( struct Cyc_Absyn_Decl*), 1u));})),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( varname), loc), loc),
! _temp312, 0); return dict;}}} static struct _tuple9* Cyc_Tcgenrep_lookupRep(
! struct Cyc_Tcenv_Tenv* te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment*
! loc, void* type){ if( Cyc_Tcgenrep_typestruct_decl ==  0){ Cyc_Tcenv_lookup_tuniondecl(
! te, loc,& Cyc_Tcgenrep_typestruct_name);}{ struct Cyc_Core_Opt* info=(( struct
! Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* d, void* k)) Cyc_Dict_lookup_opt)( dict,
! type); if( info !=  0){ struct _tuple9* _temp334=({ struct _tuple9* _temp335=(
! struct _tuple9*) _cycalloc( sizeof( struct _tuple9)); _temp335->f1= dict;
! _temp335->f2=( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*) _check_null(
! info))->v; _temp335;}); return _temp334;} else{{ void* _temp336= Cyc_Tcutil_compress(
! Cyc_Tcgenrep_monomorphize_type( type)); void* _temp386; struct Cyc_Absyn_PtrInfo
! _temp388; struct Cyc_Absyn_Exp* _temp390; struct Cyc_Absyn_Tqual _temp392; void*
! _temp394; struct Cyc_List_List* _temp396; struct Cyc_Core_Opt* _temp398; struct
! Cyc_List_List* _temp400; struct _tuple1* _temp402; struct Cyc_Absyn_Structdecl**
! _temp404; struct Cyc_List_List* _temp406; struct _tuple1* _temp408; struct Cyc_List_List*
! _temp410; struct Cyc_Absyn_Tvar* _temp412; struct Cyc_Absyn_FnInfo _temp414;
! struct Cyc_Absyn_TunionInfo _temp416; void* _temp418; struct Cyc_List_List*
! _temp420; void* _temp422; struct Cyc_Absyn_Tuniondecl** _temp424; struct Cyc_Absyn_Tuniondecl*
! _temp426; struct Cyc_Absyn_TunionFieldInfo _temp427; struct Cyc_Absyn_Uniondecl**
! _temp429; struct Cyc_List_List* _temp431; struct _tuple1* _temp433; struct Cyc_List_List*
! _temp435; _LL338: if(( unsigned int) _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_IntType:
! 0){ _LL387: _temp386=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp336)->f2;
! goto _LL339;} else{ goto _LL340;} _LL340: if( _temp336 == ( void*) Cyc_Absyn_FloatType){
! goto _LL341;} else{ goto _LL342;} _LL342: if( _temp336 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL343;} else{ goto _LL344;} _LL344: if(( unsigned int) _temp336 >  4u?*((
! int*) _temp336) ==  Cyc_Absyn_PointerType: 0){ _LL389: _temp388=(( struct Cyc_Absyn_PointerType_struct*)
! _temp336)->f1; goto _LL345;} else{ goto _LL346;} _LL346: if(( unsigned int)
! _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_ArrayType: 0){ _LL395: _temp394=(
! void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp336)->f1; goto _LL393; _LL393:
! _temp392=(( struct Cyc_Absyn_ArrayType_struct*) _temp336)->f2; goto _LL391;
! _LL391: _temp390=(( struct Cyc_Absyn_ArrayType_struct*) _temp336)->f3; goto
! _LL347;} else{ goto _LL348;} _LL348: if(( unsigned int) _temp336 >  4u?*(( int*)
! _temp336) ==  Cyc_Absyn_TupleType: 0){ _LL397: _temp396=(( struct Cyc_Absyn_TupleType_struct*)
! _temp336)->f1; goto _LL349;} else{ goto _LL350;} _LL350: if(( unsigned int)
! _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_TypedefType: 0){ _LL403:
! _temp402=(( struct Cyc_Absyn_TypedefType_struct*) _temp336)->f1; goto _LL401;
! _LL401: _temp400=(( struct Cyc_Absyn_TypedefType_struct*) _temp336)->f2; goto
! _LL399; _LL399: _temp398=(( struct Cyc_Absyn_TypedefType_struct*) _temp336)->f3;
! goto _LL351;} else{ goto _LL352;} _LL352: if(( unsigned int) _temp336 >  4u?*((
! int*) _temp336) ==  Cyc_Absyn_StructType: 0){ _LL409: _temp408=(( struct Cyc_Absyn_StructType_struct*)
! _temp336)->f1; goto _LL407; _LL407: _temp406=(( struct Cyc_Absyn_StructType_struct*)
! _temp336)->f2; goto _LL405; _LL405: _temp404=(( struct Cyc_Absyn_StructType_struct*)
! _temp336)->f3; goto _LL353;} else{ goto _LL354;} _LL354: if(( unsigned int)
! _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_AnonStructType: 0){ _LL411:
! _temp410=(( struct Cyc_Absyn_AnonStructType_struct*) _temp336)->f1; goto _LL355;}
! else{ goto _LL356;} _LL356: if( _temp336 == ( void*) Cyc_Absyn_VoidType){ goto
! _LL357;} else{ goto _LL358;} _LL358: if(( unsigned int) _temp336 >  4u?*(( int*)
! _temp336) ==  Cyc_Absyn_Evar: 0){ goto _LL359;} else{ goto _LL360;} _LL360: if((
! unsigned int) _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_VarType: 0){
! _LL413: _temp412=(( struct Cyc_Absyn_VarType_struct*) _temp336)->f1; goto _LL361;}
! else{ goto _LL362;} _LL362: if(( unsigned int) _temp336 >  4u?*(( int*) _temp336)
! ==  Cyc_Absyn_FnType: 0){ _LL415: _temp414=(( struct Cyc_Absyn_FnType_struct*)
! _temp336)->f1; goto _LL363;} else{ goto _LL364;} _LL364: if(( unsigned int)
! _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_RgnHandleType: 0){ goto _LL365;}
! else{ goto _LL366;} _LL366: if( _temp336 == ( void*) Cyc_Absyn_HeapRgn){ goto
! _LL367;} else{ goto _LL368;} _LL368: if(( unsigned int) _temp336 >  4u?*(( int*)
! _temp336) ==  Cyc_Absyn_AccessEff: 0){ goto _LL369;} else{ goto _LL370;} _LL370:
! if(( unsigned int) _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_JoinEff: 0){
! goto _LL371;} else{ goto _LL372;} _LL372: if(( unsigned int) _temp336 >  4u?*((
! int*) _temp336) ==  Cyc_Absyn_RgnsEff: 0){ goto _LL373;} else{ goto _LL374;}
! _LL374: if(( unsigned int) _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_TunionType:
! 0){ _LL417: _temp416=(( struct Cyc_Absyn_TunionType_struct*) _temp336)->f1;
! _LL423: _temp422=( void*) _temp416.tunion_info; if(*(( int*) _temp422) ==  Cyc_Absyn_KnownTunion){
! _LL425: _temp424=(( struct Cyc_Absyn_KnownTunion_struct*) _temp422)->f1;
! _temp426=* _temp424; goto _LL421;} else{ goto _LL376;} _LL421: _temp420=
! _temp416.targs; goto _LL419; _LL419: _temp418=( void*) _temp416.rgn; goto _LL375;}
! else{ goto _LL376;} _LL376: if(( unsigned int) _temp336 >  4u?*(( int*) _temp336)
! ==  Cyc_Absyn_TunionType: 0){ goto _LL377;} else{ goto _LL378;} _LL378: if((
! unsigned int) _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL428: _temp427=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp336)->f1;
! goto _LL379;} else{ goto _LL380;} _LL380: if(( unsigned int) _temp336 >  4u?*((
! int*) _temp336) ==  Cyc_Absyn_UnionType: 0){ _LL434: _temp433=(( struct Cyc_Absyn_UnionType_struct*)
! _temp336)->f1; goto _LL432; _LL432: _temp431=(( struct Cyc_Absyn_UnionType_struct*)
! _temp336)->f2; goto _LL430; _LL430: _temp429=(( struct Cyc_Absyn_UnionType_struct*)
! _temp336)->f3; goto _LL381;} else{ goto _LL382;} _LL382: if(( unsigned int)
! _temp336 >  4u?*(( int*) _temp336) ==  Cyc_Absyn_AnonUnionType: 0){ _LL436:
! _temp435=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp336)->f1; goto _LL383;}
! else{ goto _LL384;} _LL384: if(( unsigned int) _temp336 >  4u?*(( int*) _temp336)
! ==  Cyc_Absyn_EnumType: 0){ goto _LL385;} else{ goto _LL337;} _LL339: { struct
! _tagged_arr* _temp437= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); struct Cyc_Absyn_Decl* _temp438= Cyc_Tcgenrep_tunion_constructor_decl(&
! Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_int_str, _temp437,({ struct Cyc_Absyn_Exp*
! _temp440[ 1u]; _temp440[ 0u]= Cyc_Tcgenrep_cnst_int( Cyc_Tcgenrep_size_of2int(
! _temp386), loc);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp440, sizeof( struct Cyc_Absyn_Exp*), 1u));}), loc); dict= Cyc_Tcgenrep_update_info(
! dict, type,({ struct Cyc_Absyn_Decl* _temp439[ 1u]; _temp439[ 0u]= _temp438;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp439, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
! Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp437), loc), loc), 0, 0);
! goto _LL337;} _LL341: dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(& Cyc_Tcgenrep_float_str),
! loc), 0, 0); goto _LL337; _LL343: dict= Cyc_Tcgenrep_update_info( dict, type, 0,(
  struct Cyc_Absyn_Exp*) Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(& Cyc_Tcgenrep_double_str),
! loc), 0, 0); goto _LL337; _LL345:{ void* _temp441= Cyc_Absyn_conref_val(
! _temp388.bounds); struct Cyc_Absyn_Exp* _temp447; _LL443: if(( unsigned int)
! _temp441 >  1u?*(( int*) _temp441) ==  Cyc_Absyn_Upper_b: 0){ _LL448: _temp447=((
! struct Cyc_Absyn_Upper_b_struct*) _temp441)->f1; goto _LL444;} else{ goto _LL445;}
! _LL445: if( _temp441 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL446;} else{ goto
! _LL442;} _LL444: { struct _tagged_arr* _temp449= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("rep", sizeof( unsigned char), 4u)); struct Cyc_Core_Opt* _temp450=({
! struct Cyc_Core_Opt* _temp462=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp462->v=( void*) Cyc_Tcgenrep_gen_vardecl_sc( _temp449, Cyc_Tcgenrep_tunionfield_typ(&
! Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_thinptr_str), 0,( void*) Cyc_Absyn_Extern,
! loc); _temp462;}); dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
! Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(
! _temp449), loc), loc), 0, _temp450);{ struct _tuple9 _temp453; struct Cyc_Tcgenrep_RepInfo*
! _temp454; struct Cyc_Dict_Dict* _temp456; struct _tuple9* _temp451= Cyc_Tcgenrep_lookupRep(
! te, dict, loc,( void*) _temp388.elt_typ); _temp453=* _temp451; _LL457: _temp456=
! _temp453.f1; goto _LL455; _LL455: _temp454= _temp453.f2; goto _LL452; _LL452:
! dict= _temp456;{ unsigned int bound= Cyc_Evexp_eval_const_uint_exp( _temp447);
! struct Cyc_Absyn_Decl* _temp458= Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,&
! Cyc_Tcgenrep_thinptr_str, _temp449,({ struct Cyc_Absyn_Exp* _temp461[ 2u];
! _temp461[ 1u]=( struct Cyc_Absyn_Exp*) _check_null( _temp454->exp); _temp461[ 0u]=
  Cyc_Tcgenrep_cnst_int(( int) bound, loc);(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp461, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), loc); dict= Cyc_Tcgenrep_update_info( dict, type,({ struct Cyc_Absyn_Decl*
! _temp459[ 1u]; _temp459[ 0u]= _temp458;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp459, sizeof( struct Cyc_Absyn_Decl*),
  1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp(
! Cyc_Tcgenrep_toplevel_name( _temp449), loc), loc),({ struct Cyc_Tcgenrep_RepInfo*
! _temp460[ 1u]; _temp460[ 0u]= _temp454;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp460, sizeof( struct Cyc_Tcgenrep_RepInfo*),
! 1u));}), 0); goto _LL442;}}} _LL446: { struct _tagged_arr* _temp463= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("rep", sizeof( unsigned char), 4u)); struct Cyc_Core_Opt* _temp464=({
! struct Cyc_Core_Opt* _temp476=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp476->v=( void*) Cyc_Tcgenrep_gen_vardecl_sc( _temp463, Cyc_Tcgenrep_tunionfield_typ(&
! Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_fatptr_str), 0,( void*) Cyc_Absyn_Extern,
! loc); _temp476;}); dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(
! _temp463), loc), loc), 0, _temp464);{ struct _tuple9 _temp467; struct Cyc_Tcgenrep_RepInfo*
! _temp468; struct Cyc_Dict_Dict* _temp470; struct _tuple9* _temp465= Cyc_Tcgenrep_lookupRep(
! te, dict, loc,( void*) _temp388.elt_typ); _temp467=* _temp465; _LL471: _temp470=
! _temp467.f1; goto _LL469; _LL469: _temp468= _temp467.f2; goto _LL466; _LL466:
! dict= _temp470;{ struct Cyc_Absyn_Decl* _temp472= Cyc_Tcgenrep_tunion_constructor_decl(&
! Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_fatptr_str, _temp463,({ struct Cyc_Absyn_Exp*
! _temp475[ 1u]; _temp475[ 0u]=( struct Cyc_Absyn_Exp*) _check_null( _temp468->exp);((
! struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp475, sizeof( struct Cyc_Absyn_Exp*), 1u));}), loc); dict= Cyc_Tcgenrep_update_info(
! dict, type,({ struct Cyc_Absyn_Decl* _temp473[ 1u]; _temp473[ 0u]= _temp472;((
! struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp473, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
! Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp463), loc), loc),({
! struct Cyc_Tcgenrep_RepInfo* _temp474[ 1u]; _temp474[ 0u]= _temp468;(( struct
! Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp474,
! sizeof( struct Cyc_Tcgenrep_RepInfo*), 1u));}), 0); goto _LL442;}}} _LL442:;}
! goto _LL337; _LL347: if( _temp390 ==  0){({ void* _temp477[ 0u]={};(( int(*)(
! struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("tcgenrep:At this point, array bounds must be constants",
! sizeof( unsigned char), 55u), _tag_arr( _temp477, sizeof( void*), 0u));});}{
! struct _tuple9 _temp480; struct Cyc_Tcgenrep_RepInfo* _temp481; struct Cyc_Dict_Dict*
! _temp483; struct _tuple9* _temp478= Cyc_Tcgenrep_lookupRep( te, dict, loc,
! _temp394); _temp480=* _temp478; _LL484: _temp483= _temp480.f1; goto _LL482;
! _LL482: _temp481= _temp480.f2; goto _LL479; _LL479: dict= _temp483;{
  unsigned int bound= Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp390)); struct _tagged_arr* _temp485= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("rep", sizeof( unsigned char), 4u)); struct Cyc_Absyn_Decl* _temp486=
  Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_thinptr_str,
! _temp485,({ struct Cyc_Absyn_Exp* _temp489[ 2u]; _temp489[ 1u]=( struct Cyc_Absyn_Exp*)
! _check_null( _temp481->exp); _temp489[ 0u]= Cyc_Tcgenrep_cnst_int(( int) bound,
  loc);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp489, sizeof( struct Cyc_Absyn_Exp*), 2u));}), loc); dict= Cyc_Tcgenrep_update_info(
! dict, type,({ struct Cyc_Absyn_Decl* _temp487[ 1u]; _temp487[ 0u]= _temp486;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp487, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
! Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp485), loc), loc),({
! struct Cyc_Tcgenrep_RepInfo* _temp488[ 1u]; _temp488[ 0u]= _temp481;(( struct
! Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp488,
! sizeof( struct Cyc_Tcgenrep_RepInfo*), 1u));}), 0); goto _LL337;}} _LL349: {
! struct _tagged_arr* _temp490= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); struct Cyc_Core_Opt* _temp491=({ struct Cyc_Core_Opt*
! _temp493=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp493->v=( void*) Cyc_Tcgenrep_gen_vardecl_sc( _temp490, Cyc_Tcgenrep_tunionfield_typ(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_tuple_str), 0,( void*) Cyc_Absyn_Extern,
! loc); _temp493;}); dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(
! _temp490), loc), loc), 0, _temp491);{ struct Cyc_List_List* _temp492=(( struct
! Cyc_List_List*(*)( void*(* f)( struct _tuple4*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Tcgenrep_get_second, _temp396); dict= Cyc_Tcgenrep_buildRepTuple( te, dict,
! loc, _temp490, type, _temp492); goto _LL337;}} _LL351: if( _temp398 ==  0){({
! void* _temp494[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
! Cyc_Tcutil_impos)( _tag_arr("gen(): typedef definition must be present by now",
! sizeof( unsigned char), 49u), _tag_arr( _temp494, sizeof( void*), 0u));});}{
! struct _tuple9 _temp497; struct Cyc_Tcgenrep_RepInfo* _temp498; struct Cyc_Dict_Dict*
! _temp500; struct _tuple9* _temp495= Cyc_Tcgenrep_lookupRep( te, dict, loc,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp398))->v); _temp497=* _temp495; _LL501:
! _temp500= _temp497.f1; goto _LL499; _LL499: _temp498= _temp497.f2; goto _LL496;
! _LL496: dict=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, void* k,
! struct Cyc_Tcgenrep_RepInfo* v)) Cyc_Dict_insert)( _temp500, type, _temp498);
! goto _LL337;} _LL353: if( _temp404 ==  0){({ void* _temp502[ 0u]={};(( int(*)(
! struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): struct declaration must be present by now",
! sizeof( unsigned char), 49u), _tag_arr( _temp502, sizeof( void*), 0u));});}{
! struct Cyc_Absyn_Structdecl* _temp503=*(( struct Cyc_Absyn_Structdecl**)
! _check_null( _temp404)); if( _temp503->fields ==  0){({ void* _temp504[ 0u]={};((
! int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen(): external structs not yet handled", sizeof( unsigned char), 40u),
! _tag_arr( _temp504, sizeof( void*), 0u));});} if(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp503->fields))->v !=  0?(( int(*)( int(*
! pred)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_forall)(
! Cyc_Tcgenrep_has_bitfield,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp503->fields))->v): 0){ int _temp505=(( int(*)( int(* f)( int,
! struct Cyc_Absyn_Structfield*), int accum, struct Cyc_List_List* x)) Cyc_List_fold_left)(
! Cyc_Tcgenrep_add_bitfield_sizes, 0,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp503->fields))->v); int _temp506= _temp505 /  8 + ( _temp505 % 
! 8 ==  0? 0: 1); void* base_type=( void*)({ struct Cyc_Absyn_ArrayType_struct*
! _temp514=( struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp514[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp515; _temp515.tag= Cyc_Absyn_ArrayType;
! _temp515.f1=( void*) Cyc_Absyn_uchar_t; _temp515.f2= Cyc_Tcgenrep_tq_none;
! _temp515.f3=( struct Cyc_Absyn_Exp*) Cyc_Tcgenrep_cnst_int( _temp506, loc);
! _temp515;}); _temp514;}); struct _tuple9 _temp509; struct Cyc_Tcgenrep_RepInfo*
! _temp510; struct Cyc_Dict_Dict* _temp512; struct _tuple9* _temp507= Cyc_Tcgenrep_lookupRep(
! te, dict, loc, base_type); _temp509=* _temp507; _LL513: _temp512= _temp509.f1;
! goto _LL511; _LL511: _temp510= _temp509.f2; goto _LL508; _LL508: dict=(( struct
! Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, void* k, struct Cyc_Tcgenrep_RepInfo*
! v)) Cyc_Dict_insert)( _temp512, type, _temp510);} else{ struct _tagged_arr*
! _temp516= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof( unsigned char), 4u));
! struct Cyc_Core_Opt* _temp517=({ struct Cyc_Core_Opt* _temp519=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp519->v=( void*) Cyc_Tcgenrep_gen_vardecl_sc(
! _temp516, Cyc_Tcgenrep_tunionfield_typ(& Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_tuple_str),
! 0,( void*) Cyc_Absyn_Extern, loc); _temp519;}); dict= Cyc_Tcgenrep_update_info(
! dict, type, 0,( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp(
! Cyc_Tcgenrep_toplevel_name( _temp516), loc), loc), 0, _temp517);{ struct Cyc_List_List*
! _temp518=(( struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Structfield*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type,(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp503->fields))->v);
! dict= Cyc_Tcgenrep_buildRepTuple( te, dict, loc, _temp516, type, _temp518);}}
! goto _LL337;} _LL355: if( _temp410 !=  0?(( int(*)( int(* pred)( struct Cyc_Absyn_Structfield*),
! struct Cyc_List_List* x)) Cyc_List_forall)( Cyc_Tcgenrep_has_bitfield, _temp410):
! 0){ int _temp520=(( int(*)( int(* f)( int, struct Cyc_Absyn_Structfield*), int
! accum, struct Cyc_List_List* x)) Cyc_List_fold_left)( Cyc_Tcgenrep_add_bitfield_sizes,
! 0, _temp410); int _temp521= _temp520 /  8 + ( _temp520 %  8 ==  0? 0: 1); void*
! base_type=( void*)({ struct Cyc_Absyn_ArrayType_struct* _temp529=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp529[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp530; _temp530.tag= Cyc_Absyn_ArrayType; _temp530.f1=(
! void*) Cyc_Absyn_uchar_t; _temp530.f2= Cyc_Tcgenrep_tq_none; _temp530.f3=(
! struct Cyc_Absyn_Exp*) Cyc_Tcgenrep_cnst_int( _temp521, loc); _temp530;});
! _temp529;}); struct _tuple9 _temp524; struct Cyc_Tcgenrep_RepInfo* _temp525;
! struct Cyc_Dict_Dict* _temp527; struct _tuple9* _temp522= Cyc_Tcgenrep_lookupRep(
! te, dict, loc, base_type); _temp524=* _temp522; _LL528: _temp527= _temp524.f1;
! goto _LL526; _LL526: _temp525= _temp524.f2; goto _LL523; _LL523: dict=(( struct
! Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, void* k, struct Cyc_Tcgenrep_RepInfo*
! v)) Cyc_Dict_insert)( _temp527, type, _temp525);} else{ struct Cyc_List_List*
! _temp531=(( struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Structfield*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type,
! _temp410); struct _tagged_arr* _temp532= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep",
  sizeof( unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepTuple( te, dict, loc,
! _temp532, type, _temp531);} goto _LL337; _LL357:({ void* _temp533[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("found void in gen() expression", sizeof( unsigned char), 31u),
! _tag_arr( _temp533, sizeof( void*), 0u));}); goto _LL337; _LL359:({ void*
! _temp534[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found evar in gen() expression",
! sizeof( unsigned char), 31u), _tag_arr( _temp534, sizeof( void*), 0u));}); goto
! _LL337; _LL361:({ void* _temp535[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found tyvar in gen() expression",
! sizeof( unsigned char), 32u), _tag_arr( _temp535, sizeof( void*), 0u));}); goto
! _LL337;({ void* _temp536[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found variable type in gen() expression",
! sizeof( unsigned char), 40u), _tag_arr( _temp536, sizeof( void*), 0u));}); goto
! _LL337; _LL363:({ void* _temp537[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found function type in gen() expression",
! sizeof( unsigned char), 40u), _tag_arr( _temp537, sizeof( void*), 0u));}); goto
! _LL337; _LL365: goto _LL367; _LL367: goto _LL369; _LL369: goto _LL371; _LL371:
! goto _LL373; _LL373:({ void* _temp538[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("gen(): unhandled region, handle or effect type",
! sizeof( unsigned char), 47u), _tag_arr( _temp538, sizeof( void*), 0u));}); goto
! _LL337; _LL375: if( _temp426->tvs !=  0){({ void* _temp539[ 0u]={};(( int(*)(
! struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunion type variables not handled yet",
! sizeof( unsigned char), 45u), _tag_arr( _temp539, sizeof( void*), 0u));});} if(
! _temp426->fields ==  0){({ void* _temp540[ 0u]={};(( int(*)( struct _tagged_arr
! fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunion fields must be present by now",
! sizeof( unsigned char), 44u), _tag_arr( _temp540, sizeof( void*), 0u));});}{
! struct _tagged_arr* _temp541= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); struct Cyc_Core_Opt* _temp542=({ struct Cyc_Core_Opt*
! _temp546=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp546->v=( void*) Cyc_Tcgenrep_gen_vardecl_sc( _temp541, Cyc_Tcgenrep_tunionfield_typ(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_tunion_str), 0,( void*) Cyc_Absyn_Extern,
! loc); _temp546;}); dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(
! _temp541), loc), loc), 0, _temp542);{ struct Cyc_List_List* _temp543=( struct
! Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp426->fields))->v;
! struct Cyc_List_List* _temp544=(( struct Cyc_List_List*(*)( int(* f)( struct Cyc_Absyn_Tunionfield*),
! struct Cyc_List_List* x)) Cyc_List_filter)( Cyc_Tcgenrep_filter_empty_tunionfield,
! _temp543); struct Cyc_List_List* _temp545=(( struct Cyc_List_List*(*)( void*(* f)(
! struct Cyc_Absyn_Tunionfield*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_check_tunionfield_and_get_type,
! _temp544); dict= Cyc_Tcgenrep_buildRepTunion( te, dict, loc, _temp541, type,
! _temp545); goto _LL337;}} _LL377:({ void* _temp547[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunion must be resolved by now",
! sizeof( unsigned char), 38u), _tag_arr( _temp547, sizeof( void*), 0u));}); goto
! _LL337; _LL379: if( _temp427.targs !=  0){({ void* _temp548[ 0u]={};(( int(*)(
! struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunionfield type parameters not handled yet",
! sizeof( unsigned char), 51u), _tag_arr( _temp548, sizeof( void*), 0u));});}{
! void* _temp549=( void*) _temp427.field_info; struct Cyc_Absyn_Tunionfield*
! _temp555; struct Cyc_Absyn_Tuniondecl* _temp557; _LL551: if(*(( int*) _temp549)
! ==  Cyc_Absyn_KnownTunionfield){ _LL558: _temp557=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp549)->f1; goto _LL556; _LL556: _temp555=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp549)->f2; goto _LL552;} else{ goto _LL553;} _LL553: goto _LL554; _LL552:
! if( _temp555->tvs !=  0){({ void* _temp559[ 0u]={};(( int(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunionfield type parameters not handled yet",
! sizeof( unsigned char), 51u), _tag_arr( _temp559, sizeof( void*), 0u));});}{
! struct Cyc_List_List* _temp560=(( struct Cyc_List_List*(*)( void*(* f)( struct
  _tuple4*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_get_second,
! _temp555->typs); struct Cyc_List_List* _temp561=({ struct Cyc_List_List*
! _temp563=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp563->hd=( void*) Cyc_Absyn_uint_t; _temp563->tl= _temp560; _temp563;});
! struct _tagged_arr* _temp562= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepTuple( te, dict, loc, _temp562,
! type, _temp561); goto _LL550;} _LL554:({ void* _temp564[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunionfield must be known at this point",
! sizeof( unsigned char), 47u), _tag_arr( _temp564, sizeof( void*), 0u));}); goto
! _LL550; _LL550:;} goto _LL337; _LL381: if( _temp429 ==  0){({ void* _temp565[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen(): union declaration must be present by now", sizeof(
! unsigned char), 48u), _tag_arr( _temp565, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Uniondecl*
! _temp566=*(( struct Cyc_Absyn_Uniondecl**) _check_null( _temp429)); if( _temp566->tvs
! !=  0){({ void* _temp567[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
! _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen: unions with parameters not yet supported",
! sizeof( unsigned char), 46u), _tag_arr( _temp567, sizeof( void*), 0u));});} if(
! _temp566->fields ==  0){({ void* _temp568[ 0u]={};(( int(*)( struct _tagged_arr
! fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): union fields must be present by now",
! sizeof( unsigned char), 43u), _tag_arr( _temp568, sizeof( void*), 0u));});}{
! struct Cyc_List_List* _temp569=(( struct Cyc_List_List*(*)( void*(* f)( struct
! Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type,(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp566->fields))->v);
! struct _tagged_arr* _temp570= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepUnion( te, dict, loc, _temp570,
! type, _temp569); goto _LL337;}} _LL383: { struct Cyc_List_List* _temp571=((
  struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type, _temp435); struct
! _tagged_arr* _temp572= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepUnion( te, dict, loc, _temp572,
! type, _temp571); goto _LL337;} _LL385: { struct _tagged_arr* _temp573= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("rep", sizeof( unsigned char), 4u)); struct Cyc_Absyn_Decl* _temp574=
  Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_int_str,
! _temp573,({ struct Cyc_Absyn_Exp* _temp576[ 1u]; _temp576[ 0u]= Cyc_Tcgenrep_cnst_int(
  32, loc);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp576, sizeof( struct Cyc_Absyn_Exp*), 1u));}), loc); dict= Cyc_Tcgenrep_update_info(
! dict, type,({ struct Cyc_Absyn_Decl* _temp575[ 1u]; _temp575[ 0u]= _temp574;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp575, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
! Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp573), loc), loc), 0, 0);
! goto _LL337;} _LL337:;} return({ struct _tuple9* _temp577=( struct _tuple9*)
! _cycalloc( sizeof( struct _tuple9)); _temp577->f1= dict; _temp577->f2=(( struct
  Cyc_Tcgenrep_RepInfo*(*)( struct Cyc_Dict_Dict* d, void* k)) Cyc_Dict_lookup)(
! dict, type); _temp577;});}}} static int Cyc_Tcgenrep_not_emitted_filter( struct
  Cyc_Tcgenrep_RepInfo* ri){ return ri->emitted ==  0;} static void Cyc_Tcgenrep_mark_emitted(
! struct Cyc_Tcgenrep_RepInfo* ri){ ri->emitted= 1;} struct _tuple12{ struct Cyc_Dict_Dict*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_Exp* f3; } ; struct _tuple12 Cyc_Tcgenrep_tcGenrep(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Tcenv_Genv* ge, struct Cyc_Position_Segment*
  loc, void* type, struct Cyc_Dict_Dict* dict){ Cyc_Tcutil_check_valid_toplevel_type(
! loc, te, type); Cyc_Tcutil_check_valid_toplevel_type( loc, te, type);{ struct
! _tuple9 _temp580; struct Cyc_Tcgenrep_RepInfo* _temp581; struct Cyc_Dict_Dict*
! _temp583; struct _tuple9* _temp578= Cyc_Tcgenrep_lookupRep( te, dict, loc, type);
! _temp580=* _temp578; _LL584: _temp583= _temp580.f1; goto _LL582; _LL582:
! _temp581= _temp580.f2; goto _LL579; _LL579: { struct Cyc_List_List* _temp585=
! Cyc_Tcgenrep_dfs( _temp581);({ struct Cyc_Std_String_pa_struct _temp587;
! _temp587.tag= Cyc_Std_String_pa; _temp587.f1=( struct _tagged_arr) Cyc_Absynpp_decllist2string(
! _temp585);{ void* _temp586[ 1u]={& _temp587}; Cyc_Std_printf( _tag_arr("Emitting...\n%s\n",
! sizeof( unsigned char), 16u), _tag_arr( _temp586, sizeof( void*), 1u));}});
! return({ struct _tuple12 _temp588; _temp588.f1= _temp583; _temp588.f2= _temp585;
! _temp588.f3=( struct Cyc_Absyn_Exp*) _check_null( _temp581->exp); _temp588;});}}}
--- 655,1467 ----
  t1str, t2str);}} struct Cyc_Dict_Dict* Cyc_Tcgenrep_empty_typerep_dict(){ return((
  struct Cyc_Dict_Dict*(*)( int(* cmp)( void*, void*))) Cyc_Dict_empty)( Cyc_Tcgenrep_typecmp);}
  void Cyc_Tcgenrep_print_dict_entry( void* type, struct Cyc_Tcgenrep_RepInfo*
! info){({ struct Cyc_Std_Int_pa_struct _temp2; _temp2.tag= Cyc_Std_Int_pa; _temp2.f1=(
! int)(( unsigned int) info->emitted);{ struct Cyc_Std_String_pa_struct _temp1;
! _temp1.tag= Cyc_Std_String_pa; _temp1.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! type);{ void* _temp0[ 2u]={& _temp1,& _temp2}; Cyc_Std_printf( _tag_arr("(%s,%d)\n",
! sizeof( unsigned char), 9u), _tag_arr( _temp0, sizeof( void*), 2u));}}});} void
! Cyc_Tcgenrep_print_typerep_dict( struct Cyc_Dict_Dict* dict){(( void(*)( void(*
! f)( void*, struct Cyc_Tcgenrep_RepInfo*), struct Cyc_Dict_Dict* d)) Cyc_Dict_iter)(
! Cyc_Tcgenrep_print_dict_entry, dict);} static int Cyc_Tcgenrep_rephash( struct
! Cyc_Tcgenrep_RepInfo* ri){ return( int) ri;} static int Cyc_Tcgenrep_repcmp(
! struct Cyc_Tcgenrep_RepInfo* r1, struct Cyc_Tcgenrep_RepInfo* r2){ unsigned int
! r1p; unsigned int r2p; r1p=( unsigned int) r1; r2p=( unsigned int) r2; if( r1 < 
! r2){ return - 1;} else{ if( r1 ==  r2){ return 0;} else{ return 1;}}} static
! struct Cyc_Absyn_Tunionfield* Cyc_Tcgenrep_getField( struct Cyc_Absyn_Tuniondecl*
! td, struct _tuple1* fieldname){ if( td->fields ==  0){({ void* _temp3[ 0u]={};((
! int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("Could not find field in tuniondecl", sizeof( unsigned char), 35u),
! _tag_arr( _temp3, sizeof( void*), 0u));});} else{ struct Cyc_List_List* l=(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( td->fields))->v;
! for( 0; l !=  0; l=(( struct Cyc_List_List*) _check_null( l))->tl){ if( ! Cyc_Absyn_qvar_cmp(((
! struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null( l))->hd)->name,
! fieldname)){ return( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( l))->hd;}}}({ void* _temp4[ 0u]={};(( int(*)( struct _tagged_arr
! fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("Could not find field in tuniondecl",
! sizeof( unsigned char), 35u), _tag_arr( _temp4, sizeof( void*), 0u));});( int)
! _throw(( void*) Cyc_Tcutil_TypeErr);} static unsigned char _temp5[ 9u]="Tcgenrep";
! static struct _tagged_arr Cyc_Tcgenrep_tcgenrep_nm={ _temp5, _temp5, _temp5 +  9u};
! static struct Cyc_List_List Cyc_Tcgenrep_l={( void*)& Cyc_Tcgenrep_tcgenrep_nm,
  0}; static struct Cyc_Absyn_Abs_n_struct Cyc_Tcgenrep_tcgenrep_nmspace={ 1u,(
  struct Cyc_List_List*)& Cyc_Tcgenrep_l}; static void* Cyc_Tcgenrep_tcgenrep_nmspace2=(
! void*)& Cyc_Tcgenrep_tcgenrep_nmspace; static unsigned char _temp7[ 8u]="Typerep";
! static struct _tagged_arr Cyc_Tcgenrep_typerep_nm={ _temp7, _temp7, _temp7 +  8u};
! static struct Cyc_List_List Cyc_Tcgenrep_l2={( void*)& Cyc_Tcgenrep_typerep_nm,
  0}; static struct Cyc_Absyn_Abs_n_struct Cyc_Tcgenrep_typerep_nmspace={ 1u,(
  struct Cyc_List_List*)& Cyc_Tcgenrep_l2}; static struct Cyc_List_List* Cyc_Tcgenrep_dfsvisit(
  struct Cyc_Tcgenrep_RepInfo* ri, struct Cyc_Hashtable_Table* visited){ struct
! _handler_cons _temp9; _push_handler(& _temp9);{ int _temp11= 0; if( setjmp(
! _temp9.handler)){ _temp11= 1;} if( ! _temp11){(( int(*)( struct Cyc_Hashtable_Table*
  t, struct Cyc_Tcgenrep_RepInfo* key)) Cyc_Hashtable_lookup)( visited, ri);{
! struct Cyc_List_List* _temp12= 0; _npop_handler( 0u); return _temp12;};
! _pop_handler();} else{ void* _temp10=( void*) _exn_thrown; void* _temp14=
! _temp10; _LL16: if( _temp14 ==  Cyc_Core_Not_found){ goto _LL17;} else{ goto
! _LL18;} _LL18: goto _LL19; _LL17:(( void(*)( struct Cyc_Hashtable_Table* t,
  struct Cyc_Tcgenrep_RepInfo* key, int val)) Cyc_Hashtable_insert)( visited, ri,
  1);{ struct Cyc_List_List* ds= 0;{ struct Cyc_List_List* l= ri->dependencies;
  for( 0; l !=  0; l=(( struct Cyc_List_List*) _check_null( l))->tl){ ds=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
  ds, Cyc_Tcgenrep_dfsvisit(( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_List_List*)
  _check_null( l))->hd, visited));}} if( ri->emitted ==  0){ if( ri->fwd_decl != 
! 0){ ds=({ struct Cyc_List_List* _temp20=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp20->hd=( void*)({ struct Cyc_Absyn_Decl*
! _temp21[ 1u]; _temp21[ 0u]=( struct Cyc_Absyn_Decl*)(( struct Cyc_Core_Opt*)
  _check_null( ri->fwd_decl))->v;(( struct Cyc_List_List*(*)( struct _tagged_arr))
! Cyc_List_list)( _tag_arr( _temp21, sizeof( struct Cyc_Absyn_Decl*), 1u));});
! _temp20->tl= ds; _temp20;});}{ struct Cyc_List_List* _temp22=({ struct Cyc_List_List*
! _temp23=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp23->hd=( void*) ri->decls; _temp23->tl= 0; _temp23;}); ri->emitted= 1;
  return(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_imp_append)( ds, _temp22);}} else{ return ds;}} _LL19:( void)
! _throw( _temp14); _LL15:;}}} static struct Cyc_List_List* Cyc_Tcgenrep_dfs(
  struct Cyc_Tcgenrep_RepInfo* ri){ struct Cyc_Hashtable_Table* tab=(( struct Cyc_Hashtable_Table*(*)(
  int sz, int(* cmp)( struct Cyc_Tcgenrep_RepInfo*, struct Cyc_Tcgenrep_RepInfo*),
  int(* hash)( struct Cyc_Tcgenrep_RepInfo*))) Cyc_Hashtable_create)( 53, Cyc_Tcgenrep_repcmp,
  Cyc_Tcgenrep_rephash); struct Cyc_List_List* ds= Cyc_Tcgenrep_dfsvisit( ri, tab);
  return(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_flatten)(
! ds);} static unsigned char _temp24[ 11u]="Typestruct"; static struct _tagged_arr
! Cyc_Tcgenrep_typestruct_str={ _temp24, _temp24, _temp24 +  11u}; static
! unsigned char _temp25[ 4u]="Var"; static struct _tagged_arr Cyc_Tcgenrep_var_str={
! _temp25, _temp25, _temp25 +  4u}; static unsigned char _temp26[ 4u]="Int";
! static struct _tagged_arr Cyc_Tcgenrep_int_str={ _temp26, _temp26, _temp26 +  4u};
! static unsigned char _temp27[ 6u]="Float"; static struct _tagged_arr Cyc_Tcgenrep_float_str={
! _temp27, _temp27, _temp27 +  6u}; static unsigned char _temp28[ 7u]="Double";
! static struct _tagged_arr Cyc_Tcgenrep_double_str={ _temp28, _temp28, _temp28 + 
! 7u}; static unsigned char _temp29[ 8u]="ThinPtr"; static struct _tagged_arr Cyc_Tcgenrep_thinptr_str={
! _temp29, _temp29, _temp29 +  8u}; static unsigned char _temp30[ 7u]="FatPtr";
! static struct _tagged_arr Cyc_Tcgenrep_fatptr_str={ _temp30, _temp30, _temp30 + 
! 7u}; static unsigned char _temp31[ 6u]="Tuple"; static struct _tagged_arr Cyc_Tcgenrep_tuple_str={
! _temp31, _temp31, _temp31 +  6u}; static unsigned char _temp32[ 7u]="TUnion";
! static struct _tagged_arr Cyc_Tcgenrep_tunion_str={ _temp32, _temp32, _temp32 + 
! 7u}; static unsigned char _temp33[ 6u]="Union"; static struct _tagged_arr Cyc_Tcgenrep_union_str={
! _temp33, _temp33, _temp33 +  6u}; static struct _tuple1 Cyc_Tcgenrep_typestruct_name={(
  void*)& Cyc_Tcgenrep_typerep_nmspace,& Cyc_Tcgenrep_typestruct_str}; static
  struct Cyc_Absyn_Tuniondecl** Cyc_Tcgenrep_typestruct_decl= 0; static int Cyc_Tcgenrep_gen_id_counter=
  0; static struct _tagged_arr* Cyc_Tcgenrep_new_gen_id( struct _tagged_arr name){
! return({ struct _tagged_arr* _temp34=( struct _tagged_arr*) _cycalloc( sizeof(
! struct _tagged_arr)); _temp34[ 0]=( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp37; _temp37.tag= Cyc_Std_Int_pa; _temp37.f1=( int)(( unsigned int) Cyc_Tcgenrep_gen_id_counter
! ++);{ struct Cyc_Std_String_pa_struct _temp36; _temp36.tag= Cyc_Std_String_pa;
! _temp36.f1=( struct _tagged_arr) name;{ void* _temp35[ 2u]={& _temp36,& _temp37};
  Cyc_Std_aprintf( _tag_arr("_gen%s_%d", sizeof( unsigned char), 10u), _tag_arr(
! _temp35, sizeof( void*), 2u));}}}); _temp34;});} static void Cyc_Tcgenrep_print_params(
! struct Cyc_List_List* l){({ void* _temp38[ 0u]={}; Cyc_Std_printf( _tag_arr("<",
! sizeof( unsigned char), 2u), _tag_arr( _temp38, sizeof( void*), 0u));});{ struct
  Cyc_List_List* p= l; for( 0; p !=  0; p=(( struct Cyc_List_List*) _check_null( p))->tl){({
! struct Cyc_Std_Int_pa_struct _temp41; _temp41.tag= Cyc_Std_Int_pa; _temp41.f1=(
  int)(( unsigned int)(( int)((( struct Cyc_List_List*) _check_null( p))->tl !=  0?',':' ')));{
! struct Cyc_Std_String_pa_struct _temp40; _temp40.tag= Cyc_Std_String_pa; _temp40.f1=(
  struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_List_List*)
! _check_null( p))->hd);{ void* _temp39[ 2u]={& _temp40,& _temp41}; Cyc_Std_printf(
! _tag_arr("%s%c", sizeof( unsigned char), 5u), _tag_arr( _temp39, sizeof( void*),
! 2u));}}});}}({ void* _temp42[ 0u]={}; Cyc_Std_printf( _tag_arr(">\n", sizeof(
! unsigned char), 3u), _tag_arr( _temp42, sizeof( void*), 0u));});} static void
! Cyc_Tcgenrep_print_tvars( struct Cyc_List_List* l){({ void* _temp43[ 0u]={}; Cyc_Std_printf(
! _tag_arr("<", sizeof( unsigned char), 2u), _tag_arr( _temp43, sizeof( void*), 0u));});{
  struct Cyc_List_List* p= l; for( 0; p !=  0; p=(( struct Cyc_List_List*)
! _check_null( p))->tl){({ struct Cyc_Std_Int_pa_struct _temp46; _temp46.tag= Cyc_Std_Int_pa;
! _temp46.f1=( int)(( unsigned int)(( int)((( struct Cyc_List_List*) _check_null(
! p))->tl !=  0?',':' ')));{ struct Cyc_Std_String_pa_struct _temp45; _temp45.tag=
! Cyc_Std_String_pa; _temp45.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( p))->hd)->name;{ void* _temp44[ 2u]={&
! _temp45,& _temp46}; Cyc_Std_printf( _tag_arr("%s%c", sizeof( unsigned char), 5u),
! _tag_arr( _temp44, sizeof( void*), 2u));}}});}}({ void* _temp47[ 0u]={}; Cyc_Std_printf(
! _tag_arr(">\n", sizeof( unsigned char), 3u), _tag_arr( _temp47, sizeof( void*),
  0u));});} static struct Cyc_Absyn_Rel_n_struct Cyc_Tcgenrep_top_nm_0={ 0u, 0};
  static void* Cyc_Tcgenrep_top_nm=( void*)& Cyc_Tcgenrep_top_nm_0; static struct
  _tuple1* Cyc_Tcgenrep_toplevel_name( struct _tagged_arr* name){ return({ struct
! _tuple1* _temp49=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp49->f1=
! Cyc_Tcgenrep_top_nm; _temp49->f2=( struct _tagged_arr*) name; _temp49;});}
  static struct _tuple1* Cyc_Tcgenrep_relative_name( struct Cyc_List_List* pathl,
  struct _tagged_arr* name){ struct Cyc_Absyn_Rel_n_struct* path=({ struct Cyc_Absyn_Rel_n_struct*
! _temp51=( struct Cyc_Absyn_Rel_n_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Rel_n_struct));
! _temp51[ 0]=({ struct Cyc_Absyn_Rel_n_struct _temp52; _temp52.tag= Cyc_Absyn_Rel_n;
! _temp52.f1= pathl; _temp52;}); _temp51;}); return({ struct _tuple1* _temp50=(
! struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp50->f1=( void*) path;
! _temp50->f2=( struct _tagged_arr*) name; _temp50;});} static struct Cyc_Absyn_Decl*
  Cyc_Tcgenrep_gen_decl( struct _tagged_arr* name, void* type, struct Cyc_Absyn_Exp*
  init, struct Cyc_Position_Segment* seg){ struct _tuple1* qvar= Cyc_Tcgenrep_toplevel_name(
  name); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_new_vardecl( qvar, type, init);(
  void*)( vd->sc=( void*)(( void*) Cyc_Absyn_Static));{ struct Cyc_Absyn_Var_d_struct*
! r1=({ struct Cyc_Absyn_Var_d_struct* _temp53=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp53[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp54; _temp54.tag= Cyc_Absyn_Var_d; _temp54.f1= vd; _temp54;}); _temp53;});
  void* r2=( void*) r1; return Cyc_Absyn_new_decl( r2, seg);}} static struct Cyc_Absyn_Decl*
  Cyc_Tcgenrep_gen_vardecl_sc( struct _tagged_arr* name, void* type, struct Cyc_Absyn_Exp*
  init, void* sc, struct Cyc_Position_Segment* seg){ struct _tuple1* qvar= Cyc_Tcgenrep_toplevel_name(
  name); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_new_vardecl( qvar, type, init);(
  void*)( vd->sc=( void*) sc);{ struct Cyc_Absyn_Var_d_struct* r1=({ struct Cyc_Absyn_Var_d_struct*
! _temp55=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp55[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp56; _temp56.tag= Cyc_Absyn_Var_d;
! _temp56.f1= vd; _temp56;}); _temp55;}); void* r2=( void*) r1; return Cyc_Absyn_new_decl(
  r2, seg);}} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_cnst_string( struct
  _tagged_arr s, struct Cyc_Position_Segment* seg){ return Cyc_Absyn_const_exp((
! void*)({ struct Cyc_Absyn_String_c_struct* _temp57=( struct Cyc_Absyn_String_c_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_String_c_struct)); _temp57[ 0]=({ struct Cyc_Absyn_String_c_struct
! _temp58; _temp58.tag= Cyc_Absyn_String_c; _temp58.f1= s; _temp58;}); _temp57;}),
  seg);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_cnst_int( int i, struct Cyc_Position_Segment*
  seg){ return Cyc_Absyn_const_exp(( void*)({ struct Cyc_Absyn_Int_c_struct*
! _temp59=( struct Cyc_Absyn_Int_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct));
! _temp59[ 0]=({ struct Cyc_Absyn_Int_c_struct _temp60; _temp60.tag= Cyc_Absyn_Int_c;
! _temp60.f1=( void*)(( void*) Cyc_Absyn_Signed); _temp60.f2= i; _temp60;});
! _temp59;}), seg);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_cnst_int_cls(
  struct Cyc_Position_Segment* seg, int i){ return Cyc_Absyn_const_exp(( void*)({
! struct Cyc_Absyn_Int_c_struct* _temp61=( struct Cyc_Absyn_Int_c_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct)); _temp61[ 0]=({ struct Cyc_Absyn_Int_c_struct
! _temp62; _temp62.tag= Cyc_Absyn_Int_c; _temp62.f1=( void*)(( void*) Cyc_Absyn_Signed);
! _temp62.f2= i; _temp62;}); _temp61;}), seg);} static int Cyc_Tcgenrep_size_of2int(
! void* sz){ void* _temp63= sz; _LL65: if( _temp63 == ( void*) Cyc_Absyn_B1){ goto
! _LL66;} else{ goto _LL67;} _LL67: if( _temp63 == ( void*) Cyc_Absyn_B2){ goto
! _LL68;} else{ goto _LL69;} _LL69: if( _temp63 == ( void*) Cyc_Absyn_B4){ goto
! _LL70;} else{ goto _LL71;} _LL71: if( _temp63 == ( void*) Cyc_Absyn_B8){ goto
! _LL72;} else{ goto _LL64;} _LL66: return 8; _LL68: return 16; _LL70: return 32;
! _LL72: return 64; _LL64:;} static void* Cyc_Tcgenrep_array_typ( void* ty, struct
  Cyc_Absyn_Tqual tq, struct Cyc_Absyn_Exp* e){ return( void*)({ struct Cyc_Absyn_ArrayType_struct*
! _temp73=( struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp73[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp74; _temp74.tag= Cyc_Absyn_ArrayType;
! _temp74.f1=( void*) ty; _temp74.f2= tq; _temp74.f3= e; _temp74;}); _temp73;});}
  static void* Cyc_Tcgenrep_tunion_typ( struct _tagged_arr* name){ return( void*)({
! struct Cyc_Absyn_TunionType_struct* _temp75=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp75[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp76; _temp76.tag= Cyc_Absyn_TunionType; _temp76.f1=({
! struct Cyc_Absyn_TunionInfo _temp77; _temp77.tunion_info=( void*)(( void*)({
! struct Cyc_Absyn_UnknownTunion_struct* _temp78=( struct Cyc_Absyn_UnknownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_UnknownTunion_struct)); _temp78[ 0]=({
! struct Cyc_Absyn_UnknownTunion_struct _temp79; _temp79.tag= Cyc_Absyn_UnknownTunion;
! _temp79.f1=({ struct Cyc_Absyn_UnknownTunionInfo _temp80; _temp80.name= Cyc_Tcgenrep_toplevel_name(
! name); _temp80.is_xtunion= 0; _temp80;}); _temp79;}); _temp78;})); _temp77.targs=
! 0; _temp77.rgn=( void*)(( void*) Cyc_Absyn_HeapRgn); _temp77;}); _temp76;});
! _temp75;});} static void* Cyc_Tcgenrep_tunionfield_typ( struct _tagged_arr* name,
  struct _tagged_arr* fieldname){ return( void*)({ struct Cyc_Absyn_TunionFieldType_struct*
! _temp81=( struct Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_TunionFieldType_struct)); _temp81[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct
! _temp82; _temp82.tag= Cyc_Absyn_TunionFieldType; _temp82.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp83; _temp83.field_info=( void*)(( void*)({ struct Cyc_Absyn_UnknownTunionfield_struct*
! _temp84=( struct Cyc_Absyn_UnknownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_UnknownTunionfield_struct)); _temp84[ 0]=({ struct Cyc_Absyn_UnknownTunionfield_struct
! _temp85; _temp85.tag= Cyc_Absyn_UnknownTunionfield; _temp85.f1=({ struct Cyc_Absyn_UnknownTunionFieldInfo
! _temp86; _temp86.tunion_name= Cyc_Tcgenrep_toplevel_name( name); _temp86.field_name=
! Cyc_Tcgenrep_toplevel_name( fieldname); _temp86.is_xtunion= 0; _temp86;});
! _temp85;}); _temp84;})); _temp83.targs= 0; _temp83;}); _temp82;}); _temp81;});}
  static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_call_exp( struct _tuple1* name, struct
  Cyc_List_List* args, struct Cyc_Position_Segment* loc){ return Cyc_Absyn_unknowncall_exp(
  Cyc_Absyn_unknownid_exp( name, loc), args, loc);} static struct Cyc_Absyn_Decl*
  Cyc_Tcgenrep_tunion_constructor_decl( struct _tagged_arr* tunionname, struct
  _tagged_arr* fieldname, struct _tagged_arr* varname, struct Cyc_List_List* args,
! struct Cyc_Position_Segment* loc){ void* _temp87= Cyc_Tcgenrep_tunionfield_typ(
! tunionname, fieldname); struct Cyc_Absyn_Exp* _temp88= Cyc_Tcgenrep_call_exp(
  Cyc_Tcgenrep_toplevel_name( fieldname), args, loc); struct Cyc_Absyn_Decl*
! _temp89= Cyc_Tcgenrep_gen_decl( varname, _temp87,( struct Cyc_Absyn_Exp*)
! _temp88, loc); return _temp89;} struct _tuple4{ struct Cyc_Absyn_Tqual f1; void*
  f2; } ; static void* Cyc_Tcgenrep_get_second( struct _tuple4* pair){ return(*
  pair).f2;} struct _tuple5{ struct _tagged_arr* f1; struct Cyc_Absyn_Exp* f2; } ;
  static struct _tagged_arr* Cyc_Tcgenrep_get_first( struct _tuple5* pair){ return(*
! pair).f1;} static unsigned char _temp90[ 5u]="list"; static struct _tagged_arr
! Cyc_Tcgenrep_list_str={ _temp90, _temp90, _temp90 +  5u}; static unsigned char
! _temp91[ 5u]="List"; static struct _tagged_arr Cyc_Tcgenrep_List_str={ _temp91,
! _temp91, _temp91 +  5u}; struct _tuple6{ struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp*
  f2; } ; static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_tuple2_exp_cls( struct Cyc_Position_Segment*
! loc, struct _tuple6* es){ struct _tuple6 _temp94; struct Cyc_Absyn_Exp* _temp95;
! struct Cyc_Absyn_Exp* _temp97; struct _tuple6* _temp92= es; _temp94=* _temp92;
! _LL98: _temp97= _temp94.f1; goto _LL96; _LL96: _temp95= _temp94.f2; goto _LL93;
! _LL93: return Cyc_Absyn_tuple_exp(({ struct Cyc_Absyn_Exp* _temp99[ 2u]; _temp99[
! 1u]= _temp95; _temp99[ 0u]= _temp97;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp99, sizeof( struct Cyc_Absyn_Exp*),
! 2u));}), loc);} static unsigned char _temp100[ 5u]="NULL"; static struct
! _tagged_arr Cyc_Tcgenrep_null_str={ _temp100, _temp100, _temp100 +  5u}; static
  struct Cyc_Absyn_Exp* Cyc_Tcgenrep_list_exp( struct Cyc_List_List* l, struct Cyc_Position_Segment*
  loc){ if( l ==  0){ return Cyc_Absyn_null_exp( loc);} return Cyc_Tcgenrep_call_exp(
! Cyc_Tcgenrep_toplevel_name(& Cyc_Tcgenrep_list_str), l, loc);} static struct Cyc_Absyn_Exp*
! Cyc_Tcgenrep_make_sizeoftyp_exp( struct Cyc_Position_Segment* loc, void* type){
! return Cyc_Absyn_sizeoftyp_exp( type, loc);} struct _tuple7{ struct Cyc_List_List*
! f1; struct Cyc_Absyn_Exp* f2; } ; static struct _tuple7* Cyc_Tcgenrep_tri_sum_exps(
! struct Cyc_Position_Segment* loc, struct _tuple7* carry, struct Cyc_Absyn_Exp* e){
! struct _tuple7 _temp103; struct Cyc_Absyn_Exp* _temp104; struct Cyc_List_List*
! _temp106; struct _tuple7* _temp101= carry; _temp103=* _temp101; _LL107: _temp106=
! _temp103.f1; goto _LL105; _LL105: _temp104= _temp103.f2; goto _LL102; _LL102: {
! struct Cyc_List_List* _temp108=({ struct Cyc_List_List* _temp110=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp110->hd=( void*) _temp104;
! _temp110->tl= _temp106; _temp110;}); return({ struct _tuple7* _temp109=( struct
! _tuple7*) _cycalloc( sizeof( struct _tuple7)); _temp109->f1= _temp108; _temp109->f2=
! Cyc_Absyn_add_exp( e, _temp104, loc); _temp109;});}} static struct Cyc_Absyn_Exp*
! Cyc_Tcgenrep_get_and_cast_ri_exp( struct Cyc_Position_Segment* loc, struct Cyc_Tcgenrep_RepInfo*
! info){ return Cyc_Absyn_cast_exp( Cyc_Tcgenrep_tunion_typ(& Cyc_Tcgenrep_typestruct_str),(
! struct Cyc_Absyn_Exp*) _check_null( info->exp), loc);} static struct _tuple5*
! Cyc_Tcgenrep_gen_id_for_exp( struct Cyc_Absyn_Exp* e){ return({ struct _tuple5*
! _temp111=( struct _tuple5*) _cycalloc( sizeof( struct _tuple5)); _temp111->f1=
! Cyc_Tcgenrep_new_gen_id( _tag_arr("tuple", sizeof( unsigned char), 6u));
! _temp111->f2= e; _temp111;});} struct _tuple8{ void* f1; struct Cyc_Position_Segment*
! f2; } ; static struct Cyc_Absyn_Decl* Cyc_Tcgenrep_gen_decl_cls( struct _tuple8*
! env, struct _tuple5* name_exp){ struct _tuple8 _temp114; struct Cyc_Position_Segment*
! _temp115; void* _temp117; struct _tuple8* _temp112= env; _temp114=* _temp112;
! _LL118: _temp117= _temp114.f1; goto _LL116; _LL116: _temp115= _temp114.f2; goto
! _LL113; _LL113: { struct _tuple5 _temp121; struct Cyc_Absyn_Exp* _temp122;
! struct _tagged_arr* _temp124; struct _tuple5* _temp119= name_exp; _temp121=*
! _temp119; _LL125: _temp124= _temp121.f1; goto _LL123; _LL123: _temp122= _temp121.f2;
! goto _LL120; _LL120: return Cyc_Tcgenrep_gen_decl( _temp124, _temp117,( struct
! Cyc_Absyn_Exp*) _temp122, _temp115);}} static struct _tuple7* Cyc_Tcgenrep_null_designator_exp(
! struct Cyc_Absyn_Exp* e){ return({ struct _tuple7* _temp126=( struct _tuple7*)
! _cycalloc( sizeof( struct _tuple7)); _temp126->f1= 0; _temp126->f2= e; _temp126;});}
  static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_arr_init_exp( struct Cyc_List_List* l,
! struct Cyc_Position_Segment* loc){ struct Cyc_List_List* _temp127=(( struct Cyc_List_List*(*)(
! struct _tuple7*(* f)( struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)(
  Cyc_Tcgenrep_null_designator_exp, l); return Cyc_Absyn_unresolvedmem_exp( 0,
! _temp127, loc);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_address_exp_cls(
  struct Cyc_Position_Segment* loc, struct Cyc_Absyn_Exp* e){ return Cyc_Absyn_address_exp(
  e, loc);} static struct Cyc_Absyn_Exp* Cyc_Tcgenrep_unknownid_exp_cls( struct
  Cyc_Position_Segment* loc, struct _tuple1* e){ return Cyc_Absyn_unknownid_exp( e,
! loc);} static void* Cyc_Tcgenrep_select_structfield_type( struct Cyc_Absyn_Structfield*
! sf){ if( Cyc_Std_strcmp(* sf->name, _tag_arr("", sizeof( unsigned char), 1u)) == 
! 0){({ void* _temp128[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
! _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): anonymous (padding) structfield not handled yet",
! sizeof( unsigned char), 55u), _tag_arr( _temp128, sizeof( void*), 0u));});} if(
! sf->width !=  0){({ void* _temp129[ 0u]={};(( int(*)( struct _tagged_arr fmt,
! struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): bitfields in structs not handled yet",
! sizeof( unsigned char), 44u), _tag_arr( _temp129, sizeof( void*), 0u));});}
  return( void*) sf->type;} static struct Cyc_Dict_Dict* Cyc_Tcgenrep_update_info(
  struct Cyc_Dict_Dict* dict, void* type, struct Cyc_List_List* decls, struct Cyc_Absyn_Exp*
  exp, struct Cyc_List_List* dependencies, struct Cyc_Core_Opt* fwd_decl){ struct
! Cyc_Core_Opt* _temp130=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* d, void*
! k)) Cyc_Dict_lookup_opt)( dict, type); if( _temp130 !=  0){({ struct Cyc_Std_String_pa_struct
! _temp132; _temp132.tag= Cyc_Std_String_pa; _temp132.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! type);{ void* _temp131[ 1u]={& _temp132}; Cyc_Std_printf( _tag_arr("Updated ri for %s\n",
! sizeof( unsigned char), 19u), _tag_arr( _temp131, sizeof( void*), 1u));}});((
! struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*) _check_null( _temp130))->v)->decls=
  decls;(( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*) _check_null(
! _temp130))->v)->exp= exp;(( struct Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*)
! _check_null( _temp130))->v)->dependencies= dependencies; return dict;} else{({
! struct Cyc_Std_String_pa_struct _temp134; _temp134.tag= Cyc_Std_String_pa;
! _temp134.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( type);{ void* _temp133[
! 1u]={& _temp134}; Cyc_Std_printf( _tag_arr("Added ri for %s\n", sizeof(
! unsigned char), 17u), _tag_arr( _temp133, sizeof( void*), 1u));}}); return((
! struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, void* k, struct Cyc_Tcgenrep_RepInfo*
! v)) Cyc_Dict_insert)( dict, type,({ struct Cyc_Tcgenrep_RepInfo* _temp135=(
  struct Cyc_Tcgenrep_RepInfo*) _cycalloc( sizeof( struct Cyc_Tcgenrep_RepInfo));
! _temp135->decls= decls; _temp135->exp= exp; _temp135->dependencies= dependencies;
! _temp135->fwd_decl= fwd_decl; _temp135->emitted= 0; _temp135;}));}} static
  struct Cyc_Absyn_Tqual Cyc_Tcgenrep_tq_none={ 0, 0, 0}; static struct _tuple4*
  Cyc_Tcgenrep_tqual_type( struct Cyc_Absyn_Tqual* tq, void* type){ return({
! struct _tuple4* _temp136=( struct _tuple4*) _cycalloc( sizeof( struct _tuple4));
! _temp136->f1=*(( struct Cyc_Absyn_Tqual*) _check_null( tq)); _temp136->f2= type;
! _temp136;});} static void* Cyc_Tcgenrep_tuple_typ( struct Cyc_List_List* types){
! struct Cyc_List_List* _temp137=(( struct Cyc_List_List*(*)( struct _tuple4*(* f)(
  struct Cyc_Absyn_Tqual*, void*), struct Cyc_Absyn_Tqual* env, struct Cyc_List_List*
  x)) Cyc_List_map_c)( Cyc_Tcgenrep_tqual_type,( struct Cyc_Absyn_Tqual*)& Cyc_Tcgenrep_tq_none,
  types); struct Cyc_Absyn_TupleType_struct* tuple_type_base=({ struct Cyc_Absyn_TupleType_struct*
! _temp138=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp138[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp139; _temp139.tag= Cyc_Absyn_TupleType;
! _temp139.f1= _temp137; _temp139;}); _temp138;}); void* tuple_type=( void*)
! tuple_type_base; return tuple_type;} static struct _tuple7* Cyc_Tcgenrep_array_decls(
  void* type, struct Cyc_List_List* exps, struct Cyc_Position_Segment* loc){
! struct Cyc_List_List* _temp140=(( struct Cyc_List_List*(*)( struct _tuple5*(* f)(
  struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_gen_id_for_exp,
! exps); struct Cyc_List_List* _temp141=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Decl*(*
! f)( struct _tuple8*, struct _tuple5*), struct _tuple8* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcgenrep_gen_decl_cls,({ struct _tuple8* _temp154=(
! struct _tuple8*) _cycalloc( sizeof( struct _tuple8)); _temp154->f1= type;
! _temp154->f2= loc; _temp154;}), _temp140); struct Cyc_List_List* _temp142=((
  struct Cyc_List_List*(*)( struct _tagged_arr*(* f)( struct _tuple5*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Tcgenrep_get_first, _temp140); struct Cyc_List_List*
! _temp143=(( struct Cyc_List_List*(*)( struct _tuple1*(* f)( struct _tagged_arr*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_toplevel_name, _temp142);
! struct Cyc_List_List* _temp144=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(*
  f)( struct Cyc_Position_Segment*, struct _tuple1*), struct Cyc_Position_Segment*
  env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_unknownid_exp_cls,
! loc, _temp143); struct Cyc_List_List* _temp145=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*, struct Cyc_Absyn_Exp*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_address_exp_cls,
! loc, _temp144); struct Cyc_Absyn_Exp* _temp146= Cyc_Tcgenrep_arr_init_exp(
! _temp145, loc); struct _tagged_arr* _temp147= Cyc_Tcgenrep_new_gen_id( _tag_arr("arr",
! sizeof( unsigned char), 4u)); void* _temp148= Cyc_Absyn_at_typ( type,( void*)
! Cyc_Absyn_HeapRgn, Cyc_Tcgenrep_tq_none); void* _temp149= Cyc_Tcgenrep_array_typ(
! _temp148, Cyc_Tcgenrep_tq_none, 0); struct Cyc_Absyn_Decl* _temp150= Cyc_Tcgenrep_gen_decl(
! _temp147, _temp149,( struct Cyc_Absyn_Exp*) _temp146, loc); struct Cyc_Absyn_Exp*
! _temp151= Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp147), loc);
! return({ struct _tuple7* _temp152=( struct _tuple7*) _cycalloc( sizeof( struct
! _tuple7)); _temp152->f1=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_imp_append)( _temp141,({ struct Cyc_Absyn_Decl*
! _temp153[ 1u]; _temp153[ 0u]= _temp150;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp153, sizeof( struct Cyc_Absyn_Decl*),
! 1u));})); _temp152->f2= _temp151; _temp152;});} static void* Cyc_Tcgenrep_check_tunionfield_and_get_type(
! struct Cyc_Absyn_Tunionfield* tuf){ if( tuf->tvs !=  0){({ void* _temp155[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("gen(): tunionfield type varaibles not handled", sizeof( unsigned char),
! 46u), _tag_arr( _temp155, sizeof( void*), 0u));});} return( void*)({ struct Cyc_Absyn_TupleType_struct*
! _temp156=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp156[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp157; _temp157.tag= Cyc_Absyn_TupleType;
! _temp157.f1= tuf->typs; _temp157;}); _temp156;});} static void* Cyc_Tcgenrep_id(
! void* x){ return x;} struct _tuple9{ struct Cyc_Dict_Dict* f1; struct Cyc_Tcgenrep_RepInfo*
  f2; } ; static struct _tuple9* Cyc_Tcgenrep_lookupRep( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment* loc, void* type);
  struct _tuple10{ struct Cyc_Dict_Dict* f1; struct Cyc_List_List* f2; } ; struct
  _tuple11{ struct Cyc_Tcenv_Tenv* f1; struct Cyc_Position_Segment* f2; } ; static
  struct _tuple10* Cyc_Tcgenrep_lookupRepsCls( struct _tuple11* env, void* type,
! struct _tuple10* carry){ struct _tuple9 _temp160; struct Cyc_Tcgenrep_RepInfo*
! _temp161; struct Cyc_Dict_Dict* _temp163; struct _tuple9* _temp158= Cyc_Tcgenrep_lookupRep((*
! env).f1,(* carry).f1,(* env).f2, type); _temp160=* _temp158; _LL164: _temp163=
! _temp160.f1; goto _LL162; _LL162: _temp161= _temp160.f2; goto _LL159; _LL159:
! return({ struct _tuple10* _temp165=( struct _tuple10*) _cycalloc( sizeof( struct
! _tuple10)); _temp165->f1= _temp163; _temp165->f2=({ struct Cyc_List_List*
! _temp166=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp166->hd=( void*) _temp161; _temp166->tl=(* carry).f2; _temp166;}); _temp165;});}
  static struct Cyc_Dict_Dict* Cyc_Tcgenrep_buildRepTuple( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment* loc, struct
  _tagged_arr* varname, void* type, struct Cyc_List_List* types){ struct Cyc_Absyn_Exp*
! _temp167= Cyc_Absyn_sizeoftyp_exp( type, loc); struct _tuple11* _temp168=({
! struct _tuple11* _temp199=( struct _tuple11*) _cycalloc( sizeof( struct _tuple11));
! _temp199->f1= te; _temp199->f2= loc; _temp199;}); struct _tuple10* _temp169=({
! struct _tuple10* _temp198=( struct _tuple10*) _cycalloc( sizeof( struct _tuple10));
! _temp198->f1= dict; _temp198->f2= 0; _temp198;}); struct _tuple10 _temp172;
! struct Cyc_List_List* _temp173; struct Cyc_Dict_Dict* _temp175; struct _tuple10*
! _temp170=(( struct _tuple10*(*)( struct _tuple10*(* f)( struct _tuple11*, void*,
  struct _tuple10*), struct _tuple11*, struct Cyc_List_List* x, struct _tuple10*
! accum)) Cyc_List_fold_right_c)( Cyc_Tcgenrep_lookupRepsCls, _temp168, types,
! _temp169); _temp172=* _temp170; _LL176: _temp175= _temp172.f1; goto _LL174;
! _LL174: _temp173= _temp172.f2; goto _LL171; _LL171: dict= _temp175;{ struct Cyc_List_List*
! _temp177=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
! void*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Tcgenrep_make_sizeoftyp_exp, loc, types); struct _tuple7 _temp181; struct
! Cyc_List_List* _temp182; struct _tuple7* _temp179=(( struct _tuple7*(*)( struct
! _tuple7*(* f)( struct Cyc_Position_Segment*, struct _tuple7*, struct Cyc_Absyn_Exp*),
! struct Cyc_Position_Segment*, struct _tuple7* accum, struct Cyc_List_List* x))
! Cyc_List_fold_left_c)( Cyc_Tcgenrep_tri_sum_exps, loc,({ struct _tuple7*
! _temp178=( struct _tuple7*) _cycalloc( sizeof( struct _tuple7)); _temp178->f1= 0;
! _temp178->f2= Cyc_Tcgenrep_cnst_int( 0, loc); _temp178;}), _temp177); _temp181=*
! _temp179; _LL183: _temp182= _temp181.f1; goto _LL180; _LL180: { struct Cyc_List_List*
! _temp184=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_rev)(
! _temp182); struct Cyc_List_List* _temp185=(( struct Cyc_List_List*(*)( struct
! Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*, struct Cyc_Tcgenrep_RepInfo*),
! struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_get_and_cast_ri_exp,
! loc, _temp173); struct Cyc_List_List* _temp186=(( struct Cyc_List_List*(*)(
! struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*, struct _tuple6*),
! struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_tuple2_exp_cls,
! loc,(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_zip)( _temp184, _temp185)); void* tuple_type= Cyc_Tcgenrep_tuple_typ(({
! void* _temp197[ 2u]; _temp197[ 1u]= Cyc_Tcgenrep_tunion_typ(& Cyc_Tcgenrep_typestruct_str);
! _temp197[ 0u]= Cyc_Absyn_uint_t; Cyc_List_list( _tag_arr( _temp197, sizeof( void*),
! 2u));})); struct _tuple7 _temp189; struct Cyc_Absyn_Exp* _temp190; struct Cyc_List_List*
! _temp192; struct _tuple7* _temp187= Cyc_Tcgenrep_array_decls( tuple_type,
! _temp186, loc); _temp189=* _temp187; _LL193: _temp192= _temp189.f1; goto _LL191;
! _LL191: _temp190= _temp189.f2; goto _LL188; _LL188: { struct Cyc_Absyn_Decl*
! _temp194= Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,&
! Cyc_Tcgenrep_tuple_str, varname,({ struct Cyc_Absyn_Exp* _temp196[ 2u]; _temp196[
! 1u]= _temp190; _temp196[ 0u]= _temp167;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp196, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), loc); return Cyc_Tcgenrep_update_info( dict, type,(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
! _temp192,({ struct Cyc_Absyn_Decl* _temp195[ 1u]; _temp195[ 0u]= _temp194;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp195, sizeof( struct Cyc_Absyn_Decl*), 1u));})),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( varname), loc), loc),
! _temp173, 0);}}}} static struct Cyc_Dict_Dict* Cyc_Tcgenrep_buildRepUnion(
! struct Cyc_Tcenv_Tenv* te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment*
! loc, struct _tagged_arr* varname, void* type, struct Cyc_List_List* types){
! struct _tuple11* _temp200=({ struct _tuple11* _temp221=( struct _tuple11*)
! _cycalloc( sizeof( struct _tuple11)); _temp221->f1= te; _temp221->f2= loc;
! _temp221;}); struct _tuple10* _temp201=({ struct _tuple10* _temp220=( struct
! _tuple10*) _cycalloc( sizeof( struct _tuple10)); _temp220->f1= dict; _temp220->f2=
! 0; _temp220;}); struct _tuple10 _temp204; struct Cyc_List_List* _temp205; struct
! Cyc_Dict_Dict* _temp207; struct _tuple10* _temp202=(( struct _tuple10*(*)(
  struct _tuple10*(* f)( struct _tuple11*, void*, struct _tuple10*), struct
  _tuple11*, struct Cyc_List_List* x, struct _tuple10* accum)) Cyc_List_fold_right_c)(
! Cyc_Tcgenrep_lookupRepsCls, _temp200, types, _temp201); _temp204=* _temp202;
! _LL208: _temp207= _temp204.f1; goto _LL206; _LL206: _temp205= _temp204.f2; goto
! _LL203; _LL203: dict= _temp207;{ struct Cyc_List_List* _temp209=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*, struct Cyc_Tcgenrep_RepInfo*),
  struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcgenrep_get_and_cast_ri_exp,
! loc, _temp205); struct _tuple7 _temp212; struct Cyc_Absyn_Exp* _temp213; struct
! Cyc_List_List* _temp215; struct _tuple7* _temp210= Cyc_Tcgenrep_array_decls( Cyc_Tcgenrep_tunion_typ(&
! Cyc_Tcgenrep_typestruct_str), _temp209, loc); _temp212=* _temp210; _LL216:
! _temp215= _temp212.f1; goto _LL214; _LL214: _temp213= _temp212.f2; goto _LL211;
! _LL211: { struct Cyc_Absyn_Decl* _temp217= Cyc_Tcgenrep_tunion_constructor_decl(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_union_str, varname,({ struct Cyc_Absyn_Exp*
! _temp219[ 1u]; _temp219[ 0u]= _temp213;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp219, sizeof( struct Cyc_Absyn_Exp*),
  1u));}), loc); return Cyc_Tcgenrep_update_info( dict, type,(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
! _temp215,({ struct Cyc_Absyn_Decl* _temp218[ 1u]; _temp218[ 0u]= _temp217;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp218, sizeof( struct Cyc_Absyn_Decl*), 1u));})),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( varname), loc), loc),
! _temp205, 0);}}} static struct Cyc_Dict_Dict* Cyc_Tcgenrep_buildRepTunion(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment*
  loc, struct _tagged_arr* varname, void* type, struct Cyc_List_List* types){
! struct _tuple11* _temp222=({ struct _tuple11* _temp248=( struct _tuple11*)
! _cycalloc( sizeof( struct _tuple11)); _temp248->f1= te; _temp248->f2= loc;
! _temp248;}); struct _tuple10* _temp223=({ struct _tuple10* _temp247=( struct
! _tuple10*) _cycalloc( sizeof( struct _tuple10)); _temp247->f1= dict; _temp247->f2=
! 0; _temp247;}); struct _tuple10 _temp226; struct Cyc_List_List* _temp227; struct
! Cyc_Dict_Dict* _temp229; struct _tuple10* _temp224=(( struct _tuple10*(*)(
  struct _tuple10*(* f)( struct _tuple11*, void*, struct _tuple10*), struct
  _tuple11*, struct Cyc_List_List* x, struct _tuple10* accum)) Cyc_List_fold_right_c)(
! Cyc_Tcgenrep_lookupRepsCls, _temp222, types, _temp223); _temp226=* _temp224;
! _LL230: _temp229= _temp226.f1; goto _LL228; _LL228: _temp227= _temp226.f2; goto
! _LL225; _LL225: dict= _temp229;{ struct Cyc_List_List* _temp231=(( struct Cyc_List_List*(*)(
  int n, int(* f)( int))) Cyc_List_tabulate)((( int(*)( struct Cyc_List_List* x))
! Cyc_List_length)( _temp227),( int(*)( int x)) Cyc_Tcgenrep_id); struct Cyc_List_List*
! _temp232=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
  int), struct Cyc_Position_Segment* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Tcgenrep_cnst_int_cls, loc, _temp231); struct Cyc_List_List* _temp233=((
  struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
  struct Cyc_Tcgenrep_RepInfo*), struct Cyc_Position_Segment* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcgenrep_get_and_cast_ri_exp, loc, _temp227); struct
! Cyc_List_List* _temp234=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_zip)( _temp232, _temp233); struct Cyc_List_List*
! _temp235=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Exp*(* f)( struct Cyc_Position_Segment*,
  struct _tuple6*), struct Cyc_Position_Segment* env, struct Cyc_List_List* x))
! Cyc_List_map_c)( Cyc_Tcgenrep_tuple2_exp_cls, loc, _temp234); void* tuple_type=
! Cyc_Tcgenrep_tuple_typ(({ void* _temp246[ 2u]; _temp246[ 1u]= Cyc_Tcgenrep_tunion_typ(&
! Cyc_Tcgenrep_typestruct_str); _temp246[ 0u]= Cyc_Absyn_uint_t; Cyc_List_list(
! _tag_arr( _temp246, sizeof( void*), 2u));})); struct _tuple7 _temp238; struct
! Cyc_Absyn_Exp* _temp239; struct Cyc_List_List* _temp241; struct _tuple7*
! _temp236= Cyc_Tcgenrep_array_decls( tuple_type, _temp235, loc); _temp238=*
! _temp236; _LL242: _temp241= _temp238.f1; goto _LL240; _LL240: _temp239= _temp238.f2;
! goto _LL237; _LL237: { struct Cyc_Absyn_Decl* _temp243= Cyc_Tcgenrep_tunion_constructor_decl(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_tunion_str, varname,({ struct Cyc_Absyn_Exp*
! _temp245[ 1u]; _temp245[ 0u]= _temp239;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp245, sizeof( struct Cyc_Absyn_Exp*),
  1u));}), loc); return Cyc_Tcgenrep_update_info( dict, type,(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_imp_append)(
! _temp241,({ struct Cyc_Absyn_Decl* _temp244[ 1u]; _temp244[ 0u]= _temp243;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp244, sizeof( struct Cyc_Absyn_Decl*), 1u));})),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( varname), loc), loc),
! _temp227, 0); return dict;}}} struct _tuple12{ struct Cyc_List_List* f1; struct
! Cyc_List_List* f2; } ; static struct _tuple9* Cyc_Tcgenrep_lookupRep( struct Cyc_Tcenv_Tenv*
! te, struct Cyc_Dict_Dict* dict, struct Cyc_Position_Segment* loc, void* type){
! if( Cyc_Tcgenrep_typestruct_decl ==  0){ Cyc_Tcenv_lookup_tuniondecl( te, loc,&
! Cyc_Tcgenrep_typestruct_name);}{ struct Cyc_Core_Opt* info=(( struct Cyc_Core_Opt*(*)(
! struct Cyc_Dict_Dict* d, void* k)) Cyc_Dict_lookup_opt)( dict, type); if( info
! !=  0){ struct _tuple9* _temp249=({ struct _tuple9* _temp250=( struct _tuple9*)
! _cycalloc( sizeof( struct _tuple9)); _temp250->f1= dict; _temp250->f2=( struct
! Cyc_Tcgenrep_RepInfo*)(( struct Cyc_Core_Opt*) _check_null( info))->v; _temp250;});
! return _temp249;} else{{ void* _temp251= type; void* _temp299; struct Cyc_Absyn_PtrInfo
! _temp301; struct Cyc_Absyn_Exp* _temp303; struct Cyc_Absyn_Tqual _temp305; void*
! _temp307; struct Cyc_List_List* _temp309; struct Cyc_Core_Opt* _temp311; struct
! Cyc_List_List* _temp313; struct _tuple1* _temp315; struct Cyc_Absyn_Structdecl**
! _temp317; struct Cyc_List_List* _temp319; struct _tuple1* _temp321; struct Cyc_List_List*
! _temp323; struct Cyc_Absyn_Tvar* _temp325; struct Cyc_Absyn_FnInfo _temp327;
! struct Cyc_Absyn_TunionInfo _temp329; struct Cyc_Absyn_TunionFieldInfo _temp331;
! struct Cyc_Absyn_Uniondecl** _temp333; struct Cyc_List_List* _temp335; struct
! _tuple1* _temp337; struct Cyc_List_List* _temp339; _LL253: if(( unsigned int)
! _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_IntType: 0){ _LL300: _temp299=(
! void*)(( struct Cyc_Absyn_IntType_struct*) _temp251)->f2; goto _LL254;} else{
! goto _LL255;} _LL255: if( _temp251 == ( void*) Cyc_Absyn_FloatType){ goto _LL256;}
! else{ goto _LL257;} _LL257: if( _temp251 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL258;} else{ goto _LL259;} _LL259: if(( unsigned int) _temp251 >  4u?*(( int*)
! _temp251) ==  Cyc_Absyn_PointerType: 0){ _LL302: _temp301=(( struct Cyc_Absyn_PointerType_struct*)
! _temp251)->f1; goto _LL260;} else{ goto _LL261;} _LL261: if(( unsigned int)
! _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_ArrayType: 0){ _LL308: _temp307=(
! void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp251)->f1; goto _LL306; _LL306:
! _temp305=(( struct Cyc_Absyn_ArrayType_struct*) _temp251)->f2; goto _LL304;
! _LL304: _temp303=(( struct Cyc_Absyn_ArrayType_struct*) _temp251)->f3; goto
! _LL262;} else{ goto _LL263;} _LL263: if(( unsigned int) _temp251 >  4u?*(( int*)
! _temp251) ==  Cyc_Absyn_TupleType: 0){ _LL310: _temp309=(( struct Cyc_Absyn_TupleType_struct*)
! _temp251)->f1; goto _LL264;} else{ goto _LL265;} _LL265: if(( unsigned int)
! _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_TypedefType: 0){ _LL316:
! _temp315=(( struct Cyc_Absyn_TypedefType_struct*) _temp251)->f1; goto _LL314;
! _LL314: _temp313=(( struct Cyc_Absyn_TypedefType_struct*) _temp251)->f2; goto
! _LL312; _LL312: _temp311=(( struct Cyc_Absyn_TypedefType_struct*) _temp251)->f3;
! goto _LL266;} else{ goto _LL267;} _LL267: if(( unsigned int) _temp251 >  4u?*((
! int*) _temp251) ==  Cyc_Absyn_StructType: 0){ _LL322: _temp321=(( struct Cyc_Absyn_StructType_struct*)
! _temp251)->f1; goto _LL320; _LL320: _temp319=(( struct Cyc_Absyn_StructType_struct*)
! _temp251)->f2; goto _LL318; _LL318: _temp317=(( struct Cyc_Absyn_StructType_struct*)
! _temp251)->f3; goto _LL268;} else{ goto _LL269;} _LL269: if(( unsigned int)
! _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_AnonStructType: 0){ _LL324:
! _temp323=(( struct Cyc_Absyn_AnonStructType_struct*) _temp251)->f1; goto _LL270;}
! else{ goto _LL271;} _LL271: if( _temp251 == ( void*) Cyc_Absyn_VoidType){ goto
! _LL272;} else{ goto _LL273;} _LL273: if(( unsigned int) _temp251 >  4u?*(( int*)
! _temp251) ==  Cyc_Absyn_Evar: 0){ goto _LL274;} else{ goto _LL275;} _LL275: if((
! unsigned int) _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_VarType: 0){
! _LL326: _temp325=(( struct Cyc_Absyn_VarType_struct*) _temp251)->f1; goto _LL276;}
! else{ goto _LL277;} _LL277: if(( unsigned int) _temp251 >  4u?*(( int*) _temp251)
! ==  Cyc_Absyn_FnType: 0){ _LL328: _temp327=(( struct Cyc_Absyn_FnType_struct*)
! _temp251)->f1; goto _LL278;} else{ goto _LL279;} _LL279: if(( unsigned int)
! _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_RgnHandleType: 0){ goto _LL280;}
! else{ goto _LL281;} _LL281: if( _temp251 == ( void*) Cyc_Absyn_HeapRgn){ goto
! _LL282;} else{ goto _LL283;} _LL283: if(( unsigned int) _temp251 >  4u?*(( int*)
! _temp251) ==  Cyc_Absyn_AccessEff: 0){ goto _LL284;} else{ goto _LL285;} _LL285:
! if(( unsigned int) _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_JoinEff: 0){
! goto _LL286;} else{ goto _LL287;} _LL287: if(( unsigned int) _temp251 >  4u?*((
! int*) _temp251) ==  Cyc_Absyn_RgnsEff: 0){ goto _LL288;} else{ goto _LL289;}
! _LL289: if(( unsigned int) _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_TunionType:
! 0){ _LL330: _temp329=(( struct Cyc_Absyn_TunionType_struct*) _temp251)->f1; goto
! _LL290;} else{ goto _LL291;} _LL291: if(( unsigned int) _temp251 >  4u?*(( int*)
! _temp251) ==  Cyc_Absyn_TunionFieldType: 0){ _LL332: _temp331=(( struct Cyc_Absyn_TunionFieldType_struct*)
! _temp251)->f1; goto _LL292;} else{ goto _LL293;} _LL293: if(( unsigned int)
! _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_UnionType: 0){ _LL338: _temp337=((
! struct Cyc_Absyn_UnionType_struct*) _temp251)->f1; goto _LL336; _LL336: _temp335=((
! struct Cyc_Absyn_UnionType_struct*) _temp251)->f2; goto _LL334; _LL334: _temp333=((
! struct Cyc_Absyn_UnionType_struct*) _temp251)->f3; goto _LL294;} else{ goto
! _LL295;} _LL295: if(( unsigned int) _temp251 >  4u?*(( int*) _temp251) ==  Cyc_Absyn_AnonUnionType:
! 0){ _LL340: _temp339=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp251)->f1;
! goto _LL296;} else{ goto _LL297;} _LL297: if(( unsigned int) _temp251 >  4u?*((
! int*) _temp251) ==  Cyc_Absyn_EnumType: 0){ goto _LL298;} else{ goto _LL252;}
! _LL254: { struct _tagged_arr* _temp341= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep",
! sizeof( unsigned char), 4u)); struct Cyc_Absyn_Decl* _temp342= Cyc_Tcgenrep_tunion_constructor_decl(&
! Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_int_str, _temp341,({ struct Cyc_Absyn_Exp*
! _temp344[ 1u]; _temp344[ 0u]= Cyc_Tcgenrep_cnst_int( Cyc_Tcgenrep_size_of2int(
! _temp299), loc);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp344, sizeof( struct Cyc_Absyn_Exp*), 1u));}), loc); dict= Cyc_Tcgenrep_update_info(
! dict, type,({ struct Cyc_Absyn_Decl* _temp343[ 1u]; _temp343[ 0u]= _temp342;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp343, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
! Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp341), loc), loc), 0, 0);
! goto _LL252;} _LL256: dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(& Cyc_Tcgenrep_float_str),
! loc), 0, 0); goto _LL252; _LL258: dict= Cyc_Tcgenrep_update_info( dict, type, 0,(
  struct Cyc_Absyn_Exp*) Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(& Cyc_Tcgenrep_double_str),
! loc), 0, 0); goto _LL252; _LL260: { struct _tuple9 _temp347; struct Cyc_Tcgenrep_RepInfo*
! _temp348; struct Cyc_Dict_Dict* _temp350; struct _tuple9* _temp345= Cyc_Tcgenrep_lookupRep(
! te, dict, loc,( void*) _temp301.elt_typ); _temp347=* _temp345; _LL351: _temp350=
! _temp347.f1; goto _LL349; _LL349: _temp348= _temp347.f2; goto _LL346; _LL346:
! dict= _temp350;{ void* _temp352= Cyc_Absyn_conref_val( _temp301.bounds); struct
! Cyc_Absyn_Exp* _temp358; _LL354: if(( unsigned int) _temp352 >  1u?*(( int*)
! _temp352) ==  Cyc_Absyn_Upper_b: 0){ _LL359: _temp358=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp352)->f1; goto _LL355;} else{ goto _LL356;} _LL356: if( _temp352 == ( void*)
! Cyc_Absyn_Unknown_b){ goto _LL357;} else{ goto _LL353;} _LL355: { unsigned int
! bound= Cyc_Evexp_eval_const_uint_exp( _temp358); struct _tagged_arr* _temp360=
! Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof( unsigned char), 4u)); struct
! Cyc_Absyn_Decl* _temp361= Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,&
! Cyc_Tcgenrep_thinptr_str, _temp360,({ struct Cyc_Absyn_Exp* _temp364[ 2u];
! _temp364[ 1u]=( struct Cyc_Absyn_Exp*) _check_null( _temp348->exp); _temp364[ 0u]=
  Cyc_Tcgenrep_cnst_int(( int) bound, loc);(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp364, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), loc); dict= Cyc_Tcgenrep_update_info( dict, type,({ struct Cyc_Absyn_Decl*
! _temp362[ 1u]; _temp362[ 0u]= _temp361;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp362, sizeof( struct Cyc_Absyn_Decl*),
  1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp(
! Cyc_Tcgenrep_toplevel_name( _temp360), loc), loc),({ struct Cyc_Tcgenrep_RepInfo*
! _temp363[ 1u]; _temp363[ 0u]= _temp348;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp363, sizeof( struct Cyc_Tcgenrep_RepInfo*),
! 1u));}), 0); goto _LL353;} _LL357: { struct _tagged_arr* _temp365= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("rep", sizeof( unsigned char), 4u)); struct Cyc_Absyn_Decl* _temp366=
! Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_fatptr_str,
! _temp365,({ struct Cyc_Absyn_Exp* _temp369[ 1u]; _temp369[ 0u]=( struct Cyc_Absyn_Exp*)
! _check_null( _temp348->exp);(( struct Cyc_List_List*(*)( struct _tagged_arr))
! Cyc_List_list)( _tag_arr( _temp369, sizeof( struct Cyc_Absyn_Exp*), 1u));}), loc);
! dict= Cyc_Tcgenrep_update_info( dict, type,({ struct Cyc_Absyn_Decl* _temp367[ 1u];
! _temp367[ 0u]= _temp366;(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp367, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(
! _temp365), loc), loc),({ struct Cyc_Tcgenrep_RepInfo* _temp368[ 1u]; _temp368[ 0u]=
! _temp348;(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp368, sizeof( struct Cyc_Tcgenrep_RepInfo*), 1u));}), 0); goto
! _LL353;} _LL353:;} goto _LL252;} _LL262: if( _temp303 ==  0){({ void* _temp370[
! 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("tcgenrep:At this point, array bounds must be constants", sizeof(
! unsigned char), 55u), _tag_arr( _temp370, sizeof( void*), 0u));});}{ struct
! _tuple9 _temp373; struct Cyc_Tcgenrep_RepInfo* _temp374; struct Cyc_Dict_Dict*
! _temp376; struct _tuple9* _temp371= Cyc_Tcgenrep_lookupRep( te, dict, loc,
! _temp307); _temp373=* _temp371; _LL377: _temp376= _temp373.f1; goto _LL375;
! _LL375: _temp374= _temp373.f2; goto _LL372; _LL372: dict= _temp376;{
  unsigned int bound= Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp303)); struct _tagged_arr* _temp378= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("rep", sizeof( unsigned char), 4u)); struct Cyc_Absyn_Decl* _temp379=
  Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_thinptr_str,
! _temp378,({ struct Cyc_Absyn_Exp* _temp382[ 2u]; _temp382[ 1u]=( struct Cyc_Absyn_Exp*)
! _check_null( _temp374->exp); _temp382[ 0u]= Cyc_Tcgenrep_cnst_int(( int) bound,
  loc);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp382, sizeof( struct Cyc_Absyn_Exp*), 2u));}), loc); dict= Cyc_Tcgenrep_update_info(
! dict, type,({ struct Cyc_Absyn_Decl* _temp380[ 1u]; _temp380[ 0u]= _temp379;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp380, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
! Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp378), loc), loc),({
! struct Cyc_Tcgenrep_RepInfo* _temp381[ 1u]; _temp381[ 0u]= _temp374;(( struct
! Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp381,
! sizeof( struct Cyc_Tcgenrep_RepInfo*), 1u));}), 0); goto _LL252;}} _LL264: {
! struct Cyc_List_List* _temp383=(( struct Cyc_List_List*(*)( void*(* f)( struct
! _tuple4*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_get_second,
! _temp309); struct _tagged_arr* _temp384= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep",
! sizeof( unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepTuple( te, dict, loc,
! _temp384, type, _temp383); goto _LL252;} _LL266: if( _temp313 !=  0){({ void*
! _temp385[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen(): typedefs with parameters not yet supported", sizeof(
! unsigned char), 50u), _tag_arr( _temp385, sizeof( void*), 0u));}); Cyc_Tcgenrep_print_params(
! _temp313);} if( _temp311 ==  0){({ void* _temp386[ 0u]={};(( int(*)( struct
! _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): typedef definition must be present by now",
! sizeof( unsigned char), 49u), _tag_arr( _temp386, sizeof( void*), 0u));});}{
! struct _tuple9 _temp389; struct Cyc_Tcgenrep_RepInfo* _temp390; struct Cyc_Dict_Dict*
! _temp392; struct _tuple9* _temp387= Cyc_Tcgenrep_lookupRep( te, dict, loc,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp311))->v); _temp389=* _temp387; _LL393:
! _temp392= _temp389.f1; goto _LL391; _LL391: _temp390= _temp389.f2; goto _LL388;
! _LL388: dict=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, void* k,
! struct Cyc_Tcgenrep_RepInfo* v)) Cyc_Dict_insert)( _temp392, type, _temp390);
! goto _LL252;} _LL268: if( _temp319 !=  0){({ void* _temp394[ 0u]={};(( int(*)(
! struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): structs with parameters not yet supported",
! sizeof( unsigned char), 49u), _tag_arr( _temp394, sizeof( void*), 0u));}); Cyc_Tcgenrep_print_params(
! _temp319);} if( _temp317 ==  0){({ void* _temp395[ 0u]={};(( int(*)( struct
! _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): struct declaration must be present by now",
! sizeof( unsigned char), 49u), _tag_arr( _temp395, sizeof( void*), 0u));});}{
! struct _tagged_arr* _temp396= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); struct Cyc_Core_Opt* _temp397=({ struct Cyc_Core_Opt*
! _temp432=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp432->v=( void*) Cyc_Tcgenrep_gen_vardecl_sc( _temp396, Cyc_Tcgenrep_tunionfield_typ(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_tuple_str), 0,( void*) Cyc_Absyn_Extern,
! loc); _temp432;}); dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(
! _temp396), loc), loc), 0, _temp397);{ struct Cyc_Absyn_Structdecl* _temp398=*((
! struct Cyc_Absyn_Structdecl**) _check_null( _temp317)); if( _temp398->tvs !=  0){({
! void* _temp399[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
! Cyc_Tcutil_impos)( _tag_arr("gen(): structs with tyvariables not yet supported",
! sizeof( unsigned char), 50u), _tag_arr( _temp399, sizeof( void*), 0u));}); Cyc_Tcgenrep_print_tvars(
! _temp398->tvs);}{ struct Cyc_List_List* _temp400= _temp398->tvs; if( Cyc_List_length(
! _temp319) != (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp400)){({
! void* _temp401[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("gen(): number of params differs from number of tyvars",
! sizeof( unsigned char), 54u), _tag_arr( _temp401, sizeof( void*), 0u));});}{
! struct Cyc_List_List* _temp405; struct Cyc_List_List* _temp407; struct _tuple12
! _temp403=({ struct _tuple12 _temp402; _temp402.f1= _temp400; _temp402.f2=
! _temp319; _temp402;}); _LL408: _temp407= _temp403.f1; goto _LL406; _LL406:
! _temp405= _temp403.f2; goto _LL404; _LL404: { struct Cyc_List_List* r= 0; for( 0;
! _temp407 !=  0;( _temp407=(( struct Cyc_List_List*) _check_null( _temp407))->tl,
! _temp405=(( struct Cyc_List_List*) _check_null( _temp405))->tl)){ void* _temp409=
! Cyc_Tcutil_typ_kind(( void*)(( struct Cyc_List_List*) _check_null( _temp405))->hd);
! _LL411: if( _temp409 == ( void*) Cyc_Absyn_AnyKind){ goto _LL412;} else{ goto
! _LL413;} _LL413: if( _temp409 == ( void*) Cyc_Absyn_MemKind){ goto _LL414;}
! else{ goto _LL415;} _LL415: if( _temp409 == ( void*) Cyc_Absyn_BoxKind){ goto
! _LL416;} else{ goto _LL417;} _LL417: goto _LL418; _LL412: goto _LL414; _LL414:
! goto _LL416; _LL416: { struct _tuple9 _temp421; struct Cyc_Tcgenrep_RepInfo*
! _temp422; struct Cyc_Dict_Dict* _temp424; struct _tuple9* _temp419= Cyc_Tcgenrep_lookupRep(
! te, dict, loc,( void*)(( struct Cyc_List_List*) _check_null( _temp405))->hd);
! _temp421=* _temp419; _LL425: _temp424= _temp421.f1; goto _LL423; _LL423:
! _temp422= _temp421.f2; goto _LL420; _LL420: dict= _temp424;{ struct Cyc_Absyn_VarType_struct*
! _temp426=({ struct Cyc_Absyn_VarType_struct* _temp428=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp428[ 0]=({ struct Cyc_Absyn_VarType_struct
! _temp429; _temp429.tag= Cyc_Absyn_VarType; _temp429.f1=( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( _temp400))->hd; _temp429;}); _temp428;}); r=({
! struct Cyc_List_List* _temp427=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp427->hd=( void*)(( void*) _temp426); _temp427->tl=
! r; _temp427;}); dict=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, void*
! k, struct Cyc_Tcgenrep_RepInfo* v)) Cyc_Dict_insert)( dict,( void*) _temp426,
! _temp422); goto _LL410;}} _LL418:; _LL410:;} if( _temp398->fields ==  0){({ void*
! _temp430[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen(): struct fields must be present", sizeof( unsigned char), 37u),
! _tag_arr( _temp430, sizeof( void*), 0u));});}{ struct Cyc_List_List* _temp431=((
! struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type,( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp398->fields))->v); dict= Cyc_Tcgenrep_buildRepTuple(
! te, dict, loc, _temp396, type, _temp431);{ struct Cyc_List_List* rp= r; for( 0;
! rp !=  0; rp=(( struct Cyc_List_List*) _check_null( rp))->tl){;}} goto _LL252;}}}}}}
! _LL270: { struct Cyc_List_List* _temp433=(( struct Cyc_List_List*(*)( void*(* f)(
! struct Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type,
! _temp323); struct _tagged_arr* _temp434= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep",
  sizeof( unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepTuple( te, dict, loc,
! _temp434, type, _temp433); goto _LL252;} _LL272:({ void* _temp435[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("found void in gen() expression", sizeof( unsigned char), 31u),
! _tag_arr( _temp435, sizeof( void*), 0u));}); goto _LL252; _LL274:({ void*
! _temp436[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found evar in gen() expression",
! sizeof( unsigned char), 31u), _tag_arr( _temp436, sizeof( void*), 0u));}); goto
! _LL252; _LL276:({ void* _temp437[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found tyvar in gen() expression",
! sizeof( unsigned char), 32u), _tag_arr( _temp437, sizeof( void*), 0u));}); goto
! _LL252;({ void* _temp438[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found variable type in gen() expression",
! sizeof( unsigned char), 40u), _tag_arr( _temp438, sizeof( void*), 0u));}); goto
! _LL252; _LL278:({ void* _temp439[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("found function type in gen() expression",
! sizeof( unsigned char), 40u), _tag_arr( _temp439, sizeof( void*), 0u));}); goto
! _LL252; _LL280: goto _LL282; _LL282: goto _LL284; _LL284: goto _LL286; _LL286:
! goto _LL288; _LL288:({ void* _temp440[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("gen(): unhandled region, handle or effect type",
! sizeof( unsigned char), 47u), _tag_arr( _temp440, sizeof( void*), 0u));}); goto
! _LL252; _LL290: if( _temp329.targs !=  0){({ void* _temp441[ 0u]={};(( int(*)(
! struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunion type parameters not handled yet",
! sizeof( unsigned char), 46u), _tag_arr( _temp441, sizeof( void*), 0u));});}{
! void* _temp442=( void*) _temp329.tunion_info; struct Cyc_Absyn_Tuniondecl*
! _temp448; _LL444: if(*(( int*) _temp442) ==  Cyc_Absyn_KnownTunion){ _LL449:
! _temp448=(( struct Cyc_Absyn_KnownTunion_struct*) _temp442)->f1; goto _LL445;}
! else{ goto _LL446;} _LL446: if(*(( int*) _temp442) ==  Cyc_Absyn_UnknownTunion){
! goto _LL447;} else{ goto _LL443;} _LL445: if( _temp448->tvs !=  0){({ void*
! _temp450[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen(): tunion type variables not handled yet", sizeof( unsigned char),
! 45u), _tag_arr( _temp450, sizeof( void*), 0u));});} if( _temp448->fields ==  0){({
! void* _temp451[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
! Cyc_Tcutil_impos)( _tag_arr("gen(): tunion fields not present", sizeof(
! unsigned char), 33u), _tag_arr( _temp451, sizeof( void*), 0u));});}{ struct
! _tagged_arr* _temp452= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); struct Cyc_Core_Opt* _temp453=({ struct Cyc_Core_Opt*
! _temp456=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp456->v=( void*) Cyc_Tcgenrep_gen_vardecl_sc( _temp452, Cyc_Tcgenrep_tunionfield_typ(&
  Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_tunion_str), 0,( void*) Cyc_Absyn_Extern,
! loc); _temp456;}); dict= Cyc_Tcgenrep_update_info( dict, type, 0,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name(
! _temp452), loc), loc), 0, _temp453);{ struct Cyc_List_List* _temp454=( struct
! Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp448->fields))->v;
! struct Cyc_List_List* _temp455=(( struct Cyc_List_List*(*)( void*(* f)( struct
! Cyc_Absyn_Tunionfield*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_check_tunionfield_and_get_type,
! _temp454); dict= Cyc_Tcgenrep_buildRepTunion( te, dict, loc, _temp452, type,
! _temp455); goto _LL443;}} _LL447:({ void* _temp457[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunion must be resolved by now",
! sizeof( unsigned char), 38u), _tag_arr( _temp457, sizeof( void*), 0u));}); goto
! _LL443; _LL443:;} goto _LL252; _LL292: if( _temp331.targs !=  0){({ void*
! _temp458[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen(): tunionfield type parameters not handled yet", sizeof(
! unsigned char), 51u), _tag_arr( _temp458, sizeof( void*), 0u));});}{ void*
! _temp459=( void*) _temp331.field_info; struct Cyc_Absyn_Tunionfield* _temp465;
! struct Cyc_Absyn_Tuniondecl* _temp467; _LL461: if(*(( int*) _temp459) ==  Cyc_Absyn_KnownTunionfield){
! _LL468: _temp467=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp459)->f1;
! goto _LL466; _LL466: _temp465=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp459)->f2; goto _LL462;} else{ goto _LL463;} _LL463: goto _LL464; _LL462:
! if( _temp465->tvs !=  0){({ void* _temp469[ 0u]={};(( int(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunionfield type parameters not handled yet",
! sizeof( unsigned char), 51u), _tag_arr( _temp469, sizeof( void*), 0u));});}{
! struct Cyc_List_List* _temp470=(( struct Cyc_List_List*(*)( void*(* f)( struct
  _tuple4*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_get_second,
! _temp465->typs); struct Cyc_List_List* _temp471=({ struct Cyc_List_List*
! _temp473=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp473->hd=( void*) Cyc_Absyn_uint_t; _temp473->tl= _temp470; _temp473;});
! struct _tagged_arr* _temp472= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepTuple( te, dict, loc, _temp472,
! type, _temp471); goto _LL460;} _LL464:({ void* _temp474[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): tunionfield must be known at this point",
! sizeof( unsigned char), 47u), _tag_arr( _temp474, sizeof( void*), 0u));}); goto
! _LL460; _LL460:;} goto _LL252; _LL294: if( _temp335 !=  0){({ void* _temp475[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen(): unions with parameters not yet supported", sizeof(
! unsigned char), 48u), _tag_arr( _temp475, sizeof( void*), 0u));});} if( _temp333
! ==  0){({ void* _temp476[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
! _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("gen(): union declaration must be present by now",
! sizeof( unsigned char), 48u), _tag_arr( _temp476, sizeof( void*), 0u));});}{
! struct Cyc_Absyn_Uniondecl* _temp477=*(( struct Cyc_Absyn_Uniondecl**)
! _check_null( _temp333)); if( _temp477->tvs !=  0){({ void* _temp478[ 0u]={};((
! int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("gen: structs with parameters not yet supported", sizeof( unsigned char),
! 47u), _tag_arr( _temp478, sizeof( void*), 0u));});} if( _temp477->fields ==  0){({
! void* _temp479[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
! Cyc_Tcutil_impos)( _tag_arr("gen(): struct fields must be present", sizeof(
! unsigned char), 37u), _tag_arr( _temp479, sizeof( void*), 0u));});}{ struct Cyc_List_List*
! _temp480=(( struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Structfield*),
! struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type,(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp477->fields))->v);
! struct _tagged_arr* _temp481= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepUnion( te, dict, loc, _temp481,
! type, _temp480); goto _LL252;}} _LL296: { struct Cyc_List_List* _temp482=((
  struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Tcgenrep_select_structfield_type, _temp339); struct
! _tagged_arr* _temp483= Cyc_Tcgenrep_new_gen_id( _tag_arr("rep", sizeof(
! unsigned char), 4u)); dict= Cyc_Tcgenrep_buildRepUnion( te, dict, loc, _temp483,
! type, _temp482); goto _LL252;} _LL298: { struct _tagged_arr* _temp484= Cyc_Tcgenrep_new_gen_id(
! _tag_arr("rep", sizeof( unsigned char), 4u)); struct Cyc_Absyn_Decl* _temp485=
  Cyc_Tcgenrep_tunion_constructor_decl(& Cyc_Tcgenrep_typestruct_str,& Cyc_Tcgenrep_int_str,
! _temp484,({ struct Cyc_Absyn_Exp* _temp487[ 1u]; _temp487[ 0u]= Cyc_Tcgenrep_cnst_int(
  32, loc);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp487, sizeof( struct Cyc_Absyn_Exp*), 1u));}), loc); dict= Cyc_Tcgenrep_update_info(
! dict, type,({ struct Cyc_Absyn_Decl* _temp486[ 1u]; _temp486[ 0u]= _temp485;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp486, sizeof( struct Cyc_Absyn_Decl*), 1u));}),( struct Cyc_Absyn_Exp*) Cyc_Absyn_address_exp(
! Cyc_Absyn_unknownid_exp( Cyc_Tcgenrep_toplevel_name( _temp484), loc), loc), 0, 0);
! goto _LL252;} _LL252:;} return({ struct _tuple9* _temp488=( struct _tuple9*)
! _cycalloc( sizeof( struct _tuple9)); _temp488->f1= dict; _temp488->f2=(( struct
  Cyc_Tcgenrep_RepInfo*(*)( struct Cyc_Dict_Dict* d, void* k)) Cyc_Dict_lookup)(
! dict, type); _temp488;});}}} static int Cyc_Tcgenrep_not_emitted_filter( struct
  Cyc_Tcgenrep_RepInfo* ri){ return ri->emitted ==  0;} static void Cyc_Tcgenrep_mark_emitted(
! struct Cyc_Tcgenrep_RepInfo* ri){ ri->emitted= 1;} struct _tuple13{ struct Cyc_Dict_Dict*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_Exp* f3; } ; struct _tuple13 Cyc_Tcgenrep_tcGenrep(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Tcenv_Genv* ge, struct Cyc_Position_Segment*
  loc, void* type, struct Cyc_Dict_Dict* dict){ Cyc_Tcutil_check_valid_toplevel_type(
! loc, te, type);{ struct _tuple9 _temp491; struct Cyc_Tcgenrep_RepInfo* _temp492;
! struct Cyc_Dict_Dict* _temp494; struct _tuple9* _temp489= Cyc_Tcgenrep_lookupRep(
! te, dict, loc, type); _temp491=* _temp489; _LL495: _temp494= _temp491.f1; goto
! _LL493; _LL493: _temp492= _temp491.f2; goto _LL490; _LL490: { struct Cyc_List_List*
! _temp496= Cyc_Tcgenrep_dfs( _temp492);({ struct Cyc_Std_String_pa_struct
! _temp498; _temp498.tag= Cyc_Std_String_pa; _temp498.f1=( struct _tagged_arr) Cyc_Absynpp_decllist2string(
! _temp496);{ void* _temp497[ 1u]={& _temp498}; Cyc_Std_printf( _tag_arr("Emitting...\n%s\n",
! sizeof( unsigned char), 16u), _tag_arr( _temp497, sizeof( void*), 1u));}});
! return({ struct _tuple13 _temp499; _temp499.f1= _temp494; _temp499.f2= _temp496;
! _temp499.f3=( struct Cyc_Absyn_Exp*) _check_null( _temp492->exp); _temp499;});}}}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tcpat.c powerpc-apple-rhapsody/src/tcpat.c
*** i686-unknown-linux/src/tcpat.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/tcpat.c	Wed Oct 10 15:39:32 2001
***************
*** 296,302 ****
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 296,302 ----
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 387,449 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple1* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple1* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple2{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple2* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 387,446 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple1* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple1* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple2{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple2* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple1* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 864,872 ****
  _temp223)->f1; _LL232: _temp231=( void*) _temp229.elt_typ; goto _LL226;} else{
  goto _LL227;} _LL227: goto _LL228; _LL226: inner_typ= _temp231; _temp222=( void**)&
  inner_typ; goto _LL224; _LL228: goto _LL224; _LL224:;}{ void* ptr_rgn= Cyc_Absyn_new_evar((
! struct Cyc_Core_Opt*)& Cyc_Tcpat_rk,({ struct Cyc_Core_Opt* _temp267=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp267->v=( void*)
! Cyc_Tcenv_lookup_type_vars( te); _temp267;})); struct Cyc_List_List* _temp235;
  struct Cyc_List_List* _temp237; struct _tuple6 _temp233= Cyc_Tcpat_tcPatRec( te,
  _temp183, _temp222,( void**)& ptr_rgn); _LL238: _temp237= _temp233.f1; goto
  _LL236; _LL236: _temp235= _temp233.f2; goto _LL234; _LL234: tv_result=(( struct
--- 861,869 ----
  _temp223)->f1; _LL232: _temp231=( void*) _temp229.elt_typ; goto _LL226;} else{
  goto _LL227;} _LL227: goto _LL228; _LL226: inner_typ= _temp231; _temp222=( void**)&
  inner_typ; goto _LL224; _LL228: goto _LL224; _LL224:;}{ void* ptr_rgn= Cyc_Absyn_new_evar((
! struct Cyc_Core_Opt*)& Cyc_Tcpat_rk,({ struct Cyc_Core_Opt* _temp266=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp266->v=( void*)
! Cyc_Tcenv_lookup_type_vars( te); _temp266;})); struct Cyc_List_List* _temp235;
  struct Cyc_List_List* _temp237; struct _tuple6 _temp233= Cyc_Tcpat_tcPatRec( te,
  _temp183, _temp222,( void**)& ptr_rgn); _LL238: _temp237= _temp233.f1; goto
  _LL236; _LL236: _temp235= _temp233.f2; goto _LL234; _LL234: tv_result=(( struct
***************
*** 891,1216 ****
  void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp258=( struct Cyc_Absyn_KnownTunion_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp258[ 0]=({ struct
  Cyc_Absyn_KnownTunion_struct _temp259; _temp259.tag= Cyc_Absyn_KnownTunion;
! _temp259.f1=({ struct Cyc_Absyn_Tuniondecl** _temp260=( struct Cyc_Absyn_Tuniondecl**)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl*)); _temp260[ 0]= _temp253;
! _temp260;}); _temp259;}); _temp258;})); _temp257.targs= _temp247; _temp257.rgn=(
! void*) ptr_rgn; _temp257;}); _temp256;}); _temp255;}); goto _LL240; _LL244: t=(
! void*)({ struct Cyc_Absyn_PointerType_struct* _temp261=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp261[ 0]=({ struct
! Cyc_Absyn_PointerType_struct _temp262; _temp262.tag= Cyc_Absyn_PointerType;
! _temp262.f1=({ struct Cyc_Absyn_PtrInfo _temp263; _temp263.elt_typ=( void*)((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp183->topt))->v); _temp263.rgn_typ=(
! void*) ptr_rgn; _temp263.nullable=(( struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)();
! _temp263.tq= Cyc_Absyn_empty_tqual(); _temp263.bounds= Cyc_Absyn_empty_conref();
! _temp263;}); _temp262;}); _temp261;}); goto _LL240; _LL240:;} else{ t=( void*)({
! struct Cyc_Absyn_PointerType_struct* _temp264=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp264[ 0]=({ struct
! Cyc_Absyn_PointerType_struct _temp265; _temp265.tag= Cyc_Absyn_PointerType;
! _temp265.f1=({ struct Cyc_Absyn_PtrInfo _temp266; _temp266.elt_typ=( void*)((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp183->topt))->v); _temp266.rgn_typ=(
! void*) ptr_rgn; _temp266.nullable=(( struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)();
! _temp266.tq= Cyc_Absyn_empty_tqual(); _temp266.bounds= Cyc_Absyn_empty_conref();
! _temp266;}); _temp265;}); _temp264;});} goto _LL138;}} _LL160: { struct Cyc_List_List*
! pat_ts= 0; struct Cyc_List_List* topt_ts= 0; if( topt !=  0){ void* _temp268=
  Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_List_List*
! _temp274; _LL270: if(( unsigned int) _temp268 >  4u?*(( int*) _temp268) ==  Cyc_Absyn_TupleType:
! 0){ _LL275: _temp274=(( struct Cyc_Absyn_TupleType_struct*) _temp268)->f1; goto
! _LL271;} else{ goto _LL272;} _LL272: goto _LL273; _LL271: topt_ts= _temp274;
! goto _LL269; _LL273: goto _LL269; _LL269:;} for( 0; _temp185 !=  0; _temp185=((
! struct Cyc_List_List*) _check_null( _temp185))->tl){ void** _temp276= 0; if(
! topt_ts !=  0){ _temp276=( void**)&(*(( struct _tuple8*)(( struct Cyc_List_List*)
  _check_null( topt_ts))->hd)).f2; topt_ts=(( struct Cyc_List_List*) _check_null(
! topt_ts))->tl;}{ struct Cyc_List_List* _temp279; struct Cyc_List_List* _temp281;
! struct _tuple6 _temp277= Cyc_Tcpat_tcPatRec( te,( struct Cyc_Absyn_Pat*)((
! struct Cyc_List_List*) _check_null( _temp185))->hd, _temp276, region_opt);
! _LL282: _temp281= _temp277.f1; goto _LL280; _LL280: _temp279= _temp277.f2; goto
! _LL278; _LL278: tv_result=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_append)( tv_result, _temp281); v_result=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! v_result, _temp279); pat_ts=({ struct Cyc_List_List* _temp283=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp283->hd=( void*)({ struct
! _tuple8* _temp284=( struct _tuple8*) _cycalloc( sizeof( struct _tuple8));
! _temp284->f1= Cyc_Absyn_empty_tqual(); _temp284->f2=( void*)(( struct Cyc_Core_Opt*)
  _check_null((( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*) _check_null(
! _temp185))->hd)->topt))->v; _temp284;}); _temp283->tl= pat_ts; _temp283;});}} t=(
! void*)({ struct Cyc_Absyn_TupleType_struct* _temp285=( struct Cyc_Absyn_TupleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct)); _temp285[ 0]=({ struct
! Cyc_Absyn_TupleType_struct _temp286; _temp286.tag= Cyc_Absyn_TupleType; _temp286.f1=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( pat_ts);
! _temp286;}); _temp285;}); goto _LL138;} _LL162: if( _temp189 !=  0){( int)
! _throw(({ void* _temp287[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("tcPat: struct<...> not implemented",
! sizeof( unsigned char), 35u), _tag_arr( _temp287, sizeof( void*), 0u));}));}{
! struct _RegionHandle _temp288= _new_region(); struct _RegionHandle* rgn=&
! _temp288; _push_region( rgn);{ struct _tuple4 _temp289=({ struct _tuple4
! _temp315; _temp315.f1= Cyc_Tcenv_lookup_type_vars( te); _temp315.f2= rgn;
! _temp315;}); struct Cyc_List_List* _temp290=(( struct Cyc_List_List*(*)( struct
  _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp289, _temp194->tvs); struct Cyc_List_List* _temp291=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
! struct _tuple5*)) Cyc_Core_snd, _temp290); t=( void*)({ struct Cyc_Absyn_StructType_struct*
! _temp292=( struct Cyc_Absyn_StructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct));
! _temp292[ 0]=({ struct Cyc_Absyn_StructType_struct _temp293; _temp293.tag= Cyc_Absyn_StructType;
! _temp293.f1=( struct _tuple1*)(( struct _tuple1*)(( struct Cyc_Core_Opt*)
! _check_null( _temp194->name))->v); _temp293.f2= _temp291; _temp293.f3=({ struct
! Cyc_Absyn_Structdecl** _temp294=( struct Cyc_Absyn_Structdecl**) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl*)); _temp294[ 0]= _temp194; _temp294;});
! _temp293;}); _temp292;}); if( topt !=  0){ Cyc_Tcutil_unify( t,*(( void**)
! _check_null( topt)));}* _temp193=({ struct Cyc_Core_Opt* _temp295=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp295->v=( void*) _temp291;
! _temp295;}); if( _temp194->fields ==  0){({ void* _temp296[ 0u]={}; Cyc_Tcutil_terr(
  p->loc, _tag_arr("can't destructure an abstract struct", sizeof( unsigned char),
! 37u), _tag_arr( _temp296, sizeof( void*), 0u));}); _npop_handler( 0u); goto
  _LL138;}{ struct Cyc_List_List* fields=(( struct Cyc_List_List*(*)( struct
  _RegionHandle* rgn, struct Cyc_Position_Segment* loc, struct Cyc_List_List* des,
  struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)( rgn, p->loc,
  _temp187,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp194->fields))->v);
  for( 0; fields !=  0; fields=(( struct Cyc_List_List*) _check_null( fields))->tl){
! struct _tuple9 _temp299; struct Cyc_Absyn_Pat* _temp300; struct Cyc_Absyn_Structfield*
! _temp302; struct _tuple9* _temp297=( struct _tuple9*)(( struct Cyc_List_List*)
! _check_null( fields))->hd; _temp299=* _temp297; _LL303: _temp302= _temp299.f1;
! goto _LL301; _LL301: _temp300= _temp299.f2; goto _LL298; _LL298: { void*
! _temp304= Cyc_Tcutil_rsubstitute( rgn, _temp290,( void*) _temp302->type); struct
! Cyc_List_List* _temp307; struct Cyc_List_List* _temp309; struct _tuple6 _temp305=
! Cyc_Tcpat_tcPatRec( te, _temp300,( void**)& _temp304, region_opt); _LL310:
! _temp309= _temp305.f1; goto _LL308; _LL308: _temp307= _temp305.f2; goto _LL306;
! _LL306: tv_result=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct
! Cyc_List_List* y)) Cyc_List_append)( tv_result, _temp309); v_result=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! v_result, _temp307); if( ! Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp300->topt))->v, _temp304)){({ struct Cyc_Std_String_pa_struct
! _temp314; _temp314.tag= Cyc_Std_String_pa; _temp314.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp300->topt))->v);{ struct Cyc_Std_String_pa_struct
! _temp313; _temp313.tag= Cyc_Std_String_pa; _temp313.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp304);{ struct Cyc_Std_String_pa_struct _temp312; _temp312.tag= Cyc_Std_String_pa;
! _temp312.f1=( struct _tagged_arr)* _temp302->name;{ void* _temp311[ 3u]={&
! _temp312,& _temp313,& _temp314}; Cyc_Tcutil_terr( p->loc, _tag_arr("field %s of struct pattern expects type %s != %s",
! sizeof( unsigned char), 49u), _tag_arr( _temp311, sizeof( void*), 3u));}}}});}}}}};
  _pop_region( rgn);} goto _LL138; _LL164: if((( int(*)( struct Cyc_List_List* x))
  Cyc_List_length)( _temp198) != (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp200->tvs)){({ void* _temp316[ 0u]={}; Cyc_Tcutil_terr( p->loc, _tag_arr("wrong number of existential type variables in pattern",
! sizeof( unsigned char), 54u), _tag_arr( _temp316, sizeof( void*), 0u));});} if(((
  int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp198) !=  0){ region_opt=
! 0;}{ struct _RegionHandle _temp317= _new_region(); struct _RegionHandle* rgn=&
! _temp317; _push_region( rgn);{ struct Cyc_List_List* _temp318= 0;{ struct Cyc_List_List*
  t= _temp198; for( 0; t !=  0; t=(( struct Cyc_List_List*) _check_null( t))->tl){
  struct Cyc_Absyn_Tvar* tv=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( t))->hd;{ void* _temp319=( void*)( Cyc_Absyn_compress_conref( tv->kind))->v;
! void* _temp329; void* _temp331; _LL321: if(( unsigned int) _temp319 >  1u?*((
! int*) _temp319) ==  Cyc_Absyn_Eq_constr: 0){ _LL330: _temp329=( void*)(( struct
! Cyc_Absyn_Eq_constr_struct*) _temp319)->f1; if( _temp329 == ( void*) Cyc_Absyn_BoxKind){
! goto _LL322;} else{ goto _LL323;}} else{ goto _LL323;} _LL323: if(( unsigned int)
! _temp319 >  1u?*(( int*) _temp319) ==  Cyc_Absyn_Eq_constr: 0){ _LL332: _temp331=(
! void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp319)->f1; goto _LL324;} else{
! goto _LL325;} _LL325: if( _temp319 == ( void*) Cyc_Absyn_No_constr){ goto _LL326;}
! else{ goto _LL327;} _LL327: if(( unsigned int) _temp319 >  1u?*(( int*) _temp319)
! ==  Cyc_Absyn_Forward_constr: 0){ goto _LL328;} else{ goto _LL320;} _LL322: goto
! _LL320; _LL324:({ struct Cyc_Std_String_pa_struct _temp336; _temp336.tag= Cyc_Std_String_pa;
! _temp336.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( _temp331);{ struct
! Cyc_Std_String_pa_struct _temp335; _temp335.tag= Cyc_Std_String_pa; _temp335.f1=(
! struct _tagged_arr)* tv->name;{ struct Cyc_Std_String_pa_struct _temp334;
! _temp334.tag= Cyc_Std_String_pa; _temp334.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp202->name);{ void* _temp333[ 3u]={& _temp334,& _temp335,& _temp336}; Cyc_Tcutil_terr(
  p->loc, _tag_arr("tunion member %s abstracts type variable %s of kind %s != B",
! sizeof( unsigned char), 60u), _tag_arr( _temp333, sizeof( void*), 3u));}}}});
! goto _LL320; _LL326:( void*)(( tv->kind)->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp337=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp337[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp338; _temp338.tag= Cyc_Absyn_Eq_constr;
! _temp338.f1=( void*)(( void*) Cyc_Absyn_BoxKind); _temp338;}); _temp337;})));
! goto _LL320; _LL328:( int) _throw(({ void* _temp339[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("forward after compress in conref", sizeof( unsigned char), 33u),
! _tag_arr( _temp339, sizeof( void*), 0u));})); _LL320:;} _temp318=({ struct Cyc_List_List*
! _temp340=( struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp340->hd=( void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp341=(
  struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp341[ 0]=({ struct Cyc_Absyn_VarType_struct _temp342; _temp342.tag= Cyc_Absyn_VarType;
! _temp342.f1= tv; _temp342;}); _temp341;})); _temp340->tl= _temp318; _temp340;});}}
! _temp318= Cyc_List_imp_rev( _temp318); tv_result=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( tv_result,
  _temp198);{ struct Cyc_Tcenv_Tenv* te2= Cyc_Tcenv_add_type_vars( p->loc, te,
  _temp198); struct Cyc_List_List* tqts= _temp200->typs; struct Cyc_List_List*
! _temp343= Cyc_Tcenv_lookup_type_vars( te); struct _tuple4 _temp344=({ struct
! _tuple4 _temp396; _temp396.f1= _temp343; _temp396.f2= rgn; _temp396;}); struct
! Cyc_List_List* _temp345=(( struct Cyc_List_List*(*)( struct _RegionHandle*,
  struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*), struct _tuple4*
  env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp344, _temp202->tvs); struct Cyc_List_List* _temp346=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp200->tvs, _temp318);
! struct Cyc_List_List* _temp347=(( struct Cyc_List_List*(*)( void*(* f)( struct
  _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)( struct _tuple5*))
! Cyc_Core_snd, _temp345); struct Cyc_List_List* _temp348=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
! struct _tuple5*)) Cyc_Core_snd, _temp346); struct Cyc_List_List* _temp349=((
  struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List* x, struct
! Cyc_List_List* y)) Cyc_List_rappend)( rgn, _temp345, _temp346); if( tqts ==  0){
! t=( void*)({ struct Cyc_Absyn_TunionType_struct* _temp350=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp350[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp351; _temp351.tag= Cyc_Absyn_TunionType;
! _temp351.f1=({ struct Cyc_Absyn_TunionInfo _temp352; _temp352.tunion_info=( void*)((
! void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp354=( struct Cyc_Absyn_KnownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp354[ 0]=({ struct
! Cyc_Absyn_KnownTunion_struct _temp355; _temp355.tag= Cyc_Absyn_KnownTunion;
! _temp355.f1=({ struct Cyc_Absyn_Tuniondecl** _temp356=( struct Cyc_Absyn_Tuniondecl**)
! _cycalloc( sizeof( struct Cyc_Absyn_Tuniondecl*)); _temp356[ 0]= _temp202;
! _temp356;}); _temp355;}); _temp354;})); _temp352.targs= _temp347; _temp352.rgn=(
! void*) Cyc_Absyn_new_evar(( struct Cyc_Core_Opt*)& Cyc_Tcpat_rk,({ struct Cyc_Core_Opt*
! _temp353=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp353->v=( void*) _temp343; _temp353;})); _temp352;}); _temp351;}); _temp350;});}
! else{ t=( void*)({ struct Cyc_Absyn_TunionFieldType_struct* _temp357=( struct
! Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionFieldType_struct));
! _temp357[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct _temp358; _temp358.tag=
! Cyc_Absyn_TunionFieldType; _temp358.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp359; _temp359.field_info=( void*)(( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp360=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp360[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp361; _temp361.tag= Cyc_Absyn_KnownTunionfield; _temp361.f1= _temp202;
! _temp361.f2= _temp200; _temp361;}); _temp360;})); _temp359.targs= _temp347;
! _temp359;}); _temp358;}); _temp357;});} if( topt !=  0? tqts ==  0: 0){ void*
! _temp362= Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_Absyn_TunionInfo
! _temp370; struct Cyc_List_List* _temp372; _LL364: if(( unsigned int) _temp362 > 
! 4u?*(( int*) _temp362) ==  Cyc_Absyn_TunionFieldType: 0){ goto _LL365;} else{
! goto _LL366;} _LL366: if(( unsigned int) _temp362 >  4u?*(( int*) _temp362) == 
! Cyc_Absyn_TunionType: 0){ _LL371: _temp370=(( struct Cyc_Absyn_TunionType_struct*)
! _temp362)->f1; _LL373: _temp372= _temp370.targs; goto _LL367;} else{ goto _LL368;}
! _LL368: goto _LL369; _LL365: t=( void*)({ struct Cyc_Absyn_TunionFieldType_struct*
! _temp374=( struct Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_TunionFieldType_struct)); _temp374[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct
! _temp375; _temp375.tag= Cyc_Absyn_TunionFieldType; _temp375.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp376; _temp376.field_info=( void*)(( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp377=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp377[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp378; _temp378.tag= Cyc_Absyn_KnownTunionfield; _temp378.f1= _temp202;
! _temp378.f2= _temp200; _temp378;}); _temp377;})); _temp376.targs= _temp347;
! _temp376;}); _temp375;}); _temp374;}); goto _LL363; _LL367: { struct Cyc_List_List*
! _temp379= _temp347; for( 0; _temp379 !=  0? _temp372 !=  0: 0;( _temp379=((
! struct Cyc_List_List*) _check_null( _temp379))->tl, _temp372=(( struct Cyc_List_List*)
! _check_null( _temp372))->tl)){ Cyc_Tcutil_unify(( void*)(( struct Cyc_List_List*)
! _check_null( _temp379))->hd,( void*)(( struct Cyc_List_List*) _check_null(
! _temp372))->hd);} goto _LL363;} _LL369: goto _LL363; _LL363:;} for( 0; _temp196
  !=  0? tqts !=  0: 0;( _temp196=(( struct Cyc_List_List*) _check_null( _temp196))->tl,
  tqts=(( struct Cyc_List_List*) _check_null( tqts))->tl)){ struct Cyc_Absyn_Pat*
! _temp380=( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*) _check_null( _temp196))->hd;
! void* _temp381= Cyc_Tcutil_rsubstitute( rgn, _temp349,(*(( struct _tuple8*)((
  struct Cyc_List_List*) _check_null( tqts))->hd)).f2); struct Cyc_List_List*
! _temp384; struct Cyc_List_List* _temp386; struct _tuple6 _temp382= Cyc_Tcpat_tcPatRec(
! te2, _temp380,( void**)& _temp381, region_opt); _LL387: _temp386= _temp382.f1;
! goto _LL385; _LL385: _temp384= _temp382.f2; goto _LL383; _LL383: tv_result=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! tv_result, _temp386); v_result=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_append)( v_result, _temp384); if( ! Cyc_Tcutil_unify((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp380->topt))->v, _temp381)){({
! struct Cyc_Std_String_pa_struct _temp391; _temp391.tag= Cyc_Std_String_pa;
! _temp391.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp380->topt))->v);{ struct Cyc_Std_String_pa_struct _temp390;
! _temp390.tag= Cyc_Std_String_pa; _temp390.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp381);{ struct Cyc_Std_String_pa_struct _temp389; _temp389.tag= Cyc_Std_String_pa;
! _temp389.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp202->name);{
! void* _temp388[ 3u]={& _temp389,& _temp390,& _temp391}; Cyc_Tcutil_terr(
! _temp380->loc, _tag_arr("%s expects argument type %s, not %s", sizeof(
! unsigned char), 36u), _tag_arr( _temp388, sizeof( void*), 3u));}}}});}} if(
! _temp196 !=  0){({ struct Cyc_Std_String_pa_struct _temp393; _temp393.tag= Cyc_Std_String_pa;
  _temp393.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp202->name);{
! void* _temp392[ 1u]={& _temp393}; Cyc_Tcutil_terr( p->loc, _tag_arr("too many arguments for tunion constructor %s",
! sizeof( unsigned char), 45u), _tag_arr( _temp392, sizeof( void*), 1u));}});} if(
! tqts !=  0){({ struct Cyc_Std_String_pa_struct _temp395; _temp395.tag= Cyc_Std_String_pa;
! _temp395.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp202->name);{
! void* _temp394[ 1u]={& _temp395}; Cyc_Tcutil_terr( p->loc, _tag_arr("too few arguments for tunion constructor %s",
! sizeof( unsigned char), 44u), _tag_arr( _temp394, sizeof( void*), 1u));}});}}};
  _pop_region( rgn);} goto _LL138; _LL166: goto _LL168; _LL168: goto _LL170;
! _LL170: t= Cyc_Absyn_wildtyp(({ struct Cyc_Core_Opt* _temp397=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp397->v=( void*) Cyc_Tcenv_lookup_type_vars(
! te); _temp397;})); goto _LL138; _LL138:;} tcpat_end: p->topt=({ struct Cyc_Core_Opt*
! _temp398=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp398->v=( void*) t; _temp398;}); return({ struct _tuple6 _temp399; _temp399.f1=
! tv_result; _temp399.f2= v_result; _temp399;});}} struct _tuple6 Cyc_Tcpat_tcPat(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Pat* p, void** topt, void**
! region_opt){ struct _tuple6 _temp400= Cyc_Tcpat_tcPatRec( te, p, topt,
! region_opt);{ struct _RegionHandle _temp401= _new_region(); struct _RegionHandle*
! r=& _temp401; _push_region( r); Cyc_Tcutil_check_unique_vars((( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tagged_arr*(* f)( struct Cyc_Absyn_Vardecl*),
! struct Cyc_List_List* x)) Cyc_List_rmap)( r, Cyc_Tcpat_get_name, _temp400.f2), p->loc,
  _tag_arr("pattern contains a repeated variable", sizeof( unsigned char), 37u));;
! _pop_region( r);} return _temp400;} void Cyc_Tcpat_check_pat_regions( struct Cyc_Tcenv_Tenv*
! te, struct Cyc_Absyn_Pat* p){ void* _temp402=( void*) p->r; struct Cyc_Absyn_Pat*
! _temp414; struct Cyc_List_List* _temp416; struct Cyc_List_List* _temp418; struct
! Cyc_List_List* _temp420; _LL404: if(( unsigned int) _temp402 >  2u?*(( int*)
! _temp402) ==  Cyc_Absyn_Pointer_p: 0){ _LL415: _temp414=(( struct Cyc_Absyn_Pointer_p_struct*)
! _temp402)->f1; goto _LL405;} else{ goto _LL406;} _LL406: if(( unsigned int)
! _temp402 >  2u?*(( int*) _temp402) ==  Cyc_Absyn_Tunion_p: 0){ _LL417: _temp416=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp402)->f4; goto _LL407;} else{ goto
! _LL408;} _LL408: if(( unsigned int) _temp402 >  2u?*(( int*) _temp402) ==  Cyc_Absyn_Struct_p:
! 0){ _LL419: _temp418=(( struct Cyc_Absyn_Struct_p_struct*) _temp402)->f4; goto
! _LL409;} else{ goto _LL410;} _LL410: if(( unsigned int) _temp402 >  2u?*(( int*)
! _temp402) ==  Cyc_Absyn_Tuple_p: 0){ _LL421: _temp420=(( struct Cyc_Absyn_Tuple_p_struct*)
! _temp402)->f1; goto _LL411;} else{ goto _LL412;} _LL412: goto _LL413; _LL405:
! Cyc_Tcpat_check_pat_regions( te, _temp414);{ void* _temp422=( void*)(( struct
! Cyc_Core_Opt*) _check_null( p->topt))->v; struct Cyc_Absyn_PtrInfo _temp430;
! void* _temp432; struct Cyc_Absyn_TunionInfo _temp434; void* _temp436; _LL424:
! if(( unsigned int) _temp422 >  4u?*(( int*) _temp422) ==  Cyc_Absyn_PointerType:
! 0){ _LL431: _temp430=(( struct Cyc_Absyn_PointerType_struct*) _temp422)->f1;
! _LL433: _temp432=( void*) _temp430.rgn_typ; goto _LL425;} else{ goto _LL426;}
! _LL426: if(( unsigned int) _temp422 >  4u?*(( int*) _temp422) ==  Cyc_Absyn_TunionType:
! 0){ _LL435: _temp434=(( struct Cyc_Absyn_TunionType_struct*) _temp422)->f1;
! _LL437: _temp436=( void*) _temp434.rgn; goto _LL427;} else{ goto _LL428;} _LL428:
! goto _LL429; _LL425: _temp436= _temp432; goto _LL427; _LL427: Cyc_Tcenv_check_rgn_accessible(
! te, p->loc, _temp436); return; _LL429:( int) _throw(( void*)({ struct Cyc_Core_Impossible_struct*
! _temp438=( struct Cyc_Core_Impossible_struct*) _cycalloc( sizeof( struct Cyc_Core_Impossible_struct));
! _temp438[ 0]=({ struct Cyc_Core_Impossible_struct _temp439; _temp439.tag= Cyc_Core_Impossible;
! _temp439.f1= _tag_arr("check_pat_regions: bad pointer type", sizeof(
! unsigned char), 36u); _temp439;}); _temp438;})); _LL423:;} _LL407: for( 0;
! _temp416 !=  0; _temp416=(( struct Cyc_List_List*) _check_null( _temp416))->tl){
  Cyc_Tcpat_check_pat_regions( te,( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*)
! _check_null( _temp416))->hd);}{ void* _temp440=( void*)(( struct Cyc_Core_Opt*)
! _check_null( p->topt))->v; struct Cyc_Absyn_TunionInfo _temp448; void* _temp450;
! _LL442: if(( unsigned int) _temp440 >  4u?*(( int*) _temp440) ==  Cyc_Absyn_TunionType:
! 0){ _LL449: _temp448=(( struct Cyc_Absyn_TunionType_struct*) _temp440)->f1;
! _LL451: _temp450=( void*) _temp448.rgn; goto _LL443;} else{ goto _LL444;} _LL444:
! if(( unsigned int) _temp440 >  4u?*(( int*) _temp440) ==  Cyc_Absyn_TunionFieldType:
! 0){ goto _LL445;} else{ goto _LL446;} _LL446: goto _LL447; _LL443: Cyc_Tcenv_check_rgn_accessible(
! te, p->loc, _temp450); return; _LL445: return; _LL447:( int) _throw(( void*)({
! struct Cyc_Core_Impossible_struct* _temp452=( struct Cyc_Core_Impossible_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Impossible_struct)); _temp452[ 0]=({ struct
! Cyc_Core_Impossible_struct _temp453; _temp453.tag= Cyc_Core_Impossible; _temp453.f1=
  _tag_arr("check_pat_regions: bad tunion type", sizeof( unsigned char), 35u);
! _temp453;}); _temp452;})); _LL441:;} _LL409: _temp420=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Pat*(* f)( struct _tuple7*), struct Cyc_List_List* x)) Cyc_List_map)((
! struct Cyc_Absyn_Pat*(*)( struct _tuple7*)) Cyc_Core_snd, _temp418); goto _LL411;
! _LL411: for( 0; _temp420 !=  0; _temp420=(( struct Cyc_List_List*) _check_null(
! _temp420))->tl){ Cyc_Tcpat_check_pat_regions( te,( struct Cyc_Absyn_Pat*)((
! struct Cyc_List_List*) _check_null( _temp420))->hd);} return; _LL413: return;
! _LL403:;} static const int Cyc_Tcpat_Name_v= 0; struct Cyc_Tcpat_Name_v_struct{
  int tag; struct _tagged_arr f1; } ; static const int Cyc_Tcpat_Int_v= 1; struct
  Cyc_Tcpat_Int_v_struct{ int tag; int f1; } ; struct Cyc_Tcpat_Con_s{ void* name;
  int arity; struct Cyc_Core_Opt* span; } ; static const int Cyc_Tcpat_Any= 0;
  static const int Cyc_Tcpat_Con= 0; struct Cyc_Tcpat_Con_struct{ int tag; struct
  Cyc_Tcpat_Con_s* f1; struct Cyc_List_List* f2; } ; static int Cyc_Tcpat_compare_con(
! struct Cyc_Tcpat_Con_s* c1, struct Cyc_Tcpat_Con_s* c2){ void* _temp454=( void*)
! c1->name; struct _tagged_arr _temp460; int _temp462; _LL456: if(*(( int*)
! _temp454) ==  Cyc_Tcpat_Name_v){ _LL461: _temp460=(( struct Cyc_Tcpat_Name_v_struct*)
! _temp454)->f1; goto _LL457;} else{ goto _LL458;} _LL458: if(*(( int*) _temp454)
! ==  Cyc_Tcpat_Int_v){ _LL463: _temp462=(( struct Cyc_Tcpat_Int_v_struct*)
! _temp454)->f1; goto _LL459;} else{ goto _LL455;} _LL457: { void* _temp464=( void*)
! c2->name; struct _tagged_arr _temp470; _LL466: if(*(( int*) _temp464) ==  Cyc_Tcpat_Name_v){
! _LL471: _temp470=(( struct Cyc_Tcpat_Name_v_struct*) _temp464)->f1; goto _LL467;}
! else{ goto _LL468;} _LL468: if(*(( int*) _temp464) ==  Cyc_Tcpat_Int_v){ goto
! _LL469;} else{ goto _LL465;} _LL467: return Cyc_Std_zstrcmp( _temp460, _temp470);
! _LL469: return - 1; _LL465:;} _LL459: { void* _temp472=( void*) c2->name; int
! _temp478; _LL474: if(*(( int*) _temp472) ==  Cyc_Tcpat_Name_v){ goto _LL475;}
! else{ goto _LL476;} _LL476: if(*(( int*) _temp472) ==  Cyc_Tcpat_Int_v){ _LL479:
! _temp478=(( struct Cyc_Tcpat_Int_v_struct*) _temp472)->f1; goto _LL477;} else{
! goto _LL473;} _LL475: return 1; _LL477: return _temp462 -  _temp478; _LL473:;}
! _LL455:;} static struct Cyc_Set_Set* Cyc_Tcpat_empty_con_set(){ return(( struct
  Cyc_Set_Set*(*)( int(* cmp)( struct Cyc_Tcpat_Con_s*, struct Cyc_Tcpat_Con_s*)))
  Cyc_Set_empty)( Cyc_Tcpat_compare_con);} static struct Cyc_Core_Opt Cyc_Tcpat_one_opt={(
  void*) 1}; static struct Cyc_Core_Opt Cyc_Tcpat_two_opt={( void*) 2}; static
  struct Cyc_Core_Opt* Cyc_Tcpat_one_opt_ptr=( struct Cyc_Core_Opt*)& Cyc_Tcpat_one_opt;
! static unsigned char _temp481[ 5u]="NULL"; static struct Cyc_Tcpat_Name_v_struct
! Cyc_Tcpat_null_name_value={ 0u,{ _temp481, _temp481, _temp481 +  5u}}; static
! unsigned char _temp483[ 4u]="ptr"; static struct Cyc_Tcpat_Name_v_struct Cyc_Tcpat_ptr_name_value={
! 0u,{ _temp483, _temp483, _temp483 +  4u}}; static unsigned char _temp485[ 6u]="tuple";
! static struct Cyc_Tcpat_Name_v_struct Cyc_Tcpat_tuple_name_value={ 0u,{ _temp485,
! _temp485, _temp485 +  6u}}; static struct Cyc_Tcpat_Con_s Cyc_Tcpat_null_con0={(
  void*)(( void*)& Cyc_Tcpat_null_name_value), 0,( struct Cyc_Core_Opt*)& Cyc_Tcpat_two_opt};
  static struct Cyc_Tcpat_Con_s Cyc_Tcpat_null_ptr_con0={( void*)(( void*)& Cyc_Tcpat_ptr_name_value),
  1,( struct Cyc_Core_Opt*)& Cyc_Tcpat_two_opt}; static struct Cyc_Tcpat_Con_s Cyc_Tcpat_ptr_con0={(
--- 888,1209 ----
  void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp258=( struct Cyc_Absyn_KnownTunion_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp258[ 0]=({ struct
  Cyc_Absyn_KnownTunion_struct _temp259; _temp259.tag= Cyc_Absyn_KnownTunion;
! _temp259.f1= _temp253; _temp259;}); _temp258;})); _temp257.targs= _temp247;
! _temp257.rgn=( void*) ptr_rgn; _temp257;}); _temp256;}); _temp255;}); goto
! _LL240; _LL244: t=( void*)({ struct Cyc_Absyn_PointerType_struct* _temp260=(
! struct Cyc_Absyn_PointerType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct));
! _temp260[ 0]=({ struct Cyc_Absyn_PointerType_struct _temp261; _temp261.tag= Cyc_Absyn_PointerType;
! _temp261.f1=({ struct Cyc_Absyn_PtrInfo _temp262; _temp262.elt_typ=( void*)((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp183->topt))->v); _temp262.rgn_typ=(
! void*) ptr_rgn; _temp262.nullable=(( struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)();
! _temp262.tq= Cyc_Absyn_empty_tqual(); _temp262.bounds= Cyc_Absyn_empty_conref();
! _temp262;}); _temp261;}); _temp260;}); goto _LL240; _LL240:;} else{ t=( void*)({
! struct Cyc_Absyn_PointerType_struct* _temp263=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp263[ 0]=({ struct
! Cyc_Absyn_PointerType_struct _temp264; _temp264.tag= Cyc_Absyn_PointerType;
! _temp264.f1=({ struct Cyc_Absyn_PtrInfo _temp265; _temp265.elt_typ=( void*)((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp183->topt))->v); _temp265.rgn_typ=(
! void*) ptr_rgn; _temp265.nullable=(( struct Cyc_Absyn_Conref*(*)()) Cyc_Absyn_empty_conref)();
! _temp265.tq= Cyc_Absyn_empty_tqual(); _temp265.bounds= Cyc_Absyn_empty_conref();
! _temp265;}); _temp264;}); _temp263;});} goto _LL138;}} _LL160: { struct Cyc_List_List*
! pat_ts= 0; struct Cyc_List_List* topt_ts= 0; if( topt !=  0){ void* _temp267=
  Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_List_List*
! _temp273; _LL269: if(( unsigned int) _temp267 >  4u?*(( int*) _temp267) ==  Cyc_Absyn_TupleType:
! 0){ _LL274: _temp273=(( struct Cyc_Absyn_TupleType_struct*) _temp267)->f1; goto
! _LL270;} else{ goto _LL271;} _LL271: goto _LL272; _LL270: topt_ts= _temp273;
! goto _LL268; _LL272: goto _LL268; _LL268:;} for( 0; _temp185 !=  0; _temp185=((
! struct Cyc_List_List*) _check_null( _temp185))->tl){ void** _temp275= 0; if(
! topt_ts !=  0){ _temp275=( void**)&(*(( struct _tuple8*)(( struct Cyc_List_List*)
  _check_null( topt_ts))->hd)).f2; topt_ts=(( struct Cyc_List_List*) _check_null(
! topt_ts))->tl;}{ struct Cyc_List_List* _temp278; struct Cyc_List_List* _temp280;
! struct _tuple6 _temp276= Cyc_Tcpat_tcPatRec( te,( struct Cyc_Absyn_Pat*)((
! struct Cyc_List_List*) _check_null( _temp185))->hd, _temp275, region_opt);
! _LL281: _temp280= _temp276.f1; goto _LL279; _LL279: _temp278= _temp276.f2; goto
! _LL277; _LL277: tv_result=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_append)( tv_result, _temp280); v_result=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! v_result, _temp278); pat_ts=({ struct Cyc_List_List* _temp282=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp282->hd=( void*)({ struct
! _tuple8* _temp283=( struct _tuple8*) _cycalloc( sizeof( struct _tuple8));
! _temp283->f1= Cyc_Absyn_empty_tqual(); _temp283->f2=( void*)(( struct Cyc_Core_Opt*)
  _check_null((( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*) _check_null(
! _temp185))->hd)->topt))->v; _temp283;}); _temp282->tl= pat_ts; _temp282;});}} t=(
! void*)({ struct Cyc_Absyn_TupleType_struct* _temp284=( struct Cyc_Absyn_TupleType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct)); _temp284[ 0]=({ struct
! Cyc_Absyn_TupleType_struct _temp285; _temp285.tag= Cyc_Absyn_TupleType; _temp285.f1=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( pat_ts);
! _temp285;}); _temp284;}); goto _LL138;} _LL162: if( _temp189 !=  0){( int)
! _throw(({ void* _temp286[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("tcPat: struct<...> not implemented",
! sizeof( unsigned char), 35u), _tag_arr( _temp286, sizeof( void*), 0u));}));}{
! struct _RegionHandle _temp287= _new_region(); struct _RegionHandle* rgn=&
! _temp287; _push_region( rgn);{ struct _tuple4 _temp288=({ struct _tuple4
! _temp314; _temp314.f1= Cyc_Tcenv_lookup_type_vars( te); _temp314.f2= rgn;
! _temp314;}); struct Cyc_List_List* _temp289=(( struct Cyc_List_List*(*)( struct
  _RegionHandle*, struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*),
  struct _tuple4* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp288, _temp194->tvs); struct Cyc_List_List* _temp290=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
! struct _tuple5*)) Cyc_Core_snd, _temp289); t=( void*)({ struct Cyc_Absyn_StructType_struct*
! _temp291=( struct Cyc_Absyn_StructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct));
! _temp291[ 0]=({ struct Cyc_Absyn_StructType_struct _temp292; _temp292.tag= Cyc_Absyn_StructType;
! _temp292.f1=( struct _tuple1*)(( struct _tuple1*)(( struct Cyc_Core_Opt*)
! _check_null( _temp194->name))->v); _temp292.f2= _temp290; _temp292.f3=({ struct
! Cyc_Absyn_Structdecl** _temp293=( struct Cyc_Absyn_Structdecl**) _cycalloc(
! sizeof( struct Cyc_Absyn_Structdecl*)); _temp293[ 0]= _temp194; _temp293;});
! _temp292;}); _temp291;}); if( topt !=  0){ Cyc_Tcutil_unify( t,*(( void**)
! _check_null( topt)));}* _temp193=({ struct Cyc_Core_Opt* _temp294=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp294->v=( void*) _temp290;
! _temp294;}); if( _temp194->fields ==  0){({ void* _temp295[ 0u]={}; Cyc_Tcutil_terr(
  p->loc, _tag_arr("can't destructure an abstract struct", sizeof( unsigned char),
! 37u), _tag_arr( _temp295, sizeof( void*), 0u));}); _npop_handler( 0u); goto
  _LL138;}{ struct Cyc_List_List* fields=(( struct Cyc_List_List*(*)( struct
  _RegionHandle* rgn, struct Cyc_Position_Segment* loc, struct Cyc_List_List* des,
  struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)( rgn, p->loc,
  _temp187,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp194->fields))->v);
  for( 0; fields !=  0; fields=(( struct Cyc_List_List*) _check_null( fields))->tl){
! struct _tuple9 _temp298; struct Cyc_Absyn_Pat* _temp299; struct Cyc_Absyn_Structfield*
! _temp301; struct _tuple9* _temp296=( struct _tuple9*)(( struct Cyc_List_List*)
! _check_null( fields))->hd; _temp298=* _temp296; _LL302: _temp301= _temp298.f1;
! goto _LL300; _LL300: _temp299= _temp298.f2; goto _LL297; _LL297: { void*
! _temp303= Cyc_Tcutil_rsubstitute( rgn, _temp289,( void*) _temp301->type); struct
! Cyc_List_List* _temp306; struct Cyc_List_List* _temp308; struct _tuple6 _temp304=
! Cyc_Tcpat_tcPatRec( te, _temp299,( void**)& _temp303, region_opt); _LL309:
! _temp308= _temp304.f1; goto _LL307; _LL307: _temp306= _temp304.f2; goto _LL305;
! _LL305: tv_result=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct
! Cyc_List_List* y)) Cyc_List_append)( tv_result, _temp308); v_result=(( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! v_result, _temp306); if( ! Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp299->topt))->v, _temp303)){({ struct Cyc_Std_String_pa_struct
! _temp313; _temp313.tag= Cyc_Std_String_pa; _temp313.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp299->topt))->v);{ struct Cyc_Std_String_pa_struct
! _temp312; _temp312.tag= Cyc_Std_String_pa; _temp312.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp303);{ struct Cyc_Std_String_pa_struct _temp311; _temp311.tag= Cyc_Std_String_pa;
! _temp311.f1=( struct _tagged_arr)* _temp301->name;{ void* _temp310[ 3u]={&
! _temp311,& _temp312,& _temp313}; Cyc_Tcutil_terr( p->loc, _tag_arr("field %s of struct pattern expects type %s != %s",
! sizeof( unsigned char), 49u), _tag_arr( _temp310, sizeof( void*), 3u));}}}});}}}}};
  _pop_region( rgn);} goto _LL138; _LL164: if((( int(*)( struct Cyc_List_List* x))
  Cyc_List_length)( _temp198) != (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp200->tvs)){({ void* _temp315[ 0u]={}; Cyc_Tcutil_terr( p->loc, _tag_arr("wrong number of existential type variables in pattern",
! sizeof( unsigned char), 54u), _tag_arr( _temp315, sizeof( void*), 0u));});} if(((
  int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp198) !=  0){ region_opt=
! 0;}{ struct _RegionHandle _temp316= _new_region(); struct _RegionHandle* rgn=&
! _temp316; _push_region( rgn);{ struct Cyc_List_List* _temp317= 0;{ struct Cyc_List_List*
  t= _temp198; for( 0; t !=  0; t=(( struct Cyc_List_List*) _check_null( t))->tl){
  struct Cyc_Absyn_Tvar* tv=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( t))->hd;{ void* _temp318=( void*)( Cyc_Absyn_compress_conref( tv->kind))->v;
! void* _temp328; void* _temp330; _LL320: if(( unsigned int) _temp318 >  1u?*((
! int*) _temp318) ==  Cyc_Absyn_Eq_constr: 0){ _LL329: _temp328=( void*)(( struct
! Cyc_Absyn_Eq_constr_struct*) _temp318)->f1; if( _temp328 == ( void*) Cyc_Absyn_BoxKind){
! goto _LL321;} else{ goto _LL322;}} else{ goto _LL322;} _LL322: if(( unsigned int)
! _temp318 >  1u?*(( int*) _temp318) ==  Cyc_Absyn_Eq_constr: 0){ _LL331: _temp330=(
! void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp318)->f1; goto _LL323;} else{
! goto _LL324;} _LL324: if( _temp318 == ( void*) Cyc_Absyn_No_constr){ goto _LL325;}
! else{ goto _LL326;} _LL326: if(( unsigned int) _temp318 >  1u?*(( int*) _temp318)
! ==  Cyc_Absyn_Forward_constr: 0){ goto _LL327;} else{ goto _LL319;} _LL321: goto
! _LL319; _LL323:({ struct Cyc_Std_String_pa_struct _temp335; _temp335.tag= Cyc_Std_String_pa;
! _temp335.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( _temp330);{ struct
! Cyc_Std_String_pa_struct _temp334; _temp334.tag= Cyc_Std_String_pa; _temp334.f1=(
! struct _tagged_arr)* tv->name;{ struct Cyc_Std_String_pa_struct _temp333;
! _temp333.tag= Cyc_Std_String_pa; _temp333.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp202->name);{ void* _temp332[ 3u]={& _temp333,& _temp334,& _temp335}; Cyc_Tcutil_terr(
  p->loc, _tag_arr("tunion member %s abstracts type variable %s of kind %s != B",
! sizeof( unsigned char), 60u), _tag_arr( _temp332, sizeof( void*), 3u));}}}});
! goto _LL319; _LL325:( void*)(( tv->kind)->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp336=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp336[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp337; _temp337.tag= Cyc_Absyn_Eq_constr;
! _temp337.f1=( void*)(( void*) Cyc_Absyn_BoxKind); _temp337;}); _temp336;})));
! goto _LL319; _LL327:( int) _throw(({ void* _temp338[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("forward after compress in conref", sizeof( unsigned char), 33u),
! _tag_arr( _temp338, sizeof( void*), 0u));})); _LL319:;} _temp317=({ struct Cyc_List_List*
! _temp339=( struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp339->hd=( void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp340=(
  struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp340[ 0]=({ struct Cyc_Absyn_VarType_struct _temp341; _temp341.tag= Cyc_Absyn_VarType;
! _temp341.f1= tv; _temp341;}); _temp340;})); _temp339->tl= _temp317; _temp339;});}}
! _temp317= Cyc_List_imp_rev( _temp317); tv_result=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)( tv_result,
  _temp198);{ struct Cyc_Tcenv_Tenv* te2= Cyc_Tcenv_add_type_vars( p->loc, te,
  _temp198); struct Cyc_List_List* tqts= _temp200->typs; struct Cyc_List_List*
! _temp342= Cyc_Tcenv_lookup_type_vars( te); struct _tuple4 _temp343=({ struct
! _tuple4 _temp394; _temp394.f1= _temp342; _temp394.f2= rgn; _temp394;}); struct
! Cyc_List_List* _temp344=(( struct Cyc_List_List*(*)( struct _RegionHandle*,
  struct _tuple5*(* f)( struct _tuple4*, struct Cyc_Absyn_Tvar*), struct _tuple4*
  env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_r_make_inst_var,&
! _temp343, _temp202->tvs); struct Cyc_List_List* _temp345=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp200->tvs, _temp317);
! struct Cyc_List_List* _temp346=(( struct Cyc_List_List*(*)( void*(* f)( struct
  _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)( struct _tuple5*))
! Cyc_Core_snd, _temp344); struct Cyc_List_List* _temp347=(( struct Cyc_List_List*(*)(
  void*(* f)( struct _tuple5*), struct Cyc_List_List* x)) Cyc_List_map)(( void*(*)(
! struct _tuple5*)) Cyc_Core_snd, _temp345); struct Cyc_List_List* _temp348=((
  struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List* x, struct
! Cyc_List_List* y)) Cyc_List_rappend)( rgn, _temp344, _temp345); if( tqts ==  0){
! t=( void*)({ struct Cyc_Absyn_TunionType_struct* _temp349=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp349[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp350; _temp350.tag= Cyc_Absyn_TunionType;
! _temp350.f1=({ struct Cyc_Absyn_TunionInfo _temp351; _temp351.tunion_info=( void*)((
! void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp353=( struct Cyc_Absyn_KnownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp353[ 0]=({ struct
! Cyc_Absyn_KnownTunion_struct _temp354; _temp354.tag= Cyc_Absyn_KnownTunion;
! _temp354.f1= _temp202; _temp354;}); _temp353;})); _temp351.targs= _temp346;
! _temp351.rgn=( void*) Cyc_Absyn_new_evar(( struct Cyc_Core_Opt*)& Cyc_Tcpat_rk,({
! struct Cyc_Core_Opt* _temp352=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp352->v=( void*) _temp342; _temp352;})); _temp351;});
! _temp350;}); _temp349;});} else{ t=( void*)({ struct Cyc_Absyn_TunionFieldType_struct*
! _temp355=( struct Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_TunionFieldType_struct)); _temp355[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct
! _temp356; _temp356.tag= Cyc_Absyn_TunionFieldType; _temp356.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp357; _temp357.field_info=( void*)(( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp358=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp358[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp359; _temp359.tag= Cyc_Absyn_KnownTunionfield; _temp359.f1= _temp202;
! _temp359.f2= _temp200; _temp359;}); _temp358;})); _temp357.targs= _temp346;
! _temp357;}); _temp356;}); _temp355;});} if( topt !=  0? tqts ==  0: 0){ void*
! _temp360= Cyc_Tcutil_compress(*(( void**) _check_null( topt))); struct Cyc_Absyn_TunionInfo
! _temp368; struct Cyc_List_List* _temp370; _LL362: if(( unsigned int) _temp360 > 
! 4u?*(( int*) _temp360) ==  Cyc_Absyn_TunionFieldType: 0){ goto _LL363;} else{
! goto _LL364;} _LL364: if(( unsigned int) _temp360 >  4u?*(( int*) _temp360) == 
! Cyc_Absyn_TunionType: 0){ _LL369: _temp368=(( struct Cyc_Absyn_TunionType_struct*)
! _temp360)->f1; _LL371: _temp370= _temp368.targs; goto _LL365;} else{ goto _LL366;}
! _LL366: goto _LL367; _LL363: t=( void*)({ struct Cyc_Absyn_TunionFieldType_struct*
! _temp372=( struct Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_TunionFieldType_struct)); _temp372[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct
! _temp373; _temp373.tag= Cyc_Absyn_TunionFieldType; _temp373.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp374; _temp374.field_info=( void*)(( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp375=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp375[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp376; _temp376.tag= Cyc_Absyn_KnownTunionfield; _temp376.f1= _temp202;
! _temp376.f2= _temp200; _temp376;}); _temp375;})); _temp374.targs= _temp346;
! _temp374;}); _temp373;}); _temp372;}); goto _LL361; _LL365: { struct Cyc_List_List*
! _temp377= _temp346; for( 0; _temp377 !=  0? _temp370 !=  0: 0;( _temp377=((
! struct Cyc_List_List*) _check_null( _temp377))->tl, _temp370=(( struct Cyc_List_List*)
! _check_null( _temp370))->tl)){ Cyc_Tcutil_unify(( void*)(( struct Cyc_List_List*)
! _check_null( _temp377))->hd,( void*)(( struct Cyc_List_List*) _check_null(
! _temp370))->hd);} goto _LL361;} _LL367: goto _LL361; _LL361:;} for( 0; _temp196
  !=  0? tqts !=  0: 0;( _temp196=(( struct Cyc_List_List*) _check_null( _temp196))->tl,
  tqts=(( struct Cyc_List_List*) _check_null( tqts))->tl)){ struct Cyc_Absyn_Pat*
! _temp378=( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*) _check_null( _temp196))->hd;
! void* _temp379= Cyc_Tcutil_rsubstitute( rgn, _temp348,(*(( struct _tuple8*)((
  struct Cyc_List_List*) _check_null( tqts))->hd)).f2); struct Cyc_List_List*
! _temp382; struct Cyc_List_List* _temp384; struct _tuple6 _temp380= Cyc_Tcpat_tcPatRec(
! te2, _temp378,( void**)& _temp379, region_opt); _LL385: _temp384= _temp380.f1;
! goto _LL383; _LL383: _temp382= _temp380.f2; goto _LL381; _LL381: tv_result=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_append)(
! tv_result, _temp384); v_result=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_append)( v_result, _temp382); if( ! Cyc_Tcutil_unify((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp378->topt))->v, _temp379)){({
! struct Cyc_Std_String_pa_struct _temp389; _temp389.tag= Cyc_Std_String_pa;
! _temp389.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp378->topt))->v);{ struct Cyc_Std_String_pa_struct _temp388;
! _temp388.tag= Cyc_Std_String_pa; _temp388.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! _temp379);{ struct Cyc_Std_String_pa_struct _temp387; _temp387.tag= Cyc_Std_String_pa;
! _temp387.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp202->name);{
! void* _temp386[ 3u]={& _temp387,& _temp388,& _temp389}; Cyc_Tcutil_terr(
! _temp378->loc, _tag_arr("%s expects argument type %s, not %s", sizeof(
! unsigned char), 36u), _tag_arr( _temp386, sizeof( void*), 3u));}}}});}} if(
! _temp196 !=  0){({ struct Cyc_Std_String_pa_struct _temp391; _temp391.tag= Cyc_Std_String_pa;
! _temp391.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp202->name);{
! void* _temp390[ 1u]={& _temp391}; Cyc_Tcutil_terr( p->loc, _tag_arr("too many arguments for tunion constructor %s",
! sizeof( unsigned char), 45u), _tag_arr( _temp390, sizeof( void*), 1u));}});} if(
! tqts !=  0){({ struct Cyc_Std_String_pa_struct _temp393; _temp393.tag= Cyc_Std_String_pa;
  _temp393.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp202->name);{
! void* _temp392[ 1u]={& _temp393}; Cyc_Tcutil_terr( p->loc, _tag_arr("too few arguments for tunion constructor %s",
! sizeof( unsigned char), 44u), _tag_arr( _temp392, sizeof( void*), 1u));}});}}};
  _pop_region( rgn);} goto _LL138; _LL166: goto _LL168; _LL168: goto _LL170;
! _LL170: t= Cyc_Absyn_wildtyp(({ struct Cyc_Core_Opt* _temp395=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp395->v=( void*) Cyc_Tcenv_lookup_type_vars(
! te); _temp395;})); goto _LL138; _LL138:;} tcpat_end: p->topt=({ struct Cyc_Core_Opt*
! _temp396=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp396->v=( void*) t; _temp396;}); return({ struct _tuple6 _temp397; _temp397.f1=
! tv_result; _temp397.f2= v_result; _temp397;});}} struct _tuple6 Cyc_Tcpat_tcPat(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Pat* p, void** topt, void**
! region_opt){ struct _tuple6 _temp398= Cyc_Tcpat_tcPatRec( te, p, topt,
! region_opt);{ struct _RegionHandle _temp399= _new_region(); struct _RegionHandle*
! r=& _temp399; _push_region( r); Cyc_Tcutil_check_unique_vars((( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tagged_arr*(* f)( struct Cyc_Absyn_Vardecl*),
! struct Cyc_List_List* x)) Cyc_List_rmap)( r, Cyc_Tcpat_get_name, _temp398.f2), p->loc,
  _tag_arr("pattern contains a repeated variable", sizeof( unsigned char), 37u));;
! _pop_region( r);} return _temp398;} void Cyc_Tcpat_check_pat_regions( struct Cyc_Tcenv_Tenv*
! te, struct Cyc_Absyn_Pat* p){ void* _temp400=( void*) p->r; struct Cyc_Absyn_Pat*
! _temp412; struct Cyc_List_List* _temp414; struct Cyc_List_List* _temp416; struct
! Cyc_List_List* _temp418; _LL402: if(( unsigned int) _temp400 >  2u?*(( int*)
! _temp400) ==  Cyc_Absyn_Pointer_p: 0){ _LL413: _temp412=(( struct Cyc_Absyn_Pointer_p_struct*)
! _temp400)->f1; goto _LL403;} else{ goto _LL404;} _LL404: if(( unsigned int)
! _temp400 >  2u?*(( int*) _temp400) ==  Cyc_Absyn_Tunion_p: 0){ _LL415: _temp414=((
! struct Cyc_Absyn_Tunion_p_struct*) _temp400)->f4; goto _LL405;} else{ goto
! _LL406;} _LL406: if(( unsigned int) _temp400 >  2u?*(( int*) _temp400) ==  Cyc_Absyn_Struct_p:
! 0){ _LL417: _temp416=(( struct Cyc_Absyn_Struct_p_struct*) _temp400)->f4; goto
! _LL407;} else{ goto _LL408;} _LL408: if(( unsigned int) _temp400 >  2u?*(( int*)
! _temp400) ==  Cyc_Absyn_Tuple_p: 0){ _LL419: _temp418=(( struct Cyc_Absyn_Tuple_p_struct*)
! _temp400)->f1; goto _LL409;} else{ goto _LL410;} _LL410: goto _LL411; _LL403:
! Cyc_Tcpat_check_pat_regions( te, _temp412);{ void* _temp420=( void*)(( struct
! Cyc_Core_Opt*) _check_null( p->topt))->v; struct Cyc_Absyn_PtrInfo _temp428;
! void* _temp430; struct Cyc_Absyn_TunionInfo _temp432; void* _temp434; _LL422:
! if(( unsigned int) _temp420 >  4u?*(( int*) _temp420) ==  Cyc_Absyn_PointerType:
! 0){ _LL429: _temp428=(( struct Cyc_Absyn_PointerType_struct*) _temp420)->f1;
! _LL431: _temp430=( void*) _temp428.rgn_typ; goto _LL423;} else{ goto _LL424;}
! _LL424: if(( unsigned int) _temp420 >  4u?*(( int*) _temp420) ==  Cyc_Absyn_TunionType:
! 0){ _LL433: _temp432=(( struct Cyc_Absyn_TunionType_struct*) _temp420)->f1;
! _LL435: _temp434=( void*) _temp432.rgn; goto _LL425;} else{ goto _LL426;} _LL426:
! goto _LL427; _LL423: _temp434= _temp430; goto _LL425; _LL425: Cyc_Tcenv_check_rgn_accessible(
! te, p->loc, _temp434); return; _LL427:( int) _throw(( void*)({ struct Cyc_Core_Impossible_struct*
! _temp436=( struct Cyc_Core_Impossible_struct*) _cycalloc( sizeof( struct Cyc_Core_Impossible_struct));
! _temp436[ 0]=({ struct Cyc_Core_Impossible_struct _temp437; _temp437.tag= Cyc_Core_Impossible;
! _temp437.f1= _tag_arr("check_pat_regions: bad pointer type", sizeof(
! unsigned char), 36u); _temp437;}); _temp436;})); _LL421:;} _LL405: for( 0;
! _temp414 !=  0; _temp414=(( struct Cyc_List_List*) _check_null( _temp414))->tl){
  Cyc_Tcpat_check_pat_regions( te,( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*)
! _check_null( _temp414))->hd);}{ void* _temp438=( void*)(( struct Cyc_Core_Opt*)
! _check_null( p->topt))->v; struct Cyc_Absyn_TunionInfo _temp446; void* _temp448;
! _LL440: if(( unsigned int) _temp438 >  4u?*(( int*) _temp438) ==  Cyc_Absyn_TunionType:
! 0){ _LL447: _temp446=(( struct Cyc_Absyn_TunionType_struct*) _temp438)->f1;
! _LL449: _temp448=( void*) _temp446.rgn; goto _LL441;} else{ goto _LL442;} _LL442:
! if(( unsigned int) _temp438 >  4u?*(( int*) _temp438) ==  Cyc_Absyn_TunionFieldType:
! 0){ goto _LL443;} else{ goto _LL444;} _LL444: goto _LL445; _LL441: Cyc_Tcenv_check_rgn_accessible(
! te, p->loc, _temp448); return; _LL443: return; _LL445:( int) _throw(( void*)({
! struct Cyc_Core_Impossible_struct* _temp450=( struct Cyc_Core_Impossible_struct*)
! _cycalloc( sizeof( struct Cyc_Core_Impossible_struct)); _temp450[ 0]=({ struct
! Cyc_Core_Impossible_struct _temp451; _temp451.tag= Cyc_Core_Impossible; _temp451.f1=
  _tag_arr("check_pat_regions: bad tunion type", sizeof( unsigned char), 35u);
! _temp451;}); _temp450;})); _LL439:;} _LL407: _temp418=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Pat*(* f)( struct _tuple7*), struct Cyc_List_List* x)) Cyc_List_map)((
! struct Cyc_Absyn_Pat*(*)( struct _tuple7*)) Cyc_Core_snd, _temp416); goto _LL409;
! _LL409: for( 0; _temp418 !=  0; _temp418=(( struct Cyc_List_List*) _check_null(
! _temp418))->tl){ Cyc_Tcpat_check_pat_regions( te,( struct Cyc_Absyn_Pat*)((
! struct Cyc_List_List*) _check_null( _temp418))->hd);} return; _LL411: return;
! _LL401:;} static const int Cyc_Tcpat_Name_v= 0; struct Cyc_Tcpat_Name_v_struct{
  int tag; struct _tagged_arr f1; } ; static const int Cyc_Tcpat_Int_v= 1; struct
  Cyc_Tcpat_Int_v_struct{ int tag; int f1; } ; struct Cyc_Tcpat_Con_s{ void* name;
  int arity; struct Cyc_Core_Opt* span; } ; static const int Cyc_Tcpat_Any= 0;
  static const int Cyc_Tcpat_Con= 0; struct Cyc_Tcpat_Con_struct{ int tag; struct
  Cyc_Tcpat_Con_s* f1; struct Cyc_List_List* f2; } ; static int Cyc_Tcpat_compare_con(
! struct Cyc_Tcpat_Con_s* c1, struct Cyc_Tcpat_Con_s* c2){ void* _temp452=( void*)
! c1->name; struct _tagged_arr _temp458; int _temp460; _LL454: if(*(( int*)
! _temp452) ==  Cyc_Tcpat_Name_v){ _LL459: _temp458=(( struct Cyc_Tcpat_Name_v_struct*)
! _temp452)->f1; goto _LL455;} else{ goto _LL456;} _LL456: if(*(( int*) _temp452)
! ==  Cyc_Tcpat_Int_v){ _LL461: _temp460=(( struct Cyc_Tcpat_Int_v_struct*)
! _temp452)->f1; goto _LL457;} else{ goto _LL453;} _LL455: { void* _temp462=( void*)
! c2->name; struct _tagged_arr _temp468; _LL464: if(*(( int*) _temp462) ==  Cyc_Tcpat_Name_v){
! _LL469: _temp468=(( struct Cyc_Tcpat_Name_v_struct*) _temp462)->f1; goto _LL465;}
! else{ goto _LL466;} _LL466: if(*(( int*) _temp462) ==  Cyc_Tcpat_Int_v){ goto
! _LL467;} else{ goto _LL463;} _LL465: return Cyc_Std_zstrcmp( _temp458, _temp468);
! _LL467: return - 1; _LL463:;} _LL457: { void* _temp470=( void*) c2->name; int
! _temp476; _LL472: if(*(( int*) _temp470) ==  Cyc_Tcpat_Name_v){ goto _LL473;}
! else{ goto _LL474;} _LL474: if(*(( int*) _temp470) ==  Cyc_Tcpat_Int_v){ _LL477:
! _temp476=(( struct Cyc_Tcpat_Int_v_struct*) _temp470)->f1; goto _LL475;} else{
! goto _LL471;} _LL473: return 1; _LL475: return _temp460 -  _temp476; _LL471:;}
! _LL453:;} static struct Cyc_Set_Set* Cyc_Tcpat_empty_con_set(){ return(( struct
  Cyc_Set_Set*(*)( int(* cmp)( struct Cyc_Tcpat_Con_s*, struct Cyc_Tcpat_Con_s*)))
  Cyc_Set_empty)( Cyc_Tcpat_compare_con);} static struct Cyc_Core_Opt Cyc_Tcpat_one_opt={(
  void*) 1}; static struct Cyc_Core_Opt Cyc_Tcpat_two_opt={( void*) 2}; static
  struct Cyc_Core_Opt* Cyc_Tcpat_one_opt_ptr=( struct Cyc_Core_Opt*)& Cyc_Tcpat_one_opt;
! static unsigned char _temp479[ 5u]="NULL"; static struct Cyc_Tcpat_Name_v_struct
! Cyc_Tcpat_null_name_value={ 0u,{ _temp479, _temp479, _temp479 +  5u}}; static
! unsigned char _temp481[ 4u]="ptr"; static struct Cyc_Tcpat_Name_v_struct Cyc_Tcpat_ptr_name_value={
! 0u,{ _temp481, _temp481, _temp481 +  4u}}; static unsigned char _temp483[ 6u]="tuple";
! static struct Cyc_Tcpat_Name_v_struct Cyc_Tcpat_tuple_name_value={ 0u,{ _temp483,
! _temp483, _temp483 +  6u}}; static struct Cyc_Tcpat_Con_s Cyc_Tcpat_null_con0={(
  void*)(( void*)& Cyc_Tcpat_null_name_value), 0,( struct Cyc_Core_Opt*)& Cyc_Tcpat_two_opt};
  static struct Cyc_Tcpat_Con_s Cyc_Tcpat_null_ptr_con0={( void*)(( void*)& Cyc_Tcpat_ptr_name_value),
  1,( struct Cyc_Core_Opt*)& Cyc_Tcpat_two_opt}; static struct Cyc_Tcpat_Con_s Cyc_Tcpat_ptr_con0={(
***************
*** 1219,1438 ****
  struct Cyc_Tcpat_Con_s* Cyc_Tcpat_null_ptr_con=& Cyc_Tcpat_null_ptr_con0; static
  struct Cyc_Tcpat_Con_s* Cyc_Tcpat_ptr_con=& Cyc_Tcpat_ptr_con0; static struct
  Cyc_Tcpat_Con_s* Cyc_Tcpat_int_con( int i){ return({ struct Cyc_Tcpat_Con_s*
! _temp486=( struct Cyc_Tcpat_Con_s*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_s));
! _temp486->name=( void*)(( void*)({ struct Cyc_Tcpat_Int_v_struct* _temp487=(
  struct Cyc_Tcpat_Int_v_struct*) _cycalloc_atomic( sizeof( struct Cyc_Tcpat_Int_v_struct));
! _temp487[ 0]=({ struct Cyc_Tcpat_Int_v_struct _temp488; _temp488.tag= Cyc_Tcpat_Int_v;
! _temp488.f1= i; _temp488;}); _temp487;})); _temp486->arity= 0; _temp486->span= 0;
! _temp486;});} static struct Cyc_Tcpat_Con_s* Cyc_Tcpat_float_con( struct
! _tagged_arr f){ return({ struct Cyc_Tcpat_Con_s* _temp489=( struct Cyc_Tcpat_Con_s*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_s)); _temp489->name=( void*)(( void*)({
! struct Cyc_Tcpat_Name_v_struct* _temp490=( struct Cyc_Tcpat_Name_v_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Name_v_struct)); _temp490[ 0]=({ struct Cyc_Tcpat_Name_v_struct
! _temp491; _temp491.tag= Cyc_Tcpat_Name_v; _temp491.f1= f; _temp491;}); _temp490;}));
! _temp489->arity= 0; _temp489->span= 0; _temp489;});} static struct Cyc_Tcpat_Con_s*
! Cyc_Tcpat_char_con( unsigned char c){ return({ struct Cyc_Tcpat_Con_s* _temp492=(
! struct Cyc_Tcpat_Con_s*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_s)); _temp492->name=(
! void*)(( void*)({ struct Cyc_Tcpat_Int_v_struct* _temp494=( struct Cyc_Tcpat_Int_v_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_Tcpat_Int_v_struct)); _temp494[ 0]=({
! struct Cyc_Tcpat_Int_v_struct _temp495; _temp495.tag= Cyc_Tcpat_Int_v; _temp495.f1=(
! int) c; _temp495;}); _temp494;})); _temp492->arity= 0; _temp492->span=({ struct
! Cyc_Core_Opt* _temp493=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof( struct
! Cyc_Core_Opt)); _temp493->v=( void*) 256; _temp493;}); _temp492;});} static
  struct Cyc_Tcpat_Con_s* Cyc_Tcpat_tuple_con( int i){ return({ struct Cyc_Tcpat_Con_s*
! _temp496=( struct Cyc_Tcpat_Con_s*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_s));
! _temp496->name=( void*)(( void*)& Cyc_Tcpat_tuple_name_value); _temp496->arity=
! i; _temp496->span= Cyc_Tcpat_one_opt_ptr; _temp496;});} static void* Cyc_Tcpat_null_pat(){
! return( void*)({ struct Cyc_Tcpat_Con_struct* _temp497=( struct Cyc_Tcpat_Con_struct*)
  _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp497[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp498; _temp498.tag= Cyc_Tcpat_Con; _temp498.f1= Cyc_Tcpat_null_con; _temp498.f2=
! 0; _temp498;}); _temp497;});} static void* Cyc_Tcpat_int_pat( int i){ return(
! void*)({ struct Cyc_Tcpat_Con_struct* _temp499=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp499[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp500; _temp500.tag= Cyc_Tcpat_Con; _temp500.f1= Cyc_Tcpat_int_con( i);
! _temp500.f2= 0; _temp500;}); _temp499;});} static void* Cyc_Tcpat_char_pat(
! unsigned char c){ return( void*)({ struct Cyc_Tcpat_Con_struct* _temp501=(
  struct Cyc_Tcpat_Con_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct));
! _temp501[ 0]=({ struct Cyc_Tcpat_Con_struct _temp502; _temp502.tag= Cyc_Tcpat_Con;
! _temp502.f1= Cyc_Tcpat_char_con( c); _temp502.f2= 0; _temp502;}); _temp501;});}
  static void* Cyc_Tcpat_float_pat( struct _tagged_arr f){ return( void*)({ struct
! Cyc_Tcpat_Con_struct* _temp503=( struct Cyc_Tcpat_Con_struct*) _cycalloc(
! sizeof( struct Cyc_Tcpat_Con_struct)); _temp503[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp504; _temp504.tag= Cyc_Tcpat_Con; _temp504.f1= Cyc_Tcpat_float_con( f);
! _temp504.f2= 0; _temp504;}); _temp503;});} static void* Cyc_Tcpat_null_ptr_pat(
! void* p){ return( void*)({ struct Cyc_Tcpat_Con_struct* _temp505=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp505[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp506; _temp506.tag= Cyc_Tcpat_Con; _temp506.f1= Cyc_Tcpat_null_ptr_con;
! _temp506.f2=({ struct Cyc_List_List* _temp507=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp507->hd=( void*) p; _temp507->tl= 0;
! _temp507;}); _temp506;}); _temp505;});} static void* Cyc_Tcpat_ptr_pat( void* p){
! return( void*)({ struct Cyc_Tcpat_Con_struct* _temp508=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp508[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp509; _temp509.tag= Cyc_Tcpat_Con; _temp509.f1= Cyc_Tcpat_ptr_con; _temp509.f2=({
! struct Cyc_List_List* _temp510=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp510->hd=( void*) p; _temp510->tl= 0; _temp510;});
! _temp509;}); _temp508;});} static void* Cyc_Tcpat_tuple_pat( struct Cyc_List_List*
! ss){ return( void*)({ struct Cyc_Tcpat_Con_struct* _temp511=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp511[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp512; _temp512.tag= Cyc_Tcpat_Con; _temp512.f1= Cyc_Tcpat_tuple_con( Cyc_List_length(
! ss)); _temp512.f2= ss; _temp512;}); _temp511;});} static void* Cyc_Tcpat_con_pat(
  struct _tagged_arr con_name, struct Cyc_Core_Opt* span, struct Cyc_List_List* ps){
! struct Cyc_Tcpat_Con_s* c=({ struct Cyc_Tcpat_Con_s* _temp515=( struct Cyc_Tcpat_Con_s*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_s)); _temp515->name=( void*)(( void*)({
! struct Cyc_Tcpat_Name_v_struct* _temp516=( struct Cyc_Tcpat_Name_v_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Name_v_struct)); _temp516[ 0]=({ struct Cyc_Tcpat_Name_v_struct
! _temp517; _temp517.tag= Cyc_Tcpat_Name_v; _temp517.f1= con_name; _temp517;});
! _temp516;})); _temp515->arity= Cyc_List_length( ps); _temp515->span= span;
! _temp515;}); return( void*)({ struct Cyc_Tcpat_Con_struct* _temp513=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp513[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp514; _temp514.tag= Cyc_Tcpat_Con; _temp514.f1= c; _temp514.f2= ps; _temp514;});
! _temp513;});} static void* Cyc_Tcpat_compile_pat( struct Cyc_Absyn_Pat* p){ void*
! s;{ void* _temp518=( void*) p->r; int _temp552; void* _temp554; unsigned char
! _temp556; struct _tagged_arr _temp558; struct Cyc_Absyn_Pat* _temp560; struct
! Cyc_List_List* _temp562; struct Cyc_Absyn_Tunionfield* _temp564; struct Cyc_Absyn_Tuniondecl*
! _temp566; struct Cyc_List_List* _temp568; struct Cyc_List_List* _temp570; struct
! Cyc_List_List* _temp572; struct Cyc_Absyn_Structdecl* _temp574; struct Cyc_Absyn_Enumfield*
! _temp576; struct Cyc_Absyn_Enumdecl* _temp578; _LL520: if( _temp518 == ( void*)
! Cyc_Absyn_Wild_p){ goto _LL521;} else{ goto _LL522;} _LL522: if(( unsigned int)
! _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_Var_p: 0){ goto _LL523;} else{
! goto _LL524;} _LL524: if( _temp518 == ( void*) Cyc_Absyn_Null_p){ goto _LL525;}
! else{ goto _LL526;} _LL526: if(( unsigned int) _temp518 >  2u?*(( int*) _temp518)
! ==  Cyc_Absyn_Int_p: 0){ _LL555: _temp554=( void*)(( struct Cyc_Absyn_Int_p_struct*)
! _temp518)->f1; goto _LL553; _LL553: _temp552=(( struct Cyc_Absyn_Int_p_struct*)
! _temp518)->f2; goto _LL527;} else{ goto _LL528;} _LL528: if(( unsigned int)
! _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_Char_p: 0){ _LL557: _temp556=((
! struct Cyc_Absyn_Char_p_struct*) _temp518)->f1; goto _LL529;} else{ goto _LL530;}
! _LL530: if(( unsigned int) _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_Float_p:
! 0){ _LL559: _temp558=(( struct Cyc_Absyn_Float_p_struct*) _temp518)->f1; goto
! _LL531;} else{ goto _LL532;} _LL532: if(( unsigned int) _temp518 >  2u?*(( int*)
! _temp518) ==  Cyc_Absyn_Reference_p: 0){ goto _LL533;} else{ goto _LL534;}
! _LL534: if(( unsigned int) _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_Pointer_p:
! 0){ _LL561: _temp560=(( struct Cyc_Absyn_Pointer_p_struct*) _temp518)->f1; goto
! _LL535;} else{ goto _LL536;} _LL536: if(( unsigned int) _temp518 >  2u?*(( int*)
! _temp518) ==  Cyc_Absyn_Tunion_p: 0){ _LL567: _temp566=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp518)->f1; goto _LL565; _LL565: _temp564=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp518)->f2; goto _LL563; _LL563: _temp562=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp518)->f4; if( _temp562 ==  0){ goto _LL537;} else{ goto _LL538;}} else{
! goto _LL538;} _LL538: if(( unsigned int) _temp518 >  2u?*(( int*) _temp518) == 
! Cyc_Absyn_Tunion_p: 0){ _LL569: _temp568=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp518)->f4; goto _LL539;} else{ goto _LL540;} _LL540: if(( unsigned int)
! _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_Tuple_p: 0){ _LL571: _temp570=((
! struct Cyc_Absyn_Tuple_p_struct*) _temp518)->f1; goto _LL541;} else{ goto _LL542;}
! _LL542: if(( unsigned int) _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_Struct_p:
! 0){ _LL575: _temp574=(( struct Cyc_Absyn_Struct_p_struct*) _temp518)->f1; goto
! _LL573; _LL573: _temp572=(( struct Cyc_Absyn_Struct_p_struct*) _temp518)->f4;
! goto _LL543;} else{ goto _LL544;} _LL544: if(( unsigned int) _temp518 >  2u?*((
! int*) _temp518) ==  Cyc_Absyn_Enum_p: 0){ _LL579: _temp578=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp518)->f1; goto _LL577; _LL577: _temp576=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp518)->f2; goto _LL545;} else{ goto _LL546;} _LL546: if(( unsigned int)
! _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_UnknownId_p: 0){ goto _LL547;}
! else{ goto _LL548;} _LL548: if(( unsigned int) _temp518 >  2u?*(( int*) _temp518)
! ==  Cyc_Absyn_UnknownCall_p: 0){ goto _LL549;} else{ goto _LL550;} _LL550: if((
! unsigned int) _temp518 >  2u?*(( int*) _temp518) ==  Cyc_Absyn_UnknownFields_p:
! 0){ goto _LL551;} else{ goto _LL519;} _LL521: s=( void*) Cyc_Tcpat_Any; goto
! _LL519; _LL523: s=( void*) Cyc_Tcpat_Any; goto _LL519; _LL525: s= Cyc_Tcpat_null_pat();
! goto _LL519; _LL527: s= Cyc_Tcpat_int_pat( _temp552); goto _LL519; _LL529: s=
! Cyc_Tcpat_char_pat( _temp556); goto _LL519; _LL531: s= Cyc_Tcpat_float_pat(
! _temp558); goto _LL519; _LL533: s=( void*) Cyc_Tcpat_Any; goto _LL519; _LL535:{
! void* _temp580= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
! p->topt))->v); struct Cyc_Absyn_PtrInfo _temp588; struct Cyc_Absyn_Conref*
! _temp590; _LL582: if(( unsigned int) _temp580 >  4u?*(( int*) _temp580) ==  Cyc_Absyn_PointerType:
! 0){ _LL589: _temp588=(( struct Cyc_Absyn_PointerType_struct*) _temp580)->f1;
! _LL591: _temp590= _temp588.nullable; goto _LL583;} else{ goto _LL584;} _LL584:
! if(( unsigned int) _temp580 >  4u?*(( int*) _temp580) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL585;} else{ goto _LL586;} _LL586: goto _LL587; _LL583: { int
! is_nullable= 0; int still_working= 1; while( still_working) { void* _temp592=(
! void*) _temp590->v; struct Cyc_Absyn_Conref* _temp600; int _temp602; _LL594: if((
! unsigned int) _temp592 >  1u?*(( int*) _temp592) ==  Cyc_Absyn_Forward_constr: 0){
! _LL601: _temp600=(( struct Cyc_Absyn_Forward_constr_struct*) _temp592)->f1; goto
! _LL595;} else{ goto _LL596;} _LL596: if( _temp592 == ( void*) Cyc_Absyn_No_constr){
! goto _LL597;} else{ goto _LL598;} _LL598: if(( unsigned int) _temp592 >  1u?*((
! int*) _temp592) ==  Cyc_Absyn_Eq_constr: 0){ _LL603: _temp602=( int)(( struct
! Cyc_Absyn_Eq_constr_struct*) _temp592)->f1; goto _LL599;} else{ goto _LL593;}
! _LL595:( void*)( _temp590->v=( void*)(( void*) _temp600->v)); continue; _LL597:(
! void*)( _temp590->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp604=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp604[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp605; _temp605.tag= Cyc_Absyn_Eq_constr;
! _temp605.f1=( void*) 0; _temp605;}); _temp604;}))); is_nullable= 0;
! still_working= 0; goto _LL593; _LL599: is_nullable=( int) _temp602;
! still_working= 0; goto _LL593; _LL593:;}{ void* ss= Cyc_Tcpat_compile_pat(
! _temp560); if( is_nullable){ s= Cyc_Tcpat_null_ptr_pat( ss);} else{ s= Cyc_Tcpat_ptr_pat(
! ss);} goto _LL581;}} _LL585:{ void* _temp606=( void*) _temp560->r; struct Cyc_List_List*
! _temp612; struct Cyc_Absyn_Tunionfield* _temp614; struct Cyc_Absyn_Tuniondecl*
! _temp616; _LL608: if(( unsigned int) _temp606 >  2u?*(( int*) _temp606) ==  Cyc_Absyn_Tunion_p:
! 0){ _LL617: _temp616=(( struct Cyc_Absyn_Tunion_p_struct*) _temp606)->f1; goto
! _LL615; _LL615: _temp614=(( struct Cyc_Absyn_Tunion_p_struct*) _temp606)->f2;
! goto _LL613; _LL613: _temp612=(( struct Cyc_Absyn_Tunion_p_struct*) _temp606)->f4;
! goto _LL609;} else{ goto _LL610;} _LL610: goto _LL611; _LL609: { struct Cyc_Core_Opt*
! span; if( _temp616->is_xtunion){ span= 0;} else{ span=({ struct Cyc_Core_Opt*
! _temp618=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof( struct Cyc_Core_Opt));
! _temp618->v=( void*)(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp616->fields))->v);
! _temp618;});} s= Cyc_Tcpat_con_pat(*(* _temp614->name).f2, span,(( struct Cyc_List_List*(*)(
  void*(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcpat_compile_pat,
! _temp612)); goto _LL607;} _LL611: s=({ void* _temp619[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("non-[x]tunion pattern has tunion type", sizeof( unsigned char), 38u),
! _tag_arr( _temp619, sizeof( void*), 0u));}); goto _LL607; _LL607:;} goto _LL581;
! _LL587: s=({ void* _temp620[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("pointer pattern does not have pointer type!",
! sizeof( unsigned char), 44u), _tag_arr( _temp620, sizeof( void*), 0u));}); goto
! _LL581; _LL581:;} goto _LL519; _LL537: { struct Cyc_Core_Opt* span;{ void*
! _temp621= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( p->topt))->v);
! _LL623: if(( unsigned int) _temp621 >  4u?*(( int*) _temp621) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL624;} else{ goto _LL625;} _LL625: if(( unsigned int) _temp621 >  4u?*((
! int*) _temp621) ==  Cyc_Absyn_TunionFieldType: 0){ goto _LL626;} else{ goto
! _LL627;} _LL627: goto _LL628; _LL624: if( _temp566->is_xtunion){ span= 0;} else{
! span=({ struct Cyc_Core_Opt* _temp629=( struct Cyc_Core_Opt*) _cycalloc_atomic(
! sizeof( struct Cyc_Core_Opt)); _temp629->v=( void*)(( int(*)( struct Cyc_List_List*
  x)) Cyc_List_length)(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp566->fields))->v); _temp629;});} goto _LL622; _LL626: span=({
! struct Cyc_Core_Opt* _temp630=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof(
! struct Cyc_Core_Opt)); _temp630->v=( void*) 1; _temp630;}); goto _LL622; _LL628:
! span=({ void* _temp631[ 0u]={};(( struct Cyc_Core_Opt*(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("void tunion pattern has bad type",
! sizeof( unsigned char), 33u), _tag_arr( _temp631, sizeof( void*), 0u));}); goto
! _LL622; _LL622:;} s= Cyc_Tcpat_con_pat(*(* _temp564->name).f2, span, 0); goto
! _LL519;} _LL539: _temp570= _temp568; goto _LL541; _LL541: s= Cyc_Tcpat_tuple_pat(((
  struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Tcpat_compile_pat, _temp570)); goto _LL519; _LL543: {
  struct Cyc_List_List* ps= 0;{ struct Cyc_List_List* fields=( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp574->fields))->v; for( 0; fields !=  0;
  fields=(( struct Cyc_List_List*) _check_null( fields))->tl){ int found= Cyc_Std_strcmp(*((
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fields))->hd)->name,
  _tag_arr("", sizeof( unsigned char), 1u)) ==  0;{ struct Cyc_List_List* dlps0=
! _temp572; for( 0; ! found? dlps0 !=  0: 0; dlps0=(( struct Cyc_List_List*)
! _check_null( dlps0))->tl){ struct _tuple7 _temp634; struct Cyc_Absyn_Pat*
! _temp635; struct Cyc_List_List* _temp637; struct _tuple7* _temp632=( struct
! _tuple7*)(( struct Cyc_List_List*) _check_null( dlps0))->hd; _temp634=* _temp632;
! _LL638: _temp637= _temp634.f1; goto _LL636; _LL636: _temp635= _temp634.f2; goto
! _LL633; _LL633: { struct Cyc_List_List* _temp639= _temp637; struct Cyc_List_List
! _temp645; struct Cyc_List_List* _temp646; void* _temp648; struct _tagged_arr*
! _temp650; _LL641: if( _temp639 ==  0){ goto _LL643;} else{ _temp645=* _temp639;
! _LL649: _temp648=( void*) _temp645.hd; if(*(( int*) _temp648) ==  Cyc_Absyn_FieldName){
! _LL651: _temp650=(( struct Cyc_Absyn_FieldName_struct*) _temp648)->f1; goto
! _LL647;} else{ goto _LL643;} _LL647: _temp646= _temp645.tl; if( _temp646 ==  0){
! goto _LL642;} else{ goto _LL643;}} _LL643: goto _LL644; _LL642: if( Cyc_Std_zstrptrcmp(
! _temp650,(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! fields))->hd)->name) ==  0){ ps=({ struct Cyc_List_List* _temp652=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp652->hd=( void*) Cyc_Tcpat_compile_pat(
! _temp635); _temp652->tl= ps; _temp652;}); found= 1;} goto _LL640; _LL644:({ void*
! _temp653[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("bad designator(s)", sizeof( unsigned char), 18u), _tag_arr( _temp653,
! sizeof( void*), 0u));}); goto _LL640; _LL640:;}}} if( ! found){({ void* _temp654[
  0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("bad designator", sizeof( unsigned char), 15u), _tag_arr( _temp654,
! sizeof( void*), 0u));});}}} s= Cyc_Tcpat_tuple_pat( ps); goto _LL519;} _LL545: {
  int span=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp578->fields))->v); s= Cyc_Tcpat_con_pat(*(*
! _temp576->name).f2,({ struct Cyc_Core_Opt* _temp655=( struct Cyc_Core_Opt*)
! _cycalloc_atomic( sizeof( struct Cyc_Core_Opt)); _temp655->v=( void*) span;
! _temp655;}), 0); goto _LL519;} _LL547: s=({ void* _temp656[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("compile_pat: unknownid", sizeof( unsigned char), 23u), _tag_arr(
! _temp656, sizeof( void*), 0u));}); goto _LL519; _LL549: s=({ void* _temp657[ 0u]={};
  Cyc_Tcutil_impos( _tag_arr("compile_pat: unknowncall", sizeof( unsigned char),
! 25u), _tag_arr( _temp657, sizeof( void*), 0u));}); goto _LL519; _LL551: s=({
! void* _temp658[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("compile_pat: unknownfields",
! sizeof( unsigned char), 27u), _tag_arr( _temp658, sizeof( void*), 0u));}); goto
! _LL519; _LL519:;} return s;} static const int Cyc_Tcpat_Pos= 0; struct Cyc_Tcpat_Pos_struct{
  int tag; struct Cyc_Tcpat_Con_s* f1; struct Cyc_List_List* f2; } ; static const
  int Cyc_Tcpat_Neg= 1; struct Cyc_Tcpat_Neg_struct{ int tag; struct Cyc_Set_Set*
  f1; } ; static const int Cyc_Tcpat_Failure= 0; static const int Cyc_Tcpat_Success=
--- 1212,1431 ----
  struct Cyc_Tcpat_Con_s* Cyc_Tcpat_null_ptr_con=& Cyc_Tcpat_null_ptr_con0; static
  struct Cyc_Tcpat_Con_s* Cyc_Tcpat_ptr_con=& Cyc_Tcpat_ptr_con0; static struct
  Cyc_Tcpat_Con_s* Cyc_Tcpat_int_con( int i){ return({ struct Cyc_Tcpat_Con_s*
! _temp484=( struct Cyc_Tcpat_Con_s*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_s));
! _temp484->name=( void*)(( void*)({ struct Cyc_Tcpat_Int_v_struct* _temp485=(
  struct Cyc_Tcpat_Int_v_struct*) _cycalloc_atomic( sizeof( struct Cyc_Tcpat_Int_v_struct));
! _temp485[ 0]=({ struct Cyc_Tcpat_Int_v_struct _temp486; _temp486.tag= Cyc_Tcpat_Int_v;
! _temp486.f1= i; _temp486;}); _temp485;})); _temp484->arity= 0; _temp484->span= 0;
! _temp484;});} static struct Cyc_Tcpat_Con_s* Cyc_Tcpat_float_con( struct
! _tagged_arr f){ return({ struct Cyc_Tcpat_Con_s* _temp487=( struct Cyc_Tcpat_Con_s*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_s)); _temp487->name=( void*)(( void*)({
! struct Cyc_Tcpat_Name_v_struct* _temp488=( struct Cyc_Tcpat_Name_v_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Name_v_struct)); _temp488[ 0]=({ struct Cyc_Tcpat_Name_v_struct
! _temp489; _temp489.tag= Cyc_Tcpat_Name_v; _temp489.f1= f; _temp489;}); _temp488;}));
! _temp487->arity= 0; _temp487->span= 0; _temp487;});} static struct Cyc_Tcpat_Con_s*
! Cyc_Tcpat_char_con( unsigned char c){ return({ struct Cyc_Tcpat_Con_s* _temp490=(
! struct Cyc_Tcpat_Con_s*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_s)); _temp490->name=(
! void*)(( void*)({ struct Cyc_Tcpat_Int_v_struct* _temp492=( struct Cyc_Tcpat_Int_v_struct*)
! _cycalloc_atomic( sizeof( struct Cyc_Tcpat_Int_v_struct)); _temp492[ 0]=({
! struct Cyc_Tcpat_Int_v_struct _temp493; _temp493.tag= Cyc_Tcpat_Int_v; _temp493.f1=(
! int) c; _temp493;}); _temp492;})); _temp490->arity= 0; _temp490->span=({ struct
! Cyc_Core_Opt* _temp491=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof( struct
! Cyc_Core_Opt)); _temp491->v=( void*) 256; _temp491;}); _temp490;});} static
  struct Cyc_Tcpat_Con_s* Cyc_Tcpat_tuple_con( int i){ return({ struct Cyc_Tcpat_Con_s*
! _temp494=( struct Cyc_Tcpat_Con_s*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_s));
! _temp494->name=( void*)(( void*)& Cyc_Tcpat_tuple_name_value); _temp494->arity=
! i; _temp494->span= Cyc_Tcpat_one_opt_ptr; _temp494;});} static void* Cyc_Tcpat_null_pat(){
! return( void*)({ struct Cyc_Tcpat_Con_struct* _temp495=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp495[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp496; _temp496.tag= Cyc_Tcpat_Con; _temp496.f1= Cyc_Tcpat_null_con; _temp496.f2=
! 0; _temp496;}); _temp495;});} static void* Cyc_Tcpat_int_pat( int i){ return(
! void*)({ struct Cyc_Tcpat_Con_struct* _temp497=( struct Cyc_Tcpat_Con_struct*)
  _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp497[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp498; _temp498.tag= Cyc_Tcpat_Con; _temp498.f1= Cyc_Tcpat_int_con( i);
! _temp498.f2= 0; _temp498;}); _temp497;});} static void* Cyc_Tcpat_char_pat(
! unsigned char c){ return( void*)({ struct Cyc_Tcpat_Con_struct* _temp499=(
  struct Cyc_Tcpat_Con_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct));
! _temp499[ 0]=({ struct Cyc_Tcpat_Con_struct _temp500; _temp500.tag= Cyc_Tcpat_Con;
! _temp500.f1= Cyc_Tcpat_char_con( c); _temp500.f2= 0; _temp500;}); _temp499;});}
  static void* Cyc_Tcpat_float_pat( struct _tagged_arr f){ return( void*)({ struct
! Cyc_Tcpat_Con_struct* _temp501=( struct Cyc_Tcpat_Con_struct*) _cycalloc(
! sizeof( struct Cyc_Tcpat_Con_struct)); _temp501[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp502; _temp502.tag= Cyc_Tcpat_Con; _temp502.f1= Cyc_Tcpat_float_con( f);
! _temp502.f2= 0; _temp502;}); _temp501;});} static void* Cyc_Tcpat_null_ptr_pat(
! void* p){ return( void*)({ struct Cyc_Tcpat_Con_struct* _temp503=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp503[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp504; _temp504.tag= Cyc_Tcpat_Con; _temp504.f1= Cyc_Tcpat_null_ptr_con;
! _temp504.f2=({ struct Cyc_List_List* _temp505=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp505->hd=( void*) p; _temp505->tl= 0;
! _temp505;}); _temp504;}); _temp503;});} static void* Cyc_Tcpat_ptr_pat( void* p){
! return( void*)({ struct Cyc_Tcpat_Con_struct* _temp506=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp506[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp507; _temp507.tag= Cyc_Tcpat_Con; _temp507.f1= Cyc_Tcpat_ptr_con; _temp507.f2=({
! struct Cyc_List_List* _temp508=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp508->hd=( void*) p; _temp508->tl= 0; _temp508;});
! _temp507;}); _temp506;});} static void* Cyc_Tcpat_tuple_pat( struct Cyc_List_List*
! ss){ return( void*)({ struct Cyc_Tcpat_Con_struct* _temp509=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp509[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp510; _temp510.tag= Cyc_Tcpat_Con; _temp510.f1= Cyc_Tcpat_tuple_con( Cyc_List_length(
! ss)); _temp510.f2= ss; _temp510;}); _temp509;});} static void* Cyc_Tcpat_con_pat(
  struct _tagged_arr con_name, struct Cyc_Core_Opt* span, struct Cyc_List_List* ps){
! struct Cyc_Tcpat_Con_s* c=({ struct Cyc_Tcpat_Con_s* _temp513=( struct Cyc_Tcpat_Con_s*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_s)); _temp513->name=( void*)(( void*)({
! struct Cyc_Tcpat_Name_v_struct* _temp514=( struct Cyc_Tcpat_Name_v_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Name_v_struct)); _temp514[ 0]=({ struct Cyc_Tcpat_Name_v_struct
! _temp515; _temp515.tag= Cyc_Tcpat_Name_v; _temp515.f1= con_name; _temp515;});
! _temp514;})); _temp513->arity= Cyc_List_length( ps); _temp513->span= span;
! _temp513;}); return( void*)({ struct Cyc_Tcpat_Con_struct* _temp511=( struct Cyc_Tcpat_Con_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Con_struct)); _temp511[ 0]=({ struct Cyc_Tcpat_Con_struct
! _temp512; _temp512.tag= Cyc_Tcpat_Con; _temp512.f1= c; _temp512.f2= ps; _temp512;});
! _temp511;});} static void* Cyc_Tcpat_compile_pat( struct Cyc_Absyn_Pat* p){ void*
! s;{ void* _temp516=( void*) p->r; int _temp550; void* _temp552; unsigned char
! _temp554; struct _tagged_arr _temp556; struct Cyc_Absyn_Pat* _temp558; struct
! Cyc_List_List* _temp560; struct Cyc_Absyn_Tunionfield* _temp562; struct Cyc_Absyn_Tuniondecl*
! _temp564; struct Cyc_List_List* _temp566; struct Cyc_List_List* _temp568; struct
! Cyc_List_List* _temp570; struct Cyc_Absyn_Structdecl* _temp572; struct Cyc_Absyn_Enumfield*
! _temp574; struct Cyc_Absyn_Enumdecl* _temp576; _LL518: if( _temp516 == ( void*)
! Cyc_Absyn_Wild_p){ goto _LL519;} else{ goto _LL520;} _LL520: if(( unsigned int)
! _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_Var_p: 0){ goto _LL521;} else{
! goto _LL522;} _LL522: if( _temp516 == ( void*) Cyc_Absyn_Null_p){ goto _LL523;}
! else{ goto _LL524;} _LL524: if(( unsigned int) _temp516 >  2u?*(( int*) _temp516)
! ==  Cyc_Absyn_Int_p: 0){ _LL553: _temp552=( void*)(( struct Cyc_Absyn_Int_p_struct*)
! _temp516)->f1; goto _LL551; _LL551: _temp550=(( struct Cyc_Absyn_Int_p_struct*)
! _temp516)->f2; goto _LL525;} else{ goto _LL526;} _LL526: if(( unsigned int)
! _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_Char_p: 0){ _LL555: _temp554=((
! struct Cyc_Absyn_Char_p_struct*) _temp516)->f1; goto _LL527;} else{ goto _LL528;}
! _LL528: if(( unsigned int) _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_Float_p:
! 0){ _LL557: _temp556=(( struct Cyc_Absyn_Float_p_struct*) _temp516)->f1; goto
! _LL529;} else{ goto _LL530;} _LL530: if(( unsigned int) _temp516 >  2u?*(( int*)
! _temp516) ==  Cyc_Absyn_Reference_p: 0){ goto _LL531;} else{ goto _LL532;}
! _LL532: if(( unsigned int) _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_Pointer_p:
! 0){ _LL559: _temp558=(( struct Cyc_Absyn_Pointer_p_struct*) _temp516)->f1; goto
! _LL533;} else{ goto _LL534;} _LL534: if(( unsigned int) _temp516 >  2u?*(( int*)
! _temp516) ==  Cyc_Absyn_Tunion_p: 0){ _LL565: _temp564=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp516)->f1; goto _LL563; _LL563: _temp562=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp516)->f2; goto _LL561; _LL561: _temp560=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp516)->f4; if( _temp560 ==  0){ goto _LL535;} else{ goto _LL536;}} else{
! goto _LL536;} _LL536: if(( unsigned int) _temp516 >  2u?*(( int*) _temp516) == 
! Cyc_Absyn_Tunion_p: 0){ _LL567: _temp566=(( struct Cyc_Absyn_Tunion_p_struct*)
! _temp516)->f4; goto _LL537;} else{ goto _LL538;} _LL538: if(( unsigned int)
! _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_Tuple_p: 0){ _LL569: _temp568=((
! struct Cyc_Absyn_Tuple_p_struct*) _temp516)->f1; goto _LL539;} else{ goto _LL540;}
! _LL540: if(( unsigned int) _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_Struct_p:
! 0){ _LL573: _temp572=(( struct Cyc_Absyn_Struct_p_struct*) _temp516)->f1; goto
! _LL571; _LL571: _temp570=(( struct Cyc_Absyn_Struct_p_struct*) _temp516)->f4;
! goto _LL541;} else{ goto _LL542;} _LL542: if(( unsigned int) _temp516 >  2u?*((
! int*) _temp516) ==  Cyc_Absyn_Enum_p: 0){ _LL577: _temp576=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp516)->f1; goto _LL575; _LL575: _temp574=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp516)->f2; goto _LL543;} else{ goto _LL544;} _LL544: if(( unsigned int)
! _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_UnknownId_p: 0){ goto _LL545;}
! else{ goto _LL546;} _LL546: if(( unsigned int) _temp516 >  2u?*(( int*) _temp516)
! ==  Cyc_Absyn_UnknownCall_p: 0){ goto _LL547;} else{ goto _LL548;} _LL548: if((
! unsigned int) _temp516 >  2u?*(( int*) _temp516) ==  Cyc_Absyn_UnknownFields_p:
! 0){ goto _LL549;} else{ goto _LL517;} _LL519: s=( void*) Cyc_Tcpat_Any; goto
! _LL517; _LL521: s=( void*) Cyc_Tcpat_Any; goto _LL517; _LL523: s= Cyc_Tcpat_null_pat();
! goto _LL517; _LL525: s= Cyc_Tcpat_int_pat( _temp550); goto _LL517; _LL527: s=
! Cyc_Tcpat_char_pat( _temp554); goto _LL517; _LL529: s= Cyc_Tcpat_float_pat(
! _temp556); goto _LL517; _LL531: s=( void*) Cyc_Tcpat_Any; goto _LL517; _LL533:{
! void* _temp578= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
! p->topt))->v); struct Cyc_Absyn_PtrInfo _temp586; struct Cyc_Absyn_Conref*
! _temp588; _LL580: if(( unsigned int) _temp578 >  4u?*(( int*) _temp578) ==  Cyc_Absyn_PointerType:
! 0){ _LL587: _temp586=(( struct Cyc_Absyn_PointerType_struct*) _temp578)->f1;
! _LL589: _temp588= _temp586.nullable; goto _LL581;} else{ goto _LL582;} _LL582:
! if(( unsigned int) _temp578 >  4u?*(( int*) _temp578) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL583;} else{ goto _LL584;} _LL584: goto _LL585; _LL581: { int
! is_nullable= 0; int still_working= 1; while( still_working) { void* _temp590=(
! void*) _temp588->v; struct Cyc_Absyn_Conref* _temp598; int _temp600; _LL592: if((
! unsigned int) _temp590 >  1u?*(( int*) _temp590) ==  Cyc_Absyn_Forward_constr: 0){
! _LL599: _temp598=(( struct Cyc_Absyn_Forward_constr_struct*) _temp590)->f1; goto
! _LL593;} else{ goto _LL594;} _LL594: if( _temp590 == ( void*) Cyc_Absyn_No_constr){
! goto _LL595;} else{ goto _LL596;} _LL596: if(( unsigned int) _temp590 >  1u?*((
! int*) _temp590) ==  Cyc_Absyn_Eq_constr: 0){ _LL601: _temp600=( int)(( struct
! Cyc_Absyn_Eq_constr_struct*) _temp590)->f1; goto _LL597;} else{ goto _LL591;}
! _LL593:( void*)( _temp588->v=( void*)(( void*) _temp598->v)); continue; _LL595:(
! void*)( _temp588->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp602=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp602[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp603; _temp603.tag= Cyc_Absyn_Eq_constr;
! _temp603.f1=( void*) 0; _temp603;}); _temp602;}))); is_nullable= 0;
! still_working= 0; goto _LL591; _LL597: is_nullable=( int) _temp600;
! still_working= 0; goto _LL591; _LL591:;}{ void* ss= Cyc_Tcpat_compile_pat(
! _temp558); if( is_nullable){ s= Cyc_Tcpat_null_ptr_pat( ss);} else{ s= Cyc_Tcpat_ptr_pat(
! ss);} goto _LL579;}} _LL583:{ void* _temp604=( void*) _temp558->r; struct Cyc_List_List*
! _temp610; struct Cyc_Absyn_Tunionfield* _temp612; struct Cyc_Absyn_Tuniondecl*
! _temp614; _LL606: if(( unsigned int) _temp604 >  2u?*(( int*) _temp604) ==  Cyc_Absyn_Tunion_p:
! 0){ _LL615: _temp614=(( struct Cyc_Absyn_Tunion_p_struct*) _temp604)->f1; goto
! _LL613; _LL613: _temp612=(( struct Cyc_Absyn_Tunion_p_struct*) _temp604)->f2;
! goto _LL611; _LL611: _temp610=(( struct Cyc_Absyn_Tunion_p_struct*) _temp604)->f4;
! goto _LL607;} else{ goto _LL608;} _LL608: goto _LL609; _LL607: { struct Cyc_Core_Opt*
! span; if( _temp614->is_xtunion){ span= 0;} else{ span=({ struct Cyc_Core_Opt*
! _temp616=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof( struct Cyc_Core_Opt));
! _temp616->v=( void*)(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)((
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp614->fields))->v);
! _temp616;});} s= Cyc_Tcpat_con_pat(*(* _temp612->name).f2, span,(( struct Cyc_List_List*(*)(
  void*(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcpat_compile_pat,
! _temp610)); goto _LL605;} _LL609: s=({ void* _temp617[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("non-[x]tunion pattern has tunion type", sizeof( unsigned char), 38u),
! _tag_arr( _temp617, sizeof( void*), 0u));}); goto _LL605; _LL605:;} goto _LL579;
! _LL585: s=({ void* _temp618[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("pointer pattern does not have pointer type!",
! sizeof( unsigned char), 44u), _tag_arr( _temp618, sizeof( void*), 0u));}); goto
! _LL579; _LL579:;} goto _LL517; _LL535: { struct Cyc_Core_Opt* span;{ void*
! _temp619= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( p->topt))->v);
! _LL621: if(( unsigned int) _temp619 >  4u?*(( int*) _temp619) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL622;} else{ goto _LL623;} _LL623: if(( unsigned int) _temp619 >  4u?*((
! int*) _temp619) ==  Cyc_Absyn_TunionFieldType: 0){ goto _LL624;} else{ goto
! _LL625;} _LL625: goto _LL626; _LL622: if( _temp564->is_xtunion){ span= 0;} else{
! span=({ struct Cyc_Core_Opt* _temp627=( struct Cyc_Core_Opt*) _cycalloc_atomic(
! sizeof( struct Cyc_Core_Opt)); _temp627->v=( void*)(( int(*)( struct Cyc_List_List*
  x)) Cyc_List_length)(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp564->fields))->v); _temp627;});} goto _LL620; _LL624: span=({
! struct Cyc_Core_Opt* _temp628=( struct Cyc_Core_Opt*) _cycalloc_atomic( sizeof(
! struct Cyc_Core_Opt)); _temp628->v=( void*) 1; _temp628;}); goto _LL620; _LL626:
! span=({ void* _temp629[ 0u]={};(( struct Cyc_Core_Opt*(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("void tunion pattern has bad type",
! sizeof( unsigned char), 33u), _tag_arr( _temp629, sizeof( void*), 0u));}); goto
! _LL620; _LL620:;} s= Cyc_Tcpat_con_pat(*(* _temp562->name).f2, span, 0); goto
! _LL517;} _LL537: _temp568= _temp566; goto _LL539; _LL539: s= Cyc_Tcpat_tuple_pat(((
  struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Pat*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Tcpat_compile_pat, _temp568)); goto _LL517; _LL541: {
  struct Cyc_List_List* ps= 0;{ struct Cyc_List_List* fields=( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp572->fields))->v; for( 0; fields !=  0;
  fields=(( struct Cyc_List_List*) _check_null( fields))->tl){ int found= Cyc_Std_strcmp(*((
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fields))->hd)->name,
  _tag_arr("", sizeof( unsigned char), 1u)) ==  0;{ struct Cyc_List_List* dlps0=
! _temp570; for( 0; ! found? dlps0 !=  0: 0; dlps0=(( struct Cyc_List_List*)
! _check_null( dlps0))->tl){ struct _tuple7 _temp632; struct Cyc_Absyn_Pat*
! _temp633; struct Cyc_List_List* _temp635; struct _tuple7* _temp630=( struct
! _tuple7*)(( struct Cyc_List_List*) _check_null( dlps0))->hd; _temp632=* _temp630;
! _LL636: _temp635= _temp632.f1; goto _LL634; _LL634: _temp633= _temp632.f2; goto
! _LL631; _LL631: { struct Cyc_List_List* _temp637= _temp635; struct Cyc_List_List
! _temp643; struct Cyc_List_List* _temp644; void* _temp646; struct _tagged_arr*
! _temp648; _LL639: if( _temp637 ==  0){ goto _LL641;} else{ _temp643=* _temp637;
! _LL647: _temp646=( void*) _temp643.hd; if(*(( int*) _temp646) ==  Cyc_Absyn_FieldName){
! _LL649: _temp648=(( struct Cyc_Absyn_FieldName_struct*) _temp646)->f1; goto
! _LL645;} else{ goto _LL641;} _LL645: _temp644= _temp643.tl; if( _temp644 ==  0){
! goto _LL640;} else{ goto _LL641;}} _LL641: goto _LL642; _LL640: if( Cyc_Std_zstrptrcmp(
! _temp648,(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! fields))->hd)->name) ==  0){ ps=({ struct Cyc_List_List* _temp650=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp650->hd=( void*) Cyc_Tcpat_compile_pat(
! _temp633); _temp650->tl= ps; _temp650;}); found= 1;} goto _LL638; _LL642:({ void*
! _temp651[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("bad designator(s)", sizeof( unsigned char), 18u), _tag_arr( _temp651,
! sizeof( void*), 0u));}); goto _LL638; _LL638:;}}} if( ! found){({ void* _temp652[
  0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
! _tag_arr("bad designator", sizeof( unsigned char), 15u), _tag_arr( _temp652,
! sizeof( void*), 0u));});}}} s= Cyc_Tcpat_tuple_pat( ps); goto _LL517;} _LL543: {
  int span=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp576->fields))->v); s= Cyc_Tcpat_con_pat(*(*
! _temp574->name).f2,({ struct Cyc_Core_Opt* _temp653=( struct Cyc_Core_Opt*)
! _cycalloc_atomic( sizeof( struct Cyc_Core_Opt)); _temp653->v=( void*) span;
! _temp653;}), 0); goto _LL517;} _LL545: s=({ void* _temp654[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("compile_pat: unknownid", sizeof( unsigned char), 23u), _tag_arr(
! _temp654, sizeof( void*), 0u));}); goto _LL517; _LL547: s=({ void* _temp655[ 0u]={};
  Cyc_Tcutil_impos( _tag_arr("compile_pat: unknowncall", sizeof( unsigned char),
! 25u), _tag_arr( _temp655, sizeof( void*), 0u));}); goto _LL517; _LL549: s=({
! void* _temp656[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("compile_pat: unknownfields",
! sizeof( unsigned char), 27u), _tag_arr( _temp656, sizeof( void*), 0u));}); goto
! _LL517; _LL517:;} return s;} static const int Cyc_Tcpat_Pos= 0; struct Cyc_Tcpat_Pos_struct{
  int tag; struct Cyc_Tcpat_Con_s* f1; struct Cyc_List_List* f2; } ; static const
  int Cyc_Tcpat_Neg= 1; struct Cyc_Tcpat_Neg_struct{ int tag; struct Cyc_Set_Set*
  f1; } ; static const int Cyc_Tcpat_Failure= 0; static const int Cyc_Tcpat_Success=
***************
*** 1441,1747 ****
  f2; void* f3; void* f4; } ; struct _tuple10{ struct Cyc_List_List* f1; struct
  Cyc_List_List* f2; struct Cyc_List_List* f3; } ; static const int Cyc_Tcpat_Yes=
  0; static const int Cyc_Tcpat_No= 1; static const int Cyc_Tcpat_Maybe= 2; static
! void* Cyc_Tcpat_add_neg( void* td, struct Cyc_Tcpat_Con_s* c){ void* _temp659=
! td; struct Cyc_Set_Set* _temp665; _LL661: if(*(( int*) _temp659) ==  Cyc_Tcpat_Neg){
! _LL666: _temp665=(( struct Cyc_Tcpat_Neg_struct*) _temp659)->f1; goto _LL662;}
! else{ goto _LL663;} _LL663: if(*(( int*) _temp659) ==  Cyc_Tcpat_Pos){ goto
! _LL664;} else{ goto _LL660;} _LL662: if((( int(*)( struct Cyc_Set_Set* s, struct
! Cyc_Tcpat_Con_s* elt)) Cyc_Set_member)( _temp665, c)){({ void* _temp667[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("add_neg called when constructor already in set", sizeof( unsigned char),
! 47u), _tag_arr( _temp667, sizeof( void*), 0u));});} if( c->span !=  0?(( int(*)(
! struct Cyc_Set_Set* s)) Cyc_Set_cardinality)( _temp665) +  1 >= ( int)(( struct
! Cyc_Core_Opt*) _check_null( c->span))->v: 0){({ void* _temp668[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("add_neg called when |cs U {c}| >= span(c)",
! sizeof( unsigned char), 42u), _tag_arr( _temp668, sizeof( void*), 0u));});}
! return( void*)({ struct Cyc_Tcpat_Neg_struct* _temp669=( struct Cyc_Tcpat_Neg_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Neg_struct)); _temp669[ 0]=({ struct Cyc_Tcpat_Neg_struct
! _temp670; _temp670.tag= Cyc_Tcpat_Neg; _temp670.f1=(( struct Cyc_Set_Set*(*)(
! struct Cyc_Set_Set* s, struct Cyc_Tcpat_Con_s* elt)) Cyc_Set_insert)( _temp665,
! c); _temp670;}); _temp669;}); _LL664: return({ void* _temp671[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("add_neg called when td is Positive", sizeof( unsigned char), 35u),
! _tag_arr( _temp671, sizeof( void*), 0u));}); _LL660:;} static void* Cyc_Tcpat_static_match(
! struct Cyc_Tcpat_Con_s* c, void* td){ void* _temp672= td; struct Cyc_Tcpat_Con_s*
! _temp678; struct Cyc_Set_Set* _temp680; _LL674: if(*(( int*) _temp672) ==  Cyc_Tcpat_Pos){
! _LL679: _temp678=(( struct Cyc_Tcpat_Pos_struct*) _temp672)->f1; goto _LL675;}
! else{ goto _LL676;} _LL676: if(*(( int*) _temp672) ==  Cyc_Tcpat_Neg){ _LL681:
! _temp680=(( struct Cyc_Tcpat_Neg_struct*) _temp672)->f1; goto _LL677;} else{
! goto _LL673;} _LL675: if( Cyc_Tcpat_compare_con( c, _temp678) ==  0){ return(
! void*) Cyc_Tcpat_Yes;} else{ return( void*) Cyc_Tcpat_No;} _LL677: if((( int(*)(
! struct Cyc_Set_Set* s, struct Cyc_Tcpat_Con_s* elt)) Cyc_Set_member)( _temp680,
  c)){ return( void*) Cyc_Tcpat_No;} else{ if( c->span !=  0?( int)(( struct Cyc_Core_Opt*)
  _check_null( c->span))->v == (( int(*)( struct Cyc_Set_Set* s)) Cyc_Set_cardinality)(
! _temp680) +  1: 0){ return( void*) Cyc_Tcpat_Yes;} else{ return( void*) Cyc_Tcpat_Maybe;}}
! _LL673:;} struct _tuple11{ struct Cyc_Tcpat_Con_s* f1; struct Cyc_List_List* f2;
  } ; static struct Cyc_List_List* Cyc_Tcpat_augment( struct Cyc_List_List* ctxt,
! void* dsc){ struct Cyc_List_List* _temp682= ctxt; struct Cyc_List_List _temp688;
! struct Cyc_List_List* _temp689; struct _tuple11* _temp691; struct _tuple11
! _temp693; struct Cyc_List_List* _temp694; struct Cyc_Tcpat_Con_s* _temp696;
! _LL684: if( _temp682 ==  0){ goto _LL685;} else{ goto _LL686;} _LL686: if(
! _temp682 ==  0){ goto _LL683;} else{ _temp688=* _temp682; _LL692: _temp691=(
! struct _tuple11*) _temp688.hd; _temp693=* _temp691; _LL697: _temp696= _temp693.f1;
! goto _LL695; _LL695: _temp694= _temp693.f2; goto _LL690; _LL690: _temp689=
! _temp688.tl; goto _LL687;} _LL685: return 0; _LL687: return({ struct Cyc_List_List*
! _temp698=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp698->hd=( void*)({ struct _tuple11* _temp699=( struct _tuple11*) _cycalloc(
! sizeof( struct _tuple11)); _temp699->f1= _temp696; _temp699->f2=( struct Cyc_List_List*)({
! struct Cyc_List_List* _temp700=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp700->hd=( void*) dsc; _temp700->tl= _temp694;
! _temp700;}); _temp699;}); _temp698->tl= _temp689; _temp698;}); _LL683:;} static
  struct Cyc_List_List* Cyc_Tcpat_norm_context( struct Cyc_List_List* ctxt){
! struct Cyc_List_List* _temp701= ctxt; struct Cyc_List_List _temp707; struct Cyc_List_List*
! _temp708; struct _tuple11* _temp710; struct _tuple11 _temp712; struct Cyc_List_List*
! _temp713; struct Cyc_Tcpat_Con_s* _temp715; _LL703: if( _temp701 ==  0){ goto
! _LL704;} else{ goto _LL705;} _LL705: if( _temp701 ==  0){ goto _LL702;} else{
! _temp707=* _temp701; _LL711: _temp710=( struct _tuple11*) _temp707.hd; _temp712=*
! _temp710; _LL716: _temp715= _temp712.f1; goto _LL714; _LL714: _temp713= _temp712.f2;
! goto _LL709; _LL709: _temp708= _temp707.tl; goto _LL706;} _LL704: return({ void*
! _temp717[ 0u]={};(( struct Cyc_List_List*(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("norm_context: empty context",
! sizeof( unsigned char), 28u), _tag_arr( _temp717, sizeof( void*), 0u));});
! _LL706: return Cyc_Tcpat_augment( _temp708,( void*)({ struct Cyc_Tcpat_Pos_struct*
! _temp718=( struct Cyc_Tcpat_Pos_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Pos_struct));
! _temp718[ 0]=({ struct Cyc_Tcpat_Pos_struct _temp719; _temp719.tag= Cyc_Tcpat_Pos;
! _temp719.f1= _temp715; _temp719.f2= Cyc_List_rev( _temp713); _temp719;});
! _temp718;})); _LL702:;} static void* Cyc_Tcpat_build_desc( struct Cyc_List_List*
! ctxt, void* dsc, struct Cyc_List_List* work){ struct _tuple6 _temp721=({ struct
! _tuple6 _temp720; _temp720.f1= ctxt; _temp720.f2= work; _temp720;}); struct Cyc_List_List*
! _temp731; struct Cyc_List_List* _temp733; struct Cyc_List_List* _temp735; struct
! Cyc_List_List* _temp737; struct Cyc_List_List* _temp739; struct Cyc_List_List
! _temp741; struct Cyc_List_List* _temp742; struct _tuple10* _temp744; struct
! _tuple10 _temp746; struct Cyc_List_List* _temp747; struct Cyc_List_List*
! _temp749; struct Cyc_List_List _temp751; struct Cyc_List_List* _temp752; struct
! _tuple11* _temp754; struct _tuple11 _temp756; struct Cyc_List_List* _temp757;
! struct Cyc_Tcpat_Con_s* _temp759; _LL723: _LL734: _temp733= _temp721.f1; if(
! _temp733 ==  0){ goto _LL732;} else{ goto _LL725;} _LL732: _temp731= _temp721.f2;
! if( _temp731 ==  0){ goto _LL724;} else{ goto _LL725;} _LL725: _LL736: _temp735=
! _temp721.f1; if( _temp735 ==  0){ goto _LL726;} else{ goto _LL727;} _LL727:
! _LL738: _temp737= _temp721.f2; if( _temp737 ==  0){ goto _LL728;} else{ goto
! _LL729;} _LL729: _LL750: _temp749= _temp721.f1; if( _temp749 ==  0){ goto _LL722;}
! else{ _temp751=* _temp749; _LL755: _temp754=( struct _tuple11*) _temp751.hd;
! _temp756=* _temp754; _LL760: _temp759= _temp756.f1; goto _LL758; _LL758:
! _temp757= _temp756.f2; goto _LL753; _LL753: _temp752= _temp751.tl; goto _LL740;}
! _LL740: _temp739= _temp721.f2; if( _temp739 ==  0){ goto _LL722;} else{ _temp741=*
! _temp739; _LL745: _temp744=( struct _tuple10*) _temp741.hd; _temp746=* _temp744;
! _LL748: _temp747= _temp746.f3; goto _LL743; _LL743: _temp742= _temp741.tl; goto
! _LL730;} _LL724: return dsc; _LL726: return({ void* _temp761[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("build_desc: ctxt and work don't match", sizeof( unsigned char), 38u),
! _tag_arr( _temp761, sizeof( void*), 0u));}); _LL728: return({ void* _temp762[ 0u]={};
  Cyc_Tcutil_impos( _tag_arr("build_desc: ctxt and work don't match", sizeof(
! unsigned char), 38u), _tag_arr( _temp762, sizeof( void*), 0u));}); _LL730: {
! struct Cyc_Tcpat_Pos_struct* _temp763=({ struct Cyc_Tcpat_Pos_struct* _temp764=(
  struct Cyc_Tcpat_Pos_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Pos_struct));
! _temp764[ 0]=({ struct Cyc_Tcpat_Pos_struct _temp765; _temp765.tag= Cyc_Tcpat_Pos;
! _temp765.f1= _temp759; _temp765.f2= Cyc_List_append( Cyc_List_rev( _temp757),({
! struct Cyc_List_List* _temp766=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp766->hd=( void*) dsc; _temp766->tl= _temp747;
! _temp766;})); _temp765;}); _temp764;}); return Cyc_Tcpat_build_desc( _temp752,(
! void*) _temp763, _temp742);} _LL722:;} static void* Cyc_Tcpat_match( void* p,
  struct Cyc_List_List* obj, void* dsc, struct Cyc_List_List* ctx, struct Cyc_List_List*
  work, void* right_hand_side, struct Cyc_List_List* rules); static void* Cyc_Tcpat_or_match(
! void* dsc, struct Cyc_List_List* allmrules){ struct Cyc_List_List* _temp767=
! allmrules; struct Cyc_List_List _temp773; struct Cyc_List_List* _temp774; struct
! _tuple0* _temp776; struct _tuple0 _temp778; void* _temp779; void* _temp781;
! _LL769: if( _temp767 ==  0){ goto _LL770;} else{ goto _LL771;} _LL771: if(
! _temp767 ==  0){ goto _LL768;} else{ _temp773=* _temp767; _LL777: _temp776=(
! struct _tuple0*) _temp773.hd; _temp778=* _temp776; _LL782: _temp781= _temp778.f1;
! goto _LL780; _LL780: _temp779= _temp778.f2; goto _LL775; _LL775: _temp774=
! _temp773.tl; goto _LL772;} _LL770: return( void*) Cyc_Tcpat_Failure; _LL772:
! return Cyc_Tcpat_match( _temp781, 0, dsc, 0, 0, _temp779, _temp774); _LL768:;}
  static void* Cyc_Tcpat_match_compile( struct Cyc_List_List* allmrules){ return
! Cyc_Tcpat_or_match(( void*)({ struct Cyc_Tcpat_Neg_struct* _temp783=( struct Cyc_Tcpat_Neg_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Neg_struct)); _temp783[ 0]=({ struct Cyc_Tcpat_Neg_struct
! _temp784; _temp784.tag= Cyc_Tcpat_Neg; _temp784.f1= Cyc_Tcpat_empty_con_set();
! _temp784;}); _temp783;}), allmrules);} static void* Cyc_Tcpat_and_match( struct
  Cyc_List_List* ctx, struct Cyc_List_List* work, void* right_hand_side, struct
! Cyc_List_List* rules){ struct Cyc_List_List* _temp785= work; struct Cyc_List_List
! _temp793; struct Cyc_List_List* _temp794; struct _tuple10* _temp796; struct
! _tuple10 _temp798; struct Cyc_List_List* _temp799; struct Cyc_List_List*
! _temp801; struct Cyc_List_List* _temp803; struct Cyc_List_List _temp805; struct
! Cyc_List_List* _temp806; struct _tuple10* _temp808; struct _tuple10 _temp810;
! struct Cyc_List_List* _temp811; struct Cyc_List_List* _temp813; struct Cyc_List_List*
! _temp815; _LL787: if( _temp785 ==  0){ goto _LL788;} else{ goto _LL789;} _LL789:
! if( _temp785 ==  0){ goto _LL791;} else{ _temp793=* _temp785; _LL797: _temp796=(
! struct _tuple10*) _temp793.hd; _temp798=* _temp796; _LL804: _temp803= _temp798.f1;
! if( _temp803 ==  0){ goto _LL802;} else{ goto _LL791;} _LL802: _temp801=
! _temp798.f2; if( _temp801 ==  0){ goto _LL800;} else{ goto _LL791;} _LL800:
! _temp799= _temp798.f3; if( _temp799 ==  0){ goto _LL795;} else{ goto _LL791;}
! _LL795: _temp794= _temp793.tl; goto _LL790;} _LL791: if( _temp785 ==  0){ goto
! _LL786;} else{ _temp805=* _temp785; _LL809: _temp808=( struct _tuple10*)
! _temp805.hd; _temp810=* _temp808; _LL816: _temp815= _temp810.f1; goto _LL814;
! _LL814: _temp813= _temp810.f2; goto _LL812; _LL812: _temp811= _temp810.f3; goto
! _LL807; _LL807: _temp806= _temp805.tl; goto _LL792;} _LL788: return( void*)({
! struct Cyc_Tcpat_Success_struct* _temp817=( struct Cyc_Tcpat_Success_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Success_struct)); _temp817[ 0]=({ struct Cyc_Tcpat_Success_struct
! _temp818; _temp818.tag= Cyc_Tcpat_Success; _temp818.f1=( void*) right_hand_side;
! _temp818;}); _temp817;}); _LL790: return Cyc_Tcpat_and_match( Cyc_Tcpat_norm_context(
! ctx), _temp794, right_hand_side, rules); _LL792: if(( _temp815 ==  0? 1:
! _temp813 ==  0)? 1: _temp811 ==  0){ return({ void* _temp819[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("tcpat:and_match: malformed work frame", sizeof( unsigned char), 38u),
! _tag_arr( _temp819, sizeof( void*), 0u));});}{ struct Cyc_List_List _temp822;
! struct Cyc_List_List* _temp823; void* _temp825; struct Cyc_List_List* _temp820=(
! struct Cyc_List_List*) _check_null( _temp815); _temp822=* _temp820; _LL826:
! _temp825=( void*) _temp822.hd; goto _LL824; _LL824: _temp823= _temp822.tl; goto
! _LL821; _LL821: { struct Cyc_List_List _temp829; struct Cyc_List_List* _temp830;
! struct Cyc_List_List* _temp832; struct Cyc_List_List* _temp827=( struct Cyc_List_List*)
! _check_null( _temp813); _temp829=* _temp827; _LL833: _temp832=( struct Cyc_List_List*)
! _temp829.hd; goto _LL831; _LL831: _temp830= _temp829.tl; goto _LL828; _LL828: {
! struct Cyc_List_List _temp836; struct Cyc_List_List* _temp837; void* _temp839;
! struct Cyc_List_List* _temp834=( struct Cyc_List_List*) _check_null( _temp811);
! _temp836=* _temp834; _LL840: _temp839=( void*) _temp836.hd; goto _LL838; _LL838:
! _temp837= _temp836.tl; goto _LL835; _LL835: { struct _tuple10* _temp841=({
! struct _tuple10* _temp843=( struct _tuple10*) _cycalloc( sizeof( struct _tuple10));
! _temp843->f1= _temp823; _temp843->f2= _temp830; _temp843->f3= _temp837; _temp843;});
! return Cyc_Tcpat_match( _temp825, _temp832, _temp839, ctx,({ struct Cyc_List_List*
! _temp842=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp842->hd=( void*) _temp841; _temp842->tl= _temp806; _temp842;}),
! right_hand_side, rules);}}}} _LL786:;} static struct Cyc_List_List* Cyc_Tcpat_getdargs(
! struct Cyc_Tcpat_Con_s* pcon, void* dsc){ void* _temp844= dsc; struct Cyc_Set_Set*
! _temp850; struct Cyc_List_List* _temp852; _LL846: if(*(( int*) _temp844) ==  Cyc_Tcpat_Neg){
! _LL851: _temp850=(( struct Cyc_Tcpat_Neg_struct*) _temp844)->f1; goto _LL847;}
! else{ goto _LL848;} _LL848: if(*(( int*) _temp844) ==  Cyc_Tcpat_Pos){ _LL853:
! _temp852=(( struct Cyc_Tcpat_Pos_struct*) _temp844)->f2; goto _LL849;} else{
! goto _LL845;} _LL847: { void* any=( void*)({ struct Cyc_Tcpat_Neg_struct*
! _temp856=( struct Cyc_Tcpat_Neg_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Neg_struct));
! _temp856[ 0]=({ struct Cyc_Tcpat_Neg_struct _temp857; _temp857.tag= Cyc_Tcpat_Neg;
! _temp857.f1= Cyc_Tcpat_empty_con_set(); _temp857;}); _temp856;}); struct Cyc_List_List*
! _temp854= 0;{ int i= 0; for( 0; i <  pcon->arity; ++ i){ _temp854=({ struct Cyc_List_List*
! _temp855=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp855->hd=( void*) any; _temp855->tl= _temp854; _temp855;});}} return
! _temp854;} _LL849: return _temp852; _LL845:;} static struct Cyc_List_List* Cyc_Tcpat_getoarg(
! struct Cyc_List_List* obj, int i){ return({ struct Cyc_List_List* _temp858=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp858->hd=(
! void*)( i +  1); _temp858->tl= obj; _temp858;});} static struct Cyc_List_List*
  Cyc_Tcpat_getoargs( struct Cyc_Tcpat_Con_s* pcon, struct Cyc_List_List* obj){
  return(( struct Cyc_List_List*(*)( int n, struct Cyc_List_List*(* f)( struct Cyc_List_List*,
  int), struct Cyc_List_List* env)) Cyc_List_tabulate_c)( pcon->arity, Cyc_Tcpat_getoarg,
  obj);} static void* Cyc_Tcpat_match( void* p, struct Cyc_List_List* obj, void*
  dsc, struct Cyc_List_List* ctx, struct Cyc_List_List* work, void*
! right_hand_side, struct Cyc_List_List* rules){ void* _temp859= p; struct Cyc_List_List*
! _temp865; struct Cyc_Tcpat_Con_s* _temp867; _LL861: if( _temp859 == ( void*) Cyc_Tcpat_Any){
! goto _LL862;} else{ goto _LL863;} _LL863: if(( unsigned int) _temp859 >  1u?*((
! int*) _temp859) ==  Cyc_Tcpat_Con: 0){ _LL868: _temp867=(( struct Cyc_Tcpat_Con_struct*)
! _temp859)->f1; goto _LL866; _LL866: _temp865=(( struct Cyc_Tcpat_Con_struct*)
! _temp859)->f2; goto _LL864;} else{ goto _LL860;} _LL862: return Cyc_Tcpat_and_match(
! Cyc_Tcpat_augment( ctx, dsc), work, right_hand_side, rules); _LL864: { void*
! _temp869= Cyc_Tcpat_static_match( _temp867, dsc); _LL871: if( _temp869 == ( void*)
! Cyc_Tcpat_Yes){ goto _LL872;} else{ goto _LL873;} _LL873: if( _temp869 == ( void*)
! Cyc_Tcpat_No){ goto _LL874;} else{ goto _LL875;} _LL875: if( _temp869 == ( void*)
! Cyc_Tcpat_Maybe){ goto _LL876;} else{ goto _LL870;} _LL872: { struct Cyc_List_List*
! _temp877=({ struct Cyc_List_List* _temp882=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp882->hd=( void*)({ struct _tuple11*
! _temp883=( struct _tuple11*) _cycalloc( sizeof( struct _tuple11)); _temp883->f1=
! _temp867; _temp883->f2= 0; _temp883;}); _temp882->tl= ctx; _temp882;}); struct
! _tuple10* _temp878=({ struct _tuple10* _temp881=( struct _tuple10*) _cycalloc(
! sizeof( struct _tuple10)); _temp881->f1= _temp865; _temp881->f2= Cyc_Tcpat_getoargs(
! _temp867, obj); _temp881->f3= Cyc_Tcpat_getdargs( _temp867, dsc); _temp881;});
! struct Cyc_List_List* _temp879=({ struct Cyc_List_List* _temp880=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp880->hd=( void*) _temp878;
! _temp880->tl= work; _temp880;}); return Cyc_Tcpat_and_match( _temp877, _temp879,
! right_hand_side, rules);} _LL874: return Cyc_Tcpat_or_match( Cyc_Tcpat_build_desc(
! ctx, dsc, work), rules); _LL876: { struct Cyc_List_List* _temp884=({ struct Cyc_List_List*
! _temp893=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp893->hd=( void*)({ struct _tuple11* _temp894=( struct _tuple11*) _cycalloc(
! sizeof( struct _tuple11)); _temp894->f1= _temp867; _temp894->f2= 0; _temp894;});
! _temp893->tl= ctx; _temp893;}); struct _tuple10* _temp885=({ struct _tuple10*
! _temp892=( struct _tuple10*) _cycalloc( sizeof( struct _tuple10)); _temp892->f1=
! _temp865; _temp892->f2= Cyc_Tcpat_getoargs( _temp867, obj); _temp892->f3= Cyc_Tcpat_getdargs(
! _temp867, dsc); _temp892;}); struct Cyc_List_List* _temp886=({ struct Cyc_List_List*
  _temp891=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp891->hd=( void*) _temp885; _temp891->tl= work; _temp891;}); void* _temp887=
! Cyc_Tcpat_and_match( _temp884, _temp886, right_hand_side, rules); void* _temp888=
! Cyc_Tcpat_or_match( Cyc_Tcpat_build_desc( ctx, Cyc_Tcpat_add_neg( dsc, _temp867),
! work), rules); return( void*)({ struct Cyc_Tcpat_IfEq_struct* _temp889=( struct
  Cyc_Tcpat_IfEq_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_IfEq_struct));
! _temp889[ 0]=({ struct Cyc_Tcpat_IfEq_struct _temp890; _temp890.tag= Cyc_Tcpat_IfEq;
! _temp890.f1= obj; _temp890.f2= _temp867; _temp890.f3=( void*) _temp887; _temp890.f4=(
! void*) _temp888; _temp890;}); _temp889;});} _LL870:;} _LL860:;} static void Cyc_Tcpat_check_exhaust_overlap(
  void* d, void(* not_exhaust)( void*), void* env1, void(* rhs_appears)( void*,
! void*), void* env2){ void* _temp895= d; void* _temp903; void* _temp905; void*
! _temp907; _LL897: if( _temp895 == ( void*) Cyc_Tcpat_Failure){ goto _LL898;}
! else{ goto _LL899;} _LL899: if(( unsigned int) _temp895 >  1u?*(( int*) _temp895)
! ==  Cyc_Tcpat_Success: 0){ _LL904: _temp903=( void*)(( struct Cyc_Tcpat_Success_struct*)
! _temp895)->f1; goto _LL900;} else{ goto _LL901;} _LL901: if(( unsigned int)
! _temp895 >  1u?*(( int*) _temp895) ==  Cyc_Tcpat_IfEq: 0){ _LL908: _temp907=(
! void*)(( struct Cyc_Tcpat_IfEq_struct*) _temp895)->f3; goto _LL906; _LL906:
! _temp905=( void*)(( struct Cyc_Tcpat_IfEq_struct*) _temp895)->f4; goto _LL902;}
! else{ goto _LL896;} _LL898: not_exhaust( env1); goto _LL896; _LL900: rhs_appears(
! env2, _temp903); goto _LL896; _LL902: Cyc_Tcpat_check_exhaust_overlap( _temp907,
! not_exhaust, env1, rhs_appears, env2); Cyc_Tcpat_check_exhaust_overlap( _temp905,
! not_exhaust, env1, rhs_appears, env2); goto _LL896; _LL896:;} struct _tuple12{
  int f1; struct Cyc_Position_Segment* f2; } ; struct _tuple13{ void* f1; struct
  _tuple12* f2; } ; static struct _tuple13* Cyc_Tcpat_get_match( int* r, struct
  Cyc_Absyn_Switch_clause* swc){ void* sp0= Cyc_Tcpat_compile_pat( swc->pattern);
! struct _tuple12* rhs=({ struct _tuple12* _temp914=( struct _tuple12*) _cycalloc(
! sizeof( struct _tuple12)); _temp914->f1= 0; _temp914->f2=( swc->pattern)->loc;
! _temp914;}); void* sp; if( swc->where_clause !=  0){ sp= Cyc_Tcpat_tuple_pat(({
! struct Cyc_List_List* _temp909=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp909->hd=( void*) sp0; _temp909->tl=({ struct Cyc_List_List*
! _temp910=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp910->hd=( void*) Cyc_Tcpat_int_pat(* r); _temp910->tl= 0; _temp910;});
! _temp909;}));* r=* r +  1;} else{ sp= Cyc_Tcpat_tuple_pat(({ struct Cyc_List_List*
! _temp911=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp911->hd=( void*) sp0; _temp911->tl=({ struct Cyc_List_List* _temp912=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp912->hd=(
! void*)(( void*) Cyc_Tcpat_Any); _temp912->tl= 0; _temp912;}); _temp911;}));}
! return({ struct _tuple13* _temp913=( struct _tuple13*) _cycalloc( sizeof( struct
! _tuple13)); _temp913->f1= sp; _temp913->f2= rhs; _temp913;});} static void Cyc_Tcpat_not_exhaust_err(
! struct Cyc_Position_Segment* loc){({ void* _temp915[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("patterns may not be exhaustive", sizeof( unsigned char), 31u),
! _tag_arr( _temp915, sizeof( void*), 0u));});} static void Cyc_Tcpat_rule_occurs(
  int dummy, struct _tuple12* rhs){(* rhs).f1= 1;} void Cyc_Tcpat_check_switch_exhaustive(
! struct Cyc_Position_Segment* loc, struct Cyc_List_List* swcs){ int _temp916= 0;
! struct Cyc_List_List* _temp917=(( struct Cyc_List_List*(*)( struct _tuple13*(* f)(
  int*, struct Cyc_Absyn_Switch_clause*), int* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Tcpat_get_match,& _temp916, swcs); void* _temp918=(( void*(*)( struct Cyc_List_List*
! allmrules)) Cyc_Tcpat_match_compile)( _temp917);(( void(*)( void* d, void(*
  not_exhaust)( struct Cyc_Position_Segment*), struct Cyc_Position_Segment* env1,
  void(* rhs_appears)( int, struct _tuple12*), int env2)) Cyc_Tcpat_check_exhaust_overlap)(
! _temp918, Cyc_Tcpat_not_exhaust_err, loc, Cyc_Tcpat_rule_occurs, 0); for( 0;
! _temp917 !=  0; _temp917=(( struct Cyc_List_List*) _check_null( _temp917))->tl){
! struct _tuple13 _temp921; struct _tuple12* _temp922; struct _tuple12 _temp924;
! struct Cyc_Position_Segment* _temp925; int _temp927; struct _tuple13* _temp919=(
! struct _tuple13*)(( struct Cyc_List_List*) _check_null( _temp917))->hd; _temp921=*
! _temp919; _LL923: _temp922= _temp921.f2; _temp924=* _temp922; _LL928: _temp927=
! _temp924.f1; goto _LL926; _LL926: _temp925= _temp924.f2; goto _LL920; _LL920:
! if( ! _temp927){({ void* _temp929[ 0u]={}; Cyc_Tcutil_terr( _temp925, _tag_arr("redundant pattern",
! sizeof( unsigned char), 18u), _tag_arr( _temp929, sizeof( void*), 0u));});}}}
  struct _tuple14{ struct Cyc_Position_Segment* f1; int f2; } ; static void Cyc_Tcpat_not_exhaust_warn(
! struct _tuple14* pr){(* pr).f2= 0;({ void* _temp930[ 0u]={}; Cyc_Tcutil_warn((*
  pr).f1, _tag_arr("pattern not exhaustive", sizeof( unsigned char), 23u),
! _tag_arr( _temp930, sizeof( void*), 0u));});} static void Cyc_Tcpat_dummy_fn(
  int i, int j){ return;} struct _tuple15{ void* f1; int f2; } ; int Cyc_Tcpat_check_let_pat_exhaustive(
  struct Cyc_Position_Segment* loc, struct Cyc_Absyn_Pat* p){ struct Cyc_List_List*
! _temp931=({ struct Cyc_List_List* _temp935=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp935->hd=( void*)({ struct _tuple15*
! _temp936=( struct _tuple15*) _cycalloc( sizeof( struct _tuple15)); _temp936->f1=
! Cyc_Tcpat_compile_pat( p); _temp936->f2= 0; _temp936;}); _temp935->tl= 0;
! _temp935;}); void* _temp932=(( void*(*)( struct Cyc_List_List* allmrules)) Cyc_Tcpat_match_compile)(
! _temp931); struct _tuple14* _temp933=({ struct _tuple14* _temp934=( struct
! _tuple14*) _cycalloc( sizeof( struct _tuple14)); _temp934->f1= loc; _temp934->f2=
! 1; _temp934;});(( void(*)( void* d, void(* not_exhaust)( struct _tuple14*),
  struct _tuple14* env1, void(* rhs_appears)( int, int), int env2)) Cyc_Tcpat_check_exhaust_overlap)(
! _temp932, Cyc_Tcpat_not_exhaust_warn, _temp933, Cyc_Tcpat_dummy_fn, 0); return(*
! _temp933).f2;} static struct _tuple13* Cyc_Tcpat_get_match2( struct Cyc_Absyn_Switch_clause*
  swc){ void* sp0= Cyc_Tcpat_compile_pat( swc->pattern); struct _tuple12* rhs=({
! struct _tuple12* _temp938=( struct _tuple12*) _cycalloc( sizeof( struct _tuple12));
! _temp938->f1= 0; _temp938->f2=( swc->pattern)->loc; _temp938;}); return({ struct
! _tuple13* _temp937=( struct _tuple13*) _cycalloc( sizeof( struct _tuple13));
! _temp937->f1= sp0; _temp937->f2= rhs; _temp937;});} static void Cyc_Tcpat_not_exhaust_err2(
  struct Cyc_Position_Segment* loc){;} void Cyc_Tcpat_check_catch_overlap( struct
  Cyc_Position_Segment* loc, struct Cyc_List_List* swcs){ struct Cyc_List_List*
! _temp939=(( struct Cyc_List_List*(*)( struct _tuple13*(* f)( struct Cyc_Absyn_Switch_clause*),
  struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcpat_get_match2, swcs); void*
! _temp940=(( void*(*)( struct Cyc_List_List* allmrules)) Cyc_Tcpat_match_compile)(
! _temp939);(( void(*)( void* d, void(* not_exhaust)( struct Cyc_Position_Segment*),
  struct Cyc_Position_Segment* env1, void(* rhs_appears)( int, struct _tuple12*),
! int env2)) Cyc_Tcpat_check_exhaust_overlap)( _temp940, Cyc_Tcpat_not_exhaust_err2,
! loc, Cyc_Tcpat_rule_occurs, 0); for( 0; _temp939 !=  0; _temp939=(( struct Cyc_List_List*)
! _check_null( _temp939))->tl){ struct _tuple13 _temp943; struct _tuple12*
! _temp944; struct _tuple12 _temp946; struct Cyc_Position_Segment* _temp947; int
! _temp949; struct _tuple13* _temp941=( struct _tuple13*)(( struct Cyc_List_List*)
! _check_null( _temp939))->hd; _temp943=* _temp941; _LL945: _temp944= _temp943.f2;
! _temp946=* _temp944; _LL950: _temp949= _temp946.f1; goto _LL948; _LL948:
! _temp947= _temp946.f2; goto _LL942; _LL942: if( ! _temp949){({ void* _temp951[ 0u]={};
! Cyc_Tcutil_terr( _temp947, _tag_arr("redundant pattern", sizeof( unsigned char),
! 18u), _tag_arr( _temp951, sizeof( void*), 0u));});}}}
--- 1434,1740 ----
  f2; void* f3; void* f4; } ; struct _tuple10{ struct Cyc_List_List* f1; struct
  Cyc_List_List* f2; struct Cyc_List_List* f3; } ; static const int Cyc_Tcpat_Yes=
  0; static const int Cyc_Tcpat_No= 1; static const int Cyc_Tcpat_Maybe= 2; static
! void* Cyc_Tcpat_add_neg( void* td, struct Cyc_Tcpat_Con_s* c){ void* _temp657=
! td; struct Cyc_Set_Set* _temp663; _LL659: if(*(( int*) _temp657) ==  Cyc_Tcpat_Neg){
! _LL664: _temp663=(( struct Cyc_Tcpat_Neg_struct*) _temp657)->f1; goto _LL660;}
! else{ goto _LL661;} _LL661: if(*(( int*) _temp657) ==  Cyc_Tcpat_Pos){ goto
! _LL662;} else{ goto _LL658;} _LL660: if((( int(*)( struct Cyc_Set_Set* s, struct
! Cyc_Tcpat_Con_s* elt)) Cyc_Set_member)( _temp663, c)){({ void* _temp665[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("add_neg called when constructor already in set", sizeof( unsigned char),
! 47u), _tag_arr( _temp665, sizeof( void*), 0u));});} if( c->span !=  0?(( int(*)(
! struct Cyc_Set_Set* s)) Cyc_Set_cardinality)( _temp663) +  1 >= ( int)(( struct
! Cyc_Core_Opt*) _check_null( c->span))->v: 0){({ void* _temp666[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("add_neg called when |cs U {c}| >= span(c)",
! sizeof( unsigned char), 42u), _tag_arr( _temp666, sizeof( void*), 0u));});}
! return( void*)({ struct Cyc_Tcpat_Neg_struct* _temp667=( struct Cyc_Tcpat_Neg_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Neg_struct)); _temp667[ 0]=({ struct Cyc_Tcpat_Neg_struct
! _temp668; _temp668.tag= Cyc_Tcpat_Neg; _temp668.f1=(( struct Cyc_Set_Set*(*)(
! struct Cyc_Set_Set* s, struct Cyc_Tcpat_Con_s* elt)) Cyc_Set_insert)( _temp663,
! c); _temp668;}); _temp667;}); _LL662: return({ void* _temp669[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("add_neg called when td is Positive", sizeof( unsigned char), 35u),
! _tag_arr( _temp669, sizeof( void*), 0u));}); _LL658:;} static void* Cyc_Tcpat_static_match(
! struct Cyc_Tcpat_Con_s* c, void* td){ void* _temp670= td; struct Cyc_Tcpat_Con_s*
! _temp676; struct Cyc_Set_Set* _temp678; _LL672: if(*(( int*) _temp670) ==  Cyc_Tcpat_Pos){
! _LL677: _temp676=(( struct Cyc_Tcpat_Pos_struct*) _temp670)->f1; goto _LL673;}
! else{ goto _LL674;} _LL674: if(*(( int*) _temp670) ==  Cyc_Tcpat_Neg){ _LL679:
! _temp678=(( struct Cyc_Tcpat_Neg_struct*) _temp670)->f1; goto _LL675;} else{
! goto _LL671;} _LL673: if( Cyc_Tcpat_compare_con( c, _temp676) ==  0){ return(
! void*) Cyc_Tcpat_Yes;} else{ return( void*) Cyc_Tcpat_No;} _LL675: if((( int(*)(
! struct Cyc_Set_Set* s, struct Cyc_Tcpat_Con_s* elt)) Cyc_Set_member)( _temp678,
  c)){ return( void*) Cyc_Tcpat_No;} else{ if( c->span !=  0?( int)(( struct Cyc_Core_Opt*)
  _check_null( c->span))->v == (( int(*)( struct Cyc_Set_Set* s)) Cyc_Set_cardinality)(
! _temp678) +  1: 0){ return( void*) Cyc_Tcpat_Yes;} else{ return( void*) Cyc_Tcpat_Maybe;}}
! _LL671:;} struct _tuple11{ struct Cyc_Tcpat_Con_s* f1; struct Cyc_List_List* f2;
  } ; static struct Cyc_List_List* Cyc_Tcpat_augment( struct Cyc_List_List* ctxt,
! void* dsc){ struct Cyc_List_List* _temp680= ctxt; struct Cyc_List_List _temp686;
! struct Cyc_List_List* _temp687; struct _tuple11* _temp689; struct _tuple11
! _temp691; struct Cyc_List_List* _temp692; struct Cyc_Tcpat_Con_s* _temp694;
! _LL682: if( _temp680 ==  0){ goto _LL683;} else{ goto _LL684;} _LL684: if(
! _temp680 ==  0){ goto _LL681;} else{ _temp686=* _temp680; _LL690: _temp689=(
! struct _tuple11*) _temp686.hd; _temp691=* _temp689; _LL695: _temp694= _temp691.f1;
! goto _LL693; _LL693: _temp692= _temp691.f2; goto _LL688; _LL688: _temp687=
! _temp686.tl; goto _LL685;} _LL683: return 0; _LL685: return({ struct Cyc_List_List*
! _temp696=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp696->hd=( void*)({ struct _tuple11* _temp697=( struct _tuple11*) _cycalloc(
! sizeof( struct _tuple11)); _temp697->f1= _temp694; _temp697->f2=( struct Cyc_List_List*)({
! struct Cyc_List_List* _temp698=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp698->hd=( void*) dsc; _temp698->tl= _temp692;
! _temp698;}); _temp697;}); _temp696->tl= _temp687; _temp696;}); _LL681:;} static
  struct Cyc_List_List* Cyc_Tcpat_norm_context( struct Cyc_List_List* ctxt){
! struct Cyc_List_List* _temp699= ctxt; struct Cyc_List_List _temp705; struct Cyc_List_List*
! _temp706; struct _tuple11* _temp708; struct _tuple11 _temp710; struct Cyc_List_List*
! _temp711; struct Cyc_Tcpat_Con_s* _temp713; _LL701: if( _temp699 ==  0){ goto
! _LL702;} else{ goto _LL703;} _LL703: if( _temp699 ==  0){ goto _LL700;} else{
! _temp705=* _temp699; _LL709: _temp708=( struct _tuple11*) _temp705.hd; _temp710=*
! _temp708; _LL714: _temp713= _temp710.f1; goto _LL712; _LL712: _temp711= _temp710.f2;
! goto _LL707; _LL707: _temp706= _temp705.tl; goto _LL704;} _LL702: return({ void*
! _temp715[ 0u]={};(( struct Cyc_List_List*(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("norm_context: empty context",
! sizeof( unsigned char), 28u), _tag_arr( _temp715, sizeof( void*), 0u));});
! _LL704: return Cyc_Tcpat_augment( _temp706,( void*)({ struct Cyc_Tcpat_Pos_struct*
! _temp716=( struct Cyc_Tcpat_Pos_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Pos_struct));
! _temp716[ 0]=({ struct Cyc_Tcpat_Pos_struct _temp717; _temp717.tag= Cyc_Tcpat_Pos;
! _temp717.f1= _temp713; _temp717.f2= Cyc_List_rev( _temp711); _temp717;});
! _temp716;})); _LL700:;} static void* Cyc_Tcpat_build_desc( struct Cyc_List_List*
! ctxt, void* dsc, struct Cyc_List_List* work){ struct _tuple6 _temp719=({ struct
! _tuple6 _temp718; _temp718.f1= ctxt; _temp718.f2= work; _temp718;}); struct Cyc_List_List*
! _temp729; struct Cyc_List_List* _temp731; struct Cyc_List_List* _temp733; struct
! Cyc_List_List* _temp735; struct Cyc_List_List* _temp737; struct Cyc_List_List
! _temp739; struct Cyc_List_List* _temp740; struct _tuple10* _temp742; struct
! _tuple10 _temp744; struct Cyc_List_List* _temp745; struct Cyc_List_List*
! _temp747; struct Cyc_List_List _temp749; struct Cyc_List_List* _temp750; struct
! _tuple11* _temp752; struct _tuple11 _temp754; struct Cyc_List_List* _temp755;
! struct Cyc_Tcpat_Con_s* _temp757; _LL721: _LL732: _temp731= _temp719.f1; if(
! _temp731 ==  0){ goto _LL730;} else{ goto _LL723;} _LL730: _temp729= _temp719.f2;
! if( _temp729 ==  0){ goto _LL722;} else{ goto _LL723;} _LL723: _LL734: _temp733=
! _temp719.f1; if( _temp733 ==  0){ goto _LL724;} else{ goto _LL725;} _LL725:
! _LL736: _temp735= _temp719.f2; if( _temp735 ==  0){ goto _LL726;} else{ goto
! _LL727;} _LL727: _LL748: _temp747= _temp719.f1; if( _temp747 ==  0){ goto _LL720;}
! else{ _temp749=* _temp747; _LL753: _temp752=( struct _tuple11*) _temp749.hd;
! _temp754=* _temp752; _LL758: _temp757= _temp754.f1; goto _LL756; _LL756:
! _temp755= _temp754.f2; goto _LL751; _LL751: _temp750= _temp749.tl; goto _LL738;}
! _LL738: _temp737= _temp719.f2; if( _temp737 ==  0){ goto _LL720;} else{ _temp739=*
! _temp737; _LL743: _temp742=( struct _tuple10*) _temp739.hd; _temp744=* _temp742;
! _LL746: _temp745= _temp744.f3; goto _LL741; _LL741: _temp740= _temp739.tl; goto
! _LL728;} _LL722: return dsc; _LL724: return({ void* _temp759[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("build_desc: ctxt and work don't match", sizeof( unsigned char), 38u),
! _tag_arr( _temp759, sizeof( void*), 0u));}); _LL726: return({ void* _temp760[ 0u]={};
  Cyc_Tcutil_impos( _tag_arr("build_desc: ctxt and work don't match", sizeof(
! unsigned char), 38u), _tag_arr( _temp760, sizeof( void*), 0u));}); _LL728: {
! struct Cyc_Tcpat_Pos_struct* _temp761=({ struct Cyc_Tcpat_Pos_struct* _temp762=(
  struct Cyc_Tcpat_Pos_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Pos_struct));
! _temp762[ 0]=({ struct Cyc_Tcpat_Pos_struct _temp763; _temp763.tag= Cyc_Tcpat_Pos;
! _temp763.f1= _temp757; _temp763.f2= Cyc_List_append( Cyc_List_rev( _temp755),({
! struct Cyc_List_List* _temp764=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp764->hd=( void*) dsc; _temp764->tl= _temp745;
! _temp764;})); _temp763;}); _temp762;}); return Cyc_Tcpat_build_desc( _temp750,(
! void*) _temp761, _temp740);} _LL720:;} static void* Cyc_Tcpat_match( void* p,
  struct Cyc_List_List* obj, void* dsc, struct Cyc_List_List* ctx, struct Cyc_List_List*
  work, void* right_hand_side, struct Cyc_List_List* rules); static void* Cyc_Tcpat_or_match(
! void* dsc, struct Cyc_List_List* allmrules){ struct Cyc_List_List* _temp765=
! allmrules; struct Cyc_List_List _temp771; struct Cyc_List_List* _temp772; struct
! _tuple0* _temp774; struct _tuple0 _temp776; void* _temp777; void* _temp779;
! _LL767: if( _temp765 ==  0){ goto _LL768;} else{ goto _LL769;} _LL769: if(
! _temp765 ==  0){ goto _LL766;} else{ _temp771=* _temp765; _LL775: _temp774=(
! struct _tuple0*) _temp771.hd; _temp776=* _temp774; _LL780: _temp779= _temp776.f1;
! goto _LL778; _LL778: _temp777= _temp776.f2; goto _LL773; _LL773: _temp772=
! _temp771.tl; goto _LL770;} _LL768: return( void*) Cyc_Tcpat_Failure; _LL770:
! return Cyc_Tcpat_match( _temp779, 0, dsc, 0, 0, _temp777, _temp772); _LL766:;}
  static void* Cyc_Tcpat_match_compile( struct Cyc_List_List* allmrules){ return
! Cyc_Tcpat_or_match(( void*)({ struct Cyc_Tcpat_Neg_struct* _temp781=( struct Cyc_Tcpat_Neg_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Neg_struct)); _temp781[ 0]=({ struct Cyc_Tcpat_Neg_struct
! _temp782; _temp782.tag= Cyc_Tcpat_Neg; _temp782.f1= Cyc_Tcpat_empty_con_set();
! _temp782;}); _temp781;}), allmrules);} static void* Cyc_Tcpat_and_match( struct
  Cyc_List_List* ctx, struct Cyc_List_List* work, void* right_hand_side, struct
! Cyc_List_List* rules){ struct Cyc_List_List* _temp783= work; struct Cyc_List_List
! _temp791; struct Cyc_List_List* _temp792; struct _tuple10* _temp794; struct
! _tuple10 _temp796; struct Cyc_List_List* _temp797; struct Cyc_List_List*
! _temp799; struct Cyc_List_List* _temp801; struct Cyc_List_List _temp803; struct
! Cyc_List_List* _temp804; struct _tuple10* _temp806; struct _tuple10 _temp808;
! struct Cyc_List_List* _temp809; struct Cyc_List_List* _temp811; struct Cyc_List_List*
! _temp813; _LL785: if( _temp783 ==  0){ goto _LL786;} else{ goto _LL787;} _LL787:
! if( _temp783 ==  0){ goto _LL789;} else{ _temp791=* _temp783; _LL795: _temp794=(
! struct _tuple10*) _temp791.hd; _temp796=* _temp794; _LL802: _temp801= _temp796.f1;
! if( _temp801 ==  0){ goto _LL800;} else{ goto _LL789;} _LL800: _temp799=
! _temp796.f2; if( _temp799 ==  0){ goto _LL798;} else{ goto _LL789;} _LL798:
! _temp797= _temp796.f3; if( _temp797 ==  0){ goto _LL793;} else{ goto _LL789;}
! _LL793: _temp792= _temp791.tl; goto _LL788;} _LL789: if( _temp783 ==  0){ goto
! _LL784;} else{ _temp803=* _temp783; _LL807: _temp806=( struct _tuple10*)
! _temp803.hd; _temp808=* _temp806; _LL814: _temp813= _temp808.f1; goto _LL812;
! _LL812: _temp811= _temp808.f2; goto _LL810; _LL810: _temp809= _temp808.f3; goto
! _LL805; _LL805: _temp804= _temp803.tl; goto _LL790;} _LL786: return( void*)({
! struct Cyc_Tcpat_Success_struct* _temp815=( struct Cyc_Tcpat_Success_struct*)
! _cycalloc( sizeof( struct Cyc_Tcpat_Success_struct)); _temp815[ 0]=({ struct Cyc_Tcpat_Success_struct
! _temp816; _temp816.tag= Cyc_Tcpat_Success; _temp816.f1=( void*) right_hand_side;
! _temp816;}); _temp815;}); _LL788: return Cyc_Tcpat_and_match( Cyc_Tcpat_norm_context(
! ctx), _temp792, right_hand_side, rules); _LL790: if(( _temp813 ==  0? 1:
! _temp811 ==  0)? 1: _temp809 ==  0){ return({ void* _temp817[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("tcpat:and_match: malformed work frame", sizeof( unsigned char), 38u),
! _tag_arr( _temp817, sizeof( void*), 0u));});}{ struct Cyc_List_List _temp820;
! struct Cyc_List_List* _temp821; void* _temp823; struct Cyc_List_List* _temp818=(
! struct Cyc_List_List*) _check_null( _temp813); _temp820=* _temp818; _LL824:
! _temp823=( void*) _temp820.hd; goto _LL822; _LL822: _temp821= _temp820.tl; goto
! _LL819; _LL819: { struct Cyc_List_List _temp827; struct Cyc_List_List* _temp828;
! struct Cyc_List_List* _temp830; struct Cyc_List_List* _temp825=( struct Cyc_List_List*)
! _check_null( _temp811); _temp827=* _temp825; _LL831: _temp830=( struct Cyc_List_List*)
! _temp827.hd; goto _LL829; _LL829: _temp828= _temp827.tl; goto _LL826; _LL826: {
! struct Cyc_List_List _temp834; struct Cyc_List_List* _temp835; void* _temp837;
! struct Cyc_List_List* _temp832=( struct Cyc_List_List*) _check_null( _temp809);
! _temp834=* _temp832; _LL838: _temp837=( void*) _temp834.hd; goto _LL836; _LL836:
! _temp835= _temp834.tl; goto _LL833; _LL833: { struct _tuple10* _temp839=({
! struct _tuple10* _temp841=( struct _tuple10*) _cycalloc( sizeof( struct _tuple10));
! _temp841->f1= _temp821; _temp841->f2= _temp828; _temp841->f3= _temp835; _temp841;});
! return Cyc_Tcpat_match( _temp823, _temp830, _temp837, ctx,({ struct Cyc_List_List*
! _temp840=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp840->hd=( void*) _temp839; _temp840->tl= _temp804; _temp840;}),
! right_hand_side, rules);}}}} _LL784:;} static struct Cyc_List_List* Cyc_Tcpat_getdargs(
! struct Cyc_Tcpat_Con_s* pcon, void* dsc){ void* _temp842= dsc; struct Cyc_Set_Set*
! _temp848; struct Cyc_List_List* _temp850; _LL844: if(*(( int*) _temp842) ==  Cyc_Tcpat_Neg){
! _LL849: _temp848=(( struct Cyc_Tcpat_Neg_struct*) _temp842)->f1; goto _LL845;}
! else{ goto _LL846;} _LL846: if(*(( int*) _temp842) ==  Cyc_Tcpat_Pos){ _LL851:
! _temp850=(( struct Cyc_Tcpat_Pos_struct*) _temp842)->f2; goto _LL847;} else{
! goto _LL843;} _LL845: { void* any=( void*)({ struct Cyc_Tcpat_Neg_struct*
! _temp854=( struct Cyc_Tcpat_Neg_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_Neg_struct));
! _temp854[ 0]=({ struct Cyc_Tcpat_Neg_struct _temp855; _temp855.tag= Cyc_Tcpat_Neg;
! _temp855.f1= Cyc_Tcpat_empty_con_set(); _temp855;}); _temp854;}); struct Cyc_List_List*
! _temp852= 0;{ int i= 0; for( 0; i <  pcon->arity; ++ i){ _temp852=({ struct Cyc_List_List*
! _temp853=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp853->hd=( void*) any; _temp853->tl= _temp852; _temp853;});}} return
! _temp852;} _LL847: return _temp850; _LL843:;} static struct Cyc_List_List* Cyc_Tcpat_getoarg(
! struct Cyc_List_List* obj, int i){ return({ struct Cyc_List_List* _temp856=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp856->hd=(
! void*)( i +  1); _temp856->tl= obj; _temp856;});} static struct Cyc_List_List*
  Cyc_Tcpat_getoargs( struct Cyc_Tcpat_Con_s* pcon, struct Cyc_List_List* obj){
  return(( struct Cyc_List_List*(*)( int n, struct Cyc_List_List*(* f)( struct Cyc_List_List*,
  int), struct Cyc_List_List* env)) Cyc_List_tabulate_c)( pcon->arity, Cyc_Tcpat_getoarg,
  obj);} static void* Cyc_Tcpat_match( void* p, struct Cyc_List_List* obj, void*
  dsc, struct Cyc_List_List* ctx, struct Cyc_List_List* work, void*
! right_hand_side, struct Cyc_List_List* rules){ void* _temp857= p; struct Cyc_List_List*
! _temp863; struct Cyc_Tcpat_Con_s* _temp865; _LL859: if( _temp857 == ( void*) Cyc_Tcpat_Any){
! goto _LL860;} else{ goto _LL861;} _LL861: if(( unsigned int) _temp857 >  1u?*((
! int*) _temp857) ==  Cyc_Tcpat_Con: 0){ _LL866: _temp865=(( struct Cyc_Tcpat_Con_struct*)
! _temp857)->f1; goto _LL864; _LL864: _temp863=(( struct Cyc_Tcpat_Con_struct*)
! _temp857)->f2; goto _LL862;} else{ goto _LL858;} _LL860: return Cyc_Tcpat_and_match(
! Cyc_Tcpat_augment( ctx, dsc), work, right_hand_side, rules); _LL862: { void*
! _temp867= Cyc_Tcpat_static_match( _temp865, dsc); _LL869: if( _temp867 == ( void*)
! Cyc_Tcpat_Yes){ goto _LL870;} else{ goto _LL871;} _LL871: if( _temp867 == ( void*)
! Cyc_Tcpat_No){ goto _LL872;} else{ goto _LL873;} _LL873: if( _temp867 == ( void*)
! Cyc_Tcpat_Maybe){ goto _LL874;} else{ goto _LL868;} _LL870: { struct Cyc_List_List*
! _temp875=({ struct Cyc_List_List* _temp880=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp880->hd=( void*)({ struct _tuple11*
! _temp881=( struct _tuple11*) _cycalloc( sizeof( struct _tuple11)); _temp881->f1=
! _temp865; _temp881->f2= 0; _temp881;}); _temp880->tl= ctx; _temp880;}); struct
! _tuple10* _temp876=({ struct _tuple10* _temp879=( struct _tuple10*) _cycalloc(
! sizeof( struct _tuple10)); _temp879->f1= _temp863; _temp879->f2= Cyc_Tcpat_getoargs(
! _temp865, obj); _temp879->f3= Cyc_Tcpat_getdargs( _temp865, dsc); _temp879;});
! struct Cyc_List_List* _temp877=({ struct Cyc_List_List* _temp878=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp878->hd=( void*) _temp876;
! _temp878->tl= work; _temp878;}); return Cyc_Tcpat_and_match( _temp875, _temp877,
! right_hand_side, rules);} _LL872: return Cyc_Tcpat_or_match( Cyc_Tcpat_build_desc(
! ctx, dsc, work), rules); _LL874: { struct Cyc_List_List* _temp882=({ struct Cyc_List_List*
  _temp891=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp891->hd=( void*)({ struct _tuple11* _temp892=( struct _tuple11*) _cycalloc(
! sizeof( struct _tuple11)); _temp892->f1= _temp865; _temp892->f2= 0; _temp892;});
! _temp891->tl= ctx; _temp891;}); struct _tuple10* _temp883=({ struct _tuple10*
! _temp890=( struct _tuple10*) _cycalloc( sizeof( struct _tuple10)); _temp890->f1=
! _temp863; _temp890->f2= Cyc_Tcpat_getoargs( _temp865, obj); _temp890->f3= Cyc_Tcpat_getdargs(
! _temp865, dsc); _temp890;}); struct Cyc_List_List* _temp884=({ struct Cyc_List_List*
! _temp889=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp889->hd=( void*) _temp883; _temp889->tl= work; _temp889;}); void* _temp885=
! Cyc_Tcpat_and_match( _temp882, _temp884, right_hand_side, rules); void* _temp886=
! Cyc_Tcpat_or_match( Cyc_Tcpat_build_desc( ctx, Cyc_Tcpat_add_neg( dsc, _temp865),
! work), rules); return( void*)({ struct Cyc_Tcpat_IfEq_struct* _temp887=( struct
  Cyc_Tcpat_IfEq_struct*) _cycalloc( sizeof( struct Cyc_Tcpat_IfEq_struct));
! _temp887[ 0]=({ struct Cyc_Tcpat_IfEq_struct _temp888; _temp888.tag= Cyc_Tcpat_IfEq;
! _temp888.f1= obj; _temp888.f2= _temp865; _temp888.f3=( void*) _temp885; _temp888.f4=(
! void*) _temp886; _temp888;}); _temp887;});} _LL868:;} _LL858:;} static void Cyc_Tcpat_check_exhaust_overlap(
  void* d, void(* not_exhaust)( void*), void* env1, void(* rhs_appears)( void*,
! void*), void* env2){ void* _temp893= d; void* _temp901; void* _temp903; void*
! _temp905; _LL895: if( _temp893 == ( void*) Cyc_Tcpat_Failure){ goto _LL896;}
! else{ goto _LL897;} _LL897: if(( unsigned int) _temp893 >  1u?*(( int*) _temp893)
! ==  Cyc_Tcpat_Success: 0){ _LL902: _temp901=( void*)(( struct Cyc_Tcpat_Success_struct*)
! _temp893)->f1; goto _LL898;} else{ goto _LL899;} _LL899: if(( unsigned int)
! _temp893 >  1u?*(( int*) _temp893) ==  Cyc_Tcpat_IfEq: 0){ _LL906: _temp905=(
! void*)(( struct Cyc_Tcpat_IfEq_struct*) _temp893)->f3; goto _LL904; _LL904:
! _temp903=( void*)(( struct Cyc_Tcpat_IfEq_struct*) _temp893)->f4; goto _LL900;}
! else{ goto _LL894;} _LL896: not_exhaust( env1); goto _LL894; _LL898: rhs_appears(
! env2, _temp901); goto _LL894; _LL900: Cyc_Tcpat_check_exhaust_overlap( _temp905,
! not_exhaust, env1, rhs_appears, env2); Cyc_Tcpat_check_exhaust_overlap( _temp903,
! not_exhaust, env1, rhs_appears, env2); goto _LL894; _LL894:;} struct _tuple12{
  int f1; struct Cyc_Position_Segment* f2; } ; struct _tuple13{ void* f1; struct
  _tuple12* f2; } ; static struct _tuple13* Cyc_Tcpat_get_match( int* r, struct
  Cyc_Absyn_Switch_clause* swc){ void* sp0= Cyc_Tcpat_compile_pat( swc->pattern);
! struct _tuple12* rhs=({ struct _tuple12* _temp912=( struct _tuple12*) _cycalloc(
! sizeof( struct _tuple12)); _temp912->f1= 0; _temp912->f2=( swc->pattern)->loc;
! _temp912;}); void* sp; if( swc->where_clause !=  0){ sp= Cyc_Tcpat_tuple_pat(({
! struct Cyc_List_List* _temp907=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp907->hd=( void*) sp0; _temp907->tl=({ struct Cyc_List_List*
! _temp908=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp908->hd=( void*) Cyc_Tcpat_int_pat(* r); _temp908->tl= 0; _temp908;});
! _temp907;}));* r=* r +  1;} else{ sp= Cyc_Tcpat_tuple_pat(({ struct Cyc_List_List*
! _temp909=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp909->hd=( void*) sp0; _temp909->tl=({ struct Cyc_List_List* _temp910=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp910->hd=(
! void*)(( void*) Cyc_Tcpat_Any); _temp910->tl= 0; _temp910;}); _temp909;}));}
! return({ struct _tuple13* _temp911=( struct _tuple13*) _cycalloc( sizeof( struct
! _tuple13)); _temp911->f1= sp; _temp911->f2= rhs; _temp911;});} static void Cyc_Tcpat_not_exhaust_err(
! struct Cyc_Position_Segment* loc){({ void* _temp913[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("patterns may not be exhaustive", sizeof( unsigned char), 31u),
! _tag_arr( _temp913, sizeof( void*), 0u));});} static void Cyc_Tcpat_rule_occurs(
  int dummy, struct _tuple12* rhs){(* rhs).f1= 1;} void Cyc_Tcpat_check_switch_exhaustive(
! struct Cyc_Position_Segment* loc, struct Cyc_List_List* swcs){ int _temp914= 0;
! struct Cyc_List_List* _temp915=(( struct Cyc_List_List*(*)( struct _tuple13*(* f)(
  int*, struct Cyc_Absyn_Switch_clause*), int* env, struct Cyc_List_List* x)) Cyc_List_map_c)(
! Cyc_Tcpat_get_match,& _temp914, swcs); void* _temp916=(( void*(*)( struct Cyc_List_List*
! allmrules)) Cyc_Tcpat_match_compile)( _temp915);(( void(*)( void* d, void(*
  not_exhaust)( struct Cyc_Position_Segment*), struct Cyc_Position_Segment* env1,
  void(* rhs_appears)( int, struct _tuple12*), int env2)) Cyc_Tcpat_check_exhaust_overlap)(
! _temp916, Cyc_Tcpat_not_exhaust_err, loc, Cyc_Tcpat_rule_occurs, 0); for( 0;
! _temp915 !=  0; _temp915=(( struct Cyc_List_List*) _check_null( _temp915))->tl){
! struct _tuple13 _temp919; struct _tuple12* _temp920; struct _tuple12 _temp922;
! struct Cyc_Position_Segment* _temp923; int _temp925; struct _tuple13* _temp917=(
! struct _tuple13*)(( struct Cyc_List_List*) _check_null( _temp915))->hd; _temp919=*
! _temp917; _LL921: _temp920= _temp919.f2; _temp922=* _temp920; _LL926: _temp925=
! _temp922.f1; goto _LL924; _LL924: _temp923= _temp922.f2; goto _LL918; _LL918:
! if( ! _temp925){({ void* _temp927[ 0u]={}; Cyc_Tcutil_terr( _temp923, _tag_arr("redundant pattern",
! sizeof( unsigned char), 18u), _tag_arr( _temp927, sizeof( void*), 0u));});}}}
  struct _tuple14{ struct Cyc_Position_Segment* f1; int f2; } ; static void Cyc_Tcpat_not_exhaust_warn(
! struct _tuple14* pr){(* pr).f2= 0;({ void* _temp928[ 0u]={}; Cyc_Tcutil_warn((*
  pr).f1, _tag_arr("pattern not exhaustive", sizeof( unsigned char), 23u),
! _tag_arr( _temp928, sizeof( void*), 0u));});} static void Cyc_Tcpat_dummy_fn(
  int i, int j){ return;} struct _tuple15{ void* f1; int f2; } ; int Cyc_Tcpat_check_let_pat_exhaustive(
  struct Cyc_Position_Segment* loc, struct Cyc_Absyn_Pat* p){ struct Cyc_List_List*
! _temp929=({ struct Cyc_List_List* _temp933=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp933->hd=( void*)({ struct _tuple15*
! _temp934=( struct _tuple15*) _cycalloc( sizeof( struct _tuple15)); _temp934->f1=
! Cyc_Tcpat_compile_pat( p); _temp934->f2= 0; _temp934;}); _temp933->tl= 0;
! _temp933;}); void* _temp930=(( void*(*)( struct Cyc_List_List* allmrules)) Cyc_Tcpat_match_compile)(
! _temp929); struct _tuple14* _temp931=({ struct _tuple14* _temp932=( struct
! _tuple14*) _cycalloc( sizeof( struct _tuple14)); _temp932->f1= loc; _temp932->f2=
! 1; _temp932;});(( void(*)( void* d, void(* not_exhaust)( struct _tuple14*),
  struct _tuple14* env1, void(* rhs_appears)( int, int), int env2)) Cyc_Tcpat_check_exhaust_overlap)(
! _temp930, Cyc_Tcpat_not_exhaust_warn, _temp931, Cyc_Tcpat_dummy_fn, 0); return(*
! _temp931).f2;} static struct _tuple13* Cyc_Tcpat_get_match2( struct Cyc_Absyn_Switch_clause*
  swc){ void* sp0= Cyc_Tcpat_compile_pat( swc->pattern); struct _tuple12* rhs=({
! struct _tuple12* _temp936=( struct _tuple12*) _cycalloc( sizeof( struct _tuple12));
! _temp936->f1= 0; _temp936->f2=( swc->pattern)->loc; _temp936;}); return({ struct
! _tuple13* _temp935=( struct _tuple13*) _cycalloc( sizeof( struct _tuple13));
! _temp935->f1= sp0; _temp935->f2= rhs; _temp935;});} static void Cyc_Tcpat_not_exhaust_err2(
  struct Cyc_Position_Segment* loc){;} void Cyc_Tcpat_check_catch_overlap( struct
  Cyc_Position_Segment* loc, struct Cyc_List_List* swcs){ struct Cyc_List_List*
! _temp937=(( struct Cyc_List_List*(*)( struct _tuple13*(* f)( struct Cyc_Absyn_Switch_clause*),
  struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Tcpat_get_match2, swcs); void*
! _temp938=(( void*(*)( struct Cyc_List_List* allmrules)) Cyc_Tcpat_match_compile)(
! _temp937);(( void(*)( void* d, void(* not_exhaust)( struct Cyc_Position_Segment*),
  struct Cyc_Position_Segment* env1, void(* rhs_appears)( int, struct _tuple12*),
! int env2)) Cyc_Tcpat_check_exhaust_overlap)( _temp938, Cyc_Tcpat_not_exhaust_err2,
! loc, Cyc_Tcpat_rule_occurs, 0); for( 0; _temp937 !=  0; _temp937=(( struct Cyc_List_List*)
! _check_null( _temp937))->tl){ struct _tuple13 _temp941; struct _tuple12*
! _temp942; struct _tuple12 _temp944; struct Cyc_Position_Segment* _temp945; int
! _temp947; struct _tuple13* _temp939=( struct _tuple13*)(( struct Cyc_List_List*)
! _check_null( _temp937))->hd; _temp941=* _temp939; _LL943: _temp942= _temp941.f2;
! _temp944=* _temp942; _LL948: _temp947= _temp944.f1; goto _LL946; _LL946:
! _temp945= _temp944.f2; goto _LL940; _LL940: if( ! _temp947){({ void* _temp949[ 0u]={};
! Cyc_Tcutil_terr( _temp945, _tag_arr("redundant pattern", sizeof( unsigned char),
! 18u), _tag_arr( _temp949, sizeof( void*), 0u));});}}}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tcstmt.c powerpc-apple-rhapsody/src/tcstmt.c
*** i686-unknown-linux/src/tcstmt.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/tcstmt.c	Wed Oct 10 15:39:32 2001
***************
*** 277,283 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 277,283 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 368,430 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 368,427 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tcutil.c powerpc-apple-rhapsody/src/tcutil.c
*** i686-unknown-linux/src/tcutil.c	Wed Oct 10 15:39:56 2001
--- powerpc-apple-rhapsody/src/tcutil.c	Wed Oct 10 15:39:32 2001
***************
*** 322,328 ****
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 322,328 ----
  struct _tuple1* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple1* tunion_name; struct _tuple1* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 413,475 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple1* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple1* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple2{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple2* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 413,472 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple1* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple1* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple2{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple2* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple1* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 1901,1937 ****
  _temp1255; struct _tuple1* _temp1257; void* _temp1259; struct Cyc_Absyn_Uniondecl**
  _temp1261; struct Cyc_List_List* _temp1263; struct _tuple1* _temp1265; void*
  _temp1267; struct Cyc_Absyn_TunionInfo _temp1269; void* _temp1271; struct Cyc_List_List*
! _temp1273; void* _temp1275; struct Cyc_Absyn_Tuniondecl** _temp1277; struct Cyc_Absyn_Tuniondecl*
! _temp1279; void* _temp1280; struct Cyc_Absyn_TunionInfo _temp1282; void*
! _temp1284; struct Cyc_List_List* _temp1286; void* _temp1288; struct Cyc_Absyn_Tuniondecl**
! _temp1290; struct Cyc_Absyn_Tuniondecl* _temp1292; void* _temp1293; struct Cyc_Absyn_TunionFieldInfo
! _temp1295; struct Cyc_List_List* _temp1297; void* _temp1299; struct Cyc_Absyn_Tunionfield*
! _temp1301; struct Cyc_Absyn_Tuniondecl* _temp1303; void* _temp1305; struct Cyc_Absyn_TunionFieldInfo
! _temp1307; struct Cyc_List_List* _temp1309; void* _temp1311; struct Cyc_Absyn_Tunionfield*
! _temp1313; struct Cyc_Absyn_Tuniondecl* _temp1315; void* _temp1317; struct Cyc_Absyn_PtrInfo
! _temp1319; struct Cyc_Absyn_Conref* _temp1321; struct Cyc_Absyn_Tqual _temp1323;
! struct Cyc_Absyn_Conref* _temp1325; void* _temp1327; void* _temp1329; void*
! _temp1331; struct Cyc_Absyn_PtrInfo _temp1333; struct Cyc_Absyn_Conref*
! _temp1335; struct Cyc_Absyn_Tqual _temp1337; struct Cyc_Absyn_Conref* _temp1339;
! void* _temp1341; void* _temp1343; void* _temp1345; void* _temp1347; void*
! _temp1349; void* _temp1351; void* _temp1353; void* _temp1355; void* _temp1357;
! void* _temp1359; void* _temp1361; void* _temp1363; void* _temp1365; struct Cyc_Absyn_Exp*
! _temp1367; struct Cyc_Absyn_Tqual _temp1369; void* _temp1371; void* _temp1373;
! struct Cyc_Absyn_Exp* _temp1375; struct Cyc_Absyn_Tqual _temp1377; void*
! _temp1379; void* _temp1381; struct Cyc_Absyn_FnInfo _temp1383; struct Cyc_List_List*
! _temp1385; struct Cyc_List_List* _temp1387; struct Cyc_Absyn_VarargInfo*
! _temp1389; int _temp1391; struct Cyc_List_List* _temp1393; void* _temp1395;
! struct Cyc_Core_Opt* _temp1397; struct Cyc_List_List* _temp1399; void* _temp1401;
! struct Cyc_Absyn_FnInfo _temp1403; struct Cyc_List_List* _temp1405; struct Cyc_List_List*
! _temp1407; struct Cyc_Absyn_VarargInfo* _temp1409; int _temp1411; struct Cyc_List_List*
! _temp1413; void* _temp1415; struct Cyc_Core_Opt* _temp1417; struct Cyc_List_List*
! _temp1419; void* _temp1421; struct Cyc_List_List* _temp1423; void* _temp1425;
! struct Cyc_List_List* _temp1427; void* _temp1429; struct Cyc_List_List*
! _temp1431; void* _temp1433; struct Cyc_List_List* _temp1435; void* _temp1437;
! struct Cyc_List_List* _temp1439; void* _temp1441; struct Cyc_List_List*
! _temp1443; void* _temp1445; void* _temp1447; void* _temp1449; void* _temp1451;
! void* _temp1453; void* _temp1455; void* _temp1457; void* _temp1459; void*
! _temp1461; void* _temp1463; void* _temp1465; void* _temp1467; _LL1161: _LL1214:
  _temp1213= _temp1159.f1; if(( unsigned int) _temp1213 >  4u?*(( int*) _temp1213)
  ==  Cyc_Absyn_Evar: 0){ goto _LL1162;} else{ goto _LL1163;} _LL1163: _LL1218:
  _temp1217= _temp1159.f1; if( _temp1217 == ( void*) Cyc_Absyn_VoidType){ goto
--- 1898,1934 ----
  _temp1255; struct _tuple1* _temp1257; void* _temp1259; struct Cyc_Absyn_Uniondecl**
  _temp1261; struct Cyc_List_List* _temp1263; struct _tuple1* _temp1265; void*
  _temp1267; struct Cyc_Absyn_TunionInfo _temp1269; void* _temp1271; struct Cyc_List_List*
! _temp1273; void* _temp1275; struct Cyc_Absyn_Tuniondecl* _temp1277; void*
! _temp1279; struct Cyc_Absyn_TunionInfo _temp1281; void* _temp1283; struct Cyc_List_List*
! _temp1285; void* _temp1287; struct Cyc_Absyn_Tuniondecl* _temp1289; void*
! _temp1291; struct Cyc_Absyn_TunionFieldInfo _temp1293; struct Cyc_List_List*
! _temp1295; void* _temp1297; struct Cyc_Absyn_Tunionfield* _temp1299; struct Cyc_Absyn_Tuniondecl*
! _temp1301; void* _temp1303; struct Cyc_Absyn_TunionFieldInfo _temp1305; struct
! Cyc_List_List* _temp1307; void* _temp1309; struct Cyc_Absyn_Tunionfield*
! _temp1311; struct Cyc_Absyn_Tuniondecl* _temp1313; void* _temp1315; struct Cyc_Absyn_PtrInfo
! _temp1317; struct Cyc_Absyn_Conref* _temp1319; struct Cyc_Absyn_Tqual _temp1321;
! struct Cyc_Absyn_Conref* _temp1323; void* _temp1325; void* _temp1327; void*
! _temp1329; struct Cyc_Absyn_PtrInfo _temp1331; struct Cyc_Absyn_Conref*
! _temp1333; struct Cyc_Absyn_Tqual _temp1335; struct Cyc_Absyn_Conref* _temp1337;
! void* _temp1339; void* _temp1341; void* _temp1343; void* _temp1345; void*
! _temp1347; void* _temp1349; void* _temp1351; void* _temp1353; void* _temp1355;
! void* _temp1357; void* _temp1359; void* _temp1361; void* _temp1363; struct Cyc_Absyn_Exp*
! _temp1365; struct Cyc_Absyn_Tqual _temp1367; void* _temp1369; void* _temp1371;
! struct Cyc_Absyn_Exp* _temp1373; struct Cyc_Absyn_Tqual _temp1375; void*
! _temp1377; void* _temp1379; struct Cyc_Absyn_FnInfo _temp1381; struct Cyc_List_List*
! _temp1383; struct Cyc_List_List* _temp1385; struct Cyc_Absyn_VarargInfo*
! _temp1387; int _temp1389; struct Cyc_List_List* _temp1391; void* _temp1393;
! struct Cyc_Core_Opt* _temp1395; struct Cyc_List_List* _temp1397; void* _temp1399;
! struct Cyc_Absyn_FnInfo _temp1401; struct Cyc_List_List* _temp1403; struct Cyc_List_List*
! _temp1405; struct Cyc_Absyn_VarargInfo* _temp1407; int _temp1409; struct Cyc_List_List*
! _temp1411; void* _temp1413; struct Cyc_Core_Opt* _temp1415; struct Cyc_List_List*
! _temp1417; void* _temp1419; struct Cyc_List_List* _temp1421; void* _temp1423;
! struct Cyc_List_List* _temp1425; void* _temp1427; struct Cyc_List_List*
! _temp1429; void* _temp1431; struct Cyc_List_List* _temp1433; void* _temp1435;
! struct Cyc_List_List* _temp1437; void* _temp1439; struct Cyc_List_List*
! _temp1441; void* _temp1443; void* _temp1445; void* _temp1447; void* _temp1449;
! void* _temp1451; void* _temp1453; void* _temp1455; void* _temp1457; void*
! _temp1459; void* _temp1461; void* _temp1463; void* _temp1465; _LL1161: _LL1214:
  _temp1213= _temp1159.f1; if(( unsigned int) _temp1213 >  4u?*(( int*) _temp1213)
  ==  Cyc_Absyn_Evar: 0){ goto _LL1162;} else{ goto _LL1163;} _LL1163: _LL1218:
  _temp1217= _temp1159.f1; if( _temp1217 == ( void*) Cyc_Absyn_VoidType){ goto
***************
*** 1968,2107 ****
  0){ _LL1258: _temp1257=(( struct Cyc_Absyn_UnionType_struct*) _temp1251)->f1;
  goto _LL1256; _LL1256: _temp1255=(( struct Cyc_Absyn_UnionType_struct*)
  _temp1251)->f2; goto _LL1254; _LL1254: _temp1253=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1251)->f3; goto _LL1172;} else{ goto _LL1173;} _LL1173: _LL1281: _temp1280=
! _temp1159.f1; if(( unsigned int) _temp1280 >  4u?*(( int*) _temp1280) ==  Cyc_Absyn_TunionType:
! 0){ _LL1283: _temp1282=(( struct Cyc_Absyn_TunionType_struct*) _temp1280)->f1;
! _LL1289: _temp1288=( void*) _temp1282.tunion_info; if(*(( int*) _temp1288) == 
! Cyc_Absyn_KnownTunion){ _LL1291: _temp1290=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1288)->f1; _temp1292=* _temp1290; goto _LL1287;} else{ goto _LL1175;}
! _LL1287: _temp1286= _temp1282.targs; goto _LL1285; _LL1285: _temp1284=( void*)
! _temp1282.rgn; goto _LL1268;} else{ goto _LL1175;} _LL1268: _temp1267= _temp1159.f2;
! if(( unsigned int) _temp1267 >  4u?*(( int*) _temp1267) ==  Cyc_Absyn_TunionType:
! 0){ _LL1270: _temp1269=(( struct Cyc_Absyn_TunionType_struct*) _temp1267)->f1;
  _LL1276: _temp1275=( void*) _temp1269.tunion_info; if(*(( int*) _temp1275) == 
  Cyc_Absyn_KnownTunion){ _LL1278: _temp1277=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1275)->f1; _temp1279=* _temp1277; goto _LL1274;} else{ goto _LL1175;}
! _LL1274: _temp1273= _temp1269.targs; goto _LL1272; _LL1272: _temp1271=( void*)
! _temp1269.rgn; goto _LL1174;} else{ goto _LL1175;} _LL1175: _LL1306: _temp1305=
! _temp1159.f1; if(( unsigned int) _temp1305 >  4u?*(( int*) _temp1305) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1308: _temp1307=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1305)->f1;
! _LL1312: _temp1311=( void*) _temp1307.field_info; if(*(( int*) _temp1311) == 
! Cyc_Absyn_KnownTunionfield){ _LL1316: _temp1315=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1311)->f1; goto _LL1314; _LL1314: _temp1313=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1311)->f2; goto _LL1310;} else{ goto _LL1177;} _LL1310: _temp1309=
! _temp1307.targs; goto _LL1294;} else{ goto _LL1177;} _LL1294: _temp1293=
! _temp1159.f2; if(( unsigned int) _temp1293 >  4u?*(( int*) _temp1293) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1296: _temp1295=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1293)->f1;
! _LL1300: _temp1299=( void*) _temp1295.field_info; if(*(( int*) _temp1299) == 
! Cyc_Absyn_KnownTunionfield){ _LL1304: _temp1303=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1299)->f1; goto _LL1302; _LL1302: _temp1301=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1299)->f2; goto _LL1298;} else{ goto _LL1177;} _LL1298: _temp1297=
! _temp1295.targs; goto _LL1176;} else{ goto _LL1177;} _LL1177: _LL1332: _temp1331=
! _temp1159.f1; if(( unsigned int) _temp1331 >  4u?*(( int*) _temp1331) ==  Cyc_Absyn_PointerType:
! 0){ _LL1334: _temp1333=(( struct Cyc_Absyn_PointerType_struct*) _temp1331)->f1;
! _LL1344: _temp1343=( void*) _temp1333.elt_typ; goto _LL1342; _LL1342: _temp1341=(
! void*) _temp1333.rgn_typ; goto _LL1340; _LL1340: _temp1339= _temp1333.nullable;
! goto _LL1338; _LL1338: _temp1337= _temp1333.tq; goto _LL1336; _LL1336: _temp1335=
! _temp1333.bounds; goto _LL1318;} else{ goto _LL1179;} _LL1318: _temp1317=
! _temp1159.f2; if(( unsigned int) _temp1317 >  4u?*(( int*) _temp1317) ==  Cyc_Absyn_PointerType:
! 0){ _LL1320: _temp1319=(( struct Cyc_Absyn_PointerType_struct*) _temp1317)->f1;
! _LL1330: _temp1329=( void*) _temp1319.elt_typ; goto _LL1328; _LL1328: _temp1327=(
! void*) _temp1319.rgn_typ; goto _LL1326; _LL1326: _temp1325= _temp1319.nullable;
! goto _LL1324; _LL1324: _temp1323= _temp1319.tq; goto _LL1322; _LL1322: _temp1321=
! _temp1319.bounds; goto _LL1178;} else{ goto _LL1179;} _LL1179: _LL1352:
! _temp1351= _temp1159.f1; if(( unsigned int) _temp1351 >  4u?*(( int*) _temp1351)
! ==  Cyc_Absyn_IntType: 0){ _LL1356: _temp1355=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1351)->f1; goto _LL1354; _LL1354: _temp1353=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1351)->f2; goto _LL1346;} else{ goto _LL1181;} _LL1346: _temp1345=
! _temp1159.f2; if(( unsigned int) _temp1345 >  4u?*(( int*) _temp1345) ==  Cyc_Absyn_IntType:
! 0){ _LL1350: _temp1349=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1345)->f1;
! goto _LL1348; _LL1348: _temp1347=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1345)->f2; goto _LL1180;} else{ goto _LL1181;} _LL1181: _LL1360: _temp1359=
! _temp1159.f1; if( _temp1359 == ( void*) Cyc_Absyn_FloatType){ goto _LL1358;}
! else{ goto _LL1183;} _LL1358: _temp1357= _temp1159.f2; if( _temp1357 == ( void*)
! Cyc_Absyn_FloatType){ goto _LL1182;} else{ goto _LL1183;} _LL1183: _LL1364:
! _temp1363= _temp1159.f1; if( _temp1363 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL1362;} else{ goto _LL1185;} _LL1362: _temp1361= _temp1159.f2; if( _temp1361
  == ( void*) Cyc_Absyn_DoubleType){ goto _LL1184;} else{ goto _LL1185;} _LL1185:
! _LL1374: _temp1373= _temp1159.f1; if(( unsigned int) _temp1373 >  4u?*(( int*)
! _temp1373) ==  Cyc_Absyn_ArrayType: 0){ _LL1380: _temp1379=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1373)->f1; goto _LL1378; _LL1378: _temp1377=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1373)->f2; goto _LL1376; _LL1376: _temp1375=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1373)->f3; goto _LL1366;} else{ goto _LL1187;} _LL1366: _temp1365=
! _temp1159.f2; if(( unsigned int) _temp1365 >  4u?*(( int*) _temp1365) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1372: _temp1371=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1365)->f1;
! goto _LL1370; _LL1370: _temp1369=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1365)->f2; goto _LL1368; _LL1368: _temp1367=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1365)->f3; goto _LL1186;} else{ goto _LL1187;} _LL1187: _LL1402: _temp1401=
! _temp1159.f1; if(( unsigned int) _temp1401 >  4u?*(( int*) _temp1401) ==  Cyc_Absyn_FnType:
! 0){ _LL1404: _temp1403=(( struct Cyc_Absyn_FnType_struct*) _temp1401)->f1;
! _LL1420: _temp1419= _temp1403.tvars; goto _LL1418; _LL1418: _temp1417= _temp1403.effect;
! goto _LL1416; _LL1416: _temp1415=( void*) _temp1403.ret_typ; goto _LL1414;
! _LL1414: _temp1413= _temp1403.args; goto _LL1412; _LL1412: _temp1411= _temp1403.c_varargs;
! goto _LL1410; _LL1410: _temp1409= _temp1403.cyc_varargs; goto _LL1408; _LL1408:
! _temp1407= _temp1403.rgn_po; goto _LL1406; _LL1406: _temp1405= _temp1403.attributes;
! goto _LL1382;} else{ goto _LL1189;} _LL1382: _temp1381= _temp1159.f2; if((
! unsigned int) _temp1381 >  4u?*(( int*) _temp1381) ==  Cyc_Absyn_FnType: 0){
! _LL1384: _temp1383=(( struct Cyc_Absyn_FnType_struct*) _temp1381)->f1; _LL1400:
! _temp1399= _temp1383.tvars; goto _LL1398; _LL1398: _temp1397= _temp1383.effect;
! goto _LL1396; _LL1396: _temp1395=( void*) _temp1383.ret_typ; goto _LL1394;
! _LL1394: _temp1393= _temp1383.args; goto _LL1392; _LL1392: _temp1391= _temp1383.c_varargs;
! goto _LL1390; _LL1390: _temp1389= _temp1383.cyc_varargs; goto _LL1388; _LL1388:
! _temp1387= _temp1383.rgn_po; goto _LL1386; _LL1386: _temp1385= _temp1383.attributes;
! goto _LL1188;} else{ goto _LL1189;} _LL1189: _LL1426: _temp1425= _temp1159.f1;
! if(( unsigned int) _temp1425 >  4u?*(( int*) _temp1425) ==  Cyc_Absyn_TupleType:
! 0){ _LL1428: _temp1427=(( struct Cyc_Absyn_TupleType_struct*) _temp1425)->f1;
! goto _LL1422;} else{ goto _LL1191;} _LL1422: _temp1421= _temp1159.f2; if((
! unsigned int) _temp1421 >  4u?*(( int*) _temp1421) ==  Cyc_Absyn_TupleType: 0){
! _LL1424: _temp1423=(( struct Cyc_Absyn_TupleType_struct*) _temp1421)->f1; goto
! _LL1190;} else{ goto _LL1191;} _LL1191: _LL1434: _temp1433= _temp1159.f1; if((
! unsigned int) _temp1433 >  4u?*(( int*) _temp1433) ==  Cyc_Absyn_AnonStructType:
! 0){ _LL1436: _temp1435=(( struct Cyc_Absyn_AnonStructType_struct*) _temp1433)->f1;
! goto _LL1430;} else{ goto _LL1193;} _LL1430: _temp1429= _temp1159.f2; if((
! unsigned int) _temp1429 >  4u?*(( int*) _temp1429) ==  Cyc_Absyn_AnonStructType:
! 0){ _LL1432: _temp1431=(( struct Cyc_Absyn_AnonStructType_struct*) _temp1429)->f1;
! goto _LL1192;} else{ goto _LL1193;} _LL1193: _LL1442: _temp1441= _temp1159.f1;
! if(( unsigned int) _temp1441 >  4u?*(( int*) _temp1441) ==  Cyc_Absyn_AnonUnionType:
! 0){ _LL1444: _temp1443=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp1441)->f1;
! goto _LL1438;} else{ goto _LL1195;} _LL1438: _temp1437= _temp1159.f2; if((
! unsigned int) _temp1437 >  4u?*(( int*) _temp1437) ==  Cyc_Absyn_AnonUnionType:
! 0){ _LL1440: _temp1439=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp1437)->f1;
! goto _LL1194;} else{ goto _LL1195;} _LL1195: _LL1448: _temp1447= _temp1159.f1;
! if( _temp1447 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL1446;} else{ goto _LL1197;}
! _LL1446: _temp1445= _temp1159.f2; if( _temp1445 == ( void*) Cyc_Absyn_HeapRgn){
! goto _LL1196;} else{ goto _LL1197;} _LL1197: _LL1454: _temp1453= _temp1159.f1;
! if(( unsigned int) _temp1453 >  4u?*(( int*) _temp1453) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL1456: _temp1455=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1453)->f1; goto _LL1450;} else{ goto _LL1199;} _LL1450: _temp1449=
! _temp1159.f2; if(( unsigned int) _temp1449 >  4u?*(( int*) _temp1449) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL1452: _temp1451=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1449)->f1; goto _LL1198;} else{ goto _LL1199;} _LL1199: _LL1458: _temp1457=
! _temp1159.f1; if(( unsigned int) _temp1457 >  4u?*(( int*) _temp1457) ==  Cyc_Absyn_JoinEff:
! 0){ goto _LL1200;} else{ goto _LL1201;} _LL1201: _LL1460: _temp1459= _temp1159.f2;
! if(( unsigned int) _temp1459 >  4u?*(( int*) _temp1459) ==  Cyc_Absyn_JoinEff: 0){
! goto _LL1202;} else{ goto _LL1203;} _LL1203: _LL1462: _temp1461= _temp1159.f1;
! if(( unsigned int) _temp1461 >  4u?*(( int*) _temp1461) ==  Cyc_Absyn_AccessEff:
! 0){ goto _LL1204;} else{ goto _LL1205;} _LL1205: _LL1464: _temp1463= _temp1159.f1;
  if(( unsigned int) _temp1463 >  4u?*(( int*) _temp1463) ==  Cyc_Absyn_RgnsEff: 0){
! goto _LL1206;} else{ goto _LL1207;} _LL1207: _LL1466: _temp1465= _temp1159.f2;
! if(( unsigned int) _temp1465 >  4u?*(( int*) _temp1465) ==  Cyc_Absyn_RgnsEff: 0){
! goto _LL1208;} else{ goto _LL1209;} _LL1209: _LL1468: _temp1467= _temp1159.f2;
! if(( unsigned int) _temp1467 >  4u?*(( int*) _temp1467) ==  Cyc_Absyn_AccessEff:
  0){ goto _LL1210;} else{ goto _LL1211;} _LL1211: goto _LL1212; _LL1162: Cyc_Tcutil_unify_it(
! t2, t1); return; _LL1164: return; _LL1166: { struct _tagged_arr* _temp1469=
! _temp1225->name; struct _tagged_arr* _temp1470= _temp1221->name; int _temp1471=*((
! int*) _check_null( _temp1225->identity)); int _temp1472=*(( int*) _check_null(
! _temp1221->identity)); void* _temp1473= Cyc_Absyn_conref_val( _temp1225->kind);
! void* _temp1474= Cyc_Absyn_conref_val( _temp1221->kind); if( _temp1472 == 
! _temp1471? Cyc_Std_zstrptrcmp( _temp1469, _temp1470) ==  0: 0){ if( _temp1473 != 
! _temp1474){({ struct Cyc_Std_String_pa_struct _temp1478; _temp1478.tag= Cyc_Std_String_pa;
! _temp1478.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( _temp1474);{ struct
! Cyc_Std_String_pa_struct _temp1477; _temp1477.tag= Cyc_Std_String_pa; _temp1477.f1=(
! struct _tagged_arr) Cyc_Absynpp_kind2string( _temp1473);{ struct Cyc_Std_String_pa_struct
! _temp1476; _temp1476.tag= Cyc_Std_String_pa; _temp1476.f1=( struct _tagged_arr)*
! _temp1469;{ void* _temp1475[ 3u]={& _temp1476,& _temp1477,& _temp1478};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("same type variable %s has kinds %s and %s",
! sizeof( unsigned char), 42u), _tag_arr( _temp1475, sizeof( void*), 3u));}}}});}
  return;} goto _LL1160;} _LL1168: if((( _temp1233 !=  0? _temp1241 !=  0: 0)? Cyc_Absyn_qvar_cmp((
  struct _tuple1*) _check_null( _temp1233),( struct _tuple1*) _check_null(
  _temp1241)) ==  0: 0)? 1:( _temp1233 ==  0? _temp1241 ==  0: 0)){ Cyc_Tcutil_unify_list(
--- 1965,2104 ----
  0){ _LL1258: _temp1257=(( struct Cyc_Absyn_UnionType_struct*) _temp1251)->f1;
  goto _LL1256; _LL1256: _temp1255=(( struct Cyc_Absyn_UnionType_struct*)
  _temp1251)->f2; goto _LL1254; _LL1254: _temp1253=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1251)->f3; goto _LL1172;} else{ goto _LL1173;} _LL1173: _LL1280: _temp1279=
! _temp1159.f1; if(( unsigned int) _temp1279 >  4u?*(( int*) _temp1279) ==  Cyc_Absyn_TunionType:
! 0){ _LL1282: _temp1281=(( struct Cyc_Absyn_TunionType_struct*) _temp1279)->f1;
! _LL1288: _temp1287=( void*) _temp1281.tunion_info; if(*(( int*) _temp1287) == 
! Cyc_Absyn_KnownTunion){ _LL1290: _temp1289=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1287)->f1; goto _LL1286;} else{ goto _LL1175;} _LL1286: _temp1285=
! _temp1281.targs; goto _LL1284; _LL1284: _temp1283=( void*) _temp1281.rgn; goto
! _LL1268;} else{ goto _LL1175;} _LL1268: _temp1267= _temp1159.f2; if((
! unsigned int) _temp1267 >  4u?*(( int*) _temp1267) ==  Cyc_Absyn_TunionType: 0){
! _LL1270: _temp1269=(( struct Cyc_Absyn_TunionType_struct*) _temp1267)->f1;
  _LL1276: _temp1275=( void*) _temp1269.tunion_info; if(*(( int*) _temp1275) == 
  Cyc_Absyn_KnownTunion){ _LL1278: _temp1277=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1275)->f1; goto _LL1274;} else{ goto _LL1175;} _LL1274: _temp1273=
! _temp1269.targs; goto _LL1272; _LL1272: _temp1271=( void*) _temp1269.rgn; goto
! _LL1174;} else{ goto _LL1175;} _LL1175: _LL1304: _temp1303= _temp1159.f1; if((
! unsigned int) _temp1303 >  4u?*(( int*) _temp1303) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1306: _temp1305=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1303)->f1;
! _LL1310: _temp1309=( void*) _temp1305.field_info; if(*(( int*) _temp1309) == 
! Cyc_Absyn_KnownTunionfield){ _LL1314: _temp1313=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1309)->f1; goto _LL1312; _LL1312: _temp1311=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1309)->f2; goto _LL1308;} else{ goto _LL1177;} _LL1308: _temp1307=
! _temp1305.targs; goto _LL1292;} else{ goto _LL1177;} _LL1292: _temp1291=
! _temp1159.f2; if(( unsigned int) _temp1291 >  4u?*(( int*) _temp1291) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1294: _temp1293=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1291)->f1;
! _LL1298: _temp1297=( void*) _temp1293.field_info; if(*(( int*) _temp1297) == 
! Cyc_Absyn_KnownTunionfield){ _LL1302: _temp1301=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1297)->f1; goto _LL1300; _LL1300: _temp1299=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1297)->f2; goto _LL1296;} else{ goto _LL1177;} _LL1296: _temp1295=
! _temp1293.targs; goto _LL1176;} else{ goto _LL1177;} _LL1177: _LL1330: _temp1329=
! _temp1159.f1; if(( unsigned int) _temp1329 >  4u?*(( int*) _temp1329) ==  Cyc_Absyn_PointerType:
! 0){ _LL1332: _temp1331=(( struct Cyc_Absyn_PointerType_struct*) _temp1329)->f1;
! _LL1342: _temp1341=( void*) _temp1331.elt_typ; goto _LL1340; _LL1340: _temp1339=(
! void*) _temp1331.rgn_typ; goto _LL1338; _LL1338: _temp1337= _temp1331.nullable;
! goto _LL1336; _LL1336: _temp1335= _temp1331.tq; goto _LL1334; _LL1334: _temp1333=
! _temp1331.bounds; goto _LL1316;} else{ goto _LL1179;} _LL1316: _temp1315=
! _temp1159.f2; if(( unsigned int) _temp1315 >  4u?*(( int*) _temp1315) ==  Cyc_Absyn_PointerType:
! 0){ _LL1318: _temp1317=(( struct Cyc_Absyn_PointerType_struct*) _temp1315)->f1;
! _LL1328: _temp1327=( void*) _temp1317.elt_typ; goto _LL1326; _LL1326: _temp1325=(
! void*) _temp1317.rgn_typ; goto _LL1324; _LL1324: _temp1323= _temp1317.nullable;
! goto _LL1322; _LL1322: _temp1321= _temp1317.tq; goto _LL1320; _LL1320: _temp1319=
! _temp1317.bounds; goto _LL1178;} else{ goto _LL1179;} _LL1179: _LL1350:
! _temp1349= _temp1159.f1; if(( unsigned int) _temp1349 >  4u?*(( int*) _temp1349)
! ==  Cyc_Absyn_IntType: 0){ _LL1354: _temp1353=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1349)->f1; goto _LL1352; _LL1352: _temp1351=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1349)->f2; goto _LL1344;} else{ goto _LL1181;} _LL1344: _temp1343=
! _temp1159.f2; if(( unsigned int) _temp1343 >  4u?*(( int*) _temp1343) ==  Cyc_Absyn_IntType:
! 0){ _LL1348: _temp1347=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1343)->f1;
! goto _LL1346; _LL1346: _temp1345=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1343)->f2; goto _LL1180;} else{ goto _LL1181;} _LL1181: _LL1358: _temp1357=
! _temp1159.f1; if( _temp1357 == ( void*) Cyc_Absyn_FloatType){ goto _LL1356;}
! else{ goto _LL1183;} _LL1356: _temp1355= _temp1159.f2; if( _temp1355 == ( void*)
! Cyc_Absyn_FloatType){ goto _LL1182;} else{ goto _LL1183;} _LL1183: _LL1362:
! _temp1361= _temp1159.f1; if( _temp1361 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL1360;} else{ goto _LL1185;} _LL1360: _temp1359= _temp1159.f2; if( _temp1359
  == ( void*) Cyc_Absyn_DoubleType){ goto _LL1184;} else{ goto _LL1185;} _LL1185:
! _LL1372: _temp1371= _temp1159.f1; if(( unsigned int) _temp1371 >  4u?*(( int*)
! _temp1371) ==  Cyc_Absyn_ArrayType: 0){ _LL1378: _temp1377=( void*)(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1371)->f1; goto _LL1376; _LL1376: _temp1375=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1371)->f2; goto _LL1374; _LL1374: _temp1373=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1371)->f3; goto _LL1364;} else{ goto _LL1187;} _LL1364: _temp1363=
! _temp1159.f2; if(( unsigned int) _temp1363 >  4u?*(( int*) _temp1363) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1370: _temp1369=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1363)->f1;
! goto _LL1368; _LL1368: _temp1367=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1363)->f2; goto _LL1366; _LL1366: _temp1365=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1363)->f3; goto _LL1186;} else{ goto _LL1187;} _LL1187: _LL1400: _temp1399=
! _temp1159.f1; if(( unsigned int) _temp1399 >  4u?*(( int*) _temp1399) ==  Cyc_Absyn_FnType:
! 0){ _LL1402: _temp1401=(( struct Cyc_Absyn_FnType_struct*) _temp1399)->f1;
! _LL1418: _temp1417= _temp1401.tvars; goto _LL1416; _LL1416: _temp1415= _temp1401.effect;
! goto _LL1414; _LL1414: _temp1413=( void*) _temp1401.ret_typ; goto _LL1412;
! _LL1412: _temp1411= _temp1401.args; goto _LL1410; _LL1410: _temp1409= _temp1401.c_varargs;
! goto _LL1408; _LL1408: _temp1407= _temp1401.cyc_varargs; goto _LL1406; _LL1406:
! _temp1405= _temp1401.rgn_po; goto _LL1404; _LL1404: _temp1403= _temp1401.attributes;
! goto _LL1380;} else{ goto _LL1189;} _LL1380: _temp1379= _temp1159.f2; if((
! unsigned int) _temp1379 >  4u?*(( int*) _temp1379) ==  Cyc_Absyn_FnType: 0){
! _LL1382: _temp1381=(( struct Cyc_Absyn_FnType_struct*) _temp1379)->f1; _LL1398:
! _temp1397= _temp1381.tvars; goto _LL1396; _LL1396: _temp1395= _temp1381.effect;
! goto _LL1394; _LL1394: _temp1393=( void*) _temp1381.ret_typ; goto _LL1392;
! _LL1392: _temp1391= _temp1381.args; goto _LL1390; _LL1390: _temp1389= _temp1381.c_varargs;
! goto _LL1388; _LL1388: _temp1387= _temp1381.cyc_varargs; goto _LL1386; _LL1386:
! _temp1385= _temp1381.rgn_po; goto _LL1384; _LL1384: _temp1383= _temp1381.attributes;
! goto _LL1188;} else{ goto _LL1189;} _LL1189: _LL1424: _temp1423= _temp1159.f1;
! if(( unsigned int) _temp1423 >  4u?*(( int*) _temp1423) ==  Cyc_Absyn_TupleType:
! 0){ _LL1426: _temp1425=(( struct Cyc_Absyn_TupleType_struct*) _temp1423)->f1;
! goto _LL1420;} else{ goto _LL1191;} _LL1420: _temp1419= _temp1159.f2; if((
! unsigned int) _temp1419 >  4u?*(( int*) _temp1419) ==  Cyc_Absyn_TupleType: 0){
! _LL1422: _temp1421=(( struct Cyc_Absyn_TupleType_struct*) _temp1419)->f1; goto
! _LL1190;} else{ goto _LL1191;} _LL1191: _LL1432: _temp1431= _temp1159.f1; if((
! unsigned int) _temp1431 >  4u?*(( int*) _temp1431) ==  Cyc_Absyn_AnonStructType:
! 0){ _LL1434: _temp1433=(( struct Cyc_Absyn_AnonStructType_struct*) _temp1431)->f1;
! goto _LL1428;} else{ goto _LL1193;} _LL1428: _temp1427= _temp1159.f2; if((
! unsigned int) _temp1427 >  4u?*(( int*) _temp1427) ==  Cyc_Absyn_AnonStructType:
! 0){ _LL1430: _temp1429=(( struct Cyc_Absyn_AnonStructType_struct*) _temp1427)->f1;
! goto _LL1192;} else{ goto _LL1193;} _LL1193: _LL1440: _temp1439= _temp1159.f1;
! if(( unsigned int) _temp1439 >  4u?*(( int*) _temp1439) ==  Cyc_Absyn_AnonUnionType:
! 0){ _LL1442: _temp1441=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp1439)->f1;
! goto _LL1436;} else{ goto _LL1195;} _LL1436: _temp1435= _temp1159.f2; if((
! unsigned int) _temp1435 >  4u?*(( int*) _temp1435) ==  Cyc_Absyn_AnonUnionType:
! 0){ _LL1438: _temp1437=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp1435)->f1;
! goto _LL1194;} else{ goto _LL1195;} _LL1195: _LL1446: _temp1445= _temp1159.f1;
! if( _temp1445 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL1444;} else{ goto _LL1197;}
! _LL1444: _temp1443= _temp1159.f2; if( _temp1443 == ( void*) Cyc_Absyn_HeapRgn){
! goto _LL1196;} else{ goto _LL1197;} _LL1197: _LL1452: _temp1451= _temp1159.f1;
! if(( unsigned int) _temp1451 >  4u?*(( int*) _temp1451) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL1454: _temp1453=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1451)->f1; goto _LL1448;} else{ goto _LL1199;} _LL1448: _temp1447=
! _temp1159.f2; if(( unsigned int) _temp1447 >  4u?*(( int*) _temp1447) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL1450: _temp1449=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp1447)->f1; goto _LL1198;} else{ goto _LL1199;} _LL1199: _LL1456: _temp1455=
! _temp1159.f1; if(( unsigned int) _temp1455 >  4u?*(( int*) _temp1455) ==  Cyc_Absyn_JoinEff:
! 0){ goto _LL1200;} else{ goto _LL1201;} _LL1201: _LL1458: _temp1457= _temp1159.f2;
! if(( unsigned int) _temp1457 >  4u?*(( int*) _temp1457) ==  Cyc_Absyn_JoinEff: 0){
! goto _LL1202;} else{ goto _LL1203;} _LL1203: _LL1460: _temp1459= _temp1159.f1;
! if(( unsigned int) _temp1459 >  4u?*(( int*) _temp1459) ==  Cyc_Absyn_AccessEff:
! 0){ goto _LL1204;} else{ goto _LL1205;} _LL1205: _LL1462: _temp1461= _temp1159.f1;
! if(( unsigned int) _temp1461 >  4u?*(( int*) _temp1461) ==  Cyc_Absyn_RgnsEff: 0){
! goto _LL1206;} else{ goto _LL1207;} _LL1207: _LL1464: _temp1463= _temp1159.f2;
  if(( unsigned int) _temp1463 >  4u?*(( int*) _temp1463) ==  Cyc_Absyn_RgnsEff: 0){
! goto _LL1208;} else{ goto _LL1209;} _LL1209: _LL1466: _temp1465= _temp1159.f2;
! if(( unsigned int) _temp1465 >  4u?*(( int*) _temp1465) ==  Cyc_Absyn_AccessEff:
  0){ goto _LL1210;} else{ goto _LL1211;} _LL1211: goto _LL1212; _LL1162: Cyc_Tcutil_unify_it(
! t2, t1); return; _LL1164: return; _LL1166: { struct _tagged_arr* _temp1467=
! _temp1225->name; struct _tagged_arr* _temp1468= _temp1221->name; int _temp1469=*((
! int*) _check_null( _temp1225->identity)); int _temp1470=*(( int*) _check_null(
! _temp1221->identity)); void* _temp1471= Cyc_Absyn_conref_val( _temp1225->kind);
! void* _temp1472= Cyc_Absyn_conref_val( _temp1221->kind); if( _temp1470 == 
! _temp1469? Cyc_Std_zstrptrcmp( _temp1467, _temp1468) ==  0: 0){ if( _temp1471 != 
! _temp1472){({ struct Cyc_Std_String_pa_struct _temp1476; _temp1476.tag= Cyc_Std_String_pa;
! _temp1476.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( _temp1472);{ struct
! Cyc_Std_String_pa_struct _temp1475; _temp1475.tag= Cyc_Std_String_pa; _temp1475.f1=(
! struct _tagged_arr) Cyc_Absynpp_kind2string( _temp1471);{ struct Cyc_Std_String_pa_struct
! _temp1474; _temp1474.tag= Cyc_Std_String_pa; _temp1474.f1=( struct _tagged_arr)*
! _temp1467;{ void* _temp1473[ 3u]={& _temp1474,& _temp1475,& _temp1476};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("same type variable %s has kinds %s and %s",
! sizeof( unsigned char), 42u), _tag_arr( _temp1473, sizeof( void*), 3u));}}}});}
  return;} goto _LL1160;} _LL1168: if((( _temp1233 !=  0? _temp1241 !=  0: 0)? Cyc_Absyn_qvar_cmp((
  struct _tuple1*) _check_null( _temp1233),( struct _tuple1*) _check_null(
  _temp1241)) ==  0: 0)? 1:( _temp1233 ==  0? _temp1241 ==  0: 0)){ Cyc_Tcutil_unify_list(
***************
*** 2110,2572 ****
  0? _temp1265 !=  0: 0)? Cyc_Absyn_qvar_cmp(( struct _tuple1*) _check_null(
  _temp1257),( struct _tuple1*) _check_null( _temp1265)) ==  0: 0)? 1:( _temp1257
  ==  0? _temp1265 ==  0: 0)){ Cyc_Tcutil_unify_list( _temp1255, _temp1263);
! return;} goto _LL1160; _LL1174: if( _temp1292 ==  _temp1279? 1: Cyc_Absyn_qvar_cmp(
! _temp1292->name, _temp1279->name) ==  0){ Cyc_Tcutil_unify_it( _temp1271,
! _temp1284); Cyc_Tcutil_unify_list( _temp1273, _temp1286); return;} goto _LL1160;
! _LL1176: if(( _temp1315 ==  _temp1303? 1: Cyc_Absyn_qvar_cmp( _temp1315->name,
! _temp1303->name) ==  0)? _temp1313 ==  _temp1301? 1: Cyc_Absyn_qvar_cmp(
! _temp1313->name, _temp1301->name) ==  0: 0){ Cyc_Tcutil_unify_list( _temp1297,
! _temp1309); return;} goto _LL1160; _LL1178: Cyc_Tcutil_unify_it( _temp1329,
! _temp1343); Cyc_Tcutil_unify_it( _temp1341, _temp1327); Cyc_Tcutil_unify_tqual(
! _temp1323, _temp1337); Cyc_Tcutil_unify_it_conrefs( Cyc_Tcutil_boundscmp,
! _temp1321, _temp1335);{ void* _temp1479=( void*)( Cyc_Absyn_compress_conref(
! _temp1321))->v; void* _temp1485; _LL1481: if(( unsigned int) _temp1479 >  1u?*((
! int*) _temp1479) ==  Cyc_Absyn_Eq_constr: 0){ _LL1486: _temp1485=( void*)((
! struct Cyc_Absyn_Eq_constr_struct*) _temp1479)->f1; if( _temp1485 == ( void*)
! Cyc_Absyn_Unknown_b){ goto _LL1482;} else{ goto _LL1483;}} else{ goto _LL1483;}
! _LL1483: goto _LL1484; _LL1482: return; _LL1484: goto _LL1480; _LL1480:;}(( void(*)(
  int(* cmp)( int, int), struct Cyc_Absyn_Conref* x, struct Cyc_Absyn_Conref* y))
! Cyc_Tcutil_unify_it_conrefs)( Cyc_Core_intcmp, _temp1325, _temp1339); return;
! _LL1180: if( _temp1349 ==  _temp1355? _temp1347 ==  _temp1353: 0){ return;} goto
  _LL1160; _LL1182: return; _LL1184: return; _LL1186: Cyc_Tcutil_unify_it(
! _temp1371, _temp1379); Cyc_Tcutil_unify_tqual( _temp1369, _temp1377); if(
! _temp1375 ==  _temp1367){ return;} if( _temp1375 ==  0? 1: _temp1367 ==  0){
  goto _LL1160;} if( Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp1375)) ==  Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp1367))){ return;} goto _LL1160; _LL1188: { int done= 0;{
! struct _RegionHandle _temp1487= _new_region(); struct _RegionHandle* rgn=&
! _temp1487; _push_region( rgn);{ struct Cyc_List_List* inst= 0; while( _temp1399
! !=  0) { if( _temp1419 ==  0){ break;} inst=({ struct Cyc_List_List* _temp1488=(
  struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp1488->hd=( void*)({ struct _tuple5* _temp1489=( struct _tuple5*)
! _region_malloc( rgn, sizeof( struct _tuple5)); _temp1489->f1=( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( _temp1419))->hd; _temp1489->f2=( void*)({
! struct Cyc_Absyn_VarType_struct* _temp1490=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp1490[ 0]=({ struct
! Cyc_Absyn_VarType_struct _temp1491; _temp1491.tag= Cyc_Absyn_VarType; _temp1491.f1=(
! struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( _temp1399))->hd;
! _temp1491;}); _temp1490;}); _temp1489;}); _temp1488->tl= inst; _temp1488;});
! _temp1399=(( struct Cyc_List_List*) _check_null( _temp1399))->tl; _temp1419=((
! struct Cyc_List_List*) _check_null( _temp1419))->tl;} if( _temp1419 !=  0){
  _npop_handler( 0u); goto _LL1160;} if( inst !=  0){ Cyc_Tcutil_unify_it(( void*)({
! struct Cyc_Absyn_FnType_struct* _temp1492=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1492[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1493; _temp1493.tag= Cyc_Absyn_FnType; _temp1493.f1=({ struct Cyc_Absyn_FnInfo
! _temp1494; _temp1494.tvars= 0; _temp1494.effect= _temp1397; _temp1494.ret_typ=(
! void*) _temp1395; _temp1494.args= _temp1393; _temp1494.c_varargs= _temp1391;
! _temp1494.cyc_varargs= _temp1389; _temp1494.rgn_po= _temp1387; _temp1494.attributes=
! _temp1385; _temp1494;}); _temp1493;}); _temp1492;}), Cyc_Tcutil_rsubstitute( rgn,
! inst,( void*)({ struct Cyc_Absyn_FnType_struct* _temp1495=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1495[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1496; _temp1496.tag= Cyc_Absyn_FnType; _temp1496.f1=({ struct Cyc_Absyn_FnInfo
! _temp1497; _temp1497.tvars= 0; _temp1497.effect= _temp1417; _temp1497.ret_typ=(
! void*) _temp1415; _temp1497.args= _temp1413; _temp1497.c_varargs= _temp1411;
! _temp1497.cyc_varargs= _temp1409; _temp1497.rgn_po= _temp1407; _temp1497.attributes=
! _temp1405; _temp1497;}); _temp1496;}); _temp1495;}))); done= 1;}}; _pop_region(
! rgn);} if( done){ return;} Cyc_Tcutil_unify_it( _temp1395, _temp1415); for( 0;
! _temp1393 !=  0? _temp1413 !=  0: 0;( _temp1393=(( struct Cyc_List_List*)
! _check_null( _temp1393))->tl, _temp1413=(( struct Cyc_List_List*) _check_null(
! _temp1413))->tl)){ Cyc_Tcutil_unify_tqual((*(( struct _tuple2*)(( struct Cyc_List_List*)
! _check_null( _temp1393))->hd)).f2,(*(( struct _tuple2*)(( struct Cyc_List_List*)
! _check_null( _temp1413))->hd)).f2); Cyc_Tcutil_unify_it((*(( struct _tuple2*)((
! struct Cyc_List_List*) _check_null( _temp1393))->hd)).f3,(*(( struct _tuple2*)((
! struct Cyc_List_List*) _check_null( _temp1413))->hd)).f3);} if( _temp1393 !=  0?
! 1: _temp1413 !=  0){ goto _LL1160;} if( _temp1391 !=  _temp1411){ goto _LL1160;}{
! int bad_cyc_vararg= 0;{ struct _tuple11 _temp1499=({ struct _tuple11 _temp1498;
! _temp1498.f1= _temp1389; _temp1498.f2= _temp1409; _temp1498;}); struct Cyc_Absyn_VarargInfo*
! _temp1509; struct Cyc_Absyn_VarargInfo* _temp1511; struct Cyc_Absyn_VarargInfo*
! _temp1513; struct Cyc_Absyn_VarargInfo* _temp1515; struct Cyc_Absyn_VarargInfo*
! _temp1517; struct Cyc_Absyn_VarargInfo _temp1519; int _temp1520; void* _temp1522;
! struct Cyc_Absyn_Tqual _temp1524; struct Cyc_Core_Opt* _temp1526; struct Cyc_Absyn_VarargInfo*
! _temp1528; struct Cyc_Absyn_VarargInfo _temp1530; int _temp1531; void* _temp1533;
! struct Cyc_Absyn_Tqual _temp1535; struct Cyc_Core_Opt* _temp1537; _LL1501:
! _LL1512: _temp1511= _temp1499.f1; if( _temp1511 ==  0){ goto _LL1510;} else{
! goto _LL1503;} _LL1510: _temp1509= _temp1499.f2; if( _temp1509 ==  0){ goto
! _LL1502;} else{ goto _LL1503;} _LL1503: _LL1514: _temp1513= _temp1499.f1; if(
! _temp1513 ==  0){ goto _LL1504;} else{ goto _LL1505;} _LL1505: _LL1516:
! _temp1515= _temp1499.f2; if( _temp1515 ==  0){ goto _LL1506;} else{ goto _LL1507;}
! _LL1507: _LL1529: _temp1528= _temp1499.f1; if( _temp1528 ==  0){ goto _LL1500;}
! else{ _temp1530=* _temp1528; _LL1538: _temp1537= _temp1530.name; goto _LL1536;
! _LL1536: _temp1535= _temp1530.tq; goto _LL1534; _LL1534: _temp1533=( void*)
! _temp1530.type; goto _LL1532; _LL1532: _temp1531= _temp1530.inject; goto _LL1518;}
! _LL1518: _temp1517= _temp1499.f2; if( _temp1517 ==  0){ goto _LL1500;} else{
! _temp1519=* _temp1517; _LL1527: _temp1526= _temp1519.name; goto _LL1525; _LL1525:
! _temp1524= _temp1519.tq; goto _LL1523; _LL1523: _temp1522=( void*) _temp1519.type;
! goto _LL1521; _LL1521: _temp1520= _temp1519.inject; goto _LL1508;} _LL1502: goto
! _LL1500; _LL1504: goto _LL1506; _LL1506: bad_cyc_vararg= 1; goto _LL1500;
! _LL1508: Cyc_Tcutil_unify_tqual( _temp1535, _temp1524); Cyc_Tcutil_unify_it(
! _temp1533, _temp1522); if( _temp1531 !=  _temp1520){ bad_cyc_vararg= 1;} goto
! _LL1500; _LL1500:;} if( bad_cyc_vararg){ goto _LL1160;}{ int bad_effect= 0;{
! struct _tuple12 _temp1540=({ struct _tuple12 _temp1539; _temp1539.f1= _temp1397;
! _temp1539.f2= _temp1417; _temp1539;}); struct Cyc_Core_Opt* _temp1550; struct
! Cyc_Core_Opt* _temp1552; struct Cyc_Core_Opt* _temp1554; struct Cyc_Core_Opt*
! _temp1556; _LL1542: _LL1553: _temp1552= _temp1540.f1; if( _temp1552 ==  0){ goto
! _LL1551;} else{ goto _LL1544;} _LL1551: _temp1550= _temp1540.f2; if( _temp1550
! ==  0){ goto _LL1543;} else{ goto _LL1544;} _LL1544: _LL1555: _temp1554=
! _temp1540.f1; if( _temp1554 ==  0){ goto _LL1545;} else{ goto _LL1546;} _LL1546:
! _LL1557: _temp1556= _temp1540.f2; if( _temp1556 ==  0){ goto _LL1547;} else{
! goto _LL1548;} _LL1548: goto _LL1549; _LL1543: goto _LL1541; _LL1545: goto
! _LL1547; _LL1547: bad_effect= 1; goto _LL1541; _LL1549: bad_effect= ! Cyc_Tcutil_unify_effect((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp1397))->v,( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1417))->v); goto _LL1541; _LL1541:;} if( bad_effect){ goto
! _LL1160;} if( ! Cyc_Tcutil_same_atts( _temp1405, _temp1385)){ goto _LL1160;} if(
! ! Cyc_Tcutil_same_rgn_po( _temp1407, _temp1387)){ goto _LL1160;} return;}}}
! _LL1190: for( 0; _temp1423 !=  0? _temp1427 !=  0: 0;( _temp1423=(( struct Cyc_List_List*)
! _check_null( _temp1423))->tl, _temp1427=(( struct Cyc_List_List*) _check_null(
! _temp1427))->tl)){ Cyc_Tcutil_unify_tqual((*(( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp1423))->hd)).f1,(*(( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp1427))->hd)).f1); Cyc_Tcutil_unify_it((*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp1423))->hd)).f2,(*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp1427))->hd)).f2);} if( _temp1423 ==  0?
! _temp1427 ==  0: 0){ return;} goto _LL1160; _LL1192: _temp1443= _temp1435;
! _temp1439= _temp1431; goto _LL1194; _LL1194: for( 0; _temp1439 !=  0? _temp1443
! !=  0: 0;( _temp1439=(( struct Cyc_List_List*) _check_null( _temp1439))->tl,
! _temp1443=(( struct Cyc_List_List*) _check_null( _temp1443))->tl)){ struct Cyc_Absyn_Structfield*
! _temp1558=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp1439))->hd; struct Cyc_Absyn_Structfield* _temp1559=( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp1443))->hd; if( Cyc_Std_zstrptrcmp(
! _temp1558->name, _temp1559->name) !=  0){( int) _throw(( void*) Cyc_Tcutil_Unify);}
! Cyc_Tcutil_unify_tqual( _temp1558->tq, _temp1559->tq); Cyc_Tcutil_unify_it((
! void*) _temp1558->type,( void*) _temp1559->type); if((( ! Cyc_Tcutil_same_atts(
! _temp1558->attributes, _temp1559->attributes)? 1:( _temp1558->width !=  0?
! _temp1559->width ==  0: 0))? 1:( _temp1559->width !=  0? _temp1558->width ==  0:
! 0))? 1:(( _temp1558->width !=  0? _temp1559->width !=  0: 0)? Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1558->width)) !=  Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1559->width)): 0)){( int) _throw(( void*)
! Cyc_Tcutil_Unify);}} if( _temp1439 ==  0? _temp1443 ==  0: 0){ return;} goto
! _LL1160; _LL1196: return; _LL1198: Cyc_Tcutil_unify_it( _temp1455, _temp1451);
  return; _LL1200: goto _LL1202; _LL1202: goto _LL1204; _LL1204: goto _LL1206;
  _LL1206: goto _LL1208; _LL1208: goto _LL1210; _LL1210: if( Cyc_Tcutil_unify_effect(
  t1, t2)){ return;} else{ goto _LL1160;} _LL1212: goto _LL1160; _LL1160:;}( int)
  _throw(( void*) Cyc_Tcutil_Unify);} int Cyc_Tcutil_is_arithmetic_type( void* t){
! void* _temp1560= Cyc_Tcutil_compress( t); _LL1562: if(( unsigned int) _temp1560
! >  4u?*(( int*) _temp1560) ==  Cyc_Absyn_IntType: 0){ goto _LL1563;} else{ goto
! _LL1564;} _LL1564: if( _temp1560 == ( void*) Cyc_Absyn_FloatType){ goto _LL1565;}
! else{ goto _LL1566;} _LL1566: if( _temp1560 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL1567;} else{ goto _LL1568;} _LL1568: if(( unsigned int) _temp1560 >  4u?*((
! int*) _temp1560) ==  Cyc_Absyn_EnumType: 0){ goto _LL1569;} else{ goto _LL1570;}
! _LL1570: goto _LL1571; _LL1563: goto _LL1565; _LL1565: goto _LL1567; _LL1567:
! goto _LL1569; _LL1569: return 1; _LL1571: return 0; _LL1561:;} int Cyc_Tcutil_will_lose_precision(
  void* t1, void* t2){ t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress( t2);{
! struct _tuple8 _temp1573=({ struct _tuple8 _temp1572; _temp1572.f1= t1;
! _temp1572.f2= t2; _temp1572;}); void* _temp1595; void* _temp1597; void*
! _temp1599; void* _temp1601; void* _temp1603; void* _temp1605; void* _temp1607;
! void* _temp1609; void* _temp1611; void* _temp1613; void* _temp1615; void*
! _temp1617; void* _temp1619; void* _temp1621; void* _temp1623; void* _temp1625;
! void* _temp1627; void* _temp1629; void* _temp1631; void* _temp1633; void*
! _temp1635; void* _temp1637; void* _temp1639; void* _temp1641; void* _temp1643;
! void* _temp1645; void* _temp1647; _LL1575: _LL1598: _temp1597= _temp1573.f1; if(
! _temp1597 == ( void*) Cyc_Absyn_DoubleType){ goto _LL1596;} else{ goto _LL1577;}
! _LL1596: _temp1595= _temp1573.f2; if( _temp1595 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1576;} else{ goto _LL1577;} _LL1577: _LL1602: _temp1601= _temp1573.f1;
! if( _temp1601 == ( void*) Cyc_Absyn_DoubleType){ goto _LL1600;} else{ goto
! _LL1579;} _LL1600: _temp1599= _temp1573.f2; if(( unsigned int) _temp1599 >  4u?*((
! int*) _temp1599) ==  Cyc_Absyn_IntType: 0){ goto _LL1578;} else{ goto _LL1579;}
! _LL1579: _LL1606: _temp1605= _temp1573.f1; if( _temp1605 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1604;} else{ goto _LL1581;} _LL1604: _temp1603= _temp1573.f2; if((
! unsigned int) _temp1603 >  4u?*(( int*) _temp1603) ==  Cyc_Absyn_IntType: 0){
! goto _LL1580;} else{ goto _LL1581;} _LL1581: _LL1612: _temp1611= _temp1573.f1;
! if(( unsigned int) _temp1611 >  4u?*(( int*) _temp1611) ==  Cyc_Absyn_IntType: 0){
! _LL1614: _temp1613=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1611)->f2;
! if( _temp1613 == ( void*) Cyc_Absyn_B8){ goto _LL1608;} else{ goto _LL1583;}}
! else{ goto _LL1583;} _LL1608: _temp1607= _temp1573.f2; if(( unsigned int)
! _temp1607 >  4u?*(( int*) _temp1607) ==  Cyc_Absyn_IntType: 0){ _LL1610:
! _temp1609=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1607)->f2; if(
! _temp1609 == ( void*) Cyc_Absyn_B8){ goto _LL1582;} else{ goto _LL1583;}} else{
! goto _LL1583;} _LL1583: _LL1616: _temp1615= _temp1573.f1; if(( unsigned int)
! _temp1615 >  4u?*(( int*) _temp1615) ==  Cyc_Absyn_IntType: 0){ _LL1618:
! _temp1617=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1615)->f2; if(
! _temp1617 == ( void*) Cyc_Absyn_B8){ goto _LL1584;} else{ goto _LL1585;}} else{
! goto _LL1585;} _LL1585: _LL1622: _temp1621= _temp1573.f1; if(( unsigned int)
! _temp1621 >  4u?*(( int*) _temp1621) ==  Cyc_Absyn_IntType: 0){ _LL1624:
! _temp1623=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1621)->f2; if(
! _temp1623 == ( void*) Cyc_Absyn_B4){ goto _LL1620;} else{ goto _LL1587;}} else{
! goto _LL1587;} _LL1620: _temp1619= _temp1573.f2; if( _temp1619 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1586;} else{ goto _LL1587;} _LL1587: _LL1630: _temp1629= _temp1573.f1;
! if(( unsigned int) _temp1629 >  4u?*(( int*) _temp1629) ==  Cyc_Absyn_IntType: 0){
! _LL1632: _temp1631=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1629)->f2;
! if( _temp1631 == ( void*) Cyc_Absyn_B4){ goto _LL1626;} else{ goto _LL1589;}}
! else{ goto _LL1589;} _LL1626: _temp1625= _temp1573.f2; if(( unsigned int)
! _temp1625 >  4u?*(( int*) _temp1625) ==  Cyc_Absyn_IntType: 0){ _LL1628:
! _temp1627=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1625)->f2; if(
! _temp1627 == ( void*) Cyc_Absyn_B2){ goto _LL1588;} else{ goto _LL1589;}} else{
! goto _LL1589;} _LL1589: _LL1638: _temp1637= _temp1573.f1; if(( unsigned int)
! _temp1637 >  4u?*(( int*) _temp1637) ==  Cyc_Absyn_IntType: 0){ _LL1640:
! _temp1639=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1637)->f2; if(
! _temp1639 == ( void*) Cyc_Absyn_B4){ goto _LL1634;} else{ goto _LL1591;}} else{
! goto _LL1591;} _LL1634: _temp1633= _temp1573.f2; if(( unsigned int) _temp1633 > 
! 4u?*(( int*) _temp1633) ==  Cyc_Absyn_IntType: 0){ _LL1636: _temp1635=( void*)((
! struct Cyc_Absyn_IntType_struct*) _temp1633)->f2; if( _temp1635 == ( void*) Cyc_Absyn_B1){
! goto _LL1590;} else{ goto _LL1591;}} else{ goto _LL1591;} _LL1591: _LL1646:
! _temp1645= _temp1573.f1; if(( unsigned int) _temp1645 >  4u?*(( int*) _temp1645)
! ==  Cyc_Absyn_IntType: 0){ _LL1648: _temp1647=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1645)->f2; if( _temp1647 == ( void*) Cyc_Absyn_B2){ goto _LL1642;} else{
! goto _LL1593;}} else{ goto _LL1593;} _LL1642: _temp1641= _temp1573.f2; if((
! unsigned int) _temp1641 >  4u?*(( int*) _temp1641) ==  Cyc_Absyn_IntType: 0){
! _LL1644: _temp1643=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1641)->f2;
! if( _temp1643 == ( void*) Cyc_Absyn_B1){ goto _LL1592;} else{ goto _LL1593;}}
! else{ goto _LL1593;} _LL1593: goto _LL1594; _LL1576: goto _LL1578; _LL1578: goto
! _LL1580; _LL1580: return 1; _LL1582: return 0; _LL1584: goto _LL1586; _LL1586:
! goto _LL1588; _LL1588: goto _LL1590; _LL1590: goto _LL1592; _LL1592: return 1;
! _LL1594: return 0; _LL1574:;}} int Cyc_Tcutil_coerce_list( struct Cyc_Tcenv_Tenv*
  te, void* t, struct Cyc_List_List* es){ struct Cyc_Core_Opt* max_arith_type= 0;{
  struct Cyc_List_List* el= es; for( 0; el !=  0; el=(( struct Cyc_List_List*)
  _check_null( el))->tl){ void* t1= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
  _check_null((( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( el))->hd)->topt))->v);
  if( Cyc_Tcutil_is_arithmetic_type( t1)){ if( max_arith_type ==  0? 1: Cyc_Tcutil_will_lose_precision(
  t1,( void*)(( struct Cyc_Core_Opt*) _check_null( max_arith_type))->v)){
! max_arith_type=( struct Cyc_Core_Opt*)({ struct Cyc_Core_Opt* _temp1649=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1649->v=( void*)
! t1; _temp1649;});}}}} if( max_arith_type !=  0){ if( ! Cyc_Tcutil_unify( t,(
  void*)(( struct Cyc_Core_Opt*) _check_null( max_arith_type))->v)){ return 0;}}{
  struct Cyc_List_List* el= es; for( 0; el !=  0; el=(( struct Cyc_List_List*)
  _check_null( el))->tl){ if( ! Cyc_Tcutil_coerce_assign( te,( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( el))->hd, t)){({ struct Cyc_Std_String_pa_struct
! _temp1652; _temp1652.tag= Cyc_Std_String_pa; _temp1652.f1=( struct _tagged_arr)
  Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*) _check_null((( struct
  Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( el))->hd)->topt))->v);{
! struct Cyc_Std_String_pa_struct _temp1651; _temp1651.tag= Cyc_Std_String_pa;
! _temp1651.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp1650[
! 2u]={& _temp1651,& _temp1652}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( el))->hd)->loc, _tag_arr("type mismatch: expecting %s but found %s",
! sizeof( unsigned char), 41u), _tag_arr( _temp1650, sizeof( void*), 2u));}}});
  return 0;}}} return 1;} int Cyc_Tcutil_coerce_to_bool( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Absyn_Exp* e){ if( ! Cyc_Tcutil_coerce_sint_typ( te, e)){ void*
! _temp1653= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);
! _LL1655: if(( unsigned int) _temp1653 >  4u?*(( int*) _temp1653) ==  Cyc_Absyn_PointerType:
! 0){ goto _LL1656;} else{ goto _LL1657;} _LL1657: goto _LL1658; _LL1656: Cyc_Tcutil_unchecked_cast(
! te, e, Cyc_Absyn_uint_t); goto _LL1654; _LL1658: return 0; _LL1654:;} return 1;}
! int Cyc_Tcutil_is_integral_type( void* t){ void* _temp1659= Cyc_Tcutil_compress(
! t); _LL1661: if(( unsigned int) _temp1659 >  4u?*(( int*) _temp1659) ==  Cyc_Absyn_IntType:
! 0){ goto _LL1662;} else{ goto _LL1663;} _LL1663: if(( unsigned int) _temp1659 > 
! 4u?*(( int*) _temp1659) ==  Cyc_Absyn_EnumType: 0){ goto _LL1664;} else{ goto
! _LL1665;} _LL1665: goto _LL1666; _LL1662: goto _LL1664; _LL1664: return 1;
! _LL1666: return 0; _LL1660:;} int Cyc_Tcutil_coerce_uint_typ( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Absyn_Exp* e){ if( Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*)
  _check_null( e->topt))->v, Cyc_Absyn_uint_t)){ return 1;} if( Cyc_Tcutil_is_integral_type((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v)){ if( Cyc_Tcutil_will_lose_precision((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v, Cyc_Absyn_uint_t)){({
! void* _temp1667[ 0u]={}; Cyc_Tcutil_warn( e->loc, _tag_arr("integral size mismatch; conversion supplied",
! sizeof( unsigned char), 44u), _tag_arr( _temp1667, sizeof( void*), 0u));});} Cyc_Tcutil_unchecked_cast(
  te, e, Cyc_Absyn_uint_t); return 1;} return 0;} int Cyc_Tcutil_coerce_sint_typ(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e){ if( Cyc_Tcutil_unify(( void*)((
  struct Cyc_Core_Opt*) _check_null( e->topt))->v, Cyc_Absyn_sint_t)){ return 1;}
  if( Cyc_Tcutil_is_integral_type(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v)){
  if( Cyc_Tcutil_will_lose_precision(( void*)(( struct Cyc_Core_Opt*) _check_null(
! e->topt))->v, Cyc_Absyn_sint_t)){({ void* _temp1668[ 0u]={}; Cyc_Tcutil_warn( e->loc,
  _tag_arr("integral size mismatch; conversion supplied", sizeof( unsigned char),
! 44u), _tag_arr( _temp1668, sizeof( void*), 0u));});} Cyc_Tcutil_unchecked_cast(
  te, e, Cyc_Absyn_sint_t); return 1;} return 0;} int Cyc_Tcutil_silent_castable(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void* t1, void* t2){
  t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress( t2);{ struct _tuple8
! _temp1670=({ struct _tuple8 _temp1669; _temp1669.f1= t1; _temp1669.f2= t2;
! _temp1669;}); void* _temp1682; struct Cyc_Absyn_PtrInfo _temp1684; void*
! _temp1686; struct Cyc_Absyn_PtrInfo _temp1688; void* _temp1690; struct Cyc_Absyn_Exp*
! _temp1692; struct Cyc_Absyn_Tqual _temp1694; void* _temp1696; void* _temp1698;
! struct Cyc_Absyn_Exp* _temp1700; struct Cyc_Absyn_Tqual _temp1702; void*
! _temp1704; void* _temp1706; struct Cyc_Absyn_TunionInfo _temp1708; struct Cyc_List_List*
! _temp1710; void* _temp1712; struct Cyc_Absyn_Tuniondecl** _temp1714; struct Cyc_Absyn_Tuniondecl*
! _temp1716; void* _temp1717; struct Cyc_Absyn_TunionFieldInfo _temp1719; struct
! Cyc_List_List* _temp1721; void* _temp1723; struct Cyc_Absyn_Tunionfield*
! _temp1725; struct Cyc_Absyn_Tuniondecl* _temp1727; void* _temp1729; struct Cyc_Absyn_TunionInfo
! _temp1731; void* _temp1733; struct Cyc_List_List* _temp1735; void* _temp1737;
! struct Cyc_Absyn_Tuniondecl** _temp1739; struct Cyc_Absyn_Tuniondecl* _temp1741;
! void* _temp1742; struct Cyc_Absyn_PtrInfo _temp1744; struct Cyc_Absyn_Conref*
! _temp1746; struct Cyc_Absyn_Tqual _temp1748; struct Cyc_Absyn_Conref* _temp1750;
! void* _temp1752; void* _temp1754; _LL1672: _LL1687: _temp1686= _temp1670.f1; if((
! unsigned int) _temp1686 >  4u?*(( int*) _temp1686) ==  Cyc_Absyn_PointerType: 0){
! _LL1689: _temp1688=(( struct Cyc_Absyn_PointerType_struct*) _temp1686)->f1; goto
! _LL1683;} else{ goto _LL1674;} _LL1683: _temp1682= _temp1670.f2; if((
! unsigned int) _temp1682 >  4u?*(( int*) _temp1682) ==  Cyc_Absyn_PointerType: 0){
! _LL1685: _temp1684=(( struct Cyc_Absyn_PointerType_struct*) _temp1682)->f1; goto
! _LL1673;} else{ goto _LL1674;} _LL1674: _LL1699: _temp1698= _temp1670.f1; if((
! unsigned int) _temp1698 >  4u?*(( int*) _temp1698) ==  Cyc_Absyn_ArrayType: 0){
! _LL1705: _temp1704=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1698)->f1;
! goto _LL1703; _LL1703: _temp1702=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1698)->f2; goto _LL1701; _LL1701: _temp1700=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1698)->f3; goto _LL1691;} else{ goto _LL1676;} _LL1691: _temp1690=
! _temp1670.f2; if(( unsigned int) _temp1690 >  4u?*(( int*) _temp1690) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1697: _temp1696=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1690)->f1;
! goto _LL1695; _LL1695: _temp1694=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1690)->f2; goto _LL1693; _LL1693: _temp1692=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1690)->f3; goto _LL1675;} else{ goto _LL1676;} _LL1676: _LL1718: _temp1717=
! _temp1670.f1; if(( unsigned int) _temp1717 >  4u?*(( int*) _temp1717) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1720: _temp1719=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1717)->f1;
! _LL1724: _temp1723=( void*) _temp1719.field_info; if(*(( int*) _temp1723) == 
! Cyc_Absyn_KnownTunionfield){ _LL1728: _temp1727=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1723)->f1; goto _LL1726; _LL1726: _temp1725=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1723)->f2; goto _LL1722;} else{ goto _LL1678;} _LL1722: _temp1721=
! _temp1719.targs; goto _LL1707;} else{ goto _LL1678;} _LL1707: _temp1706=
! _temp1670.f2; if(( unsigned int) _temp1706 >  4u?*(( int*) _temp1706) ==  Cyc_Absyn_TunionType:
! 0){ _LL1709: _temp1708=(( struct Cyc_Absyn_TunionType_struct*) _temp1706)->f1;
! _LL1713: _temp1712=( void*) _temp1708.tunion_info; if(*(( int*) _temp1712) == 
! Cyc_Absyn_KnownTunion){ _LL1715: _temp1714=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1712)->f1; _temp1716=* _temp1714; goto _LL1711;} else{ goto _LL1678;}
! _LL1711: _temp1710= _temp1708.targs; goto _LL1677;} else{ goto _LL1678;} _LL1678:
! _LL1743: _temp1742= _temp1670.f1; if(( unsigned int) _temp1742 >  4u?*(( int*)
! _temp1742) ==  Cyc_Absyn_PointerType: 0){ _LL1745: _temp1744=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1742)->f1; _LL1755: _temp1754=( void*) _temp1744.elt_typ; goto _LL1753;
! _LL1753: _temp1752=( void*) _temp1744.rgn_typ; goto _LL1751; _LL1751: _temp1750=
! _temp1744.nullable; goto _LL1749; _LL1749: _temp1748= _temp1744.tq; goto _LL1747;
! _LL1747: _temp1746= _temp1744.bounds; goto _LL1730;} else{ goto _LL1680;}
! _LL1730: _temp1729= _temp1670.f2; if(( unsigned int) _temp1729 >  4u?*(( int*)
! _temp1729) ==  Cyc_Absyn_TunionType: 0){ _LL1732: _temp1731=(( struct Cyc_Absyn_TunionType_struct*)
! _temp1729)->f1; _LL1738: _temp1737=( void*) _temp1731.tunion_info; if(*(( int*)
! _temp1737) ==  Cyc_Absyn_KnownTunion){ _LL1740: _temp1739=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1737)->f1; _temp1741=* _temp1739; goto _LL1736;} else{ goto _LL1680;}
! _LL1736: _temp1735= _temp1731.targs; goto _LL1734; _LL1734: _temp1733=( void*)
! _temp1731.rgn; goto _LL1679;} else{ goto _LL1680;} _LL1680: goto _LL1681;
! _LL1673: { int okay= 1; if( !(( int(*)( int(* cmp)( int, int), struct Cyc_Absyn_Conref*
! x, struct Cyc_Absyn_Conref* y)) Cyc_Tcutil_unify_conrefs)( Cyc_Core_intcmp,
! _temp1688.nullable, _temp1684.nullable)){ void* _temp1756=( void*)((( struct Cyc_Absyn_Conref*(*)(
! struct Cyc_Absyn_Conref* x)) Cyc_Absyn_compress_conref)( _temp1688.nullable))->v;
! int _temp1762; _LL1758: if(( unsigned int) _temp1756 >  1u?*(( int*) _temp1756)
! ==  Cyc_Absyn_Eq_constr: 0){ _LL1763: _temp1762=( int)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp1756)->f1; goto _LL1759;} else{ goto _LL1760;} _LL1760: goto _LL1761;
! _LL1759: okay= ! _temp1762; goto _LL1757; _LL1761:( int) _throw(({ void*
! _temp1764[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("silent_castable conref not eq",
! sizeof( unsigned char), 30u), _tag_arr( _temp1764, sizeof( void*), 0u));}));
! _LL1757:;} if( ! Cyc_Tcutil_unify_conrefs( Cyc_Tcutil_boundscmp, _temp1688.bounds,
! _temp1684.bounds)){ struct _tuple8 _temp1766=({ struct _tuple8 _temp1765;
! _temp1765.f1=( void*)( Cyc_Absyn_compress_conref( _temp1688.bounds))->v;
! _temp1765.f2=( void*)( Cyc_Absyn_compress_conref( _temp1684.bounds))->v;
! _temp1765;}); void* _temp1776; void* _temp1778; void* _temp1780; void* _temp1782;
! void* _temp1784; void* _temp1786; struct Cyc_Absyn_Exp* _temp1788; void*
! _temp1790; void* _temp1792; struct Cyc_Absyn_Exp* _temp1794; void* _temp1796;
! void* _temp1798; void* _temp1800; void* _temp1802; _LL1768: _LL1781: _temp1780=
! _temp1766.f1; if(( unsigned int) _temp1780 >  1u?*(( int*) _temp1780) ==  Cyc_Absyn_Eq_constr:
  0){ _LL1783: _temp1782=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1780)->f1;
  if(( unsigned int) _temp1782 >  1u?*(( int*) _temp1782) ==  Cyc_Absyn_Upper_b: 0){
! goto _LL1777;} else{ goto _LL1770;}} else{ goto _LL1770;} _LL1777: _temp1776=
! _temp1766.f2; if(( unsigned int) _temp1776 >  1u?*(( int*) _temp1776) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1779: _temp1778=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1776)->f1;
! if( _temp1778 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1769;} else{ goto
! _LL1770;}} else{ goto _LL1770;} _LL1770: _LL1791: _temp1790= _temp1766.f1; if((
! unsigned int) _temp1790 >  1u?*(( int*) _temp1790) ==  Cyc_Absyn_Eq_constr: 0){
! _LL1793: _temp1792=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1790)->f1;
! if(( unsigned int) _temp1792 >  1u?*(( int*) _temp1792) ==  Cyc_Absyn_Upper_b: 0){
! _LL1795: _temp1794=(( struct Cyc_Absyn_Upper_b_struct*) _temp1792)->f1; goto
! _LL1785;} else{ goto _LL1772;}} else{ goto _LL1772;} _LL1785: _temp1784=
! _temp1766.f2; if(( unsigned int) _temp1784 >  1u?*(( int*) _temp1784) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1787: _temp1786=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1784)->f1;
! if(( unsigned int) _temp1786 >  1u?*(( int*) _temp1786) ==  Cyc_Absyn_Upper_b: 0){
! _LL1789: _temp1788=(( struct Cyc_Absyn_Upper_b_struct*) _temp1786)->f1; goto
! _LL1771;} else{ goto _LL1772;}} else{ goto _LL1772;} _LL1772: _LL1801: _temp1800=
! _temp1766.f1; if(( unsigned int) _temp1800 >  1u?*(( int*) _temp1800) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1803: _temp1802=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1800)->f1;
! if( _temp1802 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1797;} else{ goto
! _LL1774;}} else{ goto _LL1774;} _LL1797: _temp1796= _temp1766.f2; if((
! unsigned int) _temp1796 >  1u?*(( int*) _temp1796) ==  Cyc_Absyn_Eq_constr: 0){
! _LL1799: _temp1798=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1796)->f1;
! if( _temp1798 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1773;} else{ goto
! _LL1774;}} else{ goto _LL1774;} _LL1774: goto _LL1775; _LL1769: okay= 1; goto
! _LL1767; _LL1771: okay= okay? Cyc_Evexp_eval_const_uint_exp( _temp1794) >=  Cyc_Evexp_eval_const_uint_exp(
! _temp1788): 0;({ void* _temp1804[ 0u]={}; Cyc_Tcutil_warn( loc, _tag_arr("implicit cast to shorter array",
! sizeof( unsigned char), 31u), _tag_arr( _temp1804, sizeof( void*), 0u));}); goto
! _LL1767; _LL1773: okay= 1; goto _LL1767; _LL1775: okay= 0; goto _LL1767; _LL1767:;}
! okay= okay? Cyc_Tcutil_unify(( void*) _temp1688.elt_typ,( void*) _temp1684.elt_typ):
! 0; okay= okay? Cyc_Tcutil_unify(( void*) _temp1688.rgn_typ,( void*) _temp1684.rgn_typ)?
! 1: Cyc_Tcenv_region_outlives( te,( void*) _temp1688.rgn_typ,( void*) _temp1684.rgn_typ):
! 0; okay= okay? !( _temp1688.tq).q_const? 1:( _temp1684.tq).q_const: 0; return
! okay;} _LL1675: { int okay; okay=( _temp1700 !=  0? _temp1692 !=  0: 0)? Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1700)) ==  Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1692)): 0; return( okay? Cyc_Tcutil_unify(
! _temp1704, _temp1696): 0)? ! _temp1702.q_const? 1: _temp1694.q_const: 0;}
! _LL1677: if(( _temp1727 ==  _temp1716? 1: Cyc_Absyn_qvar_cmp( _temp1727->name,
! _temp1716->name) ==  0)? _temp1725->typs ==  0: 0){ for( 0; _temp1721 !=  0?
! _temp1710 !=  0: 0;( _temp1721=(( struct Cyc_List_List*) _check_null( _temp1721))->tl,
! _temp1710=(( struct Cyc_List_List*) _check_null( _temp1710))->tl)){ if( ! Cyc_Tcutil_unify((
! void*)(( struct Cyc_List_List*) _check_null( _temp1721))->hd,( void*)(( struct
! Cyc_List_List*) _check_null( _temp1710))->hd)){ break;}} if( _temp1721 ==  0?
! _temp1710 ==  0: 0){ return 1;}} return 0; _LL1679:{ void* _temp1805= Cyc_Tcutil_compress(
! _temp1754); struct Cyc_Absyn_TunionFieldInfo _temp1811; struct Cyc_List_List*
! _temp1813; void* _temp1815; struct Cyc_Absyn_Tunionfield* _temp1817; struct Cyc_Absyn_Tuniondecl*
! _temp1819; _LL1807: if(( unsigned int) _temp1805 >  4u?*(( int*) _temp1805) == 
! Cyc_Absyn_TunionFieldType: 0){ _LL1812: _temp1811=(( struct Cyc_Absyn_TunionFieldType_struct*)
! _temp1805)->f1; _LL1816: _temp1815=( void*) _temp1811.field_info; if(*(( int*)
! _temp1815) ==  Cyc_Absyn_KnownTunionfield){ _LL1820: _temp1819=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1815)->f1; goto _LL1818; _LL1818: _temp1817=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1815)->f2; goto _LL1814;} else{ goto _LL1809;} _LL1814: _temp1813=
! _temp1811.targs; goto _LL1808;} else{ goto _LL1809;} _LL1809: goto _LL1810;
! _LL1808: if( ! Cyc_Tcutil_unify( _temp1752, _temp1733)? ! Cyc_Tcenv_region_outlives(
! te, _temp1752, _temp1733): 0){ return 0;} if( !(( int(*)( int(* cmp)( int, int),
  struct Cyc_Absyn_Conref* x, struct Cyc_Absyn_Conref* y)) Cyc_Tcutil_unify_conrefs)(
! Cyc_Core_intcmp, _temp1750,(( struct Cyc_Absyn_Conref*(*)( int x)) Cyc_Absyn_new_conref)(
! 0))){ return 0;} if( ! Cyc_Tcutil_unify_conrefs( Cyc_Tcutil_boundscmp, _temp1746,
  Cyc_Absyn_new_conref( Cyc_Absyn_bounds_one))){ return 0;} if( Cyc_Absyn_qvar_cmp(
! _temp1741->name, _temp1819->name) ==  0? _temp1817->typs !=  0: 0){ int okay= 1;
! for( 0; _temp1813 !=  0? _temp1735 !=  0: 0;( _temp1813=(( struct Cyc_List_List*)
! _check_null( _temp1813))->tl, _temp1735=(( struct Cyc_List_List*) _check_null(
! _temp1735))->tl)){ if( ! Cyc_Tcutil_unify(( void*)(( struct Cyc_List_List*)
! _check_null( _temp1813))->hd,( void*)(( struct Cyc_List_List*) _check_null(
! _temp1735))->hd)){ okay= 0; break;}} if(( ! okay? 1: _temp1813 !=  0)? 1:
! _temp1735 !=  0){ return 0;} return 1;} goto _LL1806; _LL1810: goto _LL1806;
! _LL1806:;} return 0; _LL1681: return Cyc_Tcutil_unify( t1, t2); _LL1671:;}} int
  Cyc_Tcutil_coerce_arg( struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e, void*
  t2){ void* t1= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
  e->topt))->v); if( Cyc_Tcutil_unify( t1, t2)){ return 1;} if( Cyc_Tcutil_is_arithmetic_type(
  t1)? Cyc_Tcutil_is_arithmetic_type( t2): 0){ if( Cyc_Tcutil_will_lose_precision(
! t1, t2)){({ void* _temp1821[ 0u]={}; Cyc_Tcutil_warn( e->loc, _tag_arr("integral size mismatch; conversion supplied",
! sizeof( unsigned char), 44u), _tag_arr( _temp1821, sizeof( void*), 0u));});} Cyc_Tcutil_unchecked_cast(
  te, e, t2); return 1;} else{ if( Cyc_Tcutil_silent_castable( te, e->loc, t1, t2)){
  Cyc_Tcutil_unchecked_cast( te, e, t2); return 1;} else{ if( Cyc_Tcutil_castable(
  te, e->loc, t1, t2)){ Cyc_Tcutil_unchecked_cast( te, e, t2);({ struct Cyc_Std_String_pa_struct
! _temp1824; _temp1824.tag= Cyc_Std_String_pa; _temp1824.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t2);{ struct Cyc_Std_String_pa_struct _temp1823;
! _temp1823.tag= Cyc_Std_String_pa; _temp1823.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t1);{ void* _temp1822[ 2u]={& _temp1823,& _temp1824}; Cyc_Tcutil_warn( e->loc,
  _tag_arr("implicit cast from %s to %s", sizeof( unsigned char), 28u), _tag_arr(
! _temp1822, sizeof( void*), 2u));}}}); return 1;} else{ return 0;}}}} int Cyc_Tcutil_coerce_assign(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e, void* t){ return Cyc_Tcutil_coerce_arg(
! te, e, t);} int Cyc_Tcutil_coerceable( void* t){ void* _temp1825= Cyc_Tcutil_compress(
! t); _LL1827: if(( unsigned int) _temp1825 >  4u?*(( int*) _temp1825) ==  Cyc_Absyn_IntType:
! 0){ goto _LL1828;} else{ goto _LL1829;} _LL1829: if( _temp1825 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1830;} else{ goto _LL1831;} _LL1831: if( _temp1825 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL1832;} else{ goto _LL1833;} _LL1833: goto _LL1834; _LL1828: goto _LL1830;
! _LL1830: goto _LL1832; _LL1832: return 1; _LL1834: return 0; _LL1826:;} static
  struct _tuple4* Cyc_Tcutil_flatten_typ_f( struct Cyc_List_List* inst, struct Cyc_Absyn_Structfield*
! x){ return({ struct _tuple4* _temp1835=( struct _tuple4*) _cycalloc( sizeof(
! struct _tuple4)); _temp1835->f1= x->tq; _temp1835->f2= Cyc_Tcutil_substitute(
! inst,( void*) x->type); _temp1835;});} static struct Cyc_List_List* Cyc_Tcutil_flatten_typ(
  struct Cyc_Tcenv_Tenv* te, void* t1){ t1= Cyc_Tcutil_compress( t1);{ void*
! _temp1836= t1; struct Cyc_List_List* _temp1848; struct Cyc_Absyn_Structdecl**
! _temp1850; struct Cyc_List_List* _temp1852; struct _tuple1* _temp1854; struct
! Cyc_List_List* _temp1856; _LL1838: if( _temp1836 == ( void*) Cyc_Absyn_VoidType){
! goto _LL1839;} else{ goto _LL1840;} _LL1840: if(( unsigned int) _temp1836 >  4u?*((
! int*) _temp1836) ==  Cyc_Absyn_TupleType: 0){ _LL1849: _temp1848=(( struct Cyc_Absyn_TupleType_struct*)
! _temp1836)->f1; goto _LL1841;} else{ goto _LL1842;} _LL1842: if(( unsigned int)
! _temp1836 >  4u?*(( int*) _temp1836) ==  Cyc_Absyn_StructType: 0){ _LL1855:
! _temp1854=(( struct Cyc_Absyn_StructType_struct*) _temp1836)->f1; goto _LL1853;
! _LL1853: _temp1852=(( struct Cyc_Absyn_StructType_struct*) _temp1836)->f2; goto
! _LL1851; _LL1851: _temp1850=(( struct Cyc_Absyn_StructType_struct*) _temp1836)->f3;
! goto _LL1843;} else{ goto _LL1844;} _LL1844: if(( unsigned int) _temp1836 >  4u?*((
! int*) _temp1836) ==  Cyc_Absyn_AnonStructType: 0){ _LL1857: _temp1856=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp1836)->f1; goto _LL1845;} else{ goto
! _LL1846;} _LL1846: goto _LL1847; _LL1839: return 0; _LL1841: return _temp1848;
! _LL1843: if( _temp1850 ==  0? 1: _temp1854 ==  0){ return({ struct Cyc_List_List*
! _temp1858=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1858->hd=( void*)({ struct _tuple4* _temp1859=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp1859->f1= Cyc_Absyn_empty_tqual(); _temp1859->f2=
! t1; _temp1859;}); _temp1858->tl= 0; _temp1858;});}{ struct Cyc_Absyn_Structdecl*
! _temp1860=*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp1850)); struct
! _tuple1 _temp1861=*(( struct _tuple1*) _check_null( _temp1854)); struct Cyc_List_List*
! _temp1862=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_zip)( _temp1860->tvs, _temp1852); if( _temp1860->fields ==  0){
! return({ struct Cyc_List_List* _temp1863=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1863->hd=( void*)({ struct _tuple4*
! _temp1864=( struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp1864->f1=
! Cyc_Absyn_empty_tqual(); _temp1864->f2= t1; _temp1864;}); _temp1863->tl= 0;
! _temp1863;});} return(( struct Cyc_List_List*(*)( struct _tuple4*(* f)( struct
  Cyc_List_List*, struct Cyc_Absyn_Structfield*), struct Cyc_List_List* env,
! struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcutil_flatten_typ_f, _temp1862,(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1860->fields))->v);}
! _LL1845: return(( struct Cyc_List_List*(*)( struct _tuple4*(* f)( struct Cyc_List_List*,
  struct Cyc_Absyn_Structfield*), struct Cyc_List_List* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcutil_flatten_typ_f, 0, _temp1856); _LL1847: return({
! struct Cyc_List_List* _temp1865=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1865->hd=( void*)({ struct _tuple4* _temp1866=(
! struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp1866->f1= Cyc_Absyn_empty_tqual();
! _temp1866->f2= t1; _temp1866;}); _temp1865->tl= 0; _temp1865;}); _LL1837:;}}
  static int Cyc_Tcutil_ptrsubtype( struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List*
  assume, void* t1, void* t2); static int Cyc_Tcutil_subtype( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_List_List* assume, void* t1, void* t2){ if( Cyc_Tcutil_unify( t1,
--- 2107,2567 ----
  0? _temp1265 !=  0: 0)? Cyc_Absyn_qvar_cmp(( struct _tuple1*) _check_null(
  _temp1257),( struct _tuple1*) _check_null( _temp1265)) ==  0: 0)? 1:( _temp1257
  ==  0? _temp1265 ==  0: 0)){ Cyc_Tcutil_unify_list( _temp1255, _temp1263);
! return;} goto _LL1160; _LL1174: if( _temp1289 ==  _temp1277? 1: Cyc_Absyn_qvar_cmp(
! _temp1289->name, _temp1277->name) ==  0){ Cyc_Tcutil_unify_it( _temp1271,
! _temp1283); Cyc_Tcutil_unify_list( _temp1273, _temp1285); return;} goto _LL1160;
! _LL1176: if(( _temp1313 ==  _temp1301? 1: Cyc_Absyn_qvar_cmp( _temp1313->name,
! _temp1301->name) ==  0)? _temp1311 ==  _temp1299? 1: Cyc_Absyn_qvar_cmp(
! _temp1311->name, _temp1299->name) ==  0: 0){ Cyc_Tcutil_unify_list( _temp1295,
! _temp1307); return;} goto _LL1160; _LL1178: Cyc_Tcutil_unify_it( _temp1327,
! _temp1341); Cyc_Tcutil_unify_it( _temp1339, _temp1325); Cyc_Tcutil_unify_tqual(
! _temp1321, _temp1335); Cyc_Tcutil_unify_it_conrefs( Cyc_Tcutil_boundscmp,
! _temp1319, _temp1333);{ void* _temp1477=( void*)( Cyc_Absyn_compress_conref(
! _temp1319))->v; void* _temp1483; _LL1479: if(( unsigned int) _temp1477 >  1u?*((
! int*) _temp1477) ==  Cyc_Absyn_Eq_constr: 0){ _LL1484: _temp1483=( void*)((
! struct Cyc_Absyn_Eq_constr_struct*) _temp1477)->f1; if( _temp1483 == ( void*)
! Cyc_Absyn_Unknown_b){ goto _LL1480;} else{ goto _LL1481;}} else{ goto _LL1481;}
! _LL1481: goto _LL1482; _LL1480: return; _LL1482: goto _LL1478; _LL1478:;}(( void(*)(
  int(* cmp)( int, int), struct Cyc_Absyn_Conref* x, struct Cyc_Absyn_Conref* y))
! Cyc_Tcutil_unify_it_conrefs)( Cyc_Core_intcmp, _temp1323, _temp1337); return;
! _LL1180: if( _temp1347 ==  _temp1353? _temp1345 ==  _temp1351: 0){ return;} goto
  _LL1160; _LL1182: return; _LL1184: return; _LL1186: Cyc_Tcutil_unify_it(
! _temp1369, _temp1377); Cyc_Tcutil_unify_tqual( _temp1367, _temp1375); if(
! _temp1373 ==  _temp1365){ return;} if( _temp1373 ==  0? 1: _temp1365 ==  0){
  goto _LL1160;} if( Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp1373)) ==  Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*)
! _check_null( _temp1365))){ return;} goto _LL1160; _LL1188: { int done= 0;{
! struct _RegionHandle _temp1485= _new_region(); struct _RegionHandle* rgn=&
! _temp1485; _push_region( rgn);{ struct Cyc_List_List* inst= 0; while( _temp1397
! !=  0) { if( _temp1417 ==  0){ break;} inst=({ struct Cyc_List_List* _temp1486=(
  struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp1486->hd=( void*)({ struct _tuple5* _temp1487=( struct _tuple5*)
! _region_malloc( rgn, sizeof( struct _tuple5)); _temp1487->f1=( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( _temp1417))->hd; _temp1487->f2=( void*)({
! struct Cyc_Absyn_VarType_struct* _temp1488=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp1488[ 0]=({ struct
! Cyc_Absyn_VarType_struct _temp1489; _temp1489.tag= Cyc_Absyn_VarType; _temp1489.f1=(
! struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( _temp1397))->hd;
! _temp1489;}); _temp1488;}); _temp1487;}); _temp1486->tl= inst; _temp1486;});
! _temp1397=(( struct Cyc_List_List*) _check_null( _temp1397))->tl; _temp1417=((
! struct Cyc_List_List*) _check_null( _temp1417))->tl;} if( _temp1417 !=  0){
  _npop_handler( 0u); goto _LL1160;} if( inst !=  0){ Cyc_Tcutil_unify_it(( void*)({
! struct Cyc_Absyn_FnType_struct* _temp1490=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1490[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1491; _temp1491.tag= Cyc_Absyn_FnType; _temp1491.f1=({ struct Cyc_Absyn_FnInfo
! _temp1492; _temp1492.tvars= 0; _temp1492.effect= _temp1395; _temp1492.ret_typ=(
! void*) _temp1393; _temp1492.args= _temp1391; _temp1492.c_varargs= _temp1389;
! _temp1492.cyc_varargs= _temp1387; _temp1492.rgn_po= _temp1385; _temp1492.attributes=
! _temp1383; _temp1492;}); _temp1491;}); _temp1490;}), Cyc_Tcutil_rsubstitute( rgn,
! inst,( void*)({ struct Cyc_Absyn_FnType_struct* _temp1493=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp1493[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp1494; _temp1494.tag= Cyc_Absyn_FnType; _temp1494.f1=({ struct Cyc_Absyn_FnInfo
! _temp1495; _temp1495.tvars= 0; _temp1495.effect= _temp1415; _temp1495.ret_typ=(
! void*) _temp1413; _temp1495.args= _temp1411; _temp1495.c_varargs= _temp1409;
! _temp1495.cyc_varargs= _temp1407; _temp1495.rgn_po= _temp1405; _temp1495.attributes=
! _temp1403; _temp1495;}); _temp1494;}); _temp1493;}))); done= 1;}}; _pop_region(
! rgn);} if( done){ return;} Cyc_Tcutil_unify_it( _temp1393, _temp1413); for( 0;
! _temp1391 !=  0? _temp1411 !=  0: 0;( _temp1391=(( struct Cyc_List_List*)
! _check_null( _temp1391))->tl, _temp1411=(( struct Cyc_List_List*) _check_null(
! _temp1411))->tl)){ Cyc_Tcutil_unify_tqual((*(( struct _tuple2*)(( struct Cyc_List_List*)
! _check_null( _temp1391))->hd)).f2,(*(( struct _tuple2*)(( struct Cyc_List_List*)
! _check_null( _temp1411))->hd)).f2); Cyc_Tcutil_unify_it((*(( struct _tuple2*)((
! struct Cyc_List_List*) _check_null( _temp1391))->hd)).f3,(*(( struct _tuple2*)((
! struct Cyc_List_List*) _check_null( _temp1411))->hd)).f3);} if( _temp1391 !=  0?
! 1: _temp1411 !=  0){ goto _LL1160;} if( _temp1389 !=  _temp1409){ goto _LL1160;}{
! int bad_cyc_vararg= 0;{ struct _tuple11 _temp1497=({ struct _tuple11 _temp1496;
! _temp1496.f1= _temp1387; _temp1496.f2= _temp1407; _temp1496;}); struct Cyc_Absyn_VarargInfo*
! _temp1507; struct Cyc_Absyn_VarargInfo* _temp1509; struct Cyc_Absyn_VarargInfo*
! _temp1511; struct Cyc_Absyn_VarargInfo* _temp1513; struct Cyc_Absyn_VarargInfo*
! _temp1515; struct Cyc_Absyn_VarargInfo _temp1517; int _temp1518; void* _temp1520;
! struct Cyc_Absyn_Tqual _temp1522; struct Cyc_Core_Opt* _temp1524; struct Cyc_Absyn_VarargInfo*
! _temp1526; struct Cyc_Absyn_VarargInfo _temp1528; int _temp1529; void* _temp1531;
! struct Cyc_Absyn_Tqual _temp1533; struct Cyc_Core_Opt* _temp1535; _LL1499:
! _LL1510: _temp1509= _temp1497.f1; if( _temp1509 ==  0){ goto _LL1508;} else{
! goto _LL1501;} _LL1508: _temp1507= _temp1497.f2; if( _temp1507 ==  0){ goto
! _LL1500;} else{ goto _LL1501;} _LL1501: _LL1512: _temp1511= _temp1497.f1; if(
! _temp1511 ==  0){ goto _LL1502;} else{ goto _LL1503;} _LL1503: _LL1514:
! _temp1513= _temp1497.f2; if( _temp1513 ==  0){ goto _LL1504;} else{ goto _LL1505;}
! _LL1505: _LL1527: _temp1526= _temp1497.f1; if( _temp1526 ==  0){ goto _LL1498;}
! else{ _temp1528=* _temp1526; _LL1536: _temp1535= _temp1528.name; goto _LL1534;
! _LL1534: _temp1533= _temp1528.tq; goto _LL1532; _LL1532: _temp1531=( void*)
! _temp1528.type; goto _LL1530; _LL1530: _temp1529= _temp1528.inject; goto _LL1516;}
! _LL1516: _temp1515= _temp1497.f2; if( _temp1515 ==  0){ goto _LL1498;} else{
! _temp1517=* _temp1515; _LL1525: _temp1524= _temp1517.name; goto _LL1523; _LL1523:
! _temp1522= _temp1517.tq; goto _LL1521; _LL1521: _temp1520=( void*) _temp1517.type;
! goto _LL1519; _LL1519: _temp1518= _temp1517.inject; goto _LL1506;} _LL1500: goto
! _LL1498; _LL1502: goto _LL1504; _LL1504: bad_cyc_vararg= 1; goto _LL1498;
! _LL1506: Cyc_Tcutil_unify_tqual( _temp1533, _temp1522); Cyc_Tcutil_unify_it(
! _temp1531, _temp1520); if( _temp1529 !=  _temp1518){ bad_cyc_vararg= 1;} goto
! _LL1498; _LL1498:;} if( bad_cyc_vararg){ goto _LL1160;}{ int bad_effect= 0;{
! struct _tuple12 _temp1538=({ struct _tuple12 _temp1537; _temp1537.f1= _temp1395;
! _temp1537.f2= _temp1415; _temp1537;}); struct Cyc_Core_Opt* _temp1548; struct
! Cyc_Core_Opt* _temp1550; struct Cyc_Core_Opt* _temp1552; struct Cyc_Core_Opt*
! _temp1554; _LL1540: _LL1551: _temp1550= _temp1538.f1; if( _temp1550 ==  0){ goto
! _LL1549;} else{ goto _LL1542;} _LL1549: _temp1548= _temp1538.f2; if( _temp1548
! ==  0){ goto _LL1541;} else{ goto _LL1542;} _LL1542: _LL1553: _temp1552=
! _temp1538.f1; if( _temp1552 ==  0){ goto _LL1543;} else{ goto _LL1544;} _LL1544:
! _LL1555: _temp1554= _temp1538.f2; if( _temp1554 ==  0){ goto _LL1545;} else{
! goto _LL1546;} _LL1546: goto _LL1547; _LL1541: goto _LL1539; _LL1543: goto
! _LL1545; _LL1545: bad_effect= 1; goto _LL1539; _LL1547: bad_effect= ! Cyc_Tcutil_unify_effect((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp1395))->v,( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1415))->v); goto _LL1539; _LL1539:;} if( bad_effect){ goto
! _LL1160;} if( ! Cyc_Tcutil_same_atts( _temp1403, _temp1383)){ goto _LL1160;} if(
! ! Cyc_Tcutil_same_rgn_po( _temp1405, _temp1385)){ goto _LL1160;} return;}}}
! _LL1190: for( 0; _temp1421 !=  0? _temp1425 !=  0: 0;( _temp1421=(( struct Cyc_List_List*)
! _check_null( _temp1421))->tl, _temp1425=(( struct Cyc_List_List*) _check_null(
! _temp1425))->tl)){ Cyc_Tcutil_unify_tqual((*(( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp1421))->hd)).f1,(*(( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp1425))->hd)).f1); Cyc_Tcutil_unify_it((*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp1421))->hd)).f2,(*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp1425))->hd)).f2);} if( _temp1421 ==  0?
! _temp1425 ==  0: 0){ return;} goto _LL1160; _LL1192: _temp1441= _temp1433;
! _temp1437= _temp1429; goto _LL1194; _LL1194: for( 0; _temp1437 !=  0? _temp1441
! !=  0: 0;( _temp1437=(( struct Cyc_List_List*) _check_null( _temp1437))->tl,
! _temp1441=(( struct Cyc_List_List*) _check_null( _temp1441))->tl)){ struct Cyc_Absyn_Structfield*
! _temp1556=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp1437))->hd; struct Cyc_Absyn_Structfield* _temp1557=( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp1441))->hd; if( Cyc_Std_zstrptrcmp(
! _temp1556->name, _temp1557->name) !=  0){( int) _throw(( void*) Cyc_Tcutil_Unify);}
! Cyc_Tcutil_unify_tqual( _temp1556->tq, _temp1557->tq); Cyc_Tcutil_unify_it((
! void*) _temp1556->type,( void*) _temp1557->type); if((( ! Cyc_Tcutil_same_atts(
! _temp1556->attributes, _temp1557->attributes)? 1:( _temp1556->width !=  0?
! _temp1557->width ==  0: 0))? 1:( _temp1557->width !=  0? _temp1556->width ==  0:
! 0))? 1:(( _temp1556->width !=  0? _temp1557->width !=  0: 0)? Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1556->width)) !=  Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1557->width)): 0)){( int) _throw(( void*)
! Cyc_Tcutil_Unify);}} if( _temp1437 ==  0? _temp1441 ==  0: 0){ return;} goto
! _LL1160; _LL1196: return; _LL1198: Cyc_Tcutil_unify_it( _temp1453, _temp1449);
  return; _LL1200: goto _LL1202; _LL1202: goto _LL1204; _LL1204: goto _LL1206;
  _LL1206: goto _LL1208; _LL1208: goto _LL1210; _LL1210: if( Cyc_Tcutil_unify_effect(
  t1, t2)){ return;} else{ goto _LL1160;} _LL1212: goto _LL1160; _LL1160:;}( int)
  _throw(( void*) Cyc_Tcutil_Unify);} int Cyc_Tcutil_is_arithmetic_type( void* t){
! void* _temp1558= Cyc_Tcutil_compress( t); _LL1560: if(( unsigned int) _temp1558
! >  4u?*(( int*) _temp1558) ==  Cyc_Absyn_IntType: 0){ goto _LL1561;} else{ goto
! _LL1562;} _LL1562: if( _temp1558 == ( void*) Cyc_Absyn_FloatType){ goto _LL1563;}
! else{ goto _LL1564;} _LL1564: if( _temp1558 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL1565;} else{ goto _LL1566;} _LL1566: if(( unsigned int) _temp1558 >  4u?*((
! int*) _temp1558) ==  Cyc_Absyn_EnumType: 0){ goto _LL1567;} else{ goto _LL1568;}
! _LL1568: goto _LL1569; _LL1561: goto _LL1563; _LL1563: goto _LL1565; _LL1565:
! goto _LL1567; _LL1567: return 1; _LL1569: return 0; _LL1559:;} int Cyc_Tcutil_will_lose_precision(
  void* t1, void* t2){ t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress( t2);{
! struct _tuple8 _temp1571=({ struct _tuple8 _temp1570; _temp1570.f1= t1;
! _temp1570.f2= t2; _temp1570;}); void* _temp1593; void* _temp1595; void*
! _temp1597; void* _temp1599; void* _temp1601; void* _temp1603; void* _temp1605;
! void* _temp1607; void* _temp1609; void* _temp1611; void* _temp1613; void*
! _temp1615; void* _temp1617; void* _temp1619; void* _temp1621; void* _temp1623;
! void* _temp1625; void* _temp1627; void* _temp1629; void* _temp1631; void*
! _temp1633; void* _temp1635; void* _temp1637; void* _temp1639; void* _temp1641;
! void* _temp1643; void* _temp1645; _LL1573: _LL1596: _temp1595= _temp1571.f1; if(
! _temp1595 == ( void*) Cyc_Absyn_DoubleType){ goto _LL1594;} else{ goto _LL1575;}
! _LL1594: _temp1593= _temp1571.f2; if( _temp1593 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1574;} else{ goto _LL1575;} _LL1575: _LL1600: _temp1599= _temp1571.f1;
! if( _temp1599 == ( void*) Cyc_Absyn_DoubleType){ goto _LL1598;} else{ goto
! _LL1577;} _LL1598: _temp1597= _temp1571.f2; if(( unsigned int) _temp1597 >  4u?*((
! int*) _temp1597) ==  Cyc_Absyn_IntType: 0){ goto _LL1576;} else{ goto _LL1577;}
! _LL1577: _LL1604: _temp1603= _temp1571.f1; if( _temp1603 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1602;} else{ goto _LL1579;} _LL1602: _temp1601= _temp1571.f2; if((
! unsigned int) _temp1601 >  4u?*(( int*) _temp1601) ==  Cyc_Absyn_IntType: 0){
! goto _LL1578;} else{ goto _LL1579;} _LL1579: _LL1610: _temp1609= _temp1571.f1;
! if(( unsigned int) _temp1609 >  4u?*(( int*) _temp1609) ==  Cyc_Absyn_IntType: 0){
! _LL1612: _temp1611=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1609)->f2;
! if( _temp1611 == ( void*) Cyc_Absyn_B8){ goto _LL1606;} else{ goto _LL1581;}}
! else{ goto _LL1581;} _LL1606: _temp1605= _temp1571.f2; if(( unsigned int)
! _temp1605 >  4u?*(( int*) _temp1605) ==  Cyc_Absyn_IntType: 0){ _LL1608:
! _temp1607=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1605)->f2; if(
! _temp1607 == ( void*) Cyc_Absyn_B8){ goto _LL1580;} else{ goto _LL1581;}} else{
! goto _LL1581;} _LL1581: _LL1614: _temp1613= _temp1571.f1; if(( unsigned int)
! _temp1613 >  4u?*(( int*) _temp1613) ==  Cyc_Absyn_IntType: 0){ _LL1616:
! _temp1615=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1613)->f2; if(
! _temp1615 == ( void*) Cyc_Absyn_B8){ goto _LL1582;} else{ goto _LL1583;}} else{
! goto _LL1583;} _LL1583: _LL1620: _temp1619= _temp1571.f1; if(( unsigned int)
! _temp1619 >  4u?*(( int*) _temp1619) ==  Cyc_Absyn_IntType: 0){ _LL1622:
! _temp1621=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1619)->f2; if(
! _temp1621 == ( void*) Cyc_Absyn_B4){ goto _LL1618;} else{ goto _LL1585;}} else{
! goto _LL1585;} _LL1618: _temp1617= _temp1571.f2; if( _temp1617 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1584;} else{ goto _LL1585;} _LL1585: _LL1628: _temp1627= _temp1571.f1;
! if(( unsigned int) _temp1627 >  4u?*(( int*) _temp1627) ==  Cyc_Absyn_IntType: 0){
! _LL1630: _temp1629=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1627)->f2;
! if( _temp1629 == ( void*) Cyc_Absyn_B4){ goto _LL1624;} else{ goto _LL1587;}}
! else{ goto _LL1587;} _LL1624: _temp1623= _temp1571.f2; if(( unsigned int)
! _temp1623 >  4u?*(( int*) _temp1623) ==  Cyc_Absyn_IntType: 0){ _LL1626:
! _temp1625=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1623)->f2; if(
! _temp1625 == ( void*) Cyc_Absyn_B2){ goto _LL1586;} else{ goto _LL1587;}} else{
! goto _LL1587;} _LL1587: _LL1636: _temp1635= _temp1571.f1; if(( unsigned int)
! _temp1635 >  4u?*(( int*) _temp1635) ==  Cyc_Absyn_IntType: 0){ _LL1638:
! _temp1637=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1635)->f2; if(
! _temp1637 == ( void*) Cyc_Absyn_B4){ goto _LL1632;} else{ goto _LL1589;}} else{
! goto _LL1589;} _LL1632: _temp1631= _temp1571.f2; if(( unsigned int) _temp1631 > 
! 4u?*(( int*) _temp1631) ==  Cyc_Absyn_IntType: 0){ _LL1634: _temp1633=( void*)((
! struct Cyc_Absyn_IntType_struct*) _temp1631)->f2; if( _temp1633 == ( void*) Cyc_Absyn_B1){
! goto _LL1588;} else{ goto _LL1589;}} else{ goto _LL1589;} _LL1589: _LL1644:
! _temp1643= _temp1571.f1; if(( unsigned int) _temp1643 >  4u?*(( int*) _temp1643)
! ==  Cyc_Absyn_IntType: 0){ _LL1646: _temp1645=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1643)->f2; if( _temp1645 == ( void*) Cyc_Absyn_B2){ goto _LL1640;} else{
! goto _LL1591;}} else{ goto _LL1591;} _LL1640: _temp1639= _temp1571.f2; if((
! unsigned int) _temp1639 >  4u?*(( int*) _temp1639) ==  Cyc_Absyn_IntType: 0){
! _LL1642: _temp1641=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1639)->f2;
! if( _temp1641 == ( void*) Cyc_Absyn_B1){ goto _LL1590;} else{ goto _LL1591;}}
! else{ goto _LL1591;} _LL1591: goto _LL1592; _LL1574: goto _LL1576; _LL1576: goto
! _LL1578; _LL1578: return 1; _LL1580: return 0; _LL1582: goto _LL1584; _LL1584:
! goto _LL1586; _LL1586: goto _LL1588; _LL1588: goto _LL1590; _LL1590: return 1;
! _LL1592: return 0; _LL1572:;}} int Cyc_Tcutil_coerce_list( struct Cyc_Tcenv_Tenv*
  te, void* t, struct Cyc_List_List* es){ struct Cyc_Core_Opt* max_arith_type= 0;{
  struct Cyc_List_List* el= es; for( 0; el !=  0; el=(( struct Cyc_List_List*)
  _check_null( el))->tl){ void* t1= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
  _check_null((( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( el))->hd)->topt))->v);
  if( Cyc_Tcutil_is_arithmetic_type( t1)){ if( max_arith_type ==  0? 1: Cyc_Tcutil_will_lose_precision(
  t1,( void*)(( struct Cyc_Core_Opt*) _check_null( max_arith_type))->v)){
! max_arith_type=( struct Cyc_Core_Opt*)({ struct Cyc_Core_Opt* _temp1647=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1647->v=( void*)
! t1; _temp1647;});}}}} if( max_arith_type !=  0){ if( ! Cyc_Tcutil_unify( t,(
  void*)(( struct Cyc_Core_Opt*) _check_null( max_arith_type))->v)){ return 0;}}{
  struct Cyc_List_List* el= es; for( 0; el !=  0; el=(( struct Cyc_List_List*)
  _check_null( el))->tl){ if( ! Cyc_Tcutil_coerce_assign( te,( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( el))->hd, t)){({ struct Cyc_Std_String_pa_struct
! _temp1650; _temp1650.tag= Cyc_Std_String_pa; _temp1650.f1=( struct _tagged_arr)
  Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*) _check_null((( struct
  Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( el))->hd)->topt))->v);{
! struct Cyc_Std_String_pa_struct _temp1649; _temp1649.tag= Cyc_Std_String_pa;
! _temp1649.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp1648[
! 2u]={& _temp1649,& _temp1650}; Cyc_Tcutil_terr((( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( el))->hd)->loc, _tag_arr("type mismatch: expecting %s but found %s",
! sizeof( unsigned char), 41u), _tag_arr( _temp1648, sizeof( void*), 2u));}}});
  return 0;}}} return 1;} int Cyc_Tcutil_coerce_to_bool( struct Cyc_Tcenv_Tenv* te,
  struct Cyc_Absyn_Exp* e){ if( ! Cyc_Tcutil_coerce_sint_typ( te, e)){ void*
! _temp1651= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);
! _LL1653: if(( unsigned int) _temp1651 >  4u?*(( int*) _temp1651) ==  Cyc_Absyn_PointerType:
! 0){ goto _LL1654;} else{ goto _LL1655;} _LL1655: goto _LL1656; _LL1654: Cyc_Tcutil_unchecked_cast(
! te, e, Cyc_Absyn_uint_t); goto _LL1652; _LL1656: return 0; _LL1652:;} return 1;}
! int Cyc_Tcutil_is_integral_type( void* t){ void* _temp1657= Cyc_Tcutil_compress(
! t); _LL1659: if(( unsigned int) _temp1657 >  4u?*(( int*) _temp1657) ==  Cyc_Absyn_IntType:
! 0){ goto _LL1660;} else{ goto _LL1661;} _LL1661: if(( unsigned int) _temp1657 > 
! 4u?*(( int*) _temp1657) ==  Cyc_Absyn_EnumType: 0){ goto _LL1662;} else{ goto
! _LL1663;} _LL1663: goto _LL1664; _LL1660: goto _LL1662; _LL1662: return 1;
! _LL1664: return 0; _LL1658:;} int Cyc_Tcutil_coerce_uint_typ( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_Absyn_Exp* e){ if( Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*)
  _check_null( e->topt))->v, Cyc_Absyn_uint_t)){ return 1;} if( Cyc_Tcutil_is_integral_type((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v)){ if( Cyc_Tcutil_will_lose_precision((
  void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v, Cyc_Absyn_uint_t)){({
! void* _temp1665[ 0u]={}; Cyc_Tcutil_warn( e->loc, _tag_arr("integral size mismatch; conversion supplied",
! sizeof( unsigned char), 44u), _tag_arr( _temp1665, sizeof( void*), 0u));});} Cyc_Tcutil_unchecked_cast(
  te, e, Cyc_Absyn_uint_t); return 1;} return 0;} int Cyc_Tcutil_coerce_sint_typ(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e){ if( Cyc_Tcutil_unify(( void*)((
  struct Cyc_Core_Opt*) _check_null( e->topt))->v, Cyc_Absyn_sint_t)){ return 1;}
  if( Cyc_Tcutil_is_integral_type(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v)){
  if( Cyc_Tcutil_will_lose_precision(( void*)(( struct Cyc_Core_Opt*) _check_null(
! e->topt))->v, Cyc_Absyn_sint_t)){({ void* _temp1666[ 0u]={}; Cyc_Tcutil_warn( e->loc,
  _tag_arr("integral size mismatch; conversion supplied", sizeof( unsigned char),
! 44u), _tag_arr( _temp1666, sizeof( void*), 0u));});} Cyc_Tcutil_unchecked_cast(
  te, e, Cyc_Absyn_sint_t); return 1;} return 0;} int Cyc_Tcutil_silent_castable(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void* t1, void* t2){
  t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress( t2);{ struct _tuple8
! _temp1668=({ struct _tuple8 _temp1667; _temp1667.f1= t1; _temp1667.f2= t2;
! _temp1667;}); void* _temp1680; struct Cyc_Absyn_PtrInfo _temp1682; void*
! _temp1684; struct Cyc_Absyn_PtrInfo _temp1686; void* _temp1688; struct Cyc_Absyn_Exp*
! _temp1690; struct Cyc_Absyn_Tqual _temp1692; void* _temp1694; void* _temp1696;
! struct Cyc_Absyn_Exp* _temp1698; struct Cyc_Absyn_Tqual _temp1700; void*
! _temp1702; void* _temp1704; struct Cyc_Absyn_TunionInfo _temp1706; struct Cyc_List_List*
! _temp1708; void* _temp1710; struct Cyc_Absyn_Tuniondecl* _temp1712; void*
! _temp1714; struct Cyc_Absyn_TunionFieldInfo _temp1716; struct Cyc_List_List*
! _temp1718; void* _temp1720; struct Cyc_Absyn_Tunionfield* _temp1722; struct Cyc_Absyn_Tuniondecl*
! _temp1724; void* _temp1726; struct Cyc_Absyn_TunionInfo _temp1728; void*
! _temp1730; struct Cyc_List_List* _temp1732; void* _temp1734; struct Cyc_Absyn_Tuniondecl*
! _temp1736; void* _temp1738; struct Cyc_Absyn_PtrInfo _temp1740; struct Cyc_Absyn_Conref*
! _temp1742; struct Cyc_Absyn_Tqual _temp1744; struct Cyc_Absyn_Conref* _temp1746;
! void* _temp1748; void* _temp1750; _LL1670: _LL1685: _temp1684= _temp1668.f1; if((
! unsigned int) _temp1684 >  4u?*(( int*) _temp1684) ==  Cyc_Absyn_PointerType: 0){
! _LL1687: _temp1686=(( struct Cyc_Absyn_PointerType_struct*) _temp1684)->f1; goto
! _LL1681;} else{ goto _LL1672;} _LL1681: _temp1680= _temp1668.f2; if((
! unsigned int) _temp1680 >  4u?*(( int*) _temp1680) ==  Cyc_Absyn_PointerType: 0){
! _LL1683: _temp1682=(( struct Cyc_Absyn_PointerType_struct*) _temp1680)->f1; goto
! _LL1671;} else{ goto _LL1672;} _LL1672: _LL1697: _temp1696= _temp1668.f1; if((
! unsigned int) _temp1696 >  4u?*(( int*) _temp1696) ==  Cyc_Absyn_ArrayType: 0){
! _LL1703: _temp1702=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1696)->f1;
! goto _LL1701; _LL1701: _temp1700=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1696)->f2; goto _LL1699; _LL1699: _temp1698=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1696)->f3; goto _LL1689;} else{ goto _LL1674;} _LL1689: _temp1688=
! _temp1668.f2; if(( unsigned int) _temp1688 >  4u?*(( int*) _temp1688) ==  Cyc_Absyn_ArrayType:
! 0){ _LL1695: _temp1694=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1688)->f1;
! goto _LL1693; _LL1693: _temp1692=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1688)->f2; goto _LL1691; _LL1691: _temp1690=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1688)->f3; goto _LL1673;} else{ goto _LL1674;} _LL1674: _LL1715: _temp1714=
! _temp1668.f1; if(( unsigned int) _temp1714 >  4u?*(( int*) _temp1714) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL1717: _temp1716=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp1714)->f1;
! _LL1721: _temp1720=( void*) _temp1716.field_info; if(*(( int*) _temp1720) == 
! Cyc_Absyn_KnownTunionfield){ _LL1725: _temp1724=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1720)->f1; goto _LL1723; _LL1723: _temp1722=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1720)->f2; goto _LL1719;} else{ goto _LL1676;} _LL1719: _temp1718=
! _temp1716.targs; goto _LL1705;} else{ goto _LL1676;} _LL1705: _temp1704=
! _temp1668.f2; if(( unsigned int) _temp1704 >  4u?*(( int*) _temp1704) ==  Cyc_Absyn_TunionType:
! 0){ _LL1707: _temp1706=(( struct Cyc_Absyn_TunionType_struct*) _temp1704)->f1;
! _LL1711: _temp1710=( void*) _temp1706.tunion_info; if(*(( int*) _temp1710) == 
! Cyc_Absyn_KnownTunion){ _LL1713: _temp1712=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1710)->f1; goto _LL1709;} else{ goto _LL1676;} _LL1709: _temp1708=
! _temp1706.targs; goto _LL1675;} else{ goto _LL1676;} _LL1676: _LL1739: _temp1738=
! _temp1668.f1; if(( unsigned int) _temp1738 >  4u?*(( int*) _temp1738) ==  Cyc_Absyn_PointerType:
! 0){ _LL1741: _temp1740=(( struct Cyc_Absyn_PointerType_struct*) _temp1738)->f1;
! _LL1751: _temp1750=( void*) _temp1740.elt_typ; goto _LL1749; _LL1749: _temp1748=(
! void*) _temp1740.rgn_typ; goto _LL1747; _LL1747: _temp1746= _temp1740.nullable;
! goto _LL1745; _LL1745: _temp1744= _temp1740.tq; goto _LL1743; _LL1743: _temp1742=
! _temp1740.bounds; goto _LL1727;} else{ goto _LL1678;} _LL1727: _temp1726=
! _temp1668.f2; if(( unsigned int) _temp1726 >  4u?*(( int*) _temp1726) ==  Cyc_Absyn_TunionType:
! 0){ _LL1729: _temp1728=(( struct Cyc_Absyn_TunionType_struct*) _temp1726)->f1;
! _LL1735: _temp1734=( void*) _temp1728.tunion_info; if(*(( int*) _temp1734) == 
! Cyc_Absyn_KnownTunion){ _LL1737: _temp1736=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp1734)->f1; goto _LL1733;} else{ goto _LL1678;} _LL1733: _temp1732=
! _temp1728.targs; goto _LL1731; _LL1731: _temp1730=( void*) _temp1728.rgn; goto
! _LL1677;} else{ goto _LL1678;} _LL1678: goto _LL1679; _LL1671: { int okay= 1;
! if( !(( int(*)( int(* cmp)( int, int), struct Cyc_Absyn_Conref* x, struct Cyc_Absyn_Conref*
! y)) Cyc_Tcutil_unify_conrefs)( Cyc_Core_intcmp, _temp1686.nullable, _temp1682.nullable)){
! void* _temp1752=( void*)((( struct Cyc_Absyn_Conref*(*)( struct Cyc_Absyn_Conref*
! x)) Cyc_Absyn_compress_conref)( _temp1686.nullable))->v; int _temp1758; _LL1754:
! if(( unsigned int) _temp1752 >  1u?*(( int*) _temp1752) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1759: _temp1758=( int)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1752)->f1;
! goto _LL1755;} else{ goto _LL1756;} _LL1756: goto _LL1757; _LL1755: okay= !
! _temp1758; goto _LL1753; _LL1757:( int) _throw(({ void* _temp1760[ 0u]={}; Cyc_Tcutil_impos(
! _tag_arr("silent_castable conref not eq", sizeof( unsigned char), 30u), _tag_arr(
! _temp1760, sizeof( void*), 0u));})); _LL1753:;} if( ! Cyc_Tcutil_unify_conrefs(
! Cyc_Tcutil_boundscmp, _temp1686.bounds, _temp1682.bounds)){ struct _tuple8
! _temp1762=({ struct _tuple8 _temp1761; _temp1761.f1=( void*)( Cyc_Absyn_compress_conref(
! _temp1686.bounds))->v; _temp1761.f2=( void*)( Cyc_Absyn_compress_conref(
! _temp1682.bounds))->v; _temp1761;}); void* _temp1772; void* _temp1774; void*
! _temp1776; void* _temp1778; void* _temp1780; void* _temp1782; struct Cyc_Absyn_Exp*
! _temp1784; void* _temp1786; void* _temp1788; struct Cyc_Absyn_Exp* _temp1790;
! void* _temp1792; void* _temp1794; void* _temp1796; void* _temp1798; _LL1764:
! _LL1777: _temp1776= _temp1762.f1; if(( unsigned int) _temp1776 >  1u?*(( int*)
! _temp1776) ==  Cyc_Absyn_Eq_constr: 0){ _LL1779: _temp1778=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp1776)->f1; if(( unsigned int) _temp1778 >  1u?*(( int*) _temp1778) ==  Cyc_Absyn_Upper_b:
! 0){ goto _LL1773;} else{ goto _LL1766;}} else{ goto _LL1766;} _LL1773: _temp1772=
! _temp1762.f2; if(( unsigned int) _temp1772 >  1u?*(( int*) _temp1772) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1775: _temp1774=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1772)->f1;
! if( _temp1774 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1765;} else{ goto
! _LL1766;}} else{ goto _LL1766;} _LL1766: _LL1787: _temp1786= _temp1762.f1; if((
! unsigned int) _temp1786 >  1u?*(( int*) _temp1786) ==  Cyc_Absyn_Eq_constr: 0){
! _LL1789: _temp1788=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1786)->f1;
! if(( unsigned int) _temp1788 >  1u?*(( int*) _temp1788) ==  Cyc_Absyn_Upper_b: 0){
! _LL1791: _temp1790=(( struct Cyc_Absyn_Upper_b_struct*) _temp1788)->f1; goto
! _LL1781;} else{ goto _LL1768;}} else{ goto _LL1768;} _LL1781: _temp1780=
! _temp1762.f2; if(( unsigned int) _temp1780 >  1u?*(( int*) _temp1780) ==  Cyc_Absyn_Eq_constr:
  0){ _LL1783: _temp1782=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1780)->f1;
  if(( unsigned int) _temp1782 >  1u?*(( int*) _temp1782) ==  Cyc_Absyn_Upper_b: 0){
! _LL1785: _temp1784=(( struct Cyc_Absyn_Upper_b_struct*) _temp1782)->f1; goto
! _LL1767;} else{ goto _LL1768;}} else{ goto _LL1768;} _LL1768: _LL1797: _temp1796=
! _temp1762.f1; if(( unsigned int) _temp1796 >  1u?*(( int*) _temp1796) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL1799: _temp1798=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1796)->f1;
! if( _temp1798 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1793;} else{ goto
! _LL1770;}} else{ goto _LL1770;} _LL1793: _temp1792= _temp1762.f2; if((
! unsigned int) _temp1792 >  1u?*(( int*) _temp1792) ==  Cyc_Absyn_Eq_constr: 0){
! _LL1795: _temp1794=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp1792)->f1;
! if( _temp1794 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1769;} else{ goto
! _LL1770;}} else{ goto _LL1770;} _LL1770: goto _LL1771; _LL1765: okay= 1; goto
! _LL1763; _LL1767: okay= okay? Cyc_Evexp_eval_const_uint_exp( _temp1790) >=  Cyc_Evexp_eval_const_uint_exp(
! _temp1784): 0;({ void* _temp1800[ 0u]={}; Cyc_Tcutil_warn( loc, _tag_arr("implicit cast to shorter array",
! sizeof( unsigned char), 31u), _tag_arr( _temp1800, sizeof( void*), 0u));}); goto
! _LL1763; _LL1769: okay= 1; goto _LL1763; _LL1771: okay= 0; goto _LL1763; _LL1763:;}
! okay= okay? Cyc_Tcutil_unify(( void*) _temp1686.elt_typ,( void*) _temp1682.elt_typ):
! 0; okay= okay? Cyc_Tcutil_unify(( void*) _temp1686.rgn_typ,( void*) _temp1682.rgn_typ)?
! 1: Cyc_Tcenv_region_outlives( te,( void*) _temp1686.rgn_typ,( void*) _temp1682.rgn_typ):
! 0; okay= okay? !( _temp1686.tq).q_const? 1:( _temp1682.tq).q_const: 0; return
! okay;} _LL1673: { int okay; okay=( _temp1698 !=  0? _temp1690 !=  0: 0)? Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1698)) ==  Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1690)): 0; return( okay? Cyc_Tcutil_unify(
! _temp1702, _temp1694): 0)? ! _temp1700.q_const? 1: _temp1692.q_const: 0;}
! _LL1675: if(( _temp1724 ==  _temp1712? 1: Cyc_Absyn_qvar_cmp( _temp1724->name,
! _temp1712->name) ==  0)? _temp1722->typs ==  0: 0){ for( 0; _temp1718 !=  0?
! _temp1708 !=  0: 0;( _temp1718=(( struct Cyc_List_List*) _check_null( _temp1718))->tl,
! _temp1708=(( struct Cyc_List_List*) _check_null( _temp1708))->tl)){ if( ! Cyc_Tcutil_unify((
! void*)(( struct Cyc_List_List*) _check_null( _temp1718))->hd,( void*)(( struct
! Cyc_List_List*) _check_null( _temp1708))->hd)){ break;}} if( _temp1718 ==  0?
! _temp1708 ==  0: 0){ return 1;}} return 0; _LL1677:{ void* _temp1801= Cyc_Tcutil_compress(
! _temp1750); struct Cyc_Absyn_TunionFieldInfo _temp1807; struct Cyc_List_List*
! _temp1809; void* _temp1811; struct Cyc_Absyn_Tunionfield* _temp1813; struct Cyc_Absyn_Tuniondecl*
! _temp1815; _LL1803: if(( unsigned int) _temp1801 >  4u?*(( int*) _temp1801) == 
! Cyc_Absyn_TunionFieldType: 0){ _LL1808: _temp1807=(( struct Cyc_Absyn_TunionFieldType_struct*)
! _temp1801)->f1; _LL1812: _temp1811=( void*) _temp1807.field_info; if(*(( int*)
! _temp1811) ==  Cyc_Absyn_KnownTunionfield){ _LL1816: _temp1815=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1811)->f1; goto _LL1814; _LL1814: _temp1813=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp1811)->f2; goto _LL1810;} else{ goto _LL1805;} _LL1810: _temp1809=
! _temp1807.targs; goto _LL1804;} else{ goto _LL1805;} _LL1805: goto _LL1806;
! _LL1804: if( ! Cyc_Tcutil_unify( _temp1748, _temp1730)? ! Cyc_Tcenv_region_outlives(
! te, _temp1748, _temp1730): 0){ return 0;} if( !(( int(*)( int(* cmp)( int, int),
  struct Cyc_Absyn_Conref* x, struct Cyc_Absyn_Conref* y)) Cyc_Tcutil_unify_conrefs)(
! Cyc_Core_intcmp, _temp1746,(( struct Cyc_Absyn_Conref*(*)( int x)) Cyc_Absyn_new_conref)(
! 0))){ return 0;} if( ! Cyc_Tcutil_unify_conrefs( Cyc_Tcutil_boundscmp, _temp1742,
  Cyc_Absyn_new_conref( Cyc_Absyn_bounds_one))){ return 0;} if( Cyc_Absyn_qvar_cmp(
! _temp1736->name, _temp1815->name) ==  0? _temp1813->typs !=  0: 0){ int okay= 1;
! for( 0; _temp1809 !=  0? _temp1732 !=  0: 0;( _temp1809=(( struct Cyc_List_List*)
! _check_null( _temp1809))->tl, _temp1732=(( struct Cyc_List_List*) _check_null(
! _temp1732))->tl)){ if( ! Cyc_Tcutil_unify(( void*)(( struct Cyc_List_List*)
! _check_null( _temp1809))->hd,( void*)(( struct Cyc_List_List*) _check_null(
! _temp1732))->hd)){ okay= 0; break;}} if(( ! okay? 1: _temp1809 !=  0)? 1:
! _temp1732 !=  0){ return 0;} return 1;} goto _LL1802; _LL1806: goto _LL1802;
! _LL1802:;} return 0; _LL1679: return Cyc_Tcutil_unify( t1, t2); _LL1669:;}} int
  Cyc_Tcutil_coerce_arg( struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e, void*
  t2){ void* t1= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
  e->topt))->v); if( Cyc_Tcutil_unify( t1, t2)){ return 1;} if( Cyc_Tcutil_is_arithmetic_type(
  t1)? Cyc_Tcutil_is_arithmetic_type( t2): 0){ if( Cyc_Tcutil_will_lose_precision(
! t1, t2)){({ void* _temp1817[ 0u]={}; Cyc_Tcutil_warn( e->loc, _tag_arr("integral size mismatch; conversion supplied",
! sizeof( unsigned char), 44u), _tag_arr( _temp1817, sizeof( void*), 0u));});} Cyc_Tcutil_unchecked_cast(
  te, e, t2); return 1;} else{ if( Cyc_Tcutil_silent_castable( te, e->loc, t1, t2)){
  Cyc_Tcutil_unchecked_cast( te, e, t2); return 1;} else{ if( Cyc_Tcutil_castable(
  te, e->loc, t1, t2)){ Cyc_Tcutil_unchecked_cast( te, e, t2);({ struct Cyc_Std_String_pa_struct
! _temp1820; _temp1820.tag= Cyc_Std_String_pa; _temp1820.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t2);{ struct Cyc_Std_String_pa_struct _temp1819;
! _temp1819.tag= Cyc_Std_String_pa; _temp1819.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t1);{ void* _temp1818[ 2u]={& _temp1819,& _temp1820}; Cyc_Tcutil_warn( e->loc,
  _tag_arr("implicit cast from %s to %s", sizeof( unsigned char), 28u), _tag_arr(
! _temp1818, sizeof( void*), 2u));}}}); return 1;} else{ return 0;}}}} int Cyc_Tcutil_coerce_assign(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e, void* t){ return Cyc_Tcutil_coerce_arg(
! te, e, t);} int Cyc_Tcutil_coerceable( void* t){ void* _temp1821= Cyc_Tcutil_compress(
! t); _LL1823: if(( unsigned int) _temp1821 >  4u?*(( int*) _temp1821) ==  Cyc_Absyn_IntType:
! 0){ goto _LL1824;} else{ goto _LL1825;} _LL1825: if( _temp1821 == ( void*) Cyc_Absyn_FloatType){
! goto _LL1826;} else{ goto _LL1827;} _LL1827: if( _temp1821 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL1828;} else{ goto _LL1829;} _LL1829: goto _LL1830; _LL1824: goto _LL1826;
! _LL1826: goto _LL1828; _LL1828: return 1; _LL1830: return 0; _LL1822:;} static
  struct _tuple4* Cyc_Tcutil_flatten_typ_f( struct Cyc_List_List* inst, struct Cyc_Absyn_Structfield*
! x){ return({ struct _tuple4* _temp1831=( struct _tuple4*) _cycalloc( sizeof(
! struct _tuple4)); _temp1831->f1= x->tq; _temp1831->f2= Cyc_Tcutil_substitute(
! inst,( void*) x->type); _temp1831;});} static struct Cyc_List_List* Cyc_Tcutil_flatten_typ(
  struct Cyc_Tcenv_Tenv* te, void* t1){ t1= Cyc_Tcutil_compress( t1);{ void*
! _temp1832= t1; struct Cyc_List_List* _temp1844; struct Cyc_Absyn_Structdecl**
! _temp1846; struct Cyc_List_List* _temp1848; struct _tuple1* _temp1850; struct
! Cyc_List_List* _temp1852; _LL1834: if( _temp1832 == ( void*) Cyc_Absyn_VoidType){
! goto _LL1835;} else{ goto _LL1836;} _LL1836: if(( unsigned int) _temp1832 >  4u?*((
! int*) _temp1832) ==  Cyc_Absyn_TupleType: 0){ _LL1845: _temp1844=(( struct Cyc_Absyn_TupleType_struct*)
! _temp1832)->f1; goto _LL1837;} else{ goto _LL1838;} _LL1838: if(( unsigned int)
! _temp1832 >  4u?*(( int*) _temp1832) ==  Cyc_Absyn_StructType: 0){ _LL1851:
! _temp1850=(( struct Cyc_Absyn_StructType_struct*) _temp1832)->f1; goto _LL1849;
! _LL1849: _temp1848=(( struct Cyc_Absyn_StructType_struct*) _temp1832)->f2; goto
! _LL1847; _LL1847: _temp1846=(( struct Cyc_Absyn_StructType_struct*) _temp1832)->f3;
! goto _LL1839;} else{ goto _LL1840;} _LL1840: if(( unsigned int) _temp1832 >  4u?*((
! int*) _temp1832) ==  Cyc_Absyn_AnonStructType: 0){ _LL1853: _temp1852=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp1832)->f1; goto _LL1841;} else{ goto
! _LL1842;} _LL1842: goto _LL1843; _LL1835: return 0; _LL1837: return _temp1844;
! _LL1839: if( _temp1846 ==  0? 1: _temp1850 ==  0){ return({ struct Cyc_List_List*
! _temp1854=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1854->hd=( void*)({ struct _tuple4* _temp1855=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp1855->f1= Cyc_Absyn_empty_tqual(); _temp1855->f2=
! t1; _temp1855;}); _temp1854->tl= 0; _temp1854;});}{ struct Cyc_Absyn_Structdecl*
! _temp1856=*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp1846)); struct
! _tuple1 _temp1857=*(( struct _tuple1*) _check_null( _temp1850)); struct Cyc_List_List*
! _temp1858=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_zip)( _temp1856->tvs, _temp1848); if( _temp1856->fields ==  0){
! return({ struct Cyc_List_List* _temp1859=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1859->hd=( void*)({ struct _tuple4*
! _temp1860=( struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp1860->f1=
! Cyc_Absyn_empty_tqual(); _temp1860->f2= t1; _temp1860;}); _temp1859->tl= 0;
! _temp1859;});} return(( struct Cyc_List_List*(*)( struct _tuple4*(* f)( struct
  Cyc_List_List*, struct Cyc_Absyn_Structfield*), struct Cyc_List_List* env,
! struct Cyc_List_List* x)) Cyc_List_map_c)( Cyc_Tcutil_flatten_typ_f, _temp1858,(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1856->fields))->v);}
! _LL1841: return(( struct Cyc_List_List*(*)( struct _tuple4*(* f)( struct Cyc_List_List*,
  struct Cyc_Absyn_Structfield*), struct Cyc_List_List* env, struct Cyc_List_List*
! x)) Cyc_List_map_c)( Cyc_Tcutil_flatten_typ_f, 0, _temp1852); _LL1843: return({
! struct Cyc_List_List* _temp1861=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1861->hd=( void*)({ struct _tuple4* _temp1862=(
! struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp1862->f1= Cyc_Absyn_empty_tqual();
! _temp1862->f2= t1; _temp1862;}); _temp1861->tl= 0; _temp1861;}); _LL1833:;}}
  static int Cyc_Tcutil_ptrsubtype( struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List*
  assume, void* t1, void* t2); static int Cyc_Tcutil_subtype( struct Cyc_Tcenv_Tenv*
  te, struct Cyc_List_List* assume, void* t1, void* t2){ if( Cyc_Tcutil_unify( t1,
***************
*** 2575,3279 ****
  _tuple8*)(( struct Cyc_List_List*) _check_null( a))->hd)).f1)? Cyc_Tcutil_unify(
  t2,(*(( struct _tuple8*)(( struct Cyc_List_List*) _check_null( a))->hd)).f2): 0){
  return 1;}}} t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress( t2);{ struct
! _tuple8 _temp1868=({ struct _tuple8 _temp1867; _temp1867.f1= t1; _temp1867.f2=
! t2; _temp1867;}); void* _temp1874; struct Cyc_Absyn_PtrInfo _temp1876; struct
! Cyc_Absyn_Conref* _temp1878; struct Cyc_Absyn_Tqual _temp1880; struct Cyc_Absyn_Conref*
! _temp1882; void* _temp1884; void* _temp1886; void* _temp1888; struct Cyc_Absyn_PtrInfo
! _temp1890; struct Cyc_Absyn_Conref* _temp1892; struct Cyc_Absyn_Tqual _temp1894;
! struct Cyc_Absyn_Conref* _temp1896; void* _temp1898; void* _temp1900; _LL1870:
! _LL1889: _temp1888= _temp1868.f1; if(( unsigned int) _temp1888 >  4u?*(( int*)
! _temp1888) ==  Cyc_Absyn_PointerType: 0){ _LL1891: _temp1890=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1888)->f1; _LL1901: _temp1900=( void*) _temp1890.elt_typ; goto _LL1899;
! _LL1899: _temp1898=( void*) _temp1890.rgn_typ; goto _LL1897; _LL1897: _temp1896=
! _temp1890.nullable; goto _LL1895; _LL1895: _temp1894= _temp1890.tq; goto _LL1893;
! _LL1893: _temp1892= _temp1890.bounds; goto _LL1875;} else{ goto _LL1872;}
! _LL1875: _temp1874= _temp1868.f2; if(( unsigned int) _temp1874 >  4u?*(( int*)
! _temp1874) ==  Cyc_Absyn_PointerType: 0){ _LL1877: _temp1876=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1874)->f1; _LL1887: _temp1886=( void*) _temp1876.elt_typ; goto _LL1885;
! _LL1885: _temp1884=( void*) _temp1876.rgn_typ; goto _LL1883; _LL1883: _temp1882=
! _temp1876.nullable; goto _LL1881; _LL1881: _temp1880= _temp1876.tq; goto _LL1879;
! _LL1879: _temp1878= _temp1876.bounds; goto _LL1871;} else{ goto _LL1872;}
! _LL1872: goto _LL1873; _LL1871: if( _temp1894.q_const? ! _temp1880.q_const: 0){
  return 0;} if(( !(( int(*)( int(* cmp)( int, int), struct Cyc_Absyn_Conref* x,
  struct Cyc_Absyn_Conref* y)) Cyc_Tcutil_unify_conrefs)( Cyc_Core_intcmp,
! _temp1896, _temp1882)?(( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp1896): 0)? !(( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp1882): 0){ return 0;} if( ! Cyc_Tcutil_unify( _temp1898, _temp1884)? ! Cyc_Tcenv_region_outlives(
! te, _temp1898, _temp1884): 0){ return 0;} if( ! Cyc_Tcutil_unify_conrefs( Cyc_Tcutil_boundscmp,
! _temp1892, _temp1878)){ struct _tuple8 _temp1903=({ struct _tuple8 _temp1902;
! _temp1902.f1= Cyc_Absyn_conref_val( _temp1892); _temp1902.f2= Cyc_Absyn_conref_val(
! _temp1878); _temp1902;}); void* _temp1911; void* _temp1913; void* _temp1915;
! struct Cyc_Absyn_Exp* _temp1917; void* _temp1919; struct Cyc_Absyn_Exp*
! _temp1921; _LL1905: _LL1914: _temp1913= _temp1903.f1; if(( unsigned int)
! _temp1913 >  1u?*(( int*) _temp1913) ==  Cyc_Absyn_Upper_b: 0){ goto _LL1912;}
! else{ goto _LL1907;} _LL1912: _temp1911= _temp1903.f2; if( _temp1911 == ( void*)
! Cyc_Absyn_Unknown_b){ goto _LL1906;} else{ goto _LL1907;} _LL1907: _LL1920:
! _temp1919= _temp1903.f1; if(( unsigned int) _temp1919 >  1u?*(( int*) _temp1919)
! ==  Cyc_Absyn_Upper_b: 0){ _LL1922: _temp1921=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1919)->f1; goto _LL1916;} else{ goto _LL1909;} _LL1916: _temp1915=
! _temp1903.f2; if(( unsigned int) _temp1915 >  1u?*(( int*) _temp1915) ==  Cyc_Absyn_Upper_b:
! 0){ _LL1918: _temp1917=(( struct Cyc_Absyn_Upper_b_struct*) _temp1915)->f1; goto
! _LL1908;} else{ goto _LL1909;} _LL1909: goto _LL1910; _LL1906: goto _LL1904;
! _LL1908: if( Cyc_Evexp_eval_const_uint_exp( _temp1921) <  Cyc_Evexp_eval_const_uint_exp(
! _temp1917)){ return 0;} goto _LL1904; _LL1910: return 0; _LL1904:;} return Cyc_Tcutil_ptrsubtype(
! te,({ struct Cyc_List_List* _temp1923=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1923->hd=( void*)({ struct _tuple8*
! _temp1924=( struct _tuple8*) _cycalloc( sizeof( struct _tuple8)); _temp1924->f1=
! t1; _temp1924->f2= t2; _temp1924;}); _temp1923->tl= assume; _temp1923;}),
! _temp1900, _temp1886); _LL1873: return 0; _LL1869:;}} static int Cyc_Tcutil_isomorphic(
! void* t1, void* t2){ struct _tuple8 _temp1926=({ struct _tuple8 _temp1925;
! _temp1925.f1= Cyc_Tcutil_compress( t1); _temp1925.f2= Cyc_Tcutil_compress( t2);
! _temp1925;}); void* _temp1932; void* _temp1934; void* _temp1936; void* _temp1938;
! _LL1928: _LL1937: _temp1936= _temp1926.f1; if(( unsigned int) _temp1936 >  4u?*((
! int*) _temp1936) ==  Cyc_Absyn_IntType: 0){ _LL1939: _temp1938=( void*)(( struct
! Cyc_Absyn_IntType_struct*) _temp1936)->f2; goto _LL1933;} else{ goto _LL1930;}
! _LL1933: _temp1932= _temp1926.f2; if(( unsigned int) _temp1932 >  4u?*(( int*)
! _temp1932) ==  Cyc_Absyn_IntType: 0){ _LL1935: _temp1934=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1932)->f2; goto _LL1929;} else{ goto _LL1930;} _LL1930: goto _LL1931;
! _LL1929: return _temp1938 ==  _temp1934; _LL1931: return 0; _LL1927:;} static
  int Cyc_Tcutil_ptrsubtype( struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List*
  assume, void* t1, void* t2){ struct Cyc_List_List* tqs1= Cyc_Tcutil_flatten_typ(
  te, t1); struct Cyc_List_List* tqs2= Cyc_Tcutil_flatten_typ( te, t2); for( 0;
  tqs2 !=  0;( tqs2=(( struct Cyc_List_List*) _check_null( tqs2))->tl, tqs1=((
  struct Cyc_List_List*) _check_null( tqs1))->tl)){ if( tqs1 ==  0){ return 0;}{
! struct _tuple4 _temp1942; void* _temp1943; struct Cyc_Absyn_Tqual _temp1945;
! struct _tuple4* _temp1940=( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( tqs1))->hd; _temp1942=* _temp1940; _LL1946: _temp1945= _temp1942.f1;
! goto _LL1944; _LL1944: _temp1943= _temp1942.f2; goto _LL1941; _LL1941: { struct
! _tuple4 _temp1949; void* _temp1950; struct Cyc_Absyn_Tqual _temp1952; struct
! _tuple4* _temp1947=( struct _tuple4*)(( struct Cyc_List_List*) _check_null( tqs2))->hd;
! _temp1949=* _temp1947; _LL1953: _temp1952= _temp1949.f1; goto _LL1951; _LL1951:
! _temp1950= _temp1949.f2; goto _LL1948; _LL1948: if( _temp1952.q_const? Cyc_Tcutil_subtype(
! te, assume, _temp1943, _temp1950): 0){ continue;} else{ if( Cyc_Tcutil_unify(
! _temp1943, _temp1950)){ continue;} else{ if( Cyc_Tcutil_isomorphic( _temp1943,
! _temp1950)){ continue;} else{ return 0;}}}}}} return 1;} int Cyc_Tcutil_castable(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void* t1, void* t2){
  if( Cyc_Tcutil_unify( t1, t2)){ return 1;} t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress(
! t2);{ void* _temp1954= t2; struct Cyc_Absyn_Uniondecl** _temp1962; struct Cyc_List_List*
! _temp1964; void* _temp1966; _LL1956: if(( unsigned int) _temp1954 >  4u?*(( int*)
! _temp1954) ==  Cyc_Absyn_UnionType: 0){ _LL1965: _temp1964=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1954)->f2; goto _LL1963; _LL1963: _temp1962=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1954)->f3; goto _LL1957;} else{ goto _LL1958;} _LL1958: if(( unsigned int)
! _temp1954 >  4u?*(( int*) _temp1954) ==  Cyc_Absyn_IntType: 0){ _LL1967:
! _temp1966=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1954)->f2; if(
! _temp1966 == ( void*) Cyc_Absyn_B4){ goto _LL1959;} else{ goto _LL1960;}} else{
! goto _LL1960;} _LL1960: goto _LL1961; _LL1957: if( _temp1962 ==  0){ goto
! _LL1955;}{ struct Cyc_Absyn_Uniondecl* _temp1968=*(( struct Cyc_Absyn_Uniondecl**)
! _check_null( _temp1962)); if( _temp1968->fields ==  0){ goto _LL1955;}{ struct
! Cyc_List_List* _temp1969=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_zip)( _temp1968->tvs, _temp1964);{ struct Cyc_List_List*
! fs=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1968->fields))->v;
  for( 0; fs !=  0; fs=(( struct Cyc_List_List*) _check_null( fs))->tl){ if( Cyc_Tcutil_unify(
! t1, Cyc_Tcutil_substitute( _temp1969,( void*)(( struct Cyc_Absyn_Structfield*)((
  struct Cyc_List_List*) _check_null( fs))->hd)->type))){ return 1;}}} goto
! _LL1955;}} _LL1959: if( Cyc_Tcutil_typ_kind( t2) == ( void*) Cyc_Absyn_BoxKind){
! return 1;} goto _LL1955; _LL1961: goto _LL1955; _LL1955:;}{ void* _temp1970= t1;
! struct Cyc_Absyn_PtrInfo _temp1988; struct Cyc_Absyn_Conref* _temp1990; struct
! Cyc_Absyn_Tqual _temp1992; struct Cyc_Absyn_Conref* _temp1994; void* _temp1996;
! void* _temp1998; struct Cyc_Absyn_Exp* _temp2000; struct Cyc_Absyn_Tqual
! _temp2002; void* _temp2004; struct Cyc_Absyn_Enumdecl* _temp2006; _LL1972: if((
! unsigned int) _temp1970 >  4u?*(( int*) _temp1970) ==  Cyc_Absyn_PointerType: 0){
! _LL1989: _temp1988=(( struct Cyc_Absyn_PointerType_struct*) _temp1970)->f1;
! _LL1999: _temp1998=( void*) _temp1988.elt_typ; goto _LL1997; _LL1997: _temp1996=(
! void*) _temp1988.rgn_typ; goto _LL1995; _LL1995: _temp1994= _temp1988.nullable;
! goto _LL1993; _LL1993: _temp1992= _temp1988.tq; goto _LL1991; _LL1991: _temp1990=
! _temp1988.bounds; goto _LL1973;} else{ goto _LL1974;} _LL1974: if(( unsigned int)
! _temp1970 >  4u?*(( int*) _temp1970) ==  Cyc_Absyn_ArrayType: 0){ _LL2005:
! _temp2004=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1970)->f1; goto
! _LL2003; _LL2003: _temp2002=(( struct Cyc_Absyn_ArrayType_struct*) _temp1970)->f2;
! goto _LL2001; _LL2001: _temp2000=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1970)->f3; goto _LL1975;} else{ goto _LL1976;} _LL1976: if(( unsigned int)
! _temp1970 >  4u?*(( int*) _temp1970) ==  Cyc_Absyn_EnumType: 0){ _LL2007:
! _temp2006=(( struct Cyc_Absyn_EnumType_struct*) _temp1970)->f2; goto _LL1977;}
! else{ goto _LL1978;} _LL1978: if(( unsigned int) _temp1970 >  4u?*(( int*)
! _temp1970) ==  Cyc_Absyn_IntType: 0){ goto _LL1979;} else{ goto _LL1980;}
! _LL1980: if( _temp1970 == ( void*) Cyc_Absyn_FloatType){ goto _LL1981;} else{
! goto _LL1982;} _LL1982: if( _temp1970 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL1983;} else{ goto _LL1984;} _LL1984: if( _temp1970 == ( void*) Cyc_Absyn_VoidType){
! goto _LL1985;} else{ goto _LL1986;} _LL1986: goto _LL1987; _LL1973:{ void*
! _temp2008= t2; struct Cyc_Absyn_PtrInfo _temp2016; struct Cyc_Absyn_Conref*
! _temp2018; struct Cyc_Absyn_Tqual _temp2020; struct Cyc_Absyn_Conref* _temp2022;
! void* _temp2024; void* _temp2026; _LL2010: if(( unsigned int) _temp2008 >  4u?*((
! int*) _temp2008) ==  Cyc_Absyn_PointerType: 0){ _LL2017: _temp2016=(( struct Cyc_Absyn_PointerType_struct*)
! _temp2008)->f1; _LL2027: _temp2026=( void*) _temp2016.elt_typ; goto _LL2025;
! _LL2025: _temp2024=( void*) _temp2016.rgn_typ; goto _LL2023; _LL2023: _temp2022=
! _temp2016.nullable; goto _LL2021; _LL2021: _temp2020= _temp2016.tq; goto _LL2019;
! _LL2019: _temp2018= _temp2016.bounds; goto _LL2011;} else{ goto _LL2012;}
! _LL2012: if( _temp2008 == ( void*) Cyc_Absyn_VoidType){ goto _LL2013;} else{
! goto _LL2014;} _LL2014: goto _LL2015; _LL2011: { struct Cyc_List_List* _temp2028=({
! struct Cyc_List_List* _temp2045=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2045->hd=( void*)({ struct _tuple8* _temp2046=(
! struct _tuple8*) _cycalloc( sizeof( struct _tuple8)); _temp2046->f1= t1;
! _temp2046->f2= t2; _temp2046;}); _temp2045->tl= 0; _temp2045;}); int _temp2029=
! Cyc_Tcutil_ptrsubtype( te, _temp2028, _temp1998, _temp2026)? ! _temp1992.q_const?
! 1: _temp2020.q_const: 0; int bounds_ok= Cyc_Tcutil_unify_conrefs( Cyc_Tcutil_boundscmp,
! _temp1990, _temp2018); if( ! bounds_ok){ struct _tuple8 _temp2031=({ struct
! _tuple8 _temp2030; _temp2030.f1= Cyc_Absyn_conref_val( _temp1990); _temp2030.f2=
! Cyc_Absyn_conref_val( _temp2018); _temp2030;}); void* _temp2037; struct Cyc_Absyn_Exp*
! _temp2039; void* _temp2041; struct Cyc_Absyn_Exp* _temp2043; _LL2033: _LL2042:
! _temp2041= _temp2031.f1; if(( unsigned int) _temp2041 >  1u?*(( int*) _temp2041)
! ==  Cyc_Absyn_Upper_b: 0){ _LL2044: _temp2043=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp2041)->f1; goto _LL2038;} else{ goto _LL2035;} _LL2038: _temp2037=
! _temp2031.f2; if(( unsigned int) _temp2037 >  1u?*(( int*) _temp2037) ==  Cyc_Absyn_Upper_b:
! 0){ _LL2040: _temp2039=(( struct Cyc_Absyn_Upper_b_struct*) _temp2037)->f1; goto
! _LL2034;} else{ goto _LL2035;} _LL2035: goto _LL2036; _LL2034: if( Cyc_Evexp_eval_const_uint_exp(
! _temp2043) >=  Cyc_Evexp_eval_const_uint_exp( _temp2039)){ bounds_ok= 1;} goto
! _LL2032; _LL2036: bounds_ok= 1; goto _LL2032; _LL2032:;} return( bounds_ok?
! _temp2029: 0)? Cyc_Tcutil_unify( _temp1996, _temp2024)? 1: Cyc_Tcenv_region_outlives(
! te, _temp1996, _temp2024): 0;} _LL2013: return 1; _LL2015: goto _LL2009; _LL2009:;}
! return 0; _LL1975:{ void* _temp2047= t2; struct Cyc_Absyn_Exp* _temp2053; struct
! Cyc_Absyn_Tqual _temp2055; void* _temp2057; _LL2049: if(( unsigned int)
! _temp2047 >  4u?*(( int*) _temp2047) ==  Cyc_Absyn_ArrayType: 0){ _LL2058:
! _temp2057=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp2047)->f1; goto
! _LL2056; _LL2056: _temp2055=(( struct Cyc_Absyn_ArrayType_struct*) _temp2047)->f2;
! goto _LL2054; _LL2054: _temp2053=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp2047)->f3; goto _LL2050;} else{ goto _LL2051;} _LL2051: goto _LL2052;
! _LL2050: { int okay; okay=( _temp2000 !=  0? _temp2053 !=  0: 0)? Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp2000)) >=  Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp2053)): 0; return( okay? Cyc_Tcutil_unify(
! _temp2004, _temp2057): 0)? ! _temp2002.q_const? 1: _temp2055.q_const: 0;}
! _LL2052: return 0; _LL2048:;} return 0; _LL1977:{ void* _temp2059= t2; struct
! Cyc_Absyn_Enumdecl* _temp2065; _LL2061: if(( unsigned int) _temp2059 >  4u?*((
! int*) _temp2059) ==  Cyc_Absyn_EnumType: 0){ _LL2066: _temp2065=(( struct Cyc_Absyn_EnumType_struct*)
! _temp2059)->f2; goto _LL2062;} else{ goto _LL2063;} _LL2063: goto _LL2064;
! _LL2062: if(((( struct Cyc_Absyn_Enumdecl*) _check_null( _temp2006))->fields != 
! 0?(( struct Cyc_Absyn_Enumdecl*) _check_null( _temp2065))->fields !=  0: 0)?((
  int(*)( struct Cyc_List_List* x)) Cyc_List_length)(( struct Cyc_List_List*)((
  struct Cyc_Core_Opt*) _check_null((( struct Cyc_Absyn_Enumdecl*) _check_null(
! _temp2006))->fields))->v) >= (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)((
  struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null((( struct Cyc_Absyn_Enumdecl*)
! _check_null( _temp2065))->fields))->v): 0){ return 1;} goto _LL2060; _LL2064:
! goto _LL2060; _LL2060:;} goto _LL1979; _LL1979: goto _LL1981; _LL1981: goto
! _LL1983; _LL1983: return Cyc_Tcutil_coerceable( t2)? 1: t2 == ( void*) Cyc_Absyn_VoidType;
! _LL1985: return t2 == ( void*) Cyc_Absyn_VoidType; _LL1987: return 0; _LL1971:;}}
  void Cyc_Tcutil_unchecked_cast( struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp*
  e, void* t){ if( ! Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*) _check_null(
! e->topt))->v, t)){ struct Cyc_Absyn_Exp* _temp2067= Cyc_Absyn_copy_exp( e);(
! void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Cast_e_struct* _temp2068=(
  struct Cyc_Absyn_Cast_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Cast_e_struct));
! _temp2068[ 0]=({ struct Cyc_Absyn_Cast_e_struct _temp2069; _temp2069.tag= Cyc_Absyn_Cast_e;
! _temp2069.f1=( void*) t; _temp2069.f2= _temp2067; _temp2069;}); _temp2068;})));
! e->topt=({ struct Cyc_Core_Opt* _temp2070=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp2070->v=( void*) t; _temp2070;});}} int Cyc_Tcutil_is_integral(
! struct Cyc_Absyn_Exp* e){ void* _temp2071= Cyc_Tcutil_compress(( void*)(( struct
! Cyc_Core_Opt*) _check_null( e->topt))->v); _LL2073: if(( unsigned int) _temp2071
! >  4u?*(( int*) _temp2071) ==  Cyc_Absyn_EnumType: 0){ goto _LL2074;} else{ goto
! _LL2075;} _LL2075: if(( unsigned int) _temp2071 >  4u?*(( int*) _temp2071) == 
! Cyc_Absyn_IntType: 0){ goto _LL2076;} else{ goto _LL2077;} _LL2077: if((
! unsigned int) _temp2071 >  4u?*(( int*) _temp2071) ==  Cyc_Absyn_Evar: 0){ goto
! _LL2078;} else{ goto _LL2079;} _LL2079: goto _LL2080; _LL2074: goto _LL2076;
! _LL2076: return 1; _LL2078: return Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v, Cyc_Absyn_sint_t); _LL2080: return 0; _LL2072:;} int
  Cyc_Tcutil_is_numeric( struct Cyc_Absyn_Exp* e){ if( Cyc_Tcutil_is_integral( e)){
! return 1;}{ void* _temp2081= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v); _LL2083: if( _temp2081 == ( void*) Cyc_Absyn_FloatType){
! goto _LL2084;} else{ goto _LL2085;} _LL2085: if( _temp2081 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL2086;} else{ goto _LL2087;} _LL2087: goto _LL2088; _LL2084: goto _LL2086;
! _LL2086: return 1; _LL2088: return 0; _LL2082:;}} int Cyc_Tcutil_is_function_type(
! void* t){ void* _temp2089= Cyc_Tcutil_compress( t); _LL2091: if(( unsigned int)
! _temp2089 >  4u?*(( int*) _temp2089) ==  Cyc_Absyn_FnType: 0){ goto _LL2092;}
! else{ goto _LL2093;} _LL2093: goto _LL2094; _LL2092: return 1; _LL2094: return 0;
! _LL2090:;} void* Cyc_Tcutil_max_arithmetic_type( void* t1, void* t2){ struct
! _tuple8 _temp2096=({ struct _tuple8 _temp2095; _temp2095.f1= t1; _temp2095.f2=
! t2; _temp2095;}); void* _temp2120; void* _temp2122; void* _temp2124; void*
! _temp2126; void* _temp2128; void* _temp2130; void* _temp2132; void* _temp2134;
! void* _temp2136; void* _temp2138; void* _temp2140; void* _temp2142; void*
! _temp2144; void* _temp2146; void* _temp2148; void* _temp2150; void* _temp2152;
! void* _temp2154; void* _temp2156; void* _temp2158; void* _temp2160; void*
! _temp2162; _LL2098: _LL2121: _temp2120= _temp2096.f1; if( _temp2120 == ( void*)
! Cyc_Absyn_DoubleType){ goto _LL2099;} else{ goto _LL2100;} _LL2100: _LL2123:
! _temp2122= _temp2096.f2; if( _temp2122 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL2101;} else{ goto _LL2102;} _LL2102: _LL2125: _temp2124= _temp2096.f1; if(
! _temp2124 == ( void*) Cyc_Absyn_FloatType){ goto _LL2103;} else{ goto _LL2104;}
! _LL2104: _LL2127: _temp2126= _temp2096.f2; if( _temp2126 == ( void*) Cyc_Absyn_FloatType){
! goto _LL2105;} else{ goto _LL2106;} _LL2106: _LL2129: _temp2128= _temp2096.f1;
! if(( unsigned int) _temp2128 >  4u?*(( int*) _temp2128) ==  Cyc_Absyn_IntType: 0){
! _LL2133: _temp2132=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2128)->f1;
! if( _temp2132 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2131;} else{ goto _LL2108;}
! _LL2131: _temp2130=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2128)->f2;
! if( _temp2130 == ( void*) Cyc_Absyn_B8){ goto _LL2107;} else{ goto _LL2108;}}
! else{ goto _LL2108;} _LL2108: _LL2135: _temp2134= _temp2096.f2; if((
! unsigned int) _temp2134 >  4u?*(( int*) _temp2134) ==  Cyc_Absyn_IntType: 0){
! _LL2139: _temp2138=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2134)->f1;
! if( _temp2138 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2137;} else{ goto _LL2110;}
! _LL2137: _temp2136=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2134)->f2;
! if( _temp2136 == ( void*) Cyc_Absyn_B8){ goto _LL2109;} else{ goto _LL2110;}}
! else{ goto _LL2110;} _LL2110: _LL2141: _temp2140= _temp2096.f1; if((
! unsigned int) _temp2140 >  4u?*(( int*) _temp2140) ==  Cyc_Absyn_IntType: 0){
! _LL2145: _temp2144=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2140)->f1;
! if( _temp2144 == ( void*) Cyc_Absyn_Signed){ goto _LL2143;} else{ goto _LL2112;}
! _LL2143: _temp2142=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2140)->f2;
! if( _temp2142 == ( void*) Cyc_Absyn_B8){ goto _LL2111;} else{ goto _LL2112;}}
! else{ goto _LL2112;} _LL2112: _LL2147: _temp2146= _temp2096.f2; if((
! unsigned int) _temp2146 >  4u?*(( int*) _temp2146) ==  Cyc_Absyn_IntType: 0){
! _LL2151: _temp2150=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2146)->f1;
! if( _temp2150 == ( void*) Cyc_Absyn_Signed){ goto _LL2149;} else{ goto _LL2114;}
! _LL2149: _temp2148=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2146)->f2;
! if( _temp2148 == ( void*) Cyc_Absyn_B8){ goto _LL2113;} else{ goto _LL2114;}}
! else{ goto _LL2114;} _LL2114: _LL2153: _temp2152= _temp2096.f1; if((
! unsigned int) _temp2152 >  4u?*(( int*) _temp2152) ==  Cyc_Absyn_IntType: 0){
! _LL2157: _temp2156=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2152)->f1;
! if( _temp2156 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2155;} else{ goto _LL2116;}
! _LL2155: _temp2154=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2152)->f2;
! if( _temp2154 == ( void*) Cyc_Absyn_B4){ goto _LL2115;} else{ goto _LL2116;}}
! else{ goto _LL2116;} _LL2116: _LL2159: _temp2158= _temp2096.f2; if((
! unsigned int) _temp2158 >  4u?*(( int*) _temp2158) ==  Cyc_Absyn_IntType: 0){
! _LL2163: _temp2162=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2158)->f1;
! if( _temp2162 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2161;} else{ goto _LL2118;}
! _LL2161: _temp2160=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2158)->f2;
! if( _temp2160 == ( void*) Cyc_Absyn_B4){ goto _LL2117;} else{ goto _LL2118;}}
! else{ goto _LL2118;} _LL2118: goto _LL2119; _LL2099: goto _LL2101; _LL2101:
! return( void*) Cyc_Absyn_DoubleType; _LL2103: goto _LL2105; _LL2105: return(
! void*) Cyc_Absyn_FloatType; _LL2107: goto _LL2109; _LL2109: return Cyc_Absyn_ulonglong_t;
! _LL2111: goto _LL2113; _LL2113: return Cyc_Absyn_slonglong_t; _LL2115: goto
! _LL2117; _LL2117: return Cyc_Absyn_uint_t; _LL2119: return Cyc_Absyn_sint_t;
! _LL2097:;} void Cyc_Tcutil_check_contains_assign( struct Cyc_Absyn_Exp* e){ void*
! _temp2164=( void*) e->r; struct Cyc_Core_Opt* _temp2170; _LL2166: if(*(( int*)
! _temp2164) ==  Cyc_Absyn_AssignOp_e){ _LL2171: _temp2170=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp2164)->f2; if( _temp2170 ==  0){ goto _LL2167;} else{ goto _LL2168;}} else{
! goto _LL2168;} _LL2168: goto _LL2169; _LL2167:({ void* _temp2172[ 0u]={}; Cyc_Tcutil_warn(
  e->loc, _tag_arr("assignment in test", sizeof( unsigned char), 19u), _tag_arr(
! _temp2172, sizeof( void*), 0u));}); goto _LL2165; _LL2169: goto _LL2165; _LL2165:;}
  static int Cyc_Tcutil_constrain_kinds( struct Cyc_Absyn_Conref* c1, struct Cyc_Absyn_Conref*
  c2){ c1= Cyc_Absyn_compress_conref( c1); c2= Cyc_Absyn_compress_conref( c2); if(
  c1 ==  c2){ return 1;} if(( void*) c1->v == ( void*) Cyc_Absyn_No_constr){( void*)(
! c1->v=( void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct* _temp2173=(
  struct Cyc_Absyn_Forward_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Forward_constr_struct));
! _temp2173[ 0]=({ struct Cyc_Absyn_Forward_constr_struct _temp2174; _temp2174.tag=
! Cyc_Absyn_Forward_constr; _temp2174.f1= c2; _temp2174;}); _temp2173;}))); return
  1;} else{ if(( void*) c2->v == ( void*) Cyc_Absyn_No_constr){( void*)( c2->v=(
  void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct* _temp2175=( struct Cyc_Absyn_Forward_constr_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_Forward_constr_struct)); _temp2175[ 0]=({
  struct Cyc_Absyn_Forward_constr_struct _temp2176; _temp2176.tag= Cyc_Absyn_Forward_constr;
! _temp2176.f1= c1; _temp2176;}); _temp2175;}))); return 1;} else{ void* k1= Cyc_Absyn_conref_val(
! c1); void* k2= Cyc_Absyn_conref_val( c2); if( Cyc_Tcutil_kind_leq( k1, k2)){(
! void*)( c2->v=( void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct*
! _temp2177=( struct Cyc_Absyn_Forward_constr_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_Forward_constr_struct)); _temp2177[ 0]=({ struct Cyc_Absyn_Forward_constr_struct
! _temp2178; _temp2178.tag= Cyc_Absyn_Forward_constr; _temp2178.f1= c1; _temp2178;});
! _temp2177;}))); return 1;} else{ if( Cyc_Tcutil_kind_leq( k2, k1)){( void*)( c1->v=(
! void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct* _temp2179=( struct Cyc_Absyn_Forward_constr_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Forward_constr_struct)); _temp2179[ 0]=({
! struct Cyc_Absyn_Forward_constr_struct _temp2180; _temp2180.tag= Cyc_Absyn_Forward_constr;
! _temp2180.f1= c2; _temp2180;}); _temp2179;}))); return 1;} else{ return 0;}}}}}
  static int Cyc_Tcutil_tvar_id_counter= 0; int* Cyc_Tcutil_new_tvar_id(){ return({
! int* _temp2181=( int*) _cycalloc_atomic( sizeof( int)); _temp2181[ 0]= Cyc_Tcutil_tvar_id_counter
! ++; _temp2181;});} static int Cyc_Tcutil_tvar_counter= 0; struct Cyc_Absyn_Tvar*
  Cyc_Tcutil_new_tvar( void* k){ int i= Cyc_Tcutil_tvar_counter ++; struct
! _tagged_arr s=( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp2185;
! _temp2185.tag= Cyc_Std_Int_pa; _temp2185.f1=( int)(( unsigned int) i);{ void*
! _temp2184[ 1u]={& _temp2185}; Cyc_Std_aprintf( _tag_arr("#%d", sizeof(
! unsigned char), 4u), _tag_arr( _temp2184, sizeof( void*), 1u));}}); return({
! struct Cyc_Absyn_Tvar* _temp2182=( struct Cyc_Absyn_Tvar*) _cycalloc( sizeof(
! struct Cyc_Absyn_Tvar)); _temp2182->name=({ struct _tagged_arr* _temp2183=(
! struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr) *  1); _temp2183[ 0]=
! s; _temp2183;}); _temp2182->identity= 0; _temp2182->kind= Cyc_Absyn_new_conref(
! k); _temp2182;});} int Cyc_Tcutil_is_temp_tvar( struct Cyc_Absyn_Tvar* t){
! struct _tagged_arr _temp2186=* t->name; return*(( const unsigned char*)
! _check_unknown_subscript( _temp2186, sizeof( unsigned char), 0)) == '#';} void
  Cyc_Tcutil_rewrite_temp_tvar( struct Cyc_Absyn_Tvar* t){({ struct Cyc_Std_String_pa_struct
! _temp2188; _temp2188.tag= Cyc_Std_String_pa; _temp2188.f1=( struct _tagged_arr)*
! t->name;{ void* _temp2187[ 1u]={& _temp2188}; Cyc_Std_printf( _tag_arr("%s",
! sizeof( unsigned char), 3u), _tag_arr( _temp2187, sizeof( void*), 1u));}}); if(
! ! Cyc_Tcutil_is_temp_tvar( t)){ return;}{ struct _tagged_arr _temp2189= Cyc_Std_strconcat(
  _tag_arr("`", sizeof( unsigned char), 2u),* t->name);*(( unsigned char*)
! _check_unknown_subscript( _temp2189, sizeof( unsigned char), 1))='t'; t->name=({
! struct _tagged_arr* _temp2190=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr) *  1); _temp2190[ 0]=( struct _tagged_arr) _temp2189; _temp2190;});}}
  struct _tuple13{ struct _tagged_arr* f1; struct Cyc_Absyn_Tqual f2; void* f3; }
  ; static struct _tuple2* Cyc_Tcutil_fndecl2typ_f( struct _tuple13* x){ return({
! struct _tuple2* _temp2191=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2191->f1=( struct Cyc_Core_Opt*)({ struct Cyc_Core_Opt* _temp2192=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2192->v=( void*)(*
! x).f1; _temp2192;}); _temp2191->f2=(* x).f2; _temp2191->f3=(* x).f3; _temp2191;});}
  void* Cyc_Tcutil_fndecl2typ( struct Cyc_Absyn_Fndecl* fd){ if( fd->cached_typ == 
! 0){ struct Cyc_List_List* _temp2193= 0;{ struct Cyc_List_List* atts= fd->attributes;
  for( 0; atts !=  0; atts=(( struct Cyc_List_List*) _check_null( atts))->tl){ if(
  Cyc_Absyn_fntype_att(( void*)(( struct Cyc_List_List*) _check_null( atts))->hd)){
! _temp2193=({ struct Cyc_List_List* _temp2194=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp2194->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null( atts))->hd); _temp2194->tl= _temp2193; _temp2194;});}}} return(
! void*)({ struct Cyc_Absyn_FnType_struct* _temp2195=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp2195[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp2196; _temp2196.tag= Cyc_Absyn_FnType; _temp2196.f1=({ struct Cyc_Absyn_FnInfo
! _temp2197; _temp2197.tvars= fd->tvs; _temp2197.effect= fd->effect; _temp2197.ret_typ=(
! void*)(( void*) fd->ret_type); _temp2197.args=(( struct Cyc_List_List*(*)(
  struct _tuple2*(* f)( struct _tuple13*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Tcutil_fndecl2typ_f, fd->args); _temp2197.c_varargs= fd->c_varargs;
! _temp2197.cyc_varargs= fd->cyc_varargs; _temp2197.rgn_po= fd->rgn_po; _temp2197.attributes=
! _temp2193; _temp2197;}); _temp2196;}); _temp2195;});} return( void*)(( struct
  Cyc_Core_Opt*) _check_null( fd->cached_typ))->v;} struct _tuple14{ void* f1;
  struct Cyc_Absyn_Tqual f2; void* f3; } ; static void* Cyc_Tcutil_fst_fdarg(
  struct _tuple14* t){ return(* t).f1;} void* Cyc_Tcutil_snd_tqt( struct _tuple4*
  t){ return(* t).f2;} static struct _tuple4* Cyc_Tcutil_map2_tq( struct _tuple4*
! pr, void* t){ return({ struct _tuple4* _temp2198=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp2198->f1=(* pr).f1; _temp2198->f2= t; _temp2198;});}
  struct _tuple15{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; } ; struct
  _tuple16{ struct _tuple15* f1; void* f2; } ; static struct _tuple16* Cyc_Tcutil_substitute_f1(
  struct _RegionHandle* rgn, struct _tuple2* y){ return({ struct _tuple16*
! _temp2199=( struct _tuple16*) _region_malloc( rgn, sizeof( struct _tuple16));
! _temp2199->f1=({ struct _tuple15* _temp2200=( struct _tuple15*) _region_malloc(
! rgn, sizeof( struct _tuple15)); _temp2200->f1=(* y).f1; _temp2200->f2=(* y).f2;
! _temp2200;}); _temp2199->f2=(* y).f3; _temp2199;});} static struct _tuple2* Cyc_Tcutil_substitute_f2(
! struct _tuple16* w){ void* _temp2203; struct _tuple15* _temp2205; struct
! _tuple16 _temp2201=* w; _LL2206: _temp2205= _temp2201.f1; goto _LL2204; _LL2204:
! _temp2203= _temp2201.f2; goto _LL2202; _LL2202: { struct Cyc_Absyn_Tqual
! _temp2209; struct Cyc_Core_Opt* _temp2211; struct _tuple15 _temp2207=* _temp2205;
! _LL2212: _temp2211= _temp2207.f1; goto _LL2210; _LL2210: _temp2209= _temp2207.f2;
! goto _LL2208; _LL2208: return({ struct _tuple2* _temp2213=( struct _tuple2*)
! _cycalloc( sizeof( struct _tuple2)); _temp2213->f1= _temp2211; _temp2213->f2=
! _temp2209; _temp2213->f3= _temp2203; _temp2213;});}} static void* Cyc_Tcutil_field_type(
  struct Cyc_Absyn_Structfield* f){ return( void*) f->type;} static struct Cyc_Absyn_Structfield*
  Cyc_Tcutil_zip_field_type( struct Cyc_Absyn_Structfield* f, void* t){ return({
! struct Cyc_Absyn_Structfield* _temp2214=( struct Cyc_Absyn_Structfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structfield)); _temp2214->name= f->name;
! _temp2214->tq= f->tq; _temp2214->type=( void*) t; _temp2214->width= f->width;
! _temp2214->attributes= f->attributes; _temp2214;});} static struct Cyc_List_List*
  Cyc_Tcutil_substs( struct _RegionHandle* rgn, struct Cyc_List_List* inst, struct
  Cyc_List_List* ts); void* Cyc_Tcutil_rsubstitute( struct _RegionHandle* rgn,
! struct Cyc_List_List* inst, void* t){ void* _temp2215= Cyc_Tcutil_compress( t);
! struct Cyc_Absyn_Tvar* _temp2263; struct Cyc_Absyn_Structdecl** _temp2265;
! struct Cyc_List_List* _temp2267; struct _tuple1* _temp2269; struct Cyc_Absyn_Uniondecl**
! _temp2271; struct Cyc_List_List* _temp2273; struct _tuple1* _temp2275; struct
! Cyc_Absyn_TunionInfo _temp2277; void* _temp2279; struct Cyc_List_List* _temp2281;
! void* _temp2283; struct Cyc_Absyn_TunionFieldInfo _temp2285; struct Cyc_List_List*
! _temp2287; void* _temp2289; struct Cyc_Core_Opt* _temp2291; struct Cyc_List_List*
! _temp2293; struct _tuple1* _temp2295; struct Cyc_Absyn_Exp* _temp2297; struct
! Cyc_Absyn_Tqual _temp2299; void* _temp2301; struct Cyc_Absyn_PtrInfo _temp2303;
! struct Cyc_Absyn_Conref* _temp2305; struct Cyc_Absyn_Tqual _temp2307; struct Cyc_Absyn_Conref*
! _temp2309; void* _temp2311; void* _temp2313; struct Cyc_Absyn_FnInfo _temp2315;
! struct Cyc_List_List* _temp2317; struct Cyc_List_List* _temp2319; struct Cyc_Absyn_VarargInfo*
! _temp2321; int _temp2323; struct Cyc_List_List* _temp2325; void* _temp2327;
! struct Cyc_Core_Opt* _temp2329; struct Cyc_List_List* _temp2331; struct Cyc_List_List*
! _temp2333; struct Cyc_List_List* _temp2335; struct Cyc_List_List* _temp2337;
! struct Cyc_Core_Opt* _temp2339; void* _temp2341; void* _temp2343; void*
! _temp2345; struct Cyc_List_List* _temp2347; _LL2217: if(( unsigned int)
! _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_VarType: 0){ _LL2264:
! _temp2263=(( struct Cyc_Absyn_VarType_struct*) _temp2215)->f1; goto _LL2218;}
! else{ goto _LL2219;} _LL2219: if(( unsigned int) _temp2215 >  4u?*(( int*)
! _temp2215) ==  Cyc_Absyn_StructType: 0){ _LL2270: _temp2269=(( struct Cyc_Absyn_StructType_struct*)
! _temp2215)->f1; goto _LL2268; _LL2268: _temp2267=(( struct Cyc_Absyn_StructType_struct*)
! _temp2215)->f2; goto _LL2266; _LL2266: _temp2265=(( struct Cyc_Absyn_StructType_struct*)
! _temp2215)->f3; goto _LL2220;} else{ goto _LL2221;} _LL2221: if(( unsigned int)
! _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_UnionType: 0){ _LL2276:
! _temp2275=(( struct Cyc_Absyn_UnionType_struct*) _temp2215)->f1; goto _LL2274;
! _LL2274: _temp2273=(( struct Cyc_Absyn_UnionType_struct*) _temp2215)->f2; goto
! _LL2272; _LL2272: _temp2271=(( struct Cyc_Absyn_UnionType_struct*) _temp2215)->f3;
! goto _LL2222;} else{ goto _LL2223;} _LL2223: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_TunionType: 0){ _LL2278: _temp2277=(( struct Cyc_Absyn_TunionType_struct*)
! _temp2215)->f1; _LL2284: _temp2283=( void*) _temp2277.tunion_info; goto _LL2282;
! _LL2282: _temp2281= _temp2277.targs; goto _LL2280; _LL2280: _temp2279=( void*)
! _temp2277.rgn; goto _LL2224;} else{ goto _LL2225;} _LL2225: if(( unsigned int)
! _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_TunionFieldType: 0){ _LL2286:
! _temp2285=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp2215)->f1; _LL2290:
! _temp2289=( void*) _temp2285.field_info; goto _LL2288; _LL2288: _temp2287=
! _temp2285.targs; goto _LL2226;} else{ goto _LL2227;} _LL2227: if(( unsigned int)
! _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_TypedefType: 0){ _LL2296:
! _temp2295=(( struct Cyc_Absyn_TypedefType_struct*) _temp2215)->f1; goto _LL2294;
! _LL2294: _temp2293=(( struct Cyc_Absyn_TypedefType_struct*) _temp2215)->f2; goto
! _LL2292; _LL2292: _temp2291=(( struct Cyc_Absyn_TypedefType_struct*) _temp2215)->f3;
! goto _LL2228;} else{ goto _LL2229;} _LL2229: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_ArrayType: 0){ _LL2302: _temp2301=( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp2215)->f1; goto _LL2300; _LL2300:
! _temp2299=(( struct Cyc_Absyn_ArrayType_struct*) _temp2215)->f2; goto _LL2298;
! _LL2298: _temp2297=(( struct Cyc_Absyn_ArrayType_struct*) _temp2215)->f3; goto
! _LL2230;} else{ goto _LL2231;} _LL2231: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_PointerType: 0){ _LL2304: _temp2303=(( struct Cyc_Absyn_PointerType_struct*)
! _temp2215)->f1; _LL2314: _temp2313=( void*) _temp2303.elt_typ; goto _LL2312;
! _LL2312: _temp2311=( void*) _temp2303.rgn_typ; goto _LL2310; _LL2310: _temp2309=
! _temp2303.nullable; goto _LL2308; _LL2308: _temp2307= _temp2303.tq; goto _LL2306;
! _LL2306: _temp2305= _temp2303.bounds; goto _LL2232;} else{ goto _LL2233;}
! _LL2233: if(( unsigned int) _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_FnType:
! 0){ _LL2316: _temp2315=(( struct Cyc_Absyn_FnType_struct*) _temp2215)->f1;
! _LL2332: _temp2331= _temp2315.tvars; goto _LL2330; _LL2330: _temp2329= _temp2315.effect;
! goto _LL2328; _LL2328: _temp2327=( void*) _temp2315.ret_typ; goto _LL2326;
! _LL2326: _temp2325= _temp2315.args; goto _LL2324; _LL2324: _temp2323= _temp2315.c_varargs;
! goto _LL2322; _LL2322: _temp2321= _temp2315.cyc_varargs; goto _LL2320; _LL2320:
! _temp2319= _temp2315.rgn_po; goto _LL2318; _LL2318: _temp2317= _temp2315.attributes;
! goto _LL2234;} else{ goto _LL2235;} _LL2235: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_TupleType: 0){ _LL2334: _temp2333=(( struct Cyc_Absyn_TupleType_struct*)
! _temp2215)->f1; goto _LL2236;} else{ goto _LL2237;} _LL2237: if(( unsigned int)
! _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_AnonStructType: 0){ _LL2336:
! _temp2335=(( struct Cyc_Absyn_AnonStructType_struct*) _temp2215)->f1; goto
! _LL2238;} else{ goto _LL2239;} _LL2239: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_AnonUnionType: 0){ _LL2338: _temp2337=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp2215)->f1; goto _LL2240;} else{ goto
! _LL2241;} _LL2241: if(( unsigned int) _temp2215 >  4u?*(( int*) _temp2215) == 
! Cyc_Absyn_Evar: 0){ _LL2340: _temp2339=(( struct Cyc_Absyn_Evar_struct*)
! _temp2215)->f2; goto _LL2242;} else{ goto _LL2243;} _LL2243: if(( unsigned int)
! _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_RgnHandleType: 0){ _LL2342:
! _temp2341=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*) _temp2215)->f1;
! goto _LL2244;} else{ goto _LL2245;} _LL2245: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_EnumType: 0){ goto _LL2246;} else{ goto _LL2247;}
! _LL2247: if( _temp2215 == ( void*) Cyc_Absyn_VoidType){ goto _LL2248;} else{
! goto _LL2249;} _LL2249: if(( unsigned int) _temp2215 >  4u?*(( int*) _temp2215)
! ==  Cyc_Absyn_IntType: 0){ goto _LL2250;} else{ goto _LL2251;} _LL2251: if(
! _temp2215 == ( void*) Cyc_Absyn_FloatType){ goto _LL2252;} else{ goto _LL2253;}
! _LL2253: if( _temp2215 == ( void*) Cyc_Absyn_DoubleType){ goto _LL2254;} else{
! goto _LL2255;} _LL2255: if( _temp2215 == ( void*) Cyc_Absyn_HeapRgn){ goto
! _LL2256;} else{ goto _LL2257;} _LL2257: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_RgnsEff: 0){ _LL2344: _temp2343=( void*)(( struct
! Cyc_Absyn_RgnsEff_struct*) _temp2215)->f1; goto _LL2258;} else{ goto _LL2259;}
! _LL2259: if(( unsigned int) _temp2215 >  4u?*(( int*) _temp2215) ==  Cyc_Absyn_AccessEff:
! 0){ _LL2346: _temp2345=( void*)(( struct Cyc_Absyn_AccessEff_struct*) _temp2215)->f1;
! goto _LL2260;} else{ goto _LL2261;} _LL2261: if(( unsigned int) _temp2215 >  4u?*((
! int*) _temp2215) ==  Cyc_Absyn_JoinEff: 0){ _LL2348: _temp2347=(( struct Cyc_Absyn_JoinEff_struct*)
! _temp2215)->f1; goto _LL2262;} else{ goto _LL2216;} _LL2218: { struct
! _handler_cons _temp2349; _push_handler(& _temp2349);{ int _temp2351= 0; if(
! setjmp( _temp2349.handler)){ _temp2351= 1;} if( ! _temp2351){{ void* _temp2352=((
  void*(*)( int(* cmp)( struct Cyc_Absyn_Tvar*, struct Cyc_Absyn_Tvar*), struct
  Cyc_List_List* l, struct Cyc_Absyn_Tvar* k)) Cyc_List_assoc_cmp)( Cyc_Absyn_tvar_cmp,
! inst, _temp2263); _npop_handler( 0u); return _temp2352;}; _pop_handler();} else{
! void* _temp2350=( void*) _exn_thrown; void* _temp2354= _temp2350; _LL2356: if(
! _temp2354 ==  Cyc_Core_Not_found){ goto _LL2357;} else{ goto _LL2358;} _LL2358:
! goto _LL2359; _LL2357: return t; _LL2359:( void) _throw( _temp2354); _LL2355:;}}}
! _LL2220: { struct Cyc_List_List* _temp2360= Cyc_Tcutil_substs( rgn, inst,
! _temp2267); return _temp2360 ==  _temp2267? t:( void*)({ struct Cyc_Absyn_StructType_struct*
! _temp2361=( struct Cyc_Absyn_StructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct));
! _temp2361[ 0]=({ struct Cyc_Absyn_StructType_struct _temp2362; _temp2362.tag=
! Cyc_Absyn_StructType; _temp2362.f1= _temp2269; _temp2362.f2= _temp2360;
! _temp2362.f3= _temp2265; _temp2362;}); _temp2361;});} _LL2222: { struct Cyc_List_List*
! _temp2363= Cyc_Tcutil_substs( rgn, inst, _temp2273); return _temp2363 == 
! _temp2273? t:( void*)({ struct Cyc_Absyn_UnionType_struct* _temp2364=( struct
  Cyc_Absyn_UnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct));
! _temp2364[ 0]=({ struct Cyc_Absyn_UnionType_struct _temp2365; _temp2365.tag= Cyc_Absyn_UnionType;
! _temp2365.f1= _temp2275; _temp2365.f2= _temp2363; _temp2365.f3= _temp2271;
! _temp2365;}); _temp2364;});} _LL2224: { struct Cyc_List_List* _temp2366= Cyc_Tcutil_substs(
! rgn, inst, _temp2281); void* _temp2367= Cyc_Tcutil_rsubstitute( rgn, inst,
! _temp2279); return( _temp2366 ==  _temp2281? _temp2367 ==  _temp2279: 0)? t:(
! void*)({ struct Cyc_Absyn_TunionType_struct* _temp2368=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp2368[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp2369; _temp2369.tag= Cyc_Absyn_TunionType;
! _temp2369.f1=({ struct Cyc_Absyn_TunionInfo _temp2370; _temp2370.tunion_info=(
! void*) _temp2283; _temp2370.targs= _temp2366; _temp2370.rgn=( void*) _temp2367;
! _temp2370;}); _temp2369;}); _temp2368;});} _LL2226: { struct Cyc_List_List*
! _temp2371= Cyc_Tcutil_substs( rgn, inst, _temp2287); return _temp2371 == 
! _temp2287? t:( void*)({ struct Cyc_Absyn_TunionFieldType_struct* _temp2372=(
  struct Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionFieldType_struct));
! _temp2372[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct _temp2373; _temp2373.tag=
! Cyc_Absyn_TunionFieldType; _temp2373.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp2374; _temp2374.field_info=( void*) _temp2289; _temp2374.targs= _temp2371;
! _temp2374;}); _temp2373;}); _temp2372;});} _LL2228: { struct Cyc_List_List*
! _temp2375= Cyc_Tcutil_substs( rgn, inst, _temp2293); return _temp2375 == 
! _temp2293? t:( void*)({ struct Cyc_Absyn_TypedefType_struct* _temp2376=( struct
  Cyc_Absyn_TypedefType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TypedefType_struct));
! _temp2376[ 0]=({ struct Cyc_Absyn_TypedefType_struct _temp2377; _temp2377.tag=
! Cyc_Absyn_TypedefType; _temp2377.f1= _temp2295; _temp2377.f2= _temp2375;
! _temp2377.f3= _temp2291; _temp2377;}); _temp2376;});} _LL2230: { void* _temp2378=
! Cyc_Tcutil_rsubstitute( rgn, inst, _temp2301); return _temp2378 ==  _temp2301? t:(
! void*)({ struct Cyc_Absyn_ArrayType_struct* _temp2379=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp2379[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp2380; _temp2380.tag= Cyc_Absyn_ArrayType;
! _temp2380.f1=( void*) _temp2378; _temp2380.f2= _temp2299; _temp2380.f3=
! _temp2297; _temp2380;}); _temp2379;});} _LL2232: { void* _temp2381= Cyc_Tcutil_rsubstitute(
! rgn, inst, _temp2313); void* _temp2382= Cyc_Tcutil_rsubstitute( rgn, inst,
! _temp2311); if( _temp2381 ==  _temp2313? _temp2382 ==  _temp2311: 0){ return t;}
! return( void*)({ struct Cyc_Absyn_PointerType_struct* _temp2383=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp2383[ 0]=({
! struct Cyc_Absyn_PointerType_struct _temp2384; _temp2384.tag= Cyc_Absyn_PointerType;
! _temp2384.f1=({ struct Cyc_Absyn_PtrInfo _temp2385; _temp2385.elt_typ=( void*)
! _temp2381; _temp2385.rgn_typ=( void*) _temp2382; _temp2385.nullable= _temp2309;
! _temp2385.tq= _temp2307; _temp2385.bounds= _temp2305; _temp2385;}); _temp2384;});
! _temp2383;});} _LL2234:{ struct Cyc_List_List* _temp2386= _temp2331; for( 0;
! _temp2386 !=  0; _temp2386=(( struct Cyc_List_List*) _check_null( _temp2386))->tl){
! inst=({ struct Cyc_List_List* _temp2387=( struct Cyc_List_List*) _region_malloc(
! rgn, sizeof( struct Cyc_List_List)); _temp2387->hd=( void*)({ struct _tuple5*
! _temp2388=( struct _tuple5*) _region_malloc( rgn, sizeof( struct _tuple5));
! _temp2388->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! _temp2386))->hd; _temp2388->f2=( void*)({ struct Cyc_Absyn_VarType_struct*
! _temp2389=( struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2389[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2390; _temp2390.tag= Cyc_Absyn_VarType;
! _temp2390.f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! _temp2386))->hd; _temp2390;}); _temp2389;}); _temp2388;}); _temp2387->tl= inst;
! _temp2387;});}}{ struct Cyc_List_List* _temp2393; struct Cyc_List_List*
! _temp2395; struct _tuple0 _temp2391=(( struct _tuple0(*)( struct _RegionHandle*
  r1, struct _RegionHandle* r2, struct Cyc_List_List* x)) Cyc_List_rsplit)( rgn,
  rgn,(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct _tuple16*(* f)(
  struct _RegionHandle*, struct _tuple2*), struct _RegionHandle* env, struct Cyc_List_List*
! x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_substitute_f1, rgn, _temp2325)); _LL2396:
! _temp2395= _temp2391.f1; goto _LL2394; _LL2394: _temp2393= _temp2391.f2; goto
! _LL2392; _LL2392: { struct Cyc_List_List* _temp2397= Cyc_Tcutil_substs( rgn,
! inst, _temp2393); struct Cyc_List_List* _temp2398=(( struct Cyc_List_List*(*)(
  struct _tuple2*(* f)( struct _tuple16*), struct Cyc_List_List* x)) Cyc_List_map)(
  Cyc_Tcutil_substitute_f2,(( struct Cyc_List_List*(*)( struct _RegionHandle* r1,
  struct _RegionHandle* r2, struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_rzip)(
! rgn, rgn, _temp2395, _temp2397)); struct Cyc_Core_Opt* eff2; if( _temp2329 ==  0){
! eff2= 0;} else{ void* _temp2399= Cyc_Tcutil_rsubstitute( rgn, inst,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp2329))->v); if( _temp2399 == ( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp2329))->v){ eff2= _temp2329;} else{ eff2=({
! struct Cyc_Core_Opt* _temp2400=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2400->v=( void*) _temp2399; _temp2400;});}}{ struct Cyc_Absyn_VarargInfo*
! cyc_varargs2; if( _temp2321 ==  0){ cyc_varargs2= 0;} else{ int _temp2403; void*
! _temp2405; struct Cyc_Absyn_Tqual _temp2407; struct Cyc_Core_Opt* _temp2409;
! struct Cyc_Absyn_VarargInfo _temp2401=*(( struct Cyc_Absyn_VarargInfo*)
! _check_null( _temp2321)); _LL2410: _temp2409= _temp2401.name; goto _LL2408;
! _LL2408: _temp2407= _temp2401.tq; goto _LL2406; _LL2406: _temp2405=( void*)
! _temp2401.type; goto _LL2404; _LL2404: _temp2403= _temp2401.inject; goto _LL2402;
! _LL2402: { void* _temp2411= Cyc_Tcutil_rsubstitute( rgn, inst, _temp2405); if(
! _temp2411 ==  _temp2405){ cyc_varargs2= _temp2321;} else{ cyc_varargs2=({ struct
! Cyc_Absyn_VarargInfo* _temp2412=( struct Cyc_Absyn_VarargInfo*) _cycalloc(
! sizeof( struct Cyc_Absyn_VarargInfo)); _temp2412->name= _temp2409; _temp2412->tq=
! _temp2407; _temp2412->type=( void*) _temp2411; _temp2412->inject= _temp2403;
! _temp2412;});}}}{ struct Cyc_List_List* rgn_po2; struct Cyc_List_List* _temp2415;
! struct Cyc_List_List* _temp2417; struct _tuple0 _temp2413= Cyc_List_rsplit( rgn,
! rgn, _temp2319); _LL2418: _temp2417= _temp2413.f1; goto _LL2416; _LL2416:
! _temp2415= _temp2413.f2; goto _LL2414; _LL2414: { struct Cyc_List_List*
! _temp2419= Cyc_Tcutil_substs( rgn, inst, _temp2417); struct Cyc_List_List*
! _temp2420= Cyc_Tcutil_substs( rgn, inst, _temp2415); if( _temp2419 ==  _temp2417?
! _temp2420 ==  _temp2415: 0){ rgn_po2= _temp2319;} else{ rgn_po2= Cyc_List_zip(
! _temp2419, _temp2420);} return( void*)({ struct Cyc_Absyn_FnType_struct*
! _temp2421=( struct Cyc_Absyn_FnType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct));
! _temp2421[ 0]=({ struct Cyc_Absyn_FnType_struct _temp2422; _temp2422.tag= Cyc_Absyn_FnType;
! _temp2422.f1=({ struct Cyc_Absyn_FnInfo _temp2423; _temp2423.tvars= _temp2331;
! _temp2423.effect= eff2; _temp2423.ret_typ=( void*) Cyc_Tcutil_rsubstitute( rgn,
! inst, _temp2327); _temp2423.args= _temp2398; _temp2423.c_varargs= _temp2323;
! _temp2423.cyc_varargs= cyc_varargs2; _temp2423.rgn_po= rgn_po2; _temp2423.attributes=
! _temp2317; _temp2423;}); _temp2422;}); _temp2421;});}}}}} _LL2236: { struct Cyc_List_List*
! _temp2424=(( struct Cyc_List_List*(*)( struct _RegionHandle*, void*(* f)( struct
  _tuple4*), struct Cyc_List_List* x)) Cyc_List_rmap)( rgn, Cyc_Tcutil_snd_tqt,
! _temp2333); struct Cyc_List_List* _temp2425= Cyc_Tcutil_substs( rgn, inst,
! _temp2424); if( _temp2425 ==  _temp2424){ return t;}{ struct Cyc_List_List*
! _temp2426=(( struct Cyc_List_List*(*)( struct _tuple4*(* f)( struct _tuple4*,
  void*), struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_map2)( Cyc_Tcutil_map2_tq,
! _temp2333, _temp2425); return( void*)({ struct Cyc_Absyn_TupleType_struct*
! _temp2427=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp2427[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp2428; _temp2428.tag= Cyc_Absyn_TupleType;
! _temp2428.f1= _temp2426; _temp2428;}); _temp2427;});}} _LL2238: { struct Cyc_List_List*
! _temp2429=(( struct Cyc_List_List*(*)( struct _RegionHandle*, void*(* f)( struct
  Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_rmap)( rgn, Cyc_Tcutil_field_type,
! _temp2335); struct Cyc_List_List* _temp2430= Cyc_Tcutil_substs( rgn, inst,
! _temp2429); if( _temp2430 ==  _temp2429){ return t;}{ struct Cyc_List_List*
! _temp2431=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(* f)(
  struct Cyc_Absyn_Structfield*, void*), struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_map2)( Cyc_Tcutil_zip_field_type, _temp2335, _temp2430); return(
! void*)({ struct Cyc_Absyn_AnonStructType_struct* _temp2432=( struct Cyc_Absyn_AnonStructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_AnonStructType_struct)); _temp2432[ 0]=({
! struct Cyc_Absyn_AnonStructType_struct _temp2433; _temp2433.tag= Cyc_Absyn_AnonStructType;
! _temp2433.f1= _temp2431; _temp2433;}); _temp2432;});}} _LL2240: { struct Cyc_List_List*
! _temp2434=(( struct Cyc_List_List*(*)( struct _RegionHandle*, void*(* f)( struct
  Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_rmap)( rgn, Cyc_Tcutil_field_type,
! _temp2337); struct Cyc_List_List* _temp2435= Cyc_Tcutil_substs( rgn, inst,
! _temp2434); if( _temp2435 ==  _temp2434){ return t;}{ struct Cyc_List_List*
! _temp2436=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(* f)(
  struct Cyc_Absyn_Structfield*, void*), struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_map2)( Cyc_Tcutil_zip_field_type, _temp2337, _temp2435); return(
! void*)({ struct Cyc_Absyn_AnonStructType_struct* _temp2437=( struct Cyc_Absyn_AnonStructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_AnonStructType_struct)); _temp2437[ 0]=({
! struct Cyc_Absyn_AnonStructType_struct _temp2438; _temp2438.tag= Cyc_Absyn_AnonStructType;
! _temp2438.f1= _temp2436; _temp2438;}); _temp2437;});}} _LL2242: if( _temp2339 != 
  0){ return Cyc_Tcutil_rsubstitute( rgn, inst,( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp2339))->v);} else{ return t;} _LL2244: { void* _temp2439= Cyc_Tcutil_rsubstitute(
! rgn, inst, _temp2341); return _temp2439 ==  _temp2341? t:( void*)({ struct Cyc_Absyn_RgnHandleType_struct*
! _temp2440=( struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_RgnHandleType_struct)); _temp2440[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct
! _temp2441; _temp2441.tag= Cyc_Absyn_RgnHandleType; _temp2441.f1=( void*)
! _temp2439; _temp2441;}); _temp2440;});} _LL2246: return t; _LL2248: return t;
! _LL2250: return t; _LL2252: return t; _LL2254: return t; _LL2256: return t;
! _LL2258: { void* _temp2442= Cyc_Tcutil_rsubstitute( rgn, inst, _temp2343);
! return _temp2442 ==  _temp2343? t:( void*)({ struct Cyc_Absyn_RgnsEff_struct*
! _temp2443=( struct Cyc_Absyn_RgnsEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct));
! _temp2443[ 0]=({ struct Cyc_Absyn_RgnsEff_struct _temp2444; _temp2444.tag= Cyc_Absyn_RgnsEff;
! _temp2444.f1=( void*) _temp2442; _temp2444;}); _temp2443;});} _LL2260: { void*
! _temp2445= Cyc_Tcutil_rsubstitute( rgn, inst, _temp2345); return _temp2445 == 
! _temp2345? t:( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp2446=( struct
  Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp2446[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp2447; _temp2447.tag= Cyc_Absyn_AccessEff;
! _temp2447.f1=( void*) _temp2445; _temp2447;}); _temp2446;});} _LL2262: { struct
! Cyc_List_List* _temp2448= Cyc_Tcutil_substs( rgn, inst, _temp2347); return
! _temp2448 ==  _temp2347? t:( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2449=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2449[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2450; _temp2450.tag= Cyc_Absyn_JoinEff;
! _temp2450.f1= _temp2448; _temp2450;}); _temp2449;});} _LL2216:;} static struct
  Cyc_List_List* Cyc_Tcutil_substs( struct _RegionHandle* rgn, struct Cyc_List_List*
! inst, struct Cyc_List_List* ts){ if( ts ==  0){ return 0;}{ void* _temp2451=(
  void*)(( struct Cyc_List_List*) _check_null( ts))->hd; struct Cyc_List_List*
! _temp2452=(( struct Cyc_List_List*) _check_null( ts))->tl; void* _temp2453= Cyc_Tcutil_rsubstitute(
! rgn, inst, _temp2451); struct Cyc_List_List* _temp2454= Cyc_Tcutil_substs( rgn,
! inst, _temp2452); if( _temp2451 ==  _temp2453? _temp2452 ==  _temp2454: 0){
! return ts;} return( struct Cyc_List_List*)({ struct Cyc_List_List* _temp2455=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2455->hd=(
! void*) _temp2453; _temp2455->tl= _temp2454; _temp2455;});}} extern void* Cyc_Tcutil_substitute(
  struct Cyc_List_List* inst, void* t){ return Cyc_Tcutil_rsubstitute( Cyc_Core_heap_region,
  inst, t);} struct Cyc_Absyn_Exp* Cyc_Tcutil_default_initializer( struct Cyc_Tcenv_Tenv*
  te, void* t, struct Cyc_Position_Segment* loc){ struct Cyc_Absyn_Exp* e= Cyc_Absyn_new_exp((
! void*)({ struct Cyc_Absyn_Const_e_struct* _temp2500=( struct Cyc_Absyn_Const_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct)); _temp2500[ 0]=({ struct
! Cyc_Absyn_Const_e_struct _temp2501; _temp2501.tag= Cyc_Absyn_Const_e; _temp2501.f1=(
! void*)(( void*) Cyc_Absyn_Null_c); _temp2501;}); _temp2500;}), loc);{ void*
! _temp2456= Cyc_Tcutil_compress( t); void* _temp2470; void* _temp2472; void*
! _temp2474; void* _temp2476; _LL2458: if(( unsigned int) _temp2456 >  4u?*(( int*)
! _temp2456) ==  Cyc_Absyn_PointerType: 0){ goto _LL2459;} else{ goto _LL2460;}
! _LL2460: if(( unsigned int) _temp2456 >  4u?*(( int*) _temp2456) ==  Cyc_Absyn_IntType:
! 0){ _LL2473: _temp2472=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2456)->f1;
! goto _LL2471; _LL2471: _temp2470=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp2456)->f2; if( _temp2470 == ( void*) Cyc_Absyn_B1){ goto _LL2461;} else{
! goto _LL2462;}} else{ goto _LL2462;} _LL2462: if(( unsigned int) _temp2456 >  4u?*((
! int*) _temp2456) ==  Cyc_Absyn_IntType: 0){ _LL2477: _temp2476=( void*)(( struct
! Cyc_Absyn_IntType_struct*) _temp2456)->f1; goto _LL2475; _LL2475: _temp2474=(
! void*)(( struct Cyc_Absyn_IntType_struct*) _temp2456)->f2; goto _LL2463;} else{
! goto _LL2464;} _LL2464: if( _temp2456 == ( void*) Cyc_Absyn_FloatType){ goto
! _LL2465;} else{ goto _LL2466;} _LL2466: if( _temp2456 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL2467;} else{ goto _LL2468;} _LL2468: goto _LL2469; _LL2459: goto _LL2457;
! _LL2461:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Const_e_struct*
! _temp2478=( struct Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp2478[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp2479; _temp2479.tag= Cyc_Absyn_Const_e;
! _temp2479.f1=( void*)(( void*)({ struct Cyc_Absyn_Char_c_struct* _temp2480=(
  struct Cyc_Absyn_Char_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Char_c_struct));
! _temp2480[ 0]=({ struct Cyc_Absyn_Char_c_struct _temp2481; _temp2481.tag= Cyc_Absyn_Char_c;
! _temp2481.f1=( void*)(( void*) Cyc_Absyn_Signed); _temp2481.f2='\000'; _temp2481;});
! _temp2480;})); _temp2479;}); _temp2478;}))); goto _LL2457; _LL2463:( void*)( e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Const_e_struct* _temp2482=( struct Cyc_Absyn_Const_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct)); _temp2482[ 0]=({ struct
! Cyc_Absyn_Const_e_struct _temp2483; _temp2483.tag= Cyc_Absyn_Const_e; _temp2483.f1=(
! void*)(( void*)({ struct Cyc_Absyn_Int_c_struct* _temp2484=( struct Cyc_Absyn_Int_c_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct)); _temp2484[ 0]=({ struct Cyc_Absyn_Int_c_struct
! _temp2485; _temp2485.tag= Cyc_Absyn_Int_c; _temp2485.f1=( void*) _temp2476;
! _temp2485.f2= 0; _temp2485;}); _temp2484;})); _temp2483;}); _temp2482;}))); if(
! _temp2474 != ( void*) Cyc_Absyn_B4){ e= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Cast_e_struct*
! _temp2486=( struct Cyc_Absyn_Cast_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Cast_e_struct));
! _temp2486[ 0]=({ struct Cyc_Absyn_Cast_e_struct _temp2487; _temp2487.tag= Cyc_Absyn_Cast_e;
! _temp2487.f1=( void*) t; _temp2487.f2= e; _temp2487;}); _temp2486;}), loc);}
! goto _LL2457; _LL2465:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Const_e_struct*
! _temp2488=( struct Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp2488[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp2489; _temp2489.tag= Cyc_Absyn_Const_e;
! _temp2489.f1=( void*)(( void*)({ struct Cyc_Absyn_Float_c_struct* _temp2490=(
  struct Cyc_Absyn_Float_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Float_c_struct));
! _temp2490[ 0]=({ struct Cyc_Absyn_Float_c_struct _temp2491; _temp2491.tag= Cyc_Absyn_Float_c;
! _temp2491.f1= _tag_arr("0.0", sizeof( unsigned char), 4u); _temp2491;});
! _temp2490;})); _temp2489;}); _temp2488;}))); goto _LL2457; _LL2467:( void*)( e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Cast_e_struct* _temp2492=( struct Cyc_Absyn_Cast_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Cast_e_struct)); _temp2492[ 0]=({ struct Cyc_Absyn_Cast_e_struct
! _temp2493; _temp2493.tag= Cyc_Absyn_Cast_e; _temp2493.f1=( void*) t; _temp2493.f2=
! Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Const_e_struct* _temp2494=( struct
  Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp2494[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp2495; _temp2495.tag= Cyc_Absyn_Const_e;
! _temp2495.f1=( void*)(( void*)({ struct Cyc_Absyn_Float_c_struct* _temp2496=(
  struct Cyc_Absyn_Float_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Float_c_struct));
! _temp2496[ 0]=({ struct Cyc_Absyn_Float_c_struct _temp2497; _temp2497.tag= Cyc_Absyn_Float_c;
! _temp2497.f1= _tag_arr("0.0", sizeof( unsigned char), 4u); _temp2497;});
! _temp2496;})); _temp2495;}); _temp2494;}), loc); _temp2493;}); _temp2492;})));
! goto _LL2457; _LL2469:({ struct Cyc_Std_String_pa_struct _temp2499; _temp2499.tag=
! Cyc_Std_String_pa; _temp2499.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! void* _temp2498[ 1u]={& _temp2499}; Cyc_Tcutil_terr( loc, _tag_arr("declaration of type %s requires initializer",
! sizeof( unsigned char), 44u), _tag_arr( _temp2498, sizeof( void*), 1u));}});
! goto _LL2457; _LL2457:;} return e;} struct _tuple5* Cyc_Tcutil_make_inst_var(
  struct Cyc_List_List* s, struct Cyc_Absyn_Tvar* tv){ void* k= Cyc_Absyn_conref_val(
! tv->kind); return({ struct _tuple5* _temp2502=( struct _tuple5*) _cycalloc(
! sizeof( struct _tuple5)); _temp2502->f1= tv; _temp2502->f2= Cyc_Absyn_new_evar(({
! struct Cyc_Core_Opt* _temp2503=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2503->v=( void*) k; _temp2503;}),({ struct Cyc_Core_Opt*
! _temp2504=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2504->v=( void*) s; _temp2504;})); _temp2502;});} struct _tuple5* Cyc_Tcutil_r_make_inst_var(
! struct _tuple6* env, struct Cyc_Absyn_Tvar* tv){ struct _tuple6 _temp2507;
! struct _RegionHandle* _temp2508; struct Cyc_List_List* _temp2510; struct _tuple6*
! _temp2505= env; _temp2507=* _temp2505; _LL2511: _temp2510= _temp2507.f1; goto
! _LL2509; _LL2509: _temp2508= _temp2507.f2; goto _LL2506; _LL2506: { void* k= Cyc_Absyn_conref_val(
! tv->kind); return({ struct _tuple5* _temp2512=( struct _tuple5*) _region_malloc(
! _temp2508, sizeof( struct _tuple5)); _temp2512->f1= tv; _temp2512->f2= Cyc_Absyn_new_evar(({
! struct Cyc_Core_Opt* _temp2513=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2513->v=( void*) k; _temp2513;}),({ struct Cyc_Core_Opt*
! _temp2514=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2514->v=( void*) _temp2510; _temp2514;})); _temp2512;});}} static struct
  Cyc_List_List* Cyc_Tcutil_add_free_tvar( struct Cyc_Position_Segment* loc,
  struct Cyc_List_List* tvs, struct Cyc_Absyn_Tvar* tv){{ struct Cyc_List_List*
  tvs2= tvs; for( 0; tvs2 !=  0; tvs2=(( struct Cyc_List_List*) _check_null( tvs2))->tl){
--- 2570,3274 ----
  _tuple8*)(( struct Cyc_List_List*) _check_null( a))->hd)).f1)? Cyc_Tcutil_unify(
  t2,(*(( struct _tuple8*)(( struct Cyc_List_List*) _check_null( a))->hd)).f2): 0){
  return 1;}}} t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress( t2);{ struct
! _tuple8 _temp1864=({ struct _tuple8 _temp1863; _temp1863.f1= t1; _temp1863.f2=
! t2; _temp1863;}); void* _temp1870; struct Cyc_Absyn_PtrInfo _temp1872; struct
! Cyc_Absyn_Conref* _temp1874; struct Cyc_Absyn_Tqual _temp1876; struct Cyc_Absyn_Conref*
! _temp1878; void* _temp1880; void* _temp1882; void* _temp1884; struct Cyc_Absyn_PtrInfo
! _temp1886; struct Cyc_Absyn_Conref* _temp1888; struct Cyc_Absyn_Tqual _temp1890;
! struct Cyc_Absyn_Conref* _temp1892; void* _temp1894; void* _temp1896; _LL1866:
! _LL1885: _temp1884= _temp1864.f1; if(( unsigned int) _temp1884 >  4u?*(( int*)
! _temp1884) ==  Cyc_Absyn_PointerType: 0){ _LL1887: _temp1886=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1884)->f1; _LL1897: _temp1896=( void*) _temp1886.elt_typ; goto _LL1895;
! _LL1895: _temp1894=( void*) _temp1886.rgn_typ; goto _LL1893; _LL1893: _temp1892=
! _temp1886.nullable; goto _LL1891; _LL1891: _temp1890= _temp1886.tq; goto _LL1889;
! _LL1889: _temp1888= _temp1886.bounds; goto _LL1871;} else{ goto _LL1868;}
! _LL1871: _temp1870= _temp1864.f2; if(( unsigned int) _temp1870 >  4u?*(( int*)
! _temp1870) ==  Cyc_Absyn_PointerType: 0){ _LL1873: _temp1872=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1870)->f1; _LL1883: _temp1882=( void*) _temp1872.elt_typ; goto _LL1881;
! _LL1881: _temp1880=( void*) _temp1872.rgn_typ; goto _LL1879; _LL1879: _temp1878=
! _temp1872.nullable; goto _LL1877; _LL1877: _temp1876= _temp1872.tq; goto _LL1875;
! _LL1875: _temp1874= _temp1872.bounds; goto _LL1867;} else{ goto _LL1868;}
! _LL1868: goto _LL1869; _LL1867: if( _temp1890.q_const? ! _temp1876.q_const: 0){
  return 0;} if(( !(( int(*)( int(* cmp)( int, int), struct Cyc_Absyn_Conref* x,
  struct Cyc_Absyn_Conref* y)) Cyc_Tcutil_unify_conrefs)( Cyc_Core_intcmp,
! _temp1892, _temp1878)?(( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp1892): 0)? !(( int(*)( struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_val)(
! _temp1878): 0){ return 0;} if( ! Cyc_Tcutil_unify( _temp1894, _temp1880)? ! Cyc_Tcenv_region_outlives(
! te, _temp1894, _temp1880): 0){ return 0;} if( ! Cyc_Tcutil_unify_conrefs( Cyc_Tcutil_boundscmp,
! _temp1888, _temp1874)){ struct _tuple8 _temp1899=({ struct _tuple8 _temp1898;
! _temp1898.f1= Cyc_Absyn_conref_val( _temp1888); _temp1898.f2= Cyc_Absyn_conref_val(
! _temp1874); _temp1898;}); void* _temp1907; void* _temp1909; void* _temp1911;
! struct Cyc_Absyn_Exp* _temp1913; void* _temp1915; struct Cyc_Absyn_Exp*
! _temp1917; _LL1901: _LL1910: _temp1909= _temp1899.f1; if(( unsigned int)
! _temp1909 >  1u?*(( int*) _temp1909) ==  Cyc_Absyn_Upper_b: 0){ goto _LL1908;}
! else{ goto _LL1903;} _LL1908: _temp1907= _temp1899.f2; if( _temp1907 == ( void*)
! Cyc_Absyn_Unknown_b){ goto _LL1902;} else{ goto _LL1903;} _LL1903: _LL1916:
! _temp1915= _temp1899.f1; if(( unsigned int) _temp1915 >  1u?*(( int*) _temp1915)
! ==  Cyc_Absyn_Upper_b: 0){ _LL1918: _temp1917=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1915)->f1; goto _LL1912;} else{ goto _LL1905;} _LL1912: _temp1911=
! _temp1899.f2; if(( unsigned int) _temp1911 >  1u?*(( int*) _temp1911) ==  Cyc_Absyn_Upper_b:
! 0){ _LL1914: _temp1913=(( struct Cyc_Absyn_Upper_b_struct*) _temp1911)->f1; goto
! _LL1904;} else{ goto _LL1905;} _LL1905: goto _LL1906; _LL1902: goto _LL1900;
! _LL1904: if( Cyc_Evexp_eval_const_uint_exp( _temp1917) <  Cyc_Evexp_eval_const_uint_exp(
! _temp1913)){ return 0;} goto _LL1900; _LL1906: return 0; _LL1900:;} return Cyc_Tcutil_ptrsubtype(
! te,({ struct Cyc_List_List* _temp1919=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1919->hd=( void*)({ struct _tuple8*
! _temp1920=( struct _tuple8*) _cycalloc( sizeof( struct _tuple8)); _temp1920->f1=
! t1; _temp1920->f2= t2; _temp1920;}); _temp1919->tl= assume; _temp1919;}),
! _temp1896, _temp1882); _LL1869: return 0; _LL1865:;}} static int Cyc_Tcutil_isomorphic(
! void* t1, void* t2){ struct _tuple8 _temp1922=({ struct _tuple8 _temp1921;
! _temp1921.f1= Cyc_Tcutil_compress( t1); _temp1921.f2= Cyc_Tcutil_compress( t2);
! _temp1921;}); void* _temp1928; void* _temp1930; void* _temp1932; void* _temp1934;
! _LL1924: _LL1933: _temp1932= _temp1922.f1; if(( unsigned int) _temp1932 >  4u?*((
! int*) _temp1932) ==  Cyc_Absyn_IntType: 0){ _LL1935: _temp1934=( void*)(( struct
! Cyc_Absyn_IntType_struct*) _temp1932)->f2; goto _LL1929;} else{ goto _LL1926;}
! _LL1929: _temp1928= _temp1922.f2; if(( unsigned int) _temp1928 >  4u?*(( int*)
! _temp1928) ==  Cyc_Absyn_IntType: 0){ _LL1931: _temp1930=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp1928)->f2; goto _LL1925;} else{ goto _LL1926;} _LL1926: goto _LL1927;
! _LL1925: return _temp1934 ==  _temp1930; _LL1927: return 0; _LL1923:;} static
  int Cyc_Tcutil_ptrsubtype( struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List*
  assume, void* t1, void* t2){ struct Cyc_List_List* tqs1= Cyc_Tcutil_flatten_typ(
  te, t1); struct Cyc_List_List* tqs2= Cyc_Tcutil_flatten_typ( te, t2); for( 0;
  tqs2 !=  0;( tqs2=(( struct Cyc_List_List*) _check_null( tqs2))->tl, tqs1=((
  struct Cyc_List_List*) _check_null( tqs1))->tl)){ if( tqs1 ==  0){ return 0;}{
! struct _tuple4 _temp1938; void* _temp1939; struct Cyc_Absyn_Tqual _temp1941;
! struct _tuple4* _temp1936=( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( tqs1))->hd; _temp1938=* _temp1936; _LL1942: _temp1941= _temp1938.f1;
! goto _LL1940; _LL1940: _temp1939= _temp1938.f2; goto _LL1937; _LL1937: { struct
! _tuple4 _temp1945; void* _temp1946; struct Cyc_Absyn_Tqual _temp1948; struct
! _tuple4* _temp1943=( struct _tuple4*)(( struct Cyc_List_List*) _check_null( tqs2))->hd;
! _temp1945=* _temp1943; _LL1949: _temp1948= _temp1945.f1; goto _LL1947; _LL1947:
! _temp1946= _temp1945.f2; goto _LL1944; _LL1944: if( _temp1948.q_const? Cyc_Tcutil_subtype(
! te, assume, _temp1939, _temp1946): 0){ continue;} else{ if( Cyc_Tcutil_unify(
! _temp1939, _temp1946)){ continue;} else{ if( Cyc_Tcutil_isomorphic( _temp1939,
! _temp1946)){ continue;} else{ return 0;}}}}}} return 1;} int Cyc_Tcutil_castable(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Position_Segment* loc, void* t1, void* t2){
  if( Cyc_Tcutil_unify( t1, t2)){ return 1;} t1= Cyc_Tcutil_compress( t1); t2= Cyc_Tcutil_compress(
! t2);{ void* _temp1950= t2; struct Cyc_Absyn_Uniondecl** _temp1958; struct Cyc_List_List*
! _temp1960; void* _temp1962; _LL1952: if(( unsigned int) _temp1950 >  4u?*(( int*)
! _temp1950) ==  Cyc_Absyn_UnionType: 0){ _LL1961: _temp1960=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1950)->f2; goto _LL1959; _LL1959: _temp1958=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1950)->f3; goto _LL1953;} else{ goto _LL1954;} _LL1954: if(( unsigned int)
! _temp1950 >  4u?*(( int*) _temp1950) ==  Cyc_Absyn_IntType: 0){ _LL1963:
! _temp1962=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp1950)->f2; if(
! _temp1962 == ( void*) Cyc_Absyn_B4){ goto _LL1955;} else{ goto _LL1956;}} else{
! goto _LL1956;} _LL1956: goto _LL1957; _LL1953: if( _temp1958 ==  0){ goto
! _LL1951;}{ struct Cyc_Absyn_Uniondecl* _temp1964=*(( struct Cyc_Absyn_Uniondecl**)
! _check_null( _temp1958)); if( _temp1964->fields ==  0){ goto _LL1951;}{ struct
! Cyc_List_List* _temp1965=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_zip)( _temp1964->tvs, _temp1960);{ struct Cyc_List_List*
! fs=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1964->fields))->v;
  for( 0; fs !=  0; fs=(( struct Cyc_List_List*) _check_null( fs))->tl){ if( Cyc_Tcutil_unify(
! t1, Cyc_Tcutil_substitute( _temp1965,( void*)(( struct Cyc_Absyn_Structfield*)((
  struct Cyc_List_List*) _check_null( fs))->hd)->type))){ return 1;}}} goto
! _LL1951;}} _LL1955: if( Cyc_Tcutil_typ_kind( t2) == ( void*) Cyc_Absyn_BoxKind){
! return 1;} goto _LL1951; _LL1957: goto _LL1951; _LL1951:;}{ void* _temp1966= t1;
! struct Cyc_Absyn_PtrInfo _temp1984; struct Cyc_Absyn_Conref* _temp1986; struct
! Cyc_Absyn_Tqual _temp1988; struct Cyc_Absyn_Conref* _temp1990; void* _temp1992;
! void* _temp1994; struct Cyc_Absyn_Exp* _temp1996; struct Cyc_Absyn_Tqual
! _temp1998; void* _temp2000; struct Cyc_Absyn_Enumdecl* _temp2002; _LL1968: if((
! unsigned int) _temp1966 >  4u?*(( int*) _temp1966) ==  Cyc_Absyn_PointerType: 0){
! _LL1985: _temp1984=(( struct Cyc_Absyn_PointerType_struct*) _temp1966)->f1;
! _LL1995: _temp1994=( void*) _temp1984.elt_typ; goto _LL1993; _LL1993: _temp1992=(
! void*) _temp1984.rgn_typ; goto _LL1991; _LL1991: _temp1990= _temp1984.nullable;
! goto _LL1989; _LL1989: _temp1988= _temp1984.tq; goto _LL1987; _LL1987: _temp1986=
! _temp1984.bounds; goto _LL1969;} else{ goto _LL1970;} _LL1970: if(( unsigned int)
! _temp1966 >  4u?*(( int*) _temp1966) ==  Cyc_Absyn_ArrayType: 0){ _LL2001:
! _temp2000=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp1966)->f1; goto
! _LL1999; _LL1999: _temp1998=(( struct Cyc_Absyn_ArrayType_struct*) _temp1966)->f2;
! goto _LL1997; _LL1997: _temp1996=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp1966)->f3; goto _LL1971;} else{ goto _LL1972;} _LL1972: if(( unsigned int)
! _temp1966 >  4u?*(( int*) _temp1966) ==  Cyc_Absyn_EnumType: 0){ _LL2003:
! _temp2002=(( struct Cyc_Absyn_EnumType_struct*) _temp1966)->f2; goto _LL1973;}
! else{ goto _LL1974;} _LL1974: if(( unsigned int) _temp1966 >  4u?*(( int*)
! _temp1966) ==  Cyc_Absyn_IntType: 0){ goto _LL1975;} else{ goto _LL1976;}
! _LL1976: if( _temp1966 == ( void*) Cyc_Absyn_FloatType){ goto _LL1977;} else{
! goto _LL1978;} _LL1978: if( _temp1966 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL1979;} else{ goto _LL1980;} _LL1980: if( _temp1966 == ( void*) Cyc_Absyn_VoidType){
! goto _LL1981;} else{ goto _LL1982;} _LL1982: goto _LL1983; _LL1969:{ void*
! _temp2004= t2; struct Cyc_Absyn_PtrInfo _temp2012; struct Cyc_Absyn_Conref*
! _temp2014; struct Cyc_Absyn_Tqual _temp2016; struct Cyc_Absyn_Conref* _temp2018;
! void* _temp2020; void* _temp2022; _LL2006: if(( unsigned int) _temp2004 >  4u?*((
! int*) _temp2004) ==  Cyc_Absyn_PointerType: 0){ _LL2013: _temp2012=(( struct Cyc_Absyn_PointerType_struct*)
! _temp2004)->f1; _LL2023: _temp2022=( void*) _temp2012.elt_typ; goto _LL2021;
! _LL2021: _temp2020=( void*) _temp2012.rgn_typ; goto _LL2019; _LL2019: _temp2018=
! _temp2012.nullable; goto _LL2017; _LL2017: _temp2016= _temp2012.tq; goto _LL2015;
! _LL2015: _temp2014= _temp2012.bounds; goto _LL2007;} else{ goto _LL2008;}
! _LL2008: if( _temp2004 == ( void*) Cyc_Absyn_VoidType){ goto _LL2009;} else{
! goto _LL2010;} _LL2010: goto _LL2011; _LL2007: { struct Cyc_List_List* _temp2024=({
! struct Cyc_List_List* _temp2041=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2041->hd=( void*)({ struct _tuple8* _temp2042=(
! struct _tuple8*) _cycalloc( sizeof( struct _tuple8)); _temp2042->f1= t1;
! _temp2042->f2= t2; _temp2042;}); _temp2041->tl= 0; _temp2041;}); int _temp2025=
! Cyc_Tcutil_ptrsubtype( te, _temp2024, _temp1994, _temp2022)? ! _temp1988.q_const?
! 1: _temp2016.q_const: 0; int bounds_ok= Cyc_Tcutil_unify_conrefs( Cyc_Tcutil_boundscmp,
! _temp1986, _temp2014); if( ! bounds_ok){ struct _tuple8 _temp2027=({ struct
! _tuple8 _temp2026; _temp2026.f1= Cyc_Absyn_conref_val( _temp1986); _temp2026.f2=
! Cyc_Absyn_conref_val( _temp2014); _temp2026;}); void* _temp2033; struct Cyc_Absyn_Exp*
! _temp2035; void* _temp2037; struct Cyc_Absyn_Exp* _temp2039; _LL2029: _LL2038:
! _temp2037= _temp2027.f1; if(( unsigned int) _temp2037 >  1u?*(( int*) _temp2037)
! ==  Cyc_Absyn_Upper_b: 0){ _LL2040: _temp2039=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp2037)->f1; goto _LL2034;} else{ goto _LL2031;} _LL2034: _temp2033=
! _temp2027.f2; if(( unsigned int) _temp2033 >  1u?*(( int*) _temp2033) ==  Cyc_Absyn_Upper_b:
! 0){ _LL2036: _temp2035=(( struct Cyc_Absyn_Upper_b_struct*) _temp2033)->f1; goto
! _LL2030;} else{ goto _LL2031;} _LL2031: goto _LL2032; _LL2030: if( Cyc_Evexp_eval_const_uint_exp(
! _temp2039) >=  Cyc_Evexp_eval_const_uint_exp( _temp2035)){ bounds_ok= 1;} goto
! _LL2028; _LL2032: bounds_ok= 1; goto _LL2028; _LL2028:;} return( bounds_ok?
! _temp2025: 0)? Cyc_Tcutil_unify( _temp1992, _temp2020)? 1: Cyc_Tcenv_region_outlives(
! te, _temp1992, _temp2020): 0;} _LL2009: return 1; _LL2011: goto _LL2005; _LL2005:;}
! return 0; _LL1971:{ void* _temp2043= t2; struct Cyc_Absyn_Exp* _temp2049; struct
! Cyc_Absyn_Tqual _temp2051; void* _temp2053; _LL2045: if(( unsigned int)
! _temp2043 >  4u?*(( int*) _temp2043) ==  Cyc_Absyn_ArrayType: 0){ _LL2054:
! _temp2053=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp2043)->f1; goto
! _LL2052; _LL2052: _temp2051=(( struct Cyc_Absyn_ArrayType_struct*) _temp2043)->f2;
! goto _LL2050; _LL2050: _temp2049=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp2043)->f3; goto _LL2046;} else{ goto _LL2047;} _LL2047: goto _LL2048;
! _LL2046: { int okay; okay=( _temp1996 !=  0? _temp2049 !=  0: 0)? Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp1996)) >=  Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp2049)): 0; return( okay? Cyc_Tcutil_unify(
! _temp2000, _temp2053): 0)? ! _temp1998.q_const? 1: _temp2051.q_const: 0;}
! _LL2048: return 0; _LL2044:;} return 0; _LL1973:{ void* _temp2055= t2; struct
! Cyc_Absyn_Enumdecl* _temp2061; _LL2057: if(( unsigned int) _temp2055 >  4u?*((
! int*) _temp2055) ==  Cyc_Absyn_EnumType: 0){ _LL2062: _temp2061=(( struct Cyc_Absyn_EnumType_struct*)
! _temp2055)->f2; goto _LL2058;} else{ goto _LL2059;} _LL2059: goto _LL2060;
! _LL2058: if(((( struct Cyc_Absyn_Enumdecl*) _check_null( _temp2002))->fields != 
! 0?(( struct Cyc_Absyn_Enumdecl*) _check_null( _temp2061))->fields !=  0: 0)?((
  int(*)( struct Cyc_List_List* x)) Cyc_List_length)(( struct Cyc_List_List*)((
  struct Cyc_Core_Opt*) _check_null((( struct Cyc_Absyn_Enumdecl*) _check_null(
! _temp2002))->fields))->v) >= (( int(*)( struct Cyc_List_List* x)) Cyc_List_length)((
  struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null((( struct Cyc_Absyn_Enumdecl*)
! _check_null( _temp2061))->fields))->v): 0){ return 1;} goto _LL2056; _LL2060:
! goto _LL2056; _LL2056:;} goto _LL1975; _LL1975: goto _LL1977; _LL1977: goto
! _LL1979; _LL1979: return Cyc_Tcutil_coerceable( t2)? 1: t2 == ( void*) Cyc_Absyn_VoidType;
! _LL1981: return t2 == ( void*) Cyc_Absyn_VoidType; _LL1983: return 0; _LL1967:;}}
  void Cyc_Tcutil_unchecked_cast( struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp*
  e, void* t){ if( ! Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*) _check_null(
! e->topt))->v, t)){ struct Cyc_Absyn_Exp* _temp2063= Cyc_Absyn_copy_exp( e);(
! void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Cast_e_struct* _temp2064=(
  struct Cyc_Absyn_Cast_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Cast_e_struct));
! _temp2064[ 0]=({ struct Cyc_Absyn_Cast_e_struct _temp2065; _temp2065.tag= Cyc_Absyn_Cast_e;
! _temp2065.f1=( void*) t; _temp2065.f2= _temp2063; _temp2065;}); _temp2064;})));
! e->topt=({ struct Cyc_Core_Opt* _temp2066=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp2066->v=( void*) t; _temp2066;});}} int Cyc_Tcutil_is_integral(
! struct Cyc_Absyn_Exp* e){ void* _temp2067= Cyc_Tcutil_compress(( void*)(( struct
! Cyc_Core_Opt*) _check_null( e->topt))->v); _LL2069: if(( unsigned int) _temp2067
! >  4u?*(( int*) _temp2067) ==  Cyc_Absyn_EnumType: 0){ goto _LL2070;} else{ goto
! _LL2071;} _LL2071: if(( unsigned int) _temp2067 >  4u?*(( int*) _temp2067) == 
! Cyc_Absyn_IntType: 0){ goto _LL2072;} else{ goto _LL2073;} _LL2073: if((
! unsigned int) _temp2067 >  4u?*(( int*) _temp2067) ==  Cyc_Absyn_Evar: 0){ goto
! _LL2074;} else{ goto _LL2075;} _LL2075: goto _LL2076; _LL2070: goto _LL2072;
! _LL2072: return 1; _LL2074: return Cyc_Tcutil_unify(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v, Cyc_Absyn_sint_t); _LL2076: return 0; _LL2068:;} int
  Cyc_Tcutil_is_numeric( struct Cyc_Absyn_Exp* e){ if( Cyc_Tcutil_is_integral( e)){
! return 1;}{ void* _temp2077= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v); _LL2079: if( _temp2077 == ( void*) Cyc_Absyn_FloatType){
! goto _LL2080;} else{ goto _LL2081;} _LL2081: if( _temp2077 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL2082;} else{ goto _LL2083;} _LL2083: goto _LL2084; _LL2080: goto _LL2082;
! _LL2082: return 1; _LL2084: return 0; _LL2078:;}} int Cyc_Tcutil_is_function_type(
! void* t){ void* _temp2085= Cyc_Tcutil_compress( t); _LL2087: if(( unsigned int)
! _temp2085 >  4u?*(( int*) _temp2085) ==  Cyc_Absyn_FnType: 0){ goto _LL2088;}
! else{ goto _LL2089;} _LL2089: goto _LL2090; _LL2088: return 1; _LL2090: return 0;
! _LL2086:;} void* Cyc_Tcutil_max_arithmetic_type( void* t1, void* t2){ struct
! _tuple8 _temp2092=({ struct _tuple8 _temp2091; _temp2091.f1= t1; _temp2091.f2=
! t2; _temp2091;}); void* _temp2116; void* _temp2118; void* _temp2120; void*
! _temp2122; void* _temp2124; void* _temp2126; void* _temp2128; void* _temp2130;
! void* _temp2132; void* _temp2134; void* _temp2136; void* _temp2138; void*
! _temp2140; void* _temp2142; void* _temp2144; void* _temp2146; void* _temp2148;
! void* _temp2150; void* _temp2152; void* _temp2154; void* _temp2156; void*
! _temp2158; _LL2094: _LL2117: _temp2116= _temp2092.f1; if( _temp2116 == ( void*)
! Cyc_Absyn_DoubleType){ goto _LL2095;} else{ goto _LL2096;} _LL2096: _LL2119:
! _temp2118= _temp2092.f2; if( _temp2118 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL2097;} else{ goto _LL2098;} _LL2098: _LL2121: _temp2120= _temp2092.f1; if(
! _temp2120 == ( void*) Cyc_Absyn_FloatType){ goto _LL2099;} else{ goto _LL2100;}
! _LL2100: _LL2123: _temp2122= _temp2092.f2; if( _temp2122 == ( void*) Cyc_Absyn_FloatType){
! goto _LL2101;} else{ goto _LL2102;} _LL2102: _LL2125: _temp2124= _temp2092.f1;
! if(( unsigned int) _temp2124 >  4u?*(( int*) _temp2124) ==  Cyc_Absyn_IntType: 0){
! _LL2129: _temp2128=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2124)->f1;
! if( _temp2128 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2127;} else{ goto _LL2104;}
! _LL2127: _temp2126=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2124)->f2;
! if( _temp2126 == ( void*) Cyc_Absyn_B8){ goto _LL2103;} else{ goto _LL2104;}}
! else{ goto _LL2104;} _LL2104: _LL2131: _temp2130= _temp2092.f2; if((
! unsigned int) _temp2130 >  4u?*(( int*) _temp2130) ==  Cyc_Absyn_IntType: 0){
! _LL2135: _temp2134=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2130)->f1;
! if( _temp2134 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2133;} else{ goto _LL2106;}
! _LL2133: _temp2132=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2130)->f2;
! if( _temp2132 == ( void*) Cyc_Absyn_B8){ goto _LL2105;} else{ goto _LL2106;}}
! else{ goto _LL2106;} _LL2106: _LL2137: _temp2136= _temp2092.f1; if((
! unsigned int) _temp2136 >  4u?*(( int*) _temp2136) ==  Cyc_Absyn_IntType: 0){
! _LL2141: _temp2140=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2136)->f1;
! if( _temp2140 == ( void*) Cyc_Absyn_Signed){ goto _LL2139;} else{ goto _LL2108;}
! _LL2139: _temp2138=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2136)->f2;
! if( _temp2138 == ( void*) Cyc_Absyn_B8){ goto _LL2107;} else{ goto _LL2108;}}
! else{ goto _LL2108;} _LL2108: _LL2143: _temp2142= _temp2092.f2; if((
! unsigned int) _temp2142 >  4u?*(( int*) _temp2142) ==  Cyc_Absyn_IntType: 0){
! _LL2147: _temp2146=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2142)->f1;
! if( _temp2146 == ( void*) Cyc_Absyn_Signed){ goto _LL2145;} else{ goto _LL2110;}
! _LL2145: _temp2144=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2142)->f2;
! if( _temp2144 == ( void*) Cyc_Absyn_B8){ goto _LL2109;} else{ goto _LL2110;}}
! else{ goto _LL2110;} _LL2110: _LL2149: _temp2148= _temp2092.f1; if((
! unsigned int) _temp2148 >  4u?*(( int*) _temp2148) ==  Cyc_Absyn_IntType: 0){
! _LL2153: _temp2152=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2148)->f1;
! if( _temp2152 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2151;} else{ goto _LL2112;}
! _LL2151: _temp2150=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2148)->f2;
! if( _temp2150 == ( void*) Cyc_Absyn_B4){ goto _LL2111;} else{ goto _LL2112;}}
! else{ goto _LL2112;} _LL2112: _LL2155: _temp2154= _temp2092.f2; if((
! unsigned int) _temp2154 >  4u?*(( int*) _temp2154) ==  Cyc_Absyn_IntType: 0){
! _LL2159: _temp2158=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2154)->f1;
! if( _temp2158 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2157;} else{ goto _LL2114;}
! _LL2157: _temp2156=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2154)->f2;
! if( _temp2156 == ( void*) Cyc_Absyn_B4){ goto _LL2113;} else{ goto _LL2114;}}
! else{ goto _LL2114;} _LL2114: goto _LL2115; _LL2095: goto _LL2097; _LL2097:
! return( void*) Cyc_Absyn_DoubleType; _LL2099: goto _LL2101; _LL2101: return(
! void*) Cyc_Absyn_FloatType; _LL2103: goto _LL2105; _LL2105: return Cyc_Absyn_ulonglong_t;
! _LL2107: goto _LL2109; _LL2109: return Cyc_Absyn_slonglong_t; _LL2111: goto
! _LL2113; _LL2113: return Cyc_Absyn_uint_t; _LL2115: return Cyc_Absyn_sint_t;
! _LL2093:;} void Cyc_Tcutil_check_contains_assign( struct Cyc_Absyn_Exp* e){ void*
! _temp2160=( void*) e->r; struct Cyc_Core_Opt* _temp2166; _LL2162: if(*(( int*)
! _temp2160) ==  Cyc_Absyn_AssignOp_e){ _LL2167: _temp2166=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp2160)->f2; if( _temp2166 ==  0){ goto _LL2163;} else{ goto _LL2164;}} else{
! goto _LL2164;} _LL2164: goto _LL2165; _LL2163:({ void* _temp2168[ 0u]={}; Cyc_Tcutil_warn(
  e->loc, _tag_arr("assignment in test", sizeof( unsigned char), 19u), _tag_arr(
! _temp2168, sizeof( void*), 0u));}); goto _LL2161; _LL2165: goto _LL2161; _LL2161:;}
  static int Cyc_Tcutil_constrain_kinds( struct Cyc_Absyn_Conref* c1, struct Cyc_Absyn_Conref*
  c2){ c1= Cyc_Absyn_compress_conref( c1); c2= Cyc_Absyn_compress_conref( c2); if(
  c1 ==  c2){ return 1;} if(( void*) c1->v == ( void*) Cyc_Absyn_No_constr){( void*)(
! c1->v=( void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct* _temp2169=(
  struct Cyc_Absyn_Forward_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Forward_constr_struct));
! _temp2169[ 0]=({ struct Cyc_Absyn_Forward_constr_struct _temp2170; _temp2170.tag=
! Cyc_Absyn_Forward_constr; _temp2170.f1= c2; _temp2170;}); _temp2169;}))); return
  1;} else{ if(( void*) c2->v == ( void*) Cyc_Absyn_No_constr){( void*)( c2->v=(
+ void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct* _temp2171=( struct Cyc_Absyn_Forward_constr_struct*)
+ _cycalloc( sizeof( struct Cyc_Absyn_Forward_constr_struct)); _temp2171[ 0]=({
+ struct Cyc_Absyn_Forward_constr_struct _temp2172; _temp2172.tag= Cyc_Absyn_Forward_constr;
+ _temp2172.f1= c1; _temp2172;}); _temp2171;}))); return 1;} else{ void* k1= Cyc_Absyn_conref_val(
+ c1); void* k2= Cyc_Absyn_conref_val( c2); if( Cyc_Tcutil_kind_leq( k1, k2)){(
+ void*)( c2->v=( void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct*
+ _temp2173=( struct Cyc_Absyn_Forward_constr_struct*) _cycalloc( sizeof( struct
+ Cyc_Absyn_Forward_constr_struct)); _temp2173[ 0]=({ struct Cyc_Absyn_Forward_constr_struct
+ _temp2174; _temp2174.tag= Cyc_Absyn_Forward_constr; _temp2174.f1= c1; _temp2174;});
+ _temp2173;}))); return 1;} else{ if( Cyc_Tcutil_kind_leq( k2, k1)){( void*)( c1->v=(
  void*)(( void*)({ struct Cyc_Absyn_Forward_constr_struct* _temp2175=( struct Cyc_Absyn_Forward_constr_struct*)
  _cycalloc( sizeof( struct Cyc_Absyn_Forward_constr_struct)); _temp2175[ 0]=({
  struct Cyc_Absyn_Forward_constr_struct _temp2176; _temp2176.tag= Cyc_Absyn_Forward_constr;
! _temp2176.f1= c2; _temp2176;}); _temp2175;}))); return 1;} else{ return 0;}}}}}
  static int Cyc_Tcutil_tvar_id_counter= 0; int* Cyc_Tcutil_new_tvar_id(){ return({
! int* _temp2177=( int*) _cycalloc_atomic( sizeof( int)); _temp2177[ 0]= Cyc_Tcutil_tvar_id_counter
! ++; _temp2177;});} static int Cyc_Tcutil_tvar_counter= 0; struct Cyc_Absyn_Tvar*
  Cyc_Tcutil_new_tvar( void* k){ int i= Cyc_Tcutil_tvar_counter ++; struct
! _tagged_arr s=( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct _temp2181;
! _temp2181.tag= Cyc_Std_Int_pa; _temp2181.f1=( int)(( unsigned int) i);{ void*
! _temp2180[ 1u]={& _temp2181}; Cyc_Std_aprintf( _tag_arr("#%d", sizeof(
! unsigned char), 4u), _tag_arr( _temp2180, sizeof( void*), 1u));}}); return({
! struct Cyc_Absyn_Tvar* _temp2178=( struct Cyc_Absyn_Tvar*) _cycalloc( sizeof(
! struct Cyc_Absyn_Tvar)); _temp2178->name=({ struct _tagged_arr* _temp2179=(
! struct _tagged_arr*) _cycalloc( sizeof( struct _tagged_arr) *  1); _temp2179[ 0]=
! s; _temp2179;}); _temp2178->identity= 0; _temp2178->kind= Cyc_Absyn_new_conref(
! k); _temp2178;});} int Cyc_Tcutil_is_temp_tvar( struct Cyc_Absyn_Tvar* t){
! struct _tagged_arr _temp2182=* t->name; return*(( const unsigned char*)
! _check_unknown_subscript( _temp2182, sizeof( unsigned char), 0)) == '#';} void
  Cyc_Tcutil_rewrite_temp_tvar( struct Cyc_Absyn_Tvar* t){({ struct Cyc_Std_String_pa_struct
! _temp2184; _temp2184.tag= Cyc_Std_String_pa; _temp2184.f1=( struct _tagged_arr)*
! t->name;{ void* _temp2183[ 1u]={& _temp2184}; Cyc_Std_printf( _tag_arr("%s",
! sizeof( unsigned char), 3u), _tag_arr( _temp2183, sizeof( void*), 1u));}}); if(
! ! Cyc_Tcutil_is_temp_tvar( t)){ return;}{ struct _tagged_arr _temp2185= Cyc_Std_strconcat(
  _tag_arr("`", sizeof( unsigned char), 2u),* t->name);*(( unsigned char*)
! _check_unknown_subscript( _temp2185, sizeof( unsigned char), 1))='t'; t->name=({
! struct _tagged_arr* _temp2186=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr) *  1); _temp2186[ 0]=( struct _tagged_arr) _temp2185; _temp2186;});}}
  struct _tuple13{ struct _tagged_arr* f1; struct Cyc_Absyn_Tqual f2; void* f3; }
  ; static struct _tuple2* Cyc_Tcutil_fndecl2typ_f( struct _tuple13* x){ return({
! struct _tuple2* _temp2187=( struct _tuple2*) _cycalloc( sizeof( struct _tuple2));
! _temp2187->f1=( struct Cyc_Core_Opt*)({ struct Cyc_Core_Opt* _temp2188=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2188->v=( void*)(*
! x).f1; _temp2188;}); _temp2187->f2=(* x).f2; _temp2187->f3=(* x).f3; _temp2187;});}
  void* Cyc_Tcutil_fndecl2typ( struct Cyc_Absyn_Fndecl* fd){ if( fd->cached_typ == 
! 0){ struct Cyc_List_List* _temp2189= 0;{ struct Cyc_List_List* atts= fd->attributes;
  for( 0; atts !=  0; atts=(( struct Cyc_List_List*) _check_null( atts))->tl){ if(
  Cyc_Absyn_fntype_att(( void*)(( struct Cyc_List_List*) _check_null( atts))->hd)){
! _temp2189=({ struct Cyc_List_List* _temp2190=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp2190->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null( atts))->hd); _temp2190->tl= _temp2189; _temp2190;});}}} return(
! void*)({ struct Cyc_Absyn_FnType_struct* _temp2191=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp2191[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp2192; _temp2192.tag= Cyc_Absyn_FnType; _temp2192.f1=({ struct Cyc_Absyn_FnInfo
! _temp2193; _temp2193.tvars= fd->tvs; _temp2193.effect= fd->effect; _temp2193.ret_typ=(
! void*)(( void*) fd->ret_type); _temp2193.args=(( struct Cyc_List_List*(*)(
  struct _tuple2*(* f)( struct _tuple13*), struct Cyc_List_List* x)) Cyc_List_map)(
! Cyc_Tcutil_fndecl2typ_f, fd->args); _temp2193.c_varargs= fd->c_varargs;
! _temp2193.cyc_varargs= fd->cyc_varargs; _temp2193.rgn_po= fd->rgn_po; _temp2193.attributes=
! _temp2189; _temp2193;}); _temp2192;}); _temp2191;});} return( void*)(( struct
  Cyc_Core_Opt*) _check_null( fd->cached_typ))->v;} struct _tuple14{ void* f1;
  struct Cyc_Absyn_Tqual f2; void* f3; } ; static void* Cyc_Tcutil_fst_fdarg(
  struct _tuple14* t){ return(* t).f1;} void* Cyc_Tcutil_snd_tqt( struct _tuple4*
  t){ return(* t).f2;} static struct _tuple4* Cyc_Tcutil_map2_tq( struct _tuple4*
! pr, void* t){ return({ struct _tuple4* _temp2194=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp2194->f1=(* pr).f1; _temp2194->f2= t; _temp2194;});}
  struct _tuple15{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; } ; struct
  _tuple16{ struct _tuple15* f1; void* f2; } ; static struct _tuple16* Cyc_Tcutil_substitute_f1(
  struct _RegionHandle* rgn, struct _tuple2* y){ return({ struct _tuple16*
! _temp2195=( struct _tuple16*) _region_malloc( rgn, sizeof( struct _tuple16));
! _temp2195->f1=({ struct _tuple15* _temp2196=( struct _tuple15*) _region_malloc(
! rgn, sizeof( struct _tuple15)); _temp2196->f1=(* y).f1; _temp2196->f2=(* y).f2;
! _temp2196;}); _temp2195->f2=(* y).f3; _temp2195;});} static struct _tuple2* Cyc_Tcutil_substitute_f2(
! struct _tuple16* w){ void* _temp2199; struct _tuple15* _temp2201; struct
! _tuple16 _temp2197=* w; _LL2202: _temp2201= _temp2197.f1; goto _LL2200; _LL2200:
! _temp2199= _temp2197.f2; goto _LL2198; _LL2198: { struct Cyc_Absyn_Tqual
! _temp2205; struct Cyc_Core_Opt* _temp2207; struct _tuple15 _temp2203=* _temp2201;
! _LL2208: _temp2207= _temp2203.f1; goto _LL2206; _LL2206: _temp2205= _temp2203.f2;
! goto _LL2204; _LL2204: return({ struct _tuple2* _temp2209=( struct _tuple2*)
! _cycalloc( sizeof( struct _tuple2)); _temp2209->f1= _temp2207; _temp2209->f2=
! _temp2205; _temp2209->f3= _temp2199; _temp2209;});}} static void* Cyc_Tcutil_field_type(
  struct Cyc_Absyn_Structfield* f){ return( void*) f->type;} static struct Cyc_Absyn_Structfield*
  Cyc_Tcutil_zip_field_type( struct Cyc_Absyn_Structfield* f, void* t){ return({
! struct Cyc_Absyn_Structfield* _temp2210=( struct Cyc_Absyn_Structfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structfield)); _temp2210->name= f->name;
! _temp2210->tq= f->tq; _temp2210->type=( void*) t; _temp2210->width= f->width;
! _temp2210->attributes= f->attributes; _temp2210;});} static struct Cyc_List_List*
  Cyc_Tcutil_substs( struct _RegionHandle* rgn, struct Cyc_List_List* inst, struct
  Cyc_List_List* ts); void* Cyc_Tcutil_rsubstitute( struct _RegionHandle* rgn,
! struct Cyc_List_List* inst, void* t){ void* _temp2211= Cyc_Tcutil_compress( t);
! struct Cyc_Absyn_Tvar* _temp2259; struct Cyc_Absyn_Structdecl** _temp2261;
! struct Cyc_List_List* _temp2263; struct _tuple1* _temp2265; struct Cyc_Absyn_Uniondecl**
! _temp2267; struct Cyc_List_List* _temp2269; struct _tuple1* _temp2271; struct
! Cyc_Absyn_TunionInfo _temp2273; void* _temp2275; struct Cyc_List_List* _temp2277;
! void* _temp2279; struct Cyc_Absyn_TunionFieldInfo _temp2281; struct Cyc_List_List*
! _temp2283; void* _temp2285; struct Cyc_Core_Opt* _temp2287; struct Cyc_List_List*
! _temp2289; struct _tuple1* _temp2291; struct Cyc_Absyn_Exp* _temp2293; struct
! Cyc_Absyn_Tqual _temp2295; void* _temp2297; struct Cyc_Absyn_PtrInfo _temp2299;
! struct Cyc_Absyn_Conref* _temp2301; struct Cyc_Absyn_Tqual _temp2303; struct Cyc_Absyn_Conref*
! _temp2305; void* _temp2307; void* _temp2309; struct Cyc_Absyn_FnInfo _temp2311;
! struct Cyc_List_List* _temp2313; struct Cyc_List_List* _temp2315; struct Cyc_Absyn_VarargInfo*
! _temp2317; int _temp2319; struct Cyc_List_List* _temp2321; void* _temp2323;
! struct Cyc_Core_Opt* _temp2325; struct Cyc_List_List* _temp2327; struct Cyc_List_List*
! _temp2329; struct Cyc_List_List* _temp2331; struct Cyc_List_List* _temp2333;
! struct Cyc_Core_Opt* _temp2335; void* _temp2337; void* _temp2339; void*
! _temp2341; struct Cyc_List_List* _temp2343; _LL2213: if(( unsigned int)
! _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_VarType: 0){ _LL2260:
! _temp2259=(( struct Cyc_Absyn_VarType_struct*) _temp2211)->f1; goto _LL2214;}
! else{ goto _LL2215;} _LL2215: if(( unsigned int) _temp2211 >  4u?*(( int*)
! _temp2211) ==  Cyc_Absyn_StructType: 0){ _LL2266: _temp2265=(( struct Cyc_Absyn_StructType_struct*)
! _temp2211)->f1; goto _LL2264; _LL2264: _temp2263=(( struct Cyc_Absyn_StructType_struct*)
! _temp2211)->f2; goto _LL2262; _LL2262: _temp2261=(( struct Cyc_Absyn_StructType_struct*)
! _temp2211)->f3; goto _LL2216;} else{ goto _LL2217;} _LL2217: if(( unsigned int)
! _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_UnionType: 0){ _LL2272:
! _temp2271=(( struct Cyc_Absyn_UnionType_struct*) _temp2211)->f1; goto _LL2270;
! _LL2270: _temp2269=(( struct Cyc_Absyn_UnionType_struct*) _temp2211)->f2; goto
! _LL2268; _LL2268: _temp2267=(( struct Cyc_Absyn_UnionType_struct*) _temp2211)->f3;
! goto _LL2218;} else{ goto _LL2219;} _LL2219: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_TunionType: 0){ _LL2274: _temp2273=(( struct Cyc_Absyn_TunionType_struct*)
! _temp2211)->f1; _LL2280: _temp2279=( void*) _temp2273.tunion_info; goto _LL2278;
! _LL2278: _temp2277= _temp2273.targs; goto _LL2276; _LL2276: _temp2275=( void*)
! _temp2273.rgn; goto _LL2220;} else{ goto _LL2221;} _LL2221: if(( unsigned int)
! _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_TunionFieldType: 0){ _LL2282:
! _temp2281=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp2211)->f1; _LL2286:
! _temp2285=( void*) _temp2281.field_info; goto _LL2284; _LL2284: _temp2283=
! _temp2281.targs; goto _LL2222;} else{ goto _LL2223;} _LL2223: if(( unsigned int)
! _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_TypedefType: 0){ _LL2292:
! _temp2291=(( struct Cyc_Absyn_TypedefType_struct*) _temp2211)->f1; goto _LL2290;
! _LL2290: _temp2289=(( struct Cyc_Absyn_TypedefType_struct*) _temp2211)->f2; goto
! _LL2288; _LL2288: _temp2287=(( struct Cyc_Absyn_TypedefType_struct*) _temp2211)->f3;
! goto _LL2224;} else{ goto _LL2225;} _LL2225: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_ArrayType: 0){ _LL2298: _temp2297=( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp2211)->f1; goto _LL2296; _LL2296:
! _temp2295=(( struct Cyc_Absyn_ArrayType_struct*) _temp2211)->f2; goto _LL2294;
! _LL2294: _temp2293=(( struct Cyc_Absyn_ArrayType_struct*) _temp2211)->f3; goto
! _LL2226;} else{ goto _LL2227;} _LL2227: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_PointerType: 0){ _LL2300: _temp2299=(( struct Cyc_Absyn_PointerType_struct*)
! _temp2211)->f1; _LL2310: _temp2309=( void*) _temp2299.elt_typ; goto _LL2308;
! _LL2308: _temp2307=( void*) _temp2299.rgn_typ; goto _LL2306; _LL2306: _temp2305=
! _temp2299.nullable; goto _LL2304; _LL2304: _temp2303= _temp2299.tq; goto _LL2302;
! _LL2302: _temp2301= _temp2299.bounds; goto _LL2228;} else{ goto _LL2229;}
! _LL2229: if(( unsigned int) _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_FnType:
! 0){ _LL2312: _temp2311=(( struct Cyc_Absyn_FnType_struct*) _temp2211)->f1;
! _LL2328: _temp2327= _temp2311.tvars; goto _LL2326; _LL2326: _temp2325= _temp2311.effect;
! goto _LL2324; _LL2324: _temp2323=( void*) _temp2311.ret_typ; goto _LL2322;
! _LL2322: _temp2321= _temp2311.args; goto _LL2320; _LL2320: _temp2319= _temp2311.c_varargs;
! goto _LL2318; _LL2318: _temp2317= _temp2311.cyc_varargs; goto _LL2316; _LL2316:
! _temp2315= _temp2311.rgn_po; goto _LL2314; _LL2314: _temp2313= _temp2311.attributes;
! goto _LL2230;} else{ goto _LL2231;} _LL2231: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_TupleType: 0){ _LL2330: _temp2329=(( struct Cyc_Absyn_TupleType_struct*)
! _temp2211)->f1; goto _LL2232;} else{ goto _LL2233;} _LL2233: if(( unsigned int)
! _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_AnonStructType: 0){ _LL2332:
! _temp2331=(( struct Cyc_Absyn_AnonStructType_struct*) _temp2211)->f1; goto
! _LL2234;} else{ goto _LL2235;} _LL2235: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_AnonUnionType: 0){ _LL2334: _temp2333=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp2211)->f1; goto _LL2236;} else{ goto
! _LL2237;} _LL2237: if(( unsigned int) _temp2211 >  4u?*(( int*) _temp2211) == 
! Cyc_Absyn_Evar: 0){ _LL2336: _temp2335=(( struct Cyc_Absyn_Evar_struct*)
! _temp2211)->f2; goto _LL2238;} else{ goto _LL2239;} _LL2239: if(( unsigned int)
! _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_RgnHandleType: 0){ _LL2338:
! _temp2337=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*) _temp2211)->f1;
! goto _LL2240;} else{ goto _LL2241;} _LL2241: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_EnumType: 0){ goto _LL2242;} else{ goto _LL2243;}
! _LL2243: if( _temp2211 == ( void*) Cyc_Absyn_VoidType){ goto _LL2244;} else{
! goto _LL2245;} _LL2245: if(( unsigned int) _temp2211 >  4u?*(( int*) _temp2211)
! ==  Cyc_Absyn_IntType: 0){ goto _LL2246;} else{ goto _LL2247;} _LL2247: if(
! _temp2211 == ( void*) Cyc_Absyn_FloatType){ goto _LL2248;} else{ goto _LL2249;}
! _LL2249: if( _temp2211 == ( void*) Cyc_Absyn_DoubleType){ goto _LL2250;} else{
! goto _LL2251;} _LL2251: if( _temp2211 == ( void*) Cyc_Absyn_HeapRgn){ goto
! _LL2252;} else{ goto _LL2253;} _LL2253: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_RgnsEff: 0){ _LL2340: _temp2339=( void*)(( struct
! Cyc_Absyn_RgnsEff_struct*) _temp2211)->f1; goto _LL2254;} else{ goto _LL2255;}
! _LL2255: if(( unsigned int) _temp2211 >  4u?*(( int*) _temp2211) ==  Cyc_Absyn_AccessEff:
! 0){ _LL2342: _temp2341=( void*)(( struct Cyc_Absyn_AccessEff_struct*) _temp2211)->f1;
! goto _LL2256;} else{ goto _LL2257;} _LL2257: if(( unsigned int) _temp2211 >  4u?*((
! int*) _temp2211) ==  Cyc_Absyn_JoinEff: 0){ _LL2344: _temp2343=(( struct Cyc_Absyn_JoinEff_struct*)
! _temp2211)->f1; goto _LL2258;} else{ goto _LL2212;} _LL2214: { struct
! _handler_cons _temp2345; _push_handler(& _temp2345);{ int _temp2347= 0; if(
! setjmp( _temp2345.handler)){ _temp2347= 1;} if( ! _temp2347){{ void* _temp2348=((
  void*(*)( int(* cmp)( struct Cyc_Absyn_Tvar*, struct Cyc_Absyn_Tvar*), struct
  Cyc_List_List* l, struct Cyc_Absyn_Tvar* k)) Cyc_List_assoc_cmp)( Cyc_Absyn_tvar_cmp,
! inst, _temp2259); _npop_handler( 0u); return _temp2348;}; _pop_handler();} else{
! void* _temp2346=( void*) _exn_thrown; void* _temp2350= _temp2346; _LL2352: if(
! _temp2350 ==  Cyc_Core_Not_found){ goto _LL2353;} else{ goto _LL2354;} _LL2354:
! goto _LL2355; _LL2353: return t; _LL2355:( void) _throw( _temp2350); _LL2351:;}}}
! _LL2216: { struct Cyc_List_List* _temp2356= Cyc_Tcutil_substs( rgn, inst,
! _temp2263); return _temp2356 ==  _temp2263? t:( void*)({ struct Cyc_Absyn_StructType_struct*
! _temp2357=( struct Cyc_Absyn_StructType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructType_struct));
! _temp2357[ 0]=({ struct Cyc_Absyn_StructType_struct _temp2358; _temp2358.tag=
! Cyc_Absyn_StructType; _temp2358.f1= _temp2265; _temp2358.f2= _temp2356;
! _temp2358.f3= _temp2261; _temp2358;}); _temp2357;});} _LL2218: { struct Cyc_List_List*
! _temp2359= Cyc_Tcutil_substs( rgn, inst, _temp2269); return _temp2359 == 
! _temp2269? t:( void*)({ struct Cyc_Absyn_UnionType_struct* _temp2360=( struct
  Cyc_Absyn_UnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_UnionType_struct));
! _temp2360[ 0]=({ struct Cyc_Absyn_UnionType_struct _temp2361; _temp2361.tag= Cyc_Absyn_UnionType;
! _temp2361.f1= _temp2271; _temp2361.f2= _temp2359; _temp2361.f3= _temp2267;
! _temp2361;}); _temp2360;});} _LL2220: { struct Cyc_List_List* _temp2362= Cyc_Tcutil_substs(
! rgn, inst, _temp2277); void* _temp2363= Cyc_Tcutil_rsubstitute( rgn, inst,
! _temp2275); return( _temp2362 ==  _temp2277? _temp2363 ==  _temp2275: 0)? t:(
! void*)({ struct Cyc_Absyn_TunionType_struct* _temp2364=( struct Cyc_Absyn_TunionType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_TunionType_struct)); _temp2364[ 0]=({ struct
! Cyc_Absyn_TunionType_struct _temp2365; _temp2365.tag= Cyc_Absyn_TunionType;
! _temp2365.f1=({ struct Cyc_Absyn_TunionInfo _temp2366; _temp2366.tunion_info=(
! void*) _temp2279; _temp2366.targs= _temp2362; _temp2366.rgn=( void*) _temp2363;
! _temp2366;}); _temp2365;}); _temp2364;});} _LL2222: { struct Cyc_List_List*
! _temp2367= Cyc_Tcutil_substs( rgn, inst, _temp2283); return _temp2367 == 
! _temp2283? t:( void*)({ struct Cyc_Absyn_TunionFieldType_struct* _temp2368=(
  struct Cyc_Absyn_TunionFieldType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TunionFieldType_struct));
! _temp2368[ 0]=({ struct Cyc_Absyn_TunionFieldType_struct _temp2369; _temp2369.tag=
! Cyc_Absyn_TunionFieldType; _temp2369.f1=({ struct Cyc_Absyn_TunionFieldInfo
! _temp2370; _temp2370.field_info=( void*) _temp2285; _temp2370.targs= _temp2367;
! _temp2370;}); _temp2369;}); _temp2368;});} _LL2224: { struct Cyc_List_List*
! _temp2371= Cyc_Tcutil_substs( rgn, inst, _temp2289); return _temp2371 == 
! _temp2289? t:( void*)({ struct Cyc_Absyn_TypedefType_struct* _temp2372=( struct
  Cyc_Absyn_TypedefType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TypedefType_struct));
! _temp2372[ 0]=({ struct Cyc_Absyn_TypedefType_struct _temp2373; _temp2373.tag=
! Cyc_Absyn_TypedefType; _temp2373.f1= _temp2291; _temp2373.f2= _temp2371;
! _temp2373.f3= _temp2287; _temp2373;}); _temp2372;});} _LL2226: { void* _temp2374=
! Cyc_Tcutil_rsubstitute( rgn, inst, _temp2297); return _temp2374 ==  _temp2297? t:(
! void*)({ struct Cyc_Absyn_ArrayType_struct* _temp2375=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp2375[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp2376; _temp2376.tag= Cyc_Absyn_ArrayType;
! _temp2376.f1=( void*) _temp2374; _temp2376.f2= _temp2295; _temp2376.f3=
! _temp2293; _temp2376;}); _temp2375;});} _LL2228: { void* _temp2377= Cyc_Tcutil_rsubstitute(
! rgn, inst, _temp2309); void* _temp2378= Cyc_Tcutil_rsubstitute( rgn, inst,
! _temp2307); if( _temp2377 ==  _temp2309? _temp2378 ==  _temp2307: 0){ return t;}
! return( void*)({ struct Cyc_Absyn_PointerType_struct* _temp2379=( struct Cyc_Absyn_PointerType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_PointerType_struct)); _temp2379[ 0]=({
! struct Cyc_Absyn_PointerType_struct _temp2380; _temp2380.tag= Cyc_Absyn_PointerType;
! _temp2380.f1=({ struct Cyc_Absyn_PtrInfo _temp2381; _temp2381.elt_typ=( void*)
! _temp2377; _temp2381.rgn_typ=( void*) _temp2378; _temp2381.nullable= _temp2305;
! _temp2381.tq= _temp2303; _temp2381.bounds= _temp2301; _temp2381;}); _temp2380;});
! _temp2379;});} _LL2230:{ struct Cyc_List_List* _temp2382= _temp2327; for( 0;
! _temp2382 !=  0; _temp2382=(( struct Cyc_List_List*) _check_null( _temp2382))->tl){
! inst=({ struct Cyc_List_List* _temp2383=( struct Cyc_List_List*) _region_malloc(
! rgn, sizeof( struct Cyc_List_List)); _temp2383->hd=( void*)({ struct _tuple5*
! _temp2384=( struct _tuple5*) _region_malloc( rgn, sizeof( struct _tuple5));
! _temp2384->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! _temp2382))->hd; _temp2384->f2=( void*)({ struct Cyc_Absyn_VarType_struct*
! _temp2385=( struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2385[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2386; _temp2386.tag= Cyc_Absyn_VarType;
! _temp2386.f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! _temp2382))->hd; _temp2386;}); _temp2385;}); _temp2384;}); _temp2383->tl= inst;
! _temp2383;});}}{ struct Cyc_List_List* _temp2389; struct Cyc_List_List*
! _temp2391; struct _tuple0 _temp2387=(( struct _tuple0(*)( struct _RegionHandle*
  r1, struct _RegionHandle* r2, struct Cyc_List_List* x)) Cyc_List_rsplit)( rgn,
  rgn,(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct _tuple16*(* f)(
  struct _RegionHandle*, struct _tuple2*), struct _RegionHandle* env, struct Cyc_List_List*
! x)) Cyc_List_rmap_c)( rgn, Cyc_Tcutil_substitute_f1, rgn, _temp2321)); _LL2392:
! _temp2391= _temp2387.f1; goto _LL2390; _LL2390: _temp2389= _temp2387.f2; goto
! _LL2388; _LL2388: { struct Cyc_List_List* _temp2393= Cyc_Tcutil_substs( rgn,
! inst, _temp2389); struct Cyc_List_List* _temp2394=(( struct Cyc_List_List*(*)(
  struct _tuple2*(* f)( struct _tuple16*), struct Cyc_List_List* x)) Cyc_List_map)(
  Cyc_Tcutil_substitute_f2,(( struct Cyc_List_List*(*)( struct _RegionHandle* r1,
  struct _RegionHandle* r2, struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_rzip)(
! rgn, rgn, _temp2391, _temp2393)); struct Cyc_Core_Opt* eff2; if( _temp2325 ==  0){
! eff2= 0;} else{ void* _temp2395= Cyc_Tcutil_rsubstitute( rgn, inst,( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp2325))->v); if( _temp2395 == ( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp2325))->v){ eff2= _temp2325;} else{ eff2=({
! struct Cyc_Core_Opt* _temp2396=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2396->v=( void*) _temp2395; _temp2396;});}}{ struct Cyc_Absyn_VarargInfo*
! cyc_varargs2; if( _temp2317 ==  0){ cyc_varargs2= 0;} else{ int _temp2399; void*
! _temp2401; struct Cyc_Absyn_Tqual _temp2403; struct Cyc_Core_Opt* _temp2405;
! struct Cyc_Absyn_VarargInfo _temp2397=*(( struct Cyc_Absyn_VarargInfo*)
! _check_null( _temp2317)); _LL2406: _temp2405= _temp2397.name; goto _LL2404;
! _LL2404: _temp2403= _temp2397.tq; goto _LL2402; _LL2402: _temp2401=( void*)
! _temp2397.type; goto _LL2400; _LL2400: _temp2399= _temp2397.inject; goto _LL2398;
! _LL2398: { void* _temp2407= Cyc_Tcutil_rsubstitute( rgn, inst, _temp2401); if(
! _temp2407 ==  _temp2401){ cyc_varargs2= _temp2317;} else{ cyc_varargs2=({ struct
! Cyc_Absyn_VarargInfo* _temp2408=( struct Cyc_Absyn_VarargInfo*) _cycalloc(
! sizeof( struct Cyc_Absyn_VarargInfo)); _temp2408->name= _temp2405; _temp2408->tq=
! _temp2403; _temp2408->type=( void*) _temp2407; _temp2408->inject= _temp2399;
! _temp2408;});}}}{ struct Cyc_List_List* rgn_po2; struct Cyc_List_List* _temp2411;
! struct Cyc_List_List* _temp2413; struct _tuple0 _temp2409= Cyc_List_rsplit( rgn,
! rgn, _temp2315); _LL2414: _temp2413= _temp2409.f1; goto _LL2412; _LL2412:
! _temp2411= _temp2409.f2; goto _LL2410; _LL2410: { struct Cyc_List_List*
! _temp2415= Cyc_Tcutil_substs( rgn, inst, _temp2413); struct Cyc_List_List*
! _temp2416= Cyc_Tcutil_substs( rgn, inst, _temp2411); if( _temp2415 ==  _temp2413?
! _temp2416 ==  _temp2411: 0){ rgn_po2= _temp2315;} else{ rgn_po2= Cyc_List_zip(
! _temp2415, _temp2416);} return( void*)({ struct Cyc_Absyn_FnType_struct*
! _temp2417=( struct Cyc_Absyn_FnType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct));
! _temp2417[ 0]=({ struct Cyc_Absyn_FnType_struct _temp2418; _temp2418.tag= Cyc_Absyn_FnType;
! _temp2418.f1=({ struct Cyc_Absyn_FnInfo _temp2419; _temp2419.tvars= _temp2327;
! _temp2419.effect= eff2; _temp2419.ret_typ=( void*) Cyc_Tcutil_rsubstitute( rgn,
! inst, _temp2323); _temp2419.args= _temp2394; _temp2419.c_varargs= _temp2319;
! _temp2419.cyc_varargs= cyc_varargs2; _temp2419.rgn_po= rgn_po2; _temp2419.attributes=
! _temp2313; _temp2419;}); _temp2418;}); _temp2417;});}}}}} _LL2232: { struct Cyc_List_List*
! _temp2420=(( struct Cyc_List_List*(*)( struct _RegionHandle*, void*(* f)( struct
  _tuple4*), struct Cyc_List_List* x)) Cyc_List_rmap)( rgn, Cyc_Tcutil_snd_tqt,
! _temp2329); struct Cyc_List_List* _temp2421= Cyc_Tcutil_substs( rgn, inst,
! _temp2420); if( _temp2421 ==  _temp2420){ return t;}{ struct Cyc_List_List*
! _temp2422=(( struct Cyc_List_List*(*)( struct _tuple4*(* f)( struct _tuple4*,
  void*), struct Cyc_List_List* x, struct Cyc_List_List* y)) Cyc_List_map2)( Cyc_Tcutil_map2_tq,
! _temp2329, _temp2421); return( void*)({ struct Cyc_Absyn_TupleType_struct*
! _temp2423=( struct Cyc_Absyn_TupleType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TupleType_struct));
! _temp2423[ 0]=({ struct Cyc_Absyn_TupleType_struct _temp2424; _temp2424.tag= Cyc_Absyn_TupleType;
! _temp2424.f1= _temp2422; _temp2424;}); _temp2423;});}} _LL2234: { struct Cyc_List_List*
! _temp2425=(( struct Cyc_List_List*(*)( struct _RegionHandle*, void*(* f)( struct
  Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_rmap)( rgn, Cyc_Tcutil_field_type,
! _temp2331); struct Cyc_List_List* _temp2426= Cyc_Tcutil_substs( rgn, inst,
! _temp2425); if( _temp2426 ==  _temp2425){ return t;}{ struct Cyc_List_List*
! _temp2427=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(* f)(
  struct Cyc_Absyn_Structfield*, void*), struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_map2)( Cyc_Tcutil_zip_field_type, _temp2331, _temp2426); return(
! void*)({ struct Cyc_Absyn_AnonStructType_struct* _temp2428=( struct Cyc_Absyn_AnonStructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_AnonStructType_struct)); _temp2428[ 0]=({
! struct Cyc_Absyn_AnonStructType_struct _temp2429; _temp2429.tag= Cyc_Absyn_AnonStructType;
! _temp2429.f1= _temp2427; _temp2429;}); _temp2428;});}} _LL2236: { struct Cyc_List_List*
! _temp2430=(( struct Cyc_List_List*(*)( struct _RegionHandle*, void*(* f)( struct
  Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_rmap)( rgn, Cyc_Tcutil_field_type,
! _temp2333); struct Cyc_List_List* _temp2431= Cyc_Tcutil_substs( rgn, inst,
! _temp2430); if( _temp2431 ==  _temp2430){ return t;}{ struct Cyc_List_List*
! _temp2432=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(* f)(
  struct Cyc_Absyn_Structfield*, void*), struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_map2)( Cyc_Tcutil_zip_field_type, _temp2333, _temp2431); return(
! void*)({ struct Cyc_Absyn_AnonStructType_struct* _temp2433=( struct Cyc_Absyn_AnonStructType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_AnonStructType_struct)); _temp2433[ 0]=({
! struct Cyc_Absyn_AnonStructType_struct _temp2434; _temp2434.tag= Cyc_Absyn_AnonStructType;
! _temp2434.f1= _temp2432; _temp2434;}); _temp2433;});}} _LL2238: if( _temp2335 != 
  0){ return Cyc_Tcutil_rsubstitute( rgn, inst,( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp2335))->v);} else{ return t;} _LL2240: { void* _temp2435= Cyc_Tcutil_rsubstitute(
! rgn, inst, _temp2337); return _temp2435 ==  _temp2337? t:( void*)({ struct Cyc_Absyn_RgnHandleType_struct*
! _temp2436=( struct Cyc_Absyn_RgnHandleType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_RgnHandleType_struct)); _temp2436[ 0]=({ struct Cyc_Absyn_RgnHandleType_struct
! _temp2437; _temp2437.tag= Cyc_Absyn_RgnHandleType; _temp2437.f1=( void*)
! _temp2435; _temp2437;}); _temp2436;});} _LL2242: return t; _LL2244: return t;
! _LL2246: return t; _LL2248: return t; _LL2250: return t; _LL2252: return t;
! _LL2254: { void* _temp2438= Cyc_Tcutil_rsubstitute( rgn, inst, _temp2339);
! return _temp2438 ==  _temp2339? t:( void*)({ struct Cyc_Absyn_RgnsEff_struct*
! _temp2439=( struct Cyc_Absyn_RgnsEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct));
! _temp2439[ 0]=({ struct Cyc_Absyn_RgnsEff_struct _temp2440; _temp2440.tag= Cyc_Absyn_RgnsEff;
! _temp2440.f1=( void*) _temp2438; _temp2440;}); _temp2439;});} _LL2256: { void*
! _temp2441= Cyc_Tcutil_rsubstitute( rgn, inst, _temp2341); return _temp2441 == 
! _temp2341? t:( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp2442=( struct
  Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp2442[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp2443; _temp2443.tag= Cyc_Absyn_AccessEff;
! _temp2443.f1=( void*) _temp2441; _temp2443;}); _temp2442;});} _LL2258: { struct
! Cyc_List_List* _temp2444= Cyc_Tcutil_substs( rgn, inst, _temp2343); return
! _temp2444 ==  _temp2343? t:( void*)({ struct Cyc_Absyn_JoinEff_struct* _temp2445=(
  struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp2445[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp2446; _temp2446.tag= Cyc_Absyn_JoinEff;
! _temp2446.f1= _temp2444; _temp2446;}); _temp2445;});} _LL2212:;} static struct
  Cyc_List_List* Cyc_Tcutil_substs( struct _RegionHandle* rgn, struct Cyc_List_List*
! inst, struct Cyc_List_List* ts){ if( ts ==  0){ return 0;}{ void* _temp2447=(
  void*)(( struct Cyc_List_List*) _check_null( ts))->hd; struct Cyc_List_List*
! _temp2448=(( struct Cyc_List_List*) _check_null( ts))->tl; void* _temp2449= Cyc_Tcutil_rsubstitute(
! rgn, inst, _temp2447); struct Cyc_List_List* _temp2450= Cyc_Tcutil_substs( rgn,
! inst, _temp2448); if( _temp2447 ==  _temp2449? _temp2448 ==  _temp2450: 0){
! return ts;} return( struct Cyc_List_List*)({ struct Cyc_List_List* _temp2451=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2451->hd=(
! void*) _temp2449; _temp2451->tl= _temp2450; _temp2451;});}} extern void* Cyc_Tcutil_substitute(
  struct Cyc_List_List* inst, void* t){ return Cyc_Tcutil_rsubstitute( Cyc_Core_heap_region,
  inst, t);} struct Cyc_Absyn_Exp* Cyc_Tcutil_default_initializer( struct Cyc_Tcenv_Tenv*
  te, void* t, struct Cyc_Position_Segment* loc){ struct Cyc_Absyn_Exp* e= Cyc_Absyn_new_exp((
! void*)({ struct Cyc_Absyn_Const_e_struct* _temp2496=( struct Cyc_Absyn_Const_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct)); _temp2496[ 0]=({ struct
! Cyc_Absyn_Const_e_struct _temp2497; _temp2497.tag= Cyc_Absyn_Const_e; _temp2497.f1=(
! void*)(( void*) Cyc_Absyn_Null_c); _temp2497;}); _temp2496;}), loc);{ void*
! _temp2452= Cyc_Tcutil_compress( t); void* _temp2466; void* _temp2468; void*
! _temp2470; void* _temp2472; _LL2454: if(( unsigned int) _temp2452 >  4u?*(( int*)
! _temp2452) ==  Cyc_Absyn_PointerType: 0){ goto _LL2455;} else{ goto _LL2456;}
! _LL2456: if(( unsigned int) _temp2452 >  4u?*(( int*) _temp2452) ==  Cyc_Absyn_IntType:
! 0){ _LL2469: _temp2468=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2452)->f1;
! goto _LL2467; _LL2467: _temp2466=( void*)(( struct Cyc_Absyn_IntType_struct*)
! _temp2452)->f2; if( _temp2466 == ( void*) Cyc_Absyn_B1){ goto _LL2457;} else{
! goto _LL2458;}} else{ goto _LL2458;} _LL2458: if(( unsigned int) _temp2452 >  4u?*((
! int*) _temp2452) ==  Cyc_Absyn_IntType: 0){ _LL2473: _temp2472=( void*)(( struct
! Cyc_Absyn_IntType_struct*) _temp2452)->f1; goto _LL2471; _LL2471: _temp2470=(
! void*)(( struct Cyc_Absyn_IntType_struct*) _temp2452)->f2; goto _LL2459;} else{
! goto _LL2460;} _LL2460: if( _temp2452 == ( void*) Cyc_Absyn_FloatType){ goto
! _LL2461;} else{ goto _LL2462;} _LL2462: if( _temp2452 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL2463;} else{ goto _LL2464;} _LL2464: goto _LL2465; _LL2455: goto _LL2453;
! _LL2457:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Const_e_struct*
! _temp2474=( struct Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp2474[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp2475; _temp2475.tag= Cyc_Absyn_Const_e;
! _temp2475.f1=( void*)(( void*)({ struct Cyc_Absyn_Char_c_struct* _temp2476=(
  struct Cyc_Absyn_Char_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Char_c_struct));
! _temp2476[ 0]=({ struct Cyc_Absyn_Char_c_struct _temp2477; _temp2477.tag= Cyc_Absyn_Char_c;
! _temp2477.f1=( void*)(( void*) Cyc_Absyn_Signed); _temp2477.f2='\000'; _temp2477;});
! _temp2476;})); _temp2475;}); _temp2474;}))); goto _LL2453; _LL2459:( void*)( e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Const_e_struct* _temp2478=( struct Cyc_Absyn_Const_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct)); _temp2478[ 0]=({ struct
! Cyc_Absyn_Const_e_struct _temp2479; _temp2479.tag= Cyc_Absyn_Const_e; _temp2479.f1=(
! void*)(( void*)({ struct Cyc_Absyn_Int_c_struct* _temp2480=( struct Cyc_Absyn_Int_c_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Int_c_struct)); _temp2480[ 0]=({ struct Cyc_Absyn_Int_c_struct
! _temp2481; _temp2481.tag= Cyc_Absyn_Int_c; _temp2481.f1=( void*) _temp2472;
! _temp2481.f2= 0; _temp2481;}); _temp2480;})); _temp2479;}); _temp2478;}))); if(
! _temp2470 != ( void*) Cyc_Absyn_B4){ e= Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Cast_e_struct*
! _temp2482=( struct Cyc_Absyn_Cast_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Cast_e_struct));
! _temp2482[ 0]=({ struct Cyc_Absyn_Cast_e_struct _temp2483; _temp2483.tag= Cyc_Absyn_Cast_e;
! _temp2483.f1=( void*) t; _temp2483.f2= e; _temp2483;}); _temp2482;}), loc);}
! goto _LL2453; _LL2461:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Const_e_struct*
! _temp2484=( struct Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp2484[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp2485; _temp2485.tag= Cyc_Absyn_Const_e;
! _temp2485.f1=( void*)(( void*)({ struct Cyc_Absyn_Float_c_struct* _temp2486=(
  struct Cyc_Absyn_Float_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Float_c_struct));
! _temp2486[ 0]=({ struct Cyc_Absyn_Float_c_struct _temp2487; _temp2487.tag= Cyc_Absyn_Float_c;
! _temp2487.f1= _tag_arr("0.0", sizeof( unsigned char), 4u); _temp2487;});
! _temp2486;})); _temp2485;}); _temp2484;}))); goto _LL2453; _LL2463:( void*)( e->r=(
! void*)(( void*)({ struct Cyc_Absyn_Cast_e_struct* _temp2488=( struct Cyc_Absyn_Cast_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Cast_e_struct)); _temp2488[ 0]=({ struct Cyc_Absyn_Cast_e_struct
! _temp2489; _temp2489.tag= Cyc_Absyn_Cast_e; _temp2489.f1=( void*) t; _temp2489.f2=
! Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Const_e_struct* _temp2490=( struct
  Cyc_Absyn_Const_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Const_e_struct));
! _temp2490[ 0]=({ struct Cyc_Absyn_Const_e_struct _temp2491; _temp2491.tag= Cyc_Absyn_Const_e;
! _temp2491.f1=( void*)(( void*)({ struct Cyc_Absyn_Float_c_struct* _temp2492=(
  struct Cyc_Absyn_Float_c_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Float_c_struct));
! _temp2492[ 0]=({ struct Cyc_Absyn_Float_c_struct _temp2493; _temp2493.tag= Cyc_Absyn_Float_c;
! _temp2493.f1= _tag_arr("0.0", sizeof( unsigned char), 4u); _temp2493;});
! _temp2492;})); _temp2491;}); _temp2490;}), loc); _temp2489;}); _temp2488;})));
! goto _LL2453; _LL2465:({ struct Cyc_Std_String_pa_struct _temp2495; _temp2495.tag=
! Cyc_Std_String_pa; _temp2495.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! void* _temp2494[ 1u]={& _temp2495}; Cyc_Tcutil_terr( loc, _tag_arr("declaration of type %s requires initializer",
! sizeof( unsigned char), 44u), _tag_arr( _temp2494, sizeof( void*), 1u));}});
! goto _LL2453; _LL2453:;} return e;} struct _tuple5* Cyc_Tcutil_make_inst_var(
  struct Cyc_List_List* s, struct Cyc_Absyn_Tvar* tv){ void* k= Cyc_Absyn_conref_val(
! tv->kind); return({ struct _tuple5* _temp2498=( struct _tuple5*) _cycalloc(
! sizeof( struct _tuple5)); _temp2498->f1= tv; _temp2498->f2= Cyc_Absyn_new_evar(({
! struct Cyc_Core_Opt* _temp2499=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2499->v=( void*) k; _temp2499;}),({ struct Cyc_Core_Opt*
! _temp2500=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2500->v=( void*) s; _temp2500;})); _temp2498;});} struct _tuple5* Cyc_Tcutil_r_make_inst_var(
! struct _tuple6* env, struct Cyc_Absyn_Tvar* tv){ struct _tuple6 _temp2503;
! struct _RegionHandle* _temp2504; struct Cyc_List_List* _temp2506; struct _tuple6*
! _temp2501= env; _temp2503=* _temp2501; _LL2507: _temp2506= _temp2503.f1; goto
! _LL2505; _LL2505: _temp2504= _temp2503.f2; goto _LL2502; _LL2502: { void* k= Cyc_Absyn_conref_val(
! tv->kind); return({ struct _tuple5* _temp2508=( struct _tuple5*) _region_malloc(
! _temp2504, sizeof( struct _tuple5)); _temp2508->f1= tv; _temp2508->f2= Cyc_Absyn_new_evar(({
! struct Cyc_Core_Opt* _temp2509=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp2509->v=( void*) k; _temp2509;}),({ struct Cyc_Core_Opt*
! _temp2510=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2510->v=( void*) _temp2506; _temp2510;})); _temp2508;});}} static struct
  Cyc_List_List* Cyc_Tcutil_add_free_tvar( struct Cyc_Position_Segment* loc,
  struct Cyc_List_List* tvs, struct Cyc_Absyn_Tvar* tv){{ struct Cyc_List_List*
  tvs2= tvs; for( 0; tvs2 !=  0; tvs2=(( struct Cyc_List_List*) _check_null( tvs2))->tl){
***************
*** 3281,4242 ****
  _check_null( tvs2))->hd)->name, tv->name) ==  0){ struct Cyc_Absyn_Conref* k1=((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs2))->hd)->kind;
  struct Cyc_Absyn_Conref* k2= tv->kind; if( ! Cyc_Tcutil_constrain_kinds( k1, k2)){({
! struct Cyc_Std_String_pa_struct _temp2518; _temp2518.tag= Cyc_Std_String_pa;
! _temp2518.f1=( struct _tagged_arr) Cyc_Absynpp_ckind2string( k2);{ struct Cyc_Std_String_pa_struct
! _temp2517; _temp2517.tag= Cyc_Std_String_pa; _temp2517.f1=( struct _tagged_arr)
! Cyc_Absynpp_ckind2string( k1);{ struct Cyc_Std_String_pa_struct _temp2516;
! _temp2516.tag= Cyc_Std_String_pa; _temp2516.f1=( struct _tagged_arr)* tv->name;{
! void* _temp2515[ 3u]={& _temp2516,& _temp2517,& _temp2518}; Cyc_Tcutil_terr( loc,
  _tag_arr("type variable %s is used with inconsistent kinds %s and %s", sizeof(
! unsigned char), 59u), _tag_arr( _temp2515, sizeof( void*), 3u));}}}});} if( tv->identity
  ==  0){ tv->identity=(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
  _check_null( tvs2))->hd)->identity;} else{ if(*(( int*) _check_null( tv->identity))
  != *(( int*) _check_null((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( tvs2))->hd)->identity))){({ void* _temp2519[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("same type variable has different identity!",
! sizeof( unsigned char), 43u), _tag_arr( _temp2519, sizeof( void*), 0u));});}}
  return tvs;}}} tv->identity= Cyc_Tcutil_new_tvar_id(); return({ struct Cyc_List_List*
! _temp2520=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2520->hd=( void*) tv; _temp2520->tl= tvs; _temp2520;});} static struct Cyc_List_List*
  Cyc_Tcutil_fast_add_free_tvar( struct Cyc_List_List* tvs, struct Cyc_Absyn_Tvar*
! tv){ if( tv->identity ==  0){({ void* _temp2521[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("fast_add_free_tvar: bad identity in tv",
! sizeof( unsigned char), 39u), _tag_arr( _temp2521, sizeof( void*), 0u));});}{
  struct Cyc_List_List* tvs2= tvs; for( 0; tvs2 !=  0; tvs2=(( struct Cyc_List_List*)
  _check_null( tvs2))->tl){ if((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( tvs2))->hd)->identity ==  0){({ void* _temp2522[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("fast_add_free_tvar: bad identity in tvs2",
! sizeof( unsigned char), 41u), _tag_arr( _temp2522, sizeof( void*), 0u));});} if(*((
  int*) _check_null((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
  _check_null( tvs2))->hd)->identity)) == *(( int*) _check_null( tv->identity))){
! return tvs;}}} return({ struct Cyc_List_List* _temp2523=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2523->hd=( void*) tv; _temp2523->tl=
! tvs; _temp2523;});} static struct Cyc_List_List* Cyc_Tcutil_add_bound_tvar(
  struct Cyc_List_List* tvs, struct Cyc_Absyn_Tvar* tv){ if( tv->identity ==  0){({
! struct Cyc_Std_String_pa_struct _temp2525; _temp2525.tag= Cyc_Std_String_pa;
! _temp2525.f1=( struct _tagged_arr) Cyc_Tcutil_tvar2string( tv);{ void* _temp2524[
! 1u]={& _temp2525};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("bound tvar id for %s is NULL", sizeof( unsigned char), 29u), _tag_arr(
! _temp2524, sizeof( void*), 1u));}});} return({ struct Cyc_List_List* _temp2526=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2526->hd=(
! void*) tv; _temp2526->tl= tvs; _temp2526;});} static struct Cyc_List_List* Cyc_Tcutil_add_free_evar(
! struct Cyc_List_List* es, void* e){ void* _temp2527= Cyc_Tcutil_compress( e);
! int _temp2533; _LL2529: if(( unsigned int) _temp2527 >  4u?*(( int*) _temp2527)
! ==  Cyc_Absyn_Evar: 0){ _LL2534: _temp2533=(( struct Cyc_Absyn_Evar_struct*)
! _temp2527)->f3; goto _LL2530;} else{ goto _LL2531;} _LL2531: goto _LL2532;
! _LL2530:{ struct Cyc_List_List* es2= es; for( 0; es2 !=  0; es2=(( struct Cyc_List_List*)
! _check_null( es2))->tl){ void* _temp2535= Cyc_Tcutil_compress(( void*)(( struct
! Cyc_List_List*) _check_null( es2))->hd); int _temp2541; _LL2537: if((
! unsigned int) _temp2535 >  4u?*(( int*) _temp2535) ==  Cyc_Absyn_Evar: 0){
! _LL2542: _temp2541=(( struct Cyc_Absyn_Evar_struct*) _temp2535)->f3; goto
! _LL2538;} else{ goto _LL2539;} _LL2539: goto _LL2540; _LL2538: if( _temp2533 == 
! _temp2541){ return es;} goto _LL2536; _LL2540: goto _LL2536; _LL2536:;}} return({
! struct Cyc_List_List* _temp2543=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2543->hd=( void*) e; _temp2543->tl= es; _temp2543;});
! _LL2532: return es; _LL2528:;} static struct Cyc_List_List* Cyc_Tcutil_remove_bound_tvars(
  struct Cyc_List_List* tvs, struct Cyc_List_List* btvs){ struct Cyc_List_List* r=
  0; for( 0; tvs !=  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ int
  present= 0;{ struct Cyc_List_List* b= btvs; for( 0; b !=  0; b=(( struct Cyc_List_List*)
  _check_null( b))->tl){ if(*(( int*) _check_null((( struct Cyc_Absyn_Tvar*)((
  struct Cyc_List_List*) _check_null( tvs))->hd)->identity)) == *(( int*)
  _check_null((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( b))->hd)->identity))){
! present= 1; break;}}} if( ! present){ r=({ struct Cyc_List_List* _temp2544=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2544->hd=(
  void*)(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd);
! _temp2544->tl= r; _temp2544;});}} r=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( r); return r;} void Cyc_Tcutil_check_bitfield( struct Cyc_Position_Segment*
  loc, struct Cyc_Tcenv_Tenv* te, void* field_typ, struct Cyc_Absyn_Exp* width,
  struct _tagged_arr* fn){ if( width !=  0){ unsigned int w= 0; if( ! Cyc_Tcutil_is_const_exp(
  te,( struct Cyc_Absyn_Exp*) _check_null( width))){({ struct Cyc_Std_String_pa_struct
! _temp2546; _temp2546.tag= Cyc_Std_String_pa; _temp2546.f1=( struct _tagged_arr)*
! fn;{ void* _temp2545[ 1u]={& _temp2546}; Cyc_Tcutil_terr( loc, _tag_arr("bitfield %s does not have constant width",
! sizeof( unsigned char), 41u), _tag_arr( _temp2545, sizeof( void*), 1u));}});}
  else{ w= Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*) _check_null(
! width));}{ void* _temp2547= Cyc_Tcutil_compress( field_typ); void* _temp2553;
! _LL2549: if(( unsigned int) _temp2547 >  4u?*(( int*) _temp2547) ==  Cyc_Absyn_IntType:
! 0){ _LL2554: _temp2553=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2547)->f2;
! goto _LL2550;} else{ goto _LL2551;} _LL2551: goto _LL2552; _LL2550:{ void*
! _temp2555= _temp2553; _LL2557: if( _temp2555 == ( void*) Cyc_Absyn_B1){ goto
! _LL2558;} else{ goto _LL2559;} _LL2559: if( _temp2555 == ( void*) Cyc_Absyn_B2){
! goto _LL2560;} else{ goto _LL2561;} _LL2561: if( _temp2555 == ( void*) Cyc_Absyn_B4){
! goto _LL2562;} else{ goto _LL2563;} _LL2563: if( _temp2555 == ( void*) Cyc_Absyn_B8){
! goto _LL2564;} else{ goto _LL2556;} _LL2558: if( w >  8){({ void* _temp2565[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("bitfield larger than type", sizeof(
! unsigned char), 26u), _tag_arr( _temp2565, sizeof( void*), 0u));});} goto
! _LL2556; _LL2560: if( w >  16){({ void* _temp2566[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("bitfield larger than type", sizeof( unsigned char), 26u), _tag_arr(
! _temp2566, sizeof( void*), 0u));});} goto _LL2556; _LL2562: if( w >  32){({ void*
! _temp2567[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("bitfield larger than type",
! sizeof( unsigned char), 26u), _tag_arr( _temp2567, sizeof( void*), 0u));});}
! goto _LL2556; _LL2564: if( w >  64){({ void* _temp2568[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("bitfield larger than type", sizeof( unsigned char), 26u),
! _tag_arr( _temp2568, sizeof( void*), 0u));});} goto _LL2556; _LL2556:;} goto
! _LL2548; _LL2552:({ struct Cyc_Std_String_pa_struct _temp2571; _temp2571.tag=
! Cyc_Std_String_pa; _temp2571.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! field_typ);{ struct Cyc_Std_String_pa_struct _temp2570; _temp2570.tag= Cyc_Std_String_pa;
! _temp2570.f1=( struct _tagged_arr)* fn;{ void* _temp2569[ 2u]={& _temp2570,&
! _temp2571}; Cyc_Tcutil_terr( loc, _tag_arr("bitfield %s must have integral type but has type %s",
! sizeof( unsigned char), 52u), _tag_arr( _temp2569, sizeof( void*), 2u));}}});
! goto _LL2548; _LL2548:;}}} static void Cyc_Tcutil_check_field_atts( struct Cyc_Position_Segment*
  loc, struct _tagged_arr* fn, struct Cyc_List_List* atts){ for( 0; atts !=  0;
! atts=(( struct Cyc_List_List*) _check_null( atts))->tl){ void* _temp2572=( void*)((
! struct Cyc_List_List*) _check_null( atts))->hd; _LL2574: if( _temp2572 == ( void*)
! Cyc_Absyn_Packed_att){ goto _LL2575;} else{ goto _LL2576;} _LL2576: if((
! unsigned int) _temp2572 >  16u?*(( int*) _temp2572) ==  Cyc_Absyn_Aligned_att: 0){
! goto _LL2577;} else{ goto _LL2578;} _LL2578: goto _LL2579; _LL2575: continue;
! _LL2577: continue; _LL2579:({ struct Cyc_Std_String_pa_struct _temp2582;
! _temp2582.tag= Cyc_Std_String_pa; _temp2582.f1=( struct _tagged_arr)* fn;{
! struct Cyc_Std_String_pa_struct _temp2581; _temp2581.tag= Cyc_Std_String_pa;
! _temp2581.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string(( void*)(( struct
! Cyc_List_List*) _check_null( atts))->hd);{ void* _temp2580[ 2u]={& _temp2581,&
! _temp2582}; Cyc_Tcutil_terr( loc, _tag_arr("bad attribute %s on member %s",
! sizeof( unsigned char), 30u), _tag_arr( _temp2580, sizeof( void*), 2u));}}});
! goto _LL2573; _LL2573:;}} struct Cyc_Tcutil_CVTEnv{ struct Cyc_List_List*
  kind_env; struct Cyc_List_List* free_vars; struct Cyc_List_List* free_evars; int
  generalize_evars; int fn_result; } ; static struct Cyc_Tcutil_CVTEnv Cyc_Tcutil_i_check_valid_type(
  struct Cyc_Position_Segment* loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_Tcutil_CVTEnv
! cvtenv, void* expected_kind, void* t){{ void* _temp2583= Cyc_Tcutil_compress( t);
! struct Cyc_Core_Opt* _temp2631; struct Cyc_Core_Opt** _temp2633; struct Cyc_Core_Opt*
! _temp2634; struct Cyc_Core_Opt** _temp2636; struct Cyc_Absyn_Tvar* _temp2637;
! struct Cyc_Absyn_Enumdecl* _temp2639; struct Cyc_Absyn_Enumdecl** _temp2641;
! struct _tuple1* _temp2642; struct Cyc_Absyn_TunionInfo _temp2644; void*
! _temp2646; struct Cyc_List_List* _temp2648; void* _temp2650; void** _temp2652;
! struct Cyc_Absyn_TunionFieldInfo _temp2653; struct Cyc_List_List* _temp2655;
! void* _temp2657; void** _temp2659; struct Cyc_Absyn_PtrInfo _temp2660; struct
! Cyc_Absyn_Conref* _temp2662; struct Cyc_Absyn_Tqual _temp2664; struct Cyc_Absyn_Conref*
! _temp2666; void* _temp2668; void* _temp2670; struct Cyc_Absyn_Exp* _temp2672;
! struct Cyc_Absyn_Tqual _temp2674; void* _temp2676; struct Cyc_Absyn_FnInfo
! _temp2678; struct Cyc_List_List* _temp2680; struct Cyc_List_List* _temp2682;
! struct Cyc_Absyn_VarargInfo* _temp2684; int _temp2686; struct Cyc_List_List*
! _temp2688; void* _temp2690; struct Cyc_Core_Opt* _temp2692; struct Cyc_Core_Opt**
! _temp2694; struct Cyc_List_List* _temp2695; struct Cyc_List_List** _temp2697;
! struct Cyc_List_List* _temp2698; struct Cyc_List_List* _temp2700; struct Cyc_List_List*
! _temp2702; struct Cyc_Absyn_Structdecl** _temp2704; struct Cyc_Absyn_Structdecl***
! _temp2706; struct Cyc_List_List* _temp2707; struct _tuple1* _temp2709; struct
! Cyc_Absyn_Uniondecl** _temp2711; struct Cyc_Absyn_Uniondecl*** _temp2713; struct
! Cyc_List_List* _temp2714; struct _tuple1* _temp2716; struct Cyc_Core_Opt*
! _temp2718; struct Cyc_Core_Opt** _temp2720; struct Cyc_List_List* _temp2721;
! struct _tuple1* _temp2723; void* _temp2725; void* _temp2727; void* _temp2729;
! struct Cyc_List_List* _temp2731; _LL2585: if( _temp2583 == ( void*) Cyc_Absyn_VoidType){
! goto _LL2586;} else{ goto _LL2587;} _LL2587: if(( unsigned int) _temp2583 >  4u?*((
! int*) _temp2583) ==  Cyc_Absyn_Evar: 0){ _LL2635: _temp2634=(( struct Cyc_Absyn_Evar_struct*)
! _temp2583)->f1; _temp2636=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Evar_struct*)
! _temp2583)->f1; goto _LL2632; _LL2632: _temp2631=(( struct Cyc_Absyn_Evar_struct*)
! _temp2583)->f2; _temp2633=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Evar_struct*)
! _temp2583)->f2; goto _LL2588;} else{ goto _LL2589;} _LL2589: if(( unsigned int)
! _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_VarType: 0){ _LL2638:
! _temp2637=(( struct Cyc_Absyn_VarType_struct*) _temp2583)->f1; goto _LL2590;}
! else{ goto _LL2591;} _LL2591: if(( unsigned int) _temp2583 >  4u?*(( int*)
! _temp2583) ==  Cyc_Absyn_EnumType: 0){ _LL2643: _temp2642=(( struct Cyc_Absyn_EnumType_struct*)
! _temp2583)->f1; goto _LL2640; _LL2640: _temp2639=(( struct Cyc_Absyn_EnumType_struct*)
! _temp2583)->f2; _temp2641=( struct Cyc_Absyn_Enumdecl**)&(( struct Cyc_Absyn_EnumType_struct*)
! _temp2583)->f2; goto _LL2592;} else{ goto _LL2593;} _LL2593: if(( unsigned int)
! _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_TunionType: 0){ _LL2645:
! _temp2644=(( struct Cyc_Absyn_TunionType_struct*) _temp2583)->f1; _LL2651:
! _temp2650=( void*) _temp2644.tunion_info; _temp2652=( void**)&((( struct Cyc_Absyn_TunionType_struct*)
! _temp2583)->f1).tunion_info; goto _LL2649; _LL2649: _temp2648= _temp2644.targs;
! goto _LL2647; _LL2647: _temp2646=( void*) _temp2644.rgn; goto _LL2594;} else{
! goto _LL2595;} _LL2595: if(( unsigned int) _temp2583 >  4u?*(( int*) _temp2583)
! ==  Cyc_Absyn_TunionFieldType: 0){ _LL2654: _temp2653=(( struct Cyc_Absyn_TunionFieldType_struct*)
! _temp2583)->f1; _LL2658: _temp2657=( void*) _temp2653.field_info; _temp2659=(
! void**)&((( struct Cyc_Absyn_TunionFieldType_struct*) _temp2583)->f1).field_info;
! goto _LL2656; _LL2656: _temp2655= _temp2653.targs; goto _LL2596;} else{ goto
! _LL2597;} _LL2597: if(( unsigned int) _temp2583 >  4u?*(( int*) _temp2583) == 
! Cyc_Absyn_PointerType: 0){ _LL2661: _temp2660=(( struct Cyc_Absyn_PointerType_struct*)
! _temp2583)->f1; _LL2671: _temp2670=( void*) _temp2660.elt_typ; goto _LL2669;
! _LL2669: _temp2668=( void*) _temp2660.rgn_typ; goto _LL2667; _LL2667: _temp2666=
! _temp2660.nullable; goto _LL2665; _LL2665: _temp2664= _temp2660.tq; goto _LL2663;
! _LL2663: _temp2662= _temp2660.bounds; goto _LL2598;} else{ goto _LL2599;}
! _LL2599: if(( unsigned int) _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_IntType:
! 0){ goto _LL2600;} else{ goto _LL2601;} _LL2601: if( _temp2583 == ( void*) Cyc_Absyn_FloatType){
! goto _LL2602;} else{ goto _LL2603;} _LL2603: if( _temp2583 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL2604;} else{ goto _LL2605;} _LL2605: if(( unsigned int) _temp2583 >  4u?*((
! int*) _temp2583) ==  Cyc_Absyn_ArrayType: 0){ _LL2677: _temp2676=( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp2583)->f1; goto _LL2675; _LL2675:
! _temp2674=(( struct Cyc_Absyn_ArrayType_struct*) _temp2583)->f2; goto _LL2673;
! _LL2673: _temp2672=(( struct Cyc_Absyn_ArrayType_struct*) _temp2583)->f3; goto
! _LL2606;} else{ goto _LL2607;} _LL2607: if(( unsigned int) _temp2583 >  4u?*((
! int*) _temp2583) ==  Cyc_Absyn_FnType: 0){ _LL2679: _temp2678=(( struct Cyc_Absyn_FnType_struct*)
! _temp2583)->f1; _LL2696: _temp2695= _temp2678.tvars; _temp2697=( struct Cyc_List_List**)&(((
! struct Cyc_Absyn_FnType_struct*) _temp2583)->f1).tvars; goto _LL2693; _LL2693:
! _temp2692= _temp2678.effect; _temp2694=( struct Cyc_Core_Opt**)&((( struct Cyc_Absyn_FnType_struct*)
! _temp2583)->f1).effect; goto _LL2691; _LL2691: _temp2690=( void*) _temp2678.ret_typ;
! goto _LL2689; _LL2689: _temp2688= _temp2678.args; goto _LL2687; _LL2687:
! _temp2686= _temp2678.c_varargs; goto _LL2685; _LL2685: _temp2684= _temp2678.cyc_varargs;
! goto _LL2683; _LL2683: _temp2682= _temp2678.rgn_po; goto _LL2681; _LL2681:
! _temp2680= _temp2678.attributes; goto _LL2608;} else{ goto _LL2609;} _LL2609:
! if(( unsigned int) _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_TupleType:
! 0){ _LL2699: _temp2698=(( struct Cyc_Absyn_TupleType_struct*) _temp2583)->f1;
! goto _LL2610;} else{ goto _LL2611;} _LL2611: if(( unsigned int) _temp2583 >  4u?*((
! int*) _temp2583) ==  Cyc_Absyn_AnonStructType: 0){ _LL2701: _temp2700=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp2583)->f1; goto _LL2612;} else{ goto
! _LL2613;} _LL2613: if(( unsigned int) _temp2583 >  4u?*(( int*) _temp2583) == 
! Cyc_Absyn_AnonUnionType: 0){ _LL2703: _temp2702=(( struct Cyc_Absyn_AnonUnionType_struct*)
! _temp2583)->f1; goto _LL2614;} else{ goto _LL2615;} _LL2615: if(( unsigned int)
! _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_StructType: 0){ _LL2710:
! _temp2709=(( struct Cyc_Absyn_StructType_struct*) _temp2583)->f1; goto _LL2708;
! _LL2708: _temp2707=(( struct Cyc_Absyn_StructType_struct*) _temp2583)->f2; goto
! _LL2705; _LL2705: _temp2704=(( struct Cyc_Absyn_StructType_struct*) _temp2583)->f3;
! _temp2706=( struct Cyc_Absyn_Structdecl***)&(( struct Cyc_Absyn_StructType_struct*)
! _temp2583)->f3; goto _LL2616;} else{ goto _LL2617;} _LL2617: if(( unsigned int)
! _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_UnionType: 0){ _LL2717:
! _temp2716=(( struct Cyc_Absyn_UnionType_struct*) _temp2583)->f1; goto _LL2715;
! _LL2715: _temp2714=(( struct Cyc_Absyn_UnionType_struct*) _temp2583)->f2; goto
! _LL2712; _LL2712: _temp2711=(( struct Cyc_Absyn_UnionType_struct*) _temp2583)->f3;
! _temp2713=( struct Cyc_Absyn_Uniondecl***)&(( struct Cyc_Absyn_UnionType_struct*)
! _temp2583)->f3; goto _LL2618;} else{ goto _LL2619;} _LL2619: if(( unsigned int)
! _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_TypedefType: 0){ _LL2724:
! _temp2723=(( struct Cyc_Absyn_TypedefType_struct*) _temp2583)->f1; goto _LL2722;
! _LL2722: _temp2721=(( struct Cyc_Absyn_TypedefType_struct*) _temp2583)->f2; goto
! _LL2719; _LL2719: _temp2718=(( struct Cyc_Absyn_TypedefType_struct*) _temp2583)->f3;
! _temp2720=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_TypedefType_struct*)
! _temp2583)->f3; goto _LL2620;} else{ goto _LL2621;} _LL2621: if( _temp2583 == (
! void*) Cyc_Absyn_HeapRgn){ goto _LL2622;} else{ goto _LL2623;} _LL2623: if((
! unsigned int) _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL2726: _temp2725=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp2583)->f1; goto _LL2624;} else{ goto _LL2625;} _LL2625: if(( unsigned int)
! _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_AccessEff: 0){ _LL2728:
! _temp2727=( void*)(( struct Cyc_Absyn_AccessEff_struct*) _temp2583)->f1; goto
! _LL2626;} else{ goto _LL2627;} _LL2627: if(( unsigned int) _temp2583 >  4u?*((
! int*) _temp2583) ==  Cyc_Absyn_RgnsEff: 0){ _LL2730: _temp2729=( void*)(( struct
! Cyc_Absyn_RgnsEff_struct*) _temp2583)->f1; goto _LL2628;} else{ goto _LL2629;}
! _LL2629: if(( unsigned int) _temp2583 >  4u?*(( int*) _temp2583) ==  Cyc_Absyn_JoinEff:
! 0){ _LL2732: _temp2731=(( struct Cyc_Absyn_JoinEff_struct*) _temp2583)->f1; goto
! _LL2630;} else{ goto _LL2584;} _LL2586: goto _LL2584; _LL2588: if(* _temp2636 == 
! 0){* _temp2636=({ struct Cyc_Core_Opt* _temp2733=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2733->v=( void*) expected_kind;
! _temp2733;});} if(( cvtenv.fn_result? cvtenv.generalize_evars: 0)? expected_kind
! == ( void*) Cyc_Absyn_RgnKind: 0){* _temp2633=({ struct Cyc_Core_Opt* _temp2734=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2734->v=(
! void*)(( void*) Cyc_Absyn_HeapRgn); _temp2734;});} else{ if( cvtenv.generalize_evars){
! struct Cyc_Absyn_Tvar* _temp2735= Cyc_Tcutil_new_tvar( expected_kind);*
! _temp2633=({ struct Cyc_Core_Opt* _temp2736=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp2736->v=( void*)(( void*)({ struct Cyc_Absyn_VarType_struct*
! _temp2737=( struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2737[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2738; _temp2738.tag= Cyc_Absyn_VarType;
! _temp2738.f1= _temp2735; _temp2738;}); _temp2737;})); _temp2736;}); _temp2637=
! _temp2735; goto _LL2590;} else{ cvtenv.free_evars= Cyc_Tcutil_add_free_evar(
! cvtenv.free_evars, t);}} goto _LL2584; _LL2590: { struct Cyc_Absyn_Conref* c=
! Cyc_Absyn_compress_conref( _temp2637->kind); if(( void*) c->v == ( void*) Cyc_Absyn_No_constr){(
! void*)( c->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct* _temp2739=(
  struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp2739[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp2740; _temp2740.tag= Cyc_Absyn_Eq_constr;
! _temp2740.f1=( void*) expected_kind; _temp2740;}); _temp2739;})));} cvtenv.kind_env=
! Cyc_Tcutil_add_free_tvar( loc, cvtenv.kind_env, _temp2637); cvtenv.free_vars=
! Cyc_Tcutil_fast_add_free_tvar( cvtenv.free_vars, _temp2637); goto _LL2584;}
! _LL2592: if(* _temp2641 ==  0){ struct _handler_cons _temp2741; _push_handler(&
! _temp2741);{ int _temp2743= 0; if( setjmp( _temp2741.handler)){ _temp2743= 1;}
! if( ! _temp2743){{ struct Cyc_Absyn_Enumdecl** ed= Cyc_Tcenv_lookup_enumdecl( te,
! loc, _temp2642);* _temp2641=( struct Cyc_Absyn_Enumdecl*)* ed;}; _pop_handler();}
! else{ void* _temp2742=( void*) _exn_thrown; void* _temp2745= _temp2742; _LL2747:
! if( _temp2745 ==  Cyc_Dict_Absent){ goto _LL2748;} else{ goto _LL2749;} _LL2749:
! goto _LL2750; _LL2748:({ struct Cyc_Std_String_pa_struct _temp2752; _temp2752.tag=
! Cyc_Std_String_pa; _temp2752.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp2642);{ void* _temp2751[ 1u]={& _temp2752}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type enum %s",
! sizeof( unsigned char), 21u), _tag_arr( _temp2751, sizeof( void*), 1u));}});
! return cvtenv; _LL2750:( void) _throw( _temp2745); _LL2746:;}}}{ struct Cyc_Absyn_Enumdecl*
! ed=( struct Cyc_Absyn_Enumdecl*) _check_null(* _temp2641);* _temp2642=( ed->name)[
! _check_known_subscript_notnull( 1u, 0)]; goto _LL2584;} _LL2594:{ void*
! _temp2753=* _temp2652; struct Cyc_Absyn_UnknownTunionInfo _temp2759; int
! _temp2761; struct _tuple1* _temp2763; struct Cyc_Absyn_Tuniondecl** _temp2765;
! struct Cyc_Absyn_Tuniondecl* _temp2767; _LL2755: if(*(( int*) _temp2753) ==  Cyc_Absyn_UnknownTunion){
! _LL2760: _temp2759=(( struct Cyc_Absyn_UnknownTunion_struct*) _temp2753)->f1;
! _LL2764: _temp2763= _temp2759.name; goto _LL2762; _LL2762: _temp2761= _temp2759.is_xtunion;
! goto _LL2756;} else{ goto _LL2757;} _LL2757: if(*(( int*) _temp2753) ==  Cyc_Absyn_KnownTunion){
! _LL2766: _temp2765=(( struct Cyc_Absyn_KnownTunion_struct*) _temp2753)->f1;
! _temp2767=* _temp2765; goto _LL2758;} else{ goto _LL2754;} _LL2756: { struct Cyc_Absyn_Tuniondecl**
! tudp;{ struct _handler_cons _temp2768; _push_handler(& _temp2768);{ int
! _temp2770= 0; if( setjmp( _temp2768.handler)){ _temp2770= 1;} if( ! _temp2770){
! tudp= Cyc_Tcenv_lookup_tuniondecl( te, loc, _temp2763);; _pop_handler();} else{
! void* _temp2769=( void*) _exn_thrown; void* _temp2772= _temp2769; _LL2774: if(
! _temp2772 ==  Cyc_Dict_Absent){ goto _LL2775;} else{ goto _LL2776;} _LL2776:
! goto _LL2777; _LL2775:({ struct Cyc_Std_String_pa_struct _temp2779; _temp2779.tag=
! Cyc_Std_String_pa; _temp2779.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp2763);{ void* _temp2778[ 1u]={& _temp2779}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type [x]tunion %s",
! sizeof( unsigned char), 26u), _tag_arr( _temp2778, sizeof( void*), 1u));}});
! return cvtenv; _LL2777:( void) _throw( _temp2772); _LL2773:;}}} if((* tudp)->is_xtunion
! !=  _temp2761){({ struct Cyc_Std_String_pa_struct _temp2781; _temp2781.tag= Cyc_Std_String_pa;
! _temp2781.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2763);{ void*
! _temp2780[ 1u]={& _temp2781}; Cyc_Tcutil_terr( loc, _tag_arr("[x]tunion is different from type declaration %s",
! sizeof( unsigned char), 48u), _tag_arr( _temp2780, sizeof( void*), 1u));}});}*
! _temp2652=( void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp2782=( struct Cyc_Absyn_KnownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp2782[ 0]=({
! struct Cyc_Absyn_KnownTunion_struct _temp2783; _temp2783.tag= Cyc_Absyn_KnownTunion;
! _temp2783.f1= tudp; _temp2783;}); _temp2782;}); _temp2767=* tudp; goto _LL2758;}
! _LL2758: cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_RgnKind,
! _temp2646);{ struct Cyc_List_List* tvs= _temp2767->tvs; for( 0; _temp2648 !=  0?
! tvs !=  0: 0;( _temp2648=(( struct Cyc_List_List*) _check_null( _temp2648))->tl,
  tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void* t1=( void*)((
! struct Cyc_List_List*) _check_null( _temp2648))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} if( _temp2648
! !=  0){({ struct Cyc_Std_String_pa_struct _temp2785; _temp2785.tag= Cyc_Std_String_pa;
! _temp2785.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2767->name);{
! void* _temp2784[ 1u]={& _temp2785}; Cyc_Tcutil_terr( loc, _tag_arr("too many type arguments for tunion %s",
! sizeof( unsigned char), 38u), _tag_arr( _temp2784, sizeof( void*), 1u));}});}
! if( tvs !=  0){({ struct Cyc_Std_String_pa_struct _temp2787; _temp2787.tag= Cyc_Std_String_pa;
! _temp2787.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2767->name);{
! void* _temp2786[ 1u]={& _temp2787}; Cyc_Tcutil_terr( loc, _tag_arr("too few type arguments for tunion %s",
! sizeof( unsigned char), 37u), _tag_arr( _temp2786, sizeof( void*), 1u));}});}
! goto _LL2754;} _LL2754:;} goto _LL2584; _LL2596:{ void* _temp2788=* _temp2659;
! struct Cyc_Absyn_UnknownTunionFieldInfo _temp2794; int _temp2796; struct _tuple1*
! _temp2798; struct _tuple1* _temp2800; struct Cyc_Absyn_Tunionfield* _temp2802;
! struct Cyc_Absyn_Tuniondecl* _temp2804; _LL2790: if(*(( int*) _temp2788) ==  Cyc_Absyn_UnknownTunionfield){
! _LL2795: _temp2794=(( struct Cyc_Absyn_UnknownTunionfield_struct*) _temp2788)->f1;
! _LL2801: _temp2800= _temp2794.tunion_name; goto _LL2799; _LL2799: _temp2798=
! _temp2794.field_name; goto _LL2797; _LL2797: _temp2796= _temp2794.is_xtunion;
! goto _LL2791;} else{ goto _LL2792;} _LL2792: if(*(( int*) _temp2788) ==  Cyc_Absyn_KnownTunionfield){
! _LL2805: _temp2804=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp2788)->f1;
! goto _LL2803; _LL2803: _temp2802=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp2788)->f2; goto _LL2793;} else{ goto _LL2789;} _LL2791: { struct Cyc_Absyn_Tuniondecl*
! tud; struct Cyc_Absyn_Tunionfield* tuf;{ struct _handler_cons _temp2806;
! _push_handler(& _temp2806);{ int _temp2808= 0; if( setjmp( _temp2806.handler)){
! _temp2808= 1;} if( ! _temp2808){* Cyc_Tcenv_lookup_tuniondecl( te, loc,
! _temp2800);; _pop_handler();} else{ void* _temp2807=( void*) _exn_thrown; void*
! _temp2810= _temp2807; _LL2812: if( _temp2810 ==  Cyc_Dict_Absent){ goto _LL2813;}
! else{ goto _LL2814;} _LL2814: goto _LL2815; _LL2813:({ struct Cyc_Std_String_pa_struct
! _temp2817; _temp2817.tag= Cyc_Std_String_pa; _temp2817.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2800);{ void* _temp2816[ 1u]={& _temp2817}; Cyc_Tcutil_terr(
  loc, _tag_arr("unbound type tunion %s", sizeof( unsigned char), 23u), _tag_arr(
! _temp2816, sizeof( void*), 1u));}}); return cvtenv; _LL2815:( void) _throw(
! _temp2810); _LL2811:;}}}{ struct _handler_cons _temp2818; _push_handler(&
! _temp2818);{ int _temp2820= 0; if( setjmp( _temp2818.handler)){ _temp2820= 1;}
! if( ! _temp2820){{ void* _temp2821= Cyc_Tcenv_lookup_ordinary( te, loc,
! _temp2798); struct Cyc_Absyn_Tunionfield* _temp2827; struct Cyc_Absyn_Tuniondecl*
! _temp2829; _LL2823: if(*(( int*) _temp2821) ==  Cyc_Tcenv_TunionRes){ _LL2830:
! _temp2829=(( struct Cyc_Tcenv_TunionRes_struct*) _temp2821)->f1; goto _LL2828;
! _LL2828: _temp2827=(( struct Cyc_Tcenv_TunionRes_struct*) _temp2821)->f2; goto
! _LL2824;} else{ goto _LL2825;} _LL2825: goto _LL2826; _LL2824: tuf= _temp2827;
! tud= _temp2829; if( tud->is_xtunion !=  _temp2796){({ struct Cyc_Std_String_pa_struct
! _temp2832; _temp2832.tag= Cyc_Std_String_pa; _temp2832.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2800);{ void* _temp2831[ 1u]={& _temp2832}; Cyc_Tcutil_terr(
  loc, _tag_arr("[x]tunion is different from type declaration %s", sizeof(
! unsigned char), 48u), _tag_arr( _temp2831, sizeof( void*), 1u));}});} goto
! _LL2822; _LL2826:({ struct Cyc_Std_String_pa_struct _temp2835; _temp2835.tag=
! Cyc_Std_String_pa; _temp2835.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp2800);{ struct Cyc_Std_String_pa_struct _temp2834; _temp2834.tag= Cyc_Std_String_pa;
! _temp2834.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2798);{ void*
! _temp2833[ 2u]={& _temp2834,& _temp2835}; Cyc_Tcutil_terr( loc, _tag_arr("unbound field %s in type tunion %s",
! sizeof( unsigned char), 35u), _tag_arr( _temp2833, sizeof( void*), 2u));}}});{
! struct Cyc_Tcutil_CVTEnv _temp2836= cvtenv; _npop_handler( 0u); return _temp2836;}
! _LL2822:;}; _pop_handler();} else{ void* _temp2819=( void*) _exn_thrown; void*
! _temp2838= _temp2819; _LL2840: if( _temp2838 ==  Cyc_Dict_Absent){ goto _LL2841;}
! else{ goto _LL2842;} _LL2842: goto _LL2843; _LL2841:({ struct Cyc_Std_String_pa_struct
! _temp2846; _temp2846.tag= Cyc_Std_String_pa; _temp2846.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2800);{ struct Cyc_Std_String_pa_struct _temp2845;
! _temp2845.tag= Cyc_Std_String_pa; _temp2845.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp2798);{ void* _temp2844[ 2u]={& _temp2845,& _temp2846}; Cyc_Tcutil_terr(
  loc, _tag_arr("unbound field %s in type tunion %s", sizeof( unsigned char), 35u),
! _tag_arr( _temp2844, sizeof( void*), 2u));}}}); return cvtenv; _LL2843:( void)
! _throw( _temp2838); _LL2839:;}}}* _temp2659=( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp2847=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp2847[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp2848; _temp2848.tag= Cyc_Absyn_KnownTunionfield; _temp2848.f1= tud;
! _temp2848.f2= tuf; _temp2848;}); _temp2847;}); _temp2804= tud; _temp2802= tuf;
! goto _LL2793;} _LL2793: { struct Cyc_List_List* tvs= _temp2804->tvs; for( 0;
! _temp2655 !=  0? tvs !=  0: 0;( _temp2655=(( struct Cyc_List_List*) _check_null(
! _temp2655))->tl, tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void*
! t1=( void*)(( struct Cyc_List_List*) _check_null( _temp2655))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} if( _temp2655
! !=  0){({ struct Cyc_Std_String_pa_struct _temp2851; _temp2851.tag= Cyc_Std_String_pa;
! _temp2851.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2802->name);{
! struct Cyc_Std_String_pa_struct _temp2850; _temp2850.tag= Cyc_Std_String_pa;
! _temp2850.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2804->name);{
! void* _temp2849[ 2u]={& _temp2850,& _temp2851}; Cyc_Tcutil_terr( loc, _tag_arr("too many type arguments for tunion %s.%s",
! sizeof( unsigned char), 41u), _tag_arr( _temp2849, sizeof( void*), 2u));}}});}
! if( tvs !=  0){({ struct Cyc_Std_String_pa_struct _temp2854; _temp2854.tag= Cyc_Std_String_pa;
! _temp2854.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2802->name);{
! struct Cyc_Std_String_pa_struct _temp2853; _temp2853.tag= Cyc_Std_String_pa;
! _temp2853.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2804->name);{
! void* _temp2852[ 2u]={& _temp2853,& _temp2854}; Cyc_Tcutil_terr( loc, _tag_arr("too few type arguments for tunion %s.%s",
! sizeof( unsigned char), 40u), _tag_arr( _temp2852, sizeof( void*), 2u));}}});}
! goto _LL2789;} _LL2789:;} goto _LL2584; _LL2598: cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_AnyKind, _temp2670); cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_RgnKind, _temp2668);{ void* _temp2855=( void*)(
! Cyc_Absyn_compress_conref( _temp2662))->v; void* _temp2861; struct Cyc_Absyn_Exp*
! _temp2863; _LL2857: if(( unsigned int) _temp2855 >  1u?*(( int*) _temp2855) == 
! Cyc_Absyn_Eq_constr: 0){ _LL2862: _temp2861=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp2855)->f1; if(( unsigned int) _temp2861 >  1u?*(( int*) _temp2861) ==  Cyc_Absyn_Upper_b:
! 0){ _LL2864: _temp2863=(( struct Cyc_Absyn_Upper_b_struct*) _temp2861)->f1; goto
! _LL2858;} else{ goto _LL2859;}} else{ goto _LL2859;} _LL2859: goto _LL2860;
! _LL2858: if( ! Cyc_Tcutil_is_const_exp( te, _temp2863)){({ void* _temp2865[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("pointer bounds expression is not a constant",
! sizeof( unsigned char), 44u), _tag_arr( _temp2865, sizeof( void*), 0u));});} Cyc_Tcexp_tcExp(
! te, 0, _temp2863); if( ! Cyc_Tcutil_coerce_uint_typ( te, _temp2863)){({ void*
! _temp2866[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("pointer bounds expression is not an unsigned int",
! sizeof( unsigned char), 49u), _tag_arr( _temp2866, sizeof( void*), 0u));});} Cyc_Evexp_eval_const_uint_exp(
! _temp2863); goto _LL2856; _LL2860: goto _LL2856; _LL2856:;} goto _LL2584;
! _LL2600: goto _LL2584; _LL2602: goto _LL2584; _LL2604: goto _LL2584; _LL2606:
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_MemKind,
! _temp2676); if( _temp2672 ==  0? 1: ! Cyc_Tcutil_is_const_exp( te,( struct Cyc_Absyn_Exp*)
! _check_null( _temp2672))){({ void* _temp2867[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("array bounds expression is not constant", sizeof( unsigned char), 40u),
! _tag_arr( _temp2867, sizeof( void*), 0u));});} Cyc_Tcexp_tcExp( te, 0,( struct
! Cyc_Absyn_Exp*) _check_null( _temp2672)); if( ! Cyc_Tcutil_coerce_uint_typ( te,(
! struct Cyc_Absyn_Exp*) _check_null( _temp2672))){({ void* _temp2868[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("array bounds expression is not an unsigned int", sizeof(
! unsigned char), 47u), _tag_arr( _temp2868, sizeof( void*), 0u));});} Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp2672)); goto _LL2584; _LL2608: { int
  num_convs= 0; int seen_cdecl= 0; int seen_stdcall= 0; int seen_fastcall= 0; int
  seen_format= 0; void* ft=( void*) Cyc_Absyn_Printf_ft; int fmt_desc_arg= - 1;
! int fmt_arg_start= - 1; for( 0; _temp2680 !=  0; _temp2680=(( struct Cyc_List_List*)
! _check_null( _temp2680))->tl){ if( ! Cyc_Absyn_fntype_att(( void*)(( struct Cyc_List_List*)
! _check_null( _temp2680))->hd)){({ struct Cyc_Std_String_pa_struct _temp2870;
! _temp2870.tag= Cyc_Std_String_pa; _temp2870.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( _temp2680))->hd);{ void* _temp2869[
! 1u]={& _temp2870}; Cyc_Tcutil_terr( loc, _tag_arr("bad function type attribute %s",
! sizeof( unsigned char), 31u), _tag_arr( _temp2869, sizeof( void*), 1u));}});}{
! void* _temp2871=( void*)(( struct Cyc_List_List*) _check_null( _temp2680))->hd;
! int _temp2883; int _temp2885; void* _temp2887; _LL2873: if( _temp2871 == ( void*)
! Cyc_Absyn_Stdcall_att){ goto _LL2874;} else{ goto _LL2875;} _LL2875: if(
! _temp2871 == ( void*) Cyc_Absyn_Cdecl_att){ goto _LL2876;} else{ goto _LL2877;}
! _LL2877: if( _temp2871 == ( void*) Cyc_Absyn_Fastcall_att){ goto _LL2878;} else{
! goto _LL2879;} _LL2879: if(( unsigned int) _temp2871 >  16u?*(( int*) _temp2871)
! ==  Cyc_Absyn_Format_att: 0){ _LL2888: _temp2887=( void*)(( struct Cyc_Absyn_Format_att_struct*)
! _temp2871)->f1; goto _LL2886; _LL2886: _temp2885=(( struct Cyc_Absyn_Format_att_struct*)
! _temp2871)->f2; goto _LL2884; _LL2884: _temp2883=(( struct Cyc_Absyn_Format_att_struct*)
! _temp2871)->f3; goto _LL2880;} else{ goto _LL2881;} _LL2881: goto _LL2882;
! _LL2874: if( ! seen_stdcall){ seen_stdcall= 1; ++ num_convs;} goto _LL2872;
! _LL2876: if( ! seen_cdecl){ seen_cdecl= 1; ++ num_convs;} goto _LL2872; _LL2878:
! if( ! seen_fastcall){ seen_fastcall= 1; ++ num_convs;} goto _LL2872; _LL2880:
! if( ! seen_format){ seen_format= 1; ft= _temp2887; fmt_desc_arg= _temp2885;
! fmt_arg_start= _temp2883;} else{({ void* _temp2889[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("function can't have multiple format attributes", sizeof( unsigned char),
! 47u), _tag_arr( _temp2889, sizeof( void*), 0u));});} goto _LL2872; _LL2882: goto
! _LL2872; _LL2872:;}} if( num_convs >  1){({ void* _temp2890[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("function can't have multiple calling conventions", sizeof(
! unsigned char), 49u), _tag_arr( _temp2890, sizeof( void*), 0u));});} Cyc_Tcutil_check_unique_tvars(
! loc,* _temp2697);{ struct Cyc_List_List* b=* _temp2697; for( 0; b !=  0; b=((
  struct Cyc_List_List*) _check_null( b))->tl){(( struct Cyc_Absyn_Tvar*)(( struct
  Cyc_List_List*) _check_null( b))->hd)->identity= Cyc_Tcutil_new_tvar_id();
  cvtenv.kind_env= Cyc_Tcutil_add_bound_tvar( cvtenv.kind_env,( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( b))->hd);{ void* _temp2891=( void*)( Cyc_Absyn_compress_conref(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( b))->hd)->kind))->v;
! void* _temp2897; _LL2893: if(( unsigned int) _temp2891 >  1u?*(( int*) _temp2891)
! ==  Cyc_Absyn_Eq_constr: 0){ _LL2898: _temp2897=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp2891)->f1; if( _temp2897 == ( void*) Cyc_Absyn_MemKind){ goto _LL2894;}
! else{ goto _LL2895;}} else{ goto _LL2895;} _LL2895: goto _LL2896; _LL2894:({
! struct Cyc_Std_String_pa_struct _temp2900; _temp2900.tag= Cyc_Std_String_pa;
! _temp2900.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( b))->hd)->name;{ void* _temp2899[ 1u]={& _temp2900}; Cyc_Tcutil_terr(
  loc, _tag_arr("function attempts to abstract Mem type variable %s", sizeof(
! unsigned char), 51u), _tag_arr( _temp2899, sizeof( void*), 1u));}}); goto
! _LL2892; _LL2896: goto _LL2892; _LL2892:;}}}{ struct Cyc_Tcutil_CVTEnv _temp2901=({
! struct Cyc_Tcutil_CVTEnv _temp3060; _temp3060.kind_env= cvtenv.kind_env;
! _temp3060.free_vars= 0; _temp3060.free_evars= 0; _temp3060.generalize_evars=
! cvtenv.generalize_evars; _temp3060.fn_result= 1; _temp3060;}); _temp2901= Cyc_Tcutil_i_check_valid_type(
! loc, te, _temp2901,( void*) Cyc_Absyn_MemKind, _temp2690); _temp2901.fn_result=
! 0;{ struct Cyc_List_List* a= _temp2688; for( 0; a !=  0; a=(( struct Cyc_List_List*)
! _check_null( a))->tl){ _temp2901= Cyc_Tcutil_i_check_valid_type( loc, te,
! _temp2901,( void*) Cyc_Absyn_MemKind,(*(( struct _tuple2*)(( struct Cyc_List_List*)
! _check_null( a))->hd)).f3);}} if( _temp2684 !=  0){ if( _temp2686){({ void*
! _temp2902[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("both c_vararg and cyc_vararg", sizeof( unsigned char), 29u), _tag_arr(
! _temp2902, sizeof( void*), 0u));});}{ int _temp2905; void* _temp2907; struct Cyc_Absyn_Tqual
! _temp2909; struct Cyc_Core_Opt* _temp2911; struct Cyc_Absyn_VarargInfo _temp2903=*((
! struct Cyc_Absyn_VarargInfo*) _check_null( _temp2684)); _LL2912: _temp2911=
! _temp2903.name; goto _LL2910; _LL2910: _temp2909= _temp2903.tq; goto _LL2908;
! _LL2908: _temp2907=( void*) _temp2903.type; goto _LL2906; _LL2906: _temp2905=
! _temp2903.inject; goto _LL2904; _LL2904: _temp2901= Cyc_Tcutil_i_check_valid_type(
! loc, te, _temp2901,( void*) Cyc_Absyn_MemKind, _temp2907); if( _temp2905){ void*
! _temp2913= Cyc_Tcutil_compress( _temp2907); struct Cyc_Absyn_TunionInfo
! _temp2919; void* _temp2921; void* _temp2923; _LL2915: if(( unsigned int)
! _temp2913 >  4u?*(( int*) _temp2913) ==  Cyc_Absyn_TunionType: 0){ _LL2920:
! _temp2919=(( struct Cyc_Absyn_TunionType_struct*) _temp2913)->f1; _LL2924:
! _temp2923=( void*) _temp2919.tunion_info; if(*(( int*) _temp2923) ==  Cyc_Absyn_KnownTunion){
! goto _LL2922;} else{ goto _LL2917;} _LL2922: _temp2921=( void*) _temp2919.rgn;
! goto _LL2916;} else{ goto _LL2917;} _LL2917: goto _LL2918; _LL2916: goto _LL2914;
! _LL2918:({ void* _temp2925[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("can't inject a non-[x]tunion type",
! sizeof( unsigned char), 34u), _tag_arr( _temp2925, sizeof( void*), 0u));}); goto
! _LL2914; _LL2914:;}}} if( seen_format){ int _temp2926=(( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( _temp2688); if(((( fmt_desc_arg <  0? 1: fmt_desc_arg > 
! _temp2926)? 1: fmt_arg_start <  0)? 1:( _temp2684 ==  0? fmt_arg_start !=  0: 0))?
! 1:( _temp2684 !=  0? fmt_arg_start !=  _temp2926 +  1: 0)){({ void* _temp2927[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("bad format descriptor", sizeof( unsigned char),
! 22u), _tag_arr( _temp2927, sizeof( void*), 0u));});} else{ void* _temp2930;
! struct _tuple2 _temp2928=*(( struct _tuple2*(*)( struct Cyc_List_List* x, int n))
! Cyc_List_nth)( _temp2688, fmt_desc_arg -  1); _LL2931: _temp2930= _temp2928.f3;
! goto _LL2929; _LL2929:{ void* _temp2932= Cyc_Tcutil_compress( _temp2930); struct
! Cyc_Absyn_PtrInfo _temp2938; struct Cyc_Absyn_Conref* _temp2940; void* _temp2942;
! _LL2934: if(( unsigned int) _temp2932 >  4u?*(( int*) _temp2932) ==  Cyc_Absyn_PointerType:
! 0){ _LL2939: _temp2938=(( struct Cyc_Absyn_PointerType_struct*) _temp2932)->f1;
! _LL2943: _temp2942=( void*) _temp2938.elt_typ; goto _LL2941; _LL2941: _temp2940=
! _temp2938.bounds; goto _LL2935;} else{ goto _LL2936;} _LL2936: goto _LL2937;
! _LL2935:{ struct _tuple8 _temp2945=({ struct _tuple8 _temp2944; _temp2944.f1=
! Cyc_Tcutil_compress( _temp2942); _temp2944.f2= Cyc_Absyn_conref_def(( void*) Cyc_Absyn_Unknown_b,
! _temp2940); _temp2944;}); void* _temp2951; void* _temp2953; void* _temp2955;
! void* _temp2957; _LL2947: _LL2954: _temp2953= _temp2945.f1; if(( unsigned int)
! _temp2953 >  4u?*(( int*) _temp2953) ==  Cyc_Absyn_IntType: 0){ _LL2958:
! _temp2957=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2953)->f1; if(
! _temp2957 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2956;} else{ goto _LL2949;}
! _LL2956: _temp2955=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2953)->f2;
! if( _temp2955 == ( void*) Cyc_Absyn_B1){ goto _LL2952;} else{ goto _LL2949;}}
! else{ goto _LL2949;} _LL2952: _temp2951= _temp2945.f2; if( _temp2951 == ( void*)
! Cyc_Absyn_Unknown_b){ goto _LL2948;} else{ goto _LL2949;} _LL2949: goto _LL2950;
! _LL2948: goto _LL2946; _LL2950:({ void* _temp2959[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("format descriptor is not a char ? type", sizeof( unsigned char), 39u),
! _tag_arr( _temp2959, sizeof( void*), 0u));}); goto _LL2946; _LL2946:;} goto
! _LL2933; _LL2937:({ void* _temp2960[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("format descriptor is not a char ? type",
! sizeof( unsigned char), 39u), _tag_arr( _temp2960, sizeof( void*), 0u));}); goto
! _LL2933; _LL2933:;} if( fmt_arg_start !=  0){ void* _temp2961= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Absyn_VarargInfo*) _check_null( _temp2684))->type); int
! problem;{ void* _temp2962= ft; _LL2964: if( _temp2962 == ( void*) Cyc_Absyn_Printf_ft){
! goto _LL2965;} else{ goto _LL2966;} _LL2966: if( _temp2962 == ( void*) Cyc_Absyn_Scanf_ft){
! goto _LL2967;} else{ goto _LL2963;} _LL2965:{ void* _temp2968= _temp2961; struct
! Cyc_Absyn_TunionInfo _temp2974; void* _temp2976; struct Cyc_Absyn_Tuniondecl**
! _temp2978; struct Cyc_Absyn_Tuniondecl* _temp2980; _LL2970: if(( unsigned int)
! _temp2968 >  4u?*(( int*) _temp2968) ==  Cyc_Absyn_TunionType: 0){ _LL2975:
! _temp2974=(( struct Cyc_Absyn_TunionType_struct*) _temp2968)->f1; _LL2977:
! _temp2976=( void*) _temp2974.tunion_info; if(*(( int*) _temp2976) ==  Cyc_Absyn_KnownTunion){
! _LL2979: _temp2978=(( struct Cyc_Absyn_KnownTunion_struct*) _temp2976)->f1;
! _temp2980=* _temp2978; goto _LL2971;} else{ goto _LL2972;}} else{ goto _LL2972;}
! _LL2972: goto _LL2973; _LL2971: problem= Cyc_Absyn_qvar_cmp( _temp2980->name,
! Cyc_Absyn_tunion_print_arg_qvar) !=  0; goto _LL2969; _LL2973: problem= 1; goto
! _LL2969; _LL2969:;} goto _LL2963; _LL2967:{ void* _temp2981= _temp2961; struct
! Cyc_Absyn_TunionInfo _temp2987; void* _temp2989; struct Cyc_Absyn_Tuniondecl**
! _temp2991; struct Cyc_Absyn_Tuniondecl* _temp2993; _LL2983: if(( unsigned int)
! _temp2981 >  4u?*(( int*) _temp2981) ==  Cyc_Absyn_TunionType: 0){ _LL2988:
! _temp2987=(( struct Cyc_Absyn_TunionType_struct*) _temp2981)->f1; _LL2990:
! _temp2989=( void*) _temp2987.tunion_info; if(*(( int*) _temp2989) ==  Cyc_Absyn_KnownTunion){
! _LL2992: _temp2991=(( struct Cyc_Absyn_KnownTunion_struct*) _temp2989)->f1;
! _temp2993=* _temp2991; goto _LL2984;} else{ goto _LL2985;}} else{ goto _LL2985;}
! _LL2985: goto _LL2986; _LL2984: problem= Cyc_Absyn_qvar_cmp( _temp2993->name,
! Cyc_Absyn_tunion_scanf_arg_qvar) !=  0; goto _LL2982; _LL2986: problem= 1; goto
! _LL2982; _LL2982:;} goto _LL2963; _LL2963:;} if( problem){({ void* _temp2994[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("format attribute and vararg types don't match",
! sizeof( unsigned char), 46u), _tag_arr( _temp2994, sizeof( void*), 0u));});}}}}{
! struct Cyc_List_List* rpo= _temp2682; for( 0; rpo !=  0; rpo=(( struct Cyc_List_List*)
! _check_null( rpo))->tl){ struct _tuple8 _temp2997; void* _temp2998; void*
! _temp3000; struct _tuple8* _temp2995=( struct _tuple8*)(( struct Cyc_List_List*)
! _check_null( rpo))->hd; _temp2997=* _temp2995; _LL3001: _temp3000= _temp2997.f1;
! goto _LL2999; _LL2999: _temp2998= _temp2997.f2; goto _LL2996; _LL2996: _temp2901=
! Cyc_Tcutil_i_check_valid_type( loc, te, _temp2901,( void*) Cyc_Absyn_RgnKind,
! _temp3000); _temp2901= Cyc_Tcutil_i_check_valid_type( loc, te, _temp2901,( void*)
! Cyc_Absyn_RgnKind, _temp2998);}} if(* _temp2694 !=  0){ _temp2901= Cyc_Tcutil_i_check_valid_type(
! loc, te, _temp2901,( void*) Cyc_Absyn_EffKind,( void*)(( struct Cyc_Core_Opt*)
! _check_null(* _temp2694))->v);} else{ if( cvtenv.generalize_evars){;}{ struct
! Cyc_List_List* effect= 0;{ struct Cyc_List_List* tvs= _temp2901.free_vars; for(
  0; tvs !=  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ void*
! _temp3002=( void*)( Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( tvs))->hd)->kind))->v; void* _temp3010; void*
! _temp3012; _LL3004: if(( unsigned int) _temp3002 >  1u?*(( int*) _temp3002) == 
! Cyc_Absyn_Eq_constr: 0){ _LL3011: _temp3010=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3002)->f1; if( _temp3010 == ( void*) Cyc_Absyn_RgnKind){ goto _LL3005;}
! else{ goto _LL3006;}} else{ goto _LL3006;} _LL3006: if(( unsigned int) _temp3002
! >  1u?*(( int*) _temp3002) ==  Cyc_Absyn_Eq_constr: 0){ _LL3013: _temp3012=(
! void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp3002)->f1; if( _temp3012 == (
! void*) Cyc_Absyn_EffKind){ goto _LL3007;} else{ goto _LL3008;}} else{ goto
! _LL3008;} _LL3008: goto _LL3009; _LL3005: effect=({ struct Cyc_List_List*
! _temp3014=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp3014->hd=( void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp3015=(
  struct Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp3015[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp3016; _temp3016.tag= Cyc_Absyn_AccessEff;
! _temp3016.f1=( void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp3017=(
  struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp3017[ 0]=({ struct Cyc_Absyn_VarType_struct _temp3018; _temp3018.tag= Cyc_Absyn_VarType;
! _temp3018.f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd;
! _temp3018;}); _temp3017;})); _temp3016;}); _temp3015;})); _temp3014->tl= effect;
! _temp3014;}); goto _LL3003; _LL3007: effect=({ struct Cyc_List_List* _temp3019=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3019->hd=(
! void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp3020=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp3020[ 0]=({ struct
! Cyc_Absyn_VarType_struct _temp3021; _temp3021.tag= Cyc_Absyn_VarType; _temp3021.f1=(
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd;
! _temp3021;}); _temp3020;})); _temp3019->tl= effect; _temp3019;}); goto _LL3003;
! _LL3009: effect=({ struct Cyc_List_List* _temp3022=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3022->hd=( void*)(( void*)({
! struct Cyc_Absyn_RgnsEff_struct* _temp3023=( struct Cyc_Absyn_RgnsEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct)); _temp3023[ 0]=({ struct
! Cyc_Absyn_RgnsEff_struct _temp3024; _temp3024.tag= Cyc_Absyn_RgnsEff; _temp3024.f1=(
! void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp3025=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp3025[ 0]=({ struct
! Cyc_Absyn_VarType_struct _temp3026; _temp3026.tag= Cyc_Absyn_VarType; _temp3026.f1=(
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd;
! _temp3026;}); _temp3025;})); _temp3024;}); _temp3023;})); _temp3022->tl= effect;
! _temp3022;}); goto _LL3003; _LL3003:;}} effect= Cyc_List_imp_rev( effect);{
! struct Cyc_List_List* ts= _temp2901.free_evars; for( 0; ts !=  0; ts=(( struct
! Cyc_List_List*) _check_null( ts))->tl){ void* _temp3027= Cyc_Tcutil_typ_kind((
! void*)(( struct Cyc_List_List*) _check_null( ts))->hd); _LL3029: if( _temp3027
! == ( void*) Cyc_Absyn_RgnKind){ goto _LL3030;} else{ goto _LL3031;} _LL3031: if(
! _temp3027 == ( void*) Cyc_Absyn_EffKind){ goto _LL3032;} else{ goto _LL3033;}
! _LL3033: goto _LL3034; _LL3030: effect=({ struct Cyc_List_List* _temp3035=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3035->hd=(
! void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp3036=( struct Cyc_Absyn_AccessEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct)); _temp3036[ 0]=({ struct
! Cyc_Absyn_AccessEff_struct _temp3037; _temp3037.tag= Cyc_Absyn_AccessEff;
! _temp3037.f1=( void*)(( void*)(( struct Cyc_List_List*) _check_null( ts))->hd);
! _temp3037;}); _temp3036;})); _temp3035->tl= effect; _temp3035;}); goto _LL3028;
! _LL3032: effect=({ struct Cyc_List_List* _temp3038=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3038->hd=( void*)(( void*)((
! struct Cyc_List_List*) _check_null( ts))->hd); _temp3038->tl= effect; _temp3038;});
! goto _LL3028; _LL3034: effect=({ struct Cyc_List_List* _temp3039=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3039->hd=( void*)(( void*)({
! struct Cyc_Absyn_RgnsEff_struct* _temp3040=( struct Cyc_Absyn_RgnsEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct)); _temp3040[ 0]=({ struct
! Cyc_Absyn_RgnsEff_struct _temp3041; _temp3041.tag= Cyc_Absyn_RgnsEff; _temp3041.f1=(
! void*)(( void*)(( struct Cyc_List_List*) _check_null( ts))->hd); _temp3041;});
! _temp3040;})); _temp3039->tl= effect; _temp3039;}); goto _LL3028; _LL3028:;}}*
! _temp2694=({ struct Cyc_Core_Opt* _temp3042=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp3042->v=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct*
! _temp3043=( struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp3043[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp3044; _temp3044.tag= Cyc_Absyn_JoinEff;
! _temp3044.f1= Cyc_List_imp_rev( effect); _temp3044;}); _temp3043;})); _temp3042;});}}
! if(* _temp2697 !=  0){ struct Cyc_List_List* bs=* _temp2697; for( 0; bs !=  0;
  bs=(( struct Cyc_List_List*) _check_null( bs))->tl){ struct Cyc_Absyn_Conref*
! _temp3045= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( bs))->hd)->kind); void* _temp3046=( void*) _temp3045->v; void*
! _temp3054; _LL3048: if( _temp3046 == ( void*) Cyc_Absyn_No_constr){ goto _LL3049;}
! else{ goto _LL3050;} _LL3050: if(( unsigned int) _temp3046 >  1u?*(( int*)
! _temp3046) ==  Cyc_Absyn_Eq_constr: 0){ _LL3055: _temp3054=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3046)->f1; if( _temp3054 == ( void*) Cyc_Absyn_MemKind){ goto _LL3051;}
! else{ goto _LL3052;}} else{ goto _LL3052;} _LL3052: goto _LL3053; _LL3049:({
! struct Cyc_Std_String_pa_struct _temp3057; _temp3057.tag= Cyc_Std_String_pa;
! _temp3057.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( bs))->hd)->name;{ void* _temp3056[ 1u]={& _temp3057}; Cyc_Tcutil_warn(
  loc, _tag_arr("Type variable %s unconstrained, assuming boxed", sizeof(
! unsigned char), 47u), _tag_arr( _temp3056, sizeof( void*), 1u));}}); goto
! _LL3051; _LL3051:( void*)( _temp3045->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp3058=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp3058[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp3059; _temp3059.tag= Cyc_Absyn_Eq_constr;
! _temp3059.f1=( void*)(( void*) Cyc_Absyn_BoxKind); _temp3059;}); _temp3058;})));
! goto _LL3047; _LL3053: goto _LL3047; _LL3047:;}} cvtenv.kind_env= Cyc_Tcutil_remove_bound_tvars(
! _temp2901.kind_env,* _temp2697); _temp2901.free_vars= Cyc_Tcutil_remove_bound_tvars(
! _temp2901.free_vars,* _temp2697);{ struct Cyc_List_List* tvs= _temp2901.free_vars;
  for( 0; tvs !=  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ cvtenv.free_vars=
  Cyc_Tcutil_fast_add_free_tvar( cvtenv.free_vars,( struct Cyc_Absyn_Tvar*)((
  struct Cyc_List_List*) _check_null( tvs))->hd);}}{ struct Cyc_List_List* evs=
! _temp2901.free_evars; for( 0; evs !=  0; evs=(( struct Cyc_List_List*)
  _check_null( evs))->tl){ cvtenv.free_evars= Cyc_Tcutil_add_free_evar( cvtenv.free_evars,(
! void*)(( struct Cyc_List_List*) _check_null( evs))->hd);}} goto _LL2584;}}
! _LL2610: for( 0; _temp2698 !=  0; _temp2698=(( struct Cyc_List_List*)
! _check_null( _temp2698))->tl){ cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te,
  cvtenv,( void*) Cyc_Absyn_MemKind,(*(( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp2698))->hd)).f2);} goto _LL2584; _LL2612:{ struct
! _RegionHandle _temp3061= _new_region(); struct _RegionHandle* sprev_rgn=&
! _temp3061; _push_region( sprev_rgn);{ struct Cyc_List_List* prev_fields= 0; for(
! 0; _temp2700 !=  0; _temp2700=(( struct Cyc_List_List*) _check_null( _temp2700))->tl){
! struct Cyc_Absyn_Structfield _temp3064; struct Cyc_List_List* _temp3065; struct
! Cyc_Absyn_Exp* _temp3067; void* _temp3069; struct Cyc_Absyn_Tqual _temp3071;
! struct _tagged_arr* _temp3073; struct Cyc_Absyn_Structfield* _temp3062=( struct
! Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( _temp2700))->hd;
! _temp3064=* _temp3062; _LL3074: _temp3073= _temp3064.name; goto _LL3072; _LL3072:
! _temp3071= _temp3064.tq; goto _LL3070; _LL3070: _temp3069=( void*) _temp3064.type;
! goto _LL3068; _LL3068: _temp3067= _temp3064.width; goto _LL3066; _LL3066:
! _temp3065= _temp3064.attributes; goto _LL3063; _LL3063: if((( int(*)( int(*
  compare)( struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l,
  struct _tagged_arr* x)) Cyc_List_mem)( Cyc_Std_zstrptrcmp, prev_fields,
! _temp3073)){({ struct Cyc_Std_String_pa_struct _temp3076; _temp3076.tag= Cyc_Std_String_pa;
! _temp3076.f1=( struct _tagged_arr)* _temp3073;{ void* _temp3075[ 1u]={&
! _temp3076}; Cyc_Tcutil_terr( loc, _tag_arr("duplicate field %s in struct",
! sizeof( unsigned char), 29u), _tag_arr( _temp3075, sizeof( void*), 1u));}});}
! if( Cyc_Std_strcmp(* _temp3073, _tag_arr("", sizeof( unsigned char), 1u)) !=  0){
! prev_fields=({ struct Cyc_List_List* _temp3077=( struct Cyc_List_List*)
! _region_malloc( sprev_rgn, sizeof( struct Cyc_List_List)); _temp3077->hd=( void*)
! _temp3073; _temp3077->tl= prev_fields; _temp3077;});} cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_MemKind, _temp3069); Cyc_Tcutil_check_bitfield(
! loc, te, _temp3069, _temp3067, _temp3073); Cyc_Tcutil_check_field_atts( loc,
! _temp3073, _temp3065);}}; _pop_region( sprev_rgn);} goto _LL2584; _LL2614:{
! struct _RegionHandle _temp3078= _new_region(); struct _RegionHandle* uprev_rgn=&
! _temp3078; _push_region( uprev_rgn);{ struct Cyc_List_List* prev_fields= 0; for(
! 0; _temp2702 !=  0; _temp2702=(( struct Cyc_List_List*) _check_null( _temp2702))->tl){
! struct Cyc_Absyn_Structfield _temp3081; struct Cyc_List_List* _temp3082; struct
! Cyc_Absyn_Exp* _temp3084; void* _temp3086; struct Cyc_Absyn_Tqual _temp3088;
! struct _tagged_arr* _temp3090; struct Cyc_Absyn_Structfield* _temp3079=( struct
! Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( _temp2702))->hd;
! _temp3081=* _temp3079; _LL3091: _temp3090= _temp3081.name; goto _LL3089; _LL3089:
! _temp3088= _temp3081.tq; goto _LL3087; _LL3087: _temp3086=( void*) _temp3081.type;
! goto _LL3085; _LL3085: _temp3084= _temp3081.width; goto _LL3083; _LL3083:
! _temp3082= _temp3081.attributes; goto _LL3080; _LL3080: if((( int(*)( int(*
  compare)( struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l,
  struct _tagged_arr* x)) Cyc_List_mem)( Cyc_Std_zstrptrcmp, prev_fields,
! _temp3090)){({ struct Cyc_Std_String_pa_struct _temp3093; _temp3093.tag= Cyc_Std_String_pa;
! _temp3093.f1=( struct _tagged_arr)* _temp3090;{ void* _temp3092[ 1u]={&
! _temp3093}; Cyc_Tcutil_terr( loc, _tag_arr("duplicate field %s in struct",
! sizeof( unsigned char), 29u), _tag_arr( _temp3092, sizeof( void*), 1u));}});}
! if( Cyc_Std_strcmp(* _temp3090, _tag_arr("", sizeof( unsigned char), 1u)) !=  0){
! prev_fields=({ struct Cyc_List_List* _temp3094=( struct Cyc_List_List*)
! _region_malloc( uprev_rgn, sizeof( struct Cyc_List_List)); _temp3094->hd=( void*)
! _temp3090; _temp3094->tl= prev_fields; _temp3094;});} cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_MemKind, _temp3086); if( ! Cyc_Tcutil_bits_only(
! _temp3086)){({ struct Cyc_Std_String_pa_struct _temp3096; _temp3096.tag= Cyc_Std_String_pa;
! _temp3096.f1=( struct _tagged_arr)* _temp3090;{ void* _temp3095[ 1u]={&
! _temp3096}; Cyc_Tcutil_terr( loc, _tag_arr("%s has a type that is possibly incompatible with other members of union",
! sizeof( unsigned char), 72u), _tag_arr( _temp3095, sizeof( void*), 1u));}});}
! Cyc_Tcutil_check_bitfield( loc, te, _temp3086, _temp3084, _temp3090); Cyc_Tcutil_check_field_atts(
! loc, _temp3090, _temp3082);}}; _pop_region( uprev_rgn);} goto _LL2584; _LL2616:
! if( _temp2709 ==  0){ if(* _temp2706 ==  0){({ void* _temp3097[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("bad anonymous struct", sizeof( unsigned char), 21u), _tag_arr(
! _temp3097, sizeof( void*), 0u));}); return cvtenv;}{ struct Cyc_Absyn_Structdecl*
! sd=*(( struct Cyc_Absyn_Structdecl**) _check_null(* _temp2706));;}} if(*
! _temp2706 ==  0){ struct _handler_cons _temp3098; _push_handler(& _temp3098);{
! int _temp3100= 0; if( setjmp( _temp3098.handler)){ _temp3100= 1;} if( !
! _temp3100){* _temp2706=( struct Cyc_Absyn_Structdecl**) Cyc_Tcenv_lookup_structdecl(
! te, loc,( struct _tuple1*) _check_null( _temp2709));; _pop_handler();} else{
! void* _temp3099=( void*) _exn_thrown; void* _temp3102= _temp3099; _LL3104: if(
! _temp3102 ==  Cyc_Dict_Absent){ goto _LL3105;} else{ goto _LL3106;} _LL3106:
! goto _LL3107; _LL3105:({ struct Cyc_Std_String_pa_struct _temp3109; _temp3109.tag=
! Cyc_Std_String_pa; _temp3109.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
! struct _tuple1*) _check_null( _temp2709));{ void* _temp3108[ 1u]={& _temp3109};
  Cyc_Tcutil_terr( loc, _tag_arr("unbound type struct %s", sizeof( unsigned char),
! 23u), _tag_arr( _temp3108, sizeof( void*), 1u));}}); return cvtenv; _LL3107:(
! void) _throw( _temp3102); _LL3103:;}}}{ struct Cyc_Absyn_Structdecl* sd=*((
! struct Cyc_Absyn_Structdecl**) _check_null(* _temp2706)); if( sd->name !=  0){*((
! struct _tuple1*) _check_null( _temp2709))=(( struct _tuple1*)(( struct Cyc_Core_Opt*)
  _check_null( sd->name))->v)[ _check_known_subscript_notnull( 1u, 0)];}{ struct
  Cyc_List_List* tvs= sd->tvs; int lvs=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! tvs); int largs= Cyc_List_length( _temp2707); if( lvs !=  largs){({ struct Cyc_Std_Int_pa_struct
! _temp3113; _temp3113.tag= Cyc_Std_Int_pa; _temp3113.f1=( int)(( unsigned int)
! largs);{ struct Cyc_Std_Int_pa_struct _temp3112; _temp3112.tag= Cyc_Std_Int_pa;
! _temp3112.f1=( int)(( unsigned int) lvs);{ struct Cyc_Std_String_pa_struct
! _temp3111; _temp3111.tag= Cyc_Std_String_pa; _temp3111.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp2709));{ void*
! _temp3110[ 3u]={& _temp3111,& _temp3112,& _temp3113}; Cyc_Tcutil_terr( loc,
  _tag_arr("struct %s expects %d type arguments but was given %d", sizeof(
! unsigned char), 53u), _tag_arr( _temp3110, sizeof( void*), 3u));}}}});} for( 0;
! _temp2707 !=  0;( _temp2707=(( struct Cyc_List_List*) _check_null( _temp2707))->tl,
  tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void* t1=( void*)((
! struct Cyc_List_List*) _check_null( _temp2707))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} goto _LL2584;}}
! _LL2618: if( _temp2716 ==  0){({ void* _temp3114[ 0u]={}; Cyc_Tcutil_terr( loc,
! _tag_arr("missing union name", sizeof( unsigned char), 19u), _tag_arr( _temp3114,
! sizeof( void*), 0u));}); return cvtenv;} if(* _temp2713 ==  0){ struct
! _handler_cons _temp3115; _push_handler(& _temp3115);{ int _temp3117= 0; if(
! setjmp( _temp3115.handler)){ _temp3117= 1;} if( ! _temp3117){* _temp2713=(
  struct Cyc_Absyn_Uniondecl**) Cyc_Tcenv_lookup_uniondecl( te, loc,( struct
! _tuple1*) _check_null( _temp2716));; _pop_handler();} else{ void* _temp3116=(
! void*) _exn_thrown; void* _temp3119= _temp3116; _LL3121: if( _temp3119 ==  Cyc_Dict_Absent){
! goto _LL3122;} else{ goto _LL3123;} _LL3123: goto _LL3124; _LL3122:({ struct Cyc_Std_String_pa_struct
! _temp3126; _temp3126.tag= Cyc_Std_String_pa; _temp3126.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp2716));{ void*
! _temp3125[ 1u]={& _temp3126}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type union %s",
! sizeof( unsigned char), 22u), _tag_arr( _temp3125, sizeof( void*), 1u));}});
! return cvtenv; _LL3124:( void) _throw( _temp3119); _LL3120:;}}}{ struct Cyc_Absyn_Uniondecl*
! ud=*(( struct Cyc_Absyn_Uniondecl**) _check_null(* _temp2713)); if( ud->name != 
! 0){*(( struct _tuple1*) _check_null( _temp2716))=(( struct _tuple1*)(( struct
  Cyc_Core_Opt*) _check_null( ud->name))->v)[ _check_known_subscript_notnull( 1u,
  0)];}{ struct Cyc_List_List* tvs= ud->tvs; int lvs=(( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( tvs); int largs= Cyc_List_length( _temp2714); if( lvs != 
! largs){({ struct Cyc_Std_Int_pa_struct _temp3130; _temp3130.tag= Cyc_Std_Int_pa;
! _temp3130.f1=( int)(( unsigned int) largs);{ struct Cyc_Std_Int_pa_struct
! _temp3129; _temp3129.tag= Cyc_Std_Int_pa; _temp3129.f1=( int)(( unsigned int)
! lvs);{ struct Cyc_Std_String_pa_struct _temp3128; _temp3128.tag= Cyc_Std_String_pa;
! _temp3128.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(( struct _tuple1*)
! _check_null( _temp2716));{ void* _temp3127[ 3u]={& _temp3128,& _temp3129,&
! _temp3130}; Cyc_Tcutil_terr( loc, _tag_arr("union %s expects %d type arguments but was given %d",
! sizeof( unsigned char), 52u), _tag_arr( _temp3127, sizeof( void*), 3u));}}}});}
! for( 0; _temp2714 !=  0;( _temp2714=(( struct Cyc_List_List*) _check_null(
! _temp2714))->tl, tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void*
! t1=( void*)(( struct Cyc_List_List*) _check_null( _temp2714))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} goto _LL2584;}}
! _LL2620: { struct Cyc_Absyn_Typedefdecl* td;{ struct _handler_cons _temp3131;
! _push_handler(& _temp3131);{ int _temp3133= 0; if( setjmp( _temp3131.handler)){
! _temp3133= 1;} if( ! _temp3133){ td= Cyc_Tcenv_lookup_typedefdecl( te, loc,
! _temp2723);; _pop_handler();} else{ void* _temp3132=( void*) _exn_thrown; void*
! _temp3135= _temp3132; _LL3137: if( _temp3135 ==  Cyc_Dict_Absent){ goto _LL3138;}
! else{ goto _LL3139;} _LL3139: goto _LL3140; _LL3138:({ struct Cyc_Std_String_pa_struct
! _temp3142; _temp3142.tag= Cyc_Std_String_pa; _temp3142.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2723);{ void* _temp3141[ 1u]={& _temp3142}; Cyc_Tcutil_terr(
  loc, _tag_arr("unbound typedef name %s", sizeof( unsigned char), 24u), _tag_arr(
! _temp3141, sizeof( void*), 1u));}}); return cvtenv; _LL3140:( void) _throw(
! _temp3135); _LL3136:;}}} _temp2723[ _check_known_subscript_notnull( 1u, 0)]=( td->name)[
  _check_known_subscript_notnull( 1u, 0)];{ struct Cyc_List_List* tvs= td->tvs;
! struct Cyc_List_List* ts= _temp2721; struct Cyc_List_List* inst= 0; for( 0; ts
  !=  0? tvs !=  0: 0;( ts=(( struct Cyc_List_List*) _check_null( ts))->tl, tvs=((
  struct Cyc_List_List*) _check_null( tvs))->tl)){ void* k= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k,( void*)(( struct Cyc_List_List*)
! _check_null( ts))->hd); inst=({ struct Cyc_List_List* _temp3143=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3143->hd=( void*)({ struct
! _tuple5* _temp3144=( struct _tuple5*) _cycalloc( sizeof( struct _tuple5));
! _temp3144->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! tvs))->hd; _temp3144->f2=( void*)(( struct Cyc_List_List*) _check_null( ts))->hd;
! _temp3144;}); _temp3143->tl= inst; _temp3143;});} if( ts !=  0){({ struct Cyc_Std_String_pa_struct
! _temp3146; _temp3146.tag= Cyc_Std_String_pa; _temp3146.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2723);{ void* _temp3145[ 1u]={& _temp3146}; Cyc_Tcutil_terr(
  loc, _tag_arr("too many parameters for typedef %s", sizeof( unsigned char), 35u),
! _tag_arr( _temp3145, sizeof( void*), 1u));}});} if( tvs !=  0){ for( 0; tvs != 
  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ void* k= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
  void* e= Cyc_Absyn_new_evar( 0, 0); cvtenv= Cyc_Tcutil_i_check_valid_type( loc,
! te, cvtenv, k, e); inst=({ struct Cyc_List_List* _temp3147=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3147->hd=( void*)({ struct
! _tuple5* _temp3148=( struct _tuple5*) _cycalloc( sizeof( struct _tuple5));
! _temp3148->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! tvs))->hd; _temp3148->f2= e; _temp3148;}); _temp3147->tl= inst; _temp3147;});}}{
! void* new_typ= Cyc_Tcutil_substitute( inst,( void*) td->defn);* _temp2720=({
! struct Cyc_Core_Opt* _temp3149=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp3149->v=( void*) new_typ; _temp3149;}); goto _LL2584;}}}
! _LL2622: goto _LL2584; _LL2624: _temp2727= _temp2725; goto _LL2626; _LL2626:
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_RgnKind,
! _temp2727); goto _LL2584; _LL2628: cvtenv= Cyc_Tcutil_i_check_valid_type( loc,
! te, cvtenv,( void*) Cyc_Absyn_AnyKind, _temp2729); goto _LL2584; _LL2630: for( 0;
! _temp2731 !=  0; _temp2731=(( struct Cyc_List_List*) _check_null( _temp2731))->tl){
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_EffKind,(
! void*)(( struct Cyc_List_List*) _check_null( _temp2731))->hd);} goto _LL2584;
! _LL2584:;} if( ! Cyc_Tcutil_kind_leq( Cyc_Tcutil_typ_kind( t), expected_kind)){({
! struct Cyc_Std_String_pa_struct _temp3153; _temp3153.tag= Cyc_Std_String_pa;
! _temp3153.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( expected_kind);{
! struct Cyc_Std_String_pa_struct _temp3152; _temp3152.tag= Cyc_Std_String_pa;
! _temp3152.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( Cyc_Tcutil_typ_kind(
! t));{ struct Cyc_Std_String_pa_struct _temp3151; _temp3151.tag= Cyc_Std_String_pa;
! _temp3151.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp3150[
! 3u]={& _temp3151,& _temp3152,& _temp3153}; Cyc_Tcutil_terr( loc, _tag_arr("type %s has kind %s but as used here needs kind %s",
! sizeof( unsigned char), 51u), _tag_arr( _temp3150, sizeof( void*), 3u));}}}});}
  return cvtenv;} static struct Cyc_Tcutil_CVTEnv Cyc_Tcutil_check_valid_type(
  struct Cyc_Position_Segment* loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List*
  kind_env, void* expected_kind, int generalize_evars, void* t){ struct Cyc_Tcutil_CVTEnv
! _temp3154= Cyc_Tcutil_i_check_valid_type( loc, te,({ struct Cyc_Tcutil_CVTEnv
! _temp3169; _temp3169.kind_env= kind_env; _temp3169.free_vars= 0; _temp3169.free_evars=
! 0; _temp3169.generalize_evars= generalize_evars; _temp3169.fn_result= 0;
! _temp3169;}), expected_kind, t);{ struct Cyc_List_List* vs= _temp3154.free_vars;
! for( 0; vs !=  0; vs=(( struct Cyc_List_List*) _check_null( vs))->tl){ _temp3154.kind_env=
  Cyc_Tcutil_fast_add_free_tvar( kind_env,( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( vs))->hd);}}{ struct Cyc_List_List* evs= _temp3154.free_evars; for(
  0; evs !=  0; evs=(( struct Cyc_List_List*) _check_null( evs))->tl){ void*
! _temp3155= Cyc_Tcutil_compress(( void*)(( struct Cyc_List_List*) _check_null(
! evs))->hd); struct Cyc_Core_Opt* _temp3161; struct Cyc_Core_Opt** _temp3163;
! _LL3157: if(( unsigned int) _temp3155 >  4u?*(( int*) _temp3155) ==  Cyc_Absyn_Evar:
! 0){ _LL3162: _temp3161=(( struct Cyc_Absyn_Evar_struct*) _temp3155)->f4;
! _temp3163=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Evar_struct*) _temp3155)->f4;
! goto _LL3158;} else{ goto _LL3159;} _LL3159: goto _LL3160; _LL3158: if(*
! _temp3163 ==  0){* _temp3163=({ struct Cyc_Core_Opt* _temp3164=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp3164->v=( void*) kind_env;
! _temp3164;});} else{ struct Cyc_List_List* _temp3165=( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null(* _temp3163))->v; struct Cyc_List_List*
! _temp3166= 0; for( 0; _temp3165 !=  0; _temp3165=(( struct Cyc_List_List*)
! _check_null( _temp3165))->tl){ if((( int(*)( int(* compare)( struct Cyc_Absyn_Tvar*,
  struct Cyc_Absyn_Tvar*), struct Cyc_List_List* l, struct Cyc_Absyn_Tvar* x)) Cyc_List_mem)(
  Cyc_Tcutil_fast_tvar_cmp, kind_env,( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( _temp3165))->hd)){ _temp3166=({ struct Cyc_List_List* _temp3167=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3167->hd=(
! void*)(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( _temp3165))->hd);
! _temp3167->tl= _temp3166; _temp3167;});}}* _temp3163=({ struct Cyc_Core_Opt*
! _temp3168=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp3168->v=( void*) _temp3166; _temp3168;});} goto _LL3156; _LL3160: goto
! _LL3156; _LL3156:;}} return _temp3154;} void Cyc_Tcutil_check_valid_toplevel_type(
  struct Cyc_Position_Segment* loc, struct Cyc_Tcenv_Tenv* te, void* t){ int
  generalize_evars= Cyc_Tcutil_is_function_type( t); struct Cyc_Tcutil_CVTEnv
! _temp3170= Cyc_Tcutil_check_valid_type( loc, te, 0,( void*) Cyc_Absyn_MemKind,
! generalize_evars, t); struct Cyc_List_List* _temp3171= _temp3170.free_vars;
! struct Cyc_List_List* _temp3172= _temp3170.free_evars;{ struct Cyc_List_List* x=
! _temp3171; for( 0; x !=  0; x=(( struct Cyc_List_List*) _check_null( x))->tl){
  struct Cyc_Absyn_Conref* c= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( x))->hd)->kind); void* _temp3173=( void*) c->v;
! void* _temp3181; _LL3175: if( _temp3173 == ( void*) Cyc_Absyn_No_constr){ goto
! _LL3176;} else{ goto _LL3177;} _LL3177: if(( unsigned int) _temp3173 >  1u?*((
! int*) _temp3173) ==  Cyc_Absyn_Eq_constr: 0){ _LL3182: _temp3181=( void*)((
! struct Cyc_Absyn_Eq_constr_struct*) _temp3173)->f1; if( _temp3181 == ( void*)
! Cyc_Absyn_MemKind){ goto _LL3178;} else{ goto _LL3179;}} else{ goto _LL3179;}
! _LL3179: goto _LL3180; _LL3176: goto _LL3178; _LL3178:( void*)( c->v=( void*)((
! void*)({ struct Cyc_Absyn_Eq_constr_struct* _temp3183=( struct Cyc_Absyn_Eq_constr_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct)); _temp3183[ 0]=({ struct
! Cyc_Absyn_Eq_constr_struct _temp3184; _temp3184.tag= Cyc_Absyn_Eq_constr;
! _temp3184.f1=( void*)(( void*) Cyc_Absyn_BoxKind); _temp3184;}); _temp3183;})));
! goto _LL3174; _LL3180: goto _LL3174; _LL3174:;}} if( _temp3171 !=  0? 1:
! _temp3172 !=  0){{ void* _temp3185= Cyc_Tcutil_compress( t); struct Cyc_Absyn_FnInfo
! _temp3191; struct Cyc_List_List* _temp3193; struct Cyc_List_List* _temp3195;
! struct Cyc_Absyn_VarargInfo* _temp3197; int _temp3199; struct Cyc_List_List*
! _temp3201; void* _temp3203; struct Cyc_Core_Opt* _temp3205; struct Cyc_List_List*
! _temp3207; struct Cyc_List_List** _temp3209; _LL3187: if(( unsigned int)
! _temp3185 >  4u?*(( int*) _temp3185) ==  Cyc_Absyn_FnType: 0){ _LL3192:
! _temp3191=(( struct Cyc_Absyn_FnType_struct*) _temp3185)->f1; _LL3208: _temp3207=
! _temp3191.tvars; _temp3209=( struct Cyc_List_List**)&((( struct Cyc_Absyn_FnType_struct*)
! _temp3185)->f1).tvars; goto _LL3206; _LL3206: _temp3205= _temp3191.effect; goto
! _LL3204; _LL3204: _temp3203=( void*) _temp3191.ret_typ; goto _LL3202; _LL3202:
! _temp3201= _temp3191.args; goto _LL3200; _LL3200: _temp3199= _temp3191.c_varargs;
! goto _LL3198; _LL3198: _temp3197= _temp3191.cyc_varargs; goto _LL3196; _LL3196:
! _temp3195= _temp3191.rgn_po; goto _LL3194; _LL3194: _temp3193= _temp3191.attributes;
! goto _LL3188;} else{ goto _LL3189;} _LL3189: goto _LL3190; _LL3188: if(*
! _temp3209 ==  0){* _temp3209= _temp3171; _temp3171= 0;} goto _LL3186; _LL3190:
! goto _LL3186; _LL3186:;} if( _temp3171 !=  0){({ struct Cyc_Std_String_pa_struct
! _temp3211; _temp3211.tag= Cyc_Std_String_pa; _temp3211.f1=( struct _tagged_arr)*((
! struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( _temp3171))->hd)->name;{
! void* _temp3210[ 1u]={& _temp3211}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type variable %s",
! sizeof( unsigned char), 25u), _tag_arr( _temp3210, sizeof( void*), 1u));}});}
! if( _temp3172 !=  0){ for( 0; _temp3172 !=  0; _temp3172=(( struct Cyc_List_List*)
! _check_null( _temp3172))->tl){ void* e=( void*)(( struct Cyc_List_List*)
! _check_null( _temp3172))->hd; void* _temp3212= Cyc_Tcutil_typ_kind( e); _LL3214:
! if( _temp3212 == ( void*) Cyc_Absyn_RgnKind){ goto _LL3215;} else{ goto _LL3216;}
! _LL3216: if( _temp3212 == ( void*) Cyc_Absyn_EffKind){ goto _LL3217;} else{ goto
! _LL3218;} _LL3218: goto _LL3219; _LL3215: if( ! Cyc_Tcutil_unify( e,( void*) Cyc_Absyn_HeapRgn)){({
! void* _temp3220[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Tcutil_impos)( _tag_arr("can't unify evar with heap!", sizeof( unsigned char),
! 28u), _tag_arr( _temp3220, sizeof( void*), 0u));});} goto _LL3213; _LL3217: if(
! ! Cyc_Tcutil_unify( e, Cyc_Absyn_empty_effect)){({ void* _temp3221[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("can't unify evar with {}!", sizeof( unsigned char), 26u), _tag_arr(
! _temp3221, sizeof( void*), 0u));});} goto _LL3213; _LL3219:({ struct Cyc_Std_String_pa_struct
! _temp3224; _temp3224.tag= Cyc_Std_String_pa; _temp3224.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ struct Cyc_Std_String_pa_struct _temp3223;
! _temp3223.tag= Cyc_Std_String_pa; _temp3223.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! e);{ void* _temp3222[ 2u]={& _temp3223,& _temp3224}; Cyc_Tcutil_terr( loc,
  _tag_arr("hidden type variable %s isn't abstracted in type %s", sizeof(
! unsigned char), 52u), _tag_arr( _temp3222, sizeof( void*), 2u));}}}); goto
! _LL3213; _LL3213:;}}}} void Cyc_Tcutil_check_fndecl_valid_type( struct Cyc_Position_Segment*
  loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Fndecl* fd){ void* t= Cyc_Tcutil_fndecl2typ(
! fd); Cyc_Tcutil_check_valid_toplevel_type( loc, te, t);{ void* _temp3225= Cyc_Tcutil_compress(
! t); struct Cyc_Absyn_FnInfo _temp3231; struct Cyc_List_List* _temp3233; struct
! Cyc_List_List* _temp3235; struct Cyc_Absyn_VarargInfo* _temp3237; int _temp3239;
! struct Cyc_List_List* _temp3241; void* _temp3243; struct Cyc_Core_Opt* _temp3245;
! struct Cyc_List_List* _temp3247; _LL3227: if(( unsigned int) _temp3225 >  4u?*((
! int*) _temp3225) ==  Cyc_Absyn_FnType: 0){ _LL3232: _temp3231=(( struct Cyc_Absyn_FnType_struct*)
! _temp3225)->f1; _LL3248: _temp3247= _temp3231.tvars; goto _LL3246; _LL3246:
! _temp3245= _temp3231.effect; goto _LL3244; _LL3244: _temp3243=( void*) _temp3231.ret_typ;
! goto _LL3242; _LL3242: _temp3241= _temp3231.args; goto _LL3240; _LL3240:
! _temp3239= _temp3231.c_varargs; goto _LL3238; _LL3238: _temp3237= _temp3231.cyc_varargs;
! goto _LL3236; _LL3236: _temp3235= _temp3231.rgn_po; goto _LL3234; _LL3234:
! _temp3233= _temp3231.attributes; goto _LL3228;} else{ goto _LL3229;} _LL3229:
! goto _LL3230; _LL3228: fd->tvs= _temp3247; fd->effect= _temp3245; goto _LL3226;
! _LL3230:({ void* _temp3249[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("check_fndecl_valid_type: not a FnType",
! sizeof( unsigned char), 38u), _tag_arr( _temp3249, sizeof( void*), 0u));});
! return; _LL3226:;}{ struct _RegionHandle _temp3250= _new_region(); struct
! _RegionHandle* r=& _temp3250; _push_region( r); Cyc_Tcutil_check_unique_vars(((
  struct Cyc_List_List*(*)( struct _RegionHandle*, struct _tagged_arr*(* f)(
  struct _tuple13*), struct Cyc_List_List* x)) Cyc_List_rmap)( r,( struct
  _tagged_arr*(*)( struct _tuple13* t)) Cyc_Tcutil_fst_fdarg, fd->args), loc,
  _tag_arr("function declaration has repeated parameter", sizeof( unsigned char),
! 44u));; _pop_region( r);} fd->cached_typ=({ struct Cyc_Core_Opt* _temp3251=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp3251->v=(
! void*) t; _temp3251;});} void Cyc_Tcutil_check_type( struct Cyc_Position_Segment*
  loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List* bound_tvars, void*
! expected_kind, int allow_evars, void* t){ struct Cyc_Tcutil_CVTEnv _temp3252=
  Cyc_Tcutil_check_valid_type( loc, te, bound_tvars, expected_kind, 0, t); struct
! Cyc_List_List* _temp3253= Cyc_Tcutil_remove_bound_tvars( _temp3252.free_vars,
! bound_tvars); struct Cyc_List_List* _temp3254= _temp3252.free_evars;{ struct Cyc_List_List*
! fs= _temp3253; for( 0; fs !=  0; fs=(( struct Cyc_List_List*) _check_null( fs))->tl){
! struct _tagged_arr* _temp3255=(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( fs))->hd)->name;({ struct Cyc_Std_String_pa_struct _temp3258;
! _temp3258.tag= Cyc_Std_String_pa; _temp3258.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t);{ struct Cyc_Std_String_pa_struct _temp3257; _temp3257.tag= Cyc_Std_String_pa;
! _temp3257.f1=( struct _tagged_arr)* _temp3255;{ void* _temp3256[ 2u]={&
! _temp3257,& _temp3258}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type variable %s in type %s",
! sizeof( unsigned char), 36u), _tag_arr( _temp3256, sizeof( void*), 2u));}}});}}
! if( ! allow_evars? _temp3254 !=  0: 0){ for( 0; _temp3254 !=  0; _temp3254=((
! struct Cyc_List_List*) _check_null( _temp3254))->tl){ void* e=( void*)(( struct
! Cyc_List_List*) _check_null( _temp3254))->hd; void* _temp3259= Cyc_Tcutil_typ_kind(
! e); _LL3261: if( _temp3259 == ( void*) Cyc_Absyn_RgnKind){ goto _LL3262;} else{
! goto _LL3263;} _LL3263: if( _temp3259 == ( void*) Cyc_Absyn_EffKind){ goto
! _LL3264;} else{ goto _LL3265;} _LL3265: goto _LL3266; _LL3262: if( ! Cyc_Tcutil_unify(
! e,( void*) Cyc_Absyn_HeapRgn)){({ void* _temp3267[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("can't unify evar with heap!",
! sizeof( unsigned char), 28u), _tag_arr( _temp3267, sizeof( void*), 0u));});}
! goto _LL3260; _LL3264: if( ! Cyc_Tcutil_unify( e,( void*)({ struct Cyc_Absyn_JoinEff_struct*
! _temp3268=( struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp3268[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp3269; _temp3269.tag= Cyc_Absyn_JoinEff;
! _temp3269.f1= 0; _temp3269;}); _temp3268;}))){({ void* _temp3270[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("can't unify evar with {}!",
! sizeof( unsigned char), 26u), _tag_arr( _temp3270, sizeof( void*), 0u));});}
! goto _LL3260; _LL3266:({ struct Cyc_Std_String_pa_struct _temp3273; _temp3273.tag=
! Cyc_Std_String_pa; _temp3273.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! struct Cyc_Std_String_pa_struct _temp3272; _temp3272.tag= Cyc_Std_String_pa;
! _temp3272.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( e);{ void* _temp3271[
! 2u]={& _temp3272,& _temp3273}; Cyc_Tcutil_terr( loc, _tag_arr("hidden type variable %s isn't abstracted in type %s",
! sizeof( unsigned char), 52u), _tag_arr( _temp3271, sizeof( void*), 2u));}}});
! goto _LL3260; _LL3260:;}}} void Cyc_Tcutil_add_tvar_identity( struct Cyc_Absyn_Tvar*
  tv){ if( tv->identity ==  0){ tv->identity= Cyc_Tcutil_new_tvar_id();}} void Cyc_Tcutil_add_tvar_identities(
  struct Cyc_List_List* tvs){(( void(*)( void(* f)( struct Cyc_Absyn_Tvar*),
  struct Cyc_List_List* x)) Cyc_List_iter)( Cyc_Tcutil_add_tvar_identity, tvs);}
--- 3276,4235 ----
  _check_null( tvs2))->hd)->name, tv->name) ==  0){ struct Cyc_Absyn_Conref* k1=((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs2))->hd)->kind;
  struct Cyc_Absyn_Conref* k2= tv->kind; if( ! Cyc_Tcutil_constrain_kinds( k1, k2)){({
! struct Cyc_Std_String_pa_struct _temp2514; _temp2514.tag= Cyc_Std_String_pa;
! _temp2514.f1=( struct _tagged_arr) Cyc_Absynpp_ckind2string( k2);{ struct Cyc_Std_String_pa_struct
! _temp2513; _temp2513.tag= Cyc_Std_String_pa; _temp2513.f1=( struct _tagged_arr)
! Cyc_Absynpp_ckind2string( k1);{ struct Cyc_Std_String_pa_struct _temp2512;
! _temp2512.tag= Cyc_Std_String_pa; _temp2512.f1=( struct _tagged_arr)* tv->name;{
! void* _temp2511[ 3u]={& _temp2512,& _temp2513,& _temp2514}; Cyc_Tcutil_terr( loc,
  _tag_arr("type variable %s is used with inconsistent kinds %s and %s", sizeof(
! unsigned char), 59u), _tag_arr( _temp2511, sizeof( void*), 3u));}}}});} if( tv->identity
  ==  0){ tv->identity=(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
  _check_null( tvs2))->hd)->identity;} else{ if(*(( int*) _check_null( tv->identity))
  != *(( int*) _check_null((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( tvs2))->hd)->identity))){({ void* _temp2515[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("same type variable has different identity!",
! sizeof( unsigned char), 43u), _tag_arr( _temp2515, sizeof( void*), 0u));});}}
  return tvs;}}} tv->identity= Cyc_Tcutil_new_tvar_id(); return({ struct Cyc_List_List*
! _temp2516=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2516->hd=( void*) tv; _temp2516->tl= tvs; _temp2516;});} static struct Cyc_List_List*
  Cyc_Tcutil_fast_add_free_tvar( struct Cyc_List_List* tvs, struct Cyc_Absyn_Tvar*
! tv){ if( tv->identity ==  0){({ void* _temp2517[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("fast_add_free_tvar: bad identity in tv",
! sizeof( unsigned char), 39u), _tag_arr( _temp2517, sizeof( void*), 0u));});}{
  struct Cyc_List_List* tvs2= tvs; for( 0; tvs2 !=  0; tvs2=(( struct Cyc_List_List*)
  _check_null( tvs2))->tl){ if((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( tvs2))->hd)->identity ==  0){({ void* _temp2518[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("fast_add_free_tvar: bad identity in tvs2",
! sizeof( unsigned char), 41u), _tag_arr( _temp2518, sizeof( void*), 0u));});} if(*((
  int*) _check_null((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
  _check_null( tvs2))->hd)->identity)) == *(( int*) _check_null( tv->identity))){
! return tvs;}}} return({ struct Cyc_List_List* _temp2519=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2519->hd=( void*) tv; _temp2519->tl=
! tvs; _temp2519;});} static struct Cyc_List_List* Cyc_Tcutil_add_bound_tvar(
  struct Cyc_List_List* tvs, struct Cyc_Absyn_Tvar* tv){ if( tv->identity ==  0){({
! struct Cyc_Std_String_pa_struct _temp2521; _temp2521.tag= Cyc_Std_String_pa;
! _temp2521.f1=( struct _tagged_arr) Cyc_Tcutil_tvar2string( tv);{ void* _temp2520[
! 1u]={& _temp2521};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("bound tvar id for %s is NULL", sizeof( unsigned char), 29u), _tag_arr(
! _temp2520, sizeof( void*), 1u));}});} return({ struct Cyc_List_List* _temp2522=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2522->hd=(
! void*) tv; _temp2522->tl= tvs; _temp2522;});} static struct Cyc_List_List* Cyc_Tcutil_add_free_evar(
! struct Cyc_List_List* es, void* e){ void* _temp2523= Cyc_Tcutil_compress( e);
! int _temp2529; _LL2525: if(( unsigned int) _temp2523 >  4u?*(( int*) _temp2523)
! ==  Cyc_Absyn_Evar: 0){ _LL2530: _temp2529=(( struct Cyc_Absyn_Evar_struct*)
! _temp2523)->f3; goto _LL2526;} else{ goto _LL2527;} _LL2527: goto _LL2528;
! _LL2526:{ struct Cyc_List_List* es2= es; for( 0; es2 !=  0; es2=(( struct Cyc_List_List*)
! _check_null( es2))->tl){ void* _temp2531= Cyc_Tcutil_compress(( void*)(( struct
! Cyc_List_List*) _check_null( es2))->hd); int _temp2537; _LL2533: if((
! unsigned int) _temp2531 >  4u?*(( int*) _temp2531) ==  Cyc_Absyn_Evar: 0){
! _LL2538: _temp2537=(( struct Cyc_Absyn_Evar_struct*) _temp2531)->f3; goto
! _LL2534;} else{ goto _LL2535;} _LL2535: goto _LL2536; _LL2534: if( _temp2529 == 
! _temp2537){ return es;} goto _LL2532; _LL2536: goto _LL2532; _LL2532:;}} return({
! struct Cyc_List_List* _temp2539=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2539->hd=( void*) e; _temp2539->tl= es; _temp2539;});
! _LL2528: return es; _LL2524:;} static struct Cyc_List_List* Cyc_Tcutil_remove_bound_tvars(
  struct Cyc_List_List* tvs, struct Cyc_List_List* btvs){ struct Cyc_List_List* r=
  0; for( 0; tvs !=  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ int
  present= 0;{ struct Cyc_List_List* b= btvs; for( 0; b !=  0; b=(( struct Cyc_List_List*)
  _check_null( b))->tl){ if(*(( int*) _check_null((( struct Cyc_Absyn_Tvar*)((
  struct Cyc_List_List*) _check_null( tvs))->hd)->identity)) == *(( int*)
  _check_null((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( b))->hd)->identity))){
! present= 1; break;}}} if( ! present){ r=({ struct Cyc_List_List* _temp2540=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2540->hd=(
  void*)(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd);
! _temp2540->tl= r; _temp2540;});}} r=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( r); return r;} void Cyc_Tcutil_check_bitfield( struct Cyc_Position_Segment*
  loc, struct Cyc_Tcenv_Tenv* te, void* field_typ, struct Cyc_Absyn_Exp* width,
  struct _tagged_arr* fn){ if( width !=  0){ unsigned int w= 0; if( ! Cyc_Tcutil_is_const_exp(
  te,( struct Cyc_Absyn_Exp*) _check_null( width))){({ struct Cyc_Std_String_pa_struct
! _temp2542; _temp2542.tag= Cyc_Std_String_pa; _temp2542.f1=( struct _tagged_arr)*
! fn;{ void* _temp2541[ 1u]={& _temp2542}; Cyc_Tcutil_terr( loc, _tag_arr("bitfield %s does not have constant width",
! sizeof( unsigned char), 41u), _tag_arr( _temp2541, sizeof( void*), 1u));}});}
  else{ w= Cyc_Evexp_eval_const_uint_exp(( struct Cyc_Absyn_Exp*) _check_null(
! width));}{ void* _temp2543= Cyc_Tcutil_compress( field_typ); void* _temp2549;
! _LL2545: if(( unsigned int) _temp2543 >  4u?*(( int*) _temp2543) ==  Cyc_Absyn_IntType:
! 0){ _LL2550: _temp2549=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2543)->f2;
! goto _LL2546;} else{ goto _LL2547;} _LL2547: goto _LL2548; _LL2546:{ void*
! _temp2551= _temp2549; _LL2553: if( _temp2551 == ( void*) Cyc_Absyn_B1){ goto
! _LL2554;} else{ goto _LL2555;} _LL2555: if( _temp2551 == ( void*) Cyc_Absyn_B2){
! goto _LL2556;} else{ goto _LL2557;} _LL2557: if( _temp2551 == ( void*) Cyc_Absyn_B4){
! goto _LL2558;} else{ goto _LL2559;} _LL2559: if( _temp2551 == ( void*) Cyc_Absyn_B8){
! goto _LL2560;} else{ goto _LL2552;} _LL2554: if( w >  8){({ void* _temp2561[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("bitfield larger than type", sizeof(
! unsigned char), 26u), _tag_arr( _temp2561, sizeof( void*), 0u));});} goto
! _LL2552; _LL2556: if( w >  16){({ void* _temp2562[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("bitfield larger than type", sizeof( unsigned char), 26u), _tag_arr(
! _temp2562, sizeof( void*), 0u));});} goto _LL2552; _LL2558: if( w >  32){({ void*
! _temp2563[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("bitfield larger than type",
! sizeof( unsigned char), 26u), _tag_arr( _temp2563, sizeof( void*), 0u));});}
! goto _LL2552; _LL2560: if( w >  64){({ void* _temp2564[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("bitfield larger than type", sizeof( unsigned char), 26u),
! _tag_arr( _temp2564, sizeof( void*), 0u));});} goto _LL2552; _LL2552:;} goto
! _LL2544; _LL2548:({ struct Cyc_Std_String_pa_struct _temp2567; _temp2567.tag=
! Cyc_Std_String_pa; _temp2567.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! field_typ);{ struct Cyc_Std_String_pa_struct _temp2566; _temp2566.tag= Cyc_Std_String_pa;
! _temp2566.f1=( struct _tagged_arr)* fn;{ void* _temp2565[ 2u]={& _temp2566,&
! _temp2567}; Cyc_Tcutil_terr( loc, _tag_arr("bitfield %s must have integral type but has type %s",
! sizeof( unsigned char), 52u), _tag_arr( _temp2565, sizeof( void*), 2u));}}});
! goto _LL2544; _LL2544:;}}} static void Cyc_Tcutil_check_field_atts( struct Cyc_Position_Segment*
  loc, struct _tagged_arr* fn, struct Cyc_List_List* atts){ for( 0; atts !=  0;
! atts=(( struct Cyc_List_List*) _check_null( atts))->tl){ void* _temp2568=( void*)((
! struct Cyc_List_List*) _check_null( atts))->hd; _LL2570: if( _temp2568 == ( void*)
! Cyc_Absyn_Packed_att){ goto _LL2571;} else{ goto _LL2572;} _LL2572: if((
! unsigned int) _temp2568 >  16u?*(( int*) _temp2568) ==  Cyc_Absyn_Aligned_att: 0){
! goto _LL2573;} else{ goto _LL2574;} _LL2574: goto _LL2575; _LL2571: continue;
! _LL2573: continue; _LL2575:({ struct Cyc_Std_String_pa_struct _temp2578;
! _temp2578.tag= Cyc_Std_String_pa; _temp2578.f1=( struct _tagged_arr)* fn;{
! struct Cyc_Std_String_pa_struct _temp2577; _temp2577.tag= Cyc_Std_String_pa;
! _temp2577.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string(( void*)(( struct
! Cyc_List_List*) _check_null( atts))->hd);{ void* _temp2576[ 2u]={& _temp2577,&
! _temp2578}; Cyc_Tcutil_terr( loc, _tag_arr("bad attribute %s on member %s",
! sizeof( unsigned char), 30u), _tag_arr( _temp2576, sizeof( void*), 2u));}}});
! goto _LL2569; _LL2569:;}} struct Cyc_Tcutil_CVTEnv{ struct Cyc_List_List*
  kind_env; struct Cyc_List_List* free_vars; struct Cyc_List_List* free_evars; int
  generalize_evars; int fn_result; } ; static struct Cyc_Tcutil_CVTEnv Cyc_Tcutil_i_check_valid_type(
  struct Cyc_Position_Segment* loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_Tcutil_CVTEnv
! cvtenv, void* expected_kind, void* t){{ void* _temp2579= Cyc_Tcutil_compress( t);
! struct Cyc_Core_Opt* _temp2627; struct Cyc_Core_Opt** _temp2629; struct Cyc_Core_Opt*
! _temp2630; struct Cyc_Core_Opt** _temp2632; struct Cyc_Absyn_Tvar* _temp2633;
! struct Cyc_Absyn_Enumdecl* _temp2635; struct Cyc_Absyn_Enumdecl** _temp2637;
! struct _tuple1* _temp2638; struct Cyc_Absyn_TunionInfo _temp2640; void*
! _temp2642; struct Cyc_List_List* _temp2644; void* _temp2646; void** _temp2648;
! struct Cyc_Absyn_TunionFieldInfo _temp2649; struct Cyc_List_List* _temp2651;
! void* _temp2653; void** _temp2655; struct Cyc_Absyn_PtrInfo _temp2656; struct
! Cyc_Absyn_Conref* _temp2658; struct Cyc_Absyn_Tqual _temp2660; struct Cyc_Absyn_Conref*
! _temp2662; void* _temp2664; void* _temp2666; struct Cyc_Absyn_Exp* _temp2668;
! struct Cyc_Absyn_Tqual _temp2670; void* _temp2672; struct Cyc_Absyn_FnInfo
! _temp2674; struct Cyc_List_List* _temp2676; struct Cyc_List_List* _temp2678;
! struct Cyc_Absyn_VarargInfo* _temp2680; int _temp2682; struct Cyc_List_List*
! _temp2684; void* _temp2686; struct Cyc_Core_Opt* _temp2688; struct Cyc_Core_Opt**
! _temp2690; struct Cyc_List_List* _temp2691; struct Cyc_List_List** _temp2693;
! struct Cyc_List_List* _temp2694; struct Cyc_List_List* _temp2696; struct Cyc_List_List*
! _temp2698; struct Cyc_Absyn_Structdecl** _temp2700; struct Cyc_Absyn_Structdecl***
! _temp2702; struct Cyc_List_List* _temp2703; struct _tuple1* _temp2705; struct
! Cyc_Absyn_Uniondecl** _temp2707; struct Cyc_Absyn_Uniondecl*** _temp2709; struct
! Cyc_List_List* _temp2710; struct _tuple1* _temp2712; struct Cyc_Core_Opt*
! _temp2714; struct Cyc_Core_Opt** _temp2716; struct Cyc_List_List* _temp2717;
! struct _tuple1* _temp2719; void* _temp2721; void* _temp2723; void* _temp2725;
! struct Cyc_List_List* _temp2727; _LL2581: if( _temp2579 == ( void*) Cyc_Absyn_VoidType){
! goto _LL2582;} else{ goto _LL2583;} _LL2583: if(( unsigned int) _temp2579 >  4u?*((
! int*) _temp2579) ==  Cyc_Absyn_Evar: 0){ _LL2631: _temp2630=(( struct Cyc_Absyn_Evar_struct*)
! _temp2579)->f1; _temp2632=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Evar_struct*)
! _temp2579)->f1; goto _LL2628; _LL2628: _temp2627=(( struct Cyc_Absyn_Evar_struct*)
! _temp2579)->f2; _temp2629=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Evar_struct*)
! _temp2579)->f2; goto _LL2584;} else{ goto _LL2585;} _LL2585: if(( unsigned int)
! _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_VarType: 0){ _LL2634:
! _temp2633=(( struct Cyc_Absyn_VarType_struct*) _temp2579)->f1; goto _LL2586;}
! else{ goto _LL2587;} _LL2587: if(( unsigned int) _temp2579 >  4u?*(( int*)
! _temp2579) ==  Cyc_Absyn_EnumType: 0){ _LL2639: _temp2638=(( struct Cyc_Absyn_EnumType_struct*)
! _temp2579)->f1; goto _LL2636; _LL2636: _temp2635=(( struct Cyc_Absyn_EnumType_struct*)
! _temp2579)->f2; _temp2637=( struct Cyc_Absyn_Enumdecl**)&(( struct Cyc_Absyn_EnumType_struct*)
! _temp2579)->f2; goto _LL2588;} else{ goto _LL2589;} _LL2589: if(( unsigned int)
! _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_TunionType: 0){ _LL2641:
! _temp2640=(( struct Cyc_Absyn_TunionType_struct*) _temp2579)->f1; _LL2647:
! _temp2646=( void*) _temp2640.tunion_info; _temp2648=( void**)&((( struct Cyc_Absyn_TunionType_struct*)
! _temp2579)->f1).tunion_info; goto _LL2645; _LL2645: _temp2644= _temp2640.targs;
! goto _LL2643; _LL2643: _temp2642=( void*) _temp2640.rgn; goto _LL2590;} else{
! goto _LL2591;} _LL2591: if(( unsigned int) _temp2579 >  4u?*(( int*) _temp2579)
! ==  Cyc_Absyn_TunionFieldType: 0){ _LL2650: _temp2649=(( struct Cyc_Absyn_TunionFieldType_struct*)
! _temp2579)->f1; _LL2654: _temp2653=( void*) _temp2649.field_info; _temp2655=(
! void**)&((( struct Cyc_Absyn_TunionFieldType_struct*) _temp2579)->f1).field_info;
! goto _LL2652; _LL2652: _temp2651= _temp2649.targs; goto _LL2592;} else{ goto
! _LL2593;} _LL2593: if(( unsigned int) _temp2579 >  4u?*(( int*) _temp2579) == 
! Cyc_Absyn_PointerType: 0){ _LL2657: _temp2656=(( struct Cyc_Absyn_PointerType_struct*)
! _temp2579)->f1; _LL2667: _temp2666=( void*) _temp2656.elt_typ; goto _LL2665;
! _LL2665: _temp2664=( void*) _temp2656.rgn_typ; goto _LL2663; _LL2663: _temp2662=
! _temp2656.nullable; goto _LL2661; _LL2661: _temp2660= _temp2656.tq; goto _LL2659;
! _LL2659: _temp2658= _temp2656.bounds; goto _LL2594;} else{ goto _LL2595;}
! _LL2595: if(( unsigned int) _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_IntType:
! 0){ goto _LL2596;} else{ goto _LL2597;} _LL2597: if( _temp2579 == ( void*) Cyc_Absyn_FloatType){
! goto _LL2598;} else{ goto _LL2599;} _LL2599: if( _temp2579 == ( void*) Cyc_Absyn_DoubleType){
! goto _LL2600;} else{ goto _LL2601;} _LL2601: if(( unsigned int) _temp2579 >  4u?*((
! int*) _temp2579) ==  Cyc_Absyn_ArrayType: 0){ _LL2673: _temp2672=( void*)((
! struct Cyc_Absyn_ArrayType_struct*) _temp2579)->f1; goto _LL2671; _LL2671:
! _temp2670=(( struct Cyc_Absyn_ArrayType_struct*) _temp2579)->f2; goto _LL2669;
! _LL2669: _temp2668=(( struct Cyc_Absyn_ArrayType_struct*) _temp2579)->f3; goto
! _LL2602;} else{ goto _LL2603;} _LL2603: if(( unsigned int) _temp2579 >  4u?*((
! int*) _temp2579) ==  Cyc_Absyn_FnType: 0){ _LL2675: _temp2674=(( struct Cyc_Absyn_FnType_struct*)
! _temp2579)->f1; _LL2692: _temp2691= _temp2674.tvars; _temp2693=( struct Cyc_List_List**)&(((
! struct Cyc_Absyn_FnType_struct*) _temp2579)->f1).tvars; goto _LL2689; _LL2689:
! _temp2688= _temp2674.effect; _temp2690=( struct Cyc_Core_Opt**)&((( struct Cyc_Absyn_FnType_struct*)
! _temp2579)->f1).effect; goto _LL2687; _LL2687: _temp2686=( void*) _temp2674.ret_typ;
! goto _LL2685; _LL2685: _temp2684= _temp2674.args; goto _LL2683; _LL2683:
! _temp2682= _temp2674.c_varargs; goto _LL2681; _LL2681: _temp2680= _temp2674.cyc_varargs;
! goto _LL2679; _LL2679: _temp2678= _temp2674.rgn_po; goto _LL2677; _LL2677:
! _temp2676= _temp2674.attributes; goto _LL2604;} else{ goto _LL2605;} _LL2605:
! if(( unsigned int) _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_TupleType:
! 0){ _LL2695: _temp2694=(( struct Cyc_Absyn_TupleType_struct*) _temp2579)->f1;
! goto _LL2606;} else{ goto _LL2607;} _LL2607: if(( unsigned int) _temp2579 >  4u?*((
! int*) _temp2579) ==  Cyc_Absyn_AnonStructType: 0){ _LL2697: _temp2696=(( struct
! Cyc_Absyn_AnonStructType_struct*) _temp2579)->f1; goto _LL2608;} else{ goto
! _LL2609;} _LL2609: if(( unsigned int) _temp2579 >  4u?*(( int*) _temp2579) == 
! Cyc_Absyn_AnonUnionType: 0){ _LL2699: _temp2698=(( struct Cyc_Absyn_AnonUnionType_struct*)
! _temp2579)->f1; goto _LL2610;} else{ goto _LL2611;} _LL2611: if(( unsigned int)
! _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_StructType: 0){ _LL2706:
! _temp2705=(( struct Cyc_Absyn_StructType_struct*) _temp2579)->f1; goto _LL2704;
! _LL2704: _temp2703=(( struct Cyc_Absyn_StructType_struct*) _temp2579)->f2; goto
! _LL2701; _LL2701: _temp2700=(( struct Cyc_Absyn_StructType_struct*) _temp2579)->f3;
! _temp2702=( struct Cyc_Absyn_Structdecl***)&(( struct Cyc_Absyn_StructType_struct*)
! _temp2579)->f3; goto _LL2612;} else{ goto _LL2613;} _LL2613: if(( unsigned int)
! _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_UnionType: 0){ _LL2713:
! _temp2712=(( struct Cyc_Absyn_UnionType_struct*) _temp2579)->f1; goto _LL2711;
! _LL2711: _temp2710=(( struct Cyc_Absyn_UnionType_struct*) _temp2579)->f2; goto
! _LL2708; _LL2708: _temp2707=(( struct Cyc_Absyn_UnionType_struct*) _temp2579)->f3;
! _temp2709=( struct Cyc_Absyn_Uniondecl***)&(( struct Cyc_Absyn_UnionType_struct*)
! _temp2579)->f3; goto _LL2614;} else{ goto _LL2615;} _LL2615: if(( unsigned int)
! _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_TypedefType: 0){ _LL2720:
! _temp2719=(( struct Cyc_Absyn_TypedefType_struct*) _temp2579)->f1; goto _LL2718;
! _LL2718: _temp2717=(( struct Cyc_Absyn_TypedefType_struct*) _temp2579)->f2; goto
! _LL2715; _LL2715: _temp2714=(( struct Cyc_Absyn_TypedefType_struct*) _temp2579)->f3;
! _temp2716=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_TypedefType_struct*)
! _temp2579)->f3; goto _LL2616;} else{ goto _LL2617;} _LL2617: if( _temp2579 == (
! void*) Cyc_Absyn_HeapRgn){ goto _LL2618;} else{ goto _LL2619;} _LL2619: if((
! unsigned int) _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_RgnHandleType:
! 0){ _LL2722: _temp2721=( void*)(( struct Cyc_Absyn_RgnHandleType_struct*)
! _temp2579)->f1; goto _LL2620;} else{ goto _LL2621;} _LL2621: if(( unsigned int)
! _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_AccessEff: 0){ _LL2724:
! _temp2723=( void*)(( struct Cyc_Absyn_AccessEff_struct*) _temp2579)->f1; goto
! _LL2622;} else{ goto _LL2623;} _LL2623: if(( unsigned int) _temp2579 >  4u?*((
! int*) _temp2579) ==  Cyc_Absyn_RgnsEff: 0){ _LL2726: _temp2725=( void*)(( struct
! Cyc_Absyn_RgnsEff_struct*) _temp2579)->f1; goto _LL2624;} else{ goto _LL2625;}
! _LL2625: if(( unsigned int) _temp2579 >  4u?*(( int*) _temp2579) ==  Cyc_Absyn_JoinEff:
! 0){ _LL2728: _temp2727=(( struct Cyc_Absyn_JoinEff_struct*) _temp2579)->f1; goto
! _LL2626;} else{ goto _LL2580;} _LL2582: goto _LL2580; _LL2584: if(* _temp2632 == 
! 0){* _temp2632=({ struct Cyc_Core_Opt* _temp2729=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2729->v=( void*) expected_kind;
! _temp2729;});} if(( cvtenv.fn_result? cvtenv.generalize_evars: 0)? expected_kind
! == ( void*) Cyc_Absyn_RgnKind: 0){* _temp2629=({ struct Cyc_Core_Opt* _temp2730=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2730->v=(
! void*)(( void*) Cyc_Absyn_HeapRgn); _temp2730;});} else{ if( cvtenv.generalize_evars){
! struct Cyc_Absyn_Tvar* _temp2731= Cyc_Tcutil_new_tvar( expected_kind);*
! _temp2629=({ struct Cyc_Core_Opt* _temp2732=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp2732->v=( void*)(( void*)({ struct Cyc_Absyn_VarType_struct*
! _temp2733=( struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp2733[ 0]=({ struct Cyc_Absyn_VarType_struct _temp2734; _temp2734.tag= Cyc_Absyn_VarType;
! _temp2734.f1= _temp2731; _temp2734;}); _temp2733;})); _temp2732;}); _temp2633=
! _temp2731; goto _LL2586;} else{ cvtenv.free_evars= Cyc_Tcutil_add_free_evar(
! cvtenv.free_evars, t);}} goto _LL2580; _LL2586: { struct Cyc_Absyn_Conref* c=
! Cyc_Absyn_compress_conref( _temp2633->kind); if(( void*) c->v == ( void*) Cyc_Absyn_No_constr){(
! void*)( c->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct* _temp2735=(
  struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp2735[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp2736; _temp2736.tag= Cyc_Absyn_Eq_constr;
! _temp2736.f1=( void*) expected_kind; _temp2736;}); _temp2735;})));} cvtenv.kind_env=
! Cyc_Tcutil_add_free_tvar( loc, cvtenv.kind_env, _temp2633); cvtenv.free_vars=
! Cyc_Tcutil_fast_add_free_tvar( cvtenv.free_vars, _temp2633); goto _LL2580;}
! _LL2588: if(* _temp2637 ==  0){ struct _handler_cons _temp2737; _push_handler(&
! _temp2737);{ int _temp2739= 0; if( setjmp( _temp2737.handler)){ _temp2739= 1;}
! if( ! _temp2739){{ struct Cyc_Absyn_Enumdecl** ed= Cyc_Tcenv_lookup_enumdecl( te,
! loc, _temp2638);* _temp2637=( struct Cyc_Absyn_Enumdecl*)* ed;}; _pop_handler();}
! else{ void* _temp2738=( void*) _exn_thrown; void* _temp2741= _temp2738; _LL2743:
! if( _temp2741 ==  Cyc_Dict_Absent){ goto _LL2744;} else{ goto _LL2745;} _LL2745:
! goto _LL2746; _LL2744:({ struct Cyc_Std_String_pa_struct _temp2748; _temp2748.tag=
! Cyc_Std_String_pa; _temp2748.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp2638);{ void* _temp2747[ 1u]={& _temp2748}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type enum %s",
! sizeof( unsigned char), 21u), _tag_arr( _temp2747, sizeof( void*), 1u));}});
! return cvtenv; _LL2746:( void) _throw( _temp2741); _LL2742:;}}}{ struct Cyc_Absyn_Enumdecl*
! ed=( struct Cyc_Absyn_Enumdecl*) _check_null(* _temp2637);* _temp2638=( ed->name)[
! _check_known_subscript_notnull( 1u, 0)]; goto _LL2580;} _LL2590:{ void*
! _temp2749=* _temp2648; struct Cyc_Absyn_UnknownTunionInfo _temp2755; int
! _temp2757; struct _tuple1* _temp2759; struct Cyc_Absyn_Tuniondecl* _temp2761;
! _LL2751: if(*(( int*) _temp2749) ==  Cyc_Absyn_UnknownTunion){ _LL2756:
! _temp2755=(( struct Cyc_Absyn_UnknownTunion_struct*) _temp2749)->f1; _LL2760:
! _temp2759= _temp2755.name; goto _LL2758; _LL2758: _temp2757= _temp2755.is_xtunion;
! goto _LL2752;} else{ goto _LL2753;} _LL2753: if(*(( int*) _temp2749) ==  Cyc_Absyn_KnownTunion){
! _LL2762: _temp2761=(( struct Cyc_Absyn_KnownTunion_struct*) _temp2749)->f1; goto
! _LL2754;} else{ goto _LL2750;} _LL2752: { struct Cyc_Absyn_Tuniondecl* tud;{
! struct _handler_cons _temp2763; _push_handler(& _temp2763);{ int _temp2765= 0;
! if( setjmp( _temp2763.handler)){ _temp2765= 1;} if( ! _temp2765){ tud=* Cyc_Tcenv_lookup_tuniondecl(
! te, loc, _temp2759);; _pop_handler();} else{ void* _temp2764=( void*)
! _exn_thrown; void* _temp2767= _temp2764; _LL2769: if( _temp2767 ==  Cyc_Dict_Absent){
! goto _LL2770;} else{ goto _LL2771;} _LL2771: goto _LL2772; _LL2770:({ struct Cyc_Std_String_pa_struct
! _temp2774; _temp2774.tag= Cyc_Std_String_pa; _temp2774.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2759);{ void* _temp2773[ 1u]={& _temp2774}; Cyc_Tcutil_terr(
! loc, _tag_arr("unbound type [x]tunion %s", sizeof( unsigned char), 26u),
! _tag_arr( _temp2773, sizeof( void*), 1u));}}); return cvtenv; _LL2772:( void)
! _throw( _temp2767); _LL2768:;}}} if( tud->is_xtunion !=  _temp2757){({ struct
! Cyc_Std_String_pa_struct _temp2776; _temp2776.tag= Cyc_Std_String_pa; _temp2776.f1=(
! struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2759);{ void* _temp2775[ 1u]={&
! _temp2776}; Cyc_Tcutil_terr( loc, _tag_arr("[x]tunion is different from type declaration %s",
! sizeof( unsigned char), 48u), _tag_arr( _temp2775, sizeof( void*), 1u));}});}*
! _temp2648=( void*)({ struct Cyc_Absyn_KnownTunion_struct* _temp2777=( struct Cyc_Absyn_KnownTunion_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_KnownTunion_struct)); _temp2777[ 0]=({
! struct Cyc_Absyn_KnownTunion_struct _temp2778; _temp2778.tag= Cyc_Absyn_KnownTunion;
! _temp2778.f1= tud; _temp2778;}); _temp2777;}); _temp2761= tud; goto _LL2754;}
! _LL2754: cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_RgnKind,
! _temp2642);{ struct Cyc_List_List* tvs= _temp2761->tvs; for( 0; _temp2644 !=  0?
! tvs !=  0: 0;( _temp2644=(( struct Cyc_List_List*) _check_null( _temp2644))->tl,
  tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void* t1=( void*)((
! struct Cyc_List_List*) _check_null( _temp2644))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} if( _temp2644
! !=  0){({ struct Cyc_Std_String_pa_struct _temp2780; _temp2780.tag= Cyc_Std_String_pa;
! _temp2780.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2761->name);{
! void* _temp2779[ 1u]={& _temp2780}; Cyc_Tcutil_terr( loc, _tag_arr("too many type arguments for tunion %s",
! sizeof( unsigned char), 38u), _tag_arr( _temp2779, sizeof( void*), 1u));}});}
! if( tvs !=  0){({ struct Cyc_Std_String_pa_struct _temp2782; _temp2782.tag= Cyc_Std_String_pa;
! _temp2782.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2761->name);{
! void* _temp2781[ 1u]={& _temp2782}; Cyc_Tcutil_terr( loc, _tag_arr("too few type arguments for tunion %s",
! sizeof( unsigned char), 37u), _tag_arr( _temp2781, sizeof( void*), 1u));}});}
! goto _LL2750;} _LL2750:;} goto _LL2580; _LL2592:{ void* _temp2783=* _temp2655;
! struct Cyc_Absyn_UnknownTunionFieldInfo _temp2789; int _temp2791; struct _tuple1*
! _temp2793; struct _tuple1* _temp2795; struct Cyc_Absyn_Tunionfield* _temp2797;
! struct Cyc_Absyn_Tuniondecl* _temp2799; _LL2785: if(*(( int*) _temp2783) ==  Cyc_Absyn_UnknownTunionfield){
! _LL2790: _temp2789=(( struct Cyc_Absyn_UnknownTunionfield_struct*) _temp2783)->f1;
! _LL2796: _temp2795= _temp2789.tunion_name; goto _LL2794; _LL2794: _temp2793=
! _temp2789.field_name; goto _LL2792; _LL2792: _temp2791= _temp2789.is_xtunion;
! goto _LL2786;} else{ goto _LL2787;} _LL2787: if(*(( int*) _temp2783) ==  Cyc_Absyn_KnownTunionfield){
! _LL2800: _temp2799=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp2783)->f1;
! goto _LL2798; _LL2798: _temp2797=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp2783)->f2; goto _LL2788;} else{ goto _LL2784;} _LL2786: { struct Cyc_Absyn_Tuniondecl*
! tud; struct Cyc_Absyn_Tunionfield* tuf;{ struct _handler_cons _temp2801;
! _push_handler(& _temp2801);{ int _temp2803= 0; if( setjmp( _temp2801.handler)){
! _temp2803= 1;} if( ! _temp2803){* Cyc_Tcenv_lookup_tuniondecl( te, loc,
! _temp2795);; _pop_handler();} else{ void* _temp2802=( void*) _exn_thrown; void*
! _temp2805= _temp2802; _LL2807: if( _temp2805 ==  Cyc_Dict_Absent){ goto _LL2808;}
! else{ goto _LL2809;} _LL2809: goto _LL2810; _LL2808:({ struct Cyc_Std_String_pa_struct
! _temp2812; _temp2812.tag= Cyc_Std_String_pa; _temp2812.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2795);{ void* _temp2811[ 1u]={& _temp2812}; Cyc_Tcutil_terr(
  loc, _tag_arr("unbound type tunion %s", sizeof( unsigned char), 23u), _tag_arr(
! _temp2811, sizeof( void*), 1u));}}); return cvtenv; _LL2810:( void) _throw(
! _temp2805); _LL2806:;}}}{ struct _handler_cons _temp2813; _push_handler(&
! _temp2813);{ int _temp2815= 0; if( setjmp( _temp2813.handler)){ _temp2815= 1;}
! if( ! _temp2815){{ void* _temp2816= Cyc_Tcenv_lookup_ordinary( te, loc,
! _temp2793); struct Cyc_Absyn_Tunionfield* _temp2822; struct Cyc_Absyn_Tuniondecl*
! _temp2824; _LL2818: if(*(( int*) _temp2816) ==  Cyc_Tcenv_TunionRes){ _LL2825:
! _temp2824=(( struct Cyc_Tcenv_TunionRes_struct*) _temp2816)->f1; goto _LL2823;
! _LL2823: _temp2822=(( struct Cyc_Tcenv_TunionRes_struct*) _temp2816)->f2; goto
! _LL2819;} else{ goto _LL2820;} _LL2820: goto _LL2821; _LL2819: tuf= _temp2822;
! tud= _temp2824; if( tud->is_xtunion !=  _temp2791){({ struct Cyc_Std_String_pa_struct
! _temp2827; _temp2827.tag= Cyc_Std_String_pa; _temp2827.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2795);{ void* _temp2826[ 1u]={& _temp2827}; Cyc_Tcutil_terr(
  loc, _tag_arr("[x]tunion is different from type declaration %s", sizeof(
! unsigned char), 48u), _tag_arr( _temp2826, sizeof( void*), 1u));}});} goto
! _LL2817; _LL2821:({ struct Cyc_Std_String_pa_struct _temp2830; _temp2830.tag=
! Cyc_Std_String_pa; _temp2830.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp2795);{ struct Cyc_Std_String_pa_struct _temp2829; _temp2829.tag= Cyc_Std_String_pa;
! _temp2829.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2793);{ void*
! _temp2828[ 2u]={& _temp2829,& _temp2830}; Cyc_Tcutil_terr( loc, _tag_arr("unbound field %s in type tunion %s",
! sizeof( unsigned char), 35u), _tag_arr( _temp2828, sizeof( void*), 2u));}}});{
! struct Cyc_Tcutil_CVTEnv _temp2831= cvtenv; _npop_handler( 0u); return _temp2831;}
! _LL2817:;}; _pop_handler();} else{ void* _temp2814=( void*) _exn_thrown; void*
! _temp2833= _temp2814; _LL2835: if( _temp2833 ==  Cyc_Dict_Absent){ goto _LL2836;}
! else{ goto _LL2837;} _LL2837: goto _LL2838; _LL2836:({ struct Cyc_Std_String_pa_struct
! _temp2841; _temp2841.tag= Cyc_Std_String_pa; _temp2841.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2795);{ struct Cyc_Std_String_pa_struct _temp2840;
! _temp2840.tag= Cyc_Std_String_pa; _temp2840.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(
! _temp2793);{ void* _temp2839[ 2u]={& _temp2840,& _temp2841}; Cyc_Tcutil_terr(
  loc, _tag_arr("unbound field %s in type tunion %s", sizeof( unsigned char), 35u),
! _tag_arr( _temp2839, sizeof( void*), 2u));}}}); return cvtenv; _LL2838:( void)
! _throw( _temp2833); _LL2834:;}}}* _temp2655=( void*)({ struct Cyc_Absyn_KnownTunionfield_struct*
! _temp2842=( struct Cyc_Absyn_KnownTunionfield_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_KnownTunionfield_struct)); _temp2842[ 0]=({ struct Cyc_Absyn_KnownTunionfield_struct
! _temp2843; _temp2843.tag= Cyc_Absyn_KnownTunionfield; _temp2843.f1= tud;
! _temp2843.f2= tuf; _temp2843;}); _temp2842;}); _temp2799= tud; _temp2797= tuf;
! goto _LL2788;} _LL2788: { struct Cyc_List_List* tvs= _temp2799->tvs; for( 0;
! _temp2651 !=  0? tvs !=  0: 0;( _temp2651=(( struct Cyc_List_List*) _check_null(
! _temp2651))->tl, tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void*
! t1=( void*)(( struct Cyc_List_List*) _check_null( _temp2651))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} if( _temp2651
! !=  0){({ struct Cyc_Std_String_pa_struct _temp2846; _temp2846.tag= Cyc_Std_String_pa;
! _temp2846.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2797->name);{
! struct Cyc_Std_String_pa_struct _temp2845; _temp2845.tag= Cyc_Std_String_pa;
! _temp2845.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2799->name);{
! void* _temp2844[ 2u]={& _temp2845,& _temp2846}; Cyc_Tcutil_terr( loc, _tag_arr("too many type arguments for tunion %s.%s",
! sizeof( unsigned char), 41u), _tag_arr( _temp2844, sizeof( void*), 2u));}}});}
! if( tvs !=  0){({ struct Cyc_Std_String_pa_struct _temp2849; _temp2849.tag= Cyc_Std_String_pa;
! _temp2849.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2797->name);{
! struct Cyc_Std_String_pa_struct _temp2848; _temp2848.tag= Cyc_Std_String_pa;
! _temp2848.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( _temp2799->name);{
! void* _temp2847[ 2u]={& _temp2848,& _temp2849}; Cyc_Tcutil_terr( loc, _tag_arr("too few type arguments for tunion %s.%s",
! sizeof( unsigned char), 40u), _tag_arr( _temp2847, sizeof( void*), 2u));}}});}
! goto _LL2784;} _LL2784:;} goto _LL2580; _LL2594: cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_AnyKind, _temp2666); cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_RgnKind, _temp2664);{ void* _temp2850=( void*)(
! Cyc_Absyn_compress_conref( _temp2658))->v; void* _temp2856; struct Cyc_Absyn_Exp*
! _temp2858; _LL2852: if(( unsigned int) _temp2850 >  1u?*(( int*) _temp2850) == 
! Cyc_Absyn_Eq_constr: 0){ _LL2857: _temp2856=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp2850)->f1; if(( unsigned int) _temp2856 >  1u?*(( int*) _temp2856) ==  Cyc_Absyn_Upper_b:
! 0){ _LL2859: _temp2858=(( struct Cyc_Absyn_Upper_b_struct*) _temp2856)->f1; goto
! _LL2853;} else{ goto _LL2854;}} else{ goto _LL2854;} _LL2854: goto _LL2855;
! _LL2853: if( ! Cyc_Tcutil_is_const_exp( te, _temp2858)){({ void* _temp2860[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("pointer bounds expression is not a constant",
! sizeof( unsigned char), 44u), _tag_arr( _temp2860, sizeof( void*), 0u));});} Cyc_Tcexp_tcExp(
! te, 0, _temp2858); if( ! Cyc_Tcutil_coerce_uint_typ( te, _temp2858)){({ void*
! _temp2861[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("pointer bounds expression is not an unsigned int",
! sizeof( unsigned char), 49u), _tag_arr( _temp2861, sizeof( void*), 0u));});} Cyc_Evexp_eval_const_uint_exp(
! _temp2858); goto _LL2851; _LL2855: goto _LL2851; _LL2851:;} goto _LL2580;
! _LL2596: goto _LL2580; _LL2598: goto _LL2580; _LL2600: goto _LL2580; _LL2602:
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_MemKind,
! _temp2672); if( _temp2668 ==  0? 1: ! Cyc_Tcutil_is_const_exp( te,( struct Cyc_Absyn_Exp*)
! _check_null( _temp2668))){({ void* _temp2862[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("array bounds expression is not constant", sizeof( unsigned char), 40u),
! _tag_arr( _temp2862, sizeof( void*), 0u));});} Cyc_Tcexp_tcExp( te, 0,( struct
! Cyc_Absyn_Exp*) _check_null( _temp2668)); if( ! Cyc_Tcutil_coerce_uint_typ( te,(
! struct Cyc_Absyn_Exp*) _check_null( _temp2668))){({ void* _temp2863[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("array bounds expression is not an unsigned int", sizeof(
! unsigned char), 47u), _tag_arr( _temp2863, sizeof( void*), 0u));});} Cyc_Evexp_eval_const_uint_exp((
! struct Cyc_Absyn_Exp*) _check_null( _temp2668)); goto _LL2580; _LL2604: { int
  num_convs= 0; int seen_cdecl= 0; int seen_stdcall= 0; int seen_fastcall= 0; int
  seen_format= 0; void* ft=( void*) Cyc_Absyn_Printf_ft; int fmt_desc_arg= - 1;
! int fmt_arg_start= - 1; for( 0; _temp2676 !=  0; _temp2676=(( struct Cyc_List_List*)
! _check_null( _temp2676))->tl){ if( ! Cyc_Absyn_fntype_att(( void*)(( struct Cyc_List_List*)
! _check_null( _temp2676))->hd)){({ struct Cyc_Std_String_pa_struct _temp2865;
! _temp2865.tag= Cyc_Std_String_pa; _temp2865.f1=( struct _tagged_arr) Cyc_Absyn_attribute2string((
! void*)(( struct Cyc_List_List*) _check_null( _temp2676))->hd);{ void* _temp2864[
! 1u]={& _temp2865}; Cyc_Tcutil_terr( loc, _tag_arr("bad function type attribute %s",
! sizeof( unsigned char), 31u), _tag_arr( _temp2864, sizeof( void*), 1u));}});}{
! void* _temp2866=( void*)(( struct Cyc_List_List*) _check_null( _temp2676))->hd;
! int _temp2878; int _temp2880; void* _temp2882; _LL2868: if( _temp2866 == ( void*)
! Cyc_Absyn_Stdcall_att){ goto _LL2869;} else{ goto _LL2870;} _LL2870: if(
! _temp2866 == ( void*) Cyc_Absyn_Cdecl_att){ goto _LL2871;} else{ goto _LL2872;}
! _LL2872: if( _temp2866 == ( void*) Cyc_Absyn_Fastcall_att){ goto _LL2873;} else{
! goto _LL2874;} _LL2874: if(( unsigned int) _temp2866 >  16u?*(( int*) _temp2866)
! ==  Cyc_Absyn_Format_att: 0){ _LL2883: _temp2882=( void*)(( struct Cyc_Absyn_Format_att_struct*)
! _temp2866)->f1; goto _LL2881; _LL2881: _temp2880=(( struct Cyc_Absyn_Format_att_struct*)
! _temp2866)->f2; goto _LL2879; _LL2879: _temp2878=(( struct Cyc_Absyn_Format_att_struct*)
! _temp2866)->f3; goto _LL2875;} else{ goto _LL2876;} _LL2876: goto _LL2877;
! _LL2869: if( ! seen_stdcall){ seen_stdcall= 1; ++ num_convs;} goto _LL2867;
! _LL2871: if( ! seen_cdecl){ seen_cdecl= 1; ++ num_convs;} goto _LL2867; _LL2873:
! if( ! seen_fastcall){ seen_fastcall= 1; ++ num_convs;} goto _LL2867; _LL2875:
! if( ! seen_format){ seen_format= 1; ft= _temp2882; fmt_desc_arg= _temp2880;
! fmt_arg_start= _temp2878;} else{({ void* _temp2884[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("function can't have multiple format attributes", sizeof( unsigned char),
! 47u), _tag_arr( _temp2884, sizeof( void*), 0u));});} goto _LL2867; _LL2877: goto
! _LL2867; _LL2867:;}} if( num_convs >  1){({ void* _temp2885[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("function can't have multiple calling conventions", sizeof(
! unsigned char), 49u), _tag_arr( _temp2885, sizeof( void*), 0u));});} Cyc_Tcutil_check_unique_tvars(
! loc,* _temp2693);{ struct Cyc_List_List* b=* _temp2693; for( 0; b !=  0; b=((
  struct Cyc_List_List*) _check_null( b))->tl){(( struct Cyc_Absyn_Tvar*)(( struct
  Cyc_List_List*) _check_null( b))->hd)->identity= Cyc_Tcutil_new_tvar_id();
  cvtenv.kind_env= Cyc_Tcutil_add_bound_tvar( cvtenv.kind_env,( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( b))->hd);{ void* _temp2886=( void*)( Cyc_Absyn_compress_conref(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( b))->hd)->kind))->v;
! void* _temp2892; _LL2888: if(( unsigned int) _temp2886 >  1u?*(( int*) _temp2886)
! ==  Cyc_Absyn_Eq_constr: 0){ _LL2893: _temp2892=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp2886)->f1; if( _temp2892 == ( void*) Cyc_Absyn_MemKind){ goto _LL2889;}
! else{ goto _LL2890;}} else{ goto _LL2890;} _LL2890: goto _LL2891; _LL2889:({
! struct Cyc_Std_String_pa_struct _temp2895; _temp2895.tag= Cyc_Std_String_pa;
! _temp2895.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( b))->hd)->name;{ void* _temp2894[ 1u]={& _temp2895}; Cyc_Tcutil_terr(
  loc, _tag_arr("function attempts to abstract Mem type variable %s", sizeof(
! unsigned char), 51u), _tag_arr( _temp2894, sizeof( void*), 1u));}}); goto
! _LL2887; _LL2891: goto _LL2887; _LL2887:;}}}{ struct Cyc_Tcutil_CVTEnv _temp2896=({
! struct Cyc_Tcutil_CVTEnv _temp3053; _temp3053.kind_env= cvtenv.kind_env;
! _temp3053.free_vars= 0; _temp3053.free_evars= 0; _temp3053.generalize_evars=
! cvtenv.generalize_evars; _temp3053.fn_result= 1; _temp3053;}); _temp2896= Cyc_Tcutil_i_check_valid_type(
! loc, te, _temp2896,( void*) Cyc_Absyn_MemKind, _temp2686); _temp2896.fn_result=
! 0;{ struct Cyc_List_List* a= _temp2684; for( 0; a !=  0; a=(( struct Cyc_List_List*)
! _check_null( a))->tl){ _temp2896= Cyc_Tcutil_i_check_valid_type( loc, te,
! _temp2896,( void*) Cyc_Absyn_MemKind,(*(( struct _tuple2*)(( struct Cyc_List_List*)
! _check_null( a))->hd)).f3);}} if( _temp2680 !=  0){ if( _temp2682){({ void*
! _temp2897[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("both c_vararg and cyc_vararg", sizeof( unsigned char), 29u), _tag_arr(
! _temp2897, sizeof( void*), 0u));});}{ int _temp2900; void* _temp2902; struct Cyc_Absyn_Tqual
! _temp2904; struct Cyc_Core_Opt* _temp2906; struct Cyc_Absyn_VarargInfo _temp2898=*((
! struct Cyc_Absyn_VarargInfo*) _check_null( _temp2680)); _LL2907: _temp2906=
! _temp2898.name; goto _LL2905; _LL2905: _temp2904= _temp2898.tq; goto _LL2903;
! _LL2903: _temp2902=( void*) _temp2898.type; goto _LL2901; _LL2901: _temp2900=
! _temp2898.inject; goto _LL2899; _LL2899: _temp2896= Cyc_Tcutil_i_check_valid_type(
! loc, te, _temp2896,( void*) Cyc_Absyn_MemKind, _temp2902); if( _temp2900){ void*
! _temp2908= Cyc_Tcutil_compress( _temp2902); struct Cyc_Absyn_TunionInfo
! _temp2914; void* _temp2916; void* _temp2918; _LL2910: if(( unsigned int)
! _temp2908 >  4u?*(( int*) _temp2908) ==  Cyc_Absyn_TunionType: 0){ _LL2915:
! _temp2914=(( struct Cyc_Absyn_TunionType_struct*) _temp2908)->f1; _LL2919:
! _temp2918=( void*) _temp2914.tunion_info; if(*(( int*) _temp2918) ==  Cyc_Absyn_KnownTunion){
! goto _LL2917;} else{ goto _LL2912;} _LL2917: _temp2916=( void*) _temp2914.rgn;
! goto _LL2911;} else{ goto _LL2912;} _LL2912: goto _LL2913; _LL2911: goto _LL2909;
! _LL2913:({ void* _temp2920[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("can't inject a non-[x]tunion type",
! sizeof( unsigned char), 34u), _tag_arr( _temp2920, sizeof( void*), 0u));}); goto
! _LL2909; _LL2909:;}}} if( seen_format){ int _temp2921=(( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( _temp2684); if(((( fmt_desc_arg <  0? 1: fmt_desc_arg > 
! _temp2921)? 1: fmt_arg_start <  0)? 1:( _temp2680 ==  0? fmt_arg_start !=  0: 0))?
! 1:( _temp2680 !=  0? fmt_arg_start !=  _temp2921 +  1: 0)){({ void* _temp2922[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("bad format descriptor", sizeof( unsigned char),
! 22u), _tag_arr( _temp2922, sizeof( void*), 0u));});} else{ void* _temp2925;
! struct _tuple2 _temp2923=*(( struct _tuple2*(*)( struct Cyc_List_List* x, int n))
! Cyc_List_nth)( _temp2684, fmt_desc_arg -  1); _LL2926: _temp2925= _temp2923.f3;
! goto _LL2924; _LL2924:{ void* _temp2927= Cyc_Tcutil_compress( _temp2925); struct
! Cyc_Absyn_PtrInfo _temp2933; struct Cyc_Absyn_Conref* _temp2935; void* _temp2937;
! _LL2929: if(( unsigned int) _temp2927 >  4u?*(( int*) _temp2927) ==  Cyc_Absyn_PointerType:
! 0){ _LL2934: _temp2933=(( struct Cyc_Absyn_PointerType_struct*) _temp2927)->f1;
! _LL2938: _temp2937=( void*) _temp2933.elt_typ; goto _LL2936; _LL2936: _temp2935=
! _temp2933.bounds; goto _LL2930;} else{ goto _LL2931;} _LL2931: goto _LL2932;
! _LL2930:{ struct _tuple8 _temp2940=({ struct _tuple8 _temp2939; _temp2939.f1=
! Cyc_Tcutil_compress( _temp2937); _temp2939.f2= Cyc_Absyn_conref_def(( void*) Cyc_Absyn_Unknown_b,
! _temp2935); _temp2939;}); void* _temp2946; void* _temp2948; void* _temp2950;
! void* _temp2952; _LL2942: _LL2949: _temp2948= _temp2940.f1; if(( unsigned int)
! _temp2948 >  4u?*(( int*) _temp2948) ==  Cyc_Absyn_IntType: 0){ _LL2953:
! _temp2952=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2948)->f1; if(
! _temp2952 == ( void*) Cyc_Absyn_Unsigned){ goto _LL2951;} else{ goto _LL2944;}
! _LL2951: _temp2950=( void*)(( struct Cyc_Absyn_IntType_struct*) _temp2948)->f2;
! if( _temp2950 == ( void*) Cyc_Absyn_B1){ goto _LL2947;} else{ goto _LL2944;}}
! else{ goto _LL2944;} _LL2947: _temp2946= _temp2940.f2; if( _temp2946 == ( void*)
! Cyc_Absyn_Unknown_b){ goto _LL2943;} else{ goto _LL2944;} _LL2944: goto _LL2945;
! _LL2943: goto _LL2941; _LL2945:({ void* _temp2954[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("format descriptor is not a char ? type", sizeof( unsigned char), 39u),
! _tag_arr( _temp2954, sizeof( void*), 0u));}); goto _LL2941; _LL2941:;} goto
! _LL2928; _LL2932:({ void* _temp2955[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("format descriptor is not a char ? type",
! sizeof( unsigned char), 39u), _tag_arr( _temp2955, sizeof( void*), 0u));}); goto
! _LL2928; _LL2928:;} if( fmt_arg_start !=  0){ void* _temp2956= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Absyn_VarargInfo*) _check_null( _temp2680))->type); int
! problem;{ void* _temp2957= ft; _LL2959: if( _temp2957 == ( void*) Cyc_Absyn_Printf_ft){
! goto _LL2960;} else{ goto _LL2961;} _LL2961: if( _temp2957 == ( void*) Cyc_Absyn_Scanf_ft){
! goto _LL2962;} else{ goto _LL2958;} _LL2960:{ void* _temp2963= _temp2956; struct
! Cyc_Absyn_TunionInfo _temp2969; void* _temp2971; struct Cyc_Absyn_Tuniondecl*
! _temp2973; _LL2965: if(( unsigned int) _temp2963 >  4u?*(( int*) _temp2963) == 
! Cyc_Absyn_TunionType: 0){ _LL2970: _temp2969=(( struct Cyc_Absyn_TunionType_struct*)
! _temp2963)->f1; _LL2972: _temp2971=( void*) _temp2969.tunion_info; if(*(( int*)
! _temp2971) ==  Cyc_Absyn_KnownTunion){ _LL2974: _temp2973=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp2971)->f1; goto _LL2966;} else{ goto _LL2967;}} else{ goto _LL2967;}
! _LL2967: goto _LL2968; _LL2966: problem= Cyc_Absyn_qvar_cmp( _temp2973->name,
! Cyc_Absyn_tunion_print_arg_qvar) !=  0; goto _LL2964; _LL2968: problem= 1; goto
! _LL2964; _LL2964:;} goto _LL2958; _LL2962:{ void* _temp2975= _temp2956; struct
! Cyc_Absyn_TunionInfo _temp2981; void* _temp2983; struct Cyc_Absyn_Tuniondecl*
! _temp2985; _LL2977: if(( unsigned int) _temp2975 >  4u?*(( int*) _temp2975) == 
! Cyc_Absyn_TunionType: 0){ _LL2982: _temp2981=(( struct Cyc_Absyn_TunionType_struct*)
! _temp2975)->f1; _LL2984: _temp2983=( void*) _temp2981.tunion_info; if(*(( int*)
! _temp2983) ==  Cyc_Absyn_KnownTunion){ _LL2986: _temp2985=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp2983)->f1; goto _LL2978;} else{ goto _LL2979;}} else{ goto _LL2979;}
! _LL2979: goto _LL2980; _LL2978: problem= Cyc_Absyn_qvar_cmp( _temp2985->name,
! Cyc_Absyn_tunion_scanf_arg_qvar) !=  0; goto _LL2976; _LL2980: problem= 1; goto
! _LL2976; _LL2976:;} goto _LL2958; _LL2958:;} if( problem){({ void* _temp2987[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("format attribute and vararg types don't match",
! sizeof( unsigned char), 46u), _tag_arr( _temp2987, sizeof( void*), 0u));});}}}}{
! struct Cyc_List_List* rpo= _temp2678; for( 0; rpo !=  0; rpo=(( struct Cyc_List_List*)
! _check_null( rpo))->tl){ struct _tuple8 _temp2990; void* _temp2991; void*
! _temp2993; struct _tuple8* _temp2988=( struct _tuple8*)(( struct Cyc_List_List*)
! _check_null( rpo))->hd; _temp2990=* _temp2988; _LL2994: _temp2993= _temp2990.f1;
! goto _LL2992; _LL2992: _temp2991= _temp2990.f2; goto _LL2989; _LL2989: _temp2896=
! Cyc_Tcutil_i_check_valid_type( loc, te, _temp2896,( void*) Cyc_Absyn_RgnKind,
! _temp2993); _temp2896= Cyc_Tcutil_i_check_valid_type( loc, te, _temp2896,( void*)
! Cyc_Absyn_RgnKind, _temp2991);}} if(* _temp2690 !=  0){ _temp2896= Cyc_Tcutil_i_check_valid_type(
! loc, te, _temp2896,( void*) Cyc_Absyn_EffKind,( void*)(( struct Cyc_Core_Opt*)
! _check_null(* _temp2690))->v);} else{ if( cvtenv.generalize_evars){;}{ struct
! Cyc_List_List* effect= 0;{ struct Cyc_List_List* tvs= _temp2896.free_vars; for(
  0; tvs !=  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ void*
! _temp2995=( void*)( Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( tvs))->hd)->kind))->v; void* _temp3003; void*
! _temp3005; _LL2997: if(( unsigned int) _temp2995 >  1u?*(( int*) _temp2995) == 
! Cyc_Absyn_Eq_constr: 0){ _LL3004: _temp3003=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp2995)->f1; if( _temp3003 == ( void*) Cyc_Absyn_RgnKind){ goto _LL2998;}
! else{ goto _LL2999;}} else{ goto _LL2999;} _LL2999: if(( unsigned int) _temp2995
! >  1u?*(( int*) _temp2995) ==  Cyc_Absyn_Eq_constr: 0){ _LL3006: _temp3005=(
! void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp2995)->f1; if( _temp3005 == (
! void*) Cyc_Absyn_EffKind){ goto _LL3000;} else{ goto _LL3001;}} else{ goto
! _LL3001;} _LL3001: goto _LL3002; _LL2998: effect=({ struct Cyc_List_List*
! _temp3007=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp3007->hd=( void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp3008=(
  struct Cyc_Absyn_AccessEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct));
! _temp3008[ 0]=({ struct Cyc_Absyn_AccessEff_struct _temp3009; _temp3009.tag= Cyc_Absyn_AccessEff;
! _temp3009.f1=( void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp3010=(
  struct Cyc_Absyn_VarType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct));
! _temp3010[ 0]=({ struct Cyc_Absyn_VarType_struct _temp3011; _temp3011.tag= Cyc_Absyn_VarType;
! _temp3011.f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd;
! _temp3011;}); _temp3010;})); _temp3009;}); _temp3008;})); _temp3007->tl= effect;
! _temp3007;}); goto _LL2996; _LL3000: effect=({ struct Cyc_List_List* _temp3012=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3012->hd=(
! void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp3013=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp3013[ 0]=({ struct
! Cyc_Absyn_VarType_struct _temp3014; _temp3014.tag= Cyc_Absyn_VarType; _temp3014.f1=(
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd;
! _temp3014;}); _temp3013;})); _temp3012->tl= effect; _temp3012;}); goto _LL2996;
! _LL3002: effect=({ struct Cyc_List_List* _temp3015=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3015->hd=( void*)(( void*)({
! struct Cyc_Absyn_RgnsEff_struct* _temp3016=( struct Cyc_Absyn_RgnsEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct)); _temp3016[ 0]=({ struct
! Cyc_Absyn_RgnsEff_struct _temp3017; _temp3017.tag= Cyc_Absyn_RgnsEff; _temp3017.f1=(
! void*)(( void*)({ struct Cyc_Absyn_VarType_struct* _temp3018=( struct Cyc_Absyn_VarType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_VarType_struct)); _temp3018[ 0]=({ struct
! Cyc_Absyn_VarType_struct _temp3019; _temp3019.tag= Cyc_Absyn_VarType; _temp3019.f1=(
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd;
! _temp3019;}); _temp3018;})); _temp3017;}); _temp3016;})); _temp3015->tl= effect;
! _temp3015;}); goto _LL2996; _LL2996:;}} effect= Cyc_List_imp_rev( effect);{
! struct Cyc_List_List* ts= _temp2896.free_evars; for( 0; ts !=  0; ts=(( struct
! Cyc_List_List*) _check_null( ts))->tl){ void* _temp3020= Cyc_Tcutil_typ_kind((
! void*)(( struct Cyc_List_List*) _check_null( ts))->hd); _LL3022: if( _temp3020
! == ( void*) Cyc_Absyn_RgnKind){ goto _LL3023;} else{ goto _LL3024;} _LL3024: if(
! _temp3020 == ( void*) Cyc_Absyn_EffKind){ goto _LL3025;} else{ goto _LL3026;}
! _LL3026: goto _LL3027; _LL3023: effect=({ struct Cyc_List_List* _temp3028=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3028->hd=(
! void*)(( void*)({ struct Cyc_Absyn_AccessEff_struct* _temp3029=( struct Cyc_Absyn_AccessEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_AccessEff_struct)); _temp3029[ 0]=({ struct
! Cyc_Absyn_AccessEff_struct _temp3030; _temp3030.tag= Cyc_Absyn_AccessEff;
! _temp3030.f1=( void*)(( void*)(( struct Cyc_List_List*) _check_null( ts))->hd);
! _temp3030;}); _temp3029;})); _temp3028->tl= effect; _temp3028;}); goto _LL3021;
! _LL3025: effect=({ struct Cyc_List_List* _temp3031=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3031->hd=( void*)(( void*)((
! struct Cyc_List_List*) _check_null( ts))->hd); _temp3031->tl= effect; _temp3031;});
! goto _LL3021; _LL3027: effect=({ struct Cyc_List_List* _temp3032=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3032->hd=( void*)(( void*)({
! struct Cyc_Absyn_RgnsEff_struct* _temp3033=( struct Cyc_Absyn_RgnsEff_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_RgnsEff_struct)); _temp3033[ 0]=({ struct
! Cyc_Absyn_RgnsEff_struct _temp3034; _temp3034.tag= Cyc_Absyn_RgnsEff; _temp3034.f1=(
! void*)(( void*)(( struct Cyc_List_List*) _check_null( ts))->hd); _temp3034;});
! _temp3033;})); _temp3032->tl= effect; _temp3032;}); goto _LL3021; _LL3021:;}}*
! _temp2690=({ struct Cyc_Core_Opt* _temp3035=( struct Cyc_Core_Opt*) _cycalloc(
! sizeof( struct Cyc_Core_Opt)); _temp3035->v=( void*)(( void*)({ struct Cyc_Absyn_JoinEff_struct*
! _temp3036=( struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp3036[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp3037; _temp3037.tag= Cyc_Absyn_JoinEff;
! _temp3037.f1= Cyc_List_imp_rev( effect); _temp3037;}); _temp3036;})); _temp3035;});}}
! if(* _temp2693 !=  0){ struct Cyc_List_List* bs=* _temp2693; for( 0; bs !=  0;
  bs=(( struct Cyc_List_List*) _check_null( bs))->tl){ struct Cyc_Absyn_Conref*
! _temp3038= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( bs))->hd)->kind); void* _temp3039=( void*) _temp3038->v; void*
! _temp3047; _LL3041: if( _temp3039 == ( void*) Cyc_Absyn_No_constr){ goto _LL3042;}
! else{ goto _LL3043;} _LL3043: if(( unsigned int) _temp3039 >  1u?*(( int*)
! _temp3039) ==  Cyc_Absyn_Eq_constr: 0){ _LL3048: _temp3047=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3039)->f1; if( _temp3047 == ( void*) Cyc_Absyn_MemKind){ goto _LL3044;}
! else{ goto _LL3045;}} else{ goto _LL3045;} _LL3045: goto _LL3046; _LL3042:({
! struct Cyc_Std_String_pa_struct _temp3050; _temp3050.tag= Cyc_Std_String_pa;
! _temp3050.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( bs))->hd)->name;{ void* _temp3049[ 1u]={& _temp3050}; Cyc_Tcutil_warn(
  loc, _tag_arr("Type variable %s unconstrained, assuming boxed", sizeof(
! unsigned char), 47u), _tag_arr( _temp3049, sizeof( void*), 1u));}}); goto
! _LL3044; _LL3044:( void*)( _temp3038->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp3051=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp3051[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp3052; _temp3052.tag= Cyc_Absyn_Eq_constr;
! _temp3052.f1=( void*)(( void*) Cyc_Absyn_BoxKind); _temp3052;}); _temp3051;})));
! goto _LL3040; _LL3046: goto _LL3040; _LL3040:;}} cvtenv.kind_env= Cyc_Tcutil_remove_bound_tvars(
! _temp2896.kind_env,* _temp2693); _temp2896.free_vars= Cyc_Tcutil_remove_bound_tvars(
! _temp2896.free_vars,* _temp2693);{ struct Cyc_List_List* tvs= _temp2896.free_vars;
  for( 0; tvs !=  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ cvtenv.free_vars=
  Cyc_Tcutil_fast_add_free_tvar( cvtenv.free_vars,( struct Cyc_Absyn_Tvar*)((
  struct Cyc_List_List*) _check_null( tvs))->hd);}}{ struct Cyc_List_List* evs=
! _temp2896.free_evars; for( 0; evs !=  0; evs=(( struct Cyc_List_List*)
  _check_null( evs))->tl){ cvtenv.free_evars= Cyc_Tcutil_add_free_evar( cvtenv.free_evars,(
! void*)(( struct Cyc_List_List*) _check_null( evs))->hd);}} goto _LL2580;}}
! _LL2606: for( 0; _temp2694 !=  0; _temp2694=(( struct Cyc_List_List*)
! _check_null( _temp2694))->tl){ cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te,
  cvtenv,( void*) Cyc_Absyn_MemKind,(*(( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp2694))->hd)).f2);} goto _LL2580; _LL2608:{ struct
! _RegionHandle _temp3054= _new_region(); struct _RegionHandle* sprev_rgn=&
! _temp3054; _push_region( sprev_rgn);{ struct Cyc_List_List* prev_fields= 0; for(
! 0; _temp2696 !=  0; _temp2696=(( struct Cyc_List_List*) _check_null( _temp2696))->tl){
! struct Cyc_Absyn_Structfield _temp3057; struct Cyc_List_List* _temp3058; struct
! Cyc_Absyn_Exp* _temp3060; void* _temp3062; struct Cyc_Absyn_Tqual _temp3064;
! struct _tagged_arr* _temp3066; struct Cyc_Absyn_Structfield* _temp3055=( struct
! Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( _temp2696))->hd;
! _temp3057=* _temp3055; _LL3067: _temp3066= _temp3057.name; goto _LL3065; _LL3065:
! _temp3064= _temp3057.tq; goto _LL3063; _LL3063: _temp3062=( void*) _temp3057.type;
! goto _LL3061; _LL3061: _temp3060= _temp3057.width; goto _LL3059; _LL3059:
! _temp3058= _temp3057.attributes; goto _LL3056; _LL3056: if((( int(*)( int(*
  compare)( struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l,
  struct _tagged_arr* x)) Cyc_List_mem)( Cyc_Std_zstrptrcmp, prev_fields,
! _temp3066)){({ struct Cyc_Std_String_pa_struct _temp3069; _temp3069.tag= Cyc_Std_String_pa;
! _temp3069.f1=( struct _tagged_arr)* _temp3066;{ void* _temp3068[ 1u]={&
! _temp3069}; Cyc_Tcutil_terr( loc, _tag_arr("duplicate field %s in struct",
! sizeof( unsigned char), 29u), _tag_arr( _temp3068, sizeof( void*), 1u));}});}
! if( Cyc_Std_strcmp(* _temp3066, _tag_arr("", sizeof( unsigned char), 1u)) !=  0){
! prev_fields=({ struct Cyc_List_List* _temp3070=( struct Cyc_List_List*)
! _region_malloc( sprev_rgn, sizeof( struct Cyc_List_List)); _temp3070->hd=( void*)
! _temp3066; _temp3070->tl= prev_fields; _temp3070;});} cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_MemKind, _temp3062); Cyc_Tcutil_check_bitfield(
! loc, te, _temp3062, _temp3060, _temp3066); Cyc_Tcutil_check_field_atts( loc,
! _temp3066, _temp3058);}}; _pop_region( sprev_rgn);} goto _LL2580; _LL2610:{
! struct _RegionHandle _temp3071= _new_region(); struct _RegionHandle* uprev_rgn=&
! _temp3071; _push_region( uprev_rgn);{ struct Cyc_List_List* prev_fields= 0; for(
! 0; _temp2698 !=  0; _temp2698=(( struct Cyc_List_List*) _check_null( _temp2698))->tl){
! struct Cyc_Absyn_Structfield _temp3074; struct Cyc_List_List* _temp3075; struct
! Cyc_Absyn_Exp* _temp3077; void* _temp3079; struct Cyc_Absyn_Tqual _temp3081;
! struct _tagged_arr* _temp3083; struct Cyc_Absyn_Structfield* _temp3072=( struct
! Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( _temp2698))->hd;
! _temp3074=* _temp3072; _LL3084: _temp3083= _temp3074.name; goto _LL3082; _LL3082:
! _temp3081= _temp3074.tq; goto _LL3080; _LL3080: _temp3079=( void*) _temp3074.type;
! goto _LL3078; _LL3078: _temp3077= _temp3074.width; goto _LL3076; _LL3076:
! _temp3075= _temp3074.attributes; goto _LL3073; _LL3073: if((( int(*)( int(*
  compare)( struct _tagged_arr*, struct _tagged_arr*), struct Cyc_List_List* l,
  struct _tagged_arr* x)) Cyc_List_mem)( Cyc_Std_zstrptrcmp, prev_fields,
! _temp3083)){({ struct Cyc_Std_String_pa_struct _temp3086; _temp3086.tag= Cyc_Std_String_pa;
! _temp3086.f1=( struct _tagged_arr)* _temp3083;{ void* _temp3085[ 1u]={&
! _temp3086}; Cyc_Tcutil_terr( loc, _tag_arr("duplicate field %s in struct",
! sizeof( unsigned char), 29u), _tag_arr( _temp3085, sizeof( void*), 1u));}});}
! if( Cyc_Std_strcmp(* _temp3083, _tag_arr("", sizeof( unsigned char), 1u)) !=  0){
! prev_fields=({ struct Cyc_List_List* _temp3087=( struct Cyc_List_List*)
! _region_malloc( uprev_rgn, sizeof( struct Cyc_List_List)); _temp3087->hd=( void*)
! _temp3083; _temp3087->tl= prev_fields; _temp3087;});} cvtenv= Cyc_Tcutil_i_check_valid_type(
! loc, te, cvtenv,( void*) Cyc_Absyn_MemKind, _temp3079); if( ! Cyc_Tcutil_bits_only(
! _temp3079)){({ struct Cyc_Std_String_pa_struct _temp3089; _temp3089.tag= Cyc_Std_String_pa;
! _temp3089.f1=( struct _tagged_arr)* _temp3083;{ void* _temp3088[ 1u]={&
! _temp3089}; Cyc_Tcutil_terr( loc, _tag_arr("%s has a type that is possibly incompatible with other members of union",
! sizeof( unsigned char), 72u), _tag_arr( _temp3088, sizeof( void*), 1u));}});}
! Cyc_Tcutil_check_bitfield( loc, te, _temp3079, _temp3077, _temp3083); Cyc_Tcutil_check_field_atts(
! loc, _temp3083, _temp3075);}}; _pop_region( uprev_rgn);} goto _LL2580; _LL2612:
! if( _temp2705 ==  0){ if(* _temp2702 ==  0){({ void* _temp3090[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("bad anonymous struct", sizeof( unsigned char), 21u), _tag_arr(
! _temp3090, sizeof( void*), 0u));}); return cvtenv;}{ struct Cyc_Absyn_Structdecl*
! sd=*(( struct Cyc_Absyn_Structdecl**) _check_null(* _temp2702));;}} if(*
! _temp2702 ==  0){ struct _handler_cons _temp3091; _push_handler(& _temp3091);{
! int _temp3093= 0; if( setjmp( _temp3091.handler)){ _temp3093= 1;} if( !
! _temp3093){* _temp2702=( struct Cyc_Absyn_Structdecl**) Cyc_Tcenv_lookup_structdecl(
! te, loc,( struct _tuple1*) _check_null( _temp2705));; _pop_handler();} else{
! void* _temp3092=( void*) _exn_thrown; void* _temp3095= _temp3092; _LL3097: if(
! _temp3095 ==  Cyc_Dict_Absent){ goto _LL3098;} else{ goto _LL3099;} _LL3099:
! goto _LL3100; _LL3098:({ struct Cyc_Std_String_pa_struct _temp3102; _temp3102.tag=
! Cyc_Std_String_pa; _temp3102.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string((
! struct _tuple1*) _check_null( _temp2705));{ void* _temp3101[ 1u]={& _temp3102};
  Cyc_Tcutil_terr( loc, _tag_arr("unbound type struct %s", sizeof( unsigned char),
! 23u), _tag_arr( _temp3101, sizeof( void*), 1u));}}); return cvtenv; _LL3100:(
! void) _throw( _temp3095); _LL3096:;}}}{ struct Cyc_Absyn_Structdecl* sd=*((
! struct Cyc_Absyn_Structdecl**) _check_null(* _temp2702)); if( sd->name !=  0){*((
! struct _tuple1*) _check_null( _temp2705))=(( struct _tuple1*)(( struct Cyc_Core_Opt*)
  _check_null( sd->name))->v)[ _check_known_subscript_notnull( 1u, 0)];}{ struct
  Cyc_List_List* tvs= sd->tvs; int lvs=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! tvs); int largs= Cyc_List_length( _temp2703); if( lvs !=  largs){({ struct Cyc_Std_Int_pa_struct
! _temp3106; _temp3106.tag= Cyc_Std_Int_pa; _temp3106.f1=( int)(( unsigned int)
! largs);{ struct Cyc_Std_Int_pa_struct _temp3105; _temp3105.tag= Cyc_Std_Int_pa;
! _temp3105.f1=( int)(( unsigned int) lvs);{ struct Cyc_Std_String_pa_struct
! _temp3104; _temp3104.tag= Cyc_Std_String_pa; _temp3104.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp2705));{ void*
! _temp3103[ 3u]={& _temp3104,& _temp3105,& _temp3106}; Cyc_Tcutil_terr( loc,
  _tag_arr("struct %s expects %d type arguments but was given %d", sizeof(
! unsigned char), 53u), _tag_arr( _temp3103, sizeof( void*), 3u));}}}});} for( 0;
! _temp2703 !=  0;( _temp2703=(( struct Cyc_List_List*) _check_null( _temp2703))->tl,
  tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void* t1=( void*)((
! struct Cyc_List_List*) _check_null( _temp2703))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} goto _LL2580;}}
! _LL2614: if( _temp2712 ==  0){({ void* _temp3107[ 0u]={}; Cyc_Tcutil_terr( loc,
! _tag_arr("missing union name", sizeof( unsigned char), 19u), _tag_arr( _temp3107,
! sizeof( void*), 0u));}); return cvtenv;} if(* _temp2709 ==  0){ struct
! _handler_cons _temp3108; _push_handler(& _temp3108);{ int _temp3110= 0; if(
! setjmp( _temp3108.handler)){ _temp3110= 1;} if( ! _temp3110){* _temp2709=(
  struct Cyc_Absyn_Uniondecl**) Cyc_Tcenv_lookup_uniondecl( te, loc,( struct
! _tuple1*) _check_null( _temp2712));; _pop_handler();} else{ void* _temp3109=(
! void*) _exn_thrown; void* _temp3112= _temp3109; _LL3114: if( _temp3112 ==  Cyc_Dict_Absent){
! goto _LL3115;} else{ goto _LL3116;} _LL3116: goto _LL3117; _LL3115:({ struct Cyc_Std_String_pa_struct
! _temp3119; _temp3119.tag= Cyc_Std_String_pa; _temp3119.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string(( struct _tuple1*) _check_null( _temp2712));{ void*
! _temp3118[ 1u]={& _temp3119}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type union %s",
! sizeof( unsigned char), 22u), _tag_arr( _temp3118, sizeof( void*), 1u));}});
! return cvtenv; _LL3117:( void) _throw( _temp3112); _LL3113:;}}}{ struct Cyc_Absyn_Uniondecl*
! ud=*(( struct Cyc_Absyn_Uniondecl**) _check_null(* _temp2709)); if( ud->name != 
! 0){*(( struct _tuple1*) _check_null( _temp2712))=(( struct _tuple1*)(( struct
  Cyc_Core_Opt*) _check_null( ud->name))->v)[ _check_known_subscript_notnull( 1u,
  0)];}{ struct Cyc_List_List* tvs= ud->tvs; int lvs=(( int(*)( struct Cyc_List_List*
! x)) Cyc_List_length)( tvs); int largs= Cyc_List_length( _temp2710); if( lvs != 
! largs){({ struct Cyc_Std_Int_pa_struct _temp3123; _temp3123.tag= Cyc_Std_Int_pa;
! _temp3123.f1=( int)(( unsigned int) largs);{ struct Cyc_Std_Int_pa_struct
! _temp3122; _temp3122.tag= Cyc_Std_Int_pa; _temp3122.f1=( int)(( unsigned int)
! lvs);{ struct Cyc_Std_String_pa_struct _temp3121; _temp3121.tag= Cyc_Std_String_pa;
! _temp3121.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string(( struct _tuple1*)
! _check_null( _temp2712));{ void* _temp3120[ 3u]={& _temp3121,& _temp3122,&
! _temp3123}; Cyc_Tcutil_terr( loc, _tag_arr("union %s expects %d type arguments but was given %d",
! sizeof( unsigned char), 52u), _tag_arr( _temp3120, sizeof( void*), 3u));}}}});}
! for( 0; _temp2710 !=  0;( _temp2710=(( struct Cyc_List_List*) _check_null(
! _temp2710))->tl, tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl)){ void*
! t1=( void*)(( struct Cyc_List_List*) _check_null( _temp2710))->hd; void* k1= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
! cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k1, t1);} goto _LL2580;}}
! _LL2616: { struct Cyc_Absyn_Typedefdecl* td;{ struct _handler_cons _temp3124;
! _push_handler(& _temp3124);{ int _temp3126= 0; if( setjmp( _temp3124.handler)){
! _temp3126= 1;} if( ! _temp3126){ td= Cyc_Tcenv_lookup_typedefdecl( te, loc,
! _temp2719);; _pop_handler();} else{ void* _temp3125=( void*) _exn_thrown; void*
! _temp3128= _temp3125; _LL3130: if( _temp3128 ==  Cyc_Dict_Absent){ goto _LL3131;}
! else{ goto _LL3132;} _LL3132: goto _LL3133; _LL3131:({ struct Cyc_Std_String_pa_struct
! _temp3135; _temp3135.tag= Cyc_Std_String_pa; _temp3135.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2719);{ void* _temp3134[ 1u]={& _temp3135}; Cyc_Tcutil_terr(
  loc, _tag_arr("unbound typedef name %s", sizeof( unsigned char), 24u), _tag_arr(
! _temp3134, sizeof( void*), 1u));}}); return cvtenv; _LL3133:( void) _throw(
! _temp3128); _LL3129:;}}} _temp2719[ _check_known_subscript_notnull( 1u, 0)]=( td->name)[
  _check_known_subscript_notnull( 1u, 0)];{ struct Cyc_List_List* tvs= td->tvs;
! struct Cyc_List_List* ts= _temp2717; struct Cyc_List_List* inst= 0; for( 0; ts
  !=  0? tvs !=  0: 0;( ts=(( struct Cyc_List_List*) _check_null( ts))->tl, tvs=((
  struct Cyc_List_List*) _check_null( tvs))->tl)){ void* k= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv, k,( void*)(( struct Cyc_List_List*)
! _check_null( ts))->hd); inst=({ struct Cyc_List_List* _temp3136=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3136->hd=( void*)({ struct
! _tuple5* _temp3137=( struct _tuple5*) _cycalloc( sizeof( struct _tuple5));
! _temp3137->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! tvs))->hd; _temp3137->f2=( void*)(( struct Cyc_List_List*) _check_null( ts))->hd;
! _temp3137;}); _temp3136->tl= inst; _temp3136;});} if( ts !=  0){({ struct Cyc_Std_String_pa_struct
! _temp3139; _temp3139.tag= Cyc_Std_String_pa; _temp3139.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp2719);{ void* _temp3138[ 1u]={& _temp3139}; Cyc_Tcutil_terr(
  loc, _tag_arr("too many parameters for typedef %s", sizeof( unsigned char), 35u),
! _tag_arr( _temp3138, sizeof( void*), 1u));}});} if( tvs !=  0){ for( 0; tvs != 
  0; tvs=(( struct Cyc_List_List*) _check_null( tvs))->tl){ void* k= Cyc_Absyn_conref_val(((
  struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( tvs))->hd)->kind);
  void* e= Cyc_Absyn_new_evar( 0, 0); cvtenv= Cyc_Tcutil_i_check_valid_type( loc,
! te, cvtenv, k, e); inst=({ struct Cyc_List_List* _temp3140=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp3140->hd=( void*)({ struct
! _tuple5* _temp3141=( struct _tuple5*) _cycalloc( sizeof( struct _tuple5));
! _temp3141->f1=( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null(
! tvs))->hd; _temp3141->f2= e; _temp3141;}); _temp3140->tl= inst; _temp3140;});}}{
! void* new_typ= Cyc_Tcutil_substitute( inst,( void*) td->defn);* _temp2716=({
! struct Cyc_Core_Opt* _temp3142=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp3142->v=( void*) new_typ; _temp3142;}); goto _LL2580;}}}
! _LL2618: goto _LL2580; _LL2620: _temp2723= _temp2721; goto _LL2622; _LL2622:
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_RgnKind,
! _temp2723); goto _LL2580; _LL2624: cvtenv= Cyc_Tcutil_i_check_valid_type( loc,
! te, cvtenv,( void*) Cyc_Absyn_AnyKind, _temp2725); goto _LL2580; _LL2626: for( 0;
! _temp2727 !=  0; _temp2727=(( struct Cyc_List_List*) _check_null( _temp2727))->tl){
  cvtenv= Cyc_Tcutil_i_check_valid_type( loc, te, cvtenv,( void*) Cyc_Absyn_EffKind,(
! void*)(( struct Cyc_List_List*) _check_null( _temp2727))->hd);} goto _LL2580;
! _LL2580:;} if( ! Cyc_Tcutil_kind_leq( Cyc_Tcutil_typ_kind( t), expected_kind)){({
! struct Cyc_Std_String_pa_struct _temp3146; _temp3146.tag= Cyc_Std_String_pa;
! _temp3146.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( expected_kind);{
! struct Cyc_Std_String_pa_struct _temp3145; _temp3145.tag= Cyc_Std_String_pa;
! _temp3145.f1=( struct _tagged_arr) Cyc_Absynpp_kind2string( Cyc_Tcutil_typ_kind(
! t));{ struct Cyc_Std_String_pa_struct _temp3144; _temp3144.tag= Cyc_Std_String_pa;
! _temp3144.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp3143[
! 3u]={& _temp3144,& _temp3145,& _temp3146}; Cyc_Tcutil_terr( loc, _tag_arr("type %s has kind %s but as used here needs kind %s",
! sizeof( unsigned char), 51u), _tag_arr( _temp3143, sizeof( void*), 3u));}}}});}
  return cvtenv;} static struct Cyc_Tcutil_CVTEnv Cyc_Tcutil_check_valid_type(
  struct Cyc_Position_Segment* loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List*
  kind_env, void* expected_kind, int generalize_evars, void* t){ struct Cyc_Tcutil_CVTEnv
! _temp3147= Cyc_Tcutil_i_check_valid_type( loc, te,({ struct Cyc_Tcutil_CVTEnv
! _temp3162; _temp3162.kind_env= kind_env; _temp3162.free_vars= 0; _temp3162.free_evars=
! 0; _temp3162.generalize_evars= generalize_evars; _temp3162.fn_result= 0;
! _temp3162;}), expected_kind, t);{ struct Cyc_List_List* vs= _temp3147.free_vars;
! for( 0; vs !=  0; vs=(( struct Cyc_List_List*) _check_null( vs))->tl){ _temp3147.kind_env=
  Cyc_Tcutil_fast_add_free_tvar( kind_env,( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( vs))->hd);}}{ struct Cyc_List_List* evs= _temp3147.free_evars; for(
  0; evs !=  0; evs=(( struct Cyc_List_List*) _check_null( evs))->tl){ void*
! _temp3148= Cyc_Tcutil_compress(( void*)(( struct Cyc_List_List*) _check_null(
! evs))->hd); struct Cyc_Core_Opt* _temp3154; struct Cyc_Core_Opt** _temp3156;
! _LL3150: if(( unsigned int) _temp3148 >  4u?*(( int*) _temp3148) ==  Cyc_Absyn_Evar:
! 0){ _LL3155: _temp3154=(( struct Cyc_Absyn_Evar_struct*) _temp3148)->f4;
! _temp3156=( struct Cyc_Core_Opt**)&(( struct Cyc_Absyn_Evar_struct*) _temp3148)->f4;
! goto _LL3151;} else{ goto _LL3152;} _LL3152: goto _LL3153; _LL3151: if(*
! _temp3156 ==  0){* _temp3156=({ struct Cyc_Core_Opt* _temp3157=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp3157->v=( void*) kind_env;
! _temp3157;});} else{ struct Cyc_List_List* _temp3158=( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null(* _temp3156))->v; struct Cyc_List_List*
! _temp3159= 0; for( 0; _temp3158 !=  0; _temp3158=(( struct Cyc_List_List*)
! _check_null( _temp3158))->tl){ if((( int(*)( int(* compare)( struct Cyc_Absyn_Tvar*,
  struct Cyc_Absyn_Tvar*), struct Cyc_List_List* l, struct Cyc_Absyn_Tvar* x)) Cyc_List_mem)(
  Cyc_Tcutil_fast_tvar_cmp, kind_env,( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( _temp3158))->hd)){ _temp3159=({ struct Cyc_List_List* _temp3160=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3160->hd=(
! void*)(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( _temp3158))->hd);
! _temp3160->tl= _temp3159; _temp3160;});}}* _temp3156=({ struct Cyc_Core_Opt*
! _temp3161=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp3161->v=( void*) _temp3159; _temp3161;});} goto _LL3149; _LL3153: goto
! _LL3149; _LL3149:;}} return _temp3147;} void Cyc_Tcutil_check_valid_toplevel_type(
  struct Cyc_Position_Segment* loc, struct Cyc_Tcenv_Tenv* te, void* t){ int
  generalize_evars= Cyc_Tcutil_is_function_type( t); struct Cyc_Tcutil_CVTEnv
! _temp3163= Cyc_Tcutil_check_valid_type( loc, te, 0,( void*) Cyc_Absyn_MemKind,
! generalize_evars, t); struct Cyc_List_List* _temp3164= _temp3163.free_vars;
! struct Cyc_List_List* _temp3165= _temp3163.free_evars;{ struct Cyc_List_List* x=
! _temp3164; for( 0; x !=  0; x=(( struct Cyc_List_List*) _check_null( x))->tl){
  struct Cyc_Absyn_Conref* c= Cyc_Absyn_compress_conref((( struct Cyc_Absyn_Tvar*)((
! struct Cyc_List_List*) _check_null( x))->hd)->kind); void* _temp3166=( void*) c->v;
! void* _temp3174; _LL3168: if( _temp3166 == ( void*) Cyc_Absyn_No_constr){ goto
! _LL3169;} else{ goto _LL3170;} _LL3170: if(( unsigned int) _temp3166 >  1u?*((
! int*) _temp3166) ==  Cyc_Absyn_Eq_constr: 0){ _LL3175: _temp3174=( void*)((
! struct Cyc_Absyn_Eq_constr_struct*) _temp3166)->f1; if( _temp3174 == ( void*)
! Cyc_Absyn_MemKind){ goto _LL3171;} else{ goto _LL3172;}} else{ goto _LL3172;}
! _LL3172: goto _LL3173; _LL3169: goto _LL3171; _LL3171:( void*)( c->v=( void*)((
! void*)({ struct Cyc_Absyn_Eq_constr_struct* _temp3176=( struct Cyc_Absyn_Eq_constr_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct)); _temp3176[ 0]=({ struct
! Cyc_Absyn_Eq_constr_struct _temp3177; _temp3177.tag= Cyc_Absyn_Eq_constr;
! _temp3177.f1=( void*)(( void*) Cyc_Absyn_BoxKind); _temp3177;}); _temp3176;})));
! goto _LL3167; _LL3173: goto _LL3167; _LL3167:;}} if( _temp3164 !=  0? 1:
! _temp3165 !=  0){{ void* _temp3178= Cyc_Tcutil_compress( t); struct Cyc_Absyn_FnInfo
! _temp3184; struct Cyc_List_List* _temp3186; struct Cyc_List_List* _temp3188;
! struct Cyc_Absyn_VarargInfo* _temp3190; int _temp3192; struct Cyc_List_List*
! _temp3194; void* _temp3196; struct Cyc_Core_Opt* _temp3198; struct Cyc_List_List*
! _temp3200; struct Cyc_List_List** _temp3202; _LL3180: if(( unsigned int)
! _temp3178 >  4u?*(( int*) _temp3178) ==  Cyc_Absyn_FnType: 0){ _LL3185:
! _temp3184=(( struct Cyc_Absyn_FnType_struct*) _temp3178)->f1; _LL3201: _temp3200=
! _temp3184.tvars; _temp3202=( struct Cyc_List_List**)&((( struct Cyc_Absyn_FnType_struct*)
! _temp3178)->f1).tvars; goto _LL3199; _LL3199: _temp3198= _temp3184.effect; goto
! _LL3197; _LL3197: _temp3196=( void*) _temp3184.ret_typ; goto _LL3195; _LL3195:
! _temp3194= _temp3184.args; goto _LL3193; _LL3193: _temp3192= _temp3184.c_varargs;
! goto _LL3191; _LL3191: _temp3190= _temp3184.cyc_varargs; goto _LL3189; _LL3189:
! _temp3188= _temp3184.rgn_po; goto _LL3187; _LL3187: _temp3186= _temp3184.attributes;
! goto _LL3181;} else{ goto _LL3182;} _LL3182: goto _LL3183; _LL3181: if(*
! _temp3202 ==  0){* _temp3202= _temp3164; _temp3164= 0;} goto _LL3179; _LL3183:
! goto _LL3179; _LL3179:;} if( _temp3164 !=  0){({ struct Cyc_Std_String_pa_struct
! _temp3204; _temp3204.tag= Cyc_Std_String_pa; _temp3204.f1=( struct _tagged_arr)*((
! struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*) _check_null( _temp3164))->hd)->name;{
! void* _temp3203[ 1u]={& _temp3204}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type variable %s",
! sizeof( unsigned char), 25u), _tag_arr( _temp3203, sizeof( void*), 1u));}});}
! if( _temp3165 !=  0){ for( 0; _temp3165 !=  0; _temp3165=(( struct Cyc_List_List*)
! _check_null( _temp3165))->tl){ void* e=( void*)(( struct Cyc_List_List*)
! _check_null( _temp3165))->hd; void* _temp3205= Cyc_Tcutil_typ_kind( e); _LL3207:
! if( _temp3205 == ( void*) Cyc_Absyn_RgnKind){ goto _LL3208;} else{ goto _LL3209;}
! _LL3209: if( _temp3205 == ( void*) Cyc_Absyn_EffKind){ goto _LL3210;} else{ goto
! _LL3211;} _LL3211: goto _LL3212; _LL3208: if( ! Cyc_Tcutil_unify( e,( void*) Cyc_Absyn_HeapRgn)){({
! void* _temp3213[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Tcutil_impos)( _tag_arr("can't unify evar with heap!", sizeof( unsigned char),
! 28u), _tag_arr( _temp3213, sizeof( void*), 0u));});} goto _LL3206; _LL3210: if(
! ! Cyc_Tcutil_unify( e, Cyc_Absyn_empty_effect)){({ void* _temp3214[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("can't unify evar with {}!", sizeof( unsigned char), 26u), _tag_arr(
! _temp3214, sizeof( void*), 0u));});} goto _LL3206; _LL3212:({ struct Cyc_Std_String_pa_struct
! _temp3217; _temp3217.tag= Cyc_Std_String_pa; _temp3217.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( t);{ struct Cyc_Std_String_pa_struct _temp3216;
! _temp3216.tag= Cyc_Std_String_pa; _temp3216.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! e);{ void* _temp3215[ 2u]={& _temp3216,& _temp3217}; Cyc_Tcutil_terr( loc,
  _tag_arr("hidden type variable %s isn't abstracted in type %s", sizeof(
! unsigned char), 52u), _tag_arr( _temp3215, sizeof( void*), 2u));}}}); goto
! _LL3206; _LL3206:;}}}} void Cyc_Tcutil_check_fndecl_valid_type( struct Cyc_Position_Segment*
  loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Fndecl* fd){ void* t= Cyc_Tcutil_fndecl2typ(
! fd); Cyc_Tcutil_check_valid_toplevel_type( loc, te, t);{ void* _temp3218= Cyc_Tcutil_compress(
! t); struct Cyc_Absyn_FnInfo _temp3224; struct Cyc_List_List* _temp3226; struct
! Cyc_List_List* _temp3228; struct Cyc_Absyn_VarargInfo* _temp3230; int _temp3232;
! struct Cyc_List_List* _temp3234; void* _temp3236; struct Cyc_Core_Opt* _temp3238;
! struct Cyc_List_List* _temp3240; _LL3220: if(( unsigned int) _temp3218 >  4u?*((
! int*) _temp3218) ==  Cyc_Absyn_FnType: 0){ _LL3225: _temp3224=(( struct Cyc_Absyn_FnType_struct*)
! _temp3218)->f1; _LL3241: _temp3240= _temp3224.tvars; goto _LL3239; _LL3239:
! _temp3238= _temp3224.effect; goto _LL3237; _LL3237: _temp3236=( void*) _temp3224.ret_typ;
! goto _LL3235; _LL3235: _temp3234= _temp3224.args; goto _LL3233; _LL3233:
! _temp3232= _temp3224.c_varargs; goto _LL3231; _LL3231: _temp3230= _temp3224.cyc_varargs;
! goto _LL3229; _LL3229: _temp3228= _temp3224.rgn_po; goto _LL3227; _LL3227:
! _temp3226= _temp3224.attributes; goto _LL3221;} else{ goto _LL3222;} _LL3222:
! goto _LL3223; _LL3221: fd->tvs= _temp3240; fd->effect= _temp3238; goto _LL3219;
! _LL3223:({ void* _temp3242[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("check_fndecl_valid_type: not a FnType",
! sizeof( unsigned char), 38u), _tag_arr( _temp3242, sizeof( void*), 0u));});
! return; _LL3219:;}{ struct _RegionHandle _temp3243= _new_region(); struct
! _RegionHandle* r=& _temp3243; _push_region( r); Cyc_Tcutil_check_unique_vars(((
  struct Cyc_List_List*(*)( struct _RegionHandle*, struct _tagged_arr*(* f)(
  struct _tuple13*), struct Cyc_List_List* x)) Cyc_List_rmap)( r,( struct
  _tagged_arr*(*)( struct _tuple13* t)) Cyc_Tcutil_fst_fdarg, fd->args), loc,
  _tag_arr("function declaration has repeated parameter", sizeof( unsigned char),
! 44u));; _pop_region( r);} fd->cached_typ=({ struct Cyc_Core_Opt* _temp3244=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp3244->v=(
! void*) t; _temp3244;});} void Cyc_Tcutil_check_type( struct Cyc_Position_Segment*
  loc, struct Cyc_Tcenv_Tenv* te, struct Cyc_List_List* bound_tvars, void*
! expected_kind, int allow_evars, void* t){ struct Cyc_Tcutil_CVTEnv _temp3245=
  Cyc_Tcutil_check_valid_type( loc, te, bound_tvars, expected_kind, 0, t); struct
! Cyc_List_List* _temp3246= Cyc_Tcutil_remove_bound_tvars( _temp3245.free_vars,
! bound_tvars); struct Cyc_List_List* _temp3247= _temp3245.free_evars;{ struct Cyc_List_List*
! fs= _temp3246; for( 0; fs !=  0; fs=(( struct Cyc_List_List*) _check_null( fs))->tl){
! struct _tagged_arr* _temp3248=(( struct Cyc_Absyn_Tvar*)(( struct Cyc_List_List*)
! _check_null( fs))->hd)->name;({ struct Cyc_Std_String_pa_struct _temp3251;
! _temp3251.tag= Cyc_Std_String_pa; _temp3251.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string(
! t);{ struct Cyc_Std_String_pa_struct _temp3250; _temp3250.tag= Cyc_Std_String_pa;
! _temp3250.f1=( struct _tagged_arr)* _temp3248;{ void* _temp3249[ 2u]={&
! _temp3250,& _temp3251}; Cyc_Tcutil_terr( loc, _tag_arr("unbound type variable %s in type %s",
! sizeof( unsigned char), 36u), _tag_arr( _temp3249, sizeof( void*), 2u));}}});}}
! if( ! allow_evars? _temp3247 !=  0: 0){ for( 0; _temp3247 !=  0; _temp3247=((
! struct Cyc_List_List*) _check_null( _temp3247))->tl){ void* e=( void*)(( struct
! Cyc_List_List*) _check_null( _temp3247))->hd; void* _temp3252= Cyc_Tcutil_typ_kind(
! e); _LL3254: if( _temp3252 == ( void*) Cyc_Absyn_RgnKind){ goto _LL3255;} else{
! goto _LL3256;} _LL3256: if( _temp3252 == ( void*) Cyc_Absyn_EffKind){ goto
! _LL3257;} else{ goto _LL3258;} _LL3258: goto _LL3259; _LL3255: if( ! Cyc_Tcutil_unify(
! e,( void*) Cyc_Absyn_HeapRgn)){({ void* _temp3260[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("can't unify evar with heap!",
! sizeof( unsigned char), 28u), _tag_arr( _temp3260, sizeof( void*), 0u));});}
! goto _LL3253; _LL3257: if( ! Cyc_Tcutil_unify( e,( void*)({ struct Cyc_Absyn_JoinEff_struct*
! _temp3261=( struct Cyc_Absyn_JoinEff_struct*) _cycalloc( sizeof( struct Cyc_Absyn_JoinEff_struct));
! _temp3261[ 0]=({ struct Cyc_Absyn_JoinEff_struct _temp3262; _temp3262.tag= Cyc_Absyn_JoinEff;
! _temp3262.f1= 0; _temp3262;}); _temp3261;}))){({ void* _temp3263[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("can't unify evar with {}!",
! sizeof( unsigned char), 26u), _tag_arr( _temp3263, sizeof( void*), 0u));});}
! goto _LL3253; _LL3259:({ struct Cyc_Std_String_pa_struct _temp3266; _temp3266.tag=
! Cyc_Std_String_pa; _temp3266.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! struct Cyc_Std_String_pa_struct _temp3265; _temp3265.tag= Cyc_Std_String_pa;
! _temp3265.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( e);{ void* _temp3264[
! 2u]={& _temp3265,& _temp3266}; Cyc_Tcutil_terr( loc, _tag_arr("hidden type variable %s isn't abstracted in type %s",
! sizeof( unsigned char), 52u), _tag_arr( _temp3264, sizeof( void*), 2u));}}});
! goto _LL3253; _LL3253:;}}} void Cyc_Tcutil_add_tvar_identity( struct Cyc_Absyn_Tvar*
  tv){ if( tv->identity ==  0){ tv->identity= Cyc_Tcutil_new_tvar_id();}} void Cyc_Tcutil_add_tvar_identities(
  struct Cyc_List_List* tvs){(( void(*)( void(* f)( struct Cyc_Absyn_Tvar*),
  struct Cyc_List_List* x)) Cyc_List_iter)( Cyc_Tcutil_add_tvar_identity, tvs);}
***************
*** 4247,4258 ****
  _check_null( vs))->tl; for( 0; vs2 !=  0; vs2=(( struct Cyc_List_List*)
  _check_null( vs2))->tl){ if( cmp(( void*)(( struct Cyc_List_List*) _check_null(
  vs))->hd,( void*)(( struct Cyc_List_List*) _check_null( vs2))->hd) ==  0){({
! struct Cyc_Std_String_pa_struct _temp3276; _temp3276.tag= Cyc_Std_String_pa;
! _temp3276.f1=( struct _tagged_arr) a2string(( void*)(( struct Cyc_List_List*)
! _check_null( vs))->hd);{ struct Cyc_Std_String_pa_struct _temp3275; _temp3275.tag=
! Cyc_Std_String_pa; _temp3275.f1=( struct _tagged_arr) msg;{ void* _temp3274[ 2u]={&
! _temp3275,& _temp3276}; Cyc_Tcutil_terr( loc, _tag_arr("%s: %s", sizeof(
! unsigned char), 7u), _tag_arr( _temp3274, sizeof( void*), 2u));}}});}}}} static
  struct _tagged_arr Cyc_Tcutil_strptr2string( struct _tagged_arr* s){ return* s;}
  void Cyc_Tcutil_check_unique_vars( struct Cyc_List_List* vs, struct Cyc_Position_Segment*
  loc, struct _tagged_arr msg){(( void(*)( int(* cmp)( struct _tagged_arr*, struct
--- 4240,4251 ----
  _check_null( vs))->tl; for( 0; vs2 !=  0; vs2=(( struct Cyc_List_List*)
  _check_null( vs2))->tl){ if( cmp(( void*)(( struct Cyc_List_List*) _check_null(
  vs))->hd,( void*)(( struct Cyc_List_List*) _check_null( vs2))->hd) ==  0){({
! struct Cyc_Std_String_pa_struct _temp3269; _temp3269.tag= Cyc_Std_String_pa;
! _temp3269.f1=( struct _tagged_arr) a2string(( void*)(( struct Cyc_List_List*)
! _check_null( vs))->hd);{ struct Cyc_Std_String_pa_struct _temp3268; _temp3268.tag=
! Cyc_Std_String_pa; _temp3268.f1=( struct _tagged_arr) msg;{ void* _temp3267[ 2u]={&
! _temp3268,& _temp3269}; Cyc_Tcutil_terr( loc, _tag_arr("%s: %s", sizeof(
! unsigned char), 7u), _tag_arr( _temp3267, sizeof( void*), 2u));}}});}}}} static
  struct _tagged_arr Cyc_Tcutil_strptr2string( struct _tagged_arr* s){ return* s;}
  void Cyc_Tcutil_check_unique_vars( struct Cyc_List_List* vs, struct Cyc_Position_Segment*
  loc, struct _tagged_arr msg){(( void(*)( int(* cmp)( struct _tagged_arr*, struct
***************
*** 4273,4789 ****
  Cyc_List_List* sd_fields= sdfields; for( 0; sd_fields !=  0; sd_fields=(( struct
  Cyc_List_List*) _check_null( sd_fields))->tl){ if( Cyc_Std_strcmp(*(( struct Cyc_Absyn_Structfield*)((
  struct Cyc_List_List*) _check_null( sd_fields))->hd)->name, _tag_arr("", sizeof(
! unsigned char), 1u)) !=  0){ fields=({ struct Cyc_List_List* _temp3277=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3277->hd=( void*)({
! struct _tuple17* _temp3278=( struct _tuple17*) _cycalloc( sizeof( struct
! _tuple17)); _temp3278->f1=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( sd_fields))->hd; _temp3278->f2= 0; _temp3278;}); _temp3277->tl=
! fields; _temp3277;});}}} fields=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( fields);{ struct Cyc_List_List* ans= 0; for( 0; des !=  0;
! des=(( struct Cyc_List_List*) _check_null( des))->tl){ struct _tuple18 _temp3281;
! void* _temp3282; struct Cyc_List_List* _temp3284; struct _tuple18* _temp3279=(
! struct _tuple18*)(( struct Cyc_List_List*) _check_null( des))->hd; _temp3281=*
! _temp3279; _LL3285: _temp3284= _temp3281.f1; goto _LL3283; _LL3283: _temp3282=
! _temp3281.f2; goto _LL3280; _LL3280: if( _temp3284 ==  0){ struct Cyc_List_List*
! _temp3286= fields; for( 0; _temp3286 !=  0; _temp3286=(( struct Cyc_List_List*)
! _check_null( _temp3286))->tl){ if( !(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3286))->hd)).f2){(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3286))->hd)).f2= 1;(*(( struct _tuple18*)(( struct Cyc_List_List*)
  _check_null( des))->hd)).f1=( struct Cyc_List_List*)({ struct Cyc_List_List*
! _temp3287=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp3287->hd=( void*)(( void*)({ struct Cyc_Absyn_FieldName_struct* _temp3288=(
  struct Cyc_Absyn_FieldName_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FieldName_struct));
! _temp3288[ 0]=({ struct Cyc_Absyn_FieldName_struct _temp3289; _temp3289.tag= Cyc_Absyn_FieldName;
! _temp3289.f1=((*(( struct _tuple17*)(( struct Cyc_List_List*) _check_null(
! _temp3286))->hd)).f1)->name; _temp3289;}); _temp3288;})); _temp3287->tl= 0;
! _temp3287;}); ans=({ struct Cyc_List_List* _temp3290=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp3290->hd=( void*)({
! struct _tuple19* _temp3291=( struct _tuple19*) _region_malloc( rgn, sizeof(
! struct _tuple19)); _temp3291->f1=(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3286))->hd)).f1; _temp3291->f2= _temp3282; _temp3291;});
! _temp3290->tl= ans; _temp3290;}); break;}} if( _temp3286 ==  0){({ void*
! _temp3292[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("too many arguments to struct",
! sizeof( unsigned char), 29u), _tag_arr( _temp3292, sizeof( void*), 0u));});}}
! else{ if((( struct Cyc_List_List*) _check_null( _temp3284))->tl !=  0){({ void*
! _temp3293[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("multiple designators are not supported",
! sizeof( unsigned char), 39u), _tag_arr( _temp3293, sizeof( void*), 0u));});}
! else{ void* _temp3294=( void*)(( struct Cyc_List_List*) _check_null( _temp3284))->hd;
! struct _tagged_arr* _temp3300; _LL3296: if(*(( int*) _temp3294) ==  Cyc_Absyn_ArrayElement){
! goto _LL3297;} else{ goto _LL3298;} _LL3298: if(*(( int*) _temp3294) ==  Cyc_Absyn_FieldName){
! _LL3301: _temp3300=(( struct Cyc_Absyn_FieldName_struct*) _temp3294)->f1; goto
! _LL3299;} else{ goto _LL3295;} _LL3297:({ void* _temp3302[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("array designator used in argument to struct", sizeof(
! unsigned char), 44u), _tag_arr( _temp3302, sizeof( void*), 0u));}); goto _LL3295;
! _LL3299: { struct Cyc_List_List* _temp3303= fields; for( 0; _temp3303 !=  0;
! _temp3303=(( struct Cyc_List_List*) _check_null( _temp3303))->tl){ if( Cyc_Std_zstrptrcmp(
! _temp3300,((*(( struct _tuple17*)(( struct Cyc_List_List*) _check_null(
! _temp3303))->hd)).f1)->name) ==  0){ if((*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3303))->hd)).f2){({ struct Cyc_Std_String_pa_struct _temp3305;
! _temp3305.tag= Cyc_Std_String_pa; _temp3305.f1=( struct _tagged_arr)* _temp3300;{
! void* _temp3304[ 1u]={& _temp3305}; Cyc_Tcutil_terr( loc, _tag_arr("field %s has already been used as an argument",
! sizeof( unsigned char), 46u), _tag_arr( _temp3304, sizeof( void*), 1u));}});}(*((
! struct _tuple17*)(( struct Cyc_List_List*) _check_null( _temp3303))->hd)).f2= 1;
! ans=({ struct Cyc_List_List* _temp3306=( struct Cyc_List_List*) _region_malloc(
! rgn, sizeof( struct Cyc_List_List)); _temp3306->hd=( void*)({ struct _tuple19*
! _temp3307=( struct _tuple19*) _region_malloc( rgn, sizeof( struct _tuple19));
! _temp3307->f1=(*(( struct _tuple17*)(( struct Cyc_List_List*) _check_null(
! _temp3303))->hd)).f1; _temp3307->f2= _temp3282; _temp3307;}); _temp3306->tl= ans;
! _temp3306;}); break;}} if( _temp3303 ==  0){({ struct Cyc_Std_String_pa_struct
! _temp3309; _temp3309.tag= Cyc_Std_String_pa; _temp3309.f1=( struct _tagged_arr)*
! _temp3300;{ void* _temp3308[ 1u]={& _temp3309}; Cyc_Tcutil_terr( loc, _tag_arr("bad field designator %s",
! sizeof( unsigned char), 24u), _tag_arr( _temp3308, sizeof( void*), 1u));}});}
! goto _LL3295;} _LL3295:;}}} for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
  _check_null( fields))->tl){ if( !(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( fields))->hd)).f2){({ void* _temp3310[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("too few arguments to struct", sizeof( unsigned char), 28u), _tag_arr(
! _temp3310, sizeof( void*), 0u));}); break;}} return(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( ans);}} int Cyc_Tcutil_is_tagged_pointer_typ_elt(
! void* t, void** elt_typ_dest){ void* _temp3311= Cyc_Tcutil_compress( t); struct
! Cyc_Absyn_PtrInfo _temp3317; struct Cyc_Absyn_Conref* _temp3319; void* _temp3321;
! _LL3313: if(( unsigned int) _temp3311 >  4u?*(( int*) _temp3311) ==  Cyc_Absyn_PointerType:
! 0){ _LL3318: _temp3317=(( struct Cyc_Absyn_PointerType_struct*) _temp3311)->f1;
! _LL3322: _temp3321=( void*) _temp3317.elt_typ; goto _LL3320; _LL3320: _temp3319=
! _temp3317.bounds; goto _LL3314;} else{ goto _LL3315;} _LL3315: goto _LL3316;
! _LL3314: { struct Cyc_Absyn_Conref* _temp3323= Cyc_Absyn_compress_conref(
! _temp3319); void* _temp3324=( void*)( Cyc_Absyn_compress_conref( _temp3323))->v;
! void* _temp3332; _LL3326: if(( unsigned int) _temp3324 >  1u?*(( int*) _temp3324)
! ==  Cyc_Absyn_Eq_constr: 0){ _LL3333: _temp3332=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3324)->f1; if( _temp3332 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL3327;}
! else{ goto _LL3328;}} else{ goto _LL3328;} _LL3328: if( _temp3324 == ( void*)
! Cyc_Absyn_No_constr){ goto _LL3329;} else{ goto _LL3330;} _LL3330: goto _LL3331;
! _LL3327:* elt_typ_dest= _temp3321; return 1; _LL3329:( void*)( _temp3323->v=(
! void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct* _temp3334=( struct Cyc_Absyn_Eq_constr_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct)); _temp3334[ 0]=({ struct
! Cyc_Absyn_Eq_constr_struct _temp3335; _temp3335.tag= Cyc_Absyn_Eq_constr;
! _temp3335.f1=( void*)(( void*) Cyc_Absyn_Unknown_b); _temp3335;}); _temp3334;})));*
! elt_typ_dest= _temp3321; return 1; _LL3331: return 0; _LL3325:;} _LL3316: return
! 0; _LL3312:;} int Cyc_Tcutil_is_tagged_pointer_typ( void* t){ void* ignore=(
  void*) Cyc_Absyn_VoidType; return Cyc_Tcutil_is_tagged_pointer_typ_elt( t,&
  ignore);} struct _tuple7 Cyc_Tcutil_addressof_props( struct Cyc_Tcenv_Tenv* te,
! struct Cyc_Absyn_Exp* e){ struct _tuple7 bogus_ans=({ struct _tuple7 _temp3518;
! _temp3518.f1= 0; _temp3518.f2=( void*) Cyc_Absyn_HeapRgn; _temp3518;}); void*
! _temp3336=( void*) e->r; void* _temp3350; struct _tuple1* _temp3352; struct
! _tagged_arr* _temp3354; struct Cyc_Absyn_Exp* _temp3356; struct _tagged_arr*
! _temp3358; struct Cyc_Absyn_Exp* _temp3360; struct Cyc_Absyn_Exp* _temp3362;
! struct Cyc_Absyn_Exp* _temp3364; struct Cyc_Absyn_Exp* _temp3366; _LL3338: if(*((
! int*) _temp3336) ==  Cyc_Absyn_Var_e){ _LL3353: _temp3352=(( struct Cyc_Absyn_Var_e_struct*)
! _temp3336)->f1; goto _LL3351; _LL3351: _temp3350=( void*)(( struct Cyc_Absyn_Var_e_struct*)
! _temp3336)->f2; goto _LL3339;} else{ goto _LL3340;} _LL3340: if(*(( int*)
! _temp3336) ==  Cyc_Absyn_StructMember_e){ _LL3357: _temp3356=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp3336)->f1; goto _LL3355; _LL3355: _temp3354=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp3336)->f2; goto _LL3341;} else{ goto _LL3342;} _LL3342: if(*(( int*)
! _temp3336) ==  Cyc_Absyn_StructArrow_e){ _LL3361: _temp3360=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp3336)->f1; goto _LL3359; _LL3359: _temp3358=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp3336)->f2; goto _LL3343;} else{ goto _LL3344;} _LL3344: if(*(( int*)
! _temp3336) ==  Cyc_Absyn_Deref_e){ _LL3363: _temp3362=(( struct Cyc_Absyn_Deref_e_struct*)
! _temp3336)->f1; goto _LL3345;} else{ goto _LL3346;} _LL3346: if(*(( int*)
! _temp3336) ==  Cyc_Absyn_Subscript_e){ _LL3367: _temp3366=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp3336)->f1; goto _LL3365; _LL3365: _temp3364=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp3336)->f2; goto _LL3347;} else{ goto _LL3348;} _LL3348: goto _LL3349;
! _LL3339: { void* _temp3368= _temp3350; struct Cyc_Absyn_Vardecl* _temp3382;
! struct Cyc_Absyn_Vardecl* _temp3384; struct Cyc_Absyn_Vardecl* _temp3386; struct
! Cyc_Absyn_Vardecl* _temp3388; _LL3370: if( _temp3368 == ( void*) Cyc_Absyn_Unresolved_b){
! goto _LL3371;} else{ goto _LL3372;} _LL3372: if(( unsigned int) _temp3368 >  1u?*((
! int*) _temp3368) ==  Cyc_Absyn_Funname_b: 0){ goto _LL3373;} else{ goto _LL3374;}
! _LL3374: if(( unsigned int) _temp3368 >  1u?*(( int*) _temp3368) ==  Cyc_Absyn_Global_b:
! 0){ _LL3383: _temp3382=(( struct Cyc_Absyn_Global_b_struct*) _temp3368)->f1;
! goto _LL3375;} else{ goto _LL3376;} _LL3376: if(( unsigned int) _temp3368 >  1u?*((
! int*) _temp3368) ==  Cyc_Absyn_Local_b: 0){ _LL3385: _temp3384=(( struct Cyc_Absyn_Local_b_struct*)
! _temp3368)->f1; goto _LL3377;} else{ goto _LL3378;} _LL3378: if(( unsigned int)
! _temp3368 >  1u?*(( int*) _temp3368) ==  Cyc_Absyn_Pat_b: 0){ _LL3387: _temp3386=((
! struct Cyc_Absyn_Pat_b_struct*) _temp3368)->f1; goto _LL3379;} else{ goto
! _LL3380;} _LL3380: if(( unsigned int) _temp3368 >  1u?*(( int*) _temp3368) == 
! Cyc_Absyn_Param_b: 0){ _LL3389: _temp3388=(( struct Cyc_Absyn_Param_b_struct*)
! _temp3368)->f1; goto _LL3381;} else{ goto _LL3369;} _LL3371: return bogus_ans;
! _LL3373: return({ struct _tuple7 _temp3390; _temp3390.f1= 0; _temp3390.f2=( void*)
! Cyc_Absyn_HeapRgn; _temp3390;}); _LL3375: { void* _temp3391= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v); _LL3393: if((
! unsigned int) _temp3391 >  4u?*(( int*) _temp3391) ==  Cyc_Absyn_ArrayType: 0){
! goto _LL3394;} else{ goto _LL3395;} _LL3395: goto _LL3396; _LL3394: return({
! struct _tuple7 _temp3397; _temp3397.f1= 1; _temp3397.f2=( void*) Cyc_Absyn_HeapRgn;
! _temp3397;}); _LL3396: return({ struct _tuple7 _temp3398; _temp3398.f1=(
! _temp3382->tq).q_const; _temp3398.f2=( void*) Cyc_Absyn_HeapRgn; _temp3398;});
! _LL3392:;} _LL3377: { void* _temp3399= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v); _LL3401: if(( unsigned int) _temp3399 >  4u?*(( int*)
! _temp3399) ==  Cyc_Absyn_ArrayType: 0){ goto _LL3402;} else{ goto _LL3403;}
! _LL3403: goto _LL3404; _LL3402: return({ struct _tuple7 _temp3405; _temp3405.f1=
! 1; _temp3405.f2=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp3384->rgn))->v;
! _temp3405;}); _LL3404: return({ struct _tuple7 _temp3406; _temp3406.f1=(
! _temp3384->tq).q_const; _temp3406.f2=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp3384->rgn))->v; _temp3406;}); _LL3400:;} _LL3379: _temp3388=
! _temp3386; goto _LL3381; _LL3381: return({ struct _tuple7 _temp3407; _temp3407.f1=(
! _temp3388->tq).q_const; _temp3407.f2=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp3388->rgn))->v; _temp3407;}); _LL3369:;} _LL3341: { void*
! _temp3408= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp3356->topt))->v); struct Cyc_List_List* _temp3420; struct Cyc_List_List*
! _temp3422; struct Cyc_Absyn_Structdecl** _temp3424; struct Cyc_Absyn_Structdecl*
! _temp3426; struct Cyc_Absyn_Uniondecl** _temp3427; struct Cyc_Absyn_Uniondecl*
! _temp3429; _LL3410: if(( unsigned int) _temp3408 >  4u?*(( int*) _temp3408) == 
! Cyc_Absyn_AnonStructType: 0){ _LL3421: _temp3420=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp3408)->f1; goto _LL3411;} else{ goto _LL3412;} _LL3412: if(( unsigned int)
! _temp3408 >  4u?*(( int*) _temp3408) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3423:
! _temp3422=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp3408)->f1; goto
! _LL3413;} else{ goto _LL3414;} _LL3414: if(( unsigned int) _temp3408 >  4u?*((
! int*) _temp3408) ==  Cyc_Absyn_StructType: 0){ _LL3425: _temp3424=(( struct Cyc_Absyn_StructType_struct*)
! _temp3408)->f3; if( _temp3424 ==  0){ goto _LL3416;} else{ _temp3426=* _temp3424;
! goto _LL3415;}} else{ goto _LL3416;} _LL3416: if(( unsigned int) _temp3408 >  4u?*((
! int*) _temp3408) ==  Cyc_Absyn_UnionType: 0){ _LL3428: _temp3427=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3408)->f3; if( _temp3427 ==  0){ goto _LL3418;} else{ _temp3429=* _temp3427;
! goto _LL3417;}} else{ goto _LL3418;} _LL3418: goto _LL3419; _LL3411: _temp3422=
! _temp3420; goto _LL3413; _LL3413: { struct Cyc_Absyn_Structfield* _temp3430= Cyc_Absyn_lookup_field(
! _temp3422, _temp3354); if( _temp3430 !=  0?(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3430))->width !=  0: 0){ return({ struct _tuple7 _temp3431;
! _temp3431.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3430))->tq).q_const;
! _temp3431.f2=( Cyc_Tcutil_addressof_props( te, _temp3356)).f2; _temp3431;});}
! return bogus_ans;} _LL3415: { struct Cyc_Absyn_Structfield* _temp3432= Cyc_Absyn_lookup_struct_field(
! _temp3426, _temp3354); if( _temp3432 !=  0?(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3432))->width !=  0: 0){ return({ struct _tuple7 _temp3433;
! _temp3433.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3432))->tq).q_const;
! _temp3433.f2=( Cyc_Tcutil_addressof_props( te, _temp3356)).f2; _temp3433;});}
! return bogus_ans;} _LL3417: { struct Cyc_Absyn_Structfield* _temp3434= Cyc_Absyn_lookup_union_field(
! _temp3429, _temp3354); if( _temp3434 !=  0){ return({ struct _tuple7 _temp3435;
! _temp3435.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3434))->tq).q_const;
! _temp3435.f2=( Cyc_Tcutil_addressof_props( te, _temp3356)).f2; _temp3435;});}
! goto _LL3419;} _LL3419: return bogus_ans; _LL3409:;} _LL3343: { void* _temp3436=
! Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp3360->topt))->v);
! struct Cyc_Absyn_PtrInfo _temp3442; void* _temp3444; void* _temp3446; _LL3438:
! if(( unsigned int) _temp3436 >  4u?*(( int*) _temp3436) ==  Cyc_Absyn_PointerType:
! 0){ _LL3443: _temp3442=(( struct Cyc_Absyn_PointerType_struct*) _temp3436)->f1;
! _LL3447: _temp3446=( void*) _temp3442.elt_typ; goto _LL3445; _LL3445: _temp3444=(
! void*) _temp3442.rgn_typ; goto _LL3439;} else{ goto _LL3440;} _LL3440: goto
! _LL3441; _LL3439: { void* _temp3448= Cyc_Tcutil_compress( _temp3446); struct Cyc_List_List*
! _temp3460; struct Cyc_List_List* _temp3462; struct Cyc_Absyn_Structdecl**
! _temp3464; struct Cyc_Absyn_Structdecl* _temp3466; struct Cyc_Absyn_Uniondecl**
! _temp3467; struct Cyc_Absyn_Uniondecl* _temp3469; _LL3450: if(( unsigned int)
! _temp3448 >  4u?*(( int*) _temp3448) ==  Cyc_Absyn_AnonStructType: 0){ _LL3461:
! _temp3460=(( struct Cyc_Absyn_AnonStructType_struct*) _temp3448)->f1; goto
! _LL3451;} else{ goto _LL3452;} _LL3452: if(( unsigned int) _temp3448 >  4u?*((
! int*) _temp3448) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3463: _temp3462=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp3448)->f1; goto _LL3453;} else{ goto
! _LL3454;} _LL3454: if(( unsigned int) _temp3448 >  4u?*(( int*) _temp3448) == 
! Cyc_Absyn_StructType: 0){ _LL3465: _temp3464=(( struct Cyc_Absyn_StructType_struct*)
! _temp3448)->f3; if( _temp3464 ==  0){ goto _LL3456;} else{ _temp3466=* _temp3464;
! goto _LL3455;}} else{ goto _LL3456;} _LL3456: if(( unsigned int) _temp3448 >  4u?*((
! int*) _temp3448) ==  Cyc_Absyn_UnionType: 0){ _LL3468: _temp3467=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3448)->f3; if( _temp3467 ==  0){ goto _LL3458;} else{ _temp3469=* _temp3467;
! goto _LL3457;}} else{ goto _LL3458;} _LL3458: goto _LL3459; _LL3451: _temp3462=
! _temp3460; goto _LL3453; _LL3453: { struct Cyc_Absyn_Structfield* _temp3470= Cyc_Absyn_lookup_field(
! _temp3462, _temp3358); if( _temp3470 !=  0?(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3470))->width !=  0: 0){ return({ struct _tuple7 _temp3471;
! _temp3471.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3470))->tq).q_const;
! _temp3471.f2= _temp3444; _temp3471;});} return bogus_ans;} _LL3455: { struct Cyc_Absyn_Structfield*
! _temp3472= Cyc_Absyn_lookup_struct_field( _temp3466, _temp3358); if( _temp3472
! !=  0?(( struct Cyc_Absyn_Structfield*) _check_null( _temp3472))->width !=  0: 0){
! return({ struct _tuple7 _temp3473; _temp3473.f1=((( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3472))->tq).q_const; _temp3473.f2= _temp3444; _temp3473;});}
! return bogus_ans;} _LL3457: { struct Cyc_Absyn_Structfield* _temp3474= Cyc_Absyn_lookup_union_field(
! _temp3469, _temp3358); if( _temp3474 !=  0){ return({ struct _tuple7 _temp3475;
! _temp3475.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3474))->tq).q_const;
! _temp3475.f2= _temp3444; _temp3475;});} return bogus_ans;} _LL3459: return
! bogus_ans; _LL3449:;} _LL3441: return bogus_ans; _LL3437:;} _LL3345: { void*
! _temp3476= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp3362->topt))->v); struct Cyc_Absyn_PtrInfo _temp3482; struct Cyc_Absyn_Tqual
! _temp3484; void* _temp3486; _LL3478: if(( unsigned int) _temp3476 >  4u?*(( int*)
! _temp3476) ==  Cyc_Absyn_PointerType: 0){ _LL3483: _temp3482=(( struct Cyc_Absyn_PointerType_struct*)
! _temp3476)->f1; _LL3487: _temp3486=( void*) _temp3482.rgn_typ; goto _LL3485;
! _LL3485: _temp3484= _temp3482.tq; goto _LL3479;} else{ goto _LL3480;} _LL3480:
! goto _LL3481; _LL3479: return({ struct _tuple7 _temp3488; _temp3488.f1=
! _temp3484.q_const; _temp3488.f2= _temp3486; _temp3488;}); _LL3481: return
! bogus_ans; _LL3477:;} _LL3347: { void* t= Cyc_Tcutil_compress(( void*)(( struct
! Cyc_Core_Opt*) _check_null( _temp3366->topt))->v); void* _temp3489= t; struct
! Cyc_Absyn_Tqual _temp3499; struct Cyc_List_List* _temp3501; struct Cyc_Absyn_PtrInfo
! _temp3503; struct Cyc_Absyn_Conref* _temp3505; struct Cyc_Absyn_Tqual _temp3507;
! void* _temp3509; void* _temp3511; _LL3491: if(( unsigned int) _temp3489 >  4u?*((
! int*) _temp3489) ==  Cyc_Absyn_ArrayType: 0){ _LL3500: _temp3499=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp3489)->f2; goto _LL3492;} else{ goto _LL3493;} _LL3493: if(( unsigned int)
! _temp3489 >  4u?*(( int*) _temp3489) ==  Cyc_Absyn_TupleType: 0){ _LL3502:
! _temp3501=(( struct Cyc_Absyn_TupleType_struct*) _temp3489)->f1; goto _LL3494;}
! else{ goto _LL3495;} _LL3495: if(( unsigned int) _temp3489 >  4u?*(( int*)
! _temp3489) ==  Cyc_Absyn_PointerType: 0){ _LL3504: _temp3503=(( struct Cyc_Absyn_PointerType_struct*)
! _temp3489)->f1; _LL3512: _temp3511=( void*) _temp3503.elt_typ; goto _LL3510;
! _LL3510: _temp3509=( void*) _temp3503.rgn_typ; goto _LL3508; _LL3508: _temp3507=
! _temp3503.tq; goto _LL3506; _LL3506: _temp3505= _temp3503.bounds; goto _LL3496;}
! else{ goto _LL3497;} _LL3497: goto _LL3498; _LL3492: return({ struct _tuple7
! _temp3513; _temp3513.f1= _temp3499.q_const; _temp3513.f2=( Cyc_Tcutil_addressof_props(
! te, _temp3366)).f2; _temp3513;}); _LL3494: { struct _tuple4* _temp3514= Cyc_Absyn_lookup_tuple_field(
! _temp3501,( int) Cyc_Evexp_eval_const_uint_exp( _temp3364)); if( _temp3514 !=  0){
! return({ struct _tuple7 _temp3515; _temp3515.f1=((*(( struct _tuple4*)
! _check_null( _temp3514))).f1).q_const; _temp3515.f2=( Cyc_Tcutil_addressof_props(
! te, _temp3366)).f2; _temp3515;});} return bogus_ans;} _LL3496: return({ struct
! _tuple7 _temp3516; _temp3516.f1= _temp3507.q_const; _temp3516.f2= _temp3509;
! _temp3516;}); _LL3498: return bogus_ans; _LL3490:;} _LL3349:({ void* _temp3517[
  0u]={}; Cyc_Tcutil_terr( e->loc, _tag_arr("unary & applied to non-lvalue",
! sizeof( unsigned char), 30u), _tag_arr( _temp3517, sizeof( void*), 0u));});
! return bogus_ans; _LL3337:;} void* Cyc_Tcutil_array_to_ptr( struct Cyc_Tcenv_Tenv*
! te, void* e_typ, struct Cyc_Absyn_Exp* e){ void* _temp3519= Cyc_Tcutil_compress(
! e_typ); struct Cyc_Absyn_Tqual _temp3525; void* _temp3527; _LL3521: if((
! unsigned int) _temp3519 >  4u?*(( int*) _temp3519) ==  Cyc_Absyn_ArrayType: 0){
! _LL3528: _temp3527=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp3519)->f1;
! goto _LL3526; _LL3526: _temp3525=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp3519)->f2; goto _LL3522;} else{ goto _LL3523;} _LL3523: goto _LL3524;
! _LL3522: { void* _temp3531; struct _tuple7 _temp3529= Cyc_Tcutil_addressof_props(
! te, e); _LL3532: _temp3531= _temp3529.f2; goto _LL3530; _LL3530: return Cyc_Absyn_atb_typ(
! _temp3527, _temp3531, _temp3525,( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp3533=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp3533[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp3534; _temp3534.tag= Cyc_Absyn_Upper_b;
! _temp3534.f1= e; _temp3534;}); _temp3533;}));} _LL3524: return e_typ; _LL3520:;}
  void Cyc_Tcutil_check_bound( struct Cyc_Position_Segment* loc, unsigned int i,
! struct Cyc_Absyn_Conref* b){ b= Cyc_Absyn_compress_conref( b);{ void* _temp3535=(
! void*) b->v; void* _temp3543; void* _temp3545; struct Cyc_Absyn_Exp* _temp3547;
! _LL3537: if(( unsigned int) _temp3535 >  1u?*(( int*) _temp3535) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL3544: _temp3543=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp3535)->f1;
! if( _temp3543 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL3538;} else{ goto
! _LL3539;}} else{ goto _LL3539;} _LL3539: if(( unsigned int) _temp3535 >  1u?*((
! int*) _temp3535) ==  Cyc_Absyn_Eq_constr: 0){ _LL3546: _temp3545=( void*)((
! struct Cyc_Absyn_Eq_constr_struct*) _temp3535)->f1; if(( unsigned int) _temp3545
! >  1u?*(( int*) _temp3545) ==  Cyc_Absyn_Upper_b: 0){ _LL3548: _temp3547=((
! struct Cyc_Absyn_Upper_b_struct*) _temp3545)->f1; goto _LL3540;} else{ goto
! _LL3541;}} else{ goto _LL3541;} _LL3541: goto _LL3542; _LL3538: return; _LL3540:
! if( Cyc_Evexp_eval_const_uint_exp( _temp3547) <=  i){({ void* _temp3549[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("dereference is out of bounds", sizeof(
! unsigned char), 29u), _tag_arr( _temp3549, sizeof( void*), 0u));});} return;
! _LL3542:( void*)( b->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp3550=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp3550[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp3551; _temp3551.tag= Cyc_Absyn_Eq_constr;
! _temp3551.f1=( void*)(( void*)({ struct Cyc_Absyn_Upper_b_struct* _temp3552=(
  struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp3552[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp3553; _temp3553.tag= Cyc_Absyn_Upper_b;
! _temp3553.f1= Cyc_Absyn_uint_exp( i +  1, 0); _temp3553;}); _temp3552;}));
! _temp3551;}); _temp3550;}))); return; _LL3536:;}} void Cyc_Tcutil_check_nonzero_bound(
  struct Cyc_Position_Segment* loc, struct Cyc_Absyn_Conref* b){ Cyc_Tcutil_check_bound(
  loc, 0, b);} int Cyc_Tcutil_is_bound_one( struct Cyc_Absyn_Conref* b){ void*
! _temp3554=( void*)( Cyc_Absyn_compress_conref( b))->v; void* _temp3560; struct
! Cyc_Absyn_Exp* _temp3562; _LL3556: if(( unsigned int) _temp3554 >  1u?*(( int*)
! _temp3554) ==  Cyc_Absyn_Eq_constr: 0){ _LL3561: _temp3560=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3554)->f1; if(( unsigned int) _temp3560 >  1u?*(( int*) _temp3560) ==  Cyc_Absyn_Upper_b:
! 0){ _LL3563: _temp3562=(( struct Cyc_Absyn_Upper_b_struct*) _temp3560)->f1; goto
! _LL3557;} else{ goto _LL3558;}} else{ goto _LL3558;} _LL3558: goto _LL3559;
! _LL3557: return Cyc_Evexp_eval_const_uint_exp( _temp3562) ==  1; _LL3559: return
! 0; _LL3555:;} int Cyc_Tcutil_bits_only( void* t){ void* _temp3564= Cyc_Tcutil_compress(
! t); void* _temp3590; struct Cyc_List_List* _temp3592; struct Cyc_Absyn_Structdecl**
! _temp3594; struct Cyc_List_List* _temp3596; struct Cyc_Absyn_Uniondecl**
! _temp3598; struct Cyc_List_List* _temp3600; struct Cyc_List_List* _temp3602;
! struct Cyc_List_List* _temp3604; _LL3566: if( _temp3564 == ( void*) Cyc_Absyn_VoidType){
! goto _LL3567;} else{ goto _LL3568;} _LL3568: if(( unsigned int) _temp3564 >  4u?*((
! int*) _temp3564) ==  Cyc_Absyn_IntType: 0){ goto _LL3569;} else{ goto _LL3570;}
! _LL3570: if( _temp3564 == ( void*) Cyc_Absyn_FloatType){ goto _LL3571;} else{
! goto _LL3572;} _LL3572: if( _temp3564 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL3573;} else{ goto _LL3574;} _LL3574: if(( unsigned int) _temp3564 >  4u?*((
! int*) _temp3564) ==  Cyc_Absyn_EnumType: 0){ goto _LL3575;} else{ goto _LL3576;}
! _LL3576: if(( unsigned int) _temp3564 >  4u?*(( int*) _temp3564) ==  Cyc_Absyn_ArrayType:
! 0){ _LL3591: _temp3590=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp3564)->f1;
! goto _LL3577;} else{ goto _LL3578;} _LL3578: if(( unsigned int) _temp3564 >  4u?*((
! int*) _temp3564) ==  Cyc_Absyn_TupleType: 0){ _LL3593: _temp3592=(( struct Cyc_Absyn_TupleType_struct*)
! _temp3564)->f1; goto _LL3579;} else{ goto _LL3580;} _LL3580: if(( unsigned int)
! _temp3564 >  4u?*(( int*) _temp3564) ==  Cyc_Absyn_StructType: 0){ _LL3597:
! _temp3596=(( struct Cyc_Absyn_StructType_struct*) _temp3564)->f2; goto _LL3595;
! _LL3595: _temp3594=(( struct Cyc_Absyn_StructType_struct*) _temp3564)->f3; goto
! _LL3581;} else{ goto _LL3582;} _LL3582: if(( unsigned int) _temp3564 >  4u?*((
! int*) _temp3564) ==  Cyc_Absyn_UnionType: 0){ _LL3601: _temp3600=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3564)->f2; goto _LL3599; _LL3599: _temp3598=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3564)->f3; goto _LL3583;} else{ goto _LL3584;} _LL3584: if(( unsigned int)
! _temp3564 >  4u?*(( int*) _temp3564) ==  Cyc_Absyn_AnonStructType: 0){ _LL3603:
! _temp3602=(( struct Cyc_Absyn_AnonStructType_struct*) _temp3564)->f1; goto
! _LL3585;} else{ goto _LL3586;} _LL3586: if(( unsigned int) _temp3564 >  4u?*((
! int*) _temp3564) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3605: _temp3604=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp3564)->f1; goto _LL3587;} else{ goto
! _LL3588;} _LL3588: goto _LL3589; _LL3567: goto _LL3569; _LL3569: goto _LL3571;
! _LL3571: goto _LL3573; _LL3573: return 1; _LL3575: return 0; _LL3577: return Cyc_Tcutil_bits_only(
! _temp3590); _LL3579: for( 0; _temp3592 !=  0; _temp3592=(( struct Cyc_List_List*)
! _check_null( _temp3592))->tl){ if( ! Cyc_Tcutil_bits_only((*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp3592))->hd)).f2)){ return 0;}} return 1;
! _LL3581: if( _temp3594 ==  0){ return 0;}{ struct Cyc_Absyn_Structdecl*
! _temp3606=*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp3594)); if(
! _temp3606->fields ==  0){ return 0;}{ struct _RegionHandle _temp3607=
! _new_region(); struct _RegionHandle* rgn=& _temp3607; _push_region( rgn);{
! struct Cyc_List_List* _temp3608=(( struct Cyc_List_List*(*)( struct
  _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_rzip)( rgn, rgn, _temp3606->tvs, _temp3596);{ struct Cyc_List_List*
! fs=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp3606->fields))->v;
  for( 0; fs !=  0; fs=(( struct Cyc_List_List*) _check_null( fs))->tl){ if( ! Cyc_Tcutil_bits_only(
! Cyc_Tcutil_rsubstitute( rgn, _temp3608,( void*)(( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( fs))->hd)->type))){ int _temp3609= 0;
! _npop_handler( 0u); return _temp3609;}}}{ int _temp3610= 1; _npop_handler( 0u);
! return _temp3610;}}; _pop_region( rgn);}} _LL3583: if( _temp3598 ==  0){ return
! 0;}{ struct Cyc_Absyn_Uniondecl* _temp3611=*(( struct Cyc_Absyn_Uniondecl**)
! _check_null( _temp3598)); if( _temp3611->fields ==  0){ return 0;}{ struct
! _RegionHandle _temp3612= _new_region(); struct _RegionHandle* rgn=& _temp3612;
! _push_region( rgn);{ struct Cyc_List_List* _temp3613=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp3611->tvs, _temp3600);{
  struct Cyc_List_List* fs=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp3611->fields))->v; for( 0; fs !=  0; fs=(( struct Cyc_List_List*)
  _check_null( fs))->tl){ if( ! Cyc_Tcutil_bits_only( Cyc_Tcutil_rsubstitute( rgn,
! _temp3613,( void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( fs))->hd)->type))){ int _temp3614= 0; _npop_handler( 0u); return
! _temp3614;}}}{ int _temp3615= 1; _npop_handler( 0u); return _temp3615;}};
! _pop_region( rgn);}} _LL3585: _temp3604= _temp3602; goto _LL3587; _LL3587: for(
! 0; _temp3604 !=  0; _temp3604=(( struct Cyc_List_List*) _check_null( _temp3604))->tl){
  if( ! Cyc_Tcutil_bits_only(( void*)(( struct Cyc_Absyn_Structfield*)(( struct
! Cyc_List_List*) _check_null( _temp3604))->hd)->type)){ return 0;}} return 1;
! _LL3589: return 0; _LL3565:;} struct _tuple20{ struct Cyc_List_List* f1; struct
  Cyc_Absyn_Exp* f2; } ; static int Cyc_Tcutil_cnst_exp( struct Cyc_Tcenv_Tenv* te,
! int var_okay, struct Cyc_Absyn_Exp* e){ void* _temp3616=( void*) e->r; struct
! _tuple1* _temp3660; struct Cyc_Absyn_Exp* _temp3662; struct Cyc_Absyn_Exp*
! _temp3664; struct Cyc_Absyn_Exp* _temp3666; struct Cyc_Absyn_Exp* _temp3668;
! struct Cyc_Absyn_Exp* _temp3670; struct Cyc_Absyn_Exp* _temp3672; struct Cyc_Absyn_Exp*
! _temp3674; struct Cyc_Absyn_Exp* _temp3676; void* _temp3678; struct Cyc_Absyn_Exp*
! _temp3680; struct Cyc_Absyn_Exp* _temp3682; struct Cyc_Absyn_Exp* _temp3684;
! struct Cyc_List_List* _temp3686; struct Cyc_List_List* _temp3688; struct Cyc_List_List*
! _temp3690; struct Cyc_List_List* _temp3692; void* _temp3694; struct Cyc_List_List*
! _temp3696; struct Cyc_List_List* _temp3698; _LL3618: if(*(( int*) _temp3616) == 
! Cyc_Absyn_Const_e){ goto _LL3619;} else{ goto _LL3620;} _LL3620: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Sizeoftyp_e){ goto _LL3621;} else{ goto _LL3622;}
! _LL3622: if(*(( int*) _temp3616) ==  Cyc_Absyn_Sizeofexp_e){ goto _LL3623;}
! else{ goto _LL3624;} _LL3624: if(*(( int*) _temp3616) ==  Cyc_Absyn_Offsetof_e){
! goto _LL3625;} else{ goto _LL3626;} _LL3626: if(*(( int*) _temp3616) ==  Cyc_Absyn_Gentyp_e){
! goto _LL3627;} else{ goto _LL3628;} _LL3628: if(*(( int*) _temp3616) ==  Cyc_Absyn_Enum_e){
! goto _LL3629;} else{ goto _LL3630;} _LL3630: if(*(( int*) _temp3616) ==  Cyc_Absyn_Var_e){
! _LL3661: _temp3660=(( struct Cyc_Absyn_Var_e_struct*) _temp3616)->f1; goto
! _LL3631;} else{ goto _LL3632;} _LL3632: if(*(( int*) _temp3616) ==  Cyc_Absyn_Conditional_e){
! _LL3667: _temp3666=(( struct Cyc_Absyn_Conditional_e_struct*) _temp3616)->f1;
! goto _LL3665; _LL3665: _temp3664=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp3616)->f2; goto _LL3663; _LL3663: _temp3662=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp3616)->f3; goto _LL3633;} else{ goto _LL3634;} _LL3634: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_SeqExp_e){ _LL3671: _temp3670=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp3616)->f1; goto _LL3669; _LL3669: _temp3668=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp3616)->f2; goto _LL3635;} else{ goto _LL3636;} _LL3636: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_NoInstantiate_e){ _LL3673: _temp3672=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp3616)->f1; goto _LL3637;} else{ goto _LL3638;} _LL3638: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Instantiate_e){ _LL3675: _temp3674=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp3616)->f1; goto _LL3639;} else{ goto _LL3640;} _LL3640: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Cast_e){ _LL3679: _temp3678=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp3616)->f1; goto _LL3677; _LL3677: _temp3676=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp3616)->f2; goto _LL3641;} else{ goto _LL3642;} _LL3642: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Address_e){ _LL3681: _temp3680=(( struct Cyc_Absyn_Address_e_struct*)
! _temp3616)->f1; goto _LL3643;} else{ goto _LL3644;} _LL3644: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Comprehension_e){ _LL3685: _temp3684=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp3616)->f2; goto _LL3683; _LL3683: _temp3682=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp3616)->f3; goto _LL3645;} else{ goto _LL3646;} _LL3646: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Array_e){ _LL3687: _temp3686=(( struct Cyc_Absyn_Array_e_struct*)
! _temp3616)->f1; goto _LL3647;} else{ goto _LL3648;} _LL3648: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_AnonStruct_e){ _LL3689: _temp3688=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp3616)->f2; goto _LL3649;} else{ goto _LL3650;} _LL3650: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Struct_e){ _LL3691: _temp3690=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp3616)->f3; goto _LL3651;} else{ goto _LL3652;} _LL3652: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Primop_e){ _LL3695: _temp3694=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp3616)->f1; goto _LL3693; _LL3693: _temp3692=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp3616)->f2; goto _LL3653;} else{ goto _LL3654;} _LL3654: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Tuple_e){ _LL3697: _temp3696=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp3616)->f1; goto _LL3655;} else{ goto _LL3656;} _LL3656: if(*(( int*)
! _temp3616) ==  Cyc_Absyn_Tunion_e){ _LL3699: _temp3698=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp3616)->f3; goto _LL3657;} else{ goto _LL3658;} _LL3658: goto _LL3659;
! _LL3619: return 1; _LL3621: return 1; _LL3623: return 1; _LL3625: return 1;
! _LL3627: return 1; _LL3629: return 1; _LL3631: { struct _handler_cons _temp3700;
! _push_handler(& _temp3700);{ int _temp3702= 0; if( setjmp( _temp3700.handler)){
! _temp3702= 1;} if( ! _temp3702){{ void* _temp3703= Cyc_Tcenv_lookup_ordinary( te,
! e->loc, _temp3660); void* _temp3711; void* _temp3713; struct Cyc_Absyn_Vardecl*
! _temp3715; _LL3705: if(*(( int*) _temp3703) ==  Cyc_Tcenv_VarRes){ _LL3712:
! _temp3711=( void*)(( struct Cyc_Tcenv_VarRes_struct*) _temp3703)->f1; if((
! unsigned int) _temp3711 >  1u?*(( int*) _temp3711) ==  Cyc_Absyn_Funname_b: 0){
! goto _LL3706;} else{ goto _LL3707;}} else{ goto _LL3707;} _LL3707: if(*(( int*)
! _temp3703) ==  Cyc_Tcenv_VarRes){ _LL3714: _temp3713=( void*)(( struct Cyc_Tcenv_VarRes_struct*)
! _temp3703)->f1; if(( unsigned int) _temp3713 >  1u?*(( int*) _temp3713) ==  Cyc_Absyn_Global_b:
! 0){ _LL3716: _temp3715=(( struct Cyc_Absyn_Global_b_struct*) _temp3713)->f1;
! goto _LL3708;} else{ goto _LL3709;}} else{ goto _LL3709;} _LL3709: goto _LL3710;
! _LL3706: { int _temp3717= 1; _npop_handler( 0u); return _temp3717;} _LL3708: {
! void* _temp3718= Cyc_Tcutil_compress(( void*) _temp3715->type); _LL3720: if((
! unsigned int) _temp3718 >  4u?*(( int*) _temp3718) ==  Cyc_Absyn_ArrayType: 0){
! goto _LL3721;} else{ goto _LL3722;} _LL3722: goto _LL3723; _LL3721: { int
! _temp3724= 1; _npop_handler( 0u); return _temp3724;} _LL3723: { int _temp3725=
! var_okay; _npop_handler( 0u); return _temp3725;} _LL3719:;} _LL3710: { int
! _temp3726= var_okay; _npop_handler( 0u); return _temp3726;} _LL3704:;};
! _pop_handler();} else{ void* _temp3701=( void*) _exn_thrown; void* _temp3728=
! _temp3701; _LL3730: if( _temp3728 ==  Cyc_Dict_Absent){ goto _LL3731;} else{
! goto _LL3732;} _LL3732: goto _LL3733; _LL3731: return 0; _LL3733:( void) _throw(
! _temp3728); _LL3729:;}}} _LL3633: return( Cyc_Tcutil_cnst_exp( te, 0, _temp3666)?
! Cyc_Tcutil_cnst_exp( te, 0, _temp3664): 0)? Cyc_Tcutil_cnst_exp( te, 0,
! _temp3662): 0; _LL3635: return Cyc_Tcutil_cnst_exp( te, 0, _temp3670)? Cyc_Tcutil_cnst_exp(
! te, 0, _temp3668): 0; _LL3637: _temp3674= _temp3672; goto _LL3639; _LL3639:
! return Cyc_Tcutil_cnst_exp( te, var_okay, _temp3674); _LL3641: return Cyc_Tcutil_cnst_exp(
! te, var_okay, _temp3676); _LL3643: return Cyc_Tcutil_cnst_exp( te, 1, _temp3680);
! _LL3645: return Cyc_Tcutil_cnst_exp( te, 0, _temp3684)? Cyc_Tcutil_cnst_exp( te,
! 0, _temp3682): 0; _LL3647: _temp3688= _temp3686; goto _LL3649; _LL3649:
! _temp3690= _temp3688; goto _LL3651; _LL3651: for( 0; _temp3690 !=  0; _temp3690=((
! struct Cyc_List_List*) _check_null( _temp3690))->tl){ if( ! Cyc_Tcutil_cnst_exp(
! te, 0,(*(( struct _tuple20*)(( struct Cyc_List_List*) _check_null( _temp3690))->hd)).f2)){
! return 0;}} return 1; _LL3653: _temp3696= _temp3692; goto _LL3655; _LL3655:
! _temp3698= _temp3696; goto _LL3657; _LL3657: for( 0; _temp3698 !=  0; _temp3698=((
! struct Cyc_List_List*) _check_null( _temp3698))->tl){ if( ! Cyc_Tcutil_cnst_exp(
! te, 0,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp3698))->hd)){
! return 0;}} return 1; _LL3659: return 0; _LL3617:;} int Cyc_Tcutil_is_const_exp(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e){ return Cyc_Tcutil_cnst_exp(
  te, 0, e);} static int Cyc_Tcutil_fields_support_default( struct Cyc_List_List*
  tvs, struct Cyc_List_List* ts, struct Cyc_List_List* fs); int Cyc_Tcutil_supports_default(
! void* t){ void* _temp3734= Cyc_Tcutil_compress( t); struct Cyc_Absyn_PtrInfo
! _temp3762; struct Cyc_Absyn_Conref* _temp3764; struct Cyc_Absyn_Conref*
! _temp3766; void* _temp3768; struct Cyc_List_List* _temp3770; struct Cyc_Absyn_Structdecl**
! _temp3772; struct Cyc_List_List* _temp3774; struct Cyc_Absyn_Uniondecl**
! _temp3776; struct Cyc_List_List* _temp3778; struct Cyc_List_List* _temp3780;
! struct Cyc_List_List* _temp3782; _LL3736: if( _temp3734 == ( void*) Cyc_Absyn_VoidType){
! goto _LL3737;} else{ goto _LL3738;} _LL3738: if(( unsigned int) _temp3734 >  4u?*((
! int*) _temp3734) ==  Cyc_Absyn_IntType: 0){ goto _LL3739;} else{ goto _LL3740;}
! _LL3740: if( _temp3734 == ( void*) Cyc_Absyn_FloatType){ goto _LL3741;} else{
! goto _LL3742;} _LL3742: if( _temp3734 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL3743;} else{ goto _LL3744;} _LL3744: if(( unsigned int) _temp3734 >  4u?*((
! int*) _temp3734) ==  Cyc_Absyn_PointerType: 0){ _LL3763: _temp3762=(( struct Cyc_Absyn_PointerType_struct*)
! _temp3734)->f1; _LL3767: _temp3766= _temp3762.nullable; goto _LL3765; _LL3765:
! _temp3764= _temp3762.bounds; goto _LL3745;} else{ goto _LL3746;} _LL3746: if((
! unsigned int) _temp3734 >  4u?*(( int*) _temp3734) ==  Cyc_Absyn_ArrayType: 0){
! _LL3769: _temp3768=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp3734)->f1;
! goto _LL3747;} else{ goto _LL3748;} _LL3748: if(( unsigned int) _temp3734 >  4u?*((
! int*) _temp3734) ==  Cyc_Absyn_TupleType: 0){ _LL3771: _temp3770=(( struct Cyc_Absyn_TupleType_struct*)
! _temp3734)->f1; goto _LL3749;} else{ goto _LL3750;} _LL3750: if(( unsigned int)
! _temp3734 >  4u?*(( int*) _temp3734) ==  Cyc_Absyn_StructType: 0){ _LL3775:
! _temp3774=(( struct Cyc_Absyn_StructType_struct*) _temp3734)->f2; goto _LL3773;
! _LL3773: _temp3772=(( struct Cyc_Absyn_StructType_struct*) _temp3734)->f3; goto
! _LL3751;} else{ goto _LL3752;} _LL3752: if(( unsigned int) _temp3734 >  4u?*((
! int*) _temp3734) ==  Cyc_Absyn_UnionType: 0){ _LL3779: _temp3778=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3734)->f2; goto _LL3777; _LL3777: _temp3776=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3734)->f3; goto _LL3753;} else{ goto _LL3754;} _LL3754: if(( unsigned int)
! _temp3734 >  4u?*(( int*) _temp3734) ==  Cyc_Absyn_AnonStructType: 0){ _LL3781:
! _temp3780=(( struct Cyc_Absyn_AnonStructType_struct*) _temp3734)->f1; goto
! _LL3755;} else{ goto _LL3756;} _LL3756: if(( unsigned int) _temp3734 >  4u?*((
! int*) _temp3734) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3783: _temp3782=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp3734)->f1; goto _LL3757;} else{ goto
! _LL3758;} _LL3758: if(( unsigned int) _temp3734 >  4u?*(( int*) _temp3734) == 
! Cyc_Absyn_EnumType: 0){ goto _LL3759;} else{ goto _LL3760;} _LL3760: goto
! _LL3761; _LL3737: goto _LL3739; _LL3739: goto _LL3741; _LL3741: goto _LL3743;
! _LL3743: return 1; _LL3745: { void* _temp3784=( void*)( Cyc_Absyn_compress_conref(
! _temp3764))->v; void* _temp3792; void* _temp3794; _LL3786: if(( unsigned int)
! _temp3784 >  1u?*(( int*) _temp3784) ==  Cyc_Absyn_Eq_constr: 0){ _LL3793:
! _temp3792=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp3784)->f1; if(
! _temp3792 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL3787;} else{ goto _LL3788;}}
! else{ goto _LL3788;} _LL3788: if(( unsigned int) _temp3784 >  1u?*(( int*)
! _temp3784) ==  Cyc_Absyn_Eq_constr: 0){ _LL3795: _temp3794=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3784)->f1; if(( unsigned int) _temp3794 >  1u?*(( int*) _temp3794) ==  Cyc_Absyn_Upper_b:
! 0){ goto _LL3789;} else{ goto _LL3790;}} else{ goto _LL3790;} _LL3790: goto
! _LL3791; _LL3787: return 1; _LL3789: { void* _temp3796=( void*)((( struct Cyc_Absyn_Conref*(*)(
! struct Cyc_Absyn_Conref* x)) Cyc_Absyn_compress_conref)( _temp3766))->v; int
! _temp3802; _LL3798: if(( unsigned int) _temp3796 >  1u?*(( int*) _temp3796) == 
! Cyc_Absyn_Eq_constr: 0){ _LL3803: _temp3802=( int)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3796)->f1; goto _LL3799;} else{ goto _LL3800;} _LL3800: goto _LL3801;
! _LL3799: return _temp3802; _LL3801: return 0; _LL3797:;} _LL3791: return 0;
! _LL3785:;} _LL3747: return Cyc_Tcutil_supports_default( _temp3768); _LL3749:
! for( 0; _temp3770 !=  0; _temp3770=(( struct Cyc_List_List*) _check_null(
! _temp3770))->tl){ if( ! Cyc_Tcutil_supports_default((*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp3770))->hd)).f2)){ return 0;}} return 1;
! _LL3751: if( _temp3772 ==  0){ return 0;}{ struct Cyc_Absyn_Structdecl* sd=*((
! struct Cyc_Absyn_Structdecl**) _check_null( _temp3772)); if( sd->fields ==  0){
! return 0;} return Cyc_Tcutil_fields_support_default( sd->tvs, _temp3774,( struct
! Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( sd->fields))->v);} _LL3753:
! if( _temp3776 ==  0){ return 0;}{ struct Cyc_Absyn_Uniondecl* ud=*(( struct Cyc_Absyn_Uniondecl**)
! _check_null( _temp3776)); if( ud->fields ==  0){ return 0;} return Cyc_Tcutil_fields_support_default(
! ud->tvs, _temp3778,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null(
! ud->fields))->v);} _LL3755: _temp3782= _temp3780; goto _LL3757; _LL3757: return
! Cyc_Tcutil_fields_support_default( 0, 0, _temp3782); _LL3759: return 1; _LL3761:
! return 0; _LL3735:;} static int Cyc_Tcutil_fields_support_default( struct Cyc_List_List*
  tvs, struct Cyc_List_List* ts, struct Cyc_List_List* fs){{ struct _RegionHandle
! _temp3804= _new_region(); struct _RegionHandle* rgn=& _temp3804; _push_region(
! rgn);{ struct Cyc_List_List* _temp3805=(( struct Cyc_List_List*(*)( struct
  _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x, struct Cyc_List_List*
  y)) Cyc_List_rzip)( rgn, rgn, tvs, ts); for( 0; fs !=  0; fs=(( struct Cyc_List_List*)
! _check_null( fs))->tl){ void* t= Cyc_Tcutil_rsubstitute( rgn, _temp3805,( void*)((
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fs))->hd)->type);
! if( ! Cyc_Tcutil_supports_default( t)){ int _temp3806= 0; _npop_handler( 0u);
! return _temp3806;}}}; _pop_region( rgn);} return 1;}
--- 4266,4781 ----
  Cyc_List_List* sd_fields= sdfields; for( 0; sd_fields !=  0; sd_fields=(( struct
  Cyc_List_List*) _check_null( sd_fields))->tl){ if( Cyc_Std_strcmp(*(( struct Cyc_Absyn_Structfield*)((
  struct Cyc_List_List*) _check_null( sd_fields))->hd)->name, _tag_arr("", sizeof(
! unsigned char), 1u)) !=  0){ fields=({ struct Cyc_List_List* _temp3270=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp3270->hd=( void*)({
! struct _tuple17* _temp3271=( struct _tuple17*) _cycalloc( sizeof( struct
! _tuple17)); _temp3271->f1=( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( sd_fields))->hd; _temp3271->f2= 0; _temp3271;}); _temp3270->tl=
! fields; _temp3270;});}}} fields=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
  x)) Cyc_List_imp_rev)( fields);{ struct Cyc_List_List* ans= 0; for( 0; des !=  0;
! des=(( struct Cyc_List_List*) _check_null( des))->tl){ struct _tuple18 _temp3274;
! void* _temp3275; struct Cyc_List_List* _temp3277; struct _tuple18* _temp3272=(
! struct _tuple18*)(( struct Cyc_List_List*) _check_null( des))->hd; _temp3274=*
! _temp3272; _LL3278: _temp3277= _temp3274.f1; goto _LL3276; _LL3276: _temp3275=
! _temp3274.f2; goto _LL3273; _LL3273: if( _temp3277 ==  0){ struct Cyc_List_List*
! _temp3279= fields; for( 0; _temp3279 !=  0; _temp3279=(( struct Cyc_List_List*)
! _check_null( _temp3279))->tl){ if( !(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3279))->hd)).f2){(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3279))->hd)).f2= 1;(*(( struct _tuple18*)(( struct Cyc_List_List*)
  _check_null( des))->hd)).f1=( struct Cyc_List_List*)({ struct Cyc_List_List*
! _temp3280=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp3280->hd=( void*)(( void*)({ struct Cyc_Absyn_FieldName_struct* _temp3281=(
  struct Cyc_Absyn_FieldName_struct*) _cycalloc( sizeof( struct Cyc_Absyn_FieldName_struct));
! _temp3281[ 0]=({ struct Cyc_Absyn_FieldName_struct _temp3282; _temp3282.tag= Cyc_Absyn_FieldName;
! _temp3282.f1=((*(( struct _tuple17*)(( struct Cyc_List_List*) _check_null(
! _temp3279))->hd)).f1)->name; _temp3282;}); _temp3281;})); _temp3280->tl= 0;
! _temp3280;}); ans=({ struct Cyc_List_List* _temp3283=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp3283->hd=( void*)({
! struct _tuple19* _temp3284=( struct _tuple19*) _region_malloc( rgn, sizeof(
! struct _tuple19)); _temp3284->f1=(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3279))->hd)).f1; _temp3284->f2= _temp3275; _temp3284;});
! _temp3283->tl= ans; _temp3283;}); break;}} if( _temp3279 ==  0){({ void*
! _temp3285[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("too many arguments to struct",
! sizeof( unsigned char), 29u), _tag_arr( _temp3285, sizeof( void*), 0u));});}}
! else{ if((( struct Cyc_List_List*) _check_null( _temp3277))->tl !=  0){({ void*
! _temp3286[ 0u]={}; Cyc_Tcutil_terr( loc, _tag_arr("multiple designators are not supported",
! sizeof( unsigned char), 39u), _tag_arr( _temp3286, sizeof( void*), 0u));});}
! else{ void* _temp3287=( void*)(( struct Cyc_List_List*) _check_null( _temp3277))->hd;
! struct _tagged_arr* _temp3293; _LL3289: if(*(( int*) _temp3287) ==  Cyc_Absyn_ArrayElement){
! goto _LL3290;} else{ goto _LL3291;} _LL3291: if(*(( int*) _temp3287) ==  Cyc_Absyn_FieldName){
! _LL3294: _temp3293=(( struct Cyc_Absyn_FieldName_struct*) _temp3287)->f1; goto
! _LL3292;} else{ goto _LL3288;} _LL3290:({ void* _temp3295[ 0u]={}; Cyc_Tcutil_terr(
  loc, _tag_arr("array designator used in argument to struct", sizeof(
! unsigned char), 44u), _tag_arr( _temp3295, sizeof( void*), 0u));}); goto _LL3288;
! _LL3292: { struct Cyc_List_List* _temp3296= fields; for( 0; _temp3296 !=  0;
! _temp3296=(( struct Cyc_List_List*) _check_null( _temp3296))->tl){ if( Cyc_Std_zstrptrcmp(
! _temp3293,((*(( struct _tuple17*)(( struct Cyc_List_List*) _check_null(
! _temp3296))->hd)).f1)->name) ==  0){ if((*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( _temp3296))->hd)).f2){({ struct Cyc_Std_String_pa_struct _temp3298;
! _temp3298.tag= Cyc_Std_String_pa; _temp3298.f1=( struct _tagged_arr)* _temp3293;{
! void* _temp3297[ 1u]={& _temp3298}; Cyc_Tcutil_terr( loc, _tag_arr("field %s has already been used as an argument",
! sizeof( unsigned char), 46u), _tag_arr( _temp3297, sizeof( void*), 1u));}});}(*((
! struct _tuple17*)(( struct Cyc_List_List*) _check_null( _temp3296))->hd)).f2= 1;
! ans=({ struct Cyc_List_List* _temp3299=( struct Cyc_List_List*) _region_malloc(
! rgn, sizeof( struct Cyc_List_List)); _temp3299->hd=( void*)({ struct _tuple19*
! _temp3300=( struct _tuple19*) _region_malloc( rgn, sizeof( struct _tuple19));
! _temp3300->f1=(*(( struct _tuple17*)(( struct Cyc_List_List*) _check_null(
! _temp3296))->hd)).f1; _temp3300->f2= _temp3275; _temp3300;}); _temp3299->tl= ans;
! _temp3299;}); break;}} if( _temp3296 ==  0){({ struct Cyc_Std_String_pa_struct
! _temp3302; _temp3302.tag= Cyc_Std_String_pa; _temp3302.f1=( struct _tagged_arr)*
! _temp3293;{ void* _temp3301[ 1u]={& _temp3302}; Cyc_Tcutil_terr( loc, _tag_arr("bad field designator %s",
! sizeof( unsigned char), 24u), _tag_arr( _temp3301, sizeof( void*), 1u));}});}
! goto _LL3288;} _LL3288:;}}} for( 0; fields !=  0; fields=(( struct Cyc_List_List*)
  _check_null( fields))->tl){ if( !(*(( struct _tuple17*)(( struct Cyc_List_List*)
! _check_null( fields))->hd)).f2){({ void* _temp3303[ 0u]={}; Cyc_Tcutil_terr( loc,
  _tag_arr("too few arguments to struct", sizeof( unsigned char), 28u), _tag_arr(
! _temp3303, sizeof( void*), 0u));}); break;}} return(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( ans);}} int Cyc_Tcutil_is_tagged_pointer_typ_elt(
! void* t, void** elt_typ_dest){ void* _temp3304= Cyc_Tcutil_compress( t); struct
! Cyc_Absyn_PtrInfo _temp3310; struct Cyc_Absyn_Conref* _temp3312; void* _temp3314;
! _LL3306: if(( unsigned int) _temp3304 >  4u?*(( int*) _temp3304) ==  Cyc_Absyn_PointerType:
! 0){ _LL3311: _temp3310=(( struct Cyc_Absyn_PointerType_struct*) _temp3304)->f1;
! _LL3315: _temp3314=( void*) _temp3310.elt_typ; goto _LL3313; _LL3313: _temp3312=
! _temp3310.bounds; goto _LL3307;} else{ goto _LL3308;} _LL3308: goto _LL3309;
! _LL3307: { struct Cyc_Absyn_Conref* _temp3316= Cyc_Absyn_compress_conref(
! _temp3312); void* _temp3317=( void*)( Cyc_Absyn_compress_conref( _temp3316))->v;
! void* _temp3325; _LL3319: if(( unsigned int) _temp3317 >  1u?*(( int*) _temp3317)
! ==  Cyc_Absyn_Eq_constr: 0){ _LL3326: _temp3325=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3317)->f1; if( _temp3325 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL3320;}
! else{ goto _LL3321;}} else{ goto _LL3321;} _LL3321: if( _temp3317 == ( void*)
! Cyc_Absyn_No_constr){ goto _LL3322;} else{ goto _LL3323;} _LL3323: goto _LL3324;
! _LL3320:* elt_typ_dest= _temp3314; return 1; _LL3322:( void*)( _temp3316->v=(
! void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct* _temp3327=( struct Cyc_Absyn_Eq_constr_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct)); _temp3327[ 0]=({ struct
! Cyc_Absyn_Eq_constr_struct _temp3328; _temp3328.tag= Cyc_Absyn_Eq_constr;
! _temp3328.f1=( void*)(( void*) Cyc_Absyn_Unknown_b); _temp3328;}); _temp3327;})));*
! elt_typ_dest= _temp3314; return 1; _LL3324: return 0; _LL3318:;} _LL3309: return
! 0; _LL3305:;} int Cyc_Tcutil_is_tagged_pointer_typ( void* t){ void* ignore=(
  void*) Cyc_Absyn_VoidType; return Cyc_Tcutil_is_tagged_pointer_typ_elt( t,&
  ignore);} struct _tuple7 Cyc_Tcutil_addressof_props( struct Cyc_Tcenv_Tenv* te,
! struct Cyc_Absyn_Exp* e){ struct _tuple7 bogus_ans=({ struct _tuple7 _temp3511;
! _temp3511.f1= 0; _temp3511.f2=( void*) Cyc_Absyn_HeapRgn; _temp3511;}); void*
! _temp3329=( void*) e->r; void* _temp3343; struct _tuple1* _temp3345; struct
! _tagged_arr* _temp3347; struct Cyc_Absyn_Exp* _temp3349; struct _tagged_arr*
! _temp3351; struct Cyc_Absyn_Exp* _temp3353; struct Cyc_Absyn_Exp* _temp3355;
! struct Cyc_Absyn_Exp* _temp3357; struct Cyc_Absyn_Exp* _temp3359; _LL3331: if(*((
! int*) _temp3329) ==  Cyc_Absyn_Var_e){ _LL3346: _temp3345=(( struct Cyc_Absyn_Var_e_struct*)
! _temp3329)->f1; goto _LL3344; _LL3344: _temp3343=( void*)(( struct Cyc_Absyn_Var_e_struct*)
! _temp3329)->f2; goto _LL3332;} else{ goto _LL3333;} _LL3333: if(*(( int*)
! _temp3329) ==  Cyc_Absyn_StructMember_e){ _LL3350: _temp3349=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp3329)->f1; goto _LL3348; _LL3348: _temp3347=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp3329)->f2; goto _LL3334;} else{ goto _LL3335;} _LL3335: if(*(( int*)
! _temp3329) ==  Cyc_Absyn_StructArrow_e){ _LL3354: _temp3353=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp3329)->f1; goto _LL3352; _LL3352: _temp3351=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp3329)->f2; goto _LL3336;} else{ goto _LL3337;} _LL3337: if(*(( int*)
! _temp3329) ==  Cyc_Absyn_Deref_e){ _LL3356: _temp3355=(( struct Cyc_Absyn_Deref_e_struct*)
! _temp3329)->f1; goto _LL3338;} else{ goto _LL3339;} _LL3339: if(*(( int*)
! _temp3329) ==  Cyc_Absyn_Subscript_e){ _LL3360: _temp3359=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp3329)->f1; goto _LL3358; _LL3358: _temp3357=(( struct Cyc_Absyn_Subscript_e_struct*)
! _temp3329)->f2; goto _LL3340;} else{ goto _LL3341;} _LL3341: goto _LL3342;
! _LL3332: { void* _temp3361= _temp3343; struct Cyc_Absyn_Vardecl* _temp3375;
! struct Cyc_Absyn_Vardecl* _temp3377; struct Cyc_Absyn_Vardecl* _temp3379; struct
! Cyc_Absyn_Vardecl* _temp3381; _LL3363: if( _temp3361 == ( void*) Cyc_Absyn_Unresolved_b){
! goto _LL3364;} else{ goto _LL3365;} _LL3365: if(( unsigned int) _temp3361 >  1u?*((
! int*) _temp3361) ==  Cyc_Absyn_Funname_b: 0){ goto _LL3366;} else{ goto _LL3367;}
! _LL3367: if(( unsigned int) _temp3361 >  1u?*(( int*) _temp3361) ==  Cyc_Absyn_Global_b:
! 0){ _LL3376: _temp3375=(( struct Cyc_Absyn_Global_b_struct*) _temp3361)->f1;
! goto _LL3368;} else{ goto _LL3369;} _LL3369: if(( unsigned int) _temp3361 >  1u?*((
! int*) _temp3361) ==  Cyc_Absyn_Local_b: 0){ _LL3378: _temp3377=(( struct Cyc_Absyn_Local_b_struct*)
! _temp3361)->f1; goto _LL3370;} else{ goto _LL3371;} _LL3371: if(( unsigned int)
! _temp3361 >  1u?*(( int*) _temp3361) ==  Cyc_Absyn_Pat_b: 0){ _LL3380: _temp3379=((
! struct Cyc_Absyn_Pat_b_struct*) _temp3361)->f1; goto _LL3372;} else{ goto
! _LL3373;} _LL3373: if(( unsigned int) _temp3361 >  1u?*(( int*) _temp3361) == 
! Cyc_Absyn_Param_b: 0){ _LL3382: _temp3381=(( struct Cyc_Absyn_Param_b_struct*)
! _temp3361)->f1; goto _LL3374;} else{ goto _LL3362;} _LL3364: return bogus_ans;
! _LL3366: return({ struct _tuple7 _temp3383; _temp3383.f1= 0; _temp3383.f2=( void*)
! Cyc_Absyn_HeapRgn; _temp3383;}); _LL3368: { void* _temp3384= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v); _LL3386: if((
! unsigned int) _temp3384 >  4u?*(( int*) _temp3384) ==  Cyc_Absyn_ArrayType: 0){
! goto _LL3387;} else{ goto _LL3388;} _LL3388: goto _LL3389; _LL3387: return({
! struct _tuple7 _temp3390; _temp3390.f1= 1; _temp3390.f2=( void*) Cyc_Absyn_HeapRgn;
! _temp3390;}); _LL3389: return({ struct _tuple7 _temp3391; _temp3391.f1=(
! _temp3375->tq).q_const; _temp3391.f2=( void*) Cyc_Absyn_HeapRgn; _temp3391;});
! _LL3385:;} _LL3370: { void* _temp3392= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v); _LL3394: if(( unsigned int) _temp3392 >  4u?*(( int*)
! _temp3392) ==  Cyc_Absyn_ArrayType: 0){ goto _LL3395;} else{ goto _LL3396;}
! _LL3396: goto _LL3397; _LL3395: return({ struct _tuple7 _temp3398; _temp3398.f1=
! 1; _temp3398.f2=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp3377->rgn))->v;
! _temp3398;}); _LL3397: return({ struct _tuple7 _temp3399; _temp3399.f1=(
! _temp3377->tq).q_const; _temp3399.f2=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp3377->rgn))->v; _temp3399;}); _LL3393:;} _LL3372: _temp3381=
! _temp3379; goto _LL3374; _LL3374: return({ struct _tuple7 _temp3400; _temp3400.f1=(
! _temp3381->tq).q_const; _temp3400.f2=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp3381->rgn))->v; _temp3400;}); _LL3362:;} _LL3334: { void*
! _temp3401= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp3349->topt))->v); struct Cyc_List_List* _temp3413; struct Cyc_List_List*
! _temp3415; struct Cyc_Absyn_Structdecl** _temp3417; struct Cyc_Absyn_Structdecl*
! _temp3419; struct Cyc_Absyn_Uniondecl** _temp3420; struct Cyc_Absyn_Uniondecl*
! _temp3422; _LL3403: if(( unsigned int) _temp3401 >  4u?*(( int*) _temp3401) == 
! Cyc_Absyn_AnonStructType: 0){ _LL3414: _temp3413=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp3401)->f1; goto _LL3404;} else{ goto _LL3405;} _LL3405: if(( unsigned int)
! _temp3401 >  4u?*(( int*) _temp3401) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3416:
! _temp3415=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp3401)->f1; goto
! _LL3406;} else{ goto _LL3407;} _LL3407: if(( unsigned int) _temp3401 >  4u?*((
! int*) _temp3401) ==  Cyc_Absyn_StructType: 0){ _LL3418: _temp3417=(( struct Cyc_Absyn_StructType_struct*)
! _temp3401)->f3; if( _temp3417 ==  0){ goto _LL3409;} else{ _temp3419=* _temp3417;
! goto _LL3408;}} else{ goto _LL3409;} _LL3409: if(( unsigned int) _temp3401 >  4u?*((
! int*) _temp3401) ==  Cyc_Absyn_UnionType: 0){ _LL3421: _temp3420=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3401)->f3; if( _temp3420 ==  0){ goto _LL3411;} else{ _temp3422=* _temp3420;
! goto _LL3410;}} else{ goto _LL3411;} _LL3411: goto _LL3412; _LL3404: _temp3415=
! _temp3413; goto _LL3406; _LL3406: { struct Cyc_Absyn_Structfield* _temp3423= Cyc_Absyn_lookup_field(
! _temp3415, _temp3347); if( _temp3423 !=  0?(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3423))->width !=  0: 0){ return({ struct _tuple7 _temp3424;
! _temp3424.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3423))->tq).q_const;
! _temp3424.f2=( Cyc_Tcutil_addressof_props( te, _temp3349)).f2; _temp3424;});}
! return bogus_ans;} _LL3408: { struct Cyc_Absyn_Structfield* _temp3425= Cyc_Absyn_lookup_struct_field(
! _temp3419, _temp3347); if( _temp3425 !=  0?(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3425))->width !=  0: 0){ return({ struct _tuple7 _temp3426;
! _temp3426.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3425))->tq).q_const;
! _temp3426.f2=( Cyc_Tcutil_addressof_props( te, _temp3349)).f2; _temp3426;});}
! return bogus_ans;} _LL3410: { struct Cyc_Absyn_Structfield* _temp3427= Cyc_Absyn_lookup_union_field(
! _temp3422, _temp3347); if( _temp3427 !=  0){ return({ struct _tuple7 _temp3428;
! _temp3428.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3427))->tq).q_const;
! _temp3428.f2=( Cyc_Tcutil_addressof_props( te, _temp3349)).f2; _temp3428;});}
! goto _LL3412;} _LL3412: return bogus_ans; _LL3402:;} _LL3336: { void* _temp3429=
! Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null( _temp3353->topt))->v);
! struct Cyc_Absyn_PtrInfo _temp3435; void* _temp3437; void* _temp3439; _LL3431:
! if(( unsigned int) _temp3429 >  4u?*(( int*) _temp3429) ==  Cyc_Absyn_PointerType:
! 0){ _LL3436: _temp3435=(( struct Cyc_Absyn_PointerType_struct*) _temp3429)->f1;
! _LL3440: _temp3439=( void*) _temp3435.elt_typ; goto _LL3438; _LL3438: _temp3437=(
! void*) _temp3435.rgn_typ; goto _LL3432;} else{ goto _LL3433;} _LL3433: goto
! _LL3434; _LL3432: { void* _temp3441= Cyc_Tcutil_compress( _temp3439); struct Cyc_List_List*
! _temp3453; struct Cyc_List_List* _temp3455; struct Cyc_Absyn_Structdecl**
! _temp3457; struct Cyc_Absyn_Structdecl* _temp3459; struct Cyc_Absyn_Uniondecl**
! _temp3460; struct Cyc_Absyn_Uniondecl* _temp3462; _LL3443: if(( unsigned int)
! _temp3441 >  4u?*(( int*) _temp3441) ==  Cyc_Absyn_AnonStructType: 0){ _LL3454:
! _temp3453=(( struct Cyc_Absyn_AnonStructType_struct*) _temp3441)->f1; goto
! _LL3444;} else{ goto _LL3445;} _LL3445: if(( unsigned int) _temp3441 >  4u?*((
! int*) _temp3441) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3456: _temp3455=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp3441)->f1; goto _LL3446;} else{ goto
! _LL3447;} _LL3447: if(( unsigned int) _temp3441 >  4u?*(( int*) _temp3441) == 
! Cyc_Absyn_StructType: 0){ _LL3458: _temp3457=(( struct Cyc_Absyn_StructType_struct*)
! _temp3441)->f3; if( _temp3457 ==  0){ goto _LL3449;} else{ _temp3459=* _temp3457;
! goto _LL3448;}} else{ goto _LL3449;} _LL3449: if(( unsigned int) _temp3441 >  4u?*((
! int*) _temp3441) ==  Cyc_Absyn_UnionType: 0){ _LL3461: _temp3460=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3441)->f3; if( _temp3460 ==  0){ goto _LL3451;} else{ _temp3462=* _temp3460;
! goto _LL3450;}} else{ goto _LL3451;} _LL3451: goto _LL3452; _LL3444: _temp3455=
! _temp3453; goto _LL3446; _LL3446: { struct Cyc_Absyn_Structfield* _temp3463= Cyc_Absyn_lookup_field(
! _temp3455, _temp3351); if( _temp3463 !=  0?(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3463))->width !=  0: 0){ return({ struct _tuple7 _temp3464;
! _temp3464.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3463))->tq).q_const;
! _temp3464.f2= _temp3437; _temp3464;});} return bogus_ans;} _LL3448: { struct Cyc_Absyn_Structfield*
! _temp3465= Cyc_Absyn_lookup_struct_field( _temp3459, _temp3351); if( _temp3465
! !=  0?(( struct Cyc_Absyn_Structfield*) _check_null( _temp3465))->width !=  0: 0){
! return({ struct _tuple7 _temp3466; _temp3466.f1=((( struct Cyc_Absyn_Structfield*)
! _check_null( _temp3465))->tq).q_const; _temp3466.f2= _temp3437; _temp3466;});}
! return bogus_ans;} _LL3450: { struct Cyc_Absyn_Structfield* _temp3467= Cyc_Absyn_lookup_union_field(
! _temp3462, _temp3351); if( _temp3467 !=  0){ return({ struct _tuple7 _temp3468;
! _temp3468.f1=((( struct Cyc_Absyn_Structfield*) _check_null( _temp3467))->tq).q_const;
! _temp3468.f2= _temp3437; _temp3468;});} return bogus_ans;} _LL3452: return
! bogus_ans; _LL3442:;} _LL3434: return bogus_ans; _LL3430:;} _LL3338: { void*
! _temp3469= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp3355->topt))->v); struct Cyc_Absyn_PtrInfo _temp3475; struct Cyc_Absyn_Tqual
! _temp3477; void* _temp3479; _LL3471: if(( unsigned int) _temp3469 >  4u?*(( int*)
! _temp3469) ==  Cyc_Absyn_PointerType: 0){ _LL3476: _temp3475=(( struct Cyc_Absyn_PointerType_struct*)
! _temp3469)->f1; _LL3480: _temp3479=( void*) _temp3475.rgn_typ; goto _LL3478;
! _LL3478: _temp3477= _temp3475.tq; goto _LL3472;} else{ goto _LL3473;} _LL3473:
! goto _LL3474; _LL3472: return({ struct _tuple7 _temp3481; _temp3481.f1=
! _temp3477.q_const; _temp3481.f2= _temp3479; _temp3481;}); _LL3474: return
! bogus_ans; _LL3470:;} _LL3340: { void* t= Cyc_Tcutil_compress(( void*)(( struct
! Cyc_Core_Opt*) _check_null( _temp3359->topt))->v); void* _temp3482= t; struct
! Cyc_Absyn_Tqual _temp3492; struct Cyc_List_List* _temp3494; struct Cyc_Absyn_PtrInfo
! _temp3496; struct Cyc_Absyn_Conref* _temp3498; struct Cyc_Absyn_Tqual _temp3500;
! void* _temp3502; void* _temp3504; _LL3484: if(( unsigned int) _temp3482 >  4u?*((
! int*) _temp3482) ==  Cyc_Absyn_ArrayType: 0){ _LL3493: _temp3492=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp3482)->f2; goto _LL3485;} else{ goto _LL3486;} _LL3486: if(( unsigned int)
! _temp3482 >  4u?*(( int*) _temp3482) ==  Cyc_Absyn_TupleType: 0){ _LL3495:
! _temp3494=(( struct Cyc_Absyn_TupleType_struct*) _temp3482)->f1; goto _LL3487;}
! else{ goto _LL3488;} _LL3488: if(( unsigned int) _temp3482 >  4u?*(( int*)
! _temp3482) ==  Cyc_Absyn_PointerType: 0){ _LL3497: _temp3496=(( struct Cyc_Absyn_PointerType_struct*)
! _temp3482)->f1; _LL3505: _temp3504=( void*) _temp3496.elt_typ; goto _LL3503;
! _LL3503: _temp3502=( void*) _temp3496.rgn_typ; goto _LL3501; _LL3501: _temp3500=
! _temp3496.tq; goto _LL3499; _LL3499: _temp3498= _temp3496.bounds; goto _LL3489;}
! else{ goto _LL3490;} _LL3490: goto _LL3491; _LL3485: return({ struct _tuple7
! _temp3506; _temp3506.f1= _temp3492.q_const; _temp3506.f2=( Cyc_Tcutil_addressof_props(
! te, _temp3359)).f2; _temp3506;}); _LL3487: { struct _tuple4* _temp3507= Cyc_Absyn_lookup_tuple_field(
! _temp3494,( int) Cyc_Evexp_eval_const_uint_exp( _temp3357)); if( _temp3507 !=  0){
! return({ struct _tuple7 _temp3508; _temp3508.f1=((*(( struct _tuple4*)
! _check_null( _temp3507))).f1).q_const; _temp3508.f2=( Cyc_Tcutil_addressof_props(
! te, _temp3359)).f2; _temp3508;});} return bogus_ans;} _LL3489: return({ struct
! _tuple7 _temp3509; _temp3509.f1= _temp3500.q_const; _temp3509.f2= _temp3502;
! _temp3509;}); _LL3491: return bogus_ans; _LL3483:;} _LL3342:({ void* _temp3510[
  0u]={}; Cyc_Tcutil_terr( e->loc, _tag_arr("unary & applied to non-lvalue",
! sizeof( unsigned char), 30u), _tag_arr( _temp3510, sizeof( void*), 0u));});
! return bogus_ans; _LL3330:;} void* Cyc_Tcutil_array_to_ptr( struct Cyc_Tcenv_Tenv*
! te, void* e_typ, struct Cyc_Absyn_Exp* e){ void* _temp3512= Cyc_Tcutil_compress(
! e_typ); struct Cyc_Absyn_Tqual _temp3518; void* _temp3520; _LL3514: if((
! unsigned int) _temp3512 >  4u?*(( int*) _temp3512) ==  Cyc_Absyn_ArrayType: 0){
! _LL3521: _temp3520=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp3512)->f1;
! goto _LL3519; _LL3519: _temp3518=(( struct Cyc_Absyn_ArrayType_struct*)
! _temp3512)->f2; goto _LL3515;} else{ goto _LL3516;} _LL3516: goto _LL3517;
! _LL3515: { void* _temp3524; struct _tuple7 _temp3522= Cyc_Tcutil_addressof_props(
! te, e); _LL3525: _temp3524= _temp3522.f2; goto _LL3523; _LL3523: return Cyc_Absyn_atb_typ(
! _temp3520, _temp3524, _temp3518,( void*)({ struct Cyc_Absyn_Upper_b_struct*
! _temp3526=( struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp3526[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp3527; _temp3527.tag= Cyc_Absyn_Upper_b;
! _temp3527.f1= e; _temp3527;}); _temp3526;}));} _LL3517: return e_typ; _LL3513:;}
  void Cyc_Tcutil_check_bound( struct Cyc_Position_Segment* loc, unsigned int i,
! struct Cyc_Absyn_Conref* b){ b= Cyc_Absyn_compress_conref( b);{ void* _temp3528=(
! void*) b->v; void* _temp3536; void* _temp3538; struct Cyc_Absyn_Exp* _temp3540;
! _LL3530: if(( unsigned int) _temp3528 >  1u?*(( int*) _temp3528) ==  Cyc_Absyn_Eq_constr:
! 0){ _LL3537: _temp3536=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp3528)->f1;
! if( _temp3536 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL3531;} else{ goto
! _LL3532;}} else{ goto _LL3532;} _LL3532: if(( unsigned int) _temp3528 >  1u?*((
! int*) _temp3528) ==  Cyc_Absyn_Eq_constr: 0){ _LL3539: _temp3538=( void*)((
! struct Cyc_Absyn_Eq_constr_struct*) _temp3528)->f1; if(( unsigned int) _temp3538
! >  1u?*(( int*) _temp3538) ==  Cyc_Absyn_Upper_b: 0){ _LL3541: _temp3540=((
! struct Cyc_Absyn_Upper_b_struct*) _temp3538)->f1; goto _LL3533;} else{ goto
! _LL3534;}} else{ goto _LL3534;} _LL3534: goto _LL3535; _LL3531: return; _LL3533:
! if( Cyc_Evexp_eval_const_uint_exp( _temp3540) <=  i){({ void* _temp3542[ 0u]={};
  Cyc_Tcutil_terr( loc, _tag_arr("dereference is out of bounds", sizeof(
! unsigned char), 29u), _tag_arr( _temp3542, sizeof( void*), 0u));});} return;
! _LL3535:( void*)( b->v=( void*)(( void*)({ struct Cyc_Absyn_Eq_constr_struct*
! _temp3543=( struct Cyc_Absyn_Eq_constr_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Eq_constr_struct));
! _temp3543[ 0]=({ struct Cyc_Absyn_Eq_constr_struct _temp3544; _temp3544.tag= Cyc_Absyn_Eq_constr;
! _temp3544.f1=( void*)(( void*)({ struct Cyc_Absyn_Upper_b_struct* _temp3545=(
  struct Cyc_Absyn_Upper_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Upper_b_struct));
! _temp3545[ 0]=({ struct Cyc_Absyn_Upper_b_struct _temp3546; _temp3546.tag= Cyc_Absyn_Upper_b;
! _temp3546.f1= Cyc_Absyn_uint_exp( i +  1, 0); _temp3546;}); _temp3545;}));
! _temp3544;}); _temp3543;}))); return; _LL3529:;}} void Cyc_Tcutil_check_nonzero_bound(
  struct Cyc_Position_Segment* loc, struct Cyc_Absyn_Conref* b){ Cyc_Tcutil_check_bound(
  loc, 0, b);} int Cyc_Tcutil_is_bound_one( struct Cyc_Absyn_Conref* b){ void*
! _temp3547=( void*)( Cyc_Absyn_compress_conref( b))->v; void* _temp3553; struct
! Cyc_Absyn_Exp* _temp3555; _LL3549: if(( unsigned int) _temp3547 >  1u?*(( int*)
! _temp3547) ==  Cyc_Absyn_Eq_constr: 0){ _LL3554: _temp3553=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3547)->f1; if(( unsigned int) _temp3553 >  1u?*(( int*) _temp3553) ==  Cyc_Absyn_Upper_b:
! 0){ _LL3556: _temp3555=(( struct Cyc_Absyn_Upper_b_struct*) _temp3553)->f1; goto
! _LL3550;} else{ goto _LL3551;}} else{ goto _LL3551;} _LL3551: goto _LL3552;
! _LL3550: return Cyc_Evexp_eval_const_uint_exp( _temp3555) ==  1; _LL3552: return
! 0; _LL3548:;} int Cyc_Tcutil_bits_only( void* t){ void* _temp3557= Cyc_Tcutil_compress(
! t); void* _temp3583; struct Cyc_List_List* _temp3585; struct Cyc_Absyn_Structdecl**
! _temp3587; struct Cyc_List_List* _temp3589; struct Cyc_Absyn_Uniondecl**
! _temp3591; struct Cyc_List_List* _temp3593; struct Cyc_List_List* _temp3595;
! struct Cyc_List_List* _temp3597; _LL3559: if( _temp3557 == ( void*) Cyc_Absyn_VoidType){
! goto _LL3560;} else{ goto _LL3561;} _LL3561: if(( unsigned int) _temp3557 >  4u?*((
! int*) _temp3557) ==  Cyc_Absyn_IntType: 0){ goto _LL3562;} else{ goto _LL3563;}
! _LL3563: if( _temp3557 == ( void*) Cyc_Absyn_FloatType){ goto _LL3564;} else{
! goto _LL3565;} _LL3565: if( _temp3557 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL3566;} else{ goto _LL3567;} _LL3567: if(( unsigned int) _temp3557 >  4u?*((
! int*) _temp3557) ==  Cyc_Absyn_EnumType: 0){ goto _LL3568;} else{ goto _LL3569;}
! _LL3569: if(( unsigned int) _temp3557 >  4u?*(( int*) _temp3557) ==  Cyc_Absyn_ArrayType:
! 0){ _LL3584: _temp3583=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp3557)->f1;
! goto _LL3570;} else{ goto _LL3571;} _LL3571: if(( unsigned int) _temp3557 >  4u?*((
! int*) _temp3557) ==  Cyc_Absyn_TupleType: 0){ _LL3586: _temp3585=(( struct Cyc_Absyn_TupleType_struct*)
! _temp3557)->f1; goto _LL3572;} else{ goto _LL3573;} _LL3573: if(( unsigned int)
! _temp3557 >  4u?*(( int*) _temp3557) ==  Cyc_Absyn_StructType: 0){ _LL3590:
! _temp3589=(( struct Cyc_Absyn_StructType_struct*) _temp3557)->f2; goto _LL3588;
! _LL3588: _temp3587=(( struct Cyc_Absyn_StructType_struct*) _temp3557)->f3; goto
! _LL3574;} else{ goto _LL3575;} _LL3575: if(( unsigned int) _temp3557 >  4u?*((
! int*) _temp3557) ==  Cyc_Absyn_UnionType: 0){ _LL3594: _temp3593=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3557)->f2; goto _LL3592; _LL3592: _temp3591=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3557)->f3; goto _LL3576;} else{ goto _LL3577;} _LL3577: if(( unsigned int)
! _temp3557 >  4u?*(( int*) _temp3557) ==  Cyc_Absyn_AnonStructType: 0){ _LL3596:
! _temp3595=(( struct Cyc_Absyn_AnonStructType_struct*) _temp3557)->f1; goto
! _LL3578;} else{ goto _LL3579;} _LL3579: if(( unsigned int) _temp3557 >  4u?*((
! int*) _temp3557) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3598: _temp3597=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp3557)->f1; goto _LL3580;} else{ goto
! _LL3581;} _LL3581: goto _LL3582; _LL3560: goto _LL3562; _LL3562: goto _LL3564;
! _LL3564: goto _LL3566; _LL3566: return 1; _LL3568: return 0; _LL3570: return Cyc_Tcutil_bits_only(
! _temp3583); _LL3572: for( 0; _temp3585 !=  0; _temp3585=(( struct Cyc_List_List*)
! _check_null( _temp3585))->tl){ if( ! Cyc_Tcutil_bits_only((*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp3585))->hd)).f2)){ return 0;}} return 1;
! _LL3574: if( _temp3587 ==  0){ return 0;}{ struct Cyc_Absyn_Structdecl*
! _temp3599=*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp3587)); if(
! _temp3599->fields ==  0){ return 0;}{ struct _RegionHandle _temp3600=
! _new_region(); struct _RegionHandle* rgn=& _temp3600; _push_region( rgn);{
! struct Cyc_List_List* _temp3601=(( struct Cyc_List_List*(*)( struct
  _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x, struct Cyc_List_List*
! y)) Cyc_List_rzip)( rgn, rgn, _temp3599->tvs, _temp3589);{ struct Cyc_List_List*
! fs=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp3599->fields))->v;
  for( 0; fs !=  0; fs=(( struct Cyc_List_List*) _check_null( fs))->tl){ if( ! Cyc_Tcutil_bits_only(
! Cyc_Tcutil_rsubstitute( rgn, _temp3601,( void*)(( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( fs))->hd)->type))){ int _temp3602= 0;
! _npop_handler( 0u); return _temp3602;}}}{ int _temp3603= 1; _npop_handler( 0u);
! return _temp3603;}}; _pop_region( rgn);}} _LL3576: if( _temp3591 ==  0){ return
! 0;}{ struct Cyc_Absyn_Uniondecl* _temp3604=*(( struct Cyc_Absyn_Uniondecl**)
! _check_null( _temp3591)); if( _temp3604->fields ==  0){ return 0;}{ struct
! _RegionHandle _temp3605= _new_region(); struct _RegionHandle* rgn=& _temp3605;
! _push_region( rgn);{ struct Cyc_List_List* _temp3606=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x,
! struct Cyc_List_List* y)) Cyc_List_rzip)( rgn, rgn, _temp3604->tvs, _temp3593);{
  struct Cyc_List_List* fs=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp3604->fields))->v; for( 0; fs !=  0; fs=(( struct Cyc_List_List*)
  _check_null( fs))->tl){ if( ! Cyc_Tcutil_bits_only( Cyc_Tcutil_rsubstitute( rgn,
! _temp3606,( void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*)
! _check_null( fs))->hd)->type))){ int _temp3607= 0; _npop_handler( 0u); return
! _temp3607;}}}{ int _temp3608= 1; _npop_handler( 0u); return _temp3608;}};
! _pop_region( rgn);}} _LL3578: _temp3597= _temp3595; goto _LL3580; _LL3580: for(
! 0; _temp3597 !=  0; _temp3597=(( struct Cyc_List_List*) _check_null( _temp3597))->tl){
  if( ! Cyc_Tcutil_bits_only(( void*)(( struct Cyc_Absyn_Structfield*)(( struct
! Cyc_List_List*) _check_null( _temp3597))->hd)->type)){ return 0;}} return 1;
! _LL3582: return 0; _LL3558:;} struct _tuple20{ struct Cyc_List_List* f1; struct
  Cyc_Absyn_Exp* f2; } ; static int Cyc_Tcutil_cnst_exp( struct Cyc_Tcenv_Tenv* te,
! int var_okay, struct Cyc_Absyn_Exp* e){ void* _temp3609=( void*) e->r; struct
! _tuple1* _temp3651; struct Cyc_Absyn_Exp* _temp3653; struct Cyc_Absyn_Exp*
! _temp3655; struct Cyc_Absyn_Exp* _temp3657; struct Cyc_Absyn_Exp* _temp3659;
! struct Cyc_Absyn_Exp* _temp3661; struct Cyc_Absyn_Exp* _temp3663; struct Cyc_Absyn_Exp*
! _temp3665; struct Cyc_Absyn_Exp* _temp3667; void* _temp3669; struct Cyc_Absyn_Exp*
! _temp3671; struct Cyc_Absyn_Exp* _temp3673; struct Cyc_Absyn_Exp* _temp3675;
! struct Cyc_List_List* _temp3677; struct Cyc_List_List* _temp3679; struct Cyc_List_List*
! _temp3681; struct Cyc_List_List* _temp3683; void* _temp3685; struct Cyc_List_List*
! _temp3687; struct Cyc_List_List* _temp3689; _LL3611: if(*(( int*) _temp3609) == 
! Cyc_Absyn_Const_e){ goto _LL3612;} else{ goto _LL3613;} _LL3613: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Sizeoftyp_e){ goto _LL3614;} else{ goto _LL3615;}
! _LL3615: if(*(( int*) _temp3609) ==  Cyc_Absyn_Sizeofexp_e){ goto _LL3616;}
! else{ goto _LL3617;} _LL3617: if(*(( int*) _temp3609) ==  Cyc_Absyn_Gentyp_e){
! goto _LL3618;} else{ goto _LL3619;} _LL3619: if(*(( int*) _temp3609) ==  Cyc_Absyn_Enum_e){
! goto _LL3620;} else{ goto _LL3621;} _LL3621: if(*(( int*) _temp3609) ==  Cyc_Absyn_Var_e){
! _LL3652: _temp3651=(( struct Cyc_Absyn_Var_e_struct*) _temp3609)->f1; goto
! _LL3622;} else{ goto _LL3623;} _LL3623: if(*(( int*) _temp3609) ==  Cyc_Absyn_Conditional_e){
! _LL3658: _temp3657=(( struct Cyc_Absyn_Conditional_e_struct*) _temp3609)->f1;
! goto _LL3656; _LL3656: _temp3655=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp3609)->f2; goto _LL3654; _LL3654: _temp3653=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp3609)->f3; goto _LL3624;} else{ goto _LL3625;} _LL3625: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_SeqExp_e){ _LL3662: _temp3661=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp3609)->f1; goto _LL3660; _LL3660: _temp3659=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp3609)->f2; goto _LL3626;} else{ goto _LL3627;} _LL3627: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_NoInstantiate_e){ _LL3664: _temp3663=(( struct Cyc_Absyn_NoInstantiate_e_struct*)
! _temp3609)->f1; goto _LL3628;} else{ goto _LL3629;} _LL3629: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Instantiate_e){ _LL3666: _temp3665=(( struct Cyc_Absyn_Instantiate_e_struct*)
! _temp3609)->f1; goto _LL3630;} else{ goto _LL3631;} _LL3631: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Cast_e){ _LL3670: _temp3669=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp3609)->f1; goto _LL3668; _LL3668: _temp3667=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp3609)->f2; goto _LL3632;} else{ goto _LL3633;} _LL3633: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Address_e){ _LL3672: _temp3671=(( struct Cyc_Absyn_Address_e_struct*)
! _temp3609)->f1; goto _LL3634;} else{ goto _LL3635;} _LL3635: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Comprehension_e){ _LL3676: _temp3675=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp3609)->f2; goto _LL3674; _LL3674: _temp3673=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp3609)->f3; goto _LL3636;} else{ goto _LL3637;} _LL3637: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Array_e){ _LL3678: _temp3677=(( struct Cyc_Absyn_Array_e_struct*)
! _temp3609)->f1; goto _LL3638;} else{ goto _LL3639;} _LL3639: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_AnonStruct_e){ _LL3680: _temp3679=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp3609)->f2; goto _LL3640;} else{ goto _LL3641;} _LL3641: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Struct_e){ _LL3682: _temp3681=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp3609)->f3; goto _LL3642;} else{ goto _LL3643;} _LL3643: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Primop_e){ _LL3686: _temp3685=( void*)(( struct Cyc_Absyn_Primop_e_struct*)
! _temp3609)->f1; goto _LL3684; _LL3684: _temp3683=(( struct Cyc_Absyn_Primop_e_struct*)
! _temp3609)->f2; goto _LL3644;} else{ goto _LL3645;} _LL3645: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Tuple_e){ _LL3688: _temp3687=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp3609)->f1; goto _LL3646;} else{ goto _LL3647;} _LL3647: if(*(( int*)
! _temp3609) ==  Cyc_Absyn_Tunion_e){ _LL3690: _temp3689=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp3609)->f3; goto _LL3648;} else{ goto _LL3649;} _LL3649: goto _LL3650;
! _LL3612: return 1; _LL3614: return 1; _LL3616: return 1; _LL3618: return 1;
! _LL3620: return 1; _LL3622: { struct _handler_cons _temp3691; _push_handler(&
! _temp3691);{ int _temp3693= 0; if( setjmp( _temp3691.handler)){ _temp3693= 1;}
! if( ! _temp3693){{ void* _temp3694= Cyc_Tcenv_lookup_ordinary( te, e->loc,
! _temp3651); void* _temp3702; void* _temp3704; struct Cyc_Absyn_Vardecl*
! _temp3706; _LL3696: if(*(( int*) _temp3694) ==  Cyc_Tcenv_VarRes){ _LL3703:
! _temp3702=( void*)(( struct Cyc_Tcenv_VarRes_struct*) _temp3694)->f1; if((
! unsigned int) _temp3702 >  1u?*(( int*) _temp3702) ==  Cyc_Absyn_Funname_b: 0){
! goto _LL3697;} else{ goto _LL3698;}} else{ goto _LL3698;} _LL3698: if(*(( int*)
! _temp3694) ==  Cyc_Tcenv_VarRes){ _LL3705: _temp3704=( void*)(( struct Cyc_Tcenv_VarRes_struct*)
! _temp3694)->f1; if(( unsigned int) _temp3704 >  1u?*(( int*) _temp3704) ==  Cyc_Absyn_Global_b:
! 0){ _LL3707: _temp3706=(( struct Cyc_Absyn_Global_b_struct*) _temp3704)->f1;
! goto _LL3699;} else{ goto _LL3700;}} else{ goto _LL3700;} _LL3700: goto _LL3701;
! _LL3697: { int _temp3708= 1; _npop_handler( 0u); return _temp3708;} _LL3699: {
! void* _temp3709= Cyc_Tcutil_compress(( void*) _temp3706->type); _LL3711: if((
! unsigned int) _temp3709 >  4u?*(( int*) _temp3709) ==  Cyc_Absyn_ArrayType: 0){
! goto _LL3712;} else{ goto _LL3713;} _LL3713: goto _LL3714; _LL3712: { int
! _temp3715= 1; _npop_handler( 0u); return _temp3715;} _LL3714: { int _temp3716=
! var_okay; _npop_handler( 0u); return _temp3716;} _LL3710:;} _LL3701: { int
! _temp3717= var_okay; _npop_handler( 0u); return _temp3717;} _LL3695:;};
! _pop_handler();} else{ void* _temp3692=( void*) _exn_thrown; void* _temp3719=
! _temp3692; _LL3721: if( _temp3719 ==  Cyc_Dict_Absent){ goto _LL3722;} else{
! goto _LL3723;} _LL3723: goto _LL3724; _LL3722: return 0; _LL3724:( void) _throw(
! _temp3719); _LL3720:;}}} _LL3624: return( Cyc_Tcutil_cnst_exp( te, 0, _temp3657)?
! Cyc_Tcutil_cnst_exp( te, 0, _temp3655): 0)? Cyc_Tcutil_cnst_exp( te, 0,
! _temp3653): 0; _LL3626: return Cyc_Tcutil_cnst_exp( te, 0, _temp3661)? Cyc_Tcutil_cnst_exp(
! te, 0, _temp3659): 0; _LL3628: _temp3665= _temp3663; goto _LL3630; _LL3630:
! return Cyc_Tcutil_cnst_exp( te, var_okay, _temp3665); _LL3632: return Cyc_Tcutil_cnst_exp(
! te, var_okay, _temp3667); _LL3634: return Cyc_Tcutil_cnst_exp( te, 1, _temp3671);
! _LL3636: return Cyc_Tcutil_cnst_exp( te, 0, _temp3675)? Cyc_Tcutil_cnst_exp( te,
! 0, _temp3673): 0; _LL3638: _temp3679= _temp3677; goto _LL3640; _LL3640:
! _temp3681= _temp3679; goto _LL3642; _LL3642: for( 0; _temp3681 !=  0; _temp3681=((
! struct Cyc_List_List*) _check_null( _temp3681))->tl){ if( ! Cyc_Tcutil_cnst_exp(
! te, 0,(*(( struct _tuple20*)(( struct Cyc_List_List*) _check_null( _temp3681))->hd)).f2)){
! return 0;}} return 1; _LL3644: _temp3687= _temp3683; goto _LL3646; _LL3646:
! _temp3689= _temp3687; goto _LL3648; _LL3648: for( 0; _temp3689 !=  0; _temp3689=((
! struct Cyc_List_List*) _check_null( _temp3689))->tl){ if( ! Cyc_Tcutil_cnst_exp(
! te, 0,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp3689))->hd)){
! return 0;}} return 1; _LL3650: return 0; _LL3610:;} int Cyc_Tcutil_is_const_exp(
  struct Cyc_Tcenv_Tenv* te, struct Cyc_Absyn_Exp* e){ return Cyc_Tcutil_cnst_exp(
  te, 0, e);} static int Cyc_Tcutil_fields_support_default( struct Cyc_List_List*
  tvs, struct Cyc_List_List* ts, struct Cyc_List_List* fs); int Cyc_Tcutil_supports_default(
! void* t){ void* _temp3725= Cyc_Tcutil_compress( t); struct Cyc_Absyn_PtrInfo
! _temp3753; struct Cyc_Absyn_Conref* _temp3755; struct Cyc_Absyn_Conref*
! _temp3757; void* _temp3759; struct Cyc_List_List* _temp3761; struct Cyc_Absyn_Structdecl**
! _temp3763; struct Cyc_List_List* _temp3765; struct Cyc_Absyn_Uniondecl**
! _temp3767; struct Cyc_List_List* _temp3769; struct Cyc_List_List* _temp3771;
! struct Cyc_List_List* _temp3773; _LL3727: if( _temp3725 == ( void*) Cyc_Absyn_VoidType){
! goto _LL3728;} else{ goto _LL3729;} _LL3729: if(( unsigned int) _temp3725 >  4u?*((
! int*) _temp3725) ==  Cyc_Absyn_IntType: 0){ goto _LL3730;} else{ goto _LL3731;}
! _LL3731: if( _temp3725 == ( void*) Cyc_Absyn_FloatType){ goto _LL3732;} else{
! goto _LL3733;} _LL3733: if( _temp3725 == ( void*) Cyc_Absyn_DoubleType){ goto
! _LL3734;} else{ goto _LL3735;} _LL3735: if(( unsigned int) _temp3725 >  4u?*((
! int*) _temp3725) ==  Cyc_Absyn_PointerType: 0){ _LL3754: _temp3753=(( struct Cyc_Absyn_PointerType_struct*)
! _temp3725)->f1; _LL3758: _temp3757= _temp3753.nullable; goto _LL3756; _LL3756:
! _temp3755= _temp3753.bounds; goto _LL3736;} else{ goto _LL3737;} _LL3737: if((
! unsigned int) _temp3725 >  4u?*(( int*) _temp3725) ==  Cyc_Absyn_ArrayType: 0){
! _LL3760: _temp3759=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp3725)->f1;
! goto _LL3738;} else{ goto _LL3739;} _LL3739: if(( unsigned int) _temp3725 >  4u?*((
! int*) _temp3725) ==  Cyc_Absyn_TupleType: 0){ _LL3762: _temp3761=(( struct Cyc_Absyn_TupleType_struct*)
! _temp3725)->f1; goto _LL3740;} else{ goto _LL3741;} _LL3741: if(( unsigned int)
! _temp3725 >  4u?*(( int*) _temp3725) ==  Cyc_Absyn_StructType: 0){ _LL3766:
! _temp3765=(( struct Cyc_Absyn_StructType_struct*) _temp3725)->f2; goto _LL3764;
! _LL3764: _temp3763=(( struct Cyc_Absyn_StructType_struct*) _temp3725)->f3; goto
! _LL3742;} else{ goto _LL3743;} _LL3743: if(( unsigned int) _temp3725 >  4u?*((
! int*) _temp3725) ==  Cyc_Absyn_UnionType: 0){ _LL3770: _temp3769=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3725)->f2; goto _LL3768; _LL3768: _temp3767=(( struct Cyc_Absyn_UnionType_struct*)
! _temp3725)->f3; goto _LL3744;} else{ goto _LL3745;} _LL3745: if(( unsigned int)
! _temp3725 >  4u?*(( int*) _temp3725) ==  Cyc_Absyn_AnonStructType: 0){ _LL3772:
! _temp3771=(( struct Cyc_Absyn_AnonStructType_struct*) _temp3725)->f1; goto
! _LL3746;} else{ goto _LL3747;} _LL3747: if(( unsigned int) _temp3725 >  4u?*((
! int*) _temp3725) ==  Cyc_Absyn_AnonUnionType: 0){ _LL3774: _temp3773=(( struct
! Cyc_Absyn_AnonUnionType_struct*) _temp3725)->f1; goto _LL3748;} else{ goto
! _LL3749;} _LL3749: if(( unsigned int) _temp3725 >  4u?*(( int*) _temp3725) == 
! Cyc_Absyn_EnumType: 0){ goto _LL3750;} else{ goto _LL3751;} _LL3751: goto
! _LL3752; _LL3728: goto _LL3730; _LL3730: goto _LL3732; _LL3732: goto _LL3734;
! _LL3734: return 1; _LL3736: { void* _temp3775=( void*)( Cyc_Absyn_compress_conref(
! _temp3755))->v; void* _temp3783; void* _temp3785; _LL3777: if(( unsigned int)
! _temp3775 >  1u?*(( int*) _temp3775) ==  Cyc_Absyn_Eq_constr: 0){ _LL3784:
! _temp3783=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp3775)->f1; if(
! _temp3783 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL3778;} else{ goto _LL3779;}}
! else{ goto _LL3779;} _LL3779: if(( unsigned int) _temp3775 >  1u?*(( int*)
! _temp3775) ==  Cyc_Absyn_Eq_constr: 0){ _LL3786: _temp3785=( void*)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3775)->f1; if(( unsigned int) _temp3785 >  1u?*(( int*) _temp3785) ==  Cyc_Absyn_Upper_b:
! 0){ goto _LL3780;} else{ goto _LL3781;}} else{ goto _LL3781;} _LL3781: goto
! _LL3782; _LL3778: return 1; _LL3780: { void* _temp3787=( void*)((( struct Cyc_Absyn_Conref*(*)(
! struct Cyc_Absyn_Conref* x)) Cyc_Absyn_compress_conref)( _temp3757))->v; int
! _temp3793; _LL3789: if(( unsigned int) _temp3787 >  1u?*(( int*) _temp3787) == 
! Cyc_Absyn_Eq_constr: 0){ _LL3794: _temp3793=( int)(( struct Cyc_Absyn_Eq_constr_struct*)
! _temp3787)->f1; goto _LL3790;} else{ goto _LL3791;} _LL3791: goto _LL3792;
! _LL3790: return _temp3793; _LL3792: return 0; _LL3788:;} _LL3782: return 0;
! _LL3776:;} _LL3738: return Cyc_Tcutil_supports_default( _temp3759); _LL3740:
! for( 0; _temp3761 !=  0; _temp3761=(( struct Cyc_List_List*) _check_null(
! _temp3761))->tl){ if( ! Cyc_Tcutil_supports_default((*(( struct _tuple4*)((
! struct Cyc_List_List*) _check_null( _temp3761))->hd)).f2)){ return 0;}} return 1;
! _LL3742: if( _temp3763 ==  0){ return 0;}{ struct Cyc_Absyn_Structdecl* sd=*((
! struct Cyc_Absyn_Structdecl**) _check_null( _temp3763)); if( sd->fields ==  0){
! return 0;} return Cyc_Tcutil_fields_support_default( sd->tvs, _temp3765,( struct
! Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( sd->fields))->v);} _LL3744:
! if( _temp3767 ==  0){ return 0;}{ struct Cyc_Absyn_Uniondecl* ud=*(( struct Cyc_Absyn_Uniondecl**)
! _check_null( _temp3767)); if( ud->fields ==  0){ return 0;} return Cyc_Tcutil_fields_support_default(
! ud->tvs, _temp3769,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null(
! ud->fields))->v);} _LL3746: _temp3773= _temp3771; goto _LL3748; _LL3748: return
! Cyc_Tcutil_fields_support_default( 0, 0, _temp3773); _LL3750: return 1; _LL3752:
! return 0; _LL3726:;} static int Cyc_Tcutil_fields_support_default( struct Cyc_List_List*
  tvs, struct Cyc_List_List* ts, struct Cyc_List_List* fs){{ struct _RegionHandle
! _temp3795= _new_region(); struct _RegionHandle* rgn=& _temp3795; _push_region(
! rgn);{ struct Cyc_List_List* _temp3796=(( struct Cyc_List_List*(*)( struct
  _RegionHandle* r1, struct _RegionHandle* r2, struct Cyc_List_List* x, struct Cyc_List_List*
  y)) Cyc_List_rzip)( rgn, rgn, tvs, ts); for( 0; fs !=  0; fs=(( struct Cyc_List_List*)
! _check_null( fs))->tl){ void* t= Cyc_Tcutil_rsubstitute( rgn, _temp3796,( void*)((
  struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( fs))->hd)->type);
! if( ! Cyc_Tcutil_supports_default( t)){ int _temp3797= 0; _npop_handler( 0u);
! return _temp3797;}}}; _pop_region( rgn);} return 1;}
diff -rbBcN --exclude=CVS i686-unknown-linux/src/toc.c powerpc-apple-rhapsody/src/toc.c
*** i686-unknown-linux/src/toc.c	Wed Oct 10 15:39:58 2001
--- powerpc-apple-rhapsody/src/toc.c	Wed Oct 10 15:39:32 2001
***************
*** 265,327 ****
  x); extern struct Cyc_List_List* Cyc_List_append( struct Cyc_List_List* x,
  struct Cyc_List_List* y); extern struct Cyc_List_List* Cyc_List_imp_append(
  struct Cyc_List_List* x, struct Cyc_List_List* y); extern unsigned char Cyc_List_Nth[
! 8u]; extern void* Cyc_List_nth( struct Cyc_List_List* x, int n); extern int Cyc_List_forall(
! int(* pred)( void*), struct Cyc_List_List* x); extern int Cyc_Std_zstrptrcmp(
! struct _tagged_arr*, struct _tagged_arr*); extern struct _tagged_arr Cyc_Std_strconcat(
! struct _tagged_arr, struct _tagged_arr); struct Cyc_Set_Set; extern struct Cyc_Set_Set*
! Cyc_Set_empty( int(* cmp)( void*, void*)); extern struct Cyc_Set_Set* Cyc_Set_insert(
! struct Cyc_Set_Set* s, void* elt); extern int Cyc_Set_member( struct Cyc_Set_Set*
! s, void* elt); extern unsigned char Cyc_Set_Absent[ 11u]; struct Cyc_Dict_Dict;
! extern unsigned char Cyc_Dict_Present[ 12u]; extern unsigned char Cyc_Dict_Absent[
! 11u]; extern struct Cyc_Dict_Dict* Cyc_Dict_empty( int(* cmp)( void*, void*));
! extern struct Cyc_Dict_Dict* Cyc_Dict_insert( struct Cyc_Dict_Dict* d, void* k,
! void* v); extern void* Cyc_Dict_lookup( struct Cyc_Dict_Dict* d, void* k);
! extern struct Cyc_Core_Opt* Cyc_Dict_lookup_opt( struct Cyc_Dict_Dict* d, void*
! k); struct Cyc_Lineno_Pos{ struct _tagged_arr logical_file; struct _tagged_arr
! line; int line_no; int col; } ; extern unsigned char Cyc_Position_Exit[ 9u];
! struct Cyc_Position_Segment; extern struct _tagged_arr Cyc_Position_string_of_segment(
! struct Cyc_Position_Segment*); static const int Cyc_Position_Lex= 0; static
! const int Cyc_Position_Parse= 1; static const int Cyc_Position_Elab= 2; struct
! Cyc_Position_Error{ struct _tagged_arr source; struct Cyc_Position_Segment* seg;
! void* kind; struct _tagged_arr desc; } ; extern unsigned char Cyc_Position_Nocontext[
! 14u]; struct _tuple0{ void* f1; struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar;
! struct Cyc_Absyn_Tqual; struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo;
! struct Cyc_Absyn_VarargInfo; struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo;
! struct Cyc_Absyn_TunionFieldInfo; struct Cyc_Absyn_VarargCallInfo; struct Cyc_Absyn_Exp;
! struct Cyc_Absyn_Stmt; struct Cyc_Absyn_Pat; struct Cyc_Absyn_Switch_clause;
! struct Cyc_Absyn_SwitchC_clause; struct Cyc_Absyn_Fndecl; struct Cyc_Absyn_Structdecl;
! struct Cyc_Absyn_Uniondecl; struct Cyc_Absyn_Tuniondecl; struct Cyc_Absyn_Tunionfield;
! struct Cyc_Absyn_Enumfield; struct Cyc_Absyn_Enumdecl; struct Cyc_Absyn_Typedefdecl;
! struct Cyc_Absyn_Vardecl; struct Cyc_Absyn_Decl; struct Cyc_Absyn_Structfield;
! static const int Cyc_Absyn_Loc_n= 0; static const int Cyc_Absyn_Rel_n= 0; struct
! Cyc_Absyn_Rel_n_struct{ int tag; struct Cyc_List_List* f1; } ; static const int
! Cyc_Absyn_Abs_n= 1; struct Cyc_Absyn_Abs_n_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_Static= 0; static const int Cyc_Absyn_Abstract=
! 1; static const int Cyc_Absyn_Public= 2; static const int Cyc_Absyn_Extern= 3;
! static const int Cyc_Absyn_ExternC= 4; struct Cyc_Absyn_Tqual{ int q_const: 1;
! int q_volatile: 1; int q_restrict: 1; } ; static const int Cyc_Absyn_B1= 0;
! static const int Cyc_Absyn_B2= 1; static const int Cyc_Absyn_B4= 2; static const
! int Cyc_Absyn_B8= 3; static const int Cyc_Absyn_AnyKind= 0; static const int Cyc_Absyn_MemKind=
! 1; static const int Cyc_Absyn_BoxKind= 2; static const int Cyc_Absyn_RgnKind= 3;
! static const int Cyc_Absyn_EffKind= 4; static const int Cyc_Absyn_Signed= 0;
! static const int Cyc_Absyn_Unsigned= 1; struct Cyc_Absyn_Conref{ void* v; } ;
! static const int Cyc_Absyn_Eq_constr= 0; struct Cyc_Absyn_Eq_constr_struct{ int
! tag; void* f1; } ; static const int Cyc_Absyn_Forward_constr= 1; struct Cyc_Absyn_Forward_constr_struct{
! int tag; struct Cyc_Absyn_Conref* f1; } ; static const int Cyc_Absyn_No_constr=
! 0; struct Cyc_Absyn_Tvar{ struct _tagged_arr* name; int* identity; struct Cyc_Absyn_Conref*
! kind; } ; static const int Cyc_Absyn_Unknown_b= 0; static const int Cyc_Absyn_Upper_b=
! 0; struct Cyc_Absyn_Upper_b_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! struct Cyc_Absyn_PtrInfo{ void* elt_typ; void* rgn_typ; struct Cyc_Absyn_Conref*
! nullable; struct Cyc_Absyn_Tqual tq; struct Cyc_Absyn_Conref* bounds; } ; struct
! Cyc_Absyn_VarargInfo{ struct Cyc_Core_Opt* name; struct Cyc_Absyn_Tqual tq; void*
! type; int inject; } ; struct Cyc_Absyn_FnInfo{ struct Cyc_List_List* tvars;
! struct Cyc_Core_Opt* effect; void* ret_typ; struct Cyc_List_List* args; int
! c_varargs; struct Cyc_Absyn_VarargInfo* cyc_varargs; struct Cyc_List_List*
! rgn_po; struct Cyc_List_List* attributes; } ; struct Cyc_Absyn_UnknownTunionInfo{
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 265,326 ----
  x); extern struct Cyc_List_List* Cyc_List_append( struct Cyc_List_List* x,
  struct Cyc_List_List* y); extern struct Cyc_List_List* Cyc_List_imp_append(
  struct Cyc_List_List* x, struct Cyc_List_List* y); extern unsigned char Cyc_List_Nth[
! 8u]; extern int Cyc_List_forall( int(* pred)( void*), struct Cyc_List_List* x);
! extern int Cyc_Std_zstrptrcmp( struct _tagged_arr*, struct _tagged_arr*); extern
! struct _tagged_arr Cyc_Std_strconcat( struct _tagged_arr, struct _tagged_arr);
! struct Cyc_Set_Set; extern struct Cyc_Set_Set* Cyc_Set_empty( int(* cmp)( void*,
! void*)); extern struct Cyc_Set_Set* Cyc_Set_insert( struct Cyc_Set_Set* s, void*
! elt); extern int Cyc_Set_member( struct Cyc_Set_Set* s, void* elt); extern
! unsigned char Cyc_Set_Absent[ 11u]; struct Cyc_Dict_Dict; extern unsigned char
! Cyc_Dict_Present[ 12u]; extern unsigned char Cyc_Dict_Absent[ 11u]; extern
! struct Cyc_Dict_Dict* Cyc_Dict_empty( int(* cmp)( void*, void*)); extern struct
! Cyc_Dict_Dict* Cyc_Dict_insert( struct Cyc_Dict_Dict* d, void* k, void* v);
! extern void* Cyc_Dict_lookup( struct Cyc_Dict_Dict* d, void* k); extern struct
! Cyc_Core_Opt* Cyc_Dict_lookup_opt( struct Cyc_Dict_Dict* d, void* k); struct Cyc_Lineno_Pos{
! struct _tagged_arr logical_file; struct _tagged_arr line; int line_no; int col;
! } ; extern unsigned char Cyc_Position_Exit[ 9u]; struct Cyc_Position_Segment;
! extern struct _tagged_arr Cyc_Position_string_of_segment( struct Cyc_Position_Segment*);
! static const int Cyc_Position_Lex= 0; static const int Cyc_Position_Parse= 1;
! static const int Cyc_Position_Elab= 2; struct Cyc_Position_Error{ struct
! _tagged_arr source; struct Cyc_Position_Segment* seg; void* kind; struct
! _tagged_arr desc; } ; extern unsigned char Cyc_Position_Nocontext[ 14u]; struct
! _tuple0{ void* f1; struct _tagged_arr* f2; } ; struct Cyc_Absyn_Tvar; struct Cyc_Absyn_Tqual;
! struct Cyc_Absyn_Conref; struct Cyc_Absyn_PtrInfo; struct Cyc_Absyn_VarargInfo;
! struct Cyc_Absyn_FnInfo; struct Cyc_Absyn_TunionInfo; struct Cyc_Absyn_TunionFieldInfo;
! struct Cyc_Absyn_VarargCallInfo; struct Cyc_Absyn_Exp; struct Cyc_Absyn_Stmt;
! struct Cyc_Absyn_Pat; struct Cyc_Absyn_Switch_clause; struct Cyc_Absyn_SwitchC_clause;
! struct Cyc_Absyn_Fndecl; struct Cyc_Absyn_Structdecl; struct Cyc_Absyn_Uniondecl;
! struct Cyc_Absyn_Tuniondecl; struct Cyc_Absyn_Tunionfield; struct Cyc_Absyn_Enumfield;
! struct Cyc_Absyn_Enumdecl; struct Cyc_Absyn_Typedefdecl; struct Cyc_Absyn_Vardecl;
! struct Cyc_Absyn_Decl; struct Cyc_Absyn_Structfield; static const int Cyc_Absyn_Loc_n=
! 0; static const int Cyc_Absyn_Rel_n= 0; struct Cyc_Absyn_Rel_n_struct{ int tag;
! struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Abs_n= 1; struct Cyc_Absyn_Abs_n_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Static= 0;
! static const int Cyc_Absyn_Abstract= 1; static const int Cyc_Absyn_Public= 2;
! static const int Cyc_Absyn_Extern= 3; static const int Cyc_Absyn_ExternC= 4;
! struct Cyc_Absyn_Tqual{ int q_const: 1; int q_volatile: 1; int q_restrict: 1; }
! ; static const int Cyc_Absyn_B1= 0; static const int Cyc_Absyn_B2= 1; static
! const int Cyc_Absyn_B4= 2; static const int Cyc_Absyn_B8= 3; static const int
! Cyc_Absyn_AnyKind= 0; static const int Cyc_Absyn_MemKind= 1; static const int
! Cyc_Absyn_BoxKind= 2; static const int Cyc_Absyn_RgnKind= 3; static const int
! Cyc_Absyn_EffKind= 4; static const int Cyc_Absyn_Signed= 0; static const int Cyc_Absyn_Unsigned=
! 1; struct Cyc_Absyn_Conref{ void* v; } ; static const int Cyc_Absyn_Eq_constr= 0;
! struct Cyc_Absyn_Eq_constr_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Forward_constr=
! 1; struct Cyc_Absyn_Forward_constr_struct{ int tag; struct Cyc_Absyn_Conref* f1;
! } ; static const int Cyc_Absyn_No_constr= 0; struct Cyc_Absyn_Tvar{ struct
! _tagged_arr* name; int* identity; struct Cyc_Absyn_Conref* kind; } ; static
! const int Cyc_Absyn_Unknown_b= 0; static const int Cyc_Absyn_Upper_b= 0; struct
! Cyc_Absyn_Upper_b_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; struct Cyc_Absyn_PtrInfo{
! void* elt_typ; void* rgn_typ; struct Cyc_Absyn_Conref* nullable; struct Cyc_Absyn_Tqual
! tq; struct Cyc_Absyn_Conref* bounds; } ; struct Cyc_Absyn_VarargInfo{ struct Cyc_Core_Opt*
! name; struct Cyc_Absyn_Tqual tq; void* type; int inject; } ; struct Cyc_Absyn_FnInfo{
! struct Cyc_List_List* tvars; struct Cyc_Core_Opt* effect; void* ret_typ; struct
! Cyc_List_List* args; int c_varargs; struct Cyc_Absyn_VarargInfo* cyc_varargs;
! struct Cyc_List_List* rgn_po; struct Cyc_List_List* attributes; } ; struct Cyc_Absyn_UnknownTunionInfo{
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 412,474 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 411,470 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
***************
*** 1068,1143 ****
  _temp196;});} static void* Cyc_Toc_typ_to_c( void* t){ void* _temp197= t; struct
  Cyc_Core_Opt* _temp251; struct Cyc_Core_Opt* _temp253; struct Cyc_Core_Opt
  _temp255; void* _temp256; struct Cyc_Absyn_TunionInfo _temp258; void* _temp260;
! struct Cyc_Absyn_TunionFieldInfo _temp262; void* _temp264; struct Cyc_Absyn_Tunionfield*
! _temp266; struct Cyc_Absyn_Tuniondecl* _temp268; struct Cyc_Absyn_PtrInfo
! _temp270; struct Cyc_Absyn_Conref* _temp272; struct Cyc_Absyn_Tqual _temp274;
! void* _temp276; struct Cyc_Absyn_Exp* _temp278; struct Cyc_Absyn_Tqual _temp280;
! void* _temp282; struct Cyc_Absyn_FnInfo _temp284; struct Cyc_List_List* _temp286;
! struct Cyc_Absyn_VarargInfo* _temp288; int _temp290; struct Cyc_List_List*
! _temp292; void* _temp294; struct Cyc_List_List* _temp296; struct Cyc_List_List*
! _temp298; struct Cyc_List_List* _temp300; struct _tuple0* _temp302; struct
! _tuple0* _temp304; struct _tuple0* _temp306; struct Cyc_Core_Opt* _temp308;
! struct Cyc_List_List* _temp310; struct _tuple0* _temp312; void* _temp314; _LL199:
! if( _temp197 == ( void*) Cyc_Absyn_VoidType){ goto _LL200;} else{ goto _LL201;}
! _LL201: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_Evar:
! 0){ _LL252: _temp251=(( struct Cyc_Absyn_Evar_struct*) _temp197)->f2; if(
! _temp251 ==  0){ goto _LL202;} else{ goto _LL203;}} else{ goto _LL203;} _LL203:
! if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_Evar: 0){
! _LL254: _temp253=(( struct Cyc_Absyn_Evar_struct*) _temp197)->f2; if( _temp253
! ==  0){ goto _LL205;} else{ _temp255=* _temp253; _LL257: _temp256=( void*)
! _temp255.v; goto _LL204;}} else{ goto _LL205;} _LL205: if(( unsigned int)
  _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_VarType: 0){ goto _LL206;}
  else{ goto _LL207;} _LL207: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197)
  ==  Cyc_Absyn_TunionType: 0){ _LL259: _temp258=(( struct Cyc_Absyn_TunionType_struct*)
  _temp197)->f1; _LL261: _temp260=( void*) _temp258.tunion_info; if(*(( int*)
! _temp260) ==  Cyc_Absyn_KnownTunion){ goto _LL208;} else{ goto _LL209;}} else{
! goto _LL209;} _LL209: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) == 
! Cyc_Absyn_TunionType: 0){ goto _LL210;} else{ goto _LL211;} _LL211: if((
! unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TunionFieldType:
! 0){ _LL263: _temp262=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp197)->f1;
! _LL265: _temp264=( void*) _temp262.field_info; if(*(( int*) _temp264) ==  Cyc_Absyn_KnownTunionfield){
! _LL269: _temp268=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp264)->f1;
! goto _LL267; _LL267: _temp266=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp264)->f2; goto _LL212;} else{ goto _LL213;}} else{ goto _LL213;} _LL213:
  if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TunionFieldType:
  0){ goto _LL214;} else{ goto _LL215;} _LL215: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_PointerType: 0){ _LL271: _temp270=(( struct Cyc_Absyn_PointerType_struct*)
! _temp197)->f1; _LL277: _temp276=( void*) _temp270.elt_typ; goto _LL275; _LL275:
! _temp274= _temp270.tq; goto _LL273; _LL273: _temp272= _temp270.bounds; goto
  _LL216;} else{ goto _LL217;} _LL217: if(( unsigned int) _temp197 >  4u?*(( int*)
  _temp197) ==  Cyc_Absyn_IntType: 0){ goto _LL218;} else{ goto _LL219;} _LL219:
  if( _temp197 == ( void*) Cyc_Absyn_FloatType){ goto _LL220;} else{ goto _LL221;}
  _LL221: if( _temp197 == ( void*) Cyc_Absyn_DoubleType){ goto _LL222;} else{ goto
  _LL223;} _LL223: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_ArrayType:
! 0){ _LL283: _temp282=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp197)->f1;
! goto _LL281; _LL281: _temp280=(( struct Cyc_Absyn_ArrayType_struct*) _temp197)->f2;
! goto _LL279; _LL279: _temp278=(( struct Cyc_Absyn_ArrayType_struct*) _temp197)->f3;
  goto _LL224;} else{ goto _LL225;} _LL225: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_FnType: 0){ _LL285: _temp284=(( struct Cyc_Absyn_FnType_struct*)
! _temp197)->f1; _LL295: _temp294=( void*) _temp284.ret_typ; goto _LL293; _LL293:
! _temp292= _temp284.args; goto _LL291; _LL291: _temp290= _temp284.c_varargs; goto
! _LL289; _LL289: _temp288= _temp284.cyc_varargs; goto _LL287; _LL287: _temp286=
! _temp284.attributes; goto _LL226;} else{ goto _LL227;} _LL227: if(( unsigned int)
! _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TupleType: 0){ _LL297: _temp296=((
  struct Cyc_Absyn_TupleType_struct*) _temp197)->f1; goto _LL228;} else{ goto
  _LL229;} _LL229: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_AnonStructType:
! 0){ _LL299: _temp298=(( struct Cyc_Absyn_AnonStructType_struct*) _temp197)->f1;
  goto _LL230;} else{ goto _LL231;} _LL231: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_AnonUnionType: 0){ _LL301: _temp300=(( struct Cyc_Absyn_AnonUnionType_struct*)
  _temp197)->f1; goto _LL232;} else{ goto _LL233;} _LL233: if(( unsigned int)
! _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_UnionType: 0){ _LL303: _temp302=((
  struct Cyc_Absyn_UnionType_struct*) _temp197)->f1; goto _LL234;} else{ goto
  _LL235;} _LL235: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_StructType:
! 0){ _LL305: _temp304=(( struct Cyc_Absyn_StructType_struct*) _temp197)->f1; goto
  _LL236;} else{ goto _LL237;} _LL237: if(( unsigned int) _temp197 >  4u?*(( int*)
! _temp197) ==  Cyc_Absyn_EnumType: 0){ _LL307: _temp306=(( struct Cyc_Absyn_EnumType_struct*)
  _temp197)->f1; goto _LL238;} else{ goto _LL239;} _LL239: if(( unsigned int)
! _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TypedefType: 0){ _LL313:
! _temp312=(( struct Cyc_Absyn_TypedefType_struct*) _temp197)->f1; goto _LL311;
! _LL311: _temp310=(( struct Cyc_Absyn_TypedefType_struct*) _temp197)->f2; goto
! _LL309; _LL309: _temp308=(( struct Cyc_Absyn_TypedefType_struct*) _temp197)->f3;
  goto _LL240;} else{ goto _LL241;} _LL241: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_RgnHandleType: 0){ _LL315: _temp314=( void*)((
  struct Cyc_Absyn_RgnHandleType_struct*) _temp197)->f1; goto _LL242;} else{ goto
  _LL243;} _LL243: if( _temp197 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL244;}
  else{ goto _LL245;} _LL245: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197)
--- 1064,1140 ----
  _temp196;});} static void* Cyc_Toc_typ_to_c( void* t){ void* _temp197= t; struct
  Cyc_Core_Opt* _temp251; struct Cyc_Core_Opt* _temp253; struct Cyc_Core_Opt
  _temp255; void* _temp256; struct Cyc_Absyn_TunionInfo _temp258; void* _temp260;
! struct Cyc_Absyn_Tuniondecl* _temp262; struct Cyc_Absyn_TunionFieldInfo _temp264;
! void* _temp266; struct Cyc_Absyn_Tunionfield* _temp268; struct Cyc_Absyn_Tuniondecl*
! _temp270; struct Cyc_Absyn_PtrInfo _temp272; struct Cyc_Absyn_Conref* _temp274;
! struct Cyc_Absyn_Tqual _temp276; void* _temp278; struct Cyc_Absyn_Exp* _temp280;
! struct Cyc_Absyn_Tqual _temp282; void* _temp284; struct Cyc_Absyn_FnInfo
! _temp286; struct Cyc_List_List* _temp288; struct Cyc_Absyn_VarargInfo* _temp290;
! int _temp292; struct Cyc_List_List* _temp294; void* _temp296; struct Cyc_List_List*
! _temp298; struct Cyc_List_List* _temp300; struct Cyc_List_List* _temp302; struct
! _tuple0* _temp304; struct _tuple0* _temp306; struct _tuple0* _temp308; struct
! Cyc_Core_Opt* _temp310; struct Cyc_List_List* _temp312; struct _tuple0* _temp314;
! void* _temp316; _LL199: if( _temp197 == ( void*) Cyc_Absyn_VoidType){ goto
! _LL200;} else{ goto _LL201;} _LL201: if(( unsigned int) _temp197 >  4u?*(( int*)
! _temp197) ==  Cyc_Absyn_Evar: 0){ _LL252: _temp251=(( struct Cyc_Absyn_Evar_struct*)
! _temp197)->f2; if( _temp251 ==  0){ goto _LL202;} else{ goto _LL203;}} else{
! goto _LL203;} _LL203: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) == 
! Cyc_Absyn_Evar: 0){ _LL254: _temp253=(( struct Cyc_Absyn_Evar_struct*) _temp197)->f2;
! if( _temp253 ==  0){ goto _LL205;} else{ _temp255=* _temp253; _LL257: _temp256=(
! void*) _temp255.v; goto _LL204;}} else{ goto _LL205;} _LL205: if(( unsigned int)
  _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_VarType: 0){ goto _LL206;}
  else{ goto _LL207;} _LL207: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197)
  ==  Cyc_Absyn_TunionType: 0){ _LL259: _temp258=(( struct Cyc_Absyn_TunionType_struct*)
  _temp197)->f1; _LL261: _temp260=( void*) _temp258.tunion_info; if(*(( int*)
! _temp260) ==  Cyc_Absyn_KnownTunion){ _LL263: _temp262=(( struct Cyc_Absyn_KnownTunion_struct*)
! _temp260)->f1; goto _LL208;} else{ goto _LL209;}} else{ goto _LL209;} _LL209:
! if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL210;} else{ goto _LL211;} _LL211: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_TunionFieldType: 0){ _LL265: _temp264=(( struct
! Cyc_Absyn_TunionFieldType_struct*) _temp197)->f1; _LL267: _temp266=( void*)
! _temp264.field_info; if(*(( int*) _temp266) ==  Cyc_Absyn_KnownTunionfield){
! _LL271: _temp270=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp266)->f1;
! goto _LL269; _LL269: _temp268=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp266)->f2; goto _LL212;} else{ goto _LL213;}} else{ goto _LL213;} _LL213:
  if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TunionFieldType:
  0){ goto _LL214;} else{ goto _LL215;} _LL215: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_PointerType: 0){ _LL273: _temp272=(( struct Cyc_Absyn_PointerType_struct*)
! _temp197)->f1; _LL279: _temp278=( void*) _temp272.elt_typ; goto _LL277; _LL277:
! _temp276= _temp272.tq; goto _LL275; _LL275: _temp274= _temp272.bounds; goto
  _LL216;} else{ goto _LL217;} _LL217: if(( unsigned int) _temp197 >  4u?*(( int*)
  _temp197) ==  Cyc_Absyn_IntType: 0){ goto _LL218;} else{ goto _LL219;} _LL219:
  if( _temp197 == ( void*) Cyc_Absyn_FloatType){ goto _LL220;} else{ goto _LL221;}
  _LL221: if( _temp197 == ( void*) Cyc_Absyn_DoubleType){ goto _LL222;} else{ goto
  _LL223;} _LL223: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_ArrayType:
! 0){ _LL285: _temp284=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp197)->f1;
! goto _LL283; _LL283: _temp282=(( struct Cyc_Absyn_ArrayType_struct*) _temp197)->f2;
! goto _LL281; _LL281: _temp280=(( struct Cyc_Absyn_ArrayType_struct*) _temp197)->f3;
  goto _LL224;} else{ goto _LL225;} _LL225: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_FnType: 0){ _LL287: _temp286=(( struct Cyc_Absyn_FnType_struct*)
! _temp197)->f1; _LL297: _temp296=( void*) _temp286.ret_typ; goto _LL295; _LL295:
! _temp294= _temp286.args; goto _LL293; _LL293: _temp292= _temp286.c_varargs; goto
! _LL291; _LL291: _temp290= _temp286.cyc_varargs; goto _LL289; _LL289: _temp288=
! _temp286.attributes; goto _LL226;} else{ goto _LL227;} _LL227: if(( unsigned int)
! _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TupleType: 0){ _LL299: _temp298=((
  struct Cyc_Absyn_TupleType_struct*) _temp197)->f1; goto _LL228;} else{ goto
  _LL229;} _LL229: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_AnonStructType:
! 0){ _LL301: _temp300=(( struct Cyc_Absyn_AnonStructType_struct*) _temp197)->f1;
  goto _LL230;} else{ goto _LL231;} _LL231: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_AnonUnionType: 0){ _LL303: _temp302=(( struct Cyc_Absyn_AnonUnionType_struct*)
  _temp197)->f1; goto _LL232;} else{ goto _LL233;} _LL233: if(( unsigned int)
! _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_UnionType: 0){ _LL305: _temp304=((
  struct Cyc_Absyn_UnionType_struct*) _temp197)->f1; goto _LL234;} else{ goto
  _LL235;} _LL235: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_StructType:
! 0){ _LL307: _temp306=(( struct Cyc_Absyn_StructType_struct*) _temp197)->f1; goto
  _LL236;} else{ goto _LL237;} _LL237: if(( unsigned int) _temp197 >  4u?*(( int*)
! _temp197) ==  Cyc_Absyn_EnumType: 0){ _LL309: _temp308=(( struct Cyc_Absyn_EnumType_struct*)
  _temp197)->f1; goto _LL238;} else{ goto _LL239;} _LL239: if(( unsigned int)
! _temp197 >  4u?*(( int*) _temp197) ==  Cyc_Absyn_TypedefType: 0){ _LL315:
! _temp314=(( struct Cyc_Absyn_TypedefType_struct*) _temp197)->f1; goto _LL313;
! _LL313: _temp312=(( struct Cyc_Absyn_TypedefType_struct*) _temp197)->f2; goto
! _LL311; _LL311: _temp310=(( struct Cyc_Absyn_TypedefType_struct*) _temp197)->f3;
  goto _LL240;} else{ goto _LL241;} _LL241: if(( unsigned int) _temp197 >  4u?*((
! int*) _temp197) ==  Cyc_Absyn_RgnHandleType: 0){ _LL317: _temp316=( void*)((
  struct Cyc_Absyn_RgnHandleType_struct*) _temp197)->f1; goto _LL242;} else{ goto
  _LL243;} _LL243: if( _temp197 == ( void*) Cyc_Absyn_HeapRgn){ goto _LL244;}
  else{ goto _LL245;} _LL245: if(( unsigned int) _temp197 >  4u?*(( int*) _temp197)
***************
*** 1147,1437 ****
  _temp197) ==  Cyc_Absyn_RgnsEff: 0){ goto _LL250;} else{ goto _LL198;} _LL200:
  return t; _LL202: return Cyc_Absyn_sint_t; _LL204: return Cyc_Toc_typ_to_c(
  _temp256); _LL206: return Cyc_Absyn_void_star_typ(); _LL208: return Cyc_Absyn_void_star_typ();
! _LL210:( int) _throw(({ void* _temp316[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("unresolved TunionType",
! sizeof( unsigned char), 22u), _tag_arr( _temp316, sizeof( void*), 0u));}));
! _LL212: if( _temp266->typs ==  0){ if( _temp268->is_xtunion){ return Cyc_Absyn_star_typ(
  Cyc_Absyn_uchar_t,( void*) Cyc_Absyn_HeapRgn, Cyc_Toc_mt_tq);} else{ return Cyc_Absyn_uint_t;}}
! else{ return Cyc_Absyn_strctq( Cyc_Toc_collapse_qvar_tag( _temp266->name,
  _tag_arr("_struct", sizeof( unsigned char), 8u)));} _LL214:( int) _throw(({ void*
! _temp317[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("unresolved TunionFieldType",
! sizeof( unsigned char), 27u), _tag_arr( _temp317, sizeof( void*), 0u));}));
! _LL216: _temp276= Cyc_Toc_typ_to_c_array( _temp276);{ void* _temp318=( void*)(
! Cyc_Absyn_compress_conref( _temp272))->v; void* _temp324; _LL320: if((
! unsigned int) _temp318 >  1u?*(( int*) _temp318) ==  Cyc_Absyn_Eq_constr: 0){
! _LL325: _temp324=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp318)->f1;
! if( _temp324 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL321;} else{ goto _LL322;}}
! else{ goto _LL322;} _LL322: goto _LL323; _LL321: return Cyc_Toc_tagged_arr_typ;
! _LL323: return Cyc_Absyn_star_typ( _temp276,( void*) Cyc_Absyn_HeapRgn, _temp274);
! _LL319:;} _LL218: return t; _LL220: return t; _LL222: return t; _LL224: return(
! void*)({ struct Cyc_Absyn_ArrayType_struct* _temp326=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp326[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp327; _temp327.tag= Cyc_Absyn_ArrayType; _temp327.f1=(
! void*) Cyc_Toc_typ_to_c_array( _temp282); _temp327.f2= _temp280; _temp327.f3=
! _temp278; _temp327;}); _temp326;}); _LL226: { struct Cyc_List_List* _temp328= 0;
! for( 0; _temp286 !=  0; _temp286=(( struct Cyc_List_List*) _check_null( _temp286))->tl){
! void* _temp329=( void*)(( struct Cyc_List_List*) _check_null( _temp286))->hd;
! _LL331: if( _temp329 == ( void*) Cyc_Absyn_Noreturn_att){ goto _LL332;} else{
! goto _LL333;} _LL333: if( _temp329 == ( void*) Cyc_Absyn_Const_att){ goto _LL334;}
! else{ goto _LL335;} _LL335: if(( unsigned int) _temp329 >  16u?*(( int*)
! _temp329) ==  Cyc_Absyn_Format_att: 0){ goto _LL336;} else{ goto _LL337;} _LL337:
! goto _LL338; _LL332: goto _LL334; _LL334: goto _LL336; _LL336: continue; _LL338:
! _temp328=({ struct Cyc_List_List* _temp339=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp339->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null( _temp286))->hd); _temp339->tl= _temp328; _temp339;}); goto _LL330;
! _LL330:;}{ struct Cyc_List_List* _temp340=(( struct Cyc_List_List*(*)( struct
  _tuple1*(* f)( struct _tuple1*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_arg_to_c,
! _temp292); if( _temp288 !=  0){ void* _temp341= Cyc_Toc_typ_to_c( Cyc_Absyn_tagged_typ((
! void*)(( struct Cyc_Absyn_VarargInfo*) _check_null( _temp288))->type,( void*)
! Cyc_Absyn_HeapRgn, Cyc_Toc_mt_tq)); struct _tuple1* _temp342=({ struct _tuple1*
! _temp344=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp344->f1=((
! struct Cyc_Absyn_VarargInfo*) _check_null( _temp288))->name; _temp344->f2=((
! struct Cyc_Absyn_VarargInfo*) _check_null( _temp288))->tq; _temp344->f3=
! _temp341; _temp344;}); _temp340=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_imp_append)( _temp340,({ struct Cyc_List_List*
! _temp343=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp343->hd=( void*) _temp342; _temp343->tl= 0; _temp343;}));} return( void*)({
! struct Cyc_Absyn_FnType_struct* _temp345=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp345[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp346; _temp346.tag= Cyc_Absyn_FnType; _temp346.f1=({ struct Cyc_Absyn_FnInfo
! _temp347; _temp347.tvars= 0; _temp347.effect= 0; _temp347.ret_typ=( void*) Cyc_Toc_typ_to_c(
! _temp294); _temp347.args= _temp340; _temp347.c_varargs= _temp290; _temp347.cyc_varargs=
! 0; _temp347.rgn_po= 0; _temp347.attributes= _temp328; _temp347;}); _temp346;});
! _temp345;});}} _LL228: _temp296=(( struct Cyc_List_List*(*)( struct _tuple3*(* f)(
  struct _tuple3*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_typ_to_c_f,
! _temp296);{ struct _tagged_arr* _temp348= Cyc_Toc_add_tuple_type( _temp296);
! return Cyc_Absyn_strct( _temp348);} _LL230: return( void*)({ struct Cyc_Absyn_AnonStructType_struct*
! _temp349=( struct Cyc_Absyn_AnonStructType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_AnonStructType_struct)); _temp349[ 0]=({ struct Cyc_Absyn_AnonStructType_struct
! _temp350; _temp350.tag= Cyc_Absyn_AnonStructType; _temp350.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Structfield*(* f)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Toc_structfield_to_c, _temp298); _temp350;}); _temp349;});
! _LL232: return( void*)({ struct Cyc_Absyn_AnonUnionType_struct* _temp351=(
  struct Cyc_Absyn_AnonUnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AnonUnionType_struct));
! _temp351[ 0]=({ struct Cyc_Absyn_AnonUnionType_struct _temp352; _temp352.tag=
! Cyc_Absyn_AnonUnionType; _temp352.f1=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(*
  f)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_structfield_to_c,
! _temp300); _temp352;}); _temp351;}); _LL234: if( _temp302 ==  0){({ void*
! _temp353[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)(
! _tag_arr("anonymous union", sizeof( unsigned char), 16u), _tag_arr( _temp353,
  sizeof( void*), 0u));});} return Cyc_Absyn_unionq_typ(( struct _tuple0*)
! _check_null( _temp302)); _LL236: if( _temp304 ==  0){({ void* _temp354[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("anonymous struct",
! sizeof( unsigned char), 17u), _tag_arr( _temp354, sizeof( void*), 0u));});}
! return Cyc_Absyn_strctq(( struct _tuple0*) _check_null( _temp304)); _LL238:
! return t; _LL240: if( _temp308 ==  0){ return({ void* _temp355[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("Toc::typ_to_c: unresolved TypedefType", sizeof( unsigned char), 38u),
! _tag_arr( _temp355, sizeof( void*), 0u));});} return( void*)({ struct Cyc_Absyn_TypedefType_struct*
! _temp356=( struct Cyc_Absyn_TypedefType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TypedefType_struct));
! _temp356[ 0]=({ struct Cyc_Absyn_TypedefType_struct _temp357; _temp357.tag= Cyc_Absyn_TypedefType;
! _temp357.f1= _temp312; _temp357.f2= 0; _temp357.f3=({ struct Cyc_Core_Opt*
! _temp358=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp358->v=( void*) Cyc_Toc_typ_to_c_array(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp308))->v); _temp358;}); _temp357;}); _temp356;}); _LL242:
  return Cyc_Absyn_cstar_typ( Cyc_Absyn_strct( Cyc_Toc__RegionHandle_sp), Cyc_Toc_mt_tq);
! _LL244: return({ void* _temp359[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the heap region",
! sizeof( unsigned char), 55u), _tag_arr( _temp359, sizeof( void*), 0u));});
! _LL246: return({ void* _temp360[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the access eff",
! sizeof( unsigned char), 54u), _tag_arr( _temp360, sizeof( void*), 0u));});
! _LL248: return({ void* _temp361[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the join eff",
! sizeof( unsigned char), 52u), _tag_arr( _temp361, sizeof( void*), 0u));});
! _LL250: return({ void* _temp362[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the regions eff",
! sizeof( unsigned char), 55u), _tag_arr( _temp362, sizeof( void*), 0u));});
  _LL198:;} static struct Cyc_Absyn_Exp* Cyc_Toc_array_to_ptr_cast( void* t,
! struct Cyc_Absyn_Exp* e, struct Cyc_Position_Segment* l){ void* _temp363= t;
! struct Cyc_Absyn_Tqual _temp369; void* _temp371; _LL365: if(( unsigned int)
! _temp363 >  4u?*(( int*) _temp363) ==  Cyc_Absyn_ArrayType: 0){ _LL372: _temp371=(
! void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp363)->f1; goto _LL370; _LL370:
! _temp369=(( struct Cyc_Absyn_ArrayType_struct*) _temp363)->f2; goto _LL366;}
! else{ goto _LL367;} _LL367: goto _LL368; _LL366: return Cyc_Absyn_cast_exp( Cyc_Absyn_star_typ(
! _temp371,( void*) Cyc_Absyn_HeapRgn, _temp369), e, l); _LL368: return Cyc_Absyn_cast_exp(
! t, e, l); _LL364:;} static int Cyc_Toc_atomic_typ( void* t){ void* _temp373= Cyc_Tcutil_compress(
! t); void* _temp411; struct Cyc_Absyn_Structdecl** _temp413; struct Cyc_List_List*
! _temp415; struct Cyc_List_List* _temp417; struct Cyc_Absyn_TunionFieldInfo
! _temp419; void* _temp421; struct Cyc_Absyn_Tunionfield* _temp423; struct Cyc_Absyn_Tuniondecl*
! _temp425; struct Cyc_List_List* _temp427; _LL375: if( _temp373 == ( void*) Cyc_Absyn_VoidType){
! goto _LL376;} else{ goto _LL377;} _LL377: if(( unsigned int) _temp373 >  4u?*((
! int*) _temp373) ==  Cyc_Absyn_VarType: 0){ goto _LL378;} else{ goto _LL379;}
! _LL379: if(( unsigned int) _temp373 >  4u?*(( int*) _temp373) ==  Cyc_Absyn_IntType:
! 0){ goto _LL380;} else{ goto _LL381;} _LL381: if(( unsigned int) _temp373 >  4u?*((
! int*) _temp373) ==  Cyc_Absyn_EnumType: 0){ goto _LL382;} else{ goto _LL383;}
! _LL383: if( _temp373 == ( void*) Cyc_Absyn_FloatType){ goto _LL384;} else{ goto
! _LL385;} _LL385: if( _temp373 == ( void*) Cyc_Absyn_DoubleType){ goto _LL386;}
! else{ goto _LL387;} _LL387: if(( unsigned int) _temp373 >  4u?*(( int*) _temp373)
! ==  Cyc_Absyn_FnType: 0){ goto _LL388;} else{ goto _LL389;} _LL389: if((
! unsigned int) _temp373 >  4u?*(( int*) _temp373) ==  Cyc_Absyn_ArrayType: 0){
! _LL412: _temp411=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp373)->f1;
! goto _LL390;} else{ goto _LL391;} _LL391: if(( unsigned int) _temp373 >  4u?*((
! int*) _temp373) ==  Cyc_Absyn_StructType: 0){ _LL414: _temp413=(( struct Cyc_Absyn_StructType_struct*)
! _temp373)->f3; goto _LL392;} else{ goto _LL393;} _LL393: if(( unsigned int)
! _temp373 >  4u?*(( int*) _temp373) ==  Cyc_Absyn_AnonStructType: 0){ _LL416:
! _temp415=(( struct Cyc_Absyn_AnonStructType_struct*) _temp373)->f1; goto _LL394;}
! else{ goto _LL395;} _LL395: if(( unsigned int) _temp373 >  4u?*(( int*) _temp373)
! ==  Cyc_Absyn_AnonUnionType: 0){ _LL418: _temp417=(( struct Cyc_Absyn_AnonUnionType_struct*)
! _temp373)->f1; goto _LL396;} else{ goto _LL397;} _LL397: if(( unsigned int)
! _temp373 >  4u?*(( int*) _temp373) ==  Cyc_Absyn_TunionFieldType: 0){ _LL420:
! _temp419=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp373)->f1; _LL422:
! _temp421=( void*) _temp419.field_info; if(*(( int*) _temp421) ==  Cyc_Absyn_KnownTunionfield){
! _LL426: _temp425=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp421)->f1;
! goto _LL424; _LL424: _temp423=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp421)->f2; goto _LL398;} else{ goto _LL399;}} else{ goto _LL399;} _LL399:
! if(( unsigned int) _temp373 >  4u?*(( int*) _temp373) ==  Cyc_Absyn_TupleType: 0){
! _LL428: _temp427=(( struct Cyc_Absyn_TupleType_struct*) _temp373)->f1; goto
! _LL400;} else{ goto _LL401;} _LL401: if(( unsigned int) _temp373 >  4u?*(( int*)
! _temp373) ==  Cyc_Absyn_TunionType: 0){ goto _LL402;} else{ goto _LL403;} _LL403:
! if(( unsigned int) _temp373 >  4u?*(( int*) _temp373) ==  Cyc_Absyn_UnionType: 0){
! goto _LL404;} else{ goto _LL405;} _LL405: if(( unsigned int) _temp373 >  4u?*((
! int*) _temp373) ==  Cyc_Absyn_PointerType: 0){ goto _LL406;} else{ goto _LL407;}
! _LL407: if(( unsigned int) _temp373 >  4u?*(( int*) _temp373) ==  Cyc_Absyn_RgnHandleType:
! 0){ goto _LL408;} else{ goto _LL409;} _LL409: goto _LL410; _LL376: return 1;
! _LL378: return 0; _LL380: return 1; _LL382: return 1; _LL384: return 1; _LL386:
! return 1; _LL388: return 1; _LL390: return Cyc_Toc_atomic_typ( _temp411); _LL392:
! if( _temp413 ==  0? 1:(*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp413)))->fields
! ==  0){ return 0;}{ struct Cyc_List_List* _temp429=( struct Cyc_List_List*)((
  struct Cyc_Core_Opt*) _check_null((*(( struct Cyc_Absyn_Structdecl**)
! _check_null( _temp413)))->fields))->v; for( 0; _temp429 !=  0; _temp429=((
! struct Cyc_List_List*) _check_null( _temp429))->tl){ if( ! Cyc_Toc_atomic_typ((
  void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp429))->hd)->type)){ return 0;}}} return 1; _LL394: _temp417= _temp415; goto
! _LL396; _LL396: for( 0; _temp417 !=  0; _temp417=(( struct Cyc_List_List*)
! _check_null( _temp417))->tl){ if( ! Cyc_Toc_atomic_typ(( void*)(( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp417))->hd)->type)){ return 0;}} return
! 1; _LL398: _temp427= _temp423->typs; goto _LL400; _LL400: for( 0; _temp427 !=  0;
! _temp427=(( struct Cyc_List_List*) _check_null( _temp427))->tl){ if( ! Cyc_Toc_atomic_typ((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp427))->hd)).f2)){
! return 0;}} return 1; _LL402: return 0; _LL404: return 0; _LL406: return 0;
! _LL408: return 0; _LL410:({ struct Cyc_Std_String_pa_struct _temp431; _temp431.tag=
! Cyc_Std_String_pa; _temp431.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! void* _temp430[ 1u]={& _temp431};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("atomic_typ:  bad type %s",
! sizeof( unsigned char), 25u), _tag_arr( _temp430, sizeof( void*), 1u));}});
! return 0; _LL374:;} static int Cyc_Toc_is_void_star( void* t){ void* _temp432=
! Cyc_Tcutil_compress( t); struct Cyc_Absyn_PtrInfo _temp438; void* _temp440;
! _LL434: if(( unsigned int) _temp432 >  4u?*(( int*) _temp432) ==  Cyc_Absyn_PointerType:
! 0){ _LL439: _temp438=(( struct Cyc_Absyn_PointerType_struct*) _temp432)->f1;
! _LL441: _temp440=( void*) _temp438.elt_typ; goto _LL435;} else{ goto _LL436;}
! _LL436: goto _LL437; _LL435: { void* _temp442= Cyc_Tcutil_compress( _temp440);
! _LL444: if( _temp442 == ( void*) Cyc_Absyn_VoidType){ goto _LL445;} else{ goto
! _LL446;} _LL446: goto _LL447; _LL445: return 1; _LL447: return 0; _LL443:;}
! _LL437: return 0; _LL433:;} static int Cyc_Toc_is_poly_field( void* t, struct
! _tagged_arr* f){ void* _temp448= Cyc_Tcutil_compress( t); struct Cyc_Absyn_Structdecl**
! _temp460; struct Cyc_Absyn_Structdecl* _temp462; struct Cyc_List_List* _temp463;
! _LL450: if(( unsigned int) _temp448 >  4u?*(( int*) _temp448) ==  Cyc_Absyn_StructType:
! 0){ _LL461: _temp460=(( struct Cyc_Absyn_StructType_struct*) _temp448)->f3; if(
! _temp460 ==  0){ goto _LL452;} else{ _temp462=* _temp460; goto _LL451;}} else{
! goto _LL452;} _LL452: if(( unsigned int) _temp448 >  4u?*(( int*) _temp448) == 
! Cyc_Absyn_AnonStructType: 0){ _LL464: _temp463=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp448)->f1; goto _LL453;} else{ goto _LL454;} _LL454: if(( unsigned int)
! _temp448 >  4u?*(( int*) _temp448) ==  Cyc_Absyn_AnonUnionType: 0){ goto _LL455;}
! else{ goto _LL456;} _LL456: if(( unsigned int) _temp448 >  4u?*(( int*) _temp448)
! ==  Cyc_Absyn_UnionType: 0){ goto _LL457;} else{ goto _LL458;} _LL458: goto
! _LL459; _LL451: if( _temp462->fields ==  0){( int) _throw(({ void* _temp465[ 0u]={};
  Cyc_Toc_toc_impos( _tag_arr("is_poly_field: struct missing fields", sizeof(
! unsigned char), 37u), _tag_arr( _temp465, sizeof( void*), 0u));}));} _temp463=(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp462->fields))->v;
! goto _LL453; _LL453: { struct Cyc_Absyn_Structfield* _temp466= Cyc_Absyn_lookup_field(
! _temp463, f); if( _temp466 ==  0){({ struct Cyc_Std_String_pa_struct _temp468;
! _temp468.tag= Cyc_Std_String_pa; _temp468.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp466))->name;{ void* _temp467[ 1u]={& _temp468};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("is_poly_field: bad field %s",
! sizeof( unsigned char), 28u), _tag_arr( _temp467, sizeof( void*), 1u));}});}
  return Cyc_Toc_is_void_star(( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp466))->type);} _LL455: return 0; _LL457: return 0; _LL459:(
! int) _throw(({ struct Cyc_Std_String_pa_struct _temp470; _temp470.tag= Cyc_Std_String_pa;
! _temp470.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp469[ 1u]={&
! _temp470}; Cyc_Toc_toc_impos( _tag_arr("is_poly_field: bad type %s", sizeof(
! unsigned char), 27u), _tag_arr( _temp469, sizeof( void*), 1u));}})); _LL449:;}
! static int Cyc_Toc_is_poly_project( struct Cyc_Absyn_Exp* e){ void* _temp471=(
! void*) e->r; struct _tagged_arr* _temp479; struct Cyc_Absyn_Exp* _temp481;
! struct _tagged_arr* _temp483; struct Cyc_Absyn_Exp* _temp485; _LL473: if(*(( int*)
! _temp471) ==  Cyc_Absyn_StructMember_e){ _LL482: _temp481=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp471)->f1; goto _LL480; _LL480: _temp479=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp471)->f2; goto _LL474;} else{ goto _LL475;} _LL475: if(*(( int*) _temp471)
! ==  Cyc_Absyn_StructArrow_e){ _LL486: _temp485=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp471)->f1; goto _LL484; _LL484: _temp483=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp471)->f2; goto _LL476;} else{ goto _LL477;} _LL477: goto _LL478; _LL474:
  return Cyc_Toc_is_poly_field(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp481->topt))->v, _temp479); _LL476: { void* _temp487= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp485->topt))->v); struct Cyc_Absyn_PtrInfo
! _temp493; void* _temp495; _LL489: if(( unsigned int) _temp487 >  4u?*(( int*)
! _temp487) ==  Cyc_Absyn_PointerType: 0){ _LL494: _temp493=(( struct Cyc_Absyn_PointerType_struct*)
! _temp487)->f1; _LL496: _temp495=( void*) _temp493.elt_typ; goto _LL490;} else{
! goto _LL491;} _LL491: goto _LL492; _LL490: return Cyc_Toc_is_poly_field(
! _temp495, _temp483); _LL492:({ struct Cyc_Std_String_pa_struct _temp498;
! _temp498.tag= Cyc_Std_String_pa; _temp498.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp485->topt))->v);{ void*
! _temp497[ 1u]={& _temp498};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr
  ap)) Cyc_Toc_toc_impos)( _tag_arr("is_poly_project:  bad type %s", sizeof(
! unsigned char), 30u), _tag_arr( _temp497, sizeof( void*), 1u));}}); return 0;
! _LL488:;} _LL478: return 0; _LL472:;} static struct Cyc_Absyn_Exp* Cyc_Toc_malloc_ptr(
  struct Cyc_Absyn_Exp* s){ return Cyc_Absyn_fncall_exp( Cyc_Toc__cycalloc_e,({
! struct Cyc_List_List* _temp499=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp499->hd=( void*) s; _temp499->tl= 0; _temp499;}), 0);}
  static struct Cyc_Absyn_Exp* Cyc_Toc_malloc_atomic( struct Cyc_Absyn_Exp* s){
  return Cyc_Absyn_fncall_exp( Cyc_Toc__cycalloc_atomic_e,({ struct Cyc_List_List*
! _temp500=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp500->hd=( void*) s; _temp500->tl= 0; _temp500;}), 0);} static struct Cyc_Absyn_Exp*
  Cyc_Toc_malloc_exp( void* t, struct Cyc_Absyn_Exp* s){ if( Cyc_Toc_atomic_typ( t)){
  return Cyc_Toc_malloc_atomic( s);} return Cyc_Toc_malloc_ptr( s);} static struct
  Cyc_Absyn_Exp* Cyc_Toc_rmalloc_exp( struct Cyc_Absyn_Exp* rgn, struct Cyc_Absyn_Exp*
  s){ return Cyc_Absyn_fncall_exp( Cyc_Toc__region_malloc_e,({ struct Cyc_Absyn_Exp*
! _temp501[ 2u]; _temp501[ 1u]= s; _temp501[ 0u]= rgn;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp501, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), 0);} static struct Cyc_Absyn_Exp* Cyc_Toc_newthrow_exp( struct Cyc_Absyn_Exp*
  e){ return Cyc_Absyn_fncall_exp( Cyc_Toc__throw_e,({ struct Cyc_List_List*
! _temp502=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp502->hd=( void*) e; _temp502->tl= 0; _temp502;}), 0);} static struct Cyc_Absyn_Exp*
  Cyc_Toc_make_toplevel_tagged_arr( void* t, struct Cyc_Absyn_Exp* sz, struct Cyc_Absyn_Exp*
! e){ int is_string= 0;{ void* _temp503=( void*) e->r; void* _temp509; _LL505: if(*((
! int*) _temp503) ==  Cyc_Absyn_Const_e){ _LL510: _temp509=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp503)->f1; if(( unsigned int) _temp509 >  1u?*(( int*) _temp509) ==  Cyc_Absyn_String_c:
! 0){ goto _LL506;} else{ goto _LL507;}} else{ goto _LL507;} _LL507: goto _LL508;
! _LL506: is_string= 1; goto _LL504; _LL508: goto _LL504; _LL504:;}{ struct Cyc_Absyn_Exp*
  xexp; struct Cyc_Absyn_Exp* xplussz; if( is_string){ struct _tuple0* x= Cyc_Toc_temp_var();
! void* vd_typ=( void*)({ struct Cyc_Absyn_ArrayType_struct* _temp514=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp514[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp515; _temp515.tag= Cyc_Absyn_ArrayType; _temp515.f1=(
! void*) Cyc_Absyn_uchar_t; _temp515.f2= Cyc_Toc_mt_tq; _temp515.f3=( struct Cyc_Absyn_Exp*)
! sz; _temp515;}); _temp514;}); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_static_vardecl(
  x, vd_typ,( struct Cyc_Absyn_Exp*) e); Cyc_Toc_result_decls=({ struct Cyc_List_List*
! _temp511=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp511->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Var_d_struct*
! _temp512=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp512[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp513; _temp513.tag= Cyc_Absyn_Var_d;
! _temp513.f1= vd; _temp513;}); _temp512;}), 0); _temp511->tl= Cyc_Toc_result_decls;
! _temp511;}); xexp= Cyc_Absyn_var_exp( x, 0); xplussz= Cyc_Absyn_add_exp( xexp,
  sz, 0);} else{ xexp= Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), e, 0);
  xplussz= Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), Cyc_Absyn_add_exp( e, sz,
  0), 0);}{ struct Cyc_Absyn_Exp* urm_exp= Cyc_Absyn_unresolvedmem_exp( 0,({
! struct _tuple4* _temp516[ 3u]; _temp516[ 2u]=({ struct _tuple4* _temp519=(
! struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp519->f1= 0; _temp519->f2=
! xplussz; _temp519;}); _temp516[ 1u]=({ struct _tuple4* _temp518=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp518->f1= 0; _temp518->f2= xexp;
! _temp518;}); _temp516[ 0u]=({ struct _tuple4* _temp517=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp517->f1= 0; _temp517->f2= xexp;
! _temp517;});(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp516, sizeof( struct _tuple4*), 3u));}), 0); return urm_exp;}}}
  struct Cyc_Toc_Env{ struct Cyc_Core_Opt* break_lab; struct Cyc_Core_Opt*
  continue_lab; struct Cyc_Core_Opt* fallthru_info; struct Cyc_Dict_Dict* varmap;
  int toplevel; } ; static struct Cyc_Toc_Env* Cyc_Toc_empty_env(){ return({
! struct Cyc_Toc_Env* _temp520=( struct Cyc_Toc_Env*) _cycalloc( sizeof( struct
! Cyc_Toc_Env)); _temp520->break_lab= 0; _temp520->continue_lab= 0; _temp520->fallthru_info=
! 0; _temp520->varmap=(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tuple0*,
! struct _tuple0*))) Cyc_Dict_empty)( Cyc_Absyn_qvar_cmp); _temp520->toplevel= 1;
! _temp520;});} static struct Cyc_Toc_Env* Cyc_Toc_copy_env( struct Cyc_Toc_Env* e){
! return({ struct Cyc_Toc_Env* _temp521=( struct Cyc_Toc_Env*) _cycalloc( sizeof(
! struct Cyc_Toc_Env)); _temp521->break_lab= e->break_lab; _temp521->continue_lab=
! e->continue_lab; _temp521->fallthru_info= e->fallthru_info; _temp521->varmap= e->varmap;
! _temp521->toplevel= e->toplevel; _temp521;});} static struct Cyc_Toc_Env* Cyc_Toc_clear_toplevel(
  struct Cyc_Toc_Env* e){ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e); ans->toplevel=
  0; return ans;} static struct Cyc_Toc_Env* Cyc_Toc_add_varmap( struct Cyc_Toc_Env*
! e, struct _tuple0* x, struct Cyc_Absyn_Exp* y){{ void* _temp522=(* x).f1; _LL524:
! if(( unsigned int) _temp522 >  1u?*(( int*) _temp522) ==  Cyc_Absyn_Rel_n: 0){
! goto _LL525;} else{ goto _LL526;} _LL526: goto _LL527; _LL525:( int) _throw(({
! struct Cyc_Std_String_pa_struct _temp529; _temp529.tag= Cyc_Std_String_pa;
! _temp529.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( x);{ void* _temp528[
! 1u]={& _temp529}; Cyc_Toc_toc_impos( _tag_arr("Toc::add_varmap on Rel_n: %s\n",
! sizeof( unsigned char), 30u), _tag_arr( _temp528, sizeof( void*), 1u));}}));
! _LL527: goto _LL523; _LL523:;}{ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e);
  ans->varmap=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tuple0*
  k, struct Cyc_Absyn_Exp* v)) Cyc_Dict_insert)( ans->varmap, x, y); return ans;}}
  static struct Cyc_Toc_Env* Cyc_Toc_loop_env( struct Cyc_Toc_Env* e){ struct Cyc_Toc_Env*
--- 1144,1434 ----
  _temp197) ==  Cyc_Absyn_RgnsEff: 0){ goto _LL250;} else{ goto _LL198;} _LL200:
  return t; _LL202: return Cyc_Absyn_sint_t; _LL204: return Cyc_Toc_typ_to_c(
  _temp256); _LL206: return Cyc_Absyn_void_star_typ(); _LL208: return Cyc_Absyn_void_star_typ();
! _LL210:( int) _throw(({ void* _temp318[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("unresolved TunionType",
! sizeof( unsigned char), 22u), _tag_arr( _temp318, sizeof( void*), 0u));}));
! _LL212: if( _temp268->typs ==  0){ if( _temp270->is_xtunion){ return Cyc_Absyn_star_typ(
  Cyc_Absyn_uchar_t,( void*) Cyc_Absyn_HeapRgn, Cyc_Toc_mt_tq);} else{ return Cyc_Absyn_uint_t;}}
! else{ return Cyc_Absyn_strctq( Cyc_Toc_collapse_qvar_tag( _temp268->name,
  _tag_arr("_struct", sizeof( unsigned char), 8u)));} _LL214:( int) _throw(({ void*
! _temp319[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("unresolved TunionFieldType",
! sizeof( unsigned char), 27u), _tag_arr( _temp319, sizeof( void*), 0u));}));
! _LL216: _temp278= Cyc_Toc_typ_to_c_array( _temp278);{ void* _temp320=( void*)(
! Cyc_Absyn_compress_conref( _temp274))->v; void* _temp326; _LL322: if((
! unsigned int) _temp320 >  1u?*(( int*) _temp320) ==  Cyc_Absyn_Eq_constr: 0){
! _LL327: _temp326=( void*)(( struct Cyc_Absyn_Eq_constr_struct*) _temp320)->f1;
! if( _temp326 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL323;} else{ goto _LL324;}}
! else{ goto _LL324;} _LL324: goto _LL325; _LL323: return Cyc_Toc_tagged_arr_typ;
! _LL325: return Cyc_Absyn_star_typ( _temp278,( void*) Cyc_Absyn_HeapRgn, _temp276);
! _LL321:;} _LL218: return t; _LL220: return t; _LL222: return t; _LL224: return(
! void*)({ struct Cyc_Absyn_ArrayType_struct* _temp328=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp328[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp329; _temp329.tag= Cyc_Absyn_ArrayType; _temp329.f1=(
! void*) Cyc_Toc_typ_to_c_array( _temp284); _temp329.f2= _temp282; _temp329.f3=
! _temp280; _temp329;}); _temp328;}); _LL226: { struct Cyc_List_List* _temp330= 0;
! for( 0; _temp288 !=  0; _temp288=(( struct Cyc_List_List*) _check_null( _temp288))->tl){
! void* _temp331=( void*)(( struct Cyc_List_List*) _check_null( _temp288))->hd;
! _LL333: if( _temp331 == ( void*) Cyc_Absyn_Noreturn_att){ goto _LL334;} else{
! goto _LL335;} _LL335: if( _temp331 == ( void*) Cyc_Absyn_Const_att){ goto _LL336;}
! else{ goto _LL337;} _LL337: if(( unsigned int) _temp331 >  16u?*(( int*)
! _temp331) ==  Cyc_Absyn_Format_att: 0){ goto _LL338;} else{ goto _LL339;} _LL339:
! goto _LL340; _LL334: goto _LL336; _LL336: goto _LL338; _LL338: continue; _LL340:
! _temp330=({ struct Cyc_List_List* _temp341=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp341->hd=( void*)(( void*)(( struct Cyc_List_List*)
! _check_null( _temp288))->hd); _temp341->tl= _temp330; _temp341;}); goto _LL332;
! _LL332:;}{ struct Cyc_List_List* _temp342=(( struct Cyc_List_List*(*)( struct
  _tuple1*(* f)( struct _tuple1*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_arg_to_c,
! _temp294); if( _temp290 !=  0){ void* _temp343= Cyc_Toc_typ_to_c( Cyc_Absyn_tagged_typ((
! void*)(( struct Cyc_Absyn_VarargInfo*) _check_null( _temp290))->type,( void*)
! Cyc_Absyn_HeapRgn, Cyc_Toc_mt_tq)); struct _tuple1* _temp344=({ struct _tuple1*
! _temp346=( struct _tuple1*) _cycalloc( sizeof( struct _tuple1)); _temp346->f1=((
! struct Cyc_Absyn_VarargInfo*) _check_null( _temp290))->name; _temp346->f2=((
! struct Cyc_Absyn_VarargInfo*) _check_null( _temp290))->tq; _temp346->f3=
! _temp343; _temp346;}); _temp342=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_imp_append)( _temp342,({ struct Cyc_List_List*
! _temp345=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp345->hd=( void*) _temp344; _temp345->tl= 0; _temp345;}));} return( void*)({
! struct Cyc_Absyn_FnType_struct* _temp347=( struct Cyc_Absyn_FnType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_FnType_struct)); _temp347[ 0]=({ struct Cyc_Absyn_FnType_struct
! _temp348; _temp348.tag= Cyc_Absyn_FnType; _temp348.f1=({ struct Cyc_Absyn_FnInfo
! _temp349; _temp349.tvars= 0; _temp349.effect= 0; _temp349.ret_typ=( void*) Cyc_Toc_typ_to_c(
! _temp296); _temp349.args= _temp342; _temp349.c_varargs= _temp292; _temp349.cyc_varargs=
! 0; _temp349.rgn_po= 0; _temp349.attributes= _temp330; _temp349;}); _temp348;});
! _temp347;});}} _LL228: _temp298=(( struct Cyc_List_List*(*)( struct _tuple3*(* f)(
  struct _tuple3*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_typ_to_c_f,
! _temp298);{ struct _tagged_arr* _temp350= Cyc_Toc_add_tuple_type( _temp298);
! return Cyc_Absyn_strct( _temp350);} _LL230: return( void*)({ struct Cyc_Absyn_AnonStructType_struct*
! _temp351=( struct Cyc_Absyn_AnonStructType_struct*) _cycalloc( sizeof( struct
! Cyc_Absyn_AnonStructType_struct)); _temp351[ 0]=({ struct Cyc_Absyn_AnonStructType_struct
! _temp352; _temp352.tag= Cyc_Absyn_AnonStructType; _temp352.f1=(( struct Cyc_List_List*(*)(
  struct Cyc_Absyn_Structfield*(* f)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List*
! x)) Cyc_List_map)( Cyc_Toc_structfield_to_c, _temp300); _temp352;}); _temp351;});
! _LL232: return( void*)({ struct Cyc_Absyn_AnonUnionType_struct* _temp353=(
  struct Cyc_Absyn_AnonUnionType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_AnonUnionType_struct));
! _temp353[ 0]=({ struct Cyc_Absyn_AnonUnionType_struct _temp354; _temp354.tag=
! Cyc_Absyn_AnonUnionType; _temp354.f1=(( struct Cyc_List_List*(*)( struct Cyc_Absyn_Structfield*(*
  f)( struct Cyc_Absyn_Structfield*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_structfield_to_c,
! _temp302); _temp354;}); _temp353;}); _LL234: if( _temp304 ==  0){({ void*
! _temp355[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)(
! _tag_arr("anonymous union", sizeof( unsigned char), 16u), _tag_arr( _temp355,
  sizeof( void*), 0u));});} return Cyc_Absyn_unionq_typ(( struct _tuple0*)
! _check_null( _temp304)); _LL236: if( _temp306 ==  0){({ void* _temp356[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("anonymous struct",
! sizeof( unsigned char), 17u), _tag_arr( _temp356, sizeof( void*), 0u));});}
! return Cyc_Absyn_strctq(( struct _tuple0*) _check_null( _temp306)); _LL238:
! return t; _LL240: if( _temp310 ==  0){ return({ void* _temp357[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("Toc::typ_to_c: unresolved TypedefType", sizeof( unsigned char), 38u),
! _tag_arr( _temp357, sizeof( void*), 0u));});} return( void*)({ struct Cyc_Absyn_TypedefType_struct*
! _temp358=( struct Cyc_Absyn_TypedefType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_TypedefType_struct));
! _temp358[ 0]=({ struct Cyc_Absyn_TypedefType_struct _temp359; _temp359.tag= Cyc_Absyn_TypedefType;
! _temp359.f1= _temp314; _temp359.f2= 0; _temp359.f3=({ struct Cyc_Core_Opt*
! _temp360=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp360->v=( void*) Cyc_Toc_typ_to_c_array(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp310))->v); _temp360;}); _temp359;}); _temp358;}); _LL242:
  return Cyc_Absyn_cstar_typ( Cyc_Absyn_strct( Cyc_Toc__RegionHandle_sp), Cyc_Toc_mt_tq);
! _LL244: return({ void* _temp361[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the heap region",
! sizeof( unsigned char), 55u), _tag_arr( _temp361, sizeof( void*), 0u));});
! _LL246: return({ void* _temp362[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the access eff",
! sizeof( unsigned char), 54u), _tag_arr( _temp362, sizeof( void*), 0u));});
! _LL248: return({ void* _temp363[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the join eff",
! sizeof( unsigned char), 52u), _tag_arr( _temp363, sizeof( void*), 0u));});
! _LL250: return({ void* _temp364[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("Toc::typ_to_c: type translation passed the regions eff",
! sizeof( unsigned char), 55u), _tag_arr( _temp364, sizeof( void*), 0u));});
  _LL198:;} static struct Cyc_Absyn_Exp* Cyc_Toc_array_to_ptr_cast( void* t,
! struct Cyc_Absyn_Exp* e, struct Cyc_Position_Segment* l){ void* _temp365= t;
! struct Cyc_Absyn_Tqual _temp371; void* _temp373; _LL367: if(( unsigned int)
! _temp365 >  4u?*(( int*) _temp365) ==  Cyc_Absyn_ArrayType: 0){ _LL374: _temp373=(
! void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp365)->f1; goto _LL372; _LL372:
! _temp371=(( struct Cyc_Absyn_ArrayType_struct*) _temp365)->f2; goto _LL368;}
! else{ goto _LL369;} _LL369: goto _LL370; _LL368: return Cyc_Absyn_cast_exp( Cyc_Absyn_star_typ(
! _temp373,( void*) Cyc_Absyn_HeapRgn, _temp371), e, l); _LL370: return Cyc_Absyn_cast_exp(
! t, e, l); _LL366:;} static int Cyc_Toc_atomic_typ( void* t){ void* _temp375= Cyc_Tcutil_compress(
! t); void* _temp413; struct Cyc_Absyn_Structdecl** _temp415; struct Cyc_List_List*
! _temp417; struct Cyc_List_List* _temp419; struct Cyc_Absyn_TunionFieldInfo
! _temp421; void* _temp423; struct Cyc_Absyn_Tunionfield* _temp425; struct Cyc_Absyn_Tuniondecl*
! _temp427; struct Cyc_List_List* _temp429; _LL377: if( _temp375 == ( void*) Cyc_Absyn_VoidType){
! goto _LL378;} else{ goto _LL379;} _LL379: if(( unsigned int) _temp375 >  4u?*((
! int*) _temp375) ==  Cyc_Absyn_VarType: 0){ goto _LL380;} else{ goto _LL381;}
! _LL381: if(( unsigned int) _temp375 >  4u?*(( int*) _temp375) ==  Cyc_Absyn_IntType:
! 0){ goto _LL382;} else{ goto _LL383;} _LL383: if(( unsigned int) _temp375 >  4u?*((
! int*) _temp375) ==  Cyc_Absyn_EnumType: 0){ goto _LL384;} else{ goto _LL385;}
! _LL385: if( _temp375 == ( void*) Cyc_Absyn_FloatType){ goto _LL386;} else{ goto
! _LL387;} _LL387: if( _temp375 == ( void*) Cyc_Absyn_DoubleType){ goto _LL388;}
! else{ goto _LL389;} _LL389: if(( unsigned int) _temp375 >  4u?*(( int*) _temp375)
! ==  Cyc_Absyn_FnType: 0){ goto _LL390;} else{ goto _LL391;} _LL391: if((
! unsigned int) _temp375 >  4u?*(( int*) _temp375) ==  Cyc_Absyn_ArrayType: 0){
! _LL414: _temp413=( void*)(( struct Cyc_Absyn_ArrayType_struct*) _temp375)->f1;
! goto _LL392;} else{ goto _LL393;} _LL393: if(( unsigned int) _temp375 >  4u?*((
! int*) _temp375) ==  Cyc_Absyn_StructType: 0){ _LL416: _temp415=(( struct Cyc_Absyn_StructType_struct*)
! _temp375)->f3; goto _LL394;} else{ goto _LL395;} _LL395: if(( unsigned int)
! _temp375 >  4u?*(( int*) _temp375) ==  Cyc_Absyn_AnonStructType: 0){ _LL418:
! _temp417=(( struct Cyc_Absyn_AnonStructType_struct*) _temp375)->f1; goto _LL396;}
! else{ goto _LL397;} _LL397: if(( unsigned int) _temp375 >  4u?*(( int*) _temp375)
! ==  Cyc_Absyn_AnonUnionType: 0){ _LL420: _temp419=(( struct Cyc_Absyn_AnonUnionType_struct*)
! _temp375)->f1; goto _LL398;} else{ goto _LL399;} _LL399: if(( unsigned int)
! _temp375 >  4u?*(( int*) _temp375) ==  Cyc_Absyn_TunionFieldType: 0){ _LL422:
! _temp421=(( struct Cyc_Absyn_TunionFieldType_struct*) _temp375)->f1; _LL424:
! _temp423=( void*) _temp421.field_info; if(*(( int*) _temp423) ==  Cyc_Absyn_KnownTunionfield){
! _LL428: _temp427=(( struct Cyc_Absyn_KnownTunionfield_struct*) _temp423)->f1;
! goto _LL426; _LL426: _temp425=(( struct Cyc_Absyn_KnownTunionfield_struct*)
! _temp423)->f2; goto _LL400;} else{ goto _LL401;}} else{ goto _LL401;} _LL401:
! if(( unsigned int) _temp375 >  4u?*(( int*) _temp375) ==  Cyc_Absyn_TupleType: 0){
! _LL430: _temp429=(( struct Cyc_Absyn_TupleType_struct*) _temp375)->f1; goto
! _LL402;} else{ goto _LL403;} _LL403: if(( unsigned int) _temp375 >  4u?*(( int*)
! _temp375) ==  Cyc_Absyn_TunionType: 0){ goto _LL404;} else{ goto _LL405;} _LL405:
! if(( unsigned int) _temp375 >  4u?*(( int*) _temp375) ==  Cyc_Absyn_UnionType: 0){
! goto _LL406;} else{ goto _LL407;} _LL407: if(( unsigned int) _temp375 >  4u?*((
! int*) _temp375) ==  Cyc_Absyn_PointerType: 0){ goto _LL408;} else{ goto _LL409;}
! _LL409: if(( unsigned int) _temp375 >  4u?*(( int*) _temp375) ==  Cyc_Absyn_RgnHandleType:
! 0){ goto _LL410;} else{ goto _LL411;} _LL411: goto _LL412; _LL378: return 1;
! _LL380: return 0; _LL382: return 1; _LL384: return 1; _LL386: return 1; _LL388:
! return 1; _LL390: return 1; _LL392: return Cyc_Toc_atomic_typ( _temp413); _LL394:
! if( _temp415 ==  0? 1:(*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp415)))->fields
! ==  0){ return 0;}{ struct Cyc_List_List* _temp431=( struct Cyc_List_List*)((
  struct Cyc_Core_Opt*) _check_null((*(( struct Cyc_Absyn_Structdecl**)
! _check_null( _temp415)))->fields))->v; for( 0; _temp431 !=  0; _temp431=((
! struct Cyc_List_List*) _check_null( _temp431))->tl){ if( ! Cyc_Toc_atomic_typ((
  void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp431))->hd)->type)){ return 0;}}} return 1; _LL396: _temp419= _temp417; goto
! _LL398; _LL398: for( 0; _temp419 !=  0; _temp419=(( struct Cyc_List_List*)
! _check_null( _temp419))->tl){ if( ! Cyc_Toc_atomic_typ(( void*)(( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp419))->hd)->type)){ return 0;}} return
! 1; _LL400: _temp429= _temp425->typs; goto _LL402; _LL402: for( 0; _temp429 !=  0;
! _temp429=(( struct Cyc_List_List*) _check_null( _temp429))->tl){ if( ! Cyc_Toc_atomic_typ((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp429))->hd)).f2)){
! return 0;}} return 1; _LL404: return 0; _LL406: return 0; _LL408: return 0;
! _LL410: return 0; _LL412:({ struct Cyc_Std_String_pa_struct _temp433; _temp433.tag=
! Cyc_Std_String_pa; _temp433.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{
! void* _temp432[ 1u]={& _temp433};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("atomic_typ:  bad type %s",
! sizeof( unsigned char), 25u), _tag_arr( _temp432, sizeof( void*), 1u));}});
! return 0; _LL376:;} static int Cyc_Toc_is_void_star( void* t){ void* _temp434=
! Cyc_Tcutil_compress( t); struct Cyc_Absyn_PtrInfo _temp440; void* _temp442;
! _LL436: if(( unsigned int) _temp434 >  4u?*(( int*) _temp434) ==  Cyc_Absyn_PointerType:
! 0){ _LL441: _temp440=(( struct Cyc_Absyn_PointerType_struct*) _temp434)->f1;
! _LL443: _temp442=( void*) _temp440.elt_typ; goto _LL437;} else{ goto _LL438;}
! _LL438: goto _LL439; _LL437: { void* _temp444= Cyc_Tcutil_compress( _temp442);
! _LL446: if( _temp444 == ( void*) Cyc_Absyn_VoidType){ goto _LL447;} else{ goto
! _LL448;} _LL448: goto _LL449; _LL447: return 1; _LL449: return 0; _LL445:;}
! _LL439: return 0; _LL435:;} static int Cyc_Toc_is_poly_field( void* t, struct
! _tagged_arr* f){ void* _temp450= Cyc_Tcutil_compress( t); struct Cyc_Absyn_Structdecl**
! _temp462; struct Cyc_Absyn_Structdecl* _temp464; struct Cyc_List_List* _temp465;
! _LL452: if(( unsigned int) _temp450 >  4u?*(( int*) _temp450) ==  Cyc_Absyn_StructType:
! 0){ _LL463: _temp462=(( struct Cyc_Absyn_StructType_struct*) _temp450)->f3; if(
! _temp462 ==  0){ goto _LL454;} else{ _temp464=* _temp462; goto _LL453;}} else{
! goto _LL454;} _LL454: if(( unsigned int) _temp450 >  4u?*(( int*) _temp450) == 
! Cyc_Absyn_AnonStructType: 0){ _LL466: _temp465=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp450)->f1; goto _LL455;} else{ goto _LL456;} _LL456: if(( unsigned int)
! _temp450 >  4u?*(( int*) _temp450) ==  Cyc_Absyn_AnonUnionType: 0){ goto _LL457;}
! else{ goto _LL458;} _LL458: if(( unsigned int) _temp450 >  4u?*(( int*) _temp450)
! ==  Cyc_Absyn_UnionType: 0){ goto _LL459;} else{ goto _LL460;} _LL460: goto
! _LL461; _LL453: if( _temp464->fields ==  0){( int) _throw(({ void* _temp467[ 0u]={};
  Cyc_Toc_toc_impos( _tag_arr("is_poly_field: struct missing fields", sizeof(
! unsigned char), 37u), _tag_arr( _temp467, sizeof( void*), 0u));}));} _temp465=(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp464->fields))->v;
! goto _LL455; _LL455: { struct Cyc_Absyn_Structfield* _temp468= Cyc_Absyn_lookup_field(
! _temp465, f); if( _temp468 ==  0){({ struct Cyc_Std_String_pa_struct _temp470;
! _temp470.tag= Cyc_Std_String_pa; _temp470.f1=( struct _tagged_arr)*(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp468))->name;{ void* _temp469[ 1u]={& _temp470};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("is_poly_field: bad field %s",
! sizeof( unsigned char), 28u), _tag_arr( _temp469, sizeof( void*), 1u));}});}
  return Cyc_Toc_is_void_star(( void*)(( struct Cyc_Absyn_Structfield*)
! _check_null( _temp468))->type);} _LL457: return 0; _LL459: return 0; _LL461:(
! int) _throw(({ struct Cyc_Std_String_pa_struct _temp472; _temp472.tag= Cyc_Std_String_pa;
! _temp472.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string( t);{ void* _temp471[ 1u]={&
! _temp472}; Cyc_Toc_toc_impos( _tag_arr("is_poly_field: bad type %s", sizeof(
! unsigned char), 27u), _tag_arr( _temp471, sizeof( void*), 1u));}})); _LL451:;}
! static int Cyc_Toc_is_poly_project( struct Cyc_Absyn_Exp* e){ void* _temp473=(
! void*) e->r; struct _tagged_arr* _temp481; struct Cyc_Absyn_Exp* _temp483;
! struct _tagged_arr* _temp485; struct Cyc_Absyn_Exp* _temp487; _LL475: if(*(( int*)
! _temp473) ==  Cyc_Absyn_StructMember_e){ _LL484: _temp483=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp473)->f1; goto _LL482; _LL482: _temp481=(( struct Cyc_Absyn_StructMember_e_struct*)
! _temp473)->f2; goto _LL476;} else{ goto _LL477;} _LL477: if(*(( int*) _temp473)
! ==  Cyc_Absyn_StructArrow_e){ _LL488: _temp487=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp473)->f1; goto _LL486; _LL486: _temp485=(( struct Cyc_Absyn_StructArrow_e_struct*)
! _temp473)->f2; goto _LL478;} else{ goto _LL479;} _LL479: goto _LL480; _LL476:
  return Cyc_Toc_is_poly_field(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp483->topt))->v, _temp481); _LL478: { void* _temp489= Cyc_Tcutil_compress((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp487->topt))->v); struct Cyc_Absyn_PtrInfo
! _temp495; void* _temp497; _LL491: if(( unsigned int) _temp489 >  4u?*(( int*)
! _temp489) ==  Cyc_Absyn_PointerType: 0){ _LL496: _temp495=(( struct Cyc_Absyn_PointerType_struct*)
! _temp489)->f1; _LL498: _temp497=( void*) _temp495.elt_typ; goto _LL492;} else{
! goto _LL493;} _LL493: goto _LL494; _LL492: return Cyc_Toc_is_poly_field(
! _temp497, _temp485); _LL494:({ struct Cyc_Std_String_pa_struct _temp500;
! _temp500.tag= Cyc_Std_String_pa; _temp500.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp487->topt))->v);{ void*
! _temp499[ 1u]={& _temp500};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr
  ap)) Cyc_Toc_toc_impos)( _tag_arr("is_poly_project:  bad type %s", sizeof(
! unsigned char), 30u), _tag_arr( _temp499, sizeof( void*), 1u));}}); return 0;
! _LL490:;} _LL480: return 0; _LL474:;} static struct Cyc_Absyn_Exp* Cyc_Toc_malloc_ptr(
  struct Cyc_Absyn_Exp* s){ return Cyc_Absyn_fncall_exp( Cyc_Toc__cycalloc_e,({
! struct Cyc_List_List* _temp501=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp501->hd=( void*) s; _temp501->tl= 0; _temp501;}), 0);}
  static struct Cyc_Absyn_Exp* Cyc_Toc_malloc_atomic( struct Cyc_Absyn_Exp* s){
  return Cyc_Absyn_fncall_exp( Cyc_Toc__cycalloc_atomic_e,({ struct Cyc_List_List*
! _temp502=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp502->hd=( void*) s; _temp502->tl= 0; _temp502;}), 0);} static struct Cyc_Absyn_Exp*
  Cyc_Toc_malloc_exp( void* t, struct Cyc_Absyn_Exp* s){ if( Cyc_Toc_atomic_typ( t)){
  return Cyc_Toc_malloc_atomic( s);} return Cyc_Toc_malloc_ptr( s);} static struct
  Cyc_Absyn_Exp* Cyc_Toc_rmalloc_exp( struct Cyc_Absyn_Exp* rgn, struct Cyc_Absyn_Exp*
  s){ return Cyc_Absyn_fncall_exp( Cyc_Toc__region_malloc_e,({ struct Cyc_Absyn_Exp*
! _temp503[ 2u]; _temp503[ 1u]= s; _temp503[ 0u]= rgn;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp503, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), 0);} static struct Cyc_Absyn_Exp* Cyc_Toc_newthrow_exp( struct Cyc_Absyn_Exp*
  e){ return Cyc_Absyn_fncall_exp( Cyc_Toc__throw_e,({ struct Cyc_List_List*
! _temp504=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp504->hd=( void*) e; _temp504->tl= 0; _temp504;}), 0);} static struct Cyc_Absyn_Exp*
  Cyc_Toc_make_toplevel_tagged_arr( void* t, struct Cyc_Absyn_Exp* sz, struct Cyc_Absyn_Exp*
! e){ int is_string= 0;{ void* _temp505=( void*) e->r; void* _temp511; _LL507: if(*((
! int*) _temp505) ==  Cyc_Absyn_Const_e){ _LL512: _temp511=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp505)->f1; if(( unsigned int) _temp511 >  1u?*(( int*) _temp511) ==  Cyc_Absyn_String_c:
! 0){ goto _LL508;} else{ goto _LL509;}} else{ goto _LL509;} _LL509: goto _LL510;
! _LL508: is_string= 1; goto _LL506; _LL510: goto _LL506; _LL506:;}{ struct Cyc_Absyn_Exp*
  xexp; struct Cyc_Absyn_Exp* xplussz; if( is_string){ struct _tuple0* x= Cyc_Toc_temp_var();
! void* vd_typ=( void*)({ struct Cyc_Absyn_ArrayType_struct* _temp516=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp516[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp517; _temp517.tag= Cyc_Absyn_ArrayType; _temp517.f1=(
! void*) Cyc_Absyn_uchar_t; _temp517.f2= Cyc_Toc_mt_tq; _temp517.f3=( struct Cyc_Absyn_Exp*)
! sz; _temp517;}); _temp516;}); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_static_vardecl(
  x, vd_typ,( struct Cyc_Absyn_Exp*) e); Cyc_Toc_result_decls=({ struct Cyc_List_List*
! _temp513=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp513->hd=( void*) Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Var_d_struct*
! _temp514=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp514[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp515; _temp515.tag= Cyc_Absyn_Var_d;
! _temp515.f1= vd; _temp515;}); _temp514;}), 0); _temp513->tl= Cyc_Toc_result_decls;
! _temp513;}); xexp= Cyc_Absyn_var_exp( x, 0); xplussz= Cyc_Absyn_add_exp( xexp,
  sz, 0);} else{ xexp= Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), e, 0);
  xplussz= Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), Cyc_Absyn_add_exp( e, sz,
  0), 0);}{ struct Cyc_Absyn_Exp* urm_exp= Cyc_Absyn_unresolvedmem_exp( 0,({
! struct _tuple4* _temp518[ 3u]; _temp518[ 2u]=({ struct _tuple4* _temp521=(
! struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp521->f1= 0; _temp521->f2=
! xplussz; _temp521;}); _temp518[ 1u]=({ struct _tuple4* _temp520=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp520->f1= 0; _temp520->f2= xexp;
! _temp520;}); _temp518[ 0u]=({ struct _tuple4* _temp519=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp519->f1= 0; _temp519->f2= xexp;
! _temp519;});(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp518, sizeof( struct _tuple4*), 3u));}), 0); return urm_exp;}}}
  struct Cyc_Toc_Env{ struct Cyc_Core_Opt* break_lab; struct Cyc_Core_Opt*
  continue_lab; struct Cyc_Core_Opt* fallthru_info; struct Cyc_Dict_Dict* varmap;
  int toplevel; } ; static struct Cyc_Toc_Env* Cyc_Toc_empty_env(){ return({
! struct Cyc_Toc_Env* _temp522=( struct Cyc_Toc_Env*) _cycalloc( sizeof( struct
! Cyc_Toc_Env)); _temp522->break_lab= 0; _temp522->continue_lab= 0; _temp522->fallthru_info=
! 0; _temp522->varmap=(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tuple0*,
! struct _tuple0*))) Cyc_Dict_empty)( Cyc_Absyn_qvar_cmp); _temp522->toplevel= 1;
! _temp522;});} static struct Cyc_Toc_Env* Cyc_Toc_copy_env( struct Cyc_Toc_Env* e){
! return({ struct Cyc_Toc_Env* _temp523=( struct Cyc_Toc_Env*) _cycalloc( sizeof(
! struct Cyc_Toc_Env)); _temp523->break_lab= e->break_lab; _temp523->continue_lab=
! e->continue_lab; _temp523->fallthru_info= e->fallthru_info; _temp523->varmap= e->varmap;
! _temp523->toplevel= e->toplevel; _temp523;});} static struct Cyc_Toc_Env* Cyc_Toc_clear_toplevel(
  struct Cyc_Toc_Env* e){ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e); ans->toplevel=
  0; return ans;} static struct Cyc_Toc_Env* Cyc_Toc_add_varmap( struct Cyc_Toc_Env*
! e, struct _tuple0* x, struct Cyc_Absyn_Exp* y){{ void* _temp524=(* x).f1; _LL526:
! if(( unsigned int) _temp524 >  1u?*(( int*) _temp524) ==  Cyc_Absyn_Rel_n: 0){
! goto _LL527;} else{ goto _LL528;} _LL528: goto _LL529; _LL527:( int) _throw(({
! struct Cyc_Std_String_pa_struct _temp531; _temp531.tag= Cyc_Std_String_pa;
! _temp531.f1=( struct _tagged_arr) Cyc_Absynpp_qvar2string( x);{ void* _temp530[
! 1u]={& _temp531}; Cyc_Toc_toc_impos( _tag_arr("Toc::add_varmap on Rel_n: %s\n",
! sizeof( unsigned char), 30u), _tag_arr( _temp530, sizeof( void*), 1u));}}));
! _LL529: goto _LL525; _LL525:;}{ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e);
  ans->varmap=(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tuple0*
  k, struct Cyc_Absyn_Exp* v)) Cyc_Dict_insert)( ans->varmap, x, y); return ans;}}
  static struct Cyc_Toc_Env* Cyc_Toc_loop_env( struct Cyc_Toc_Env* e){ struct Cyc_Toc_Env*
***************
*** 1440,1496 ****
  f3; } ; static struct Cyc_Toc_Env* Cyc_Toc_non_last_switchclause_env( struct Cyc_Toc_Env*
  e, struct _tagged_arr* break_l, struct _tagged_arr* fallthru_l, struct Cyc_List_List*
  fallthru_binders, struct Cyc_Toc_Env* next_case_env){ struct Cyc_List_List*
! _temp530= 0; for( 0; fallthru_binders !=  0; fallthru_binders=(( struct Cyc_List_List*)
! _check_null( fallthru_binders))->tl){ _temp530=({ struct Cyc_List_List* _temp531=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp531->hd=(
  void*)(( struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null(
! fallthru_binders))->hd)->name; _temp531->tl= _temp530; _temp531;});} _temp530=((
! struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp530);{
  struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e); ans->break_lab=({ struct Cyc_Core_Opt*
! _temp532=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp532->v=( void*) break_l; _temp532;}); ans->fallthru_info=({ struct Cyc_Core_Opt*
! _temp533=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp533->v=( void*)({ struct _tuple6* _temp534=( struct _tuple6*) _cycalloc(
! sizeof( struct _tuple6)); _temp534->f1= fallthru_l; _temp534->f2= _temp530;
! _temp534->f3= next_case_env->varmap; _temp534;}); _temp533;}); return ans;}}
  static struct Cyc_Toc_Env* Cyc_Toc_last_switchclause_env( struct Cyc_Toc_Env* e,
  struct _tagged_arr* break_l){ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e); ans->break_lab=({
! struct Cyc_Core_Opt* _temp535=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp535->v=( void*) break_l; _temp535;}); ans->fallthru_info= 0;
  return ans;} static struct Cyc_Toc_Env* Cyc_Toc_switch_as_switch_env( struct Cyc_Toc_Env*
  e, struct _tagged_arr* next_l){ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e);
! ans->break_lab= 0; ans->fallthru_info=({ struct Cyc_Core_Opt* _temp536=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp536->v=( void*)({
! struct _tuple6* _temp537=( struct _tuple6*) _cycalloc( sizeof( struct _tuple6));
! _temp537->f1= next_l; _temp537->f2= 0; _temp537->f3=(( struct Cyc_Dict_Dict*(*)(
  int(* cmp)( struct _tuple0*, struct _tuple0*))) Cyc_Dict_empty)( Cyc_Absyn_qvar_cmp);
! _temp537;}); _temp536;}); return ans;} static void Cyc_Toc_exp_to_c( struct Cyc_Toc_Env*
  nv, struct Cyc_Absyn_Exp* e); static void Cyc_Toc_stmt_to_c( struct Cyc_Toc_Env*
  nv, struct Cyc_Absyn_Stmt* s); static void* Cyc_Toc_get_c_typ( struct Cyc_Absyn_Exp*
! e){ if( e->topt ==  0){({ void* _temp538[ 0u]={};(( int(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("Missing type in primop ",
! sizeof( unsigned char), 24u), _tag_arr( _temp538, sizeof( void*), 0u));});}
  return Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);}
  static void* Cyc_Toc_get_cyc_typ( struct Cyc_Absyn_Exp* e){ if( e->topt ==  0){({
! void* _temp539[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Toc_toc_impos)( _tag_arr("Missing type in primop ", sizeof( unsigned char),
! 24u), _tag_arr( _temp539, sizeof( void*), 0u));});} return( void*)(( struct Cyc_Core_Opt*)
  _check_null( e->topt))->v;} static struct _tuple3* Cyc_Toc_tup_to_c( struct Cyc_Absyn_Exp*
! e){ return({ struct _tuple3* _temp540=( struct _tuple3*) _cycalloc( sizeof(
! struct _tuple3)); _temp540->f1= Cyc_Toc_mt_tq; _temp540->f2= Cyc_Toc_typ_to_c((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v); _temp540;});} static
  struct _tuple4* Cyc_Toc_add_designator( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp*
! e){ Cyc_Toc_exp_to_c( nv, e); return({ struct _tuple4* _temp541=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp541->f1= 0; _temp541->f2= e; _temp541;});}
  static struct Cyc_Absyn_Exp* Cyc_Toc_make_struct( struct Cyc_Toc_Env* nv, struct
  _tuple0* x, void* struct_typ, struct Cyc_Absyn_Stmt* s, int pointer, struct Cyc_Absyn_Exp*
  rgnopt, int is_atomic){ struct Cyc_Absyn_Exp* eo; void* t; if( pointer){ t= Cyc_Absyn_cstar_typ(
! struct_typ, Cyc_Toc_mt_tq);{ struct Cyc_Absyn_Exp* _temp542= Cyc_Absyn_sizeoftyp_exp(
  struct_typ, 0); if( rgnopt ==  0){ eo=( struct Cyc_Absyn_Exp*) Cyc_Absyn_cast_exp(
! t, is_atomic? Cyc_Toc_malloc_atomic( _temp542): Cyc_Toc_malloc_ptr( _temp542), 0);}
  else{ struct Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*) _check_null( rgnopt); Cyc_Toc_exp_to_c(
  nv, r); eo=( struct Cyc_Absyn_Exp*) Cyc_Absyn_cast_exp( t, Cyc_Toc_rmalloc_exp(
! r, _temp542), 0);}}} else{ t= struct_typ; eo= 0;} return Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt(
  x, t, eo, s, 0), 0);} static struct Cyc_Absyn_Stmt* Cyc_Toc_init_comprehension(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp* lhs, struct Cyc_Absyn_Vardecl* vd,
  struct Cyc_Absyn_Exp* e1, struct Cyc_Absyn_Exp* e2, struct Cyc_Absyn_Stmt* s,
--- 1437,1493 ----
  f3; } ; static struct Cyc_Toc_Env* Cyc_Toc_non_last_switchclause_env( struct Cyc_Toc_Env*
  e, struct _tagged_arr* break_l, struct _tagged_arr* fallthru_l, struct Cyc_List_List*
  fallthru_binders, struct Cyc_Toc_Env* next_case_env){ struct Cyc_List_List*
! _temp532= 0; for( 0; fallthru_binders !=  0; fallthru_binders=(( struct Cyc_List_List*)
! _check_null( fallthru_binders))->tl){ _temp532=({ struct Cyc_List_List* _temp533=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp533->hd=(
  void*)(( struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null(
! fallthru_binders))->hd)->name; _temp533->tl= _temp532; _temp533;});} _temp532=((
! struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( _temp532);{
  struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e); ans->break_lab=({ struct Cyc_Core_Opt*
! _temp534=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp534->v=( void*) break_l; _temp534;}); ans->fallthru_info=({ struct Cyc_Core_Opt*
! _temp535=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp535->v=( void*)({ struct _tuple6* _temp536=( struct _tuple6*) _cycalloc(
! sizeof( struct _tuple6)); _temp536->f1= fallthru_l; _temp536->f2= _temp532;
! _temp536->f3= next_case_env->varmap; _temp536;}); _temp535;}); return ans;}}
  static struct Cyc_Toc_Env* Cyc_Toc_last_switchclause_env( struct Cyc_Toc_Env* e,
  struct _tagged_arr* break_l){ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e); ans->break_lab=({
! struct Cyc_Core_Opt* _temp537=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp537->v=( void*) break_l; _temp537;}); ans->fallthru_info= 0;
  return ans;} static struct Cyc_Toc_Env* Cyc_Toc_switch_as_switch_env( struct Cyc_Toc_Env*
  e, struct _tagged_arr* next_l){ struct Cyc_Toc_Env* ans= Cyc_Toc_copy_env( e);
! ans->break_lab= 0; ans->fallthru_info=({ struct Cyc_Core_Opt* _temp538=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp538->v=( void*)({
! struct _tuple6* _temp539=( struct _tuple6*) _cycalloc( sizeof( struct _tuple6));
! _temp539->f1= next_l; _temp539->f2= 0; _temp539->f3=(( struct Cyc_Dict_Dict*(*)(
  int(* cmp)( struct _tuple0*, struct _tuple0*))) Cyc_Dict_empty)( Cyc_Absyn_qvar_cmp);
! _temp539;}); _temp538;}); return ans;} static void Cyc_Toc_exp_to_c( struct Cyc_Toc_Env*
  nv, struct Cyc_Absyn_Exp* e); static void Cyc_Toc_stmt_to_c( struct Cyc_Toc_Env*
  nv, struct Cyc_Absyn_Stmt* s); static void* Cyc_Toc_get_c_typ( struct Cyc_Absyn_Exp*
! e){ if( e->topt ==  0){({ void* _temp540[ 0u]={};(( int(*)( struct _tagged_arr
  fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("Missing type in primop ",
! sizeof( unsigned char), 24u), _tag_arr( _temp540, sizeof( void*), 0u));});}
  return Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v);}
  static void* Cyc_Toc_get_cyc_typ( struct Cyc_Absyn_Exp* e){ if( e->topt ==  0){({
! void* _temp541[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Toc_toc_impos)( _tag_arr("Missing type in primop ", sizeof( unsigned char),
! 24u), _tag_arr( _temp541, sizeof( void*), 0u));});} return( void*)(( struct Cyc_Core_Opt*)
  _check_null( e->topt))->v;} static struct _tuple3* Cyc_Toc_tup_to_c( struct Cyc_Absyn_Exp*
! e){ return({ struct _tuple3* _temp542=( struct _tuple3*) _cycalloc( sizeof(
! struct _tuple3)); _temp542->f1= Cyc_Toc_mt_tq; _temp542->f2= Cyc_Toc_typ_to_c((
! void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v); _temp542;});} static
  struct _tuple4* Cyc_Toc_add_designator( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp*
! e){ Cyc_Toc_exp_to_c( nv, e); return({ struct _tuple4* _temp543=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp543->f1= 0; _temp543->f2= e; _temp543;});}
  static struct Cyc_Absyn_Exp* Cyc_Toc_make_struct( struct Cyc_Toc_Env* nv, struct
  _tuple0* x, void* struct_typ, struct Cyc_Absyn_Stmt* s, int pointer, struct Cyc_Absyn_Exp*
  rgnopt, int is_atomic){ struct Cyc_Absyn_Exp* eo; void* t; if( pointer){ t= Cyc_Absyn_cstar_typ(
! struct_typ, Cyc_Toc_mt_tq);{ struct Cyc_Absyn_Exp* _temp544= Cyc_Absyn_sizeoftyp_exp(
  struct_typ, 0); if( rgnopt ==  0){ eo=( struct Cyc_Absyn_Exp*) Cyc_Absyn_cast_exp(
! t, is_atomic? Cyc_Toc_malloc_atomic( _temp544): Cyc_Toc_malloc_ptr( _temp544), 0);}
  else{ struct Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*) _check_null( rgnopt); Cyc_Toc_exp_to_c(
  nv, r); eo=( struct Cyc_Absyn_Exp*) Cyc_Absyn_cast_exp( t, Cyc_Toc_rmalloc_exp(
! r, _temp544), 0);}}} else{ t= struct_typ; eo= 0;} return Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt(
  x, t, eo, s, 0), 0);} static struct Cyc_Absyn_Stmt* Cyc_Toc_init_comprehension(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp* lhs, struct Cyc_Absyn_Vardecl* vd,
  struct Cyc_Absyn_Exp* e1, struct Cyc_Absyn_Exp* e2, struct Cyc_Absyn_Stmt* s,
***************
*** 1499,1805 ****
  dles, struct Cyc_Absyn_Stmt* s); static struct Cyc_Absyn_Stmt* Cyc_Toc_init_array(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp* lhs, struct Cyc_List_List* dles0,
  struct Cyc_Absyn_Stmt* s){ int count=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! dles0) -  1;{ struct Cyc_List_List* _temp543=(( struct Cyc_List_List*(*)( struct
! Cyc_List_List* x)) Cyc_List_rev)( dles0); for( 0; _temp543 !=  0; _temp543=((
! struct Cyc_List_List*) _check_null( _temp543))->tl){ struct _tuple4 _temp546;
! struct Cyc_Absyn_Exp* _temp547; struct Cyc_List_List* _temp549; struct _tuple4*
! _temp544=( struct _tuple4*)(( struct Cyc_List_List*) _check_null( _temp543))->hd;
! _temp546=* _temp544; _LL550: _temp549= _temp546.f1; goto _LL548; _LL548:
! _temp547= _temp546.f2; goto _LL545; _LL545: { struct Cyc_Absyn_Exp* e_index; if(
! _temp549 ==  0){ e_index= Cyc_Absyn_signed_int_exp( count --, 0);} else{ if(((
! struct Cyc_List_List*) _check_null( _temp549))->tl !=  0){({ void* _temp551[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("multiple designators in array",
! sizeof( unsigned char), 30u), _tag_arr( _temp551, sizeof( void*), 0u));});}{
! void* _temp552=( void*)(( struct Cyc_List_List*) _check_null( _temp549))->hd;
! void* _temp553= _temp552; struct Cyc_Absyn_Exp* _temp559; _LL555: if(*(( int*)
! _temp553) ==  Cyc_Absyn_ArrayElement){ _LL560: _temp559=(( struct Cyc_Absyn_ArrayElement_struct*)
! _temp553)->f1; goto _LL556;} else{ goto _LL557;} _LL557: if(*(( int*) _temp553)
! ==  Cyc_Absyn_FieldName){ goto _LL558;} else{ goto _LL554;} _LL556: Cyc_Toc_exp_to_c(
! nv, _temp559); e_index= _temp559; goto _LL554; _LL558: e_index=({ void* _temp561[
  0u]={};(( struct Cyc_Absyn_Exp*(*)( struct _tagged_arr fmt, struct _tagged_arr
  ap)) Cyc_Toc_unimp)( _tag_arr("field name designators in array", sizeof(
! unsigned char), 32u), _tag_arr( _temp561, sizeof( void*), 0u));}); goto _LL554;
! _LL554:;}}{ struct Cyc_Absyn_Exp* lval= Cyc_Absyn_subscript_exp( lhs, e_index, 0);
! void* _temp562=( void*) _temp547->r; struct Cyc_List_List* _temp572; struct Cyc_Absyn_Exp*
! _temp574; struct Cyc_Absyn_Exp* _temp576; struct Cyc_Absyn_Vardecl* _temp578;
! struct Cyc_List_List* _temp580; void* _temp582; _LL564: if(*(( int*) _temp562)
! ==  Cyc_Absyn_Array_e){ _LL573: _temp572=(( struct Cyc_Absyn_Array_e_struct*)
! _temp562)->f1; goto _LL565;} else{ goto _LL566;} _LL566: if(*(( int*) _temp562)
! ==  Cyc_Absyn_Comprehension_e){ _LL579: _temp578=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp562)->f1; goto _LL577; _LL577: _temp576=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp562)->f2; goto _LL575; _LL575: _temp574=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp562)->f3; goto _LL567;} else{ goto _LL568;} _LL568: if(*(( int*) _temp562)
! ==  Cyc_Absyn_AnonStruct_e){ _LL583: _temp582=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp562)->f1; goto _LL581; _LL581: _temp580=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp562)->f2; goto _LL569;} else{ goto _LL570;} _LL570: goto _LL571; _LL565: s=
! Cyc_Toc_init_array( nv, lval, _temp572, s); goto _LL563; _LL567: s= Cyc_Toc_init_comprehension(
! nv, lval, _temp578, _temp576, _temp574, s, 0); goto _LL563; _LL569: s= Cyc_Toc_init_anon_struct(
! nv, lval, _temp582, _temp580, s); goto _LL563; _LL571: Cyc_Toc_exp_to_c( nv,
! _temp547); s= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_subscript_exp(
! lhs, e_index, 0), _temp547, 0), s, 0); goto _LL563; _LL563:;}}}} return s;}
  static struct Cyc_Absyn_Stmt* Cyc_Toc_init_comprehension( struct Cyc_Toc_Env* nv,
  struct Cyc_Absyn_Exp* lhs, struct Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Exp*
  e1, struct Cyc_Absyn_Exp* e2, struct Cyc_Absyn_Stmt* s, int
! e1_already_translated){ struct _tuple0* _temp584= vd->name; if( !
  e1_already_translated){ Cyc_Toc_exp_to_c( nv, e1);}{ struct Cyc_Toc_Env* nv2=
! Cyc_Toc_add_varmap( nv, _temp584, Cyc_Absyn_varb_exp( _temp584,( void*)({ struct
! Cyc_Absyn_Local_b_struct* _temp607=( struct Cyc_Absyn_Local_b_struct*) _cycalloc(
! sizeof( struct Cyc_Absyn_Local_b_struct)); _temp607[ 0]=({ struct Cyc_Absyn_Local_b_struct
! _temp608; _temp608.tag= Cyc_Absyn_Local_b; _temp608.f1= vd; _temp608;});
! _temp607;}), 0)); struct _tuple0* max= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp*
! ea= Cyc_Absyn_assign_exp( Cyc_Absyn_var_exp( _temp584, 0), Cyc_Absyn_signed_int_exp(
  0, 0), 0); struct Cyc_Absyn_Exp* eb= Cyc_Absyn_lt_exp( Cyc_Absyn_var_exp(
! _temp584, 0), Cyc_Absyn_var_exp( max, 0), 0); struct Cyc_Absyn_Exp* ec= Cyc_Absyn_post_inc_exp(
! Cyc_Absyn_var_exp( _temp584, 0), 0); struct Cyc_Absyn_Exp* lval= Cyc_Absyn_subscript_exp(
! lhs, Cyc_Absyn_var_exp( _temp584, 0), 0); struct Cyc_Absyn_Stmt* body;{ void*
! _temp585=( void*) e2->r; struct Cyc_List_List* _temp595; struct Cyc_Absyn_Exp*
! _temp597; struct Cyc_Absyn_Exp* _temp599; struct Cyc_Absyn_Vardecl* _temp601;
! struct Cyc_List_List* _temp603; void* _temp605; _LL587: if(*(( int*) _temp585)
! ==  Cyc_Absyn_Array_e){ _LL596: _temp595=(( struct Cyc_Absyn_Array_e_struct*)
! _temp585)->f1; goto _LL588;} else{ goto _LL589;} _LL589: if(*(( int*) _temp585)
! ==  Cyc_Absyn_Comprehension_e){ _LL602: _temp601=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp585)->f1; goto _LL600; _LL600: _temp599=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp585)->f2; goto _LL598; _LL598: _temp597=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp585)->f3; goto _LL590;} else{ goto _LL591;} _LL591: if(*(( int*) _temp585)
! ==  Cyc_Absyn_AnonStruct_e){ _LL606: _temp605=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp585)->f1; goto _LL604; _LL604: _temp603=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp585)->f2; goto _LL592;} else{ goto _LL593;} _LL593: goto _LL594; _LL588:
! body= Cyc_Toc_init_array( nv2, lval, _temp595, Cyc_Absyn_skip_stmt( 0)); goto
! _LL586; _LL590: body= Cyc_Toc_init_comprehension( nv2, lval, _temp601, _temp599,
! _temp597, Cyc_Absyn_skip_stmt( 0), 0); goto _LL586; _LL592: body= Cyc_Toc_init_anon_struct(
! nv, lval, _temp605, _temp603, Cyc_Absyn_skip_stmt( 0)); goto _LL586; _LL594: Cyc_Toc_exp_to_c(
! nv2, e2); body= Cyc_Absyn_assign_stmt( lval, e2, 0); goto _LL586; _LL586:;}{
  struct Cyc_Absyn_Stmt* s2= Cyc_Absyn_for_stmt( ea, eb, ec, body, 0); s= Cyc_Absyn_seq_stmt(
  Cyc_Absyn_declare_stmt( max, Cyc_Absyn_uint_t,( struct Cyc_Absyn_Exp*) e1, Cyc_Absyn_declare_stmt(
! _temp584, Cyc_Absyn_uint_t, 0, s2, 0), 0), s, 0); return s;}}} static struct Cyc_Absyn_Stmt*
  Cyc_Toc_init_anon_struct( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp* lhs,
  void* struct_type, struct Cyc_List_List* dles, struct Cyc_Absyn_Stmt* s){{
! struct Cyc_List_List* _temp609=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_rev)( dles); for( 0; _temp609 !=  0; _temp609=(( struct Cyc_List_List*)
! _check_null( _temp609))->tl){ struct _tuple4 _temp612; struct Cyc_Absyn_Exp*
! _temp613; struct Cyc_List_List* _temp615; struct _tuple4* _temp610=( struct
! _tuple4*)(( struct Cyc_List_List*) _check_null( _temp609))->hd; _temp612=*
! _temp610; _LL616: _temp615= _temp612.f1; goto _LL614; _LL614: _temp613= _temp612.f2;
! goto _LL611; _LL611: if( _temp615 ==  0){({ void* _temp617[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("empty designator list",
! sizeof( unsigned char), 22u), _tag_arr( _temp617, sizeof( void*), 0u));});} if(((
! struct Cyc_List_List*) _check_null( _temp615))->tl !=  0){({ void* _temp618[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("too many designators in anonymous struct", sizeof( unsigned char), 41u),
! _tag_arr( _temp618, sizeof( void*), 0u));});}{ void* _temp619=( void*)(( struct
! Cyc_List_List*) _check_null( _temp615))->hd; struct _tagged_arr* _temp625;
! _LL621: if(*(( int*) _temp619) ==  Cyc_Absyn_FieldName){ _LL626: _temp625=((
! struct Cyc_Absyn_FieldName_struct*) _temp619)->f1; goto _LL622;} else{ goto
! _LL623;} _LL623: goto _LL624; _LL622: { struct Cyc_Absyn_Exp* lval= Cyc_Absyn_structmember_exp(
! lhs, _temp625, 0);{ void* _temp627=( void*) _temp613->r; struct Cyc_List_List*
! _temp637; struct Cyc_Absyn_Exp* _temp639; struct Cyc_Absyn_Exp* _temp641; struct
! Cyc_Absyn_Vardecl* _temp643; struct Cyc_List_List* _temp645; void* _temp647;
! _LL629: if(*(( int*) _temp627) ==  Cyc_Absyn_Array_e){ _LL638: _temp637=((
! struct Cyc_Absyn_Array_e_struct*) _temp627)->f1; goto _LL630;} else{ goto _LL631;}
! _LL631: if(*(( int*) _temp627) ==  Cyc_Absyn_Comprehension_e){ _LL644: _temp643=((
! struct Cyc_Absyn_Comprehension_e_struct*) _temp627)->f1; goto _LL642; _LL642:
! _temp641=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp627)->f2; goto _LL640;
! _LL640: _temp639=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp627)->f3;
! goto _LL632;} else{ goto _LL633;} _LL633: if(*(( int*) _temp627) ==  Cyc_Absyn_AnonStruct_e){
! _LL648: _temp647=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*) _temp627)->f1;
! goto _LL646; _LL646: _temp645=(( struct Cyc_Absyn_AnonStruct_e_struct*) _temp627)->f2;
! goto _LL634;} else{ goto _LL635;} _LL635: goto _LL636; _LL630: s= Cyc_Toc_init_array(
! nv, lval, _temp637, s); goto _LL628; _LL632: s= Cyc_Toc_init_comprehension( nv,
! lval, _temp643, _temp641, _temp639, s, 0); goto _LL628; _LL634: s= Cyc_Toc_init_anon_struct(
! nv, lval, _temp647, _temp645, s); goto _LL628; _LL636: Cyc_Toc_exp_to_c( nv,
! _temp613); if( Cyc_Toc_is_poly_field( struct_type, _temp625)){ _temp613= Cyc_Absyn_cast_exp(
! Cyc_Absyn_void_star_typ(), _temp613, 0);} s= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt(
! Cyc_Absyn_assign_exp( lval, _temp613, 0), 0), s, 0); goto _LL628; _LL628:;} goto
! _LL620;} _LL624:( int) _throw(({ void* _temp649[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("array designator in struct", sizeof( unsigned char), 27u), _tag_arr(
! _temp649, sizeof( void*), 0u));})); _LL620:;}}} return s;} static struct Cyc_Absyn_Exp*
  Cyc_Toc_init_tuple( struct Cyc_Toc_Env* nv, int pointer, struct Cyc_Absyn_Exp*
! rgnopt, struct Cyc_List_List* es){ struct _RegionHandle _temp650= _new_region();
! struct _RegionHandle* r=& _temp650; _push_region( r);{ struct Cyc_List_List*
! _temp651=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct _tuple3*(* f)(
  struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_rmap)( r, Cyc_Toc_tup_to_c,
! es); struct _tagged_arr* _temp652= Cyc_Toc_add_tuple_type( _temp651); struct
! _tuple0* _temp653= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* _temp654= Cyc_Absyn_var_exp(
! _temp653, 0); struct Cyc_Absyn_Stmt* _temp655= Cyc_Absyn_exp_stmt( _temp654, 0);
! struct Cyc_Absyn_Exp*(* _temp656)( struct Cyc_Absyn_Exp*, struct _tagged_arr*,
  struct Cyc_Position_Segment*)= pointer? Cyc_Absyn_structarrow_exp: Cyc_Absyn_structmember_exp;
! int is_atomic= 1; struct Cyc_List_List* _temp657=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct Cyc_List_List* x)) Cyc_List_rrev)( r, es);{ int i=((
! int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp657); for( 0; _temp657
! !=  0;( _temp657=(( struct Cyc_List_List*) _check_null( _temp657))->tl, -- i)){
  struct Cyc_Absyn_Exp* e=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
! _check_null( _temp657))->hd; struct Cyc_Absyn_Exp* lval= _temp656( _temp654, Cyc_Absyn_fieldname(
  i), 0); is_atomic= is_atomic? Cyc_Toc_atomic_typ(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v): 0;{ void* _temp658=( void*) e->r; struct Cyc_List_List*
! _temp666; struct Cyc_Absyn_Exp* _temp668; struct Cyc_Absyn_Exp* _temp670; struct
! Cyc_Absyn_Vardecl* _temp672; _LL660: if(*(( int*) _temp658) ==  Cyc_Absyn_Array_e){
! _LL667: _temp666=(( struct Cyc_Absyn_Array_e_struct*) _temp658)->f1; goto _LL661;}
! else{ goto _LL662;} _LL662: if(*(( int*) _temp658) ==  Cyc_Absyn_Comprehension_e){
! _LL673: _temp672=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp658)->f1;
! goto _LL671; _LL671: _temp670=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp658)->f2; goto _LL669; _LL669: _temp668=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp658)->f3; goto _LL663;} else{ goto _LL664;} _LL664: goto _LL665; _LL661:
! _temp655= Cyc_Toc_init_array( nv, lval, _temp666, _temp655); goto _LL659; _LL663:
! _temp655= Cyc_Toc_init_comprehension( nv, lval, _temp672, _temp670, _temp668,
! _temp655, 0); goto _LL659; _LL665: Cyc_Toc_exp_to_c( nv, e); _temp655= Cyc_Absyn_seq_stmt(
! Cyc_Absyn_exp_stmt( Cyc_Absyn_assign_exp( _temp656( _temp654, Cyc_Absyn_fieldname(
! i), 0), e, 0), 0), _temp655, 0); goto _LL659; _LL659:;}}}{ struct Cyc_Absyn_Exp*
! _temp674= Cyc_Toc_make_struct( nv, _temp653, Cyc_Absyn_strct( _temp652),
! _temp655, pointer, rgnopt, is_atomic); _npop_handler( 0u); return _temp674;}};
  _pop_region( r);} static struct Cyc_Absyn_Exp* Cyc_Toc_init_struct( struct Cyc_Toc_Env*
  nv, void* struct_type, int pointer, struct Cyc_Absyn_Exp* rgnopt, struct Cyc_List_List*
! dles, struct _tuple0* tdn){ struct _tuple0* _temp675= Cyc_Toc_temp_var(); struct
! Cyc_Absyn_Exp* _temp676= Cyc_Absyn_var_exp( _temp675, 0); struct Cyc_Absyn_Stmt*
! _temp677= Cyc_Absyn_exp_stmt( _temp676, 0); struct Cyc_Absyn_Exp*(* _temp678)(
  struct Cyc_Absyn_Exp*, struct _tagged_arr*, struct Cyc_Position_Segment*)=
  pointer? Cyc_Absyn_structarrow_exp: Cyc_Absyn_structmember_exp; int is_atomic= 1;
! struct _RegionHandle _temp679= _new_region(); struct _RegionHandle* r=& _temp679;
! _push_region( r);{ struct Cyc_List_List* _temp680=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct Cyc_List_List* x)) Cyc_List_rrev)( r, dles); for(
! 0; _temp680 !=  0; _temp680=(( struct Cyc_List_List*) _check_null( _temp680))->tl){
! struct _tuple4 _temp683; struct Cyc_Absyn_Exp* _temp684; struct Cyc_List_List*
! _temp686; struct _tuple4* _temp681=( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp680))->hd; _temp683=* _temp681; _LL687: _temp686= _temp683.f1;
! goto _LL685; _LL685: _temp684= _temp683.f2; goto _LL682; _LL682: is_atomic=
  is_atomic? Cyc_Toc_atomic_typ(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp684->topt))->v): 0; if( _temp686 ==  0){({ void* _temp688[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("empty designator list",
! sizeof( unsigned char), 22u), _tag_arr( _temp688, sizeof( void*), 0u));});} if(((
! struct Cyc_List_List*) _check_null( _temp686))->tl !=  0){ struct _tuple0*
! _temp689= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* _temp690= Cyc_Absyn_var_exp(
! _temp689, 0); for( 0; _temp686 !=  0; _temp686=(( struct Cyc_List_List*)
! _check_null( _temp686))->tl){ void* _temp691=( void*)(( struct Cyc_List_List*)
! _check_null( _temp686))->hd; struct _tagged_arr* _temp697; _LL693: if(*(( int*)
! _temp691) ==  Cyc_Absyn_FieldName){ _LL698: _temp697=(( struct Cyc_Absyn_FieldName_struct*)
! _temp691)->f1; goto _LL694;} else{ goto _LL695;} _LL695: goto _LL696; _LL694:
! if( Cyc_Toc_is_poly_field( struct_type, _temp697)){ _temp690= Cyc_Absyn_cast_exp(
! Cyc_Absyn_void_star_typ(), _temp690, 0);} _temp677= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt(
! Cyc_Absyn_assign_exp( _temp678( _temp676, _temp697, 0), _temp690, 0), 0),
! _temp677, 0); goto _LL692; _LL696:( int) _throw(({ void* _temp699[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("array designator in struct", sizeof( unsigned char), 27u), _tag_arr(
! _temp699, sizeof( void*), 0u));})); _LL692:;} Cyc_Toc_exp_to_c( nv, _temp684);
! _temp677= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt( Cyc_Absyn_assign_exp( _temp690,
! _temp684, 0), 0), _temp677, 0);} else{ void* _temp700=( void*)(( struct Cyc_List_List*)
! _check_null( _temp686))->hd; struct _tagged_arr* _temp706; _LL702: if(*(( int*)
! _temp700) ==  Cyc_Absyn_FieldName){ _LL707: _temp706=(( struct Cyc_Absyn_FieldName_struct*)
! _temp700)->f1; goto _LL703;} else{ goto _LL704;} _LL704: goto _LL705; _LL703: {
! struct Cyc_Absyn_Exp* lval= _temp678( _temp676, _temp706, 0);{ void* _temp708=(
! void*) _temp684->r; struct Cyc_List_List* _temp718; struct Cyc_Absyn_Exp*
! _temp720; struct Cyc_Absyn_Exp* _temp722; struct Cyc_Absyn_Vardecl* _temp724;
! struct Cyc_List_List* _temp726; void* _temp728; _LL710: if(*(( int*) _temp708)
! ==  Cyc_Absyn_Array_e){ _LL719: _temp718=(( struct Cyc_Absyn_Array_e_struct*)
! _temp708)->f1; goto _LL711;} else{ goto _LL712;} _LL712: if(*(( int*) _temp708)
! ==  Cyc_Absyn_Comprehension_e){ _LL725: _temp724=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp708)->f1; goto _LL723; _LL723: _temp722=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp708)->f2; goto _LL721; _LL721: _temp720=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp708)->f3; goto _LL713;} else{ goto _LL714;} _LL714: if(*(( int*) _temp708)
! ==  Cyc_Absyn_AnonStruct_e){ _LL729: _temp728=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp708)->f1; goto _LL727; _LL727: _temp726=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp708)->f2; goto _LL715;} else{ goto _LL716;} _LL716: goto _LL717; _LL711:
! _temp677= Cyc_Toc_init_array( nv, lval, _temp718, _temp677); goto _LL709; _LL713:
! _temp677= Cyc_Toc_init_comprehension( nv, lval, _temp724, _temp722, _temp720,
! _temp677, 0); goto _LL709; _LL715: _temp677= Cyc_Toc_init_anon_struct( nv, lval,
! _temp728, _temp726, _temp677); goto _LL709; _LL717: Cyc_Toc_exp_to_c( nv,
! _temp684); if( Cyc_Toc_is_poly_field( struct_type, _temp706)){ _temp684= Cyc_Absyn_cast_exp(
! Cyc_Absyn_void_star_typ(), _temp684, 0);} _temp677= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt(
! Cyc_Absyn_assign_exp( lval, _temp684, 0), 0), _temp677, 0); goto _LL709; _LL709:;}
! goto _LL701;} _LL705:( int) _throw(({ void* _temp730[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("array designator in struct", sizeof( unsigned char), 27u), _tag_arr(
! _temp730, sizeof( void*), 0u));})); _LL701:;}}}{ struct Cyc_Absyn_Exp* _temp731=
! Cyc_Toc_make_struct( nv, _temp675, Cyc_Absyn_strctq( tdn), _temp677, pointer,
! rgnopt, is_atomic); _npop_handler( 0u); return _temp731;}; _pop_region( r);}
  struct _tuple7{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Exp* f2; } ; static
  struct Cyc_Absyn_Exp* Cyc_Toc_assignop_lvalue( struct Cyc_Absyn_Exp* el, struct
  _tuple7* pr){ return Cyc_Absyn_assignop_exp( el,(* pr).f1,(* pr).f2, 0);} static
  struct Cyc_Absyn_Exp* Cyc_Toc_address_lvalue( struct Cyc_Absyn_Exp* e1, int
  ignore){ return Cyc_Absyn_address_exp( e1, 0);} static struct Cyc_Absyn_Exp* Cyc_Toc_incr_lvalue(
  struct Cyc_Absyn_Exp* e1, void* incr){ return Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Increment_e_struct* _temp732=( struct Cyc_Absyn_Increment_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Increment_e_struct)); _temp732[ 0]=({ struct
! Cyc_Absyn_Increment_e_struct _temp733; _temp733.tag= Cyc_Absyn_Increment_e;
! _temp733.f1= e1; _temp733.f2=( void*) incr; _temp733;}); _temp732;}), 0);}
  static void Cyc_Toc_lvalue_assign_stmt( struct Cyc_Absyn_Stmt* s, struct Cyc_List_List*
  fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*, void*), void* f_env);
  static void Cyc_Toc_lvalue_assign( struct Cyc_Absyn_Exp* e1, struct Cyc_List_List*
  fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*, void*), void* f_env){
! void* _temp734=( void*) e1->r; struct Cyc_Absyn_Stmt* _temp744; struct Cyc_Absyn_Exp*
! _temp746; void* _temp748; struct _tagged_arr* _temp750; struct Cyc_Absyn_Exp*
! _temp752; _LL736: if(*(( int*) _temp734) ==  Cyc_Absyn_StmtExp_e){ _LL745:
! _temp744=(( struct Cyc_Absyn_StmtExp_e_struct*) _temp734)->f1; goto _LL737;}
! else{ goto _LL738;} _LL738: if(*(( int*) _temp734) ==  Cyc_Absyn_Cast_e){ _LL749:
! _temp748=( void*)(( struct Cyc_Absyn_Cast_e_struct*) _temp734)->f1; goto _LL747;
! _LL747: _temp746=(( struct Cyc_Absyn_Cast_e_struct*) _temp734)->f2; goto _LL739;}
! else{ goto _LL740;} _LL740: if(*(( int*) _temp734) ==  Cyc_Absyn_StructMember_e){
! _LL753: _temp752=(( struct Cyc_Absyn_StructMember_e_struct*) _temp734)->f1; goto
! _LL751; _LL751: _temp750=(( struct Cyc_Absyn_StructMember_e_struct*) _temp734)->f2;
! goto _LL741;} else{ goto _LL742;} _LL742: goto _LL743; _LL737: Cyc_Toc_lvalue_assign_stmt(
! _temp744, fs, f, f_env); goto _LL735; _LL739: Cyc_Toc_lvalue_assign( _temp746,
! fs, f, f_env); goto _LL735; _LL741:( void*)( e1->r=( void*)(( void*) _temp752->r));
  Cyc_Toc_lvalue_assign( e1,( struct Cyc_List_List*)({ struct Cyc_List_List*
! _temp754=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp754->hd=( void*) _temp750; _temp754->tl= fs; _temp754;}), f, f_env); goto
! _LL735; _LL743: if( ! Cyc_Absyn_is_lvalue( e1)){({ struct Cyc_Std_String_pa_struct
! _temp756; _temp756.tag= Cyc_Std_String_pa; _temp756.f1=( struct _tagged_arr) Cyc_Absynpp_exp2string(
! e1);{ void* _temp755[ 1u]={& _temp756};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("lvalue_assign: could not find lvalue in `%s'",
! sizeof( unsigned char), 45u), _tag_arr( _temp755, sizeof( void*), 1u));}});}{
  struct Cyc_Absyn_Exp* e1_copy= Cyc_Absyn_copy_exp( e1); for( 0; fs !=  0; fs=((
  struct Cyc_List_List*) _check_null( fs))->tl){ e1_copy= Cyc_Absyn_structmember_exp(
  e1_copy,( struct _tagged_arr*)(( struct Cyc_List_List*) _check_null( fs))->hd,
  e1_copy->loc);}( void*)( e1->r=( void*)(( void*)( f( e1_copy, f_env))->r)); goto
! _LL735;} _LL735:;} static void Cyc_Toc_lvalue_assign_stmt( struct Cyc_Absyn_Stmt*
  s, struct Cyc_List_List* fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*,
! void*), void* f_env){ void* _temp757=( void*) s->r; struct Cyc_Absyn_Exp*
! _temp767; struct Cyc_Absyn_Stmt* _temp769; struct Cyc_Absyn_Decl* _temp771;
! struct Cyc_Absyn_Stmt* _temp773; _LL759: if(( unsigned int) _temp757 >  1u?*((
! int*) _temp757) ==  Cyc_Absyn_Exp_s: 0){ _LL768: _temp767=(( struct Cyc_Absyn_Exp_s_struct*)
! _temp757)->f1; goto _LL760;} else{ goto _LL761;} _LL761: if(( unsigned int)
! _temp757 >  1u?*(( int*) _temp757) ==  Cyc_Absyn_Decl_s: 0){ _LL772: _temp771=((
! struct Cyc_Absyn_Decl_s_struct*) _temp757)->f1; goto _LL770; _LL770: _temp769=((
! struct Cyc_Absyn_Decl_s_struct*) _temp757)->f2; goto _LL762;} else{ goto _LL763;}
! _LL763: if(( unsigned int) _temp757 >  1u?*(( int*) _temp757) ==  Cyc_Absyn_Seq_s:
! 0){ _LL774: _temp773=(( struct Cyc_Absyn_Seq_s_struct*) _temp757)->f2; goto
! _LL764;} else{ goto _LL765;} _LL765: goto _LL766; _LL760: Cyc_Toc_lvalue_assign(
! _temp767, fs, f, f_env); goto _LL758; _LL762: Cyc_Toc_lvalue_assign_stmt(
! _temp769, fs, f, f_env); goto _LL758; _LL764: Cyc_Toc_lvalue_assign_stmt(
! _temp773, fs, f, f_env); goto _LL758; _LL766:({ struct Cyc_Std_String_pa_struct
! _temp776; _temp776.tag= Cyc_Std_String_pa; _temp776.f1=( struct _tagged_arr) Cyc_Absynpp_stmt2string(
! s);{ void* _temp775[ 1u]={& _temp776};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("lvalue_assign_stmt: %s", sizeof(
! unsigned char), 23u), _tag_arr( _temp775, sizeof( void*), 1u));}}); goto _LL758;
! _LL758:;} static struct Cyc_List_List* Cyc_Toc_rmap_2c( struct _RegionHandle* r2,
  void*(* f)( void*, void*), void* env, struct Cyc_List_List* x){ struct Cyc_List_List*
  result; struct Cyc_List_List* prev; if( x ==  0){ return 0;} result=({ struct
! Cyc_List_List* _temp777=( struct Cyc_List_List*) _region_malloc( r2, sizeof(
! struct Cyc_List_List)); _temp777->hd=( void*) f(( void*)(( struct Cyc_List_List*)
! _check_null( x))->hd, env); _temp777->tl= 0; _temp777;}); prev= result; for( x=((
  struct Cyc_List_List*) _check_null( x))->tl; x !=  0; x=(( struct Cyc_List_List*)
  _check_null( x))->tl){(( struct Cyc_List_List*) _check_null( prev))->tl=({
! struct Cyc_List_List* _temp778=( struct Cyc_List_List*) _region_malloc( r2,
! sizeof( struct Cyc_List_List)); _temp778->hd=( void*) f(( void*)(( struct Cyc_List_List*)
! _check_null( x))->hd, env); _temp778->tl= 0; _temp778;}); prev=(( struct Cyc_List_List*)
  _check_null( prev))->tl;} return result;} static struct Cyc_List_List* Cyc_Toc_map_2c(
  void*(* f)( void*, void*), void* env, struct Cyc_List_List* x){ return Cyc_Toc_rmap_2c(
  Cyc_Core_heap_region, f, env, x);} static struct _tuple4* Cyc_Toc_make_dle(
! struct Cyc_Absyn_Exp* e){ return({ struct _tuple4* _temp779=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp779->f1= 0; _temp779->f2= e; _temp779;});}
! static struct Cyc_Absyn_PtrInfo Cyc_Toc_get_ptr_type( void* t){ void* _temp780=
! Cyc_Tcutil_compress( t); struct Cyc_Absyn_PtrInfo _temp786; _LL782: if((
! unsigned int) _temp780 >  4u?*(( int*) _temp780) ==  Cyc_Absyn_PointerType: 0){
! _LL787: _temp786=(( struct Cyc_Absyn_PointerType_struct*) _temp780)->f1; goto
! _LL783;} else{ goto _LL784;} _LL784: goto _LL785; _LL783: return _temp786;
! _LL785:( int) _throw(({ void* _temp788[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("get_ptr_typ: not a pointer!",
! sizeof( unsigned char), 28u), _tag_arr( _temp788, sizeof( void*), 0u));}));
! _LL781:;} struct _tuple8{ void* f1; void* f2; } ; struct _tuple9{ struct _tuple0*
  f1; void* f2; struct Cyc_Absyn_Exp* f3; } ; struct _tuple10{ struct Cyc_Absyn_Structfield*
  f1; struct Cyc_Absyn_Exp* f2; } ; static void Cyc_Toc_exp_to_c( struct Cyc_Toc_Env*
! nv, struct Cyc_Absyn_Exp* e){ void* _temp789=( void*) e->r; if( e->topt ==  0){({
! struct Cyc_Std_String_pa_struct _temp791; _temp791.tag= Cyc_Std_String_pa;
! _temp791.f1=( struct _tagged_arr) Cyc_Absynpp_exp2string( e);{ void* _temp790[ 1u]={&
! _temp791};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("exp_to_c: no type for %s", sizeof( unsigned char), 25u), _tag_arr(
! _temp790, sizeof( void*), 1u));}}); return;}{ void* old_typ=( void*)(( struct
! Cyc_Core_Opt*) _check_null( e->topt))->v; void* _temp792= _temp789; void*
  _temp876; void* _temp878; struct _tuple0* _temp880; struct _tuple0* _temp882;
  struct Cyc_List_List* _temp884; void* _temp886; void* _temp888; struct Cyc_Absyn_Exp*
  _temp890; struct Cyc_Absyn_Exp* _temp892; struct Cyc_Core_Opt* _temp894; struct
--- 1496,1802 ----
  dles, struct Cyc_Absyn_Stmt* s); static struct Cyc_Absyn_Stmt* Cyc_Toc_init_array(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp* lhs, struct Cyc_List_List* dles0,
  struct Cyc_Absyn_Stmt* s){ int count=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! dles0) -  1;{ struct Cyc_List_List* _temp545=(( struct Cyc_List_List*(*)( struct
! Cyc_List_List* x)) Cyc_List_rev)( dles0); for( 0; _temp545 !=  0; _temp545=((
! struct Cyc_List_List*) _check_null( _temp545))->tl){ struct _tuple4 _temp548;
! struct Cyc_Absyn_Exp* _temp549; struct Cyc_List_List* _temp551; struct _tuple4*
! _temp546=( struct _tuple4*)(( struct Cyc_List_List*) _check_null( _temp545))->hd;
! _temp548=* _temp546; _LL552: _temp551= _temp548.f1; goto _LL550; _LL550:
! _temp549= _temp548.f2; goto _LL547; _LL547: { struct Cyc_Absyn_Exp* e_index; if(
! _temp551 ==  0){ e_index= Cyc_Absyn_signed_int_exp( count --, 0);} else{ if(((
! struct Cyc_List_List*) _check_null( _temp551))->tl !=  0){({ void* _temp553[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("multiple designators in array",
! sizeof( unsigned char), 30u), _tag_arr( _temp553, sizeof( void*), 0u));});}{
! void* _temp554=( void*)(( struct Cyc_List_List*) _check_null( _temp551))->hd;
! void* _temp555= _temp554; struct Cyc_Absyn_Exp* _temp561; _LL557: if(*(( int*)
! _temp555) ==  Cyc_Absyn_ArrayElement){ _LL562: _temp561=(( struct Cyc_Absyn_ArrayElement_struct*)
! _temp555)->f1; goto _LL558;} else{ goto _LL559;} _LL559: if(*(( int*) _temp555)
! ==  Cyc_Absyn_FieldName){ goto _LL560;} else{ goto _LL556;} _LL558: Cyc_Toc_exp_to_c(
! nv, _temp561); e_index= _temp561; goto _LL556; _LL560: e_index=({ void* _temp563[
  0u]={};(( struct Cyc_Absyn_Exp*(*)( struct _tagged_arr fmt, struct _tagged_arr
  ap)) Cyc_Toc_unimp)( _tag_arr("field name designators in array", sizeof(
! unsigned char), 32u), _tag_arr( _temp563, sizeof( void*), 0u));}); goto _LL556;
! _LL556:;}}{ struct Cyc_Absyn_Exp* lval= Cyc_Absyn_subscript_exp( lhs, e_index, 0);
! void* _temp564=( void*) _temp549->r; struct Cyc_List_List* _temp574; struct Cyc_Absyn_Exp*
! _temp576; struct Cyc_Absyn_Exp* _temp578; struct Cyc_Absyn_Vardecl* _temp580;
! struct Cyc_List_List* _temp582; void* _temp584; _LL566: if(*(( int*) _temp564)
! ==  Cyc_Absyn_Array_e){ _LL575: _temp574=(( struct Cyc_Absyn_Array_e_struct*)
! _temp564)->f1; goto _LL567;} else{ goto _LL568;} _LL568: if(*(( int*) _temp564)
! ==  Cyc_Absyn_Comprehension_e){ _LL581: _temp580=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp564)->f1; goto _LL579; _LL579: _temp578=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp564)->f2; goto _LL577; _LL577: _temp576=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp564)->f3; goto _LL569;} else{ goto _LL570;} _LL570: if(*(( int*) _temp564)
! ==  Cyc_Absyn_AnonStruct_e){ _LL585: _temp584=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp564)->f1; goto _LL583; _LL583: _temp582=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp564)->f2; goto _LL571;} else{ goto _LL572;} _LL572: goto _LL573; _LL567: s=
! Cyc_Toc_init_array( nv, lval, _temp574, s); goto _LL565; _LL569: s= Cyc_Toc_init_comprehension(
! nv, lval, _temp580, _temp578, _temp576, s, 0); goto _LL565; _LL571: s= Cyc_Toc_init_anon_struct(
! nv, lval, _temp584, _temp582, s); goto _LL565; _LL573: Cyc_Toc_exp_to_c( nv,
! _temp549); s= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_subscript_exp(
! lhs, e_index, 0), _temp549, 0), s, 0); goto _LL565; _LL565:;}}}} return s;}
  static struct Cyc_Absyn_Stmt* Cyc_Toc_init_comprehension( struct Cyc_Toc_Env* nv,
  struct Cyc_Absyn_Exp* lhs, struct Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Exp*
  e1, struct Cyc_Absyn_Exp* e2, struct Cyc_Absyn_Stmt* s, int
! e1_already_translated){ struct _tuple0* _temp586= vd->name; if( !
  e1_already_translated){ Cyc_Toc_exp_to_c( nv, e1);}{ struct Cyc_Toc_Env* nv2=
! Cyc_Toc_add_varmap( nv, _temp586, Cyc_Absyn_varb_exp( _temp586,( void*)({ struct
! Cyc_Absyn_Local_b_struct* _temp609=( struct Cyc_Absyn_Local_b_struct*) _cycalloc(
! sizeof( struct Cyc_Absyn_Local_b_struct)); _temp609[ 0]=({ struct Cyc_Absyn_Local_b_struct
! _temp610; _temp610.tag= Cyc_Absyn_Local_b; _temp610.f1= vd; _temp610;});
! _temp609;}), 0)); struct _tuple0* max= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp*
! ea= Cyc_Absyn_assign_exp( Cyc_Absyn_var_exp( _temp586, 0), Cyc_Absyn_signed_int_exp(
  0, 0), 0); struct Cyc_Absyn_Exp* eb= Cyc_Absyn_lt_exp( Cyc_Absyn_var_exp(
! _temp586, 0), Cyc_Absyn_var_exp( max, 0), 0); struct Cyc_Absyn_Exp* ec= Cyc_Absyn_post_inc_exp(
! Cyc_Absyn_var_exp( _temp586, 0), 0); struct Cyc_Absyn_Exp* lval= Cyc_Absyn_subscript_exp(
! lhs, Cyc_Absyn_var_exp( _temp586, 0), 0); struct Cyc_Absyn_Stmt* body;{ void*
! _temp587=( void*) e2->r; struct Cyc_List_List* _temp597; struct Cyc_Absyn_Exp*
! _temp599; struct Cyc_Absyn_Exp* _temp601; struct Cyc_Absyn_Vardecl* _temp603;
! struct Cyc_List_List* _temp605; void* _temp607; _LL589: if(*(( int*) _temp587)
! ==  Cyc_Absyn_Array_e){ _LL598: _temp597=(( struct Cyc_Absyn_Array_e_struct*)
! _temp587)->f1; goto _LL590;} else{ goto _LL591;} _LL591: if(*(( int*) _temp587)
! ==  Cyc_Absyn_Comprehension_e){ _LL604: _temp603=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp587)->f1; goto _LL602; _LL602: _temp601=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp587)->f2; goto _LL600; _LL600: _temp599=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp587)->f3; goto _LL592;} else{ goto _LL593;} _LL593: if(*(( int*) _temp587)
! ==  Cyc_Absyn_AnonStruct_e){ _LL608: _temp607=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp587)->f1; goto _LL606; _LL606: _temp605=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp587)->f2; goto _LL594;} else{ goto _LL595;} _LL595: goto _LL596; _LL590:
! body= Cyc_Toc_init_array( nv2, lval, _temp597, Cyc_Absyn_skip_stmt( 0)); goto
! _LL588; _LL592: body= Cyc_Toc_init_comprehension( nv2, lval, _temp603, _temp601,
! _temp599, Cyc_Absyn_skip_stmt( 0), 0); goto _LL588; _LL594: body= Cyc_Toc_init_anon_struct(
! nv, lval, _temp607, _temp605, Cyc_Absyn_skip_stmt( 0)); goto _LL588; _LL596: Cyc_Toc_exp_to_c(
! nv2, e2); body= Cyc_Absyn_assign_stmt( lval, e2, 0); goto _LL588; _LL588:;}{
  struct Cyc_Absyn_Stmt* s2= Cyc_Absyn_for_stmt( ea, eb, ec, body, 0); s= Cyc_Absyn_seq_stmt(
  Cyc_Absyn_declare_stmt( max, Cyc_Absyn_uint_t,( struct Cyc_Absyn_Exp*) e1, Cyc_Absyn_declare_stmt(
! _temp586, Cyc_Absyn_uint_t, 0, s2, 0), 0), s, 0); return s;}}} static struct Cyc_Absyn_Stmt*
  Cyc_Toc_init_anon_struct( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Exp* lhs,
  void* struct_type, struct Cyc_List_List* dles, struct Cyc_Absyn_Stmt* s){{
! struct Cyc_List_List* _temp611=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_rev)( dles); for( 0; _temp611 !=  0; _temp611=(( struct Cyc_List_List*)
! _check_null( _temp611))->tl){ struct _tuple4 _temp614; struct Cyc_Absyn_Exp*
! _temp615; struct Cyc_List_List* _temp617; struct _tuple4* _temp612=( struct
! _tuple4*)(( struct Cyc_List_List*) _check_null( _temp611))->hd; _temp614=*
! _temp612; _LL618: _temp617= _temp614.f1; goto _LL616; _LL616: _temp615= _temp614.f2;
! goto _LL613; _LL613: if( _temp617 ==  0){({ void* _temp619[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("empty designator list",
! sizeof( unsigned char), 22u), _tag_arr( _temp619, sizeof( void*), 0u));});} if(((
! struct Cyc_List_List*) _check_null( _temp617))->tl !=  0){({ void* _temp620[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("too many designators in anonymous struct", sizeof( unsigned char), 41u),
! _tag_arr( _temp620, sizeof( void*), 0u));});}{ void* _temp621=( void*)(( struct
! Cyc_List_List*) _check_null( _temp617))->hd; struct _tagged_arr* _temp627;
! _LL623: if(*(( int*) _temp621) ==  Cyc_Absyn_FieldName){ _LL628: _temp627=((
! struct Cyc_Absyn_FieldName_struct*) _temp621)->f1; goto _LL624;} else{ goto
! _LL625;} _LL625: goto _LL626; _LL624: { struct Cyc_Absyn_Exp* lval= Cyc_Absyn_structmember_exp(
! lhs, _temp627, 0);{ void* _temp629=( void*) _temp615->r; struct Cyc_List_List*
! _temp639; struct Cyc_Absyn_Exp* _temp641; struct Cyc_Absyn_Exp* _temp643; struct
! Cyc_Absyn_Vardecl* _temp645; struct Cyc_List_List* _temp647; void* _temp649;
! _LL631: if(*(( int*) _temp629) ==  Cyc_Absyn_Array_e){ _LL640: _temp639=((
! struct Cyc_Absyn_Array_e_struct*) _temp629)->f1; goto _LL632;} else{ goto _LL633;}
! _LL633: if(*(( int*) _temp629) ==  Cyc_Absyn_Comprehension_e){ _LL646: _temp645=((
! struct Cyc_Absyn_Comprehension_e_struct*) _temp629)->f1; goto _LL644; _LL644:
! _temp643=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp629)->f2; goto _LL642;
! _LL642: _temp641=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp629)->f3;
! goto _LL634;} else{ goto _LL635;} _LL635: if(*(( int*) _temp629) ==  Cyc_Absyn_AnonStruct_e){
! _LL650: _temp649=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*) _temp629)->f1;
! goto _LL648; _LL648: _temp647=(( struct Cyc_Absyn_AnonStruct_e_struct*) _temp629)->f2;
! goto _LL636;} else{ goto _LL637;} _LL637: goto _LL638; _LL632: s= Cyc_Toc_init_array(
! nv, lval, _temp639, s); goto _LL630; _LL634: s= Cyc_Toc_init_comprehension( nv,
! lval, _temp645, _temp643, _temp641, s, 0); goto _LL630; _LL636: s= Cyc_Toc_init_anon_struct(
! nv, lval, _temp649, _temp647, s); goto _LL630; _LL638: Cyc_Toc_exp_to_c( nv,
! _temp615); if( Cyc_Toc_is_poly_field( struct_type, _temp627)){ _temp615= Cyc_Absyn_cast_exp(
! Cyc_Absyn_void_star_typ(), _temp615, 0);} s= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt(
! Cyc_Absyn_assign_exp( lval, _temp615, 0), 0), s, 0); goto _LL630; _LL630:;} goto
! _LL622;} _LL626:( int) _throw(({ void* _temp651[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("array designator in struct", sizeof( unsigned char), 27u), _tag_arr(
! _temp651, sizeof( void*), 0u));})); _LL622:;}}} return s;} static struct Cyc_Absyn_Exp*
  Cyc_Toc_init_tuple( struct Cyc_Toc_Env* nv, int pointer, struct Cyc_Absyn_Exp*
! rgnopt, struct Cyc_List_List* es){ struct _RegionHandle _temp652= _new_region();
! struct _RegionHandle* r=& _temp652; _push_region( r);{ struct Cyc_List_List*
! _temp653=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct _tuple3*(* f)(
  struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_rmap)( r, Cyc_Toc_tup_to_c,
! es); struct _tagged_arr* _temp654= Cyc_Toc_add_tuple_type( _temp653); struct
! _tuple0* _temp655= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* _temp656= Cyc_Absyn_var_exp(
! _temp655, 0); struct Cyc_Absyn_Stmt* _temp657= Cyc_Absyn_exp_stmt( _temp656, 0);
! struct Cyc_Absyn_Exp*(* _temp658)( struct Cyc_Absyn_Exp*, struct _tagged_arr*,
  struct Cyc_Position_Segment*)= pointer? Cyc_Absyn_structarrow_exp: Cyc_Absyn_structmember_exp;
! int is_atomic= 1; struct Cyc_List_List* _temp659=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct Cyc_List_List* x)) Cyc_List_rrev)( r, es);{ int i=((
! int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp659); for( 0; _temp659
! !=  0;( _temp659=(( struct Cyc_List_List*) _check_null( _temp659))->tl, -- i)){
  struct Cyc_Absyn_Exp* e=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
! _check_null( _temp659))->hd; struct Cyc_Absyn_Exp* lval= _temp658( _temp656, Cyc_Absyn_fieldname(
  i), 0); is_atomic= is_atomic? Cyc_Toc_atomic_typ(( void*)(( struct Cyc_Core_Opt*)
! _check_null( e->topt))->v): 0;{ void* _temp660=( void*) e->r; struct Cyc_List_List*
! _temp668; struct Cyc_Absyn_Exp* _temp670; struct Cyc_Absyn_Exp* _temp672; struct
! Cyc_Absyn_Vardecl* _temp674; _LL662: if(*(( int*) _temp660) ==  Cyc_Absyn_Array_e){
! _LL669: _temp668=(( struct Cyc_Absyn_Array_e_struct*) _temp660)->f1; goto _LL663;}
! else{ goto _LL664;} _LL664: if(*(( int*) _temp660) ==  Cyc_Absyn_Comprehension_e){
! _LL675: _temp674=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp660)->f1;
! goto _LL673; _LL673: _temp672=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp660)->f2; goto _LL671; _LL671: _temp670=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp660)->f3; goto _LL665;} else{ goto _LL666;} _LL666: goto _LL667; _LL663:
! _temp657= Cyc_Toc_init_array( nv, lval, _temp668, _temp657); goto _LL661; _LL665:
! _temp657= Cyc_Toc_init_comprehension( nv, lval, _temp674, _temp672, _temp670,
! _temp657, 0); goto _LL661; _LL667: Cyc_Toc_exp_to_c( nv, e); _temp657= Cyc_Absyn_seq_stmt(
! Cyc_Absyn_exp_stmt( Cyc_Absyn_assign_exp( _temp658( _temp656, Cyc_Absyn_fieldname(
! i), 0), e, 0), 0), _temp657, 0); goto _LL661; _LL661:;}}}{ struct Cyc_Absyn_Exp*
! _temp676= Cyc_Toc_make_struct( nv, _temp655, Cyc_Absyn_strct( _temp654),
! _temp657, pointer, rgnopt, is_atomic); _npop_handler( 0u); return _temp676;}};
  _pop_region( r);} static struct Cyc_Absyn_Exp* Cyc_Toc_init_struct( struct Cyc_Toc_Env*
  nv, void* struct_type, int pointer, struct Cyc_Absyn_Exp* rgnopt, struct Cyc_List_List*
! dles, struct _tuple0* tdn){ struct _tuple0* _temp677= Cyc_Toc_temp_var(); struct
! Cyc_Absyn_Exp* _temp678= Cyc_Absyn_var_exp( _temp677, 0); struct Cyc_Absyn_Stmt*
! _temp679= Cyc_Absyn_exp_stmt( _temp678, 0); struct Cyc_Absyn_Exp*(* _temp680)(
  struct Cyc_Absyn_Exp*, struct _tagged_arr*, struct Cyc_Position_Segment*)=
  pointer? Cyc_Absyn_structarrow_exp: Cyc_Absyn_structmember_exp; int is_atomic= 1;
! struct _RegionHandle _temp681= _new_region(); struct _RegionHandle* r=& _temp681;
! _push_region( r);{ struct Cyc_List_List* _temp682=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct Cyc_List_List* x)) Cyc_List_rrev)( r, dles); for(
! 0; _temp682 !=  0; _temp682=(( struct Cyc_List_List*) _check_null( _temp682))->tl){
! struct _tuple4 _temp685; struct Cyc_Absyn_Exp* _temp686; struct Cyc_List_List*
! _temp688; struct _tuple4* _temp683=( struct _tuple4*)(( struct Cyc_List_List*)
! _check_null( _temp682))->hd; _temp685=* _temp683; _LL689: _temp688= _temp685.f1;
! goto _LL687; _LL687: _temp686= _temp685.f2; goto _LL684; _LL684: is_atomic=
  is_atomic? Cyc_Toc_atomic_typ(( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp686->topt))->v): 0; if( _temp688 ==  0){({ void* _temp690[ 0u]={};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("empty designator list",
! sizeof( unsigned char), 22u), _tag_arr( _temp690, sizeof( void*), 0u));});} if(((
! struct Cyc_List_List*) _check_null( _temp688))->tl !=  0){ struct _tuple0*
! _temp691= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* _temp692= Cyc_Absyn_var_exp(
! _temp691, 0); for( 0; _temp688 !=  0; _temp688=(( struct Cyc_List_List*)
! _check_null( _temp688))->tl){ void* _temp693=( void*)(( struct Cyc_List_List*)
! _check_null( _temp688))->hd; struct _tagged_arr* _temp699; _LL695: if(*(( int*)
! _temp693) ==  Cyc_Absyn_FieldName){ _LL700: _temp699=(( struct Cyc_Absyn_FieldName_struct*)
! _temp693)->f1; goto _LL696;} else{ goto _LL697;} _LL697: goto _LL698; _LL696:
! if( Cyc_Toc_is_poly_field( struct_type, _temp699)){ _temp692= Cyc_Absyn_cast_exp(
! Cyc_Absyn_void_star_typ(), _temp692, 0);} _temp679= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt(
! Cyc_Absyn_assign_exp( _temp680( _temp678, _temp699, 0), _temp692, 0), 0),
! _temp679, 0); goto _LL694; _LL698:( int) _throw(({ void* _temp701[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("array designator in struct", sizeof( unsigned char), 27u), _tag_arr(
! _temp701, sizeof( void*), 0u));})); _LL694:;} Cyc_Toc_exp_to_c( nv, _temp686);
! _temp679= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt( Cyc_Absyn_assign_exp( _temp692,
! _temp686, 0), 0), _temp679, 0);} else{ void* _temp702=( void*)(( struct Cyc_List_List*)
! _check_null( _temp688))->hd; struct _tagged_arr* _temp708; _LL704: if(*(( int*)
! _temp702) ==  Cyc_Absyn_FieldName){ _LL709: _temp708=(( struct Cyc_Absyn_FieldName_struct*)
! _temp702)->f1; goto _LL705;} else{ goto _LL706;} _LL706: goto _LL707; _LL705: {
! struct Cyc_Absyn_Exp* lval= _temp680( _temp678, _temp708, 0);{ void* _temp710=(
! void*) _temp686->r; struct Cyc_List_List* _temp720; struct Cyc_Absyn_Exp*
! _temp722; struct Cyc_Absyn_Exp* _temp724; struct Cyc_Absyn_Vardecl* _temp726;
! struct Cyc_List_List* _temp728; void* _temp730; _LL712: if(*(( int*) _temp710)
! ==  Cyc_Absyn_Array_e){ _LL721: _temp720=(( struct Cyc_Absyn_Array_e_struct*)
! _temp710)->f1; goto _LL713;} else{ goto _LL714;} _LL714: if(*(( int*) _temp710)
! ==  Cyc_Absyn_Comprehension_e){ _LL727: _temp726=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp710)->f1; goto _LL725; _LL725: _temp724=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp710)->f2; goto _LL723; _LL723: _temp722=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp710)->f3; goto _LL715;} else{ goto _LL716;} _LL716: if(*(( int*) _temp710)
! ==  Cyc_Absyn_AnonStruct_e){ _LL731: _temp730=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp710)->f1; goto _LL729; _LL729: _temp728=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp710)->f2; goto _LL717;} else{ goto _LL718;} _LL718: goto _LL719; _LL713:
! _temp679= Cyc_Toc_init_array( nv, lval, _temp720, _temp679); goto _LL711; _LL715:
! _temp679= Cyc_Toc_init_comprehension( nv, lval, _temp726, _temp724, _temp722,
! _temp679, 0); goto _LL711; _LL717: _temp679= Cyc_Toc_init_anon_struct( nv, lval,
! _temp730, _temp728, _temp679); goto _LL711; _LL719: Cyc_Toc_exp_to_c( nv,
! _temp686); if( Cyc_Toc_is_poly_field( struct_type, _temp708)){ _temp686= Cyc_Absyn_cast_exp(
! Cyc_Absyn_void_star_typ(), _temp686, 0);} _temp679= Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt(
! Cyc_Absyn_assign_exp( lval, _temp686, 0), 0), _temp679, 0); goto _LL711; _LL711:;}
! goto _LL703;} _LL707:( int) _throw(({ void* _temp732[ 0u]={}; Cyc_Toc_toc_impos(
  _tag_arr("array designator in struct", sizeof( unsigned char), 27u), _tag_arr(
! _temp732, sizeof( void*), 0u));})); _LL703:;}}}{ struct Cyc_Absyn_Exp* _temp733=
! Cyc_Toc_make_struct( nv, _temp677, Cyc_Absyn_strctq( tdn), _temp679, pointer,
! rgnopt, is_atomic); _npop_handler( 0u); return _temp733;}; _pop_region( r);}
  struct _tuple7{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Exp* f2; } ; static
  struct Cyc_Absyn_Exp* Cyc_Toc_assignop_lvalue( struct Cyc_Absyn_Exp* el, struct
  _tuple7* pr){ return Cyc_Absyn_assignop_exp( el,(* pr).f1,(* pr).f2, 0);} static
  struct Cyc_Absyn_Exp* Cyc_Toc_address_lvalue( struct Cyc_Absyn_Exp* e1, int
  ignore){ return Cyc_Absyn_address_exp( e1, 0);} static struct Cyc_Absyn_Exp* Cyc_Toc_incr_lvalue(
  struct Cyc_Absyn_Exp* e1, void* incr){ return Cyc_Absyn_new_exp(( void*)({
! struct Cyc_Absyn_Increment_e_struct* _temp734=( struct Cyc_Absyn_Increment_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Increment_e_struct)); _temp734[ 0]=({ struct
! Cyc_Absyn_Increment_e_struct _temp735; _temp735.tag= Cyc_Absyn_Increment_e;
! _temp735.f1= e1; _temp735.f2=( void*) incr; _temp735;}); _temp734;}), 0);}
  static void Cyc_Toc_lvalue_assign_stmt( struct Cyc_Absyn_Stmt* s, struct Cyc_List_List*
  fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*, void*), void* f_env);
  static void Cyc_Toc_lvalue_assign( struct Cyc_Absyn_Exp* e1, struct Cyc_List_List*
  fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*, void*), void* f_env){
! void* _temp736=( void*) e1->r; struct Cyc_Absyn_Stmt* _temp746; struct Cyc_Absyn_Exp*
! _temp748; void* _temp750; struct _tagged_arr* _temp752; struct Cyc_Absyn_Exp*
! _temp754; _LL738: if(*(( int*) _temp736) ==  Cyc_Absyn_StmtExp_e){ _LL747:
! _temp746=(( struct Cyc_Absyn_StmtExp_e_struct*) _temp736)->f1; goto _LL739;}
! else{ goto _LL740;} _LL740: if(*(( int*) _temp736) ==  Cyc_Absyn_Cast_e){ _LL751:
! _temp750=( void*)(( struct Cyc_Absyn_Cast_e_struct*) _temp736)->f1; goto _LL749;
! _LL749: _temp748=(( struct Cyc_Absyn_Cast_e_struct*) _temp736)->f2; goto _LL741;}
! else{ goto _LL742;} _LL742: if(*(( int*) _temp736) ==  Cyc_Absyn_StructMember_e){
! _LL755: _temp754=(( struct Cyc_Absyn_StructMember_e_struct*) _temp736)->f1; goto
! _LL753; _LL753: _temp752=(( struct Cyc_Absyn_StructMember_e_struct*) _temp736)->f2;
! goto _LL743;} else{ goto _LL744;} _LL744: goto _LL745; _LL739: Cyc_Toc_lvalue_assign_stmt(
! _temp746, fs, f, f_env); goto _LL737; _LL741: Cyc_Toc_lvalue_assign( _temp748,
! fs, f, f_env); goto _LL737; _LL743:( void*)( e1->r=( void*)(( void*) _temp754->r));
  Cyc_Toc_lvalue_assign( e1,( struct Cyc_List_List*)({ struct Cyc_List_List*
! _temp756=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp756->hd=( void*) _temp752; _temp756->tl= fs; _temp756;}), f, f_env); goto
! _LL737; _LL745: if( ! Cyc_Absyn_is_lvalue( e1)){({ struct Cyc_Std_String_pa_struct
! _temp758; _temp758.tag= Cyc_Std_String_pa; _temp758.f1=( struct _tagged_arr) Cyc_Absynpp_exp2string(
! e1);{ void* _temp757[ 1u]={& _temp758};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("lvalue_assign: could not find lvalue in `%s'",
! sizeof( unsigned char), 45u), _tag_arr( _temp757, sizeof( void*), 1u));}});}{
  struct Cyc_Absyn_Exp* e1_copy= Cyc_Absyn_copy_exp( e1); for( 0; fs !=  0; fs=((
  struct Cyc_List_List*) _check_null( fs))->tl){ e1_copy= Cyc_Absyn_structmember_exp(
  e1_copy,( struct _tagged_arr*)(( struct Cyc_List_List*) _check_null( fs))->hd,
  e1_copy->loc);}( void*)( e1->r=( void*)(( void*)( f( e1_copy, f_env))->r)); goto
! _LL737;} _LL737:;} static void Cyc_Toc_lvalue_assign_stmt( struct Cyc_Absyn_Stmt*
  s, struct Cyc_List_List* fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*,
! void*), void* f_env){ void* _temp759=( void*) s->r; struct Cyc_Absyn_Exp*
! _temp769; struct Cyc_Absyn_Stmt* _temp771; struct Cyc_Absyn_Decl* _temp773;
! struct Cyc_Absyn_Stmt* _temp775; _LL761: if(( unsigned int) _temp759 >  1u?*((
! int*) _temp759) ==  Cyc_Absyn_Exp_s: 0){ _LL770: _temp769=(( struct Cyc_Absyn_Exp_s_struct*)
! _temp759)->f1; goto _LL762;} else{ goto _LL763;} _LL763: if(( unsigned int)
! _temp759 >  1u?*(( int*) _temp759) ==  Cyc_Absyn_Decl_s: 0){ _LL774: _temp773=((
! struct Cyc_Absyn_Decl_s_struct*) _temp759)->f1; goto _LL772; _LL772: _temp771=((
! struct Cyc_Absyn_Decl_s_struct*) _temp759)->f2; goto _LL764;} else{ goto _LL765;}
! _LL765: if(( unsigned int) _temp759 >  1u?*(( int*) _temp759) ==  Cyc_Absyn_Seq_s:
! 0){ _LL776: _temp775=(( struct Cyc_Absyn_Seq_s_struct*) _temp759)->f2; goto
! _LL766;} else{ goto _LL767;} _LL767: goto _LL768; _LL762: Cyc_Toc_lvalue_assign(
! _temp769, fs, f, f_env); goto _LL760; _LL764: Cyc_Toc_lvalue_assign_stmt(
! _temp771, fs, f, f_env); goto _LL760; _LL766: Cyc_Toc_lvalue_assign_stmt(
! _temp775, fs, f, f_env); goto _LL760; _LL768:({ struct Cyc_Std_String_pa_struct
! _temp778; _temp778.tag= Cyc_Std_String_pa; _temp778.f1=( struct _tagged_arr) Cyc_Absynpp_stmt2string(
! s);{ void* _temp777[ 1u]={& _temp778};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("lvalue_assign_stmt: %s", sizeof(
! unsigned char), 23u), _tag_arr( _temp777, sizeof( void*), 1u));}}); goto _LL760;
! _LL760:;} static struct Cyc_List_List* Cyc_Toc_rmap_2c( struct _RegionHandle* r2,
  void*(* f)( void*, void*), void* env, struct Cyc_List_List* x){ struct Cyc_List_List*
  result; struct Cyc_List_List* prev; if( x ==  0){ return 0;} result=({ struct
! Cyc_List_List* _temp779=( struct Cyc_List_List*) _region_malloc( r2, sizeof(
! struct Cyc_List_List)); _temp779->hd=( void*) f(( void*)(( struct Cyc_List_List*)
! _check_null( x))->hd, env); _temp779->tl= 0; _temp779;}); prev= result; for( x=((
  struct Cyc_List_List*) _check_null( x))->tl; x !=  0; x=(( struct Cyc_List_List*)
  _check_null( x))->tl){(( struct Cyc_List_List*) _check_null( prev))->tl=({
! struct Cyc_List_List* _temp780=( struct Cyc_List_List*) _region_malloc( r2,
! sizeof( struct Cyc_List_List)); _temp780->hd=( void*) f(( void*)(( struct Cyc_List_List*)
! _check_null( x))->hd, env); _temp780->tl= 0; _temp780;}); prev=(( struct Cyc_List_List*)
  _check_null( prev))->tl;} return result;} static struct Cyc_List_List* Cyc_Toc_map_2c(
  void*(* f)( void*, void*), void* env, struct Cyc_List_List* x){ return Cyc_Toc_rmap_2c(
  Cyc_Core_heap_region, f, env, x);} static struct _tuple4* Cyc_Toc_make_dle(
! struct Cyc_Absyn_Exp* e){ return({ struct _tuple4* _temp781=( struct _tuple4*)
! _cycalloc( sizeof( struct _tuple4)); _temp781->f1= 0; _temp781->f2= e; _temp781;});}
! static struct Cyc_Absyn_PtrInfo Cyc_Toc_get_ptr_type( void* t){ void* _temp782=
! Cyc_Tcutil_compress( t); struct Cyc_Absyn_PtrInfo _temp788; _LL784: if((
! unsigned int) _temp782 >  4u?*(( int*) _temp782) ==  Cyc_Absyn_PointerType: 0){
! _LL789: _temp788=(( struct Cyc_Absyn_PointerType_struct*) _temp782)->f1; goto
! _LL785;} else{ goto _LL786;} _LL786: goto _LL787; _LL785: return _temp788;
! _LL787:( int) _throw(({ void* _temp790[ 0u]={}; Cyc_Tcutil_impos( _tag_arr("get_ptr_typ: not a pointer!",
! sizeof( unsigned char), 28u), _tag_arr( _temp790, sizeof( void*), 0u));}));
! _LL783:;} struct _tuple8{ void* f1; void* f2; } ; struct _tuple9{ struct _tuple0*
  f1; void* f2; struct Cyc_Absyn_Exp* f3; } ; struct _tuple10{ struct Cyc_Absyn_Structfield*
  f1; struct Cyc_Absyn_Exp* f2; } ; static void Cyc_Toc_exp_to_c( struct Cyc_Toc_Env*
! nv, struct Cyc_Absyn_Exp* e){ void* _temp791=( void*) e->r; if( e->topt ==  0){({
! struct Cyc_Std_String_pa_struct _temp793; _temp793.tag= Cyc_Std_String_pa;
! _temp793.f1=( struct _tagged_arr) Cyc_Absynpp_exp2string( e);{ void* _temp792[ 1u]={&
! _temp793};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("exp_to_c: no type for %s", sizeof( unsigned char), 25u), _tag_arr(
! _temp792, sizeof( void*), 1u));}}); return;}{ void* old_typ=( void*)(( struct
! Cyc_Core_Opt*) _check_null( e->topt))->v; void* _temp794= _temp791; void*
  _temp876; void* _temp878; struct _tuple0* _temp880; struct _tuple0* _temp882;
  struct Cyc_List_List* _temp884; void* _temp886; void* _temp888; struct Cyc_Absyn_Exp*
  _temp890; struct Cyc_Absyn_Exp* _temp892; struct Cyc_Core_Opt* _temp894; struct
***************
*** 1815,2162 ****
  _temp937; struct Cyc_Absyn_Exp* _temp939; void* _temp941; void** _temp943;
  struct Cyc_Absyn_Exp* _temp944; struct Cyc_Absyn_Exp* _temp946; struct Cyc_Absyn_Exp*
  _temp948; struct Cyc_Absyn_Exp* _temp950; void* _temp952; void* _temp954; struct
! _tagged_arr* _temp956; void* _temp958; void* _temp960; unsigned int _temp962;
! void* _temp964; struct Cyc_Absyn_Exp* _temp966; struct _tagged_arr* _temp968;
! struct Cyc_Absyn_Exp* _temp970; struct _tagged_arr* _temp972; struct Cyc_Absyn_Exp*
! _temp974; struct Cyc_Absyn_Exp* _temp976; struct Cyc_Absyn_Exp* _temp978; struct
! Cyc_List_List* _temp980; struct Cyc_List_List* _temp982; struct Cyc_Absyn_Exp*
! _temp984; struct Cyc_Absyn_Exp* _temp986; struct Cyc_Absyn_Vardecl* _temp988;
! struct Cyc_Absyn_Structdecl* _temp990; struct Cyc_List_List* _temp992; struct
! Cyc_Core_Opt* _temp994; struct _tuple0* _temp996; struct Cyc_List_List* _temp998;
! void* _temp1000; struct Cyc_Absyn_Tunionfield* _temp1002; struct Cyc_Absyn_Tuniondecl*
! _temp1004; struct Cyc_List_List* _temp1006; struct Cyc_Absyn_Tunionfield*
! _temp1008; struct Cyc_Absyn_Tuniondecl* _temp1010; struct Cyc_List_List*
! _temp1012; void* _temp1014; struct Cyc_Absyn_Exp* _temp1016; struct Cyc_Absyn_Stmt*
! _temp1018; struct Cyc_Absyn_Fndecl* _temp1020; _LL794: if(*(( int*) _temp792) == 
  Cyc_Absyn_Const_e){ _LL877: _temp876=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp792)->f1; if( _temp876 == ( void*) Cyc_Absyn_Null_c){ goto _LL795;} else{
! goto _LL796;}} else{ goto _LL796;} _LL796: if(*(( int*) _temp792) ==  Cyc_Absyn_Const_e){
! goto _LL797;} else{ goto _LL798;} _LL798: if(*(( int*) _temp792) ==  Cyc_Absyn_Var_e){
! _LL881: _temp880=(( struct Cyc_Absyn_Var_e_struct*) _temp792)->f1; goto _LL879;
! _LL879: _temp878=( void*)(( struct Cyc_Absyn_Var_e_struct*) _temp792)->f2; goto
! _LL799;} else{ goto _LL800;} _LL800: if(*(( int*) _temp792) ==  Cyc_Absyn_UnknownId_e){
! _LL883: _temp882=(( struct Cyc_Absyn_UnknownId_e_struct*) _temp792)->f1; goto
! _LL801;} else{ goto _LL802;} _LL802: if(*(( int*) _temp792) ==  Cyc_Absyn_Primop_e){
! _LL887: _temp886=( void*)(( struct Cyc_Absyn_Primop_e_struct*) _temp792)->f1;
! goto _LL885; _LL885: _temp884=(( struct Cyc_Absyn_Primop_e_struct*) _temp792)->f2;
! goto _LL803;} else{ goto _LL804;} _LL804: if(*(( int*) _temp792) ==  Cyc_Absyn_Increment_e){
! _LL891: _temp890=(( struct Cyc_Absyn_Increment_e_struct*) _temp792)->f1; goto
  _LL889; _LL889: _temp888=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp792)->f2; goto _LL805;} else{ goto _LL806;} _LL806: if(*(( int*) _temp792)
  ==  Cyc_Absyn_AssignOp_e){ _LL897: _temp896=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp792)->f1; goto _LL895; _LL895: _temp894=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp792)->f2; goto _LL893; _LL893: _temp892=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp792)->f3; goto _LL807;} else{ goto _LL808;} _LL808: if(*(( int*) _temp792)
  ==  Cyc_Absyn_Conditional_e){ _LL903: _temp902=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp792)->f1; goto _LL901; _LL901: _temp900=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp792)->f2; goto _LL899; _LL899: _temp898=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp792)->f3; goto _LL809;} else{ goto _LL810;} _LL810: if(*(( int*) _temp792)
  ==  Cyc_Absyn_SeqExp_e){ _LL907: _temp906=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp792)->f1; goto _LL905; _LL905: _temp904=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp792)->f2; goto _LL811;} else{ goto _LL812;} _LL812: if(*(( int*) _temp792)
  ==  Cyc_Absyn_UnknownCall_e){ _LL911: _temp910=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp792)->f1; goto _LL909; _LL909: _temp908=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp792)->f2; goto _LL813;} else{ goto _LL814;} _LL814: if(*(( int*) _temp792)
  ==  Cyc_Absyn_FnCall_e){ _LL917: _temp916=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp792)->f1; goto _LL915; _LL915: _temp914=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp792)->f2; goto _LL913; _LL913: _temp912=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp792)->f3; if( _temp912 ==  0){ goto _LL815;} else{ goto _LL816;}} else{
! goto _LL816;} _LL816: if(*(( int*) _temp792) ==  Cyc_Absyn_FnCall_e){ _LL930:
! _temp929=(( struct Cyc_Absyn_FnCall_e_struct*) _temp792)->f1; goto _LL928;
! _LL928: _temp927=(( struct Cyc_Absyn_FnCall_e_struct*) _temp792)->f2; goto
! _LL919; _LL919: _temp918=(( struct Cyc_Absyn_FnCall_e_struct*) _temp792)->f3;
! if( _temp918 ==  0){ goto _LL818;} else{ _temp920=* _temp918; _LL926: _temp925=
  _temp920.num_varargs; goto _LL924; _LL924: _temp923= _temp920.injectors; goto
! _LL922; _LL922: _temp921= _temp920.vai; goto _LL817;}} else{ goto _LL818;}
! _LL818: if(*(( int*) _temp792) ==  Cyc_Absyn_Throw_e){ _LL932: _temp931=((
! struct Cyc_Absyn_Throw_e_struct*) _temp792)->f1; goto _LL819;} else{ goto _LL820;}
! _LL820: if(*(( int*) _temp792) ==  Cyc_Absyn_NoInstantiate_e){ _LL934: _temp933=((
! struct Cyc_Absyn_NoInstantiate_e_struct*) _temp792)->f1; goto _LL821;} else{
! goto _LL822;} _LL822: if(*(( int*) _temp792) ==  Cyc_Absyn_Instantiate_e){
! _LL938: _temp937=(( struct Cyc_Absyn_Instantiate_e_struct*) _temp792)->f1; goto
! _LL936; _LL936: _temp935=(( struct Cyc_Absyn_Instantiate_e_struct*) _temp792)->f2;
! goto _LL823;} else{ goto _LL824;} _LL824: if(*(( int*) _temp792) ==  Cyc_Absyn_Cast_e){
! _LL942: _temp941=( void*)(( struct Cyc_Absyn_Cast_e_struct*) _temp792)->f1;
! _temp943=( void**)&(( void*)(( struct Cyc_Absyn_Cast_e_struct*) _temp792)->f1);
! goto _LL940; _LL940: _temp939=(( struct Cyc_Absyn_Cast_e_struct*) _temp792)->f2;
! goto _LL825;} else{ goto _LL826;} _LL826: if(*(( int*) _temp792) ==  Cyc_Absyn_Address_e){
! _LL945: _temp944=(( struct Cyc_Absyn_Address_e_struct*) _temp792)->f1; goto
! _LL827;} else{ goto _LL828;} _LL828: if(*(( int*) _temp792) ==  Cyc_Absyn_New_e){
! _LL949: _temp948=(( struct Cyc_Absyn_New_e_struct*) _temp792)->f1; goto _LL947;
! _LL947: _temp946=(( struct Cyc_Absyn_New_e_struct*) _temp792)->f2; goto _LL829;}
! else{ goto _LL830;} _LL830: if(*(( int*) _temp792) ==  Cyc_Absyn_Sizeofexp_e){
! _LL951: _temp950=(( struct Cyc_Absyn_Sizeofexp_e_struct*) _temp792)->f1; goto
! _LL831;} else{ goto _LL832;} _LL832: if(*(( int*) _temp792) ==  Cyc_Absyn_Sizeoftyp_e){
! _LL953: _temp952=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*) _temp792)->f1;
! goto _LL833;} else{ goto _LL834;} _LL834: if(*(( int*) _temp792) ==  Cyc_Absyn_Gentyp_e){
! goto _LL835;} else{ goto _LL836;} _LL836: if(*(( int*) _temp792) ==  Cyc_Absyn_Offsetof_e){
! _LL959: _temp958=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*) _temp792)->f1;
! goto _LL955; _LL955: _temp954=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp792)->f2; if(*(( int*) _temp954) ==  Cyc_Absyn_StructField){ _LL957:
! _temp956=(( struct Cyc_Absyn_StructField_struct*) _temp954)->f1; goto _LL837;}
! else{ goto _LL838;}} else{ goto _LL838;} _LL838: if(*(( int*) _temp792) ==  Cyc_Absyn_Offsetof_e){
! _LL965: _temp964=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*) _temp792)->f1;
! goto _LL961; _LL961: _temp960=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*)
! _temp792)->f2; if(*(( int*) _temp960) ==  Cyc_Absyn_TupleIndex){ _LL963:
! _temp962=(( struct Cyc_Absyn_TupleIndex_struct*) _temp960)->f1; goto _LL839;}
! else{ goto _LL840;}} else{ goto _LL840;} _LL840: if(*(( int*) _temp792) ==  Cyc_Absyn_Deref_e){
! _LL967: _temp966=(( struct Cyc_Absyn_Deref_e_struct*) _temp792)->f1; goto _LL841;}
! else{ goto _LL842;} _LL842: if(*(( int*) _temp792) ==  Cyc_Absyn_StructMember_e){
! _LL971: _temp970=(( struct Cyc_Absyn_StructMember_e_struct*) _temp792)->f1; goto
! _LL969; _LL969: _temp968=(( struct Cyc_Absyn_StructMember_e_struct*) _temp792)->f2;
! goto _LL843;} else{ goto _LL844;} _LL844: if(*(( int*) _temp792) ==  Cyc_Absyn_StructArrow_e){
! _LL975: _temp974=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp792)->f1; goto
! _LL973; _LL973: _temp972=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp792)->f2;
! goto _LL845;} else{ goto _LL846;} _LL846: if(*(( int*) _temp792) ==  Cyc_Absyn_Subscript_e){
! _LL979: _temp978=(( struct Cyc_Absyn_Subscript_e_struct*) _temp792)->f1; goto
! _LL977; _LL977: _temp976=(( struct Cyc_Absyn_Subscript_e_struct*) _temp792)->f2;
! goto _LL847;} else{ goto _LL848;} _LL848: if(*(( int*) _temp792) ==  Cyc_Absyn_Tuple_e){
! _LL981: _temp980=(( struct Cyc_Absyn_Tuple_e_struct*) _temp792)->f1; goto _LL849;}
! else{ goto _LL850;} _LL850: if(*(( int*) _temp792) ==  Cyc_Absyn_Array_e){
! _LL983: _temp982=(( struct Cyc_Absyn_Array_e_struct*) _temp792)->f1; goto _LL851;}
! else{ goto _LL852;} _LL852: if(*(( int*) _temp792) ==  Cyc_Absyn_Comprehension_e){
! _LL989: _temp988=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp792)->f1;
! goto _LL987; _LL987: _temp986=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp792)->f2; goto _LL985; _LL985: _temp984=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp792)->f3; goto _LL853;} else{ goto _LL854;} _LL854: if(*(( int*) _temp792)
! ==  Cyc_Absyn_Struct_e){ _LL997: _temp996=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp792)->f1; goto _LL995; _LL995: _temp994=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp792)->f2; goto _LL993; _LL993: _temp992=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp792)->f3; goto _LL991; _LL991: _temp990=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp792)->f4; goto _LL855;} else{ goto _LL856;} _LL856: if(*(( int*) _temp792)
! ==  Cyc_Absyn_AnonStruct_e){ _LL1001: _temp1000=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp792)->f1; goto _LL999; _LL999: _temp998=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp792)->f2; goto _LL857;} else{ goto _LL858;} _LL858: if(*(( int*) _temp792)
! ==  Cyc_Absyn_Tunion_e){ _LL1007: _temp1006=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp792)->f3; if( _temp1006 ==  0){ goto _LL1005;} else{ goto _LL860;} _LL1005:
! _temp1004=(( struct Cyc_Absyn_Tunion_e_struct*) _temp792)->f4; goto _LL1003;
! _LL1003: _temp1002=(( struct Cyc_Absyn_Tunion_e_struct*) _temp792)->f5; goto
! _LL859;} else{ goto _LL860;} _LL860: if(*(( int*) _temp792) ==  Cyc_Absyn_Tunion_e){
! _LL1013: _temp1012=(( struct Cyc_Absyn_Tunion_e_struct*) _temp792)->f3; goto
! _LL1011; _LL1011: _temp1010=(( struct Cyc_Absyn_Tunion_e_struct*) _temp792)->f4;
! goto _LL1009; _LL1009: _temp1008=(( struct Cyc_Absyn_Tunion_e_struct*) _temp792)->f5;
! goto _LL861;} else{ goto _LL862;} _LL862: if(*(( int*) _temp792) ==  Cyc_Absyn_Enum_e){
! goto _LL863;} else{ goto _LL864;} _LL864: if(*(( int*) _temp792) ==  Cyc_Absyn_Malloc_e){
! _LL1017: _temp1016=(( struct Cyc_Absyn_Malloc_e_struct*) _temp792)->f1; goto
! _LL1015; _LL1015: _temp1014=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp792)->f2; goto _LL865;} else{ goto _LL866;} _LL866: if(*(( int*) _temp792)
! ==  Cyc_Absyn_StmtExp_e){ _LL1019: _temp1018=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp792)->f1; goto _LL867;} else{ goto _LL868;} _LL868: if(*(( int*) _temp792)
  ==  Cyc_Absyn_UnresolvedMem_e){ goto _LL869;} else{ goto _LL870;} _LL870: if(*((
! int*) _temp792) ==  Cyc_Absyn_CompoundLit_e){ goto _LL871;} else{ goto _LL872;}
! _LL872: if(*(( int*) _temp792) ==  Cyc_Absyn_Codegen_e){ _LL1021: _temp1020=((
! struct Cyc_Absyn_Codegen_e_struct*) _temp792)->f1; goto _LL873;} else{ goto
! _LL874;} _LL874: if(*(( int*) _temp792) ==  Cyc_Absyn_Fill_e){ goto _LL875;}
! else{ goto _LL793;} _LL795: { struct Cyc_Absyn_Exp* _temp1022= Cyc_Absyn_uint_exp(
  0, 0); if( Cyc_Tcutil_is_tagged_pointer_typ( old_typ)){ if( nv->toplevel){( void*)(
! e->r=( void*)(( void*)( Cyc_Toc_make_toplevel_tagged_arr( old_typ, _temp1022,
! _temp1022))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp* _temp1023[ 3u]; _temp1023[ 2u]=
! _temp1022; _temp1023[ 1u]= _temp1022; _temp1023[ 0u]= _temp1022;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1023, sizeof( struct Cyc_Absyn_Exp*),
  3u));}), 0))->r));}} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_signed_int_exp(
! 0, 0))->r));} goto _LL793;} _LL797: goto _LL793; _LL799:{ struct _handler_cons
! _temp1024; _push_handler(& _temp1024);{ int _temp1026= 0; if( setjmp( _temp1024.handler)){
! _temp1026= 1;} if( ! _temp1026){( void*)( e->r=( void*)(( void*)((( struct Cyc_Absyn_Exp*(*)(
  struct Cyc_Dict_Dict* d, struct _tuple0* k)) Cyc_Dict_lookup)( nv->varmap,
! _temp880))->r));; _pop_handler();} else{ void* _temp1025=( void*) _exn_thrown;
! void* _temp1028= _temp1025; _LL1030: if( _temp1028 ==  Cyc_Dict_Absent){ goto
! _LL1031;} else{ goto _LL1032;} _LL1032: goto _LL1033; _LL1031:({ struct Cyc_Std_String_pa_struct
! _temp1035; _temp1035.tag= Cyc_Std_String_pa; _temp1035.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp880);{ void* _temp1034[ 1u]={& _temp1035};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("Can't find %s in exp_to_c, Var\n",
! sizeof( unsigned char), 32u), _tag_arr( _temp1034, sizeof( void*), 1u));}});
! return; _LL1033:( void) _throw( _temp1028); _LL1029:;}}} goto _LL793; _LL801:({
! void* _temp1036[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Toc_toc_impos)( _tag_arr("unknownid", sizeof( unsigned char), 10u), _tag_arr(
! _temp1036, sizeof( void*), 0u));}); goto _LL793; _LL803: { struct Cyc_List_List*
! _temp1037=(( struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Exp*),
  struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_get_cyc_typ, _temp884);(( void(*)(
  void(* f)( struct Cyc_Toc_Env*, struct Cyc_Absyn_Exp*), struct Cyc_Toc_Env* env,
  struct Cyc_List_List* x)) Cyc_List_iter_c)( Cyc_Toc_exp_to_c, nv, _temp884);{
! void* _temp1038= _temp886; _LL1040: if( _temp1038 == ( void*) Cyc_Absyn_Size){
! goto _LL1041;} else{ goto _LL1042;} _LL1042: if( _temp1038 == ( void*) Cyc_Absyn_Plus){
! goto _LL1043;} else{ goto _LL1044;} _LL1044: if( _temp1038 == ( void*) Cyc_Absyn_Minus){
! goto _LL1045;} else{ goto _LL1046;} _LL1046: if( _temp1038 == ( void*) Cyc_Absyn_Eq){
! goto _LL1047;} else{ goto _LL1048;} _LL1048: if( _temp1038 == ( void*) Cyc_Absyn_Neq){
! goto _LL1049;} else{ goto _LL1050;} _LL1050: if( _temp1038 == ( void*) Cyc_Absyn_Gt){
! goto _LL1051;} else{ goto _LL1052;} _LL1052: if( _temp1038 == ( void*) Cyc_Absyn_Gte){
! goto _LL1053;} else{ goto _LL1054;} _LL1054: if( _temp1038 == ( void*) Cyc_Absyn_Lt){
! goto _LL1055;} else{ goto _LL1056;} _LL1056: if( _temp1038 == ( void*) Cyc_Absyn_Lte){
! goto _LL1057;} else{ goto _LL1058;} _LL1058: goto _LL1059; _LL1041: { struct Cyc_Absyn_Exp*
  arg=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp884))->hd;{
! void* _temp1060= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( arg->topt))->v); struct Cyc_Absyn_Exp* _temp1068; struct Cyc_Absyn_PtrInfo
! _temp1070; struct Cyc_Absyn_Conref* _temp1072; void* _temp1074; _LL1062: if((
! unsigned int) _temp1060 >  4u?*(( int*) _temp1060) ==  Cyc_Absyn_ArrayType: 0){
! _LL1069: _temp1068=(( struct Cyc_Absyn_ArrayType_struct*) _temp1060)->f3; goto
! _LL1063;} else{ goto _LL1064;} _LL1064: if(( unsigned int) _temp1060 >  4u?*((
! int*) _temp1060) ==  Cyc_Absyn_PointerType: 0){ _LL1071: _temp1070=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1060)->f1; _LL1075: _temp1074=( void*) _temp1070.elt_typ; goto _LL1073;
! _LL1073: _temp1072= _temp1070.bounds; goto _LL1065;} else{ goto _LL1066;}
! _LL1066: goto _LL1067; _LL1063:( void*)( e->r=( void*)(( void*)(( struct Cyc_Absyn_Exp*)
! _check_null( _temp1068))->r)); goto _LL1061; _LL1065:{ void* _temp1076= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1072); struct Cyc_Absyn_Exp* _temp1082; _LL1078: if(
! _temp1076 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1079;} else{ goto _LL1080;}
! _LL1080: if(( unsigned int) _temp1076 >  1u?*(( int*) _temp1076) ==  Cyc_Absyn_Upper_b:
! 0){ _LL1083: _temp1082=(( struct Cyc_Absyn_Upper_b_struct*) _temp1076)->f1; goto
! _LL1081;} else{ goto _LL1077;} _LL1079:( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__get_arr_size_e,({ struct Cyc_Absyn_Exp* _temp1084[ 2u]; _temp1084[ 1u]=
! Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( _temp1074), 0); _temp1084[ 0u]=(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp884))->hd;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1084, sizeof( struct Cyc_Absyn_Exp*), 2u));}), 0))->r)); goto _LL1077;
! _LL1081:( void*)( e->r=( void*)(( void*) _temp1082->r)); goto _LL1077; _LL1077:;}
! goto _LL1061; _LL1067:({ struct Cyc_Std_String_pa_struct _temp1087; _temp1087.tag=
! Cyc_Std_String_pa; _temp1087.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
  void*)(( struct Cyc_Core_Opt*) _check_null( arg->topt))->v);{ struct Cyc_Std_String_pa_struct
! _temp1086; _temp1086.tag= Cyc_Std_String_pa; _temp1086.f1=( struct _tagged_arr)
  Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*) _check_null( arg->topt))->v);{
! void* _temp1085[ 2u]={& _temp1086,& _temp1087};(( int(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("size primop applied to non-array %s (%s)",
! sizeof( unsigned char), 41u), _tag_arr( _temp1085, sizeof( void*), 2u));}}});
! return; _LL1061:;} goto _LL1039;} _LL1043: { void* elt_typ=( void*) Cyc_Absyn_VoidType;
  if( Cyc_Tcutil_is_tagged_pointer_typ_elt(( void*)(( struct Cyc_List_List*)
! _check_null( _temp1037))->hd,& elt_typ)){ struct Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( _temp884))->hd; struct Cyc_Absyn_Exp* e2=(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
  _check_null( _temp884))->tl))->hd;( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__tagged_arr_plus_e,({ struct Cyc_Absyn_Exp* _temp1088[ 3u]; _temp1088[ 2u]=
! e2; _temp1088[ 1u]= Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( elt_typ), 0);
! _temp1088[ 0u]= e1;(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1088, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));} goto
! _LL1039;} _LL1045: { void* elt_typ=( void*) Cyc_Absyn_VoidType; if( Cyc_Tcutil_is_tagged_pointer_typ_elt((
! void*)(( struct Cyc_List_List*) _check_null( _temp1037))->hd,& elt_typ)){ struct
  Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null(
  _temp884))->hd; struct Cyc_Absyn_Exp* e2=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null((( struct Cyc_List_List*) _check_null( _temp884))->tl))->hd; if( Cyc_Tcutil_is_tagged_pointer_typ((
  void*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( _temp1037))->tl))->hd)){( void*)( e1->r=( void*)(( void*)( Cyc_Absyn_structmember_exp(
  Cyc_Absyn_new_exp(( void*) e1->r, 0), Cyc_Toc_curr_sp, 0))->r));( void*)( e2->r=(
  void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp(( void*) e2->r, 0),
  Cyc_Toc_curr_sp, 0))->r));( void*)( e->r=( void*)(( void*)( Cyc_Absyn_divide_exp(
  Cyc_Absyn_copy_exp( e), Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( elt_typ), 0),
  0))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__tagged_arr_plus_e,({
! struct Cyc_Absyn_Exp* _temp1089[ 3u]; _temp1089[ 2u]= Cyc_Absyn_prim1_exp(( void*)
! Cyc_Absyn_Minus, e2, 0); _temp1089[ 1u]= Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c(
! elt_typ), 0); _temp1089[ 0u]= e1;(( struct Cyc_List_List*(*)( struct _tagged_arr))
! Cyc_List_list)( _tag_arr( _temp1089, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));}}
! goto _LL1039;} _LL1047: goto _LL1049; _LL1049: goto _LL1051; _LL1051: goto
! _LL1053; _LL1053: goto _LL1055; _LL1055: goto _LL1057; _LL1057: { struct Cyc_Absyn_Exp*
  e1=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp884))->hd;
  struct Cyc_Absyn_Exp* e2=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null((( struct Cyc_List_List*) _check_null( _temp884))->tl))->hd; void*
! t1=( void*)(( struct Cyc_List_List*) _check_null( _temp1037))->hd; void* t2=(
  void*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( _temp1037))->tl))->hd; if( Cyc_Tcutil_is_tagged_pointer_typ( t1)){(
  void*)( e1->r=( void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp((
  void*) e1->r, 0), Cyc_Toc_curr_sp, 0))->r));} if( Cyc_Tcutil_is_tagged_pointer_typ(
  t2)){( void*)( e2->r=( void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp((
! void*) e2->r, 0), Cyc_Toc_curr_sp, 0))->r));} goto _LL1039;} _LL1059: goto
! _LL1039; _LL1039:;} goto _LL793;} _LL805: { void* e2_cyc_typ=( void*)(( struct
  Cyc_Core_Opt*) _check_null( _temp890->topt))->v; Cyc_Toc_exp_to_c( nv, _temp890);{
  void* elt_typ=( void*) Cyc_Absyn_VoidType; if( Cyc_Tcutil_is_tagged_pointer_typ_elt(
! old_typ,& elt_typ)){ struct Cyc_Absyn_Exp* _temp1090=( _temp888 == ( void*) Cyc_Absyn_PostInc?
  1: _temp888 == ( void*) Cyc_Absyn_PostDec)? Cyc_Toc__tagged_arr_inplace_plus_post_e:
! Cyc_Toc__tagged_arr_inplace_plus_e; int _temp1091=( _temp888 == ( void*) Cyc_Absyn_PreInc?
  1: _temp888 == ( void*) Cyc_Absyn_PostInc)? 1: - 1;( void*)( e->r=( void*)((
! void*)( Cyc_Absyn_fncall_exp( _temp1090,({ struct Cyc_Absyn_Exp* _temp1092[ 3u];
! _temp1092[ 2u]= Cyc_Absyn_signed_int_exp( _temp1091, 0); _temp1092[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! Cyc_Toc_typ_to_c( elt_typ), 0); _temp1092[ 0u]= Cyc_Absyn_address_exp( _temp890,
  0);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1092, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));} if( elt_typ == (
  void*) Cyc_Absyn_VoidType? ! Cyc_Absyn_is_lvalue( _temp890): 0){ Cyc_Toc_lvalue_assign(
  _temp890, 0, Cyc_Toc_incr_lvalue, _temp888);( void*)( e->r=( void*)(( void*)
! _temp890->r));} goto _LL793;}} _LL807: { int e1_poly= Cyc_Toc_is_poly_project(
  _temp896); void* e1_old_typ=( void*)(( struct Cyc_Core_Opt*) _check_null(
  _temp896->topt))->v; void* e2_old_typ=( void*)(( struct Cyc_Core_Opt*)
  _check_null( _temp892->topt))->v; Cyc_Toc_exp_to_c( nv, _temp896); Cyc_Toc_exp_to_c(
  nv, _temp892);{ int done= 0; if( _temp894 !=  0){ void* elt_typ=( void*) Cyc_Absyn_VoidType;
  if( Cyc_Tcutil_is_tagged_pointer_typ_elt( old_typ,& elt_typ)){ struct Cyc_Absyn_Exp*
! change;{ void* _temp1093=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp894))->v;
! _LL1095: if( _temp1093 == ( void*) Cyc_Absyn_Plus){ goto _LL1096;} else{ goto
! _LL1097;} _LL1097: if( _temp1093 == ( void*) Cyc_Absyn_Minus){ goto _LL1098;}
! else{ goto _LL1099;} _LL1099: goto _LL1100; _LL1096: change= _temp892; goto
! _LL1094; _LL1098: change= Cyc_Absyn_prim1_exp(( void*) Cyc_Absyn_Minus, _temp892,
! 0); goto _LL1094; _LL1100:( int) _throw(({ void* _temp1101[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("bad t ? pointer arithmetic", sizeof( unsigned char), 27u), _tag_arr(
! _temp1101, sizeof( void*), 0u));})); goto _LL1094; _LL1094:;} done= 1;( void*)(
  e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__tagged_arr_inplace_plus_e,({
! struct Cyc_Absyn_Exp* _temp1102[ 3u]; _temp1102[ 2u]= change; _temp1102[ 1u]=
! Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( elt_typ), 0); _temp1102[ 0u]= Cyc_Absyn_address_exp(
  _temp896, 0);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1102, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));}} if( !
  done){ if( e1_poly){( void*)( _temp892->r=( void*)(( void*)( Cyc_Absyn_cast_exp(
  Cyc_Absyn_void_star_typ(), Cyc_Absyn_new_exp(( void*) _temp892->r, 0), 0))->r));}
  if( ! Cyc_Absyn_is_lvalue( _temp896)){(( void(*)( struct Cyc_Absyn_Exp* e1,
  struct Cyc_List_List* fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*,
  struct _tuple7*), struct _tuple7* f_env)) Cyc_Toc_lvalue_assign)( _temp896, 0,
! Cyc_Toc_assignop_lvalue,({ struct _tuple7* _temp1103=( struct _tuple7*)
! _cycalloc( sizeof( struct _tuple7) *  1); _temp1103[ 0]=({ struct _tuple7
! _temp1104; _temp1104.f1= _temp894; _temp1104.f2= _temp892; _temp1104;});
! _temp1103;}));( void*)( e->r=( void*)(( void*) _temp896->r));}} goto _LL793;}}
! _LL809: Cyc_Toc_exp_to_c( nv, _temp902); Cyc_Toc_exp_to_c( nv, _temp900); Cyc_Toc_exp_to_c(
! nv, _temp898); goto _LL793; _LL811: Cyc_Toc_exp_to_c( nv, _temp906); Cyc_Toc_exp_to_c(
! nv, _temp904); goto _LL793; _LL813: _temp916= _temp910; _temp914= _temp908; goto
! _LL815; _LL815: Cyc_Toc_exp_to_c( nv, _temp916);(( void(*)( void(* f)( struct
  Cyc_Toc_Env*, struct Cyc_Absyn_Exp*), struct Cyc_Toc_Env* env, struct Cyc_List_List*
! x)) Cyc_List_iter_c)( Cyc_Toc_exp_to_c, nv, _temp914); goto _LL793; _LL817:{
! struct _RegionHandle _temp1105= _new_region(); struct _RegionHandle* r=&
! _temp1105; _push_region( r);{ struct _tuple0* argv= Cyc_Toc_temp_var(); struct
  Cyc_Absyn_Exp* argvexp= Cyc_Absyn_var_exp( argv, 0); struct Cyc_Absyn_Exp*
  num_varargs_exp= Cyc_Absyn_uint_exp(( unsigned int) _temp925, 0); void* cva_type=
  Cyc_Toc_typ_to_c(( void*) _temp921->type); void* arr_type=( void*)({ struct Cyc_Absyn_ArrayType_struct*
! _temp1122=( struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp1122[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp1123; _temp1123.tag= Cyc_Absyn_ArrayType;
! _temp1123.f1=( void*) cva_type; _temp1123.f2= Cyc_Toc_mt_tq; _temp1123.f3=(
! struct Cyc_Absyn_Exp*) num_varargs_exp; _temp1123;}); _temp1122;}); int num_args=((
  int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp927); int num_normargs=
  num_args -  _temp925; struct Cyc_List_List* new_args= 0;{ int i= 0; for( 0; i < 
  num_normargs;( ++ i, _temp927=(( struct Cyc_List_List*) _check_null( _temp927))->tl)){
  Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
! _check_null( _temp927))->hd); new_args=({ struct Cyc_List_List* _temp1106=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1106->hd=(
  void*)(( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp927))->hd);
! _temp1106->tl= new_args; _temp1106;});}} new_args=({ struct Cyc_List_List*
! _temp1107=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1107->hd=( void*) Cyc_Absyn_fncall_exp( Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp*
! _temp1108[ 3u]; _temp1108[ 2u]= num_varargs_exp; _temp1108[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! cva_type, 0); _temp1108[ 0u]= argvexp;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1108, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0); _temp1107->tl= new_args; _temp1107;}); new_args=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( new_args); Cyc_Toc_exp_to_c( nv,
  _temp929);{ struct Cyc_Absyn_Stmt* s= Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp(
  _temp929, new_args, 0), 0); if( _temp921->inject){ struct _tagged_arr vs=({
! unsigned int _temp1118=( unsigned int) _temp925; struct _tuple0** _temp1119=(
  struct _tuple0**) _region_malloc( r, _check_times( sizeof( struct _tuple0*),
! _temp1118)); struct _tagged_arr _temp1121= _tag_arr( _temp1119, sizeof( struct
! _tuple0*),( unsigned int) _temp925);{ unsigned int _temp1120= _temp1118;
! unsigned int i; for( i= 0; i <  _temp1120; i ++){ _temp1119[ i]= Cyc_Toc_temp_var();}};
! _temp1121;}); struct Cyc_List_List* _temp1109= 0;{ int i= _temp925 -  1; for( 0;
! i >=  0; -- i){ _temp1109=({ struct Cyc_List_List* _temp1110=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1110->hd=( void*) Cyc_Toc_make_dle(
  Cyc_Absyn_address_exp( Cyc_Absyn_var_exp(*(( struct _tuple0**)
! _check_unknown_subscript( vs, sizeof( struct _tuple0*), i)), 0), 0)); _temp1110->tl=
! _temp1109; _temp1110;});}} s= Cyc_Absyn_declare_stmt( argv, arr_type,( struct
! Cyc_Absyn_Exp*) Cyc_Absyn_unresolvedmem_exp( 0, _temp1109, 0), s, 0);{ int i= 0;
  for( 0; _temp927 !=  0;((( _temp927=(( struct Cyc_List_List*) _check_null(
  _temp927))->tl, _temp923=(( struct Cyc_List_List*) _check_null( _temp923))->tl)),
  ++ i)){ struct Cyc_Absyn_Exp* arg=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( _temp927))->hd; void* arg_type=( void*)(( struct Cyc_Core_Opt*)
  _check_null( arg->topt))->v; struct _tuple0* var=*(( struct _tuple0**)
  _check_unknown_subscript( vs, sizeof( struct _tuple0*), i)); struct Cyc_Absyn_Exp*
! varexp= Cyc_Absyn_var_exp( var, 0); struct Cyc_Absyn_Tunionfield _temp1113;
! struct Cyc_List_List* _temp1114; struct _tuple0* _temp1116; struct Cyc_Absyn_Tunionfield*
! _temp1111=( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null(
! _temp923))->hd; _temp1113=* _temp1111; _LL1117: _temp1116= _temp1113.name; goto
! _LL1115; _LL1115: _temp1114= _temp1113.typs; goto _LL1112; _LL1112: { void*
  field_typ= Cyc_Toc_typ_to_c((*(( struct _tuple3*)(( struct Cyc_List_List*)
! _check_null( _temp1114))->hd)).f2); Cyc_Toc_exp_to_c( nv, arg); if( Cyc_Toc_is_void_star(
  field_typ)){ arg= Cyc_Absyn_cast_exp( field_typ, arg, 0);} s= Cyc_Absyn_seq_stmt(
  Cyc_Absyn_assign_stmt( Cyc_Absyn_structmember_exp( varexp, Cyc_Absyn_fieldname(
  1), 0), arg, 0), s, 0); s= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_structmember_exp(
! varexp, Cyc_Toc_tag_sp, 0), Cyc_Absyn_var_exp( _temp1116, 0), 0), s, 0); s= Cyc_Absyn_declare_stmt(
! var, Cyc_Absyn_strctq( Cyc_Toc_collapse_qvar_tag( _temp1116, _tag_arr("_struct",
  sizeof( unsigned char), 8u))), 0, s, 0);}}}} else{{ int i= 0; for( 0; _temp927
  !=  0;( _temp927=(( struct Cyc_List_List*) _check_null( _temp927))->tl, ++ i)){
  Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
--- 1812,2152 ----
  _temp937; struct Cyc_Absyn_Exp* _temp939; void* _temp941; void** _temp943;
  struct Cyc_Absyn_Exp* _temp944; struct Cyc_Absyn_Exp* _temp946; struct Cyc_Absyn_Exp*
  _temp948; struct Cyc_Absyn_Exp* _temp950; void* _temp952; void* _temp954; struct
! _tagged_arr* _temp956; void* _temp958; struct Cyc_Absyn_Exp* _temp960; struct
! _tagged_arr* _temp962; struct Cyc_Absyn_Exp* _temp964; struct _tagged_arr*
! _temp966; struct Cyc_Absyn_Exp* _temp968; struct Cyc_Absyn_Exp* _temp970; struct
! Cyc_Absyn_Exp* _temp972; struct Cyc_List_List* _temp974; struct Cyc_List_List*
! _temp976; struct Cyc_Absyn_Exp* _temp978; struct Cyc_Absyn_Exp* _temp980; struct
! Cyc_Absyn_Vardecl* _temp982; struct Cyc_Absyn_Structdecl* _temp984; struct Cyc_List_List*
! _temp986; struct Cyc_Core_Opt* _temp988; struct _tuple0* _temp990; struct Cyc_List_List*
! _temp992; void* _temp994; struct Cyc_Absyn_Tunionfield* _temp996; struct Cyc_Absyn_Tuniondecl*
! _temp998; struct Cyc_List_List* _temp1000; struct Cyc_Absyn_Tunionfield*
! _temp1002; struct Cyc_Absyn_Tuniondecl* _temp1004; struct Cyc_List_List*
! _temp1006; void* _temp1008; struct Cyc_Absyn_Exp* _temp1010; struct Cyc_Absyn_Stmt*
! _temp1012; struct Cyc_Absyn_Fndecl* _temp1014; _LL796: if(*(( int*) _temp794) == 
  Cyc_Absyn_Const_e){ _LL877: _temp876=( void*)(( struct Cyc_Absyn_Const_e_struct*)
! _temp794)->f1; if( _temp876 == ( void*) Cyc_Absyn_Null_c){ goto _LL797;} else{
! goto _LL798;}} else{ goto _LL798;} _LL798: if(*(( int*) _temp794) ==  Cyc_Absyn_Const_e){
! goto _LL799;} else{ goto _LL800;} _LL800: if(*(( int*) _temp794) ==  Cyc_Absyn_Var_e){
! _LL881: _temp880=(( struct Cyc_Absyn_Var_e_struct*) _temp794)->f1; goto _LL879;
! _LL879: _temp878=( void*)(( struct Cyc_Absyn_Var_e_struct*) _temp794)->f2; goto
! _LL801;} else{ goto _LL802;} _LL802: if(*(( int*) _temp794) ==  Cyc_Absyn_UnknownId_e){
! _LL883: _temp882=(( struct Cyc_Absyn_UnknownId_e_struct*) _temp794)->f1; goto
! _LL803;} else{ goto _LL804;} _LL804: if(*(( int*) _temp794) ==  Cyc_Absyn_Primop_e){
! _LL887: _temp886=( void*)(( struct Cyc_Absyn_Primop_e_struct*) _temp794)->f1;
! goto _LL885; _LL885: _temp884=(( struct Cyc_Absyn_Primop_e_struct*) _temp794)->f2;
! goto _LL805;} else{ goto _LL806;} _LL806: if(*(( int*) _temp794) ==  Cyc_Absyn_Increment_e){
! _LL891: _temp890=(( struct Cyc_Absyn_Increment_e_struct*) _temp794)->f1; goto
  _LL889; _LL889: _temp888=( void*)(( struct Cyc_Absyn_Increment_e_struct*)
! _temp794)->f2; goto _LL807;} else{ goto _LL808;} _LL808: if(*(( int*) _temp794)
  ==  Cyc_Absyn_AssignOp_e){ _LL897: _temp896=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp794)->f1; goto _LL895; _LL895: _temp894=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp794)->f2; goto _LL893; _LL893: _temp892=(( struct Cyc_Absyn_AssignOp_e_struct*)
! _temp794)->f3; goto _LL809;} else{ goto _LL810;} _LL810: if(*(( int*) _temp794)
  ==  Cyc_Absyn_Conditional_e){ _LL903: _temp902=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp794)->f1; goto _LL901; _LL901: _temp900=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp794)->f2; goto _LL899; _LL899: _temp898=(( struct Cyc_Absyn_Conditional_e_struct*)
! _temp794)->f3; goto _LL811;} else{ goto _LL812;} _LL812: if(*(( int*) _temp794)
  ==  Cyc_Absyn_SeqExp_e){ _LL907: _temp906=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp794)->f1; goto _LL905; _LL905: _temp904=(( struct Cyc_Absyn_SeqExp_e_struct*)
! _temp794)->f2; goto _LL813;} else{ goto _LL814;} _LL814: if(*(( int*) _temp794)
  ==  Cyc_Absyn_UnknownCall_e){ _LL911: _temp910=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp794)->f1; goto _LL909; _LL909: _temp908=(( struct Cyc_Absyn_UnknownCall_e_struct*)
! _temp794)->f2; goto _LL815;} else{ goto _LL816;} _LL816: if(*(( int*) _temp794)
  ==  Cyc_Absyn_FnCall_e){ _LL917: _temp916=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp794)->f1; goto _LL915; _LL915: _temp914=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp794)->f2; goto _LL913; _LL913: _temp912=(( struct Cyc_Absyn_FnCall_e_struct*)
! _temp794)->f3; if( _temp912 ==  0){ goto _LL817;} else{ goto _LL818;}} else{
! goto _LL818;} _LL818: if(*(( int*) _temp794) ==  Cyc_Absyn_FnCall_e){ _LL930:
! _temp929=(( struct Cyc_Absyn_FnCall_e_struct*) _temp794)->f1; goto _LL928;
! _LL928: _temp927=(( struct Cyc_Absyn_FnCall_e_struct*) _temp794)->f2; goto
! _LL919; _LL919: _temp918=(( struct Cyc_Absyn_FnCall_e_struct*) _temp794)->f3;
! if( _temp918 ==  0){ goto _LL820;} else{ _temp920=* _temp918; _LL926: _temp925=
  _temp920.num_varargs; goto _LL924; _LL924: _temp923= _temp920.injectors; goto
! _LL922; _LL922: _temp921= _temp920.vai; goto _LL819;}} else{ goto _LL820;}
! _LL820: if(*(( int*) _temp794) ==  Cyc_Absyn_Throw_e){ _LL932: _temp931=((
! struct Cyc_Absyn_Throw_e_struct*) _temp794)->f1; goto _LL821;} else{ goto _LL822;}
! _LL822: if(*(( int*) _temp794) ==  Cyc_Absyn_NoInstantiate_e){ _LL934: _temp933=((
! struct Cyc_Absyn_NoInstantiate_e_struct*) _temp794)->f1; goto _LL823;} else{
! goto _LL824;} _LL824: if(*(( int*) _temp794) ==  Cyc_Absyn_Instantiate_e){
! _LL938: _temp937=(( struct Cyc_Absyn_Instantiate_e_struct*) _temp794)->f1; goto
! _LL936; _LL936: _temp935=(( struct Cyc_Absyn_Instantiate_e_struct*) _temp794)->f2;
! goto _LL825;} else{ goto _LL826;} _LL826: if(*(( int*) _temp794) ==  Cyc_Absyn_Cast_e){
! _LL942: _temp941=( void*)(( struct Cyc_Absyn_Cast_e_struct*) _temp794)->f1;
! _temp943=( void**)&(( void*)(( struct Cyc_Absyn_Cast_e_struct*) _temp794)->f1);
! goto _LL940; _LL940: _temp939=(( struct Cyc_Absyn_Cast_e_struct*) _temp794)->f2;
! goto _LL827;} else{ goto _LL828;} _LL828: if(*(( int*) _temp794) ==  Cyc_Absyn_Address_e){
! _LL945: _temp944=(( struct Cyc_Absyn_Address_e_struct*) _temp794)->f1; goto
! _LL829;} else{ goto _LL830;} _LL830: if(*(( int*) _temp794) ==  Cyc_Absyn_New_e){
! _LL949: _temp948=(( struct Cyc_Absyn_New_e_struct*) _temp794)->f1; goto _LL947;
! _LL947: _temp946=(( struct Cyc_Absyn_New_e_struct*) _temp794)->f2; goto _LL831;}
! else{ goto _LL832;} _LL832: if(*(( int*) _temp794) ==  Cyc_Absyn_Sizeofexp_e){
! _LL951: _temp950=(( struct Cyc_Absyn_Sizeofexp_e_struct*) _temp794)->f1; goto
! _LL833;} else{ goto _LL834;} _LL834: if(*(( int*) _temp794) ==  Cyc_Absyn_Sizeoftyp_e){
! _LL953: _temp952=( void*)(( struct Cyc_Absyn_Sizeoftyp_e_struct*) _temp794)->f1;
! goto _LL835;} else{ goto _LL836;} _LL836: if(*(( int*) _temp794) ==  Cyc_Absyn_Gentyp_e){
! _LL955: _temp954=( void*)(( struct Cyc_Absyn_Gentyp_e_struct*) _temp794)->f1;
! goto _LL837;} else{ goto _LL838;} _LL838: if(*(( int*) _temp794) ==  Cyc_Absyn_Offsetof_e){
! _LL959: _temp958=( void*)(( struct Cyc_Absyn_Offsetof_e_struct*) _temp794)->f1;
! goto _LL957; _LL957: _temp956=(( struct Cyc_Absyn_Offsetof_e_struct*) _temp794)->f2;
! goto _LL839;} else{ goto _LL840;} _LL840: if(*(( int*) _temp794) ==  Cyc_Absyn_Deref_e){
! _LL961: _temp960=(( struct Cyc_Absyn_Deref_e_struct*) _temp794)->f1; goto _LL841;}
! else{ goto _LL842;} _LL842: if(*(( int*) _temp794) ==  Cyc_Absyn_StructMember_e){
! _LL965: _temp964=(( struct Cyc_Absyn_StructMember_e_struct*) _temp794)->f1; goto
! _LL963; _LL963: _temp962=(( struct Cyc_Absyn_StructMember_e_struct*) _temp794)->f2;
! goto _LL843;} else{ goto _LL844;} _LL844: if(*(( int*) _temp794) ==  Cyc_Absyn_StructArrow_e){
! _LL969: _temp968=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp794)->f1; goto
! _LL967; _LL967: _temp966=(( struct Cyc_Absyn_StructArrow_e_struct*) _temp794)->f2;
! goto _LL845;} else{ goto _LL846;} _LL846: if(*(( int*) _temp794) ==  Cyc_Absyn_Subscript_e){
! _LL973: _temp972=(( struct Cyc_Absyn_Subscript_e_struct*) _temp794)->f1; goto
! _LL971; _LL971: _temp970=(( struct Cyc_Absyn_Subscript_e_struct*) _temp794)->f2;
! goto _LL847;} else{ goto _LL848;} _LL848: if(*(( int*) _temp794) ==  Cyc_Absyn_Tuple_e){
! _LL975: _temp974=(( struct Cyc_Absyn_Tuple_e_struct*) _temp794)->f1; goto _LL849;}
! else{ goto _LL850;} _LL850: if(*(( int*) _temp794) ==  Cyc_Absyn_Array_e){
! _LL977: _temp976=(( struct Cyc_Absyn_Array_e_struct*) _temp794)->f1; goto _LL851;}
! else{ goto _LL852;} _LL852: if(*(( int*) _temp794) ==  Cyc_Absyn_Comprehension_e){
! _LL983: _temp982=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp794)->f1;
! goto _LL981; _LL981: _temp980=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp794)->f2; goto _LL979; _LL979: _temp978=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp794)->f3; goto _LL853;} else{ goto _LL854;} _LL854: if(*(( int*) _temp794)
! ==  Cyc_Absyn_Struct_e){ _LL991: _temp990=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp794)->f1; goto _LL989; _LL989: _temp988=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp794)->f2; goto _LL987; _LL987: _temp986=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp794)->f3; goto _LL985; _LL985: _temp984=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp794)->f4; goto _LL855;} else{ goto _LL856;} _LL856: if(*(( int*) _temp794)
! ==  Cyc_Absyn_AnonStruct_e){ _LL995: _temp994=( void*)(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp794)->f1; goto _LL993; _LL993: _temp992=(( struct Cyc_Absyn_AnonStruct_e_struct*)
! _temp794)->f2; goto _LL857;} else{ goto _LL858;} _LL858: if(*(( int*) _temp794)
! ==  Cyc_Absyn_Tunion_e){ _LL1001: _temp1000=(( struct Cyc_Absyn_Tunion_e_struct*)
! _temp794)->f3; if( _temp1000 ==  0){ goto _LL999;} else{ goto _LL860;} _LL999:
! _temp998=(( struct Cyc_Absyn_Tunion_e_struct*) _temp794)->f4; goto _LL997;
! _LL997: _temp996=(( struct Cyc_Absyn_Tunion_e_struct*) _temp794)->f5; goto
! _LL859;} else{ goto _LL860;} _LL860: if(*(( int*) _temp794) ==  Cyc_Absyn_Tunion_e){
! _LL1007: _temp1006=(( struct Cyc_Absyn_Tunion_e_struct*) _temp794)->f3; goto
! _LL1005; _LL1005: _temp1004=(( struct Cyc_Absyn_Tunion_e_struct*) _temp794)->f4;
! goto _LL1003; _LL1003: _temp1002=(( struct Cyc_Absyn_Tunion_e_struct*) _temp794)->f5;
! goto _LL861;} else{ goto _LL862;} _LL862: if(*(( int*) _temp794) ==  Cyc_Absyn_Enum_e){
! goto _LL863;} else{ goto _LL864;} _LL864: if(*(( int*) _temp794) ==  Cyc_Absyn_Malloc_e){
! _LL1011: _temp1010=(( struct Cyc_Absyn_Malloc_e_struct*) _temp794)->f1; goto
! _LL1009; _LL1009: _temp1008=( void*)(( struct Cyc_Absyn_Malloc_e_struct*)
! _temp794)->f2; goto _LL865;} else{ goto _LL866;} _LL866: if(*(( int*) _temp794)
! ==  Cyc_Absyn_StmtExp_e){ _LL1013: _temp1012=(( struct Cyc_Absyn_StmtExp_e_struct*)
! _temp794)->f1; goto _LL867;} else{ goto _LL868;} _LL868: if(*(( int*) _temp794)
  ==  Cyc_Absyn_UnresolvedMem_e){ goto _LL869;} else{ goto _LL870;} _LL870: if(*((
! int*) _temp794) ==  Cyc_Absyn_CompoundLit_e){ goto _LL871;} else{ goto _LL872;}
! _LL872: if(*(( int*) _temp794) ==  Cyc_Absyn_Codegen_e){ _LL1015: _temp1014=((
! struct Cyc_Absyn_Codegen_e_struct*) _temp794)->f1; goto _LL873;} else{ goto
! _LL874;} _LL874: if(*(( int*) _temp794) ==  Cyc_Absyn_Fill_e){ goto _LL875;}
! else{ goto _LL795;} _LL797: { struct Cyc_Absyn_Exp* _temp1016= Cyc_Absyn_uint_exp(
  0, 0); if( Cyc_Tcutil_is_tagged_pointer_typ( old_typ)){ if( nv->toplevel){( void*)(
! e->r=( void*)(( void*)( Cyc_Toc_make_toplevel_tagged_arr( old_typ, _temp1016,
! _temp1016))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp* _temp1017[ 3u]; _temp1017[ 2u]=
! _temp1016; _temp1017[ 1u]= _temp1016; _temp1017[ 0u]= _temp1016;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1017, sizeof( struct Cyc_Absyn_Exp*),
  3u));}), 0))->r));}} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_signed_int_exp(
! 0, 0))->r));} goto _LL795;} _LL799: goto _LL795; _LL801:{ struct _handler_cons
! _temp1018; _push_handler(& _temp1018);{ int _temp1020= 0; if( setjmp( _temp1018.handler)){
! _temp1020= 1;} if( ! _temp1020){( void*)( e->r=( void*)(( void*)((( struct Cyc_Absyn_Exp*(*)(
  struct Cyc_Dict_Dict* d, struct _tuple0* k)) Cyc_Dict_lookup)( nv->varmap,
! _temp880))->r));; _pop_handler();} else{ void* _temp1019=( void*) _exn_thrown;
! void* _temp1022= _temp1019; _LL1024: if( _temp1022 ==  Cyc_Dict_Absent){ goto
! _LL1025;} else{ goto _LL1026;} _LL1026: goto _LL1027; _LL1025:({ struct Cyc_Std_String_pa_struct
! _temp1029; _temp1029.tag= Cyc_Std_String_pa; _temp1029.f1=( struct _tagged_arr)
! Cyc_Absynpp_qvar2string( _temp880);{ void* _temp1028[ 1u]={& _temp1029};(( int(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("Can't find %s in exp_to_c, Var\n",
! sizeof( unsigned char), 32u), _tag_arr( _temp1028, sizeof( void*), 1u));}});
! return; _LL1027:( void) _throw( _temp1022); _LL1023:;}}} goto _LL795; _LL803:({
! void* _temp1030[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Toc_toc_impos)( _tag_arr("unknownid", sizeof( unsigned char), 10u), _tag_arr(
! _temp1030, sizeof( void*), 0u));}); goto _LL795; _LL805: { struct Cyc_List_List*
! _temp1031=(( struct Cyc_List_List*(*)( void*(* f)( struct Cyc_Absyn_Exp*),
  struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_get_cyc_typ, _temp884);(( void(*)(
  void(* f)( struct Cyc_Toc_Env*, struct Cyc_Absyn_Exp*), struct Cyc_Toc_Env* env,
  struct Cyc_List_List* x)) Cyc_List_iter_c)( Cyc_Toc_exp_to_c, nv, _temp884);{
! void* _temp1032= _temp886; _LL1034: if( _temp1032 == ( void*) Cyc_Absyn_Size){
! goto _LL1035;} else{ goto _LL1036;} _LL1036: if( _temp1032 == ( void*) Cyc_Absyn_Plus){
! goto _LL1037;} else{ goto _LL1038;} _LL1038: if( _temp1032 == ( void*) Cyc_Absyn_Minus){
! goto _LL1039;} else{ goto _LL1040;} _LL1040: if( _temp1032 == ( void*) Cyc_Absyn_Eq){
! goto _LL1041;} else{ goto _LL1042;} _LL1042: if( _temp1032 == ( void*) Cyc_Absyn_Neq){
! goto _LL1043;} else{ goto _LL1044;} _LL1044: if( _temp1032 == ( void*) Cyc_Absyn_Gt){
! goto _LL1045;} else{ goto _LL1046;} _LL1046: if( _temp1032 == ( void*) Cyc_Absyn_Gte){
! goto _LL1047;} else{ goto _LL1048;} _LL1048: if( _temp1032 == ( void*) Cyc_Absyn_Lt){
! goto _LL1049;} else{ goto _LL1050;} _LL1050: if( _temp1032 == ( void*) Cyc_Absyn_Lte){
! goto _LL1051;} else{ goto _LL1052;} _LL1052: goto _LL1053; _LL1035: { struct Cyc_Absyn_Exp*
  arg=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp884))->hd;{
! void* _temp1054= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( arg->topt))->v); struct Cyc_Absyn_Exp* _temp1062; struct Cyc_Absyn_PtrInfo
! _temp1064; struct Cyc_Absyn_Conref* _temp1066; void* _temp1068; _LL1056: if((
! unsigned int) _temp1054 >  4u?*(( int*) _temp1054) ==  Cyc_Absyn_ArrayType: 0){
! _LL1063: _temp1062=(( struct Cyc_Absyn_ArrayType_struct*) _temp1054)->f3; goto
! _LL1057;} else{ goto _LL1058;} _LL1058: if(( unsigned int) _temp1054 >  4u?*((
! int*) _temp1054) ==  Cyc_Absyn_PointerType: 0){ _LL1065: _temp1064=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1054)->f1; _LL1069: _temp1068=( void*) _temp1064.elt_typ; goto _LL1067;
! _LL1067: _temp1066= _temp1064.bounds; goto _LL1059;} else{ goto _LL1060;}
! _LL1060: goto _LL1061; _LL1057:( void*)( e->r=( void*)(( void*)(( struct Cyc_Absyn_Exp*)
! _check_null( _temp1062))->r)); goto _LL1055; _LL1059:{ void* _temp1070= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1066); struct Cyc_Absyn_Exp* _temp1076; _LL1072: if(
! _temp1070 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1073;} else{ goto _LL1074;}
! _LL1074: if(( unsigned int) _temp1070 >  1u?*(( int*) _temp1070) ==  Cyc_Absyn_Upper_b:
! 0){ _LL1077: _temp1076=(( struct Cyc_Absyn_Upper_b_struct*) _temp1070)->f1; goto
! _LL1075;} else{ goto _LL1071;} _LL1073:( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__get_arr_size_e,({ struct Cyc_Absyn_Exp* _temp1078[ 2u]; _temp1078[ 1u]=
! Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( _temp1068), 0); _temp1078[ 0u]=(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp884))->hd;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1078, sizeof( struct Cyc_Absyn_Exp*), 2u));}), 0))->r)); goto _LL1071;
! _LL1075:( void*)( e->r=( void*)(( void*) _temp1076->r)); goto _LL1071; _LL1071:;}
! goto _LL1055; _LL1061:({ struct Cyc_Std_String_pa_struct _temp1081; _temp1081.tag=
! Cyc_Std_String_pa; _temp1081.f1=( struct _tagged_arr) Cyc_Absynpp_typ2string((
  void*)(( struct Cyc_Core_Opt*) _check_null( arg->topt))->v);{ struct Cyc_Std_String_pa_struct
! _temp1080; _temp1080.tag= Cyc_Std_String_pa; _temp1080.f1=( struct _tagged_arr)
  Cyc_Absynpp_typ2string(( void*)(( struct Cyc_Core_Opt*) _check_null( arg->topt))->v);{
! void* _temp1079[ 2u]={& _temp1080,& _temp1081};(( int(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("size primop applied to non-array %s (%s)",
! sizeof( unsigned char), 41u), _tag_arr( _temp1079, sizeof( void*), 2u));}}});
! return; _LL1055:;} goto _LL1033;} _LL1037: { void* elt_typ=( void*) Cyc_Absyn_VoidType;
  if( Cyc_Tcutil_is_tagged_pointer_typ_elt(( void*)(( struct Cyc_List_List*)
! _check_null( _temp1031))->hd,& elt_typ)){ struct Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( _temp884))->hd; struct Cyc_Absyn_Exp* e2=(
  struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
  _check_null( _temp884))->tl))->hd;( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__tagged_arr_plus_e,({ struct Cyc_Absyn_Exp* _temp1082[ 3u]; _temp1082[ 2u]=
! e2; _temp1082[ 1u]= Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( elt_typ), 0);
! _temp1082[ 0u]= e1;(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1082, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));} goto
! _LL1033;} _LL1039: { void* elt_typ=( void*) Cyc_Absyn_VoidType; if( Cyc_Tcutil_is_tagged_pointer_typ_elt((
! void*)(( struct Cyc_List_List*) _check_null( _temp1031))->hd,& elt_typ)){ struct
  Cyc_Absyn_Exp* e1=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null(
  _temp884))->hd; struct Cyc_Absyn_Exp* e2=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null((( struct Cyc_List_List*) _check_null( _temp884))->tl))->hd; if( Cyc_Tcutil_is_tagged_pointer_typ((
  void*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( _temp1031))->tl))->hd)){( void*)( e1->r=( void*)(( void*)( Cyc_Absyn_structmember_exp(
  Cyc_Absyn_new_exp(( void*) e1->r, 0), Cyc_Toc_curr_sp, 0))->r));( void*)( e2->r=(
  void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp(( void*) e2->r, 0),
  Cyc_Toc_curr_sp, 0))->r));( void*)( e->r=( void*)(( void*)( Cyc_Absyn_divide_exp(
  Cyc_Absyn_copy_exp( e), Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( elt_typ), 0),
  0))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__tagged_arr_plus_e,({
! struct Cyc_Absyn_Exp* _temp1083[ 3u]; _temp1083[ 2u]= Cyc_Absyn_prim1_exp(( void*)
! Cyc_Absyn_Minus, e2, 0); _temp1083[ 1u]= Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c(
! elt_typ), 0); _temp1083[ 0u]= e1;(( struct Cyc_List_List*(*)( struct _tagged_arr))
! Cyc_List_list)( _tag_arr( _temp1083, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));}}
! goto _LL1033;} _LL1041: goto _LL1043; _LL1043: goto _LL1045; _LL1045: goto
! _LL1047; _LL1047: goto _LL1049; _LL1049: goto _LL1051; _LL1051: { struct Cyc_Absyn_Exp*
  e1=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp884))->hd;
  struct Cyc_Absyn_Exp* e2=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null((( struct Cyc_List_List*) _check_null( _temp884))->tl))->hd; void*
! t1=( void*)(( struct Cyc_List_List*) _check_null( _temp1031))->hd; void* t2=(
  void*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
! _check_null( _temp1031))->tl))->hd; if( Cyc_Tcutil_is_tagged_pointer_typ( t1)){(
  void*)( e1->r=( void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp((
  void*) e1->r, 0), Cyc_Toc_curr_sp, 0))->r));} if( Cyc_Tcutil_is_tagged_pointer_typ(
  t2)){( void*)( e2->r=( void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp((
! void*) e2->r, 0), Cyc_Toc_curr_sp, 0))->r));} goto _LL1033;} _LL1053: goto
! _LL1033; _LL1033:;} goto _LL795;} _LL807: { void* e2_cyc_typ=( void*)(( struct
  Cyc_Core_Opt*) _check_null( _temp890->topt))->v; Cyc_Toc_exp_to_c( nv, _temp890);{
  void* elt_typ=( void*) Cyc_Absyn_VoidType; if( Cyc_Tcutil_is_tagged_pointer_typ_elt(
! old_typ,& elt_typ)){ struct Cyc_Absyn_Exp* _temp1084=( _temp888 == ( void*) Cyc_Absyn_PostInc?
  1: _temp888 == ( void*) Cyc_Absyn_PostDec)? Cyc_Toc__tagged_arr_inplace_plus_post_e:
! Cyc_Toc__tagged_arr_inplace_plus_e; int _temp1085=( _temp888 == ( void*) Cyc_Absyn_PreInc?
  1: _temp888 == ( void*) Cyc_Absyn_PostInc)? 1: - 1;( void*)( e->r=( void*)((
! void*)( Cyc_Absyn_fncall_exp( _temp1084,({ struct Cyc_Absyn_Exp* _temp1086[ 3u];
! _temp1086[ 2u]= Cyc_Absyn_signed_int_exp( _temp1085, 0); _temp1086[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! Cyc_Toc_typ_to_c( elt_typ), 0); _temp1086[ 0u]= Cyc_Absyn_address_exp( _temp890,
  0);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1086, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));} if( elt_typ == (
  void*) Cyc_Absyn_VoidType? ! Cyc_Absyn_is_lvalue( _temp890): 0){ Cyc_Toc_lvalue_assign(
  _temp890, 0, Cyc_Toc_incr_lvalue, _temp888);( void*)( e->r=( void*)(( void*)
! _temp890->r));} goto _LL795;}} _LL809: { int e1_poly= Cyc_Toc_is_poly_project(
  _temp896); void* e1_old_typ=( void*)(( struct Cyc_Core_Opt*) _check_null(
  _temp896->topt))->v; void* e2_old_typ=( void*)(( struct Cyc_Core_Opt*)
  _check_null( _temp892->topt))->v; Cyc_Toc_exp_to_c( nv, _temp896); Cyc_Toc_exp_to_c(
  nv, _temp892);{ int done= 0; if( _temp894 !=  0){ void* elt_typ=( void*) Cyc_Absyn_VoidType;
  if( Cyc_Tcutil_is_tagged_pointer_typ_elt( old_typ,& elt_typ)){ struct Cyc_Absyn_Exp*
! change;{ void* _temp1087=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp894))->v;
! _LL1089: if( _temp1087 == ( void*) Cyc_Absyn_Plus){ goto _LL1090;} else{ goto
! _LL1091;} _LL1091: if( _temp1087 == ( void*) Cyc_Absyn_Minus){ goto _LL1092;}
! else{ goto _LL1093;} _LL1093: goto _LL1094; _LL1090: change= _temp892; goto
! _LL1088; _LL1092: change= Cyc_Absyn_prim1_exp(( void*) Cyc_Absyn_Minus, _temp892,
! 0); goto _LL1088; _LL1094:( int) _throw(({ void* _temp1095[ 0u]={}; Cyc_Tcutil_impos(
  _tag_arr("bad t ? pointer arithmetic", sizeof( unsigned char), 27u), _tag_arr(
! _temp1095, sizeof( void*), 0u));})); goto _LL1088; _LL1088:;} done= 1;( void*)(
  e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__tagged_arr_inplace_plus_e,({
! struct Cyc_Absyn_Exp* _temp1096[ 3u]; _temp1096[ 2u]= change; _temp1096[ 1u]=
! Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c( elt_typ), 0); _temp1096[ 0u]= Cyc_Absyn_address_exp(
  _temp896, 0);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1096, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0))->r));}} if( !
  done){ if( e1_poly){( void*)( _temp892->r=( void*)(( void*)( Cyc_Absyn_cast_exp(
  Cyc_Absyn_void_star_typ(), Cyc_Absyn_new_exp(( void*) _temp892->r, 0), 0))->r));}
  if( ! Cyc_Absyn_is_lvalue( _temp896)){(( void(*)( struct Cyc_Absyn_Exp* e1,
  struct Cyc_List_List* fs, struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*,
  struct _tuple7*), struct _tuple7* f_env)) Cyc_Toc_lvalue_assign)( _temp896, 0,
! Cyc_Toc_assignop_lvalue,({ struct _tuple7* _temp1097=( struct _tuple7*)
! _cycalloc( sizeof( struct _tuple7) *  1); _temp1097[ 0]=({ struct _tuple7
! _temp1098; _temp1098.f1= _temp894; _temp1098.f2= _temp892; _temp1098;});
! _temp1097;}));( void*)( e->r=( void*)(( void*) _temp896->r));}} goto _LL795;}}
! _LL811: Cyc_Toc_exp_to_c( nv, _temp902); Cyc_Toc_exp_to_c( nv, _temp900); Cyc_Toc_exp_to_c(
! nv, _temp898); goto _LL795; _LL813: Cyc_Toc_exp_to_c( nv, _temp906); Cyc_Toc_exp_to_c(
! nv, _temp904); goto _LL795; _LL815: _temp916= _temp910; _temp914= _temp908; goto
! _LL817; _LL817: Cyc_Toc_exp_to_c( nv, _temp916);(( void(*)( void(* f)( struct
  Cyc_Toc_Env*, struct Cyc_Absyn_Exp*), struct Cyc_Toc_Env* env, struct Cyc_List_List*
! x)) Cyc_List_iter_c)( Cyc_Toc_exp_to_c, nv, _temp914); goto _LL795; _LL819:{
! struct _RegionHandle _temp1099= _new_region(); struct _RegionHandle* r=&
! _temp1099; _push_region( r);{ struct _tuple0* argv= Cyc_Toc_temp_var(); struct
  Cyc_Absyn_Exp* argvexp= Cyc_Absyn_var_exp( argv, 0); struct Cyc_Absyn_Exp*
  num_varargs_exp= Cyc_Absyn_uint_exp(( unsigned int) _temp925, 0); void* cva_type=
  Cyc_Toc_typ_to_c(( void*) _temp921->type); void* arr_type=( void*)({ struct Cyc_Absyn_ArrayType_struct*
! _temp1116=( struct Cyc_Absyn_ArrayType_struct*) _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct));
! _temp1116[ 0]=({ struct Cyc_Absyn_ArrayType_struct _temp1117; _temp1117.tag= Cyc_Absyn_ArrayType;
! _temp1117.f1=( void*) cva_type; _temp1117.f2= Cyc_Toc_mt_tq; _temp1117.f3=(
! struct Cyc_Absyn_Exp*) num_varargs_exp; _temp1117;}); _temp1116;}); int num_args=((
  int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp927); int num_normargs=
  num_args -  _temp925; struct Cyc_List_List* new_args= 0;{ int i= 0; for( 0; i < 
  num_normargs;( ++ i, _temp927=(( struct Cyc_List_List*) _check_null( _temp927))->tl)){
  Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
! _check_null( _temp927))->hd); new_args=({ struct Cyc_List_List* _temp1100=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1100->hd=(
  void*)(( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp927))->hd);
! _temp1100->tl= new_args; _temp1100;});}} new_args=({ struct Cyc_List_List*
! _temp1101=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1101->hd=( void*) Cyc_Absyn_fncall_exp( Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp*
! _temp1102[ 3u]; _temp1102[ 2u]= num_varargs_exp; _temp1102[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! cva_type, 0); _temp1102[ 0u]= argvexp;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1102, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0); _temp1101->tl= new_args; _temp1101;}); new_args=(( struct Cyc_List_List*(*)(
  struct Cyc_List_List* x)) Cyc_List_imp_rev)( new_args); Cyc_Toc_exp_to_c( nv,
  _temp929);{ struct Cyc_Absyn_Stmt* s= Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp(
  _temp929, new_args, 0), 0); if( _temp921->inject){ struct _tagged_arr vs=({
! unsigned int _temp1112=( unsigned int) _temp925; struct _tuple0** _temp1113=(
  struct _tuple0**) _region_malloc( r, _check_times( sizeof( struct _tuple0*),
! _temp1112)); struct _tagged_arr _temp1115= _tag_arr( _temp1113, sizeof( struct
! _tuple0*),( unsigned int) _temp925);{ unsigned int _temp1114= _temp1112;
! unsigned int i; for( i= 0; i <  _temp1114; i ++){ _temp1113[ i]= Cyc_Toc_temp_var();}};
! _temp1115;}); struct Cyc_List_List* _temp1103= 0;{ int i= _temp925 -  1; for( 0;
! i >=  0; -- i){ _temp1103=({ struct Cyc_List_List* _temp1104=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1104->hd=( void*) Cyc_Toc_make_dle(
  Cyc_Absyn_address_exp( Cyc_Absyn_var_exp(*(( struct _tuple0**)
! _check_unknown_subscript( vs, sizeof( struct _tuple0*), i)), 0), 0)); _temp1104->tl=
! _temp1103; _temp1104;});}} s= Cyc_Absyn_declare_stmt( argv, arr_type,( struct
! Cyc_Absyn_Exp*) Cyc_Absyn_unresolvedmem_exp( 0, _temp1103, 0), s, 0);{ int i= 0;
  for( 0; _temp927 !=  0;((( _temp927=(( struct Cyc_List_List*) _check_null(
  _temp927))->tl, _temp923=(( struct Cyc_List_List*) _check_null( _temp923))->tl)),
  ++ i)){ struct Cyc_Absyn_Exp* arg=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
  _check_null( _temp927))->hd; void* arg_type=( void*)(( struct Cyc_Core_Opt*)
  _check_null( arg->topt))->v; struct _tuple0* var=*(( struct _tuple0**)
  _check_unknown_subscript( vs, sizeof( struct _tuple0*), i)); struct Cyc_Absyn_Exp*
! varexp= Cyc_Absyn_var_exp( var, 0); struct Cyc_Absyn_Tunionfield _temp1107;
! struct Cyc_List_List* _temp1108; struct _tuple0* _temp1110; struct Cyc_Absyn_Tunionfield*
! _temp1105=( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null(
! _temp923))->hd; _temp1107=* _temp1105; _LL1111: _temp1110= _temp1107.name; goto
! _LL1109; _LL1109: _temp1108= _temp1107.typs; goto _LL1106; _LL1106: { void*
  field_typ= Cyc_Toc_typ_to_c((*(( struct _tuple3*)(( struct Cyc_List_List*)
! _check_null( _temp1108))->hd)).f2); Cyc_Toc_exp_to_c( nv, arg); if( Cyc_Toc_is_void_star(
  field_typ)){ arg= Cyc_Absyn_cast_exp( field_typ, arg, 0);} s= Cyc_Absyn_seq_stmt(
  Cyc_Absyn_assign_stmt( Cyc_Absyn_structmember_exp( varexp, Cyc_Absyn_fieldname(
  1), 0), arg, 0), s, 0); s= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_structmember_exp(
! varexp, Cyc_Toc_tag_sp, 0), Cyc_Absyn_var_exp( _temp1110, 0), 0), s, 0); s= Cyc_Absyn_declare_stmt(
! var, Cyc_Absyn_strctq( Cyc_Toc_collapse_qvar_tag( _temp1110, _tag_arr("_struct",
  sizeof( unsigned char), 8u))), 0, s, 0);}}}} else{{ int i= 0; for( 0; _temp927
  !=  0;( _temp927=(( struct Cyc_List_List*) _check_null( _temp927))->tl, ++ i)){
  Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*)
***************
*** 2164,2802 ****
  argvexp, Cyc_Absyn_uint_exp(( unsigned int) i, 0), 0),( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( _temp927))->hd, 0), s, 0);}} s= Cyc_Absyn_declare_stmt(
  argv, arr_type, 0, s, 0);}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp(
! s, 0))->r));}}; _pop_region( r);} goto _LL793; _LL819: Cyc_Toc_exp_to_c( nv,
  _temp931);( void*)( e->r=( void*)(( void*)( Cyc_Toc_array_to_ptr_cast( Cyc_Toc_typ_to_c(
! old_typ), Cyc_Toc_newthrow_exp( _temp931), 0))->r)); goto _LL793; _LL821: Cyc_Toc_exp_to_c(
! nv, _temp933); goto _LL793; _LL823: Cyc_Toc_exp_to_c( nv, _temp937); for( 0;
  _temp935 !=  0; _temp935=(( struct Cyc_List_List*) _check_null( _temp935))->tl){
  void* k= Cyc_Tcutil_typ_kind(( void*)(( struct Cyc_List_List*) _check_null(
  _temp935))->hd); if( k != ( void*) Cyc_Absyn_EffKind? k != ( void*) Cyc_Absyn_RgnKind:
! 0){{ void* _temp1124= Cyc_Tcutil_compress(( void*)(( struct Cyc_List_List*)
! _check_null( _temp935))->hd); _LL1126: if(( unsigned int) _temp1124 >  4u?*((
! int*) _temp1124) ==  Cyc_Absyn_VarType: 0){ goto _LL1127;} else{ goto _LL1128;}
! _LL1128: if(( unsigned int) _temp1124 >  4u?*(( int*) _temp1124) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL1129;} else{ goto _LL1130;} _LL1130: goto _LL1131; _LL1127:
! continue; _LL1129: continue; _LL1131:( void*)( e->r=( void*)(( void*)( Cyc_Toc_array_to_ptr_cast(
  Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v),
! _temp937, 0))->r)); goto _LL1125; _LL1125:;} break;}} goto _LL793; _LL825: {
  void* old_t2=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp939->topt))->v;
  void* new_typ=* _temp943;* _temp943= Cyc_Toc_typ_to_c( new_typ); Cyc_Toc_exp_to_c(
! nv, _temp939);{ struct _tuple8 _temp1133=({ struct _tuple8 _temp1132; _temp1132.f1=
! Cyc_Tcutil_compress( old_t2); _temp1132.f2= Cyc_Tcutil_compress( new_typ);
! _temp1132;}); void* _temp1141; struct Cyc_Absyn_PtrInfo _temp1143; void*
! _temp1145; struct Cyc_Absyn_PtrInfo _temp1147; void* _temp1149; void* _temp1151;
! struct Cyc_Absyn_PtrInfo _temp1153; _LL1135: _LL1146: _temp1145= _temp1133.f1;
! if(( unsigned int) _temp1145 >  4u?*(( int*) _temp1145) ==  Cyc_Absyn_PointerType:
! 0){ _LL1148: _temp1147=(( struct Cyc_Absyn_PointerType_struct*) _temp1145)->f1;
! goto _LL1142;} else{ goto _LL1137;} _LL1142: _temp1141= _temp1133.f2; if((
! unsigned int) _temp1141 >  4u?*(( int*) _temp1141) ==  Cyc_Absyn_PointerType: 0){
! _LL1144: _temp1143=(( struct Cyc_Absyn_PointerType_struct*) _temp1141)->f1; goto
! _LL1136;} else{ goto _LL1137;} _LL1137: _LL1152: _temp1151= _temp1133.f1; if((
! unsigned int) _temp1151 >  4u?*(( int*) _temp1151) ==  Cyc_Absyn_PointerType: 0){
! _LL1154: _temp1153=(( struct Cyc_Absyn_PointerType_struct*) _temp1151)->f1; goto
! _LL1150;} else{ goto _LL1139;} _LL1150: _temp1149= _temp1133.f2; if((
! unsigned int) _temp1149 >  4u?*(( int*) _temp1149) ==  Cyc_Absyn_IntType: 0){
! goto _LL1138;} else{ goto _LL1139;} _LL1139: goto _LL1140; _LL1136: { int
! _temp1155=(( int(*)( int, struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_def)( 0,
! _temp1147.nullable); int _temp1156=(( int(*)( int, struct Cyc_Absyn_Conref* x))
! Cyc_Absyn_conref_def)( 0, _temp1143.nullable); void* _temp1157= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1147.bounds); void* _temp1158= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1143.bounds);{ struct _tuple8 _temp1160=({ struct
! _tuple8 _temp1159; _temp1159.f1= _temp1157; _temp1159.f2= _temp1158; _temp1159;});
! void* _temp1170; void* _temp1172; void* _temp1174; void* _temp1176; struct Cyc_Absyn_Exp*
! _temp1178; void* _temp1180; struct Cyc_Absyn_Exp* _temp1182; void* _temp1184;
! _LL1162: _LL1173: _temp1172= _temp1160.f1; if(( unsigned int) _temp1172 >  1u?*((
! int*) _temp1172) ==  Cyc_Absyn_Upper_b: 0){ goto _LL1171;} else{ goto _LL1164;}
! _LL1171: _temp1170= _temp1160.f2; if(( unsigned int) _temp1170 >  1u?*(( int*)
! _temp1170) ==  Cyc_Absyn_Upper_b: 0){ goto _LL1163;} else{ goto _LL1164;}
! _LL1164: _LL1177: _temp1176= _temp1160.f1; if(( unsigned int) _temp1176 >  1u?*((
! int*) _temp1176) ==  Cyc_Absyn_Upper_b: 0){ _LL1179: _temp1178=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1176)->f1; goto _LL1175;} else{ goto _LL1166;} _LL1175: _temp1174=
! _temp1160.f2; if( _temp1174 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1165;}
! else{ goto _LL1166;} _LL1166: _LL1185: _temp1184= _temp1160.f1; if( _temp1184 == (
! void*) Cyc_Absyn_Unknown_b){ goto _LL1181;} else{ goto _LL1168;} _LL1181:
! _temp1180= _temp1160.f2; if(( unsigned int) _temp1180 >  1u?*(( int*) _temp1180)
! ==  Cyc_Absyn_Upper_b: 0){ _LL1183: _temp1182=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1180)->f1; goto _LL1167;} else{ goto _LL1168;} _LL1168: goto _LL1169;
! _LL1163: if( _temp1155? ! _temp1156: 0){ if( nv->toplevel){({ void* _temp1186[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("can't do NULL-check conversion at top-level",
! sizeof( unsigned char), 44u), _tag_arr( _temp1186, sizeof( void*), 0u));});}(
  void*)( e->r=( void*)(( void*)( Cyc_Absyn_cast_exp(* _temp943, Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_null_e,({ struct Cyc_List_List* _temp1187=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1187->hd=( void*) _temp939;
! _temp1187->tl= 0; _temp1187;}), 0), 0))->r));} goto _LL1161; _LL1165: if( nv->toplevel){(
  void*)( e->r=( void*)(( void*)( Cyc_Toc_make_toplevel_tagged_arr( old_t2,
! _temp1178, _temp939))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp* _temp1188[ 3u]; _temp1188[ 2u]=
! _temp1178; _temp1188[ 1u]= Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c(( void*)
! _temp1143.elt_typ), 0); _temp1188[ 0u]= _temp939;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1188, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0))->r));} goto _LL1161; _LL1167: if( nv->toplevel){({ void* _temp1189[
  0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)(
  _tag_arr("can't coerce t? to t* or t@ at the top-level", sizeof( unsigned char),
! 45u), _tag_arr( _temp1189, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Exp*
! _temp1190= Cyc_Absyn_fncall_exp( Cyc_Toc__untag_arr_e,({ struct Cyc_Absyn_Exp*
! _temp1192[ 3u]; _temp1192[ 2u]= _temp1182; _temp1192[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! Cyc_Toc_typ_to_c(( void*) _temp1147.elt_typ), 0); _temp1192[ 0u]= _temp939;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1192, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0); if( _temp1156){( void*)(
! _temp1190->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__check_null_e,({
! struct Cyc_List_List* _temp1191=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1191->hd=( void*) Cyc_Absyn_copy_exp( _temp1190);
! _temp1191->tl= 0; _temp1191;}), 0))->r));}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_cast_exp(*
! _temp943, _temp1190, 0))->r)); goto _LL1161;} _LL1169: goto _LL1161; _LL1161:;}
! goto _LL1134;} _LL1138:{ void* _temp1193= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one,
! _temp1153.bounds); _LL1195: if( _temp1193 == ( void*) Cyc_Absyn_Unknown_b){ goto
! _LL1196;} else{ goto _LL1197;} _LL1197: goto _LL1198; _LL1196:( void*)( _temp939->r=(
  void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp(( void*) _temp939->r,
! _temp939->loc), Cyc_Toc_curr_sp, 0))->r)); goto _LL1194; _LL1198: goto _LL1194;
! _LL1194:;} goto _LL1134; _LL1140: goto _LL1134; _LL1134:;} goto _LL793;} _LL827:{
! void* _temp1199=( void*) _temp944->r; struct Cyc_List_List* _temp1207; struct
! _tuple0* _temp1209; struct Cyc_List_List* _temp1211; _LL1201: if(*(( int*)
! _temp1199) ==  Cyc_Absyn_Struct_e){ _LL1210: _temp1209=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1199)->f1; goto _LL1208; _LL1208: _temp1207=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1199)->f3; goto _LL1202;} else{ goto _LL1203;} _LL1203: if(*(( int*)
! _temp1199) ==  Cyc_Absyn_Tuple_e){ _LL1212: _temp1211=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp1199)->f1; goto _LL1204;} else{ goto _LL1205;} _LL1205: goto _LL1206;
! _LL1202: if( nv->toplevel){({ struct Cyc_Std_String_pa_struct _temp1214;
! _temp1214.tag= Cyc_Std_String_pa; _temp1214.f1=( struct _tagged_arr) Cyc_Position_string_of_segment(
! _temp944->loc);{ void* _temp1213[ 1u]={& _temp1214};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("%s: & on non-identifiers at the top-level",
! sizeof( unsigned char), 42u), _tag_arr( _temp1213, sizeof( void*), 1u));}});}(
  void*)( e->r=( void*)(( void*)( Cyc_Toc_init_struct( nv,( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp944->topt))->v, 1, 0, _temp1207, _temp1209))->r)); goto
! _LL1200; _LL1204: if( nv->toplevel){({ struct Cyc_Std_String_pa_struct _temp1216;
! _temp1216.tag= Cyc_Std_String_pa; _temp1216.f1=( struct _tagged_arr) Cyc_Position_string_of_segment(
! _temp944->loc);{ void* _temp1215[ 1u]={& _temp1216};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("%s: & on non-identifiers at the top-level",
! sizeof( unsigned char), 42u), _tag_arr( _temp1215, sizeof( void*), 1u));}});}(
! void*)( e->r=( void*)(( void*)( Cyc_Toc_init_tuple( nv, 1, 0, _temp1211))->r));
! goto _LL1200; _LL1206: Cyc_Toc_exp_to_c( nv, _temp944); if( ! Cyc_Absyn_is_lvalue(
  _temp944)){(( void(*)( struct Cyc_Absyn_Exp* e1, struct Cyc_List_List* fs,
  struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*, int), int f_env)) Cyc_Toc_lvalue_assign)(
  _temp944, 0, Cyc_Toc_address_lvalue, 1);( void*)( e->r=( void*)(( void*)( Cyc_Absyn_cast_exp(
  Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v),
! _temp944, 0))->r));} goto _LL1200; _LL1200:;} goto _LL793; _LL829: if( nv->toplevel){({
! struct Cyc_Std_String_pa_struct _temp1218; _temp1218.tag= Cyc_Std_String_pa;
! _temp1218.f1=( struct _tagged_arr) Cyc_Position_string_of_segment( _temp946->loc);{
! void* _temp1217[ 1u]={& _temp1218};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("%s: new at top-level", sizeof(
! unsigned char), 21u), _tag_arr( _temp1217, sizeof( void*), 1u));}});}{ void*
! _temp1219=( void*) _temp946->r; struct Cyc_List_List* _temp1231; struct Cyc_Absyn_Exp*
! _temp1233; struct Cyc_Absyn_Exp* _temp1235; struct Cyc_Absyn_Vardecl* _temp1237;
! struct Cyc_List_List* _temp1239; struct _tuple0* _temp1241; struct Cyc_List_List*
! _temp1243; _LL1221: if(*(( int*) _temp1219) ==  Cyc_Absyn_Array_e){ _LL1232:
! _temp1231=(( struct Cyc_Absyn_Array_e_struct*) _temp1219)->f1; goto _LL1222;}
! else{ goto _LL1223;} _LL1223: if(*(( int*) _temp1219) ==  Cyc_Absyn_Comprehension_e){
! _LL1238: _temp1237=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp1219)->f1;
! goto _LL1236; _LL1236: _temp1235=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1219)->f2; goto _LL1234; _LL1234: _temp1233=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1219)->f3; goto _LL1224;} else{ goto _LL1225;} _LL1225: if(*(( int*)
! _temp1219) ==  Cyc_Absyn_Struct_e){ _LL1242: _temp1241=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1219)->f1; goto _LL1240; _LL1240: _temp1239=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1219)->f3; goto _LL1226;} else{ goto _LL1227;} _LL1227: if(*(( int*)
! _temp1219) ==  Cyc_Absyn_Tuple_e){ _LL1244: _temp1243=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp1219)->f1; goto _LL1228;} else{ goto _LL1229;} _LL1229: goto _LL1230;
! _LL1222: { struct _tuple0* _temp1245= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp*
! _temp1246= Cyc_Absyn_var_exp( _temp1245, 0); struct Cyc_Absyn_Stmt* _temp1247=
! Cyc_Toc_init_array( nv, _temp1246, _temp1231, Cyc_Absyn_exp_stmt( _temp1246, 0));
! void* old_elt_typ;{ void* _temp1248= Cyc_Tcutil_compress( old_typ); struct Cyc_Absyn_PtrInfo
! _temp1254; struct Cyc_Absyn_Tqual _temp1256; void* _temp1258; _LL1250: if((
! unsigned int) _temp1248 >  4u?*(( int*) _temp1248) ==  Cyc_Absyn_PointerType: 0){
! _LL1255: _temp1254=(( struct Cyc_Absyn_PointerType_struct*) _temp1248)->f1;
! _LL1259: _temp1258=( void*) _temp1254.elt_typ; goto _LL1257; _LL1257: _temp1256=
! _temp1254.tq; goto _LL1251;} else{ goto _LL1252;} _LL1252: goto _LL1253; _LL1251:
! old_elt_typ= _temp1258; goto _LL1249; _LL1253: old_elt_typ=({ void* _temp1260[ 0u]={};
  Cyc_Toc_toc_impos( _tag_arr("exp_to_c:new array expression doesn't have ptr type",
! sizeof( unsigned char), 52u), _tag_arr( _temp1260, sizeof( void*), 0u));}); goto
! _LL1249; _LL1249:;}{ void* elt_typ= Cyc_Toc_typ_to_c( old_elt_typ); void*
! _temp1261= Cyc_Absyn_cstar_typ( elt_typ, Cyc_Toc_mt_tq); struct Cyc_Absyn_Exp*
! _temp1262= Cyc_Absyn_times_exp( Cyc_Absyn_sizeoftyp_exp( elt_typ, 0), Cyc_Absyn_signed_int_exp(((
! int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp1231), 0), 0); struct
  Cyc_Absyn_Exp* e1; if( _temp948 ==  0){ e1= Cyc_Toc_malloc_exp( old_elt_typ,
! _temp1262);} else{ struct Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*) _check_null(
! _temp948); Cyc_Toc_exp_to_c( nv, r); e1= Cyc_Toc_rmalloc_exp( r, _temp1262);}{
! struct Cyc_Absyn_Exp* _temp1263= Cyc_Absyn_cast_exp( _temp1261, e1, 0);( void*)(
! e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt( _temp1245,
! _temp1261,( struct Cyc_Absyn_Exp*) _temp1263, _temp1247, 0), 0))->r)); goto
! _LL1220;}}} _LL1224: { int is_tagged_ptr= 0;{ void* _temp1264= Cyc_Tcutil_compress(
! old_typ); struct Cyc_Absyn_PtrInfo _temp1270; struct Cyc_Absyn_Conref* _temp1272;
! struct Cyc_Absyn_Tqual _temp1274; void* _temp1276; _LL1266: if(( unsigned int)
! _temp1264 >  4u?*(( int*) _temp1264) ==  Cyc_Absyn_PointerType: 0){ _LL1271:
! _temp1270=(( struct Cyc_Absyn_PointerType_struct*) _temp1264)->f1; _LL1277:
! _temp1276=( void*) _temp1270.elt_typ; goto _LL1275; _LL1275: _temp1274=
! _temp1270.tq; goto _LL1273; _LL1273: _temp1272= _temp1270.bounds; goto _LL1267;}
! else{ goto _LL1268;} _LL1268: goto _LL1269; _LL1267: is_tagged_ptr= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1272) == ( void*) Cyc_Absyn_Unknown_b; goto _LL1265;
! _LL1269:({ void* _temp1278[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("exp_to_c: comprehension not an array type",
! sizeof( unsigned char), 42u), _tag_arr( _temp1278, sizeof( void*), 0u));}); goto
! _LL1265; _LL1265:;}{ struct _tuple0* max= Cyc_Toc_temp_var(); struct _tuple0* a=
  Cyc_Toc_temp_var(); void* old_elt_typ=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1233->topt))->v; void* elt_typ= Cyc_Toc_typ_to_c( old_elt_typ);
  void* ptr_typ= Cyc_Absyn_cstar_typ( elt_typ, Cyc_Toc_mt_tq); Cyc_Toc_exp_to_c(
! nv, _temp1235);{ struct Cyc_Absyn_Stmt* s= Cyc_Toc_init_comprehension( nv, Cyc_Absyn_var_exp(
! a, 0), _temp1237, Cyc_Absyn_var_exp( max, 0), _temp1233, Cyc_Absyn_skip_stmt( 0),
! 1);{ struct _RegionHandle _temp1279= _new_region(); struct _RegionHandle* r=&
! _temp1279; _push_region( r);{ struct Cyc_List_List* decls=({ struct Cyc_List_List*
! _temp1299=( struct Cyc_List_List*) _region_malloc( r, sizeof( struct Cyc_List_List));
! _temp1299->hd=( void*)({ struct _tuple9* _temp1300=( struct _tuple9*)
! _region_malloc( r, sizeof( struct _tuple9)); _temp1300->f1= max; _temp1300->f2=
! Cyc_Absyn_uint_t; _temp1300->f3=( struct Cyc_Absyn_Exp*) _temp1235; _temp1300;});
! _temp1299->tl= 0; _temp1299;}); struct Cyc_Absyn_Exp* ai; if( _temp948 ==  0){
  ai= Cyc_Toc_malloc_exp( old_elt_typ, Cyc_Absyn_fncall_exp( Cyc_Toc__check_times_e,({
! struct Cyc_Absyn_Exp* _temp1280[ 2u]; _temp1280[ 1u]= Cyc_Absyn_var_exp( max, 0);
! _temp1280[ 0u]= Cyc_Absyn_sizeoftyp_exp( elt_typ, 0);(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1280, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), 0));} else{ struct Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*)
  _check_null( _temp948); Cyc_Toc_exp_to_c( nv, r); ai= Cyc_Toc_rmalloc_exp( r,
! Cyc_Absyn_fncall_exp( Cyc_Toc__check_times_e,({ struct Cyc_Absyn_Exp* _temp1281[
! 2u]; _temp1281[ 1u]= Cyc_Absyn_var_exp( max, 0); _temp1281[ 0u]= Cyc_Absyn_sizeoftyp_exp(
  elt_typ, 0);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1281, sizeof( struct Cyc_Absyn_Exp*), 2u));}), 0));}{ struct Cyc_Absyn_Exp*
  ainit= Cyc_Absyn_cast_exp( ptr_typ, ai, 0); decls=({ struct Cyc_List_List*
! _temp1282=( struct Cyc_List_List*) _region_malloc( r, sizeof( struct Cyc_List_List));
! _temp1282->hd=( void*)({ struct _tuple9* _temp1283=( struct _tuple9*)
! _region_malloc( r, sizeof( struct _tuple9)); _temp1283->f1= a; _temp1283->f2=
! ptr_typ; _temp1283->f3=( struct Cyc_Absyn_Exp*) ainit; _temp1283;}); _temp1282->tl=
! decls; _temp1282;}); if( is_tagged_ptr){ struct _tuple0* _temp1284= Cyc_Toc_temp_var();
! void* _temp1285= Cyc_Toc_typ_to_c( old_typ); struct Cyc_Absyn_Exp* _temp1286=
! Cyc_Absyn_fncall_exp( Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp* _temp1289[ 3u];
! _temp1289[ 2u]= _temp1235; _temp1289[ 1u]= Cyc_Absyn_sizeoftyp_exp( elt_typ, 0);
! _temp1289[ 0u]= Cyc_Absyn_var_exp( a, 0);(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1289, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0); decls=({ struct Cyc_List_List* _temp1287=( struct Cyc_List_List*)
! _region_malloc( r, sizeof( struct Cyc_List_List)); _temp1287->hd=( void*)({
! struct _tuple9* _temp1288=( struct _tuple9*) _region_malloc( r, sizeof( struct
! _tuple9)); _temp1288->f1= _temp1284; _temp1288->f2= _temp1285; _temp1288->f3=(
! struct Cyc_Absyn_Exp*) _temp1286; _temp1288;}); _temp1287->tl= decls; _temp1287;});
! s= Cyc_Absyn_seq_stmt( s, Cyc_Absyn_exp_stmt( Cyc_Absyn_var_exp( _temp1284, 0),
  0), 0);} else{ s= Cyc_Absyn_seq_stmt( s, Cyc_Absyn_exp_stmt( Cyc_Absyn_var_exp(
! a, 0), 0), 0);}{ struct Cyc_List_List* _temp1290= decls; for( 0; _temp1290 !=  0;
! _temp1290=(( struct Cyc_List_List*) _check_null( _temp1290))->tl){ struct Cyc_Absyn_Exp*
! _temp1293; void* _temp1295; struct _tuple0* _temp1297; struct _tuple9 _temp1291=*((
! struct _tuple9*)(( struct Cyc_List_List*) _check_null( _temp1290))->hd); _LL1298:
! _temp1297= _temp1291.f1; goto _LL1296; _LL1296: _temp1295= _temp1291.f2; goto
! _LL1294; _LL1294: _temp1293= _temp1291.f3; goto _LL1292; _LL1292: s= Cyc_Absyn_declare_stmt(
! _temp1297, _temp1295, _temp1293, s, 0);}}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp(
! s, 0))->r));}}; _pop_region( r);} goto _LL1220;}}} _LL1226:( void*)( e->r=( void*)((
  void*)( Cyc_Toc_init_struct( nv,( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp946->topt))->v, 1, _temp948, _temp1239, _temp1241))->r)); goto _LL1220;
! _LL1228:( void*)( e->r=( void*)(( void*)( Cyc_Toc_init_tuple( nv, 1, _temp948,
! _temp1243))->r)); goto _LL1220; _LL1230: { void* old_elt_typ=( void*)(( struct
  Cyc_Core_Opt*) _check_null( _temp946->topt))->v; void* elt_typ= Cyc_Toc_typ_to_c(
  old_elt_typ); struct Cyc_Absyn_Exp* mexp= Cyc_Absyn_sizeoftyp_exp( elt_typ, 0);
  if( _temp948 ==  0){ mexp= Cyc_Toc_malloc_exp( old_elt_typ, mexp);} else{ struct
  Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*) _check_null( _temp948); Cyc_Toc_exp_to_c(
  nv, r); mexp= Cyc_Toc_rmalloc_exp( r, mexp);} mexp= Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ(
! elt_typ, Cyc_Toc_mt_tq), mexp, 0);{ int done= 0;{ void* _temp1301=( void*)
! _temp946->r; struct Cyc_Absyn_Exp* _temp1307; void* _temp1309; _LL1303: if(*((
! int*) _temp1301) ==  Cyc_Absyn_Cast_e){ _LL1310: _temp1309=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1301)->f1; goto _LL1308; _LL1308: _temp1307=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1301)->f2; goto _LL1304;} else{ goto _LL1305;} _LL1305: goto _LL1306;
! _LL1304:{ struct _tuple8 _temp1312=({ struct _tuple8 _temp1311; _temp1311.f1=
! Cyc_Tcutil_compress( _temp1309); _temp1311.f2= Cyc_Tcutil_compress(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1307->topt))->v); _temp1311;}); void*
! _temp1318; struct Cyc_Absyn_PtrInfo _temp1320; struct Cyc_Absyn_Conref*
! _temp1322; void* _temp1324; struct Cyc_Absyn_PtrInfo _temp1326; struct Cyc_Absyn_Conref*
! _temp1328; void* _temp1330; _LL1314: _LL1325: _temp1324= _temp1312.f1; if((
! unsigned int) _temp1324 >  4u?*(( int*) _temp1324) ==  Cyc_Absyn_PointerType: 0){
! _LL1327: _temp1326=(( struct Cyc_Absyn_PointerType_struct*) _temp1324)->f1;
! _LL1331: _temp1330=( void*) _temp1326.elt_typ; goto _LL1329; _LL1329: _temp1328=
! _temp1326.bounds; goto _LL1319;} else{ goto _LL1316;} _LL1319: _temp1318=
! _temp1312.f2; if(( unsigned int) _temp1318 >  4u?*(( int*) _temp1318) ==  Cyc_Absyn_PointerType:
! 0){ _LL1321: _temp1320=(( struct Cyc_Absyn_PointerType_struct*) _temp1318)->f1;
! _LL1323: _temp1322= _temp1320.bounds; goto _LL1315;} else{ goto _LL1316;}
! _LL1316: goto _LL1317; _LL1315:{ struct _tuple8 _temp1333=({ struct _tuple8
! _temp1332; _temp1332.f1= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one, _temp1328);
! _temp1332.f2= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one, _temp1322); _temp1332;});
! void* _temp1339; struct Cyc_Absyn_Exp* _temp1341; void* _temp1343; _LL1335:
! _LL1344: _temp1343= _temp1333.f1; if( _temp1343 == ( void*) Cyc_Absyn_Unknown_b){
! goto _LL1340;} else{ goto _LL1337;} _LL1340: _temp1339= _temp1333.f2; if((
! unsigned int) _temp1339 >  1u?*(( int*) _temp1339) ==  Cyc_Absyn_Upper_b: 0){
! _LL1342: _temp1341=(( struct Cyc_Absyn_Upper_b_struct*) _temp1339)->f1; goto
! _LL1336;} else{ goto _LL1337;} _LL1337: goto _LL1338; _LL1336: done= 1;( void*)(
  e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__init_tag_arr_e,({ struct
! Cyc_Absyn_Exp* _temp1345[ 4u]; _temp1345[ 3u]= _temp1341; _temp1345[ 2u]= Cyc_Absyn_sizeoftyp_exp(
! _temp1330, 0); _temp1345[ 1u]= _temp1307; _temp1345[ 0u]= mexp;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1345, sizeof( struct Cyc_Absyn_Exp*),
! 4u));}), 0))->r)); goto _LL1334; _LL1338: goto _LL1334; _LL1334:;} goto _LL1313;
! _LL1317: goto _LL1313; _LL1313:;} goto _LL1302; _LL1306: goto _LL1302; _LL1302:;}
! if( ! done){ struct _tuple0* _temp1346= Cyc_Toc_temp_var(); struct Cyc_Absyn_Stmt*
! _temp1347= Cyc_Absyn_exp_stmt( Cyc_Absyn_var_exp( _temp1346, 0), 0); struct Cyc_Absyn_Exp*
! _temp1348= Cyc_Absyn_signed_int_exp( 0, 0); Cyc_Toc_exp_to_c( nv, _temp946);
! _temp1347= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_subscript_exp(
! Cyc_Absyn_var_exp( _temp1346, 0), _temp1348, 0), _temp946, 0), _temp1347, 0);{
! void* _temp1349= Cyc_Absyn_cstar_typ( elt_typ, Cyc_Toc_mt_tq);( void*)( e->r=(
! void*)(( void*)( Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt( _temp1346,
! _temp1349,( struct Cyc_Absyn_Exp*) mexp, _temp1347, 0), 0))->r));}} goto _LL1220;}}
! _LL1220:;} goto _LL793; _LL831: Cyc_Toc_exp_to_c( nv, _temp950); goto _LL793;
! _LL833:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Sizeoftyp_e_struct*
! _temp1350=( struct Cyc_Absyn_Sizeoftyp_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Sizeoftyp_e_struct));
! _temp1350[ 0]=({ struct Cyc_Absyn_Sizeoftyp_e_struct _temp1351; _temp1351.tag=
! Cyc_Absyn_Sizeoftyp_e; _temp1351.f1=( void*) Cyc_Toc_typ_to_c_array( _temp952);
! _temp1351;}); _temp1350;}))); goto _LL793; _LL835:( int) _throw(({ void*
! _temp1352[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("__gen() in code generator",
! sizeof( unsigned char), 26u), _tag_arr( _temp1352, sizeof( void*), 0u));}));
! _LL837:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Offsetof_e_struct*
! _temp1353=( struct Cyc_Absyn_Offsetof_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct));
! _temp1353[ 0]=({ struct Cyc_Absyn_Offsetof_e_struct _temp1354; _temp1354.tag=
! Cyc_Absyn_Offsetof_e; _temp1354.f1=( void*) Cyc_Toc_typ_to_c_array( _temp958);
! _temp1354.f2=( void*)(( void*)({ struct Cyc_Absyn_StructField_struct* _temp1355=(
! struct Cyc_Absyn_StructField_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructField_struct));
! _temp1355[ 0]=({ struct Cyc_Absyn_StructField_struct _temp1356; _temp1356.tag=
! Cyc_Absyn_StructField; _temp1356.f1= _temp956; _temp1356;}); _temp1355;}));
! _temp1354;}); _temp1353;}))); goto _LL793; _LL839:{ void* _temp1357= Cyc_Tcutil_compress(
! _temp964); struct Cyc_Absyn_Structdecl** _temp1373; struct Cyc_List_List*
! _temp1375; struct Cyc_Absyn_Uniondecl** _temp1377; struct Cyc_List_List*
! _temp1379; _LL1359: if(( unsigned int) _temp1357 >  4u?*(( int*) _temp1357) == 
! Cyc_Absyn_StructType: 0){ _LL1374: _temp1373=(( struct Cyc_Absyn_StructType_struct*)
! _temp1357)->f3; goto _LL1360;} else{ goto _LL1361;} _LL1361: if(( unsigned int)
! _temp1357 >  4u?*(( int*) _temp1357) ==  Cyc_Absyn_AnonStructType: 0){ _LL1376:
! _temp1375=(( struct Cyc_Absyn_AnonStructType_struct*) _temp1357)->f1; goto
! _LL1362;} else{ goto _LL1363;} _LL1363: if(( unsigned int) _temp1357 >  4u?*((
! int*) _temp1357) ==  Cyc_Absyn_UnionType: 0){ _LL1378: _temp1377=(( struct Cyc_Absyn_UnionType_struct*)
! _temp1357)->f3; goto _LL1364;} else{ goto _LL1365;} _LL1365: if(( unsigned int)
! _temp1357 >  4u?*(( int*) _temp1357) ==  Cyc_Absyn_AnonUnionType: 0){ _LL1380:
! _temp1379=(( struct Cyc_Absyn_AnonUnionType_struct*) _temp1357)->f1; goto
! _LL1366;} else{ goto _LL1367;} _LL1367: if(( unsigned int) _temp1357 >  4u?*((
! int*) _temp1357) ==  Cyc_Absyn_TupleType: 0){ goto _LL1368;} else{ goto _LL1369;}
! _LL1369: if(( unsigned int) _temp1357 >  4u?*(( int*) _temp1357) ==  Cyc_Absyn_TunionFieldType:
! 0){ goto _LL1370;} else{ goto _LL1371;} _LL1371: goto _LL1372; _LL1360: if(
! _temp1373 ==  0? 1:(*(( struct Cyc_Absyn_Structdecl**) _check_null( _temp1373)))->fields
! ==  0){( int) _throw(({ void* _temp1381[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("struct fields must be known",
! sizeof( unsigned char), 28u), _tag_arr( _temp1381, sizeof( void*), 0u));}));}
! _temp1375=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null((*((
! struct Cyc_Absyn_Structdecl**) _check_null( _temp1373)))->fields))->v; goto
! _LL1362; _LL1362: { struct Cyc_Absyn_Structfield* _temp1382=(( struct Cyc_Absyn_Structfield*(*)(
! struct Cyc_List_List* x, int n)) Cyc_List_nth)( _temp1375,( int) _temp962);(
! void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Offsetof_e_struct* _temp1383=(
! struct Cyc_Absyn_Offsetof_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct));
! _temp1383[ 0]=({ struct Cyc_Absyn_Offsetof_e_struct _temp1384; _temp1384.tag=
! Cyc_Absyn_Offsetof_e; _temp1384.f1=( void*) Cyc_Toc_typ_to_c_array( _temp964);
! _temp1384.f2=( void*)(( void*)({ struct Cyc_Absyn_StructField_struct* _temp1385=(
! struct Cyc_Absyn_StructField_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructField_struct));
! _temp1385[ 0]=({ struct Cyc_Absyn_StructField_struct _temp1386; _temp1386.tag=
! Cyc_Absyn_StructField; _temp1386.f1= _temp1382->name; _temp1386;}); _temp1385;}));
! _temp1384;}); _temp1383;}))); goto _LL1358;} _LL1364: if( _temp1377 ==  0? 1:(*((
! struct Cyc_Absyn_Uniondecl**) _check_null( _temp1377)))->fields ==  0){( int)
! _throw(({ void* _temp1387[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("union fields must be known",
! sizeof( unsigned char), 27u), _tag_arr( _temp1387, sizeof( void*), 0u));}));}
! _temp1379=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null((*((
! struct Cyc_Absyn_Uniondecl**) _check_null( _temp1377)))->fields))->v; goto
! _LL1366; _LL1366: { struct Cyc_Absyn_Structfield* _temp1388=(( struct Cyc_Absyn_Structfield*(*)(
! struct Cyc_List_List* x, int n)) Cyc_List_nth)( _temp1379,( int) _temp962);(
! void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Offsetof_e_struct* _temp1389=(
! struct Cyc_Absyn_Offsetof_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct));
! _temp1389[ 0]=({ struct Cyc_Absyn_Offsetof_e_struct _temp1390; _temp1390.tag=
! Cyc_Absyn_Offsetof_e; _temp1390.f1=( void*) Cyc_Toc_typ_to_c_array( _temp964);
! _temp1390.f2=( void*)(( void*)({ struct Cyc_Absyn_StructField_struct* _temp1391=(
! struct Cyc_Absyn_StructField_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructField_struct));
! _temp1391[ 0]=({ struct Cyc_Absyn_StructField_struct _temp1392; _temp1392.tag=
! Cyc_Absyn_StructField; _temp1392.f1= _temp1388->name; _temp1392;}); _temp1391;}));
! _temp1390;}); _temp1389;}))); goto _LL1358;} _LL1368:( void*)( e->r=( void*)((
! void*)({ struct Cyc_Absyn_Offsetof_e_struct* _temp1393=( struct Cyc_Absyn_Offsetof_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct)); _temp1393[ 0]=({ struct
! Cyc_Absyn_Offsetof_e_struct _temp1394; _temp1394.tag= Cyc_Absyn_Offsetof_e;
! _temp1394.f1=( void*) Cyc_Toc_typ_to_c_array( _temp964); _temp1394.f2=( void*)((
! void*)({ struct Cyc_Absyn_StructField_struct* _temp1395=( struct Cyc_Absyn_StructField_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructField_struct)); _temp1395[ 0]=({
! struct Cyc_Absyn_StructField_struct _temp1396; _temp1396.tag= Cyc_Absyn_StructField;
! _temp1396.f1= Cyc_Absyn_fieldname(( int)( _temp962 +  1)); _temp1396;});
! _temp1395;})); _temp1394;}); _temp1393;}))); goto _LL1358; _LL1370: if( _temp962
! ==  0){( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Offsetof_e_struct*
! _temp1397=( struct Cyc_Absyn_Offsetof_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct));
! _temp1397[ 0]=({ struct Cyc_Absyn_Offsetof_e_struct _temp1398; _temp1398.tag=
! Cyc_Absyn_Offsetof_e; _temp1398.f1=( void*) Cyc_Toc_typ_to_c_array( _temp964);
! _temp1398.f2=( void*)(( void*)({ struct Cyc_Absyn_StructField_struct* _temp1399=(
! struct Cyc_Absyn_StructField_struct*) _cycalloc( sizeof( struct Cyc_Absyn_StructField_struct));
! _temp1399[ 0]=({ struct Cyc_Absyn_StructField_struct _temp1400; _temp1400.tag=
! Cyc_Absyn_StructField; _temp1400.f1= Cyc_Toc_tag_sp; _temp1400;}); _temp1399;}));
! _temp1398;}); _temp1397;})));} else{( void*)( e->r=( void*)(( void*)({ struct
! Cyc_Absyn_Offsetof_e_struct* _temp1401=( struct Cyc_Absyn_Offsetof_e_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct)); _temp1401[ 0]=({ struct
! Cyc_Absyn_Offsetof_e_struct _temp1402; _temp1402.tag= Cyc_Absyn_Offsetof_e;
! _temp1402.f1=( void*) Cyc_Toc_typ_to_c_array( _temp964); _temp1402.f2=( void*)((
! void*)({ struct Cyc_Absyn_StructField_struct* _temp1403=( struct Cyc_Absyn_StructField_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_StructField_struct)); _temp1403[ 0]=({
! struct Cyc_Absyn_StructField_struct _temp1404; _temp1404.tag= Cyc_Absyn_StructField;
! _temp1404.f1= Cyc_Absyn_fieldname(( int) _temp962); _temp1404;}); _temp1403;}));
! _temp1402;}); _temp1401;})));} goto _LL1358; _LL1372:( int) _throw(({ void*
! _temp1405[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("impossible type for offsetof tuple index",
! sizeof( unsigned char), 41u), _tag_arr( _temp1405, sizeof( void*), 0u));}));
! _LL1358:;} goto _LL793; _LL841: { void* _temp1406= Cyc_Tcutil_compress(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp966->topt))->v);{ void* _temp1407=
! _temp1406; struct Cyc_Absyn_PtrInfo _temp1413; struct Cyc_Absyn_Conref*
! _temp1415; struct Cyc_Absyn_Tqual _temp1417; struct Cyc_Absyn_Conref* _temp1419;
! void* _temp1421; void* _temp1423; _LL1409: if(( unsigned int) _temp1407 >  4u?*((
! int*) _temp1407) ==  Cyc_Absyn_PointerType: 0){ _LL1414: _temp1413=(( struct Cyc_Absyn_PointerType_struct*)
! _temp1407)->f1; _LL1424: _temp1423=( void*) _temp1413.elt_typ; goto _LL1422;
! _LL1422: _temp1421=( void*) _temp1413.rgn_typ; goto _LL1420; _LL1420: _temp1419=
! _temp1413.nullable; goto _LL1418; _LL1418: _temp1417= _temp1413.tq; goto _LL1416;
! _LL1416: _temp1415= _temp1413.bounds; goto _LL1410;} else{ goto _LL1411;}
! _LL1411: goto _LL1412; _LL1410:{ void* _temp1425= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one,
! _temp1415); _LL1427: if(( unsigned int) _temp1425 >  1u?*(( int*) _temp1425) == 
! Cyc_Absyn_Upper_b: 0){ goto _LL1428;} else{ goto _LL1429;} _LL1429: if(
! _temp1425 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1430;} else{ goto _LL1426;}
! _LL1428: Cyc_Toc_exp_to_c( nv, _temp966); if( Cyc_Toc_is_nullable( _temp1406)){(
! void*)( e->r=( void*)(( void*)( Cyc_Absyn_deref_exp( Cyc_Absyn_cast_exp( Cyc_Toc_typ_to_c((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp966->topt))->v), Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_null_e,({ struct Cyc_List_List* _temp1431=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1431->hd=( void*) _temp966;
! _temp1431->tl= 0; _temp1431;}), 0), 0), 0))->r));} goto _LL1426; _LL1430: {
! struct Cyc_Absyn_Exp* _temp1432= Cyc_Absyn_uint_exp( 0, 0); _temp1432->topt=({
! struct Cyc_Core_Opt* _temp1433=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1433->v=( void*) Cyc_Absyn_uint_t; _temp1433;});( void*)( e->r=(
! void*)(( void*)( Cyc_Absyn_subscript_exp( _temp966, _temp1432, 0))->r)); Cyc_Toc_exp_to_c(
! nv, e); goto _LL1426;} _LL1426:;} goto _LL1408; _LL1412:({ void* _temp1434[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("exp_to_c: Deref: non-pointer", sizeof( unsigned char), 29u), _tag_arr(
! _temp1434, sizeof( void*), 0u));}); goto _LL1408; _LL1408:;} goto _LL793;}
! _LL843: Cyc_Toc_exp_to_c( nv, _temp970); if( Cyc_Toc_is_poly_project( e)){( void*)(
  e->r=( void*)(( void*)( Cyc_Toc_array_to_ptr_cast( Cyc_Toc_typ_to_c(( void*)((
  struct Cyc_Core_Opt*) _check_null( e->topt))->v), Cyc_Absyn_new_exp(( void*) e->r,
! 0), 0))->r));} goto _LL793; _LL845: { void* e1typ= Cyc_Tcutil_compress(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp974->topt))->v); Cyc_Toc_exp_to_c( nv,
! _temp974);{ int is_poly= Cyc_Toc_is_poly_project( e); struct Cyc_Absyn_Conref*
! _temp1437; struct Cyc_Absyn_Tqual _temp1439; struct Cyc_Absyn_Conref* _temp1441;
! void* _temp1443; void* _temp1445; struct Cyc_Absyn_PtrInfo _temp1435= Cyc_Toc_get_ptr_type(
! e1typ); _LL1446: _temp1445=( void*) _temp1435.elt_typ; goto _LL1444; _LL1444:
! _temp1443=( void*) _temp1435.rgn_typ; goto _LL1442; _LL1442: _temp1441=
! _temp1435.nullable; goto _LL1440; _LL1440: _temp1439= _temp1435.tq; goto _LL1438;
! _LL1438: _temp1437= _temp1435.bounds; goto _LL1436; _LL1436:{ void* _temp1447=
! Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one, _temp1437); struct Cyc_Absyn_Exp*
! _temp1453; _LL1449: if(( unsigned int) _temp1447 >  1u?*(( int*) _temp1447) == 
! Cyc_Absyn_Upper_b: 0){ _LL1454: _temp1453=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1447)->f1; goto _LL1450;} else{ goto _LL1451;} _LL1451: if( _temp1447 == (
! void*) Cyc_Absyn_Unknown_b){ goto _LL1452;} else{ goto _LL1448;} _LL1450: if(
! Cyc_Evexp_eval_const_uint_exp( _temp1453) <  1){({ void* _temp1455[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("exp_to_c:  StructArrow_e on pointer of size 0", sizeof( unsigned char),
! 46u), _tag_arr( _temp1455, sizeof( void*), 0u));});}{ int possibly_null=(( int(*)(
! int, struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_def)( 0, _temp1441); if( Cyc_Toc_is_nullable((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp974->topt))->v)){( void*)( e->r=(
  void*)(( void*)( Cyc_Absyn_structarrow_exp( Cyc_Absyn_cast_exp( Cyc_Toc_typ_to_c((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp974->topt))->v), Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_null_e,({ struct Cyc_List_List* _temp1456=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1456->hd=( void*) _temp974;
! _temp1456->tl= 0; _temp1456;}), 0), 0), _temp972, 0))->r));} goto _LL1448;}
! _LL1452: { void* ta1= Cyc_Toc_typ_to_c_array( _temp1445);( void*)( _temp974->r=(
! void*)(( void*)( Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ( ta1, _temp1439), Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_unknown_subscript_e,({ struct Cyc_Absyn_Exp* _temp1457[ 3u];
! _temp1457[ 2u]= Cyc_Absyn_uint_exp( 0, 0); _temp1457[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! ta1, 0); _temp1457[ 0u]= Cyc_Absyn_copy_exp( _temp974);(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1457, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0), 0))->r)); goto _LL1448;} _LL1448:;} if( is_poly){( void*)( e->r=(
  void*)(( void*)( Cyc_Toc_array_to_ptr_cast( Cyc_Toc_typ_to_c(( void*)(( struct
  Cyc_Core_Opt*) _check_null( e->topt))->v), Cyc_Absyn_new_exp(( void*) e->r, 0),
! 0))->r));} goto _LL793;}} _LL847: { void* _temp1458= Cyc_Tcutil_compress(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp978->topt))->v); Cyc_Toc_exp_to_c( nv,
! _temp978); Cyc_Toc_exp_to_c( nv, _temp976);{ void* _temp1459= _temp1458; struct
! Cyc_List_List* _temp1467; struct Cyc_Absyn_PtrInfo _temp1469; struct Cyc_Absyn_Conref*
! _temp1471; struct Cyc_Absyn_Tqual _temp1473; struct Cyc_Absyn_Conref* _temp1475;
! void* _temp1477; void* _temp1479; _LL1461: if(( unsigned int) _temp1459 >  4u?*((
! int*) _temp1459) ==  Cyc_Absyn_TupleType: 0){ _LL1468: _temp1467=(( struct Cyc_Absyn_TupleType_struct*)
! _temp1459)->f1; goto _LL1462;} else{ goto _LL1463;} _LL1463: if(( unsigned int)
! _temp1459 >  4u?*(( int*) _temp1459) ==  Cyc_Absyn_PointerType: 0){ _LL1470:
! _temp1469=(( struct Cyc_Absyn_PointerType_struct*) _temp1459)->f1; _LL1480:
! _temp1479=( void*) _temp1469.elt_typ; goto _LL1478; _LL1478: _temp1477=( void*)
! _temp1469.rgn_typ; goto _LL1476; _LL1476: _temp1475= _temp1469.nullable; goto
! _LL1474; _LL1474: _temp1473= _temp1469.tq; goto _LL1472; _LL1472: _temp1471=
! _temp1469.bounds; goto _LL1464;} else{ goto _LL1465;} _LL1465: goto _LL1466;
! _LL1462: { unsigned int i= Cyc_Evexp_eval_const_uint_exp( _temp976) +  1;( void*)(
! e->r=( void*)(( void*)( Cyc_Absyn_structmember_exp( _temp978, Cyc_Absyn_fieldname((
! int) i), 0))->r)); goto _LL1460;} _LL1464:{ void* _temp1481= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1471); struct Cyc_Absyn_Exp* _temp1487; _LL1483: if((
! unsigned int) _temp1481 >  1u?*(( int*) _temp1481) ==  Cyc_Absyn_Upper_b: 0){
! _LL1488: _temp1487=(( struct Cyc_Absyn_Upper_b_struct*) _temp1481)->f1; goto
! _LL1484;} else{ goto _LL1485;} _LL1485: if( _temp1481 == ( void*) Cyc_Absyn_Unknown_b){
! goto _LL1486;} else{ goto _LL1482;} _LL1484: _temp1487= Cyc_Absyn_uint_exp( Cyc_Evexp_eval_const_uint_exp(
! _temp1487), 0);{ int possibly_null=(( int(*)( int, struct Cyc_Absyn_Conref* x))
! Cyc_Absyn_conref_def)( 0, _temp1475); void* ta1= Cyc_Toc_typ_to_c( _temp1479);
! void* ta2= Cyc_Absyn_cstar_typ( ta1, _temp1473); if( possibly_null){( void*)( e->r=(
  void*)(( void*)( Cyc_Absyn_deref_exp( Cyc_Absyn_cast_exp( ta2, Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_known_subscript_null_e,({ struct Cyc_Absyn_Exp* _temp1489[ 4u];
! _temp1489[ 3u]= _temp976; _temp1489[ 2u]= Cyc_Absyn_sizeoftyp_exp( ta1, 0);
! _temp1489[ 1u]= _temp1487; _temp1489[ 0u]= _temp978;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1489, sizeof( struct Cyc_Absyn_Exp*),
! 4u));}), 0), 0), 0))->r));} else{( void*)( _temp976->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_known_subscript_notnull_e,({ struct Cyc_Absyn_Exp* _temp1490[ 2u];
! _temp1490[ 1u]= Cyc_Absyn_copy_exp( _temp976); _temp1490[ 0u]= _temp1487;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1490, sizeof( struct Cyc_Absyn_Exp*), 2u));}), 0))->r));} goto _LL1482;}
! _LL1486: { void* ta1= Cyc_Toc_typ_to_c_array( _temp1479);( void*)( e->r=( void*)((
  void*)( Cyc_Absyn_deref_exp( Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ( ta1,
! _temp1473), Cyc_Absyn_fncall_exp( Cyc_Toc__check_unknown_subscript_e,({ struct
! Cyc_Absyn_Exp* _temp1491[ 3u]; _temp1491[ 2u]= _temp976; _temp1491[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! ta1, 0); _temp1491[ 0u]= _temp978;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1491, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0), 0), 0))->r)); goto _LL1482;} _LL1482:;} goto _LL1460; _LL1466:({
! void* _temp1492[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Toc_toc_impos)( _tag_arr("exp_to_c: Subscript on non-tuple/array/tuple ptr",
! sizeof( unsigned char), 49u), _tag_arr( _temp1492, sizeof( void*), 0u));}); goto
! _LL1460; _LL1460:;} goto _LL793;} _LL849: if( ! nv->toplevel){( void*)( e->r=(
! void*)(( void*)( Cyc_Toc_init_tuple( nv, 0, 0, _temp980))->r));} else{ struct
! Cyc_List_List* _temp1493=(( struct Cyc_List_List*(*)( struct _tuple3*(* f)(
  struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_tup_to_c,
! _temp980); struct _tagged_arr* _temp1494= Cyc_Toc_add_tuple_type( _temp1493);
! struct Cyc_List_List* dles= 0;{ int i= 1; for( 0; _temp980 !=  0;( _temp980=((
! struct Cyc_List_List*) _check_null( _temp980))->tl, i ++)){ Cyc_Toc_exp_to_c( nv,(
! struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp980))->hd);
! dles=({ struct Cyc_List_List* _temp1495=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1495->hd=( void*)({ struct _tuple4*
! _temp1496=( struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp1496->f1=
! 0; _temp1496->f2=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null(
! _temp980))->hd; _temp1496;}); _temp1495->tl= dles; _temp1495;});}} dles=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( dles);(
  void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp( 0, dles, 0))->r));}
! goto _LL793; _LL851:( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(
! 0, _temp982, 0))->r));{ struct Cyc_List_List* _temp1497= _temp982; for( 0;
! _temp1497 !=  0; _temp1497=(( struct Cyc_List_List*) _check_null( _temp1497))->tl){
! struct _tuple4 _temp1500; struct Cyc_Absyn_Exp* _temp1501; struct _tuple4*
! _temp1498=( struct _tuple4*)(( struct Cyc_List_List*) _check_null( _temp1497))->hd;
! _temp1500=* _temp1498; _LL1502: _temp1501= _temp1500.f2; goto _LL1499; _LL1499:
! Cyc_Toc_exp_to_c( nv, _temp1501);}} goto _LL793; _LL853: { unsigned int
! _temp1503= Cyc_Evexp_eval_const_uint_exp( _temp986); Cyc_Toc_exp_to_c( nv,
! _temp984);{ struct Cyc_List_List* es= 0; if( ! Cyc_Toc_is_zero( _temp984)){
! unsigned int i= 0; for( 0; i <  _temp1503; i ++){ es=({ struct Cyc_List_List*
! _temp1504=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1504->hd=( void*)({ struct _tuple4* _temp1505=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp1505->f1= 0; _temp1505->f2= _temp984; _temp1505;});
! _temp1504->tl= es; _temp1504;});}}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(
! 0, es, 0))->r)); goto _LL793;}} _LL855: if( ! nv->toplevel){( void*)( e->r=(
! void*)(( void*)( Cyc_Toc_init_struct( nv, old_typ, 0, 0, _temp992, _temp996))->r));}
! else{ if( _temp990 ==  0){({ void* _temp1506[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("Struct_e: missing structdecl pointer",
! sizeof( unsigned char), 37u), _tag_arr( _temp1506, sizeof( void*), 0u));});}{
  struct Cyc_Absyn_Structdecl* sd2=( struct Cyc_Absyn_Structdecl*) _check_null(
! _temp990); struct _RegionHandle _temp1507= _new_region(); struct _RegionHandle*
! rgn=& _temp1507; _push_region( rgn);{ struct Cyc_List_List* _temp1508=(( struct
  Cyc_List_List*(*)( struct _RegionHandle* rgn, struct Cyc_Position_Segment* loc,
  struct Cyc_List_List* des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)(
! rgn, e->loc, _temp992,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( sd2->fields))->v); struct Cyc_List_List* _temp1509= 0;{ struct Cyc_List_List*
! _temp1510=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( sd2->fields))->v;
! for( 0; _temp1510 !=  0; _temp1510=(( struct Cyc_List_List*) _check_null(
! _temp1510))->tl){ struct Cyc_List_List* _temp1511= _temp1508; for( 0; _temp1511
! !=  0; _temp1511=(( struct Cyc_List_List*) _check_null( _temp1511))->tl){ if((*((
! struct _tuple10*)(( struct Cyc_List_List*) _check_null( _temp1511))->hd)).f1 == (
! struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( _temp1510))->hd){
! struct _tuple10 _temp1514; struct Cyc_Absyn_Exp* _temp1515; struct Cyc_Absyn_Structfield*
! _temp1517; struct _tuple10* _temp1512=( struct _tuple10*)(( struct Cyc_List_List*)
! _check_null( _temp1511))->hd; _temp1514=* _temp1512; _LL1518: _temp1517=
! _temp1514.f1; goto _LL1516; _LL1516: _temp1515= _temp1514.f2; goto _LL1513;
! _LL1513: { void* _temp1519=( void*) _temp1517->type; Cyc_Toc_exp_to_c( nv,
! _temp1515); if( Cyc_Toc_is_void_star( _temp1519)){( void*)( _temp1515->r=( void*)((
  void*)( Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), Cyc_Absyn_new_exp(( void*)
! _temp1515->r, 0), 0))->r));} _temp1509=({ struct Cyc_List_List* _temp1520=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1520->hd=(
! void*)({ struct _tuple4* _temp1521=( struct _tuple4*) _cycalloc( sizeof( struct
! _tuple4)); _temp1521->f1= 0; _temp1521->f2= _temp1515; _temp1521;}); _temp1520->tl=
! _temp1509; _temp1520;}); break;}}}}}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(
  0,(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
! _temp1509), 0))->r));}; _pop_region( rgn);}} goto _LL793; _LL857: { struct Cyc_List_List*
! fs;{ void* _temp1522= Cyc_Tcutil_compress( _temp1000); struct Cyc_List_List*
! _temp1528; _LL1524: if(( unsigned int) _temp1522 >  4u?*(( int*) _temp1522) == 
! Cyc_Absyn_AnonStructType: 0){ _LL1529: _temp1528=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp1522)->f1; goto _LL1525;} else{ goto _LL1526;} _LL1526: goto _LL1527;
! _LL1525: fs= _temp1528; goto _LL1523; _LL1527: fs=({ struct Cyc_Std_String_pa_struct
! _temp1531; _temp1531.tag= Cyc_Std_String_pa; _temp1531.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( _temp1000);{ void* _temp1530[ 1u]={& _temp1531};((
! struct Cyc_List_List*(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("anon struct has type %s", sizeof( unsigned char), 24u), _tag_arr(
! _temp1530, sizeof( void*), 1u));}}); goto _LL1523; _LL1523:;}{ struct
! _RegionHandle _temp1532= _new_region(); struct _RegionHandle* rgn=& _temp1532;
! _push_region( rgn);{ struct Cyc_List_List* _temp1533=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* rgn, struct Cyc_Position_Segment* loc, struct Cyc_List_List*
  des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)( rgn,
! e->loc, _temp998, fs); for( 0; _temp1533 !=  0; _temp1533=(( struct Cyc_List_List*)
! _check_null( _temp1533))->tl){ struct _tuple10 _temp1536; struct Cyc_Absyn_Exp*
! _temp1537; struct Cyc_Absyn_Structfield* _temp1539; struct _tuple10* _temp1534=(
! struct _tuple10*)(( struct Cyc_List_List*) _check_null( _temp1533))->hd;
! _temp1536=* _temp1534; _LL1540: _temp1539= _temp1536.f1; goto _LL1538; _LL1538:
! _temp1537= _temp1536.f2; goto _LL1535; _LL1535: { void* _temp1541=( void*)
! _temp1539->type; Cyc_Toc_exp_to_c( nv, _temp1537); if( Cyc_Toc_is_void_star(
! _temp1541)){( void*)( _temp1537->r=( void*)(( void*)( Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(),
! Cyc_Absyn_new_exp(( void*) _temp1537->r, 0), 0))->r));}}}( void*)( e->r=( void*)((
! void*)( Cyc_Absyn_unresolvedmem_exp( 0, _temp998, 0))->r));}; _pop_region( rgn);}
! goto _LL793;} _LL859: { struct _tuple0* qv= _temp1002->name; if( _temp1004->is_xtunion?
  1: ! nv->toplevel){( void*)( e->r=( void*)(( void*)( Cyc_Absyn_var_exp( qv, 0))->r));}
! else{ int tag_count= 0; struct Cyc_List_List* _temp1542= _temp1004->fields ==  0?
! 0:( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1004->fields))->v;
  while( Cyc_Absyn_qvar_cmp( qv,(( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( _temp1542))->hd)->name) !=  0) { if((( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp1542))->hd)->typs ==  0){ tag_count ++;}
! _temp1542=(( struct Cyc_List_List*) _check_null( _temp1542))->tl;}( void*)( e->r=(
  void*)(( void*)( Cyc_Absyn_uint_exp(( unsigned int) tag_count, 0))->r));} goto
! _LL793;} _LL861: { struct _tuple0* _temp1543= _temp1008->name; struct Cyc_List_List*
! _temp1544= _temp1008->typs; struct _tuple0* _temp1545= Cyc_Toc_temp_var();
! struct Cyc_Absyn_Exp* _temp1546= Cyc_Absyn_var_exp( _temp1545, 0); void*
! _temp1547= Cyc_Absyn_strctq( Cyc_Toc_collapse_qvar_tag( _temp1543, _tag_arr("_struct",
  sizeof( unsigned char), 8u))); if( nv->toplevel){ struct Cyc_Absyn_Exp* tag_exp;
! if( _temp1010->is_xtunion){ tag_exp= Cyc_Absyn_var_exp( _temp1543, 0);} else{
! int tag_count= 0; struct Cyc_List_List* _temp1548= _temp1010->fields ==  0? 0:(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1010->fields))->v;
! while( Cyc_Absyn_qvar_cmp( _temp1543,(( struct Cyc_Absyn_Tunionfield*)(( struct
! Cyc_List_List*) _check_null( _temp1548))->hd)->name) !=  0) { if((( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp1548))->hd)->typs !=  0){ tag_count ++;}
! _temp1548=(( struct Cyc_List_List*) _check_null( _temp1548))->tl;} tag_exp= Cyc_Absyn_uint_exp((
! unsigned int) tag_count, 0);}{ struct Cyc_List_List* dles= 0; for( 0; _temp1012
! !=  0;( _temp1012=(( struct Cyc_List_List*) _check_null( _temp1012))->tl,
! _temp1544=(( struct Cyc_List_List*) _check_null( _temp1544))->tl)){ struct Cyc_Absyn_Exp*
! cur_e=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp1012))->hd;
  void* field_typ= Cyc_Toc_typ_to_c((*(( struct _tuple3*)(( struct Cyc_List_List*)
! _check_null( _temp1544))->hd)).f2); Cyc_Toc_exp_to_c( nv, cur_e); if( Cyc_Toc_is_void_star(
  field_typ)){ cur_e= Cyc_Absyn_cast_exp( field_typ, cur_e, 0);} dles=({ struct
! Cyc_List_List* _temp1549=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1549->hd=( void*)({ struct _tuple4* _temp1550=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp1550->f1= 0; _temp1550->f2= cur_e; _temp1550;});
! _temp1549->tl= dles; _temp1549;});} dles=({ struct Cyc_List_List* _temp1551=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1551->hd=(
! void*)({ struct _tuple4* _temp1552=( struct _tuple4*) _cycalloc( sizeof( struct
! _tuple4)); _temp1552->f1= 0; _temp1552->f2= tag_exp; _temp1552;}); _temp1551->tl=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( dles);
! _temp1551;});( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(({
! struct Cyc_Core_Opt* _temp1553=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1553->v=( void*) Cyc_Toc_collapse_qvar_tag( _temp1543,
! _tag_arr("_struct", sizeof( unsigned char), 8u)); _temp1553;}), dles, 0))->r));}}
! else{ struct Cyc_List_List* _temp1554=({ struct Cyc_List_List* _temp1560=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1560->hd=(
! void*) Cyc_Absyn_assign_stmt( Cyc_Absyn_structmember_exp( _temp1546, Cyc_Toc_tag_sp,
! 0), Cyc_Absyn_var_exp( _temp1543, 0), 0); _temp1560->tl= 0; _temp1560;});{ int i=
! 1; for( 0; _temp1012 !=  0;((( _temp1012=(( struct Cyc_List_List*) _check_null(
! _temp1012))->tl, i ++)), _temp1544=(( struct Cyc_List_List*) _check_null(
! _temp1544))->tl)){ struct Cyc_Absyn_Exp* cur_e=( struct Cyc_Absyn_Exp*)(( struct
! Cyc_List_List*) _check_null( _temp1012))->hd; void* field_typ= Cyc_Toc_typ_to_c((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp1544))->hd)).f2);
  Cyc_Toc_exp_to_c( nv, cur_e); if( Cyc_Toc_is_void_star( field_typ)){ cur_e= Cyc_Absyn_cast_exp(
! field_typ, cur_e, 0);}{ struct Cyc_Absyn_Stmt* _temp1555= Cyc_Absyn_assign_stmt(
! Cyc_Absyn_structmember_exp( _temp1546, Cyc_Absyn_fieldname( i), 0), cur_e, 0);
! _temp1554=({ struct Cyc_List_List* _temp1556=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1556->hd=( void*) _temp1555; _temp1556->tl=
! _temp1554; _temp1556;});}}}{ struct Cyc_Absyn_Stmt* _temp1557= Cyc_Absyn_exp_stmt(
! _temp1546, 0); struct Cyc_Absyn_Stmt* _temp1558= Cyc_Absyn_seq_stmts((( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(({ struct Cyc_List_List*
! _temp1559=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1559->hd=( void*) _temp1557; _temp1559->tl= _temp1554; _temp1559;})), 0);(
  void*)( e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt(
! _temp1545, _temp1547, 0, _temp1558, 0), 0))->r));}} goto _LL793;} _LL863: goto
! _LL793; _LL865: { void* t_c= Cyc_Toc_typ_to_c( _temp1014); if( _temp1016 !=  0){
! struct Cyc_Absyn_Exp* rgn=( struct Cyc_Absyn_Exp*) _check_null( _temp1016); Cyc_Toc_exp_to_c(
  nv, rgn);( void*)( e->r=( void*)(( void*)( Cyc_Toc_rmalloc_exp( rgn, Cyc_Absyn_sizeoftyp_exp(
  t_c, 0)))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Toc_malloc_exp(
! _temp1014, Cyc_Absyn_sizeoftyp_exp( t_c, 0)))->r));} goto _LL793;} _LL867: Cyc_Toc_stmt_to_c(
! nv, _temp1018); goto _LL793; _LL869:({ void* _temp1561[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("UnresolvedMem",
! sizeof( unsigned char), 14u), _tag_arr( _temp1561, sizeof( void*), 0u));}); goto
! _LL793; _LL871:({ void* _temp1562[ 0u]={};(( int(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("compoundlit", sizeof(
! unsigned char), 12u), _tag_arr( _temp1562, sizeof( void*), 0u));}); goto _LL793;
! _LL873:({ void* _temp1563[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("codegen", sizeof( unsigned char), 8u),
! _tag_arr( _temp1563, sizeof( void*), 0u));}); goto _LL793; _LL875:({ void*
! _temp1564[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)(
! _tag_arr("fill", sizeof( unsigned char), 5u), _tag_arr( _temp1564, sizeof( void*),
! 0u));}); goto _LL793; _LL793:;}} static struct Cyc_Absyn_Stmt* Cyc_Toc_if_eq_goto_stmt(
  struct Cyc_Absyn_Exp* e1, struct Cyc_Absyn_Exp* e2, struct _tagged_arr* succ_lab,
  struct _tagged_arr* fail_lab){ return Cyc_Absyn_ifthenelse_stmt( Cyc_Absyn_eq_exp(
  e1, e2, 0), Cyc_Absyn_goto_stmt( succ_lab, 0), Cyc_Absyn_goto_stmt( fail_lab, 0),
--- 2154,2711 ----
  argvexp, Cyc_Absyn_uint_exp(( unsigned int) i, 0), 0),( struct Cyc_Absyn_Exp*)((
  struct Cyc_List_List*) _check_null( _temp927))->hd, 0), s, 0);}} s= Cyc_Absyn_declare_stmt(
  argv, arr_type, 0, s, 0);}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp(
! s, 0))->r));}}; _pop_region( r);} goto _LL795; _LL821: Cyc_Toc_exp_to_c( nv,
  _temp931);( void*)( e->r=( void*)(( void*)( Cyc_Toc_array_to_ptr_cast( Cyc_Toc_typ_to_c(
! old_typ), Cyc_Toc_newthrow_exp( _temp931), 0))->r)); goto _LL795; _LL823: Cyc_Toc_exp_to_c(
! nv, _temp933); goto _LL795; _LL825: Cyc_Toc_exp_to_c( nv, _temp937); for( 0;
  _temp935 !=  0; _temp935=(( struct Cyc_List_List*) _check_null( _temp935))->tl){
  void* k= Cyc_Tcutil_typ_kind(( void*)(( struct Cyc_List_List*) _check_null(
  _temp935))->hd); if( k != ( void*) Cyc_Absyn_EffKind? k != ( void*) Cyc_Absyn_RgnKind:
! 0){{ void* _temp1118= Cyc_Tcutil_compress(( void*)(( struct Cyc_List_List*)
! _check_null( _temp935))->hd); _LL1120: if(( unsigned int) _temp1118 >  4u?*((
! int*) _temp1118) ==  Cyc_Absyn_VarType: 0){ goto _LL1121;} else{ goto _LL1122;}
! _LL1122: if(( unsigned int) _temp1118 >  4u?*(( int*) _temp1118) ==  Cyc_Absyn_TunionType:
! 0){ goto _LL1123;} else{ goto _LL1124;} _LL1124: goto _LL1125; _LL1121:
! continue; _LL1123: continue; _LL1125:( void*)( e->r=( void*)(( void*)( Cyc_Toc_array_to_ptr_cast(
  Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v),
! _temp937, 0))->r)); goto _LL1119; _LL1119:;} break;}} goto _LL795; _LL827: {
  void* old_t2=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp939->topt))->v;
  void* new_typ=* _temp943;* _temp943= Cyc_Toc_typ_to_c( new_typ); Cyc_Toc_exp_to_c(
! nv, _temp939);{ struct _tuple8 _temp1127=({ struct _tuple8 _temp1126; _temp1126.f1=
! Cyc_Tcutil_compress( old_t2); _temp1126.f2= Cyc_Tcutil_compress( new_typ);
! _temp1126;}); void* _temp1135; struct Cyc_Absyn_PtrInfo _temp1137; void*
! _temp1139; struct Cyc_Absyn_PtrInfo _temp1141; void* _temp1143; void* _temp1145;
! struct Cyc_Absyn_PtrInfo _temp1147; _LL1129: _LL1140: _temp1139= _temp1127.f1;
! if(( unsigned int) _temp1139 >  4u?*(( int*) _temp1139) ==  Cyc_Absyn_PointerType:
! 0){ _LL1142: _temp1141=(( struct Cyc_Absyn_PointerType_struct*) _temp1139)->f1;
! goto _LL1136;} else{ goto _LL1131;} _LL1136: _temp1135= _temp1127.f2; if((
! unsigned int) _temp1135 >  4u?*(( int*) _temp1135) ==  Cyc_Absyn_PointerType: 0){
! _LL1138: _temp1137=(( struct Cyc_Absyn_PointerType_struct*) _temp1135)->f1; goto
! _LL1130;} else{ goto _LL1131;} _LL1131: _LL1146: _temp1145= _temp1127.f1; if((
! unsigned int) _temp1145 >  4u?*(( int*) _temp1145) ==  Cyc_Absyn_PointerType: 0){
! _LL1148: _temp1147=(( struct Cyc_Absyn_PointerType_struct*) _temp1145)->f1; goto
! _LL1144;} else{ goto _LL1133;} _LL1144: _temp1143= _temp1127.f2; if((
! unsigned int) _temp1143 >  4u?*(( int*) _temp1143) ==  Cyc_Absyn_IntType: 0){
! goto _LL1132;} else{ goto _LL1133;} _LL1133: goto _LL1134; _LL1130: { int
! _temp1149=(( int(*)( int, struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_def)( 0,
! _temp1141.nullable); int _temp1150=(( int(*)( int, struct Cyc_Absyn_Conref* x))
! Cyc_Absyn_conref_def)( 0, _temp1137.nullable); void* _temp1151= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1141.bounds); void* _temp1152= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1137.bounds);{ struct _tuple8 _temp1154=({ struct
! _tuple8 _temp1153; _temp1153.f1= _temp1151; _temp1153.f2= _temp1152; _temp1153;});
! void* _temp1164; void* _temp1166; void* _temp1168; void* _temp1170; struct Cyc_Absyn_Exp*
! _temp1172; void* _temp1174; struct Cyc_Absyn_Exp* _temp1176; void* _temp1178;
! _LL1156: _LL1167: _temp1166= _temp1154.f1; if(( unsigned int) _temp1166 >  1u?*((
! int*) _temp1166) ==  Cyc_Absyn_Upper_b: 0){ goto _LL1165;} else{ goto _LL1158;}
! _LL1165: _temp1164= _temp1154.f2; if(( unsigned int) _temp1164 >  1u?*(( int*)
! _temp1164) ==  Cyc_Absyn_Upper_b: 0){ goto _LL1157;} else{ goto _LL1158;}
! _LL1158: _LL1171: _temp1170= _temp1154.f1; if(( unsigned int) _temp1170 >  1u?*((
! int*) _temp1170) ==  Cyc_Absyn_Upper_b: 0){ _LL1173: _temp1172=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1170)->f1; goto _LL1169;} else{ goto _LL1160;} _LL1169: _temp1168=
! _temp1154.f2; if( _temp1168 == ( void*) Cyc_Absyn_Unknown_b){ goto _LL1159;}
! else{ goto _LL1160;} _LL1160: _LL1179: _temp1178= _temp1154.f1; if( _temp1178 == (
! void*) Cyc_Absyn_Unknown_b){ goto _LL1175;} else{ goto _LL1162;} _LL1175:
! _temp1174= _temp1154.f2; if(( unsigned int) _temp1174 >  1u?*(( int*) _temp1174)
! ==  Cyc_Absyn_Upper_b: 0){ _LL1177: _temp1176=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1174)->f1; goto _LL1161;} else{ goto _LL1162;} _LL1162: goto _LL1163;
! _LL1157: if( _temp1149? ! _temp1150: 0){ if( nv->toplevel){({ void* _temp1180[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("can't do NULL-check conversion at top-level",
! sizeof( unsigned char), 44u), _tag_arr( _temp1180, sizeof( void*), 0u));});}(
  void*)( e->r=( void*)(( void*)( Cyc_Absyn_cast_exp(* _temp943, Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_null_e,({ struct Cyc_List_List* _temp1181=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1181->hd=( void*) _temp939;
! _temp1181->tl= 0; _temp1181;}), 0), 0))->r));} goto _LL1155; _LL1159: if( nv->toplevel){(
  void*)( e->r=( void*)(( void*)( Cyc_Toc_make_toplevel_tagged_arr( old_t2,
! _temp1172, _temp939))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp* _temp1182[ 3u]; _temp1182[ 2u]=
! _temp1172; _temp1182[ 1u]= Cyc_Absyn_sizeoftyp_exp( Cyc_Toc_typ_to_c(( void*)
! _temp1137.elt_typ), 0); _temp1182[ 0u]= _temp939;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1182, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0))->r));} goto _LL1155; _LL1161: if( nv->toplevel){({ void* _temp1183[
  0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)(
  _tag_arr("can't coerce t? to t* or t@ at the top-level", sizeof( unsigned char),
! 45u), _tag_arr( _temp1183, sizeof( void*), 0u));});}{ struct Cyc_Absyn_Exp*
! _temp1184= Cyc_Absyn_fncall_exp( Cyc_Toc__untag_arr_e,({ struct Cyc_Absyn_Exp*
! _temp1186[ 3u]; _temp1186[ 2u]= _temp1176; _temp1186[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! Cyc_Toc_typ_to_c(( void*) _temp1141.elt_typ), 0); _temp1186[ 0u]= _temp939;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1186, sizeof( struct Cyc_Absyn_Exp*), 3u));}), 0); if( _temp1150){( void*)(
! _temp1184->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__check_null_e,({
! struct Cyc_List_List* _temp1185=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1185->hd=( void*) Cyc_Absyn_copy_exp( _temp1184);
! _temp1185->tl= 0; _temp1185;}), 0))->r));}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_cast_exp(*
! _temp943, _temp1184, 0))->r)); goto _LL1155;} _LL1163: goto _LL1155; _LL1155:;}
! goto _LL1128;} _LL1132:{ void* _temp1187= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one,
! _temp1147.bounds); _LL1189: if( _temp1187 == ( void*) Cyc_Absyn_Unknown_b){ goto
! _LL1190;} else{ goto _LL1191;} _LL1191: goto _LL1192; _LL1190:( void*)( _temp939->r=(
  void*)(( void*)( Cyc_Absyn_structmember_exp( Cyc_Absyn_new_exp(( void*) _temp939->r,
! _temp939->loc), Cyc_Toc_curr_sp, 0))->r)); goto _LL1188; _LL1192: goto _LL1188;
! _LL1188:;} goto _LL1128; _LL1134: goto _LL1128; _LL1128:;} goto _LL795;} _LL829:{
! void* _temp1193=( void*) _temp944->r; struct Cyc_List_List* _temp1201; struct
! _tuple0* _temp1203; struct Cyc_List_List* _temp1205; _LL1195: if(*(( int*)
! _temp1193) ==  Cyc_Absyn_Struct_e){ _LL1204: _temp1203=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1193)->f1; goto _LL1202; _LL1202: _temp1201=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1193)->f3; goto _LL1196;} else{ goto _LL1197;} _LL1197: if(*(( int*)
! _temp1193) ==  Cyc_Absyn_Tuple_e){ _LL1206: _temp1205=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp1193)->f1; goto _LL1198;} else{ goto _LL1199;} _LL1199: goto _LL1200;
! _LL1196: if( nv->toplevel){({ struct Cyc_Std_String_pa_struct _temp1208;
! _temp1208.tag= Cyc_Std_String_pa; _temp1208.f1=( struct _tagged_arr) Cyc_Position_string_of_segment(
! _temp944->loc);{ void* _temp1207[ 1u]={& _temp1208};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("%s: & on non-identifiers at the top-level",
! sizeof( unsigned char), 42u), _tag_arr( _temp1207, sizeof( void*), 1u));}});}(
  void*)( e->r=( void*)(( void*)( Cyc_Toc_init_struct( nv,( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp944->topt))->v, 1, 0, _temp1201, _temp1203))->r)); goto
! _LL1194; _LL1198: if( nv->toplevel){({ struct Cyc_Std_String_pa_struct _temp1210;
! _temp1210.tag= Cyc_Std_String_pa; _temp1210.f1=( struct _tagged_arr) Cyc_Position_string_of_segment(
! _temp944->loc);{ void* _temp1209[ 1u]={& _temp1210};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("%s: & on non-identifiers at the top-level",
! sizeof( unsigned char), 42u), _tag_arr( _temp1209, sizeof( void*), 1u));}});}(
! void*)( e->r=( void*)(( void*)( Cyc_Toc_init_tuple( nv, 1, 0, _temp1205))->r));
! goto _LL1194; _LL1200: Cyc_Toc_exp_to_c( nv, _temp944); if( ! Cyc_Absyn_is_lvalue(
  _temp944)){(( void(*)( struct Cyc_Absyn_Exp* e1, struct Cyc_List_List* fs,
  struct Cyc_Absyn_Exp*(* f)( struct Cyc_Absyn_Exp*, int), int f_env)) Cyc_Toc_lvalue_assign)(
  _temp944, 0, Cyc_Toc_address_lvalue, 1);( void*)( e->r=( void*)(( void*)( Cyc_Absyn_cast_exp(
  Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v),
! _temp944, 0))->r));} goto _LL1194; _LL1194:;} goto _LL795; _LL831: if( nv->toplevel){({
! struct Cyc_Std_String_pa_struct _temp1212; _temp1212.tag= Cyc_Std_String_pa;
! _temp1212.f1=( struct _tagged_arr) Cyc_Position_string_of_segment( _temp946->loc);{
! void* _temp1211[ 1u]={& _temp1212};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("%s: new at top-level", sizeof(
! unsigned char), 21u), _tag_arr( _temp1211, sizeof( void*), 1u));}});}{ void*
! _temp1213=( void*) _temp946->r; struct Cyc_List_List* _temp1225; struct Cyc_Absyn_Exp*
! _temp1227; struct Cyc_Absyn_Exp* _temp1229; struct Cyc_Absyn_Vardecl* _temp1231;
! struct Cyc_List_List* _temp1233; struct _tuple0* _temp1235; struct Cyc_List_List*
! _temp1237; _LL1215: if(*(( int*) _temp1213) ==  Cyc_Absyn_Array_e){ _LL1226:
! _temp1225=(( struct Cyc_Absyn_Array_e_struct*) _temp1213)->f1; goto _LL1216;}
! else{ goto _LL1217;} _LL1217: if(*(( int*) _temp1213) ==  Cyc_Absyn_Comprehension_e){
! _LL1232: _temp1231=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp1213)->f1;
! goto _LL1230; _LL1230: _temp1229=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1213)->f2; goto _LL1228; _LL1228: _temp1227=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp1213)->f3; goto _LL1218;} else{ goto _LL1219;} _LL1219: if(*(( int*)
! _temp1213) ==  Cyc_Absyn_Struct_e){ _LL1236: _temp1235=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1213)->f1; goto _LL1234; _LL1234: _temp1233=(( struct Cyc_Absyn_Struct_e_struct*)
! _temp1213)->f3; goto _LL1220;} else{ goto _LL1221;} _LL1221: if(*(( int*)
! _temp1213) ==  Cyc_Absyn_Tuple_e){ _LL1238: _temp1237=(( struct Cyc_Absyn_Tuple_e_struct*)
! _temp1213)->f1; goto _LL1222;} else{ goto _LL1223;} _LL1223: goto _LL1224;
! _LL1216: { struct _tuple0* _temp1239= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp*
! _temp1240= Cyc_Absyn_var_exp( _temp1239, 0); struct Cyc_Absyn_Stmt* _temp1241=
! Cyc_Toc_init_array( nv, _temp1240, _temp1225, Cyc_Absyn_exp_stmt( _temp1240, 0));
! void* old_elt_typ;{ void* _temp1242= Cyc_Tcutil_compress( old_typ); struct Cyc_Absyn_PtrInfo
! _temp1248; struct Cyc_Absyn_Tqual _temp1250; void* _temp1252; _LL1244: if((
! unsigned int) _temp1242 >  4u?*(( int*) _temp1242) ==  Cyc_Absyn_PointerType: 0){
! _LL1249: _temp1248=(( struct Cyc_Absyn_PointerType_struct*) _temp1242)->f1;
! _LL1253: _temp1252=( void*) _temp1248.elt_typ; goto _LL1251; _LL1251: _temp1250=
! _temp1248.tq; goto _LL1245;} else{ goto _LL1246;} _LL1246: goto _LL1247; _LL1245:
! old_elt_typ= _temp1252; goto _LL1243; _LL1247: old_elt_typ=({ void* _temp1254[ 0u]={};
  Cyc_Toc_toc_impos( _tag_arr("exp_to_c:new array expression doesn't have ptr type",
! sizeof( unsigned char), 52u), _tag_arr( _temp1254, sizeof( void*), 0u));}); goto
! _LL1243; _LL1243:;}{ void* elt_typ= Cyc_Toc_typ_to_c( old_elt_typ); void*
! _temp1255= Cyc_Absyn_cstar_typ( elt_typ, Cyc_Toc_mt_tq); struct Cyc_Absyn_Exp*
! _temp1256= Cyc_Absyn_times_exp( Cyc_Absyn_sizeoftyp_exp( elt_typ, 0), Cyc_Absyn_signed_int_exp(((
! int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp1225), 0), 0); struct
  Cyc_Absyn_Exp* e1; if( _temp948 ==  0){ e1= Cyc_Toc_malloc_exp( old_elt_typ,
! _temp1256);} else{ struct Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*) _check_null(
! _temp948); Cyc_Toc_exp_to_c( nv, r); e1= Cyc_Toc_rmalloc_exp( r, _temp1256);}{
! struct Cyc_Absyn_Exp* _temp1257= Cyc_Absyn_cast_exp( _temp1255, e1, 0);( void*)(
! e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt( _temp1239,
! _temp1255,( struct Cyc_Absyn_Exp*) _temp1257, _temp1241, 0), 0))->r)); goto
! _LL1214;}}} _LL1218: { int is_tagged_ptr= 0;{ void* _temp1258= Cyc_Tcutil_compress(
! old_typ); struct Cyc_Absyn_PtrInfo _temp1264; struct Cyc_Absyn_Conref* _temp1266;
! struct Cyc_Absyn_Tqual _temp1268; void* _temp1270; _LL1260: if(( unsigned int)
! _temp1258 >  4u?*(( int*) _temp1258) ==  Cyc_Absyn_PointerType: 0){ _LL1265:
! _temp1264=(( struct Cyc_Absyn_PointerType_struct*) _temp1258)->f1; _LL1271:
! _temp1270=( void*) _temp1264.elt_typ; goto _LL1269; _LL1269: _temp1268=
! _temp1264.tq; goto _LL1267; _LL1267: _temp1266= _temp1264.bounds; goto _LL1261;}
! else{ goto _LL1262;} _LL1262: goto _LL1263; _LL1261: is_tagged_ptr= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1266) == ( void*) Cyc_Absyn_Unknown_b; goto _LL1259;
! _LL1263:({ void* _temp1272[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("exp_to_c: comprehension not an array type",
! sizeof( unsigned char), 42u), _tag_arr( _temp1272, sizeof( void*), 0u));}); goto
! _LL1259; _LL1259:;}{ struct _tuple0* max= Cyc_Toc_temp_var(); struct _tuple0* a=
  Cyc_Toc_temp_var(); void* old_elt_typ=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1227->topt))->v; void* elt_typ= Cyc_Toc_typ_to_c( old_elt_typ);
  void* ptr_typ= Cyc_Absyn_cstar_typ( elt_typ, Cyc_Toc_mt_tq); Cyc_Toc_exp_to_c(
! nv, _temp1229);{ struct Cyc_Absyn_Stmt* s= Cyc_Toc_init_comprehension( nv, Cyc_Absyn_var_exp(
! a, 0), _temp1231, Cyc_Absyn_var_exp( max, 0), _temp1227, Cyc_Absyn_skip_stmt( 0),
! 1);{ struct _RegionHandle _temp1273= _new_region(); struct _RegionHandle* r=&
! _temp1273; _push_region( r);{ struct Cyc_List_List* decls=({ struct Cyc_List_List*
! _temp1293=( struct Cyc_List_List*) _region_malloc( r, sizeof( struct Cyc_List_List));
! _temp1293->hd=( void*)({ struct _tuple9* _temp1294=( struct _tuple9*)
! _region_malloc( r, sizeof( struct _tuple9)); _temp1294->f1= max; _temp1294->f2=
! Cyc_Absyn_uint_t; _temp1294->f3=( struct Cyc_Absyn_Exp*) _temp1229; _temp1294;});
! _temp1293->tl= 0; _temp1293;}); struct Cyc_Absyn_Exp* ai; if( _temp948 ==  0){
  ai= Cyc_Toc_malloc_exp( old_elt_typ, Cyc_Absyn_fncall_exp( Cyc_Toc__check_times_e,({
! struct Cyc_Absyn_Exp* _temp1274[ 2u]; _temp1274[ 1u]= Cyc_Absyn_var_exp( max, 0);
! _temp1274[ 0u]= Cyc_Absyn_sizeoftyp_exp( elt_typ, 0);(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1274, sizeof( struct Cyc_Absyn_Exp*),
  2u));}), 0));} else{ struct Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*)
  _check_null( _temp948); Cyc_Toc_exp_to_c( nv, r); ai= Cyc_Toc_rmalloc_exp( r,
! Cyc_Absyn_fncall_exp( Cyc_Toc__check_times_e,({ struct Cyc_Absyn_Exp* _temp1275[
! 2u]; _temp1275[ 1u]= Cyc_Absyn_var_exp( max, 0); _temp1275[ 0u]= Cyc_Absyn_sizeoftyp_exp(
  elt_typ, 0);(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)(
! _tag_arr( _temp1275, sizeof( struct Cyc_Absyn_Exp*), 2u));}), 0));}{ struct Cyc_Absyn_Exp*
  ainit= Cyc_Absyn_cast_exp( ptr_typ, ai, 0); decls=({ struct Cyc_List_List*
! _temp1276=( struct Cyc_List_List*) _region_malloc( r, sizeof( struct Cyc_List_List));
! _temp1276->hd=( void*)({ struct _tuple9* _temp1277=( struct _tuple9*)
! _region_malloc( r, sizeof( struct _tuple9)); _temp1277->f1= a; _temp1277->f2=
! ptr_typ; _temp1277->f3=( struct Cyc_Absyn_Exp*) ainit; _temp1277;}); _temp1276->tl=
! decls; _temp1276;}); if( is_tagged_ptr){ struct _tuple0* _temp1278= Cyc_Toc_temp_var();
! void* _temp1279= Cyc_Toc_typ_to_c( old_typ); struct Cyc_Absyn_Exp* _temp1280=
! Cyc_Absyn_fncall_exp( Cyc_Toc__tag_arr_e,({ struct Cyc_Absyn_Exp* _temp1283[ 3u];
! _temp1283[ 2u]= _temp1229; _temp1283[ 1u]= Cyc_Absyn_sizeoftyp_exp( elt_typ, 0);
! _temp1283[ 0u]= Cyc_Absyn_var_exp( a, 0);(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1283, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0); decls=({ struct Cyc_List_List* _temp1281=( struct Cyc_List_List*)
! _region_malloc( r, sizeof( struct Cyc_List_List)); _temp1281->hd=( void*)({
! struct _tuple9* _temp1282=( struct _tuple9*) _region_malloc( r, sizeof( struct
! _tuple9)); _temp1282->f1= _temp1278; _temp1282->f2= _temp1279; _temp1282->f3=(
! struct Cyc_Absyn_Exp*) _temp1280; _temp1282;}); _temp1281->tl= decls; _temp1281;});
! s= Cyc_Absyn_seq_stmt( s, Cyc_Absyn_exp_stmt( Cyc_Absyn_var_exp( _temp1278, 0),
  0), 0);} else{ s= Cyc_Absyn_seq_stmt( s, Cyc_Absyn_exp_stmt( Cyc_Absyn_var_exp(
! a, 0), 0), 0);}{ struct Cyc_List_List* _temp1284= decls; for( 0; _temp1284 !=  0;
! _temp1284=(( struct Cyc_List_List*) _check_null( _temp1284))->tl){ struct Cyc_Absyn_Exp*
! _temp1287; void* _temp1289; struct _tuple0* _temp1291; struct _tuple9 _temp1285=*((
! struct _tuple9*)(( struct Cyc_List_List*) _check_null( _temp1284))->hd); _LL1292:
! _temp1291= _temp1285.f1; goto _LL1290; _LL1290: _temp1289= _temp1285.f2; goto
! _LL1288; _LL1288: _temp1287= _temp1285.f3; goto _LL1286; _LL1286: s= Cyc_Absyn_declare_stmt(
! _temp1291, _temp1289, _temp1287, s, 0);}}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp(
! s, 0))->r));}}; _pop_region( r);} goto _LL1214;}}} _LL1220:( void*)( e->r=( void*)((
  void*)( Cyc_Toc_init_struct( nv,( void*)(( struct Cyc_Core_Opt*) _check_null(
! _temp946->topt))->v, 1, _temp948, _temp1233, _temp1235))->r)); goto _LL1214;
! _LL1222:( void*)( e->r=( void*)(( void*)( Cyc_Toc_init_tuple( nv, 1, _temp948,
! _temp1237))->r)); goto _LL1214; _LL1224: { void* old_elt_typ=( void*)(( struct
  Cyc_Core_Opt*) _check_null( _temp946->topt))->v; void* elt_typ= Cyc_Toc_typ_to_c(
  old_elt_typ); struct Cyc_Absyn_Exp* mexp= Cyc_Absyn_sizeoftyp_exp( elt_typ, 0);
  if( _temp948 ==  0){ mexp= Cyc_Toc_malloc_exp( old_elt_typ, mexp);} else{ struct
  Cyc_Absyn_Exp* r=( struct Cyc_Absyn_Exp*) _check_null( _temp948); Cyc_Toc_exp_to_c(
  nv, r); mexp= Cyc_Toc_rmalloc_exp( r, mexp);} mexp= Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ(
! elt_typ, Cyc_Toc_mt_tq), mexp, 0);{ int done= 0;{ void* _temp1295=( void*)
! _temp946->r; struct Cyc_Absyn_Exp* _temp1301; void* _temp1303; _LL1297: if(*((
! int*) _temp1295) ==  Cyc_Absyn_Cast_e){ _LL1304: _temp1303=( void*)(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1295)->f1; goto _LL1302; _LL1302: _temp1301=(( struct Cyc_Absyn_Cast_e_struct*)
! _temp1295)->f2; goto _LL1298;} else{ goto _LL1299;} _LL1299: goto _LL1300;
! _LL1298:{ struct _tuple8 _temp1306=({ struct _tuple8 _temp1305; _temp1305.f1=
! Cyc_Tcutil_compress( _temp1303); _temp1305.f2= Cyc_Tcutil_compress(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp1301->topt))->v); _temp1305;}); void*
! _temp1312; struct Cyc_Absyn_PtrInfo _temp1314; struct Cyc_Absyn_Conref*
! _temp1316; void* _temp1318; struct Cyc_Absyn_PtrInfo _temp1320; struct Cyc_Absyn_Conref*
! _temp1322; void* _temp1324; _LL1308: _LL1319: _temp1318= _temp1306.f1; if((
! unsigned int) _temp1318 >  4u?*(( int*) _temp1318) ==  Cyc_Absyn_PointerType: 0){
! _LL1321: _temp1320=(( struct Cyc_Absyn_PointerType_struct*) _temp1318)->f1;
! _LL1325: _temp1324=( void*) _temp1320.elt_typ; goto _LL1323; _LL1323: _temp1322=
! _temp1320.bounds; goto _LL1313;} else{ goto _LL1310;} _LL1313: _temp1312=
! _temp1306.f2; if(( unsigned int) _temp1312 >  4u?*(( int*) _temp1312) ==  Cyc_Absyn_PointerType:
! 0){ _LL1315: _temp1314=(( struct Cyc_Absyn_PointerType_struct*) _temp1312)->f1;
! _LL1317: _temp1316= _temp1314.bounds; goto _LL1309;} else{ goto _LL1310;}
! _LL1310: goto _LL1311; _LL1309:{ struct _tuple8 _temp1327=({ struct _tuple8
! _temp1326; _temp1326.f1= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one, _temp1322);
! _temp1326.f2= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one, _temp1316); _temp1326;});
! void* _temp1333; struct Cyc_Absyn_Exp* _temp1335; void* _temp1337; _LL1329:
! _LL1338: _temp1337= _temp1327.f1; if( _temp1337 == ( void*) Cyc_Absyn_Unknown_b){
! goto _LL1334;} else{ goto _LL1331;} _LL1334: _temp1333= _temp1327.f2; if((
! unsigned int) _temp1333 >  1u?*(( int*) _temp1333) ==  Cyc_Absyn_Upper_b: 0){
! _LL1336: _temp1335=(( struct Cyc_Absyn_Upper_b_struct*) _temp1333)->f1; goto
! _LL1330;} else{ goto _LL1331;} _LL1331: goto _LL1332; _LL1330: done= 1;( void*)(
  e->r=( void*)(( void*)( Cyc_Absyn_fncall_exp( Cyc_Toc__init_tag_arr_e,({ struct
! Cyc_Absyn_Exp* _temp1339[ 4u]; _temp1339[ 3u]= _temp1335; _temp1339[ 2u]= Cyc_Absyn_sizeoftyp_exp(
! _temp1324, 0); _temp1339[ 1u]= _temp1301; _temp1339[ 0u]= mexp;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1339, sizeof( struct Cyc_Absyn_Exp*),
! 4u));}), 0))->r)); goto _LL1328; _LL1332: goto _LL1328; _LL1328:;} goto _LL1307;
! _LL1311: goto _LL1307; _LL1307:;} goto _LL1296; _LL1300: goto _LL1296; _LL1296:;}
! if( ! done){ struct _tuple0* _temp1340= Cyc_Toc_temp_var(); struct Cyc_Absyn_Stmt*
! _temp1341= Cyc_Absyn_exp_stmt( Cyc_Absyn_var_exp( _temp1340, 0), 0); struct Cyc_Absyn_Exp*
! _temp1342= Cyc_Absyn_signed_int_exp( 0, 0); Cyc_Toc_exp_to_c( nv, _temp946);
! _temp1341= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_subscript_exp(
! Cyc_Absyn_var_exp( _temp1340, 0), _temp1342, 0), _temp946, 0), _temp1341, 0);{
! void* _temp1343= Cyc_Absyn_cstar_typ( elt_typ, Cyc_Toc_mt_tq);( void*)( e->r=(
! void*)(( void*)( Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt( _temp1340,
! _temp1343,( struct Cyc_Absyn_Exp*) mexp, _temp1341, 0), 0))->r));}} goto _LL1214;}}
! _LL1214:;} goto _LL795; _LL833: Cyc_Toc_exp_to_c( nv, _temp950); goto _LL795;
! _LL835:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Sizeoftyp_e_struct*
! _temp1344=( struct Cyc_Absyn_Sizeoftyp_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Sizeoftyp_e_struct));
! _temp1344[ 0]=({ struct Cyc_Absyn_Sizeoftyp_e_struct _temp1345; _temp1345.tag=
! Cyc_Absyn_Sizeoftyp_e; _temp1345.f1=( void*) Cyc_Toc_typ_to_c_array( _temp952);
! _temp1345;}); _temp1344;}))); goto _LL795; _LL837:( int) _throw(({ void*
! _temp1346[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("__gen() in code generator",
! sizeof( unsigned char), 26u), _tag_arr( _temp1346, sizeof( void*), 0u));}));
! _LL839:( void*)( e->r=( void*)(( void*)({ struct Cyc_Absyn_Offsetof_e_struct*
! _temp1347=( struct Cyc_Absyn_Offsetof_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Offsetof_e_struct));
! _temp1347[ 0]=({ struct Cyc_Absyn_Offsetof_e_struct _temp1348; _temp1348.tag=
! Cyc_Absyn_Offsetof_e; _temp1348.f1=( void*) Cyc_Toc_typ_to_c_array( _temp958);
! _temp1348.f2= _temp956; _temp1348;}); _temp1347;}))); goto _LL795; _LL841: {
! void* _temp1349= Cyc_Tcutil_compress(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp960->topt))->v);{ void* _temp1350= _temp1349; struct Cyc_Absyn_PtrInfo
! _temp1356; struct Cyc_Absyn_Conref* _temp1358; struct Cyc_Absyn_Tqual _temp1360;
! struct Cyc_Absyn_Conref* _temp1362; void* _temp1364; void* _temp1366; _LL1352:
! if(( unsigned int) _temp1350 >  4u?*(( int*) _temp1350) ==  Cyc_Absyn_PointerType:
! 0){ _LL1357: _temp1356=(( struct Cyc_Absyn_PointerType_struct*) _temp1350)->f1;
! _LL1367: _temp1366=( void*) _temp1356.elt_typ; goto _LL1365; _LL1365: _temp1364=(
! void*) _temp1356.rgn_typ; goto _LL1363; _LL1363: _temp1362= _temp1356.nullable;
! goto _LL1361; _LL1361: _temp1360= _temp1356.tq; goto _LL1359; _LL1359: _temp1358=
! _temp1356.bounds; goto _LL1353;} else{ goto _LL1354;} _LL1354: goto _LL1355;
! _LL1353:{ void* _temp1368= Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one, _temp1358);
! _LL1370: if(( unsigned int) _temp1368 >  1u?*(( int*) _temp1368) ==  Cyc_Absyn_Upper_b:
! 0){ goto _LL1371;} else{ goto _LL1372;} _LL1372: if( _temp1368 == ( void*) Cyc_Absyn_Unknown_b){
! goto _LL1373;} else{ goto _LL1369;} _LL1371: Cyc_Toc_exp_to_c( nv, _temp960);
! if( Cyc_Toc_is_nullable( _temp1349)){( void*)( e->r=( void*)(( void*)( Cyc_Absyn_deref_exp(
! Cyc_Absyn_cast_exp( Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp960->topt))->v), Cyc_Absyn_fncall_exp( Cyc_Toc__check_null_e,({
! struct Cyc_List_List* _temp1374=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1374->hd=( void*) _temp960; _temp1374->tl= 0;
! _temp1374;}), 0), 0), 0))->r));} goto _LL1369; _LL1373: { struct Cyc_Absyn_Exp*
! _temp1375= Cyc_Absyn_uint_exp( 0, 0); _temp1375->topt=({ struct Cyc_Core_Opt*
! _temp1376=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1376->v=( void*) Cyc_Absyn_uint_t; _temp1376;});( void*)( e->r=( void*)((
! void*)( Cyc_Absyn_subscript_exp( _temp960, _temp1375, 0))->r)); Cyc_Toc_exp_to_c(
! nv, e); goto _LL1369;} _LL1369:;} goto _LL1351; _LL1355:({ void* _temp1377[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("exp_to_c: Deref: non-pointer", sizeof( unsigned char), 29u), _tag_arr(
! _temp1377, sizeof( void*), 0u));}); goto _LL1351; _LL1351:;} goto _LL795;}
! _LL843: Cyc_Toc_exp_to_c( nv, _temp964); if( Cyc_Toc_is_poly_project( e)){( void*)(
  e->r=( void*)(( void*)( Cyc_Toc_array_to_ptr_cast( Cyc_Toc_typ_to_c(( void*)((
  struct Cyc_Core_Opt*) _check_null( e->topt))->v), Cyc_Absyn_new_exp(( void*) e->r,
! 0), 0))->r));} goto _LL795; _LL845: { void* e1typ= Cyc_Tcutil_compress(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp968->topt))->v); Cyc_Toc_exp_to_c( nv,
! _temp968);{ int is_poly= Cyc_Toc_is_poly_project( e); struct Cyc_Absyn_Conref*
! _temp1380; struct Cyc_Absyn_Tqual _temp1382; struct Cyc_Absyn_Conref* _temp1384;
! void* _temp1386; void* _temp1388; struct Cyc_Absyn_PtrInfo _temp1378= Cyc_Toc_get_ptr_type(
! e1typ); _LL1389: _temp1388=( void*) _temp1378.elt_typ; goto _LL1387; _LL1387:
! _temp1386=( void*) _temp1378.rgn_typ; goto _LL1385; _LL1385: _temp1384=
! _temp1378.nullable; goto _LL1383; _LL1383: _temp1382= _temp1378.tq; goto _LL1381;
! _LL1381: _temp1380= _temp1378.bounds; goto _LL1379; _LL1379:{ void* _temp1390=
! Cyc_Absyn_conref_def( Cyc_Absyn_bounds_one, _temp1380); struct Cyc_Absyn_Exp*
! _temp1396; _LL1392: if(( unsigned int) _temp1390 >  1u?*(( int*) _temp1390) == 
! Cyc_Absyn_Upper_b: 0){ _LL1397: _temp1396=(( struct Cyc_Absyn_Upper_b_struct*)
! _temp1390)->f1; goto _LL1393;} else{ goto _LL1394;} _LL1394: if( _temp1390 == (
! void*) Cyc_Absyn_Unknown_b){ goto _LL1395;} else{ goto _LL1391;} _LL1393: if(
! Cyc_Evexp_eval_const_uint_exp( _temp1396) <  1){({ void* _temp1398[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)(
  _tag_arr("exp_to_c:  StructArrow_e on pointer of size 0", sizeof( unsigned char),
! 46u), _tag_arr( _temp1398, sizeof( void*), 0u));});}{ int possibly_null=(( int(*)(
! int, struct Cyc_Absyn_Conref* x)) Cyc_Absyn_conref_def)( 0, _temp1384); if( Cyc_Toc_is_nullable((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp968->topt))->v)){( void*)( e->r=(
  void*)(( void*)( Cyc_Absyn_structarrow_exp( Cyc_Absyn_cast_exp( Cyc_Toc_typ_to_c((
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp968->topt))->v), Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_null_e,({ struct Cyc_List_List* _temp1399=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1399->hd=( void*) _temp968;
! _temp1399->tl= 0; _temp1399;}), 0), 0), _temp966, 0))->r));} goto _LL1391;}
! _LL1395: { void* ta1= Cyc_Toc_typ_to_c_array( _temp1388);( void*)( _temp968->r=(
! void*)(( void*)( Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ( ta1, _temp1382), Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_unknown_subscript_e,({ struct Cyc_Absyn_Exp* _temp1400[ 3u];
! _temp1400[ 2u]= Cyc_Absyn_uint_exp( 0, 0); _temp1400[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! ta1, 0); _temp1400[ 0u]= Cyc_Absyn_copy_exp( _temp968);(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1400, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0), 0))->r)); goto _LL1391;} _LL1391:;} if( is_poly){( void*)( e->r=(
  void*)(( void*)( Cyc_Toc_array_to_ptr_cast( Cyc_Toc_typ_to_c(( void*)(( struct
  Cyc_Core_Opt*) _check_null( e->topt))->v), Cyc_Absyn_new_exp(( void*) e->r, 0),
! 0))->r));} goto _LL795;}} _LL847: { void* _temp1401= Cyc_Tcutil_compress(( void*)((
! struct Cyc_Core_Opt*) _check_null( _temp972->topt))->v); Cyc_Toc_exp_to_c( nv,
! _temp972); Cyc_Toc_exp_to_c( nv, _temp970);{ void* _temp1402= _temp1401; struct
! Cyc_List_List* _temp1410; struct Cyc_Absyn_PtrInfo _temp1412; struct Cyc_Absyn_Conref*
! _temp1414; struct Cyc_Absyn_Tqual _temp1416; struct Cyc_Absyn_Conref* _temp1418;
! void* _temp1420; void* _temp1422; _LL1404: if(( unsigned int) _temp1402 >  4u?*((
! int*) _temp1402) ==  Cyc_Absyn_TupleType: 0){ _LL1411: _temp1410=(( struct Cyc_Absyn_TupleType_struct*)
! _temp1402)->f1; goto _LL1405;} else{ goto _LL1406;} _LL1406: if(( unsigned int)
! _temp1402 >  4u?*(( int*) _temp1402) ==  Cyc_Absyn_PointerType: 0){ _LL1413:
! _temp1412=(( struct Cyc_Absyn_PointerType_struct*) _temp1402)->f1; _LL1423:
! _temp1422=( void*) _temp1412.elt_typ; goto _LL1421; _LL1421: _temp1420=( void*)
! _temp1412.rgn_typ; goto _LL1419; _LL1419: _temp1418= _temp1412.nullable; goto
! _LL1417; _LL1417: _temp1416= _temp1412.tq; goto _LL1415; _LL1415: _temp1414=
! _temp1412.bounds; goto _LL1407;} else{ goto _LL1408;} _LL1408: goto _LL1409;
! _LL1405: { unsigned int i= Cyc_Evexp_eval_const_uint_exp( _temp970) +  1;( void*)(
! e->r=( void*)(( void*)( Cyc_Absyn_structmember_exp( _temp972, Cyc_Absyn_fieldname((
! int) i), 0))->r)); goto _LL1403;} _LL1407:{ void* _temp1424= Cyc_Absyn_conref_def(
! Cyc_Absyn_bounds_one, _temp1414); struct Cyc_Absyn_Exp* _temp1430; _LL1426: if((
! unsigned int) _temp1424 >  1u?*(( int*) _temp1424) ==  Cyc_Absyn_Upper_b: 0){
! _LL1431: _temp1430=(( struct Cyc_Absyn_Upper_b_struct*) _temp1424)->f1; goto
! _LL1427;} else{ goto _LL1428;} _LL1428: if( _temp1424 == ( void*) Cyc_Absyn_Unknown_b){
! goto _LL1429;} else{ goto _LL1425;} _LL1427: _temp1430= Cyc_Absyn_uint_exp( Cyc_Evexp_eval_const_uint_exp(
! _temp1430), 0);{ int possibly_null=(( int(*)( int, struct Cyc_Absyn_Conref* x))
! Cyc_Absyn_conref_def)( 0, _temp1418); void* ta1= Cyc_Toc_typ_to_c( _temp1422);
! void* ta2= Cyc_Absyn_cstar_typ( ta1, _temp1416); if( possibly_null){( void*)( e->r=(
  void*)(( void*)( Cyc_Absyn_deref_exp( Cyc_Absyn_cast_exp( ta2, Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_known_subscript_null_e,({ struct Cyc_Absyn_Exp* _temp1432[ 4u];
! _temp1432[ 3u]= _temp970; _temp1432[ 2u]= Cyc_Absyn_sizeoftyp_exp( ta1, 0);
! _temp1432[ 1u]= _temp1430; _temp1432[ 0u]= _temp972;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1432, sizeof( struct Cyc_Absyn_Exp*),
! 4u));}), 0), 0), 0))->r));} else{( void*)( _temp970->r=( void*)(( void*)( Cyc_Absyn_fncall_exp(
! Cyc_Toc__check_known_subscript_notnull_e,({ struct Cyc_Absyn_Exp* _temp1433[ 2u];
! _temp1433[ 1u]= Cyc_Absyn_copy_exp( _temp970); _temp1433[ 0u]= _temp1430;((
  struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1433, sizeof( struct Cyc_Absyn_Exp*), 2u));}), 0))->r));} goto _LL1425;}
! _LL1429: { void* ta1= Cyc_Toc_typ_to_c_array( _temp1422);( void*)( e->r=( void*)((
  void*)( Cyc_Absyn_deref_exp( Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ( ta1,
! _temp1416), Cyc_Absyn_fncall_exp( Cyc_Toc__check_unknown_subscript_e,({ struct
! Cyc_Absyn_Exp* _temp1434[ 3u]; _temp1434[ 2u]= _temp970; _temp1434[ 1u]= Cyc_Absyn_sizeoftyp_exp(
! ta1, 0); _temp1434[ 0u]= _temp972;(( struct Cyc_List_List*(*)( struct
! _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1434, sizeof( struct Cyc_Absyn_Exp*),
! 3u));}), 0), 0), 0))->r)); goto _LL1425;} _LL1425:;} goto _LL1403; _LL1409:({
! void* _temp1435[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Toc_toc_impos)( _tag_arr("exp_to_c: Subscript on non-tuple/array/tuple ptr",
! sizeof( unsigned char), 49u), _tag_arr( _temp1435, sizeof( void*), 0u));}); goto
! _LL1403; _LL1403:;} goto _LL795;} _LL849: if( ! nv->toplevel){( void*)( e->r=(
! void*)(( void*)( Cyc_Toc_init_tuple( nv, 0, 0, _temp974))->r));} else{ struct
! Cyc_List_List* _temp1436=(( struct Cyc_List_List*(*)( struct _tuple3*(* f)(
  struct Cyc_Absyn_Exp*), struct Cyc_List_List* x)) Cyc_List_map)( Cyc_Toc_tup_to_c,
! _temp974); struct _tagged_arr* _temp1437= Cyc_Toc_add_tuple_type( _temp1436);
! struct Cyc_List_List* dles= 0;{ int i= 1; for( 0; _temp974 !=  0;( _temp974=((
! struct Cyc_List_List*) _check_null( _temp974))->tl, i ++)){ Cyc_Toc_exp_to_c( nv,(
! struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp974))->hd);
! dles=({ struct Cyc_List_List* _temp1438=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1438->hd=( void*)({ struct _tuple4*
! _temp1439=( struct _tuple4*) _cycalloc( sizeof( struct _tuple4)); _temp1439->f1=
! 0; _temp1439->f2=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null(
! _temp974))->hd; _temp1439;}); _temp1438->tl= dles; _temp1438;});}} dles=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( dles);(
  void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp( 0, dles, 0))->r));}
! goto _LL795; _LL851:( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(
! 0, _temp976, 0))->r));{ struct Cyc_List_List* _temp1440= _temp976; for( 0;
! _temp1440 !=  0; _temp1440=(( struct Cyc_List_List*) _check_null( _temp1440))->tl){
! struct _tuple4 _temp1443; struct Cyc_Absyn_Exp* _temp1444; struct _tuple4*
! _temp1441=( struct _tuple4*)(( struct Cyc_List_List*) _check_null( _temp1440))->hd;
! _temp1443=* _temp1441; _LL1445: _temp1444= _temp1443.f2; goto _LL1442; _LL1442:
! Cyc_Toc_exp_to_c( nv, _temp1444);}} goto _LL795; _LL853: { unsigned int
! _temp1446= Cyc_Evexp_eval_const_uint_exp( _temp980); Cyc_Toc_exp_to_c( nv,
! _temp978);{ struct Cyc_List_List* es= 0; if( ! Cyc_Toc_is_zero( _temp978)){
! unsigned int i= 0; for( 0; i <  _temp1446; i ++){ es=({ struct Cyc_List_List*
! _temp1447=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1447->hd=( void*)({ struct _tuple4* _temp1448=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp1448->f1= 0; _temp1448->f2= _temp978; _temp1448;});
! _temp1447->tl= es; _temp1447;});}}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(
! 0, es, 0))->r)); goto _LL795;}} _LL855: if( ! nv->toplevel){( void*)( e->r=(
! void*)(( void*)( Cyc_Toc_init_struct( nv, old_typ, 0, 0, _temp986, _temp990))->r));}
! else{ if( _temp984 ==  0){({ void* _temp1449[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("Struct_e: missing structdecl pointer",
! sizeof( unsigned char), 37u), _tag_arr( _temp1449, sizeof( void*), 0u));});}{
  struct Cyc_Absyn_Structdecl* sd2=( struct Cyc_Absyn_Structdecl*) _check_null(
! _temp984); struct _RegionHandle _temp1450= _new_region(); struct _RegionHandle*
! rgn=& _temp1450; _push_region( rgn);{ struct Cyc_List_List* _temp1451=(( struct
  Cyc_List_List*(*)( struct _RegionHandle* rgn, struct Cyc_Position_Segment* loc,
  struct Cyc_List_List* des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)(
! rgn, e->loc, _temp986,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( sd2->fields))->v); struct Cyc_List_List* _temp1452= 0;{ struct Cyc_List_List*
! _temp1453=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( sd2->fields))->v;
! for( 0; _temp1453 !=  0; _temp1453=(( struct Cyc_List_List*) _check_null(
! _temp1453))->tl){ struct Cyc_List_List* _temp1454= _temp1451; for( 0; _temp1454
! !=  0; _temp1454=(( struct Cyc_List_List*) _check_null( _temp1454))->tl){ if((*((
! struct _tuple10*)(( struct Cyc_List_List*) _check_null( _temp1454))->hd)).f1 == (
! struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null( _temp1453))->hd){
! struct _tuple10 _temp1457; struct Cyc_Absyn_Exp* _temp1458; struct Cyc_Absyn_Structfield*
! _temp1460; struct _tuple10* _temp1455=( struct _tuple10*)(( struct Cyc_List_List*)
! _check_null( _temp1454))->hd; _temp1457=* _temp1455; _LL1461: _temp1460=
! _temp1457.f1; goto _LL1459; _LL1459: _temp1458= _temp1457.f2; goto _LL1456;
! _LL1456: { void* _temp1462=( void*) _temp1460->type; Cyc_Toc_exp_to_c( nv,
! _temp1458); if( Cyc_Toc_is_void_star( _temp1462)){( void*)( _temp1458->r=( void*)((
  void*)( Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), Cyc_Absyn_new_exp(( void*)
! _temp1458->r, 0), 0))->r));} _temp1452=({ struct Cyc_List_List* _temp1463=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1463->hd=(
! void*)({ struct _tuple4* _temp1464=( struct _tuple4*) _cycalloc( sizeof( struct
! _tuple4)); _temp1464->f1= 0; _temp1464->f2= _temp1458; _temp1464;}); _temp1463->tl=
! _temp1452; _temp1463;}); break;}}}}}( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(
  0,(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
! _temp1452), 0))->r));}; _pop_region( rgn);}} goto _LL795; _LL857: { struct Cyc_List_List*
! fs;{ void* _temp1465= Cyc_Tcutil_compress( _temp994); struct Cyc_List_List*
! _temp1471; _LL1467: if(( unsigned int) _temp1465 >  4u?*(( int*) _temp1465) == 
! Cyc_Absyn_AnonStructType: 0){ _LL1472: _temp1471=(( struct Cyc_Absyn_AnonStructType_struct*)
! _temp1465)->f1; goto _LL1468;} else{ goto _LL1469;} _LL1469: goto _LL1470;
! _LL1468: fs= _temp1471; goto _LL1466; _LL1470: fs=({ struct Cyc_Std_String_pa_struct
! _temp1474; _temp1474.tag= Cyc_Std_String_pa; _temp1474.f1=( struct _tagged_arr)
! Cyc_Absynpp_typ2string( _temp994);{ void* _temp1473[ 1u]={& _temp1474};(( struct
! Cyc_List_List*(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
  _tag_arr("anon struct has type %s", sizeof( unsigned char), 24u), _tag_arr(
! _temp1473, sizeof( void*), 1u));}}); goto _LL1466; _LL1466:;}{ struct
! _RegionHandle _temp1475= _new_region(); struct _RegionHandle* rgn=& _temp1475;
! _push_region( rgn);{ struct Cyc_List_List* _temp1476=(( struct Cyc_List_List*(*)(
  struct _RegionHandle* rgn, struct Cyc_Position_Segment* loc, struct Cyc_List_List*
  des, struct Cyc_List_List* fields)) Cyc_Tcutil_resolve_struct_designators)( rgn,
! e->loc, _temp992, fs); for( 0; _temp1476 !=  0; _temp1476=(( struct Cyc_List_List*)
! _check_null( _temp1476))->tl){ struct _tuple10 _temp1479; struct Cyc_Absyn_Exp*
! _temp1480; struct Cyc_Absyn_Structfield* _temp1482; struct _tuple10* _temp1477=(
! struct _tuple10*)(( struct Cyc_List_List*) _check_null( _temp1476))->hd;
! _temp1479=* _temp1477; _LL1483: _temp1482= _temp1479.f1; goto _LL1481; _LL1481:
! _temp1480= _temp1479.f2; goto _LL1478; _LL1478: { void* _temp1484=( void*)
! _temp1482->type; Cyc_Toc_exp_to_c( nv, _temp1480); if( Cyc_Toc_is_void_star(
! _temp1484)){( void*)( _temp1480->r=( void*)(( void*)( Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(),
! Cyc_Absyn_new_exp(( void*) _temp1480->r, 0), 0))->r));}}}( void*)( e->r=( void*)((
! void*)( Cyc_Absyn_unresolvedmem_exp( 0, _temp992, 0))->r));}; _pop_region( rgn);}
! goto _LL795;} _LL859: { struct _tuple0* qv= _temp996->name; if( _temp998->is_xtunion?
  1: ! nv->toplevel){( void*)( e->r=( void*)(( void*)( Cyc_Absyn_var_exp( qv, 0))->r));}
! else{ int tag_count= 0; struct Cyc_List_List* _temp1485= _temp998->fields ==  0?
! 0:( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp998->fields))->v;
  while( Cyc_Absyn_qvar_cmp( qv,(( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*)
! _check_null( _temp1485))->hd)->name) !=  0) { if((( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp1485))->hd)->typs ==  0){ tag_count ++;}
! _temp1485=(( struct Cyc_List_List*) _check_null( _temp1485))->tl;}( void*)( e->r=(
  void*)(( void*)( Cyc_Absyn_uint_exp(( unsigned int) tag_count, 0))->r));} goto
! _LL795;} _LL861: { struct _tuple0* _temp1486= _temp1002->name; struct Cyc_List_List*
! _temp1487= _temp1002->typs; struct _tuple0* _temp1488= Cyc_Toc_temp_var();
! struct Cyc_Absyn_Exp* _temp1489= Cyc_Absyn_var_exp( _temp1488, 0); void*
! _temp1490= Cyc_Absyn_strctq( Cyc_Toc_collapse_qvar_tag( _temp1486, _tag_arr("_struct",
  sizeof( unsigned char), 8u))); if( nv->toplevel){ struct Cyc_Absyn_Exp* tag_exp;
! if( _temp1004->is_xtunion){ tag_exp= Cyc_Absyn_var_exp( _temp1486, 0);} else{
! int tag_count= 0; struct Cyc_List_List* _temp1491= _temp1004->fields ==  0? 0:(
! struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( _temp1004->fields))->v;
! while( Cyc_Absyn_qvar_cmp( _temp1486,(( struct Cyc_Absyn_Tunionfield*)(( struct
! Cyc_List_List*) _check_null( _temp1491))->hd)->name) !=  0) { if((( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp1491))->hd)->typs !=  0){ tag_count ++;}
! _temp1491=(( struct Cyc_List_List*) _check_null( _temp1491))->tl;} tag_exp= Cyc_Absyn_uint_exp((
! unsigned int) tag_count, 0);}{ struct Cyc_List_List* dles= 0; for( 0; _temp1006
! !=  0;( _temp1006=(( struct Cyc_List_List*) _check_null( _temp1006))->tl,
! _temp1487=(( struct Cyc_List_List*) _check_null( _temp1487))->tl)){ struct Cyc_Absyn_Exp*
! cur_e=( struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp1006))->hd;
  void* field_typ= Cyc_Toc_typ_to_c((*(( struct _tuple3*)(( struct Cyc_List_List*)
! _check_null( _temp1487))->hd)).f2); Cyc_Toc_exp_to_c( nv, cur_e); if( Cyc_Toc_is_void_star(
  field_typ)){ cur_e= Cyc_Absyn_cast_exp( field_typ, cur_e, 0);} dles=({ struct
! Cyc_List_List* _temp1492=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1492->hd=( void*)({ struct _tuple4* _temp1493=( struct _tuple4*) _cycalloc(
! sizeof( struct _tuple4)); _temp1493->f1= 0; _temp1493->f2= cur_e; _temp1493;});
! _temp1492->tl= dles; _temp1492;});} dles=({ struct Cyc_List_List* _temp1494=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1494->hd=(
! void*)({ struct _tuple4* _temp1495=( struct _tuple4*) _cycalloc( sizeof( struct
! _tuple4)); _temp1495->f1= 0; _temp1495->f2= tag_exp; _temp1495;}); _temp1494->tl=((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)( dles);
! _temp1494;});( void*)( e->r=( void*)(( void*)( Cyc_Absyn_unresolvedmem_exp(({
! struct Cyc_Core_Opt* _temp1496=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct
! Cyc_Core_Opt)); _temp1496->v=( void*) Cyc_Toc_collapse_qvar_tag( _temp1486,
! _tag_arr("_struct", sizeof( unsigned char), 8u)); _temp1496;}), dles, 0))->r));}}
! else{ struct Cyc_List_List* _temp1497=({ struct Cyc_List_List* _temp1503=(
! struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1503->hd=(
! void*) Cyc_Absyn_assign_stmt( Cyc_Absyn_structmember_exp( _temp1489, Cyc_Toc_tag_sp,
! 0), Cyc_Absyn_var_exp( _temp1486, 0), 0); _temp1503->tl= 0; _temp1503;});{ int i=
! 1; for( 0; _temp1006 !=  0;((( _temp1006=(( struct Cyc_List_List*) _check_null(
! _temp1006))->tl, i ++)), _temp1487=(( struct Cyc_List_List*) _check_null(
! _temp1487))->tl)){ struct Cyc_Absyn_Exp* cur_e=( struct Cyc_Absyn_Exp*)(( struct
! Cyc_List_List*) _check_null( _temp1006))->hd; void* field_typ= Cyc_Toc_typ_to_c((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp1487))->hd)).f2);
  Cyc_Toc_exp_to_c( nv, cur_e); if( Cyc_Toc_is_void_star( field_typ)){ cur_e= Cyc_Absyn_cast_exp(
! field_typ, cur_e, 0);}{ struct Cyc_Absyn_Stmt* _temp1498= Cyc_Absyn_assign_stmt(
! Cyc_Absyn_structmember_exp( _temp1489, Cyc_Absyn_fieldname( i), 0), cur_e, 0);
! _temp1497=({ struct Cyc_List_List* _temp1499=( struct Cyc_List_List*) _cycalloc(
! sizeof( struct Cyc_List_List)); _temp1499->hd=( void*) _temp1498; _temp1499->tl=
! _temp1497; _temp1499;});}}}{ struct Cyc_Absyn_Stmt* _temp1500= Cyc_Absyn_exp_stmt(
! _temp1489, 0); struct Cyc_Absyn_Stmt* _temp1501= Cyc_Absyn_seq_stmts((( struct
  Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(({ struct Cyc_List_List*
! _temp1502=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1502->hd=( void*) _temp1500; _temp1502->tl= _temp1497; _temp1502;})), 0);(
  void*)( e->r=( void*)(( void*)( Cyc_Absyn_stmt_exp( Cyc_Absyn_declare_stmt(
! _temp1488, _temp1490, 0, _temp1501, 0), 0))->r));}} goto _LL795;} _LL863: goto
! _LL795; _LL865: { void* t_c= Cyc_Toc_typ_to_c( _temp1008); if( _temp1010 !=  0){
! struct Cyc_Absyn_Exp* rgn=( struct Cyc_Absyn_Exp*) _check_null( _temp1010); Cyc_Toc_exp_to_c(
  nv, rgn);( void*)( e->r=( void*)(( void*)( Cyc_Toc_rmalloc_exp( rgn, Cyc_Absyn_sizeoftyp_exp(
  t_c, 0)))->r));} else{( void*)( e->r=( void*)(( void*)( Cyc_Toc_malloc_exp(
! _temp1008, Cyc_Absyn_sizeoftyp_exp( t_c, 0)))->r));} goto _LL795;} _LL867: Cyc_Toc_stmt_to_c(
! nv, _temp1012); goto _LL795; _LL869:({ void* _temp1504[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("UnresolvedMem",
! sizeof( unsigned char), 14u), _tag_arr( _temp1504, sizeof( void*), 0u));}); goto
! _LL795; _LL871:({ void* _temp1505[ 0u]={};(( int(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("compoundlit", sizeof(
! unsigned char), 12u), _tag_arr( _temp1505, sizeof( void*), 0u));}); goto _LL795;
! _LL873:({ void* _temp1506[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("codegen", sizeof( unsigned char), 8u),
! _tag_arr( _temp1506, sizeof( void*), 0u));}); goto _LL795; _LL875:({ void*
! _temp1507[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)(
! _tag_arr("fill", sizeof( unsigned char), 5u), _tag_arr( _temp1507, sizeof( void*),
! 0u));}); goto _LL795; _LL795:;}} static struct Cyc_Absyn_Stmt* Cyc_Toc_if_eq_goto_stmt(
  struct Cyc_Absyn_Exp* e1, struct Cyc_Absyn_Exp* e2, struct _tagged_arr* succ_lab,
  struct _tagged_arr* fail_lab){ return Cyc_Absyn_ifthenelse_stmt( Cyc_Absyn_eq_exp(
  e1, e2, 0), Cyc_Absyn_goto_stmt( succ_lab, 0), Cyc_Absyn_goto_stmt( fail_lab, 0),
***************
*** 2806,3110 ****
  struct _tuple11 Cyc_Toc_xlate_pat( struct Cyc_Toc_Env* nv, struct _RegionHandle*
  rgn, void* t, struct Cyc_Absyn_Exp* r, struct Cyc_Absyn_Exp* path, struct Cyc_Absyn_Pat*
  p, struct _tagged_arr* succ_lab, struct _tagged_arr* fail_lab, struct Cyc_List_List*
! decls){ struct Cyc_Absyn_Stmt* s;{ void* _temp1565=( void*) p->r; struct Cyc_Absyn_Vardecl*
! _temp1601; struct Cyc_Absyn_Vardecl _temp1603; struct _tuple0* _temp1604; struct
! Cyc_Absyn_Vardecl* _temp1606; int _temp1608; void* _temp1610; unsigned char
! _temp1612; struct _tagged_arr _temp1614; struct Cyc_Absyn_Enumfield* _temp1616;
! struct Cyc_Absyn_Enumdecl* _temp1618; struct Cyc_List_List* _temp1620; struct
! Cyc_List_List* _temp1622; struct Cyc_Absyn_Tunionfield* _temp1624; struct Cyc_Absyn_Tuniondecl*
! _temp1626; struct Cyc_Absyn_Pat* _temp1629; struct Cyc_Absyn_Pat _temp1631; void*
! _temp1632; struct Cyc_List_List* _temp1634; struct Cyc_List_List* _temp1636;
! struct Cyc_Absyn_Tunionfield* _temp1638; struct Cyc_Absyn_Tuniondecl* _temp1640;
! struct Cyc_List_List* _temp1642; struct Cyc_List_List* _temp1644; struct Cyc_List_List*
! _temp1646; struct Cyc_List_List* _temp1648; struct Cyc_Core_Opt* _temp1650;
! struct Cyc_Absyn_Structdecl* _temp1652; struct Cyc_Absyn_Pat* _temp1654; _LL1567:
! if(( unsigned int) _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_Var_p: 0){
! _LL1602: _temp1601=(( struct Cyc_Absyn_Var_p_struct*) _temp1565)->f1; _temp1603=*
! _temp1601; _LL1605: _temp1604= _temp1603.name; goto _LL1568;} else{ goto _LL1569;}
! _LL1569: if( _temp1565 == ( void*) Cyc_Absyn_Wild_p){ goto _LL1570;} else{ goto
! _LL1571;} _LL1571: if(( unsigned int) _temp1565 >  2u?*(( int*) _temp1565) == 
! Cyc_Absyn_Reference_p: 0){ _LL1607: _temp1606=(( struct Cyc_Absyn_Reference_p_struct*)
! _temp1565)->f1; goto _LL1572;} else{ goto _LL1573;} _LL1573: if( _temp1565 == (
! void*) Cyc_Absyn_Null_p){ goto _LL1574;} else{ goto _LL1575;} _LL1575: if((
! unsigned int) _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_Int_p: 0){
! _LL1611: _temp1610=( void*)(( struct Cyc_Absyn_Int_p_struct*) _temp1565)->f1;
! goto _LL1609; _LL1609: _temp1608=(( struct Cyc_Absyn_Int_p_struct*) _temp1565)->f2;
! goto _LL1576;} else{ goto _LL1577;} _LL1577: if(( unsigned int) _temp1565 >  2u?*((
! int*) _temp1565) ==  Cyc_Absyn_Char_p: 0){ _LL1613: _temp1612=(( struct Cyc_Absyn_Char_p_struct*)
! _temp1565)->f1; goto _LL1578;} else{ goto _LL1579;} _LL1579: if(( unsigned int)
! _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_Float_p: 0){ _LL1615:
! _temp1614=(( struct Cyc_Absyn_Float_p_struct*) _temp1565)->f1; goto _LL1580;}
! else{ goto _LL1581;} _LL1581: if(( unsigned int) _temp1565 >  2u?*(( int*)
! _temp1565) ==  Cyc_Absyn_Enum_p: 0){ _LL1619: _temp1618=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp1565)->f1; goto _LL1617; _LL1617: _temp1616=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp1565)->f2; goto _LL1582;} else{ goto _LL1583;} _LL1583: if(( unsigned int)
! _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_Tunion_p: 0){ _LL1627:
! _temp1626=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1565)->f1; goto _LL1625;
! _LL1625: _temp1624=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1565)->f2; goto
! _LL1623; _LL1623: _temp1622=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1565)->f3;
! goto _LL1621; _LL1621: _temp1620=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1565)->f4;
! if( _temp1620 ==  0){ goto _LL1584;} else{ goto _LL1585;}} else{ goto _LL1585;}
! _LL1585: if(( unsigned int) _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_Pointer_p:
! 0){ _LL1630: _temp1629=(( struct Cyc_Absyn_Pointer_p_struct*) _temp1565)->f1;
! _temp1631=* _temp1629; _LL1633: _temp1632=( void*) _temp1631.r; if((
! unsigned int) _temp1632 >  2u?*(( int*) _temp1632) ==  Cyc_Absyn_Tunion_p: 0){
! _LL1641: _temp1640=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1632)->f1; goto
! _LL1639; _LL1639: _temp1638=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1632)->f2;
! goto _LL1637; _LL1637: _temp1636=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1632)->f3;
! goto _LL1635; _LL1635: _temp1634=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1632)->f4;
! goto _LL1628;} else{ goto _LL1587;}} else{ goto _LL1587;} _LL1628: if( _temp1634
! !=  0){ goto _LL1586;} else{ goto _LL1587;} _LL1587: if(( unsigned int)
! _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_Tunion_p: 0){ _LL1643:
! _temp1642=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1565)->f4; goto _LL1588;}
! else{ goto _LL1589;} _LL1589: if(( unsigned int) _temp1565 >  2u?*(( int*)
! _temp1565) ==  Cyc_Absyn_Tuple_p: 0){ _LL1645: _temp1644=(( struct Cyc_Absyn_Tuple_p_struct*)
! _temp1565)->f1; goto _LL1590;} else{ goto _LL1591;} _LL1591: if(( unsigned int)
! _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_Struct_p: 0){ _LL1653:
! _temp1652=(( struct Cyc_Absyn_Struct_p_struct*) _temp1565)->f1; goto _LL1651;
! _LL1651: _temp1650=(( struct Cyc_Absyn_Struct_p_struct*) _temp1565)->f2; goto
! _LL1649; _LL1649: _temp1648=(( struct Cyc_Absyn_Struct_p_struct*) _temp1565)->f3;
! goto _LL1647; _LL1647: _temp1646=(( struct Cyc_Absyn_Struct_p_struct*) _temp1565)->f4;
! goto _LL1592;} else{ goto _LL1593;} _LL1593: if(( unsigned int) _temp1565 >  2u?*((
! int*) _temp1565) ==  Cyc_Absyn_Pointer_p: 0){ _LL1655: _temp1654=(( struct Cyc_Absyn_Pointer_p_struct*)
! _temp1565)->f1; goto _LL1594;} else{ goto _LL1595;} _LL1595: if(( unsigned int)
! _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_UnknownId_p: 0){ goto _LL1596;}
! else{ goto _LL1597;} _LL1597: if(( unsigned int) _temp1565 >  2u?*(( int*)
! _temp1565) ==  Cyc_Absyn_UnknownCall_p: 0){ goto _LL1598;} else{ goto _LL1599;}
! _LL1599: if(( unsigned int) _temp1565 >  2u?*(( int*) _temp1565) ==  Cyc_Absyn_UnknownFields_p:
! 0){ goto _LL1600;} else{ goto _LL1566;} _LL1568: nv= Cyc_Toc_add_varmap( nv,
! _temp1604, r); goto _LL1570; _LL1570: s= Cyc_Absyn_goto_stmt( succ_lab, 0); goto
! _LL1566; _LL1572: { struct _tuple0* _temp1656= Cyc_Toc_temp_var(); decls=({
! struct Cyc_List_List* _temp1657=( struct Cyc_List_List*) _region_malloc( rgn,
! sizeof( struct Cyc_List_List)); _temp1657->hd=( void*)({ struct _tuple12*
! _temp1658=( struct _tuple12*) _region_malloc( rgn, sizeof( struct _tuple12));
! _temp1658->f1= _temp1656; _temp1658->f2= Cyc_Absyn_cstar_typ( Cyc_Toc_typ_to_c(
! t), Cyc_Toc_mt_tq); _temp1658;}); _temp1657->tl= decls; _temp1657;}); nv= Cyc_Toc_add_varmap(
! nv, _temp1606->name, Cyc_Absyn_var_exp( _temp1656, 0)); s= Cyc_Absyn_seq_stmt(
! Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp( _temp1656, 0), Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ(
  Cyc_Toc_typ_to_c( t), Cyc_Toc_mt_tq), Cyc_Absyn_address_exp( path, 0), 0), 0),
! Cyc_Absyn_goto_stmt( succ_lab, 0), 0); goto _LL1566;} _LL1574: s= Cyc_Toc_if_eq_goto_stmt(
! r, Cyc_Absyn_signed_int_exp( 0, 0), succ_lab, fail_lab); goto _LL1566; _LL1576:
! s= Cyc_Toc_if_eq_goto_stmt( r, Cyc_Absyn_int_exp( _temp1610, _temp1608, 0),
! succ_lab, fail_lab); goto _LL1566; _LL1578: s= Cyc_Toc_if_eq_goto_stmt( r, Cyc_Absyn_char_exp(
! _temp1612, 0), succ_lab, fail_lab); goto _LL1566; _LL1580: s= Cyc_Toc_if_eq_goto_stmt(
! r, Cyc_Absyn_float_exp( _temp1614, 0), succ_lab, fail_lab); goto _LL1566;
! _LL1582: s= Cyc_Toc_if_eq_goto_stmt( r, Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Enum_e_struct*
! _temp1659=( struct Cyc_Absyn_Enum_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Enum_e_struct));
! _temp1659[ 0]=({ struct Cyc_Absyn_Enum_e_struct _temp1660; _temp1660.tag= Cyc_Absyn_Enum_e;
! _temp1660.f1= _temp1616->name; _temp1660.f2=( struct Cyc_Absyn_Enumdecl*)
! _temp1618; _temp1660.f3=( struct Cyc_Absyn_Enumfield*) _temp1616; _temp1660;});
! _temp1659;}), 0), succ_lab, fail_lab); goto _LL1566; _LL1584: { struct Cyc_Absyn_Exp*
! cmp_exp= Cyc_Absyn_var_exp( _temp1624->name, 0); if( ! _temp1626->is_xtunion){
  cmp_exp= Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), cmp_exp, 0);} s= Cyc_Toc_if_eq_goto_stmt(
! r, cmp_exp, succ_lab, fail_lab); goto _LL1566;} _LL1586: { struct Cyc_List_List*
! ss= 0; int cnt=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp1634);
! struct _tuple0* tufstrct= Cyc_Toc_collapse_qvar_tag( _temp1638->name, _tag_arr("_struct",
  sizeof( unsigned char), 8u)); struct Cyc_Absyn_Exp* rcast= Cyc_Absyn_cast_exp(
  Cyc_Absyn_cstar_typ( Cyc_Absyn_strctq( tufstrct), Cyc_Toc_mt_tq), r, 0); struct
! Cyc_List_List* _temp1661=(( struct Cyc_List_List*(*)( struct _RegionHandle*,
! struct Cyc_List_List* x)) Cyc_List_rrev)( rgn, _temp1638->typs); struct Cyc_List_List*
! _temp1662=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List*
! x)) Cyc_List_rrev)( rgn, _temp1634); for( 0; _temp1662 !=  0;((( _temp1662=((
! struct Cyc_List_List*) _check_null( _temp1662))->tl, _temp1661=(( struct Cyc_List_List*)
! _check_null( _temp1661))->tl)), cnt --)){ struct Cyc_Absyn_Pat* _temp1663=(
! struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*) _check_null( _temp1662))->hd;
! if(( void*) _temp1663->r == ( void*) Cyc_Absyn_Wild_p){ continue;}{ void*
! _temp1664=(*(( struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp1661))->hd)).f2;
! struct _tuple0* _temp1665= Cyc_Toc_temp_var(); void* _temp1666=( void*)(( struct
! Cyc_Core_Opt*) _check_null( _temp1663->topt))->v; void* _temp1667= Cyc_Toc_typ_to_c(
! _temp1666); struct _tagged_arr* _temp1668= Cyc_Toc_fresh_label(); struct Cyc_Absyn_Exp*
! _temp1669= Cyc_Absyn_structarrow_exp( rcast, Cyc_Absyn_fieldname( cnt), 0); if(
! Cyc_Toc_is_void_star( Cyc_Toc_typ_to_c( _temp1664))){ _temp1669= Cyc_Absyn_cast_exp(
! _temp1667, _temp1669, 0);} decls=({ struct Cyc_List_List* _temp1670=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1670->hd=( void*)({
! struct _tuple12* _temp1671=( struct _tuple12*) _region_malloc( rgn, sizeof(
! struct _tuple12)); _temp1671->f1= _temp1665; _temp1671->f2= _temp1667; _temp1671;});
! _temp1670->tl= decls; _temp1670;});{ struct _tuple11 _temp1672= Cyc_Toc_xlate_pat(
! nv, rgn, _temp1666, Cyc_Absyn_var_exp( _temp1665, 0), _temp1669, _temp1663,
! succ_lab, fail_lab, decls); nv= _temp1672.f1; decls= _temp1672.f2;{ struct Cyc_Absyn_Stmt*
! _temp1673= _temp1672.f3; struct Cyc_Absyn_Stmt* _temp1674= Cyc_Absyn_assign_stmt(
! Cyc_Absyn_var_exp( _temp1665, 0), _temp1669, 0); struct Cyc_Absyn_Stmt*
! _temp1675= Cyc_Absyn_seq_stmt( _temp1674, _temp1673, 0); ss=({ struct Cyc_List_List*
! _temp1676=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1676->hd=( void*) Cyc_Absyn_label_stmt( _temp1668, _temp1675, 0); _temp1676->tl=
! ss; _temp1676;}); succ_lab= _temp1668;}}}} if( ss ==  0){ ss=({ struct Cyc_List_List*
! _temp1677=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1677->hd=( void*) Cyc_Absyn_goto_stmt( succ_lab, 0); _temp1677->tl= 0;
! _temp1677;});}{ struct Cyc_Absyn_Exp* test_exp; if( _temp1640->is_xtunion){
  struct Cyc_Absyn_Exp* e2= Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ( Cyc_Absyn_void_star_typ(),
  Cyc_Toc_mt_tq), r, 0); struct Cyc_Absyn_Exp* e1= Cyc_Absyn_deref_exp( e2, 0);
! struct Cyc_Absyn_Exp* e= Cyc_Absyn_var_exp( _temp1638->name, 0); test_exp= Cyc_Absyn_eq_exp(
  e1, e, 0); s= Cyc_Absyn_ifthenelse_stmt( Cyc_Absyn_eq_exp( e1, e, 0), Cyc_Absyn_seq_stmts(
  ss, 0), Cyc_Absyn_goto_stmt( fail_lab, 0), 0);} else{ unsigned int max_tag= 0;{
! struct Cyc_List_List* _temp1678=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1640->fields))->v; for( 0; _temp1678 !=  0; _temp1678=((
! struct Cyc_List_List*) _check_null( _temp1678))->tl){ struct Cyc_Absyn_Tunionfield*
! _temp1679=( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null(
! _temp1678))->hd; if( _temp1679->typs ==  0){ max_tag ++;}}}{ struct Cyc_Absyn_Exp*
  max_tag_exp= Cyc_Absyn_uint_exp( max_tag, 0); struct Cyc_Absyn_Exp* e3= Cyc_Absyn_cast_exp(
  Cyc_Absyn_cstar_typ( Cyc_Absyn_sint_t, Cyc_Toc_mt_tq), r, 0); struct Cyc_Absyn_Exp*
  e1= Cyc_Absyn_deref_exp( e3, 0); struct Cyc_Absyn_Exp* e5= Cyc_Absyn_gt_exp( Cyc_Absyn_cast_exp(
  Cyc_Absyn_uint_t, r, 0), max_tag_exp, 0); struct Cyc_Absyn_Exp* e= Cyc_Absyn_var_exp(
! _temp1638->name, 0); test_exp= max_tag >  0? Cyc_Absyn_and_exp( e5, Cyc_Absyn_eq_exp(
  e1, e, 0), 0): Cyc_Absyn_eq_exp( e1, e, 0);}} s= Cyc_Absyn_ifthenelse_stmt(
  test_exp, Cyc_Absyn_seq_stmts( ss, 0), Cyc_Absyn_goto_stmt( fail_lab, 0), 0);
! goto _LL1566;}} _LL1588: _temp1644= _temp1642; goto _LL1590; _LL1590: { struct
  Cyc_List_List* ss= 0; int cnt=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp1644);{ struct Cyc_List_List* _temp1680=(( struct Cyc_List_List*(*)( struct
! _RegionHandle*, struct Cyc_List_List* x)) Cyc_List_rrev)( rgn, _temp1644); for(
! 0; _temp1680 !=  0;( _temp1680=(( struct Cyc_List_List*) _check_null( _temp1680))->tl,
! cnt --)){ struct Cyc_Absyn_Pat* _temp1681=( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*)
! _check_null( _temp1680))->hd; if(( void*) _temp1681->r == ( void*) Cyc_Absyn_Wild_p){
! continue;}{ struct _tuple0* _temp1682= Cyc_Toc_temp_var(); void* _temp1683=(
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp1681->topt))->v; struct
! _tagged_arr* _temp1684= Cyc_Toc_fresh_label(); decls=({ struct Cyc_List_List*
! _temp1685=( struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp1685->hd=( void*)({ struct _tuple12* _temp1686=( struct _tuple12*)
! _region_malloc( rgn, sizeof( struct _tuple12)); _temp1686->f1= _temp1682;
! _temp1686->f2= Cyc_Toc_typ_to_c( _temp1683); _temp1686;}); _temp1685->tl= decls;
! _temp1685;});{ struct _tuple11 _temp1687= Cyc_Toc_xlate_pat( nv, rgn, _temp1683,
! Cyc_Absyn_var_exp( _temp1682, 0), Cyc_Absyn_structmember_exp( path, Cyc_Absyn_fieldname(
! cnt), 0), _temp1681, succ_lab, fail_lab, decls); nv= _temp1687.f1; decls=
! _temp1687.f2;{ struct Cyc_Absyn_Stmt* _temp1688= _temp1687.f3; struct Cyc_Absyn_Stmt*
! _temp1689= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp(
! _temp1682, 0), Cyc_Absyn_structmember_exp( r, Cyc_Absyn_fieldname( cnt), 0), 0),
! _temp1688, 0); ss=({ struct Cyc_List_List* _temp1690=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1690->hd=( void*) Cyc_Absyn_label_stmt(
! _temp1684, _temp1689, 0); _temp1690->tl= ss; _temp1690;}); succ_lab= _temp1684;}}}}}
! if( ss ==  0){ ss=({ struct Cyc_List_List* _temp1691=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1691->hd=( void*) Cyc_Absyn_goto_stmt(
! succ_lab, 0); _temp1691->tl= 0; _temp1691;});} s= Cyc_Absyn_seq_stmts( ss, 0);
! goto _LL1566;} _LL1592: { struct Cyc_List_List* ss= 0;{ struct Cyc_List_List*
! _temp1692=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List*
! x)) Cyc_List_rrev)( rgn, _temp1646); for( 0; _temp1692 !=  0; _temp1692=((
! struct Cyc_List_List*) _check_null( _temp1692))->tl){ struct _tuple13* _temp1693=(
! struct _tuple13*)(( struct Cyc_List_List*) _check_null( _temp1692))->hd; struct
! Cyc_Absyn_Pat* _temp1694=(* _temp1693).f2; if(( void*) _temp1694->r == ( void*)
! Cyc_Absyn_Wild_p){ continue;}{ struct _tagged_arr* f;{ void* _temp1695=( void*)((
! struct Cyc_List_List*) _check_null((* _temp1693).f1))->hd; struct _tagged_arr*
! _temp1701; _LL1697: if(*(( int*) _temp1695) ==  Cyc_Absyn_FieldName){ _LL1702:
! _temp1701=(( struct Cyc_Absyn_FieldName_struct*) _temp1695)->f1; goto _LL1698;}
! else{ goto _LL1699;} _LL1699: goto _LL1700; _LL1698: f= _temp1701; goto _LL1696;
! _LL1700:( int) _throw(( void*) Cyc_Toc_Match_error); _LL1696:;}{ struct _tuple0*
! _temp1703= Cyc_Toc_temp_var(); void* _temp1704=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1694->topt))->v; void* _temp1705= Cyc_Toc_typ_to_c( _temp1704);
! struct _tagged_arr* _temp1706= Cyc_Toc_fresh_label(); decls=({ struct Cyc_List_List*
! _temp1707=( struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp1707->hd=( void*)({ struct _tuple12* _temp1708=( struct _tuple12*)
! _region_malloc( rgn, sizeof( struct _tuple12)); _temp1708->f1= _temp1703;
! _temp1708->f2= _temp1705; _temp1708;}); _temp1707->tl= decls; _temp1707;});{
! struct _tuple11 _temp1709= Cyc_Toc_xlate_pat( nv, rgn, _temp1704, Cyc_Absyn_var_exp(
! _temp1703, 0), Cyc_Absyn_structmember_exp( path, f, 0), _temp1694, succ_lab,
! fail_lab, decls); nv= _temp1709.f1; decls= _temp1709.f2;{ struct Cyc_Absyn_Exp*
! _temp1710= Cyc_Absyn_structmember_exp( r, f, 0); if( Cyc_Toc_is_void_star(( void*)((
  struct Cyc_Absyn_Structfield*) _check_null( Cyc_Absyn_lookup_field(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp1652->fields))->v, f)))->type)){
! _temp1710= Cyc_Absyn_cast_exp( _temp1705, _temp1710, 0);}{ struct Cyc_Absyn_Stmt*
! _temp1711= _temp1709.f3; struct Cyc_Absyn_Stmt* _temp1712= Cyc_Absyn_seq_stmt(
! Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp( _temp1703, 0), _temp1710, 0),
! _temp1711, 0); ss=({ struct Cyc_List_List* _temp1713=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1713->hd=( void*) Cyc_Absyn_label_stmt(
! _temp1706, _temp1712, 0); _temp1713->tl= ss; _temp1713;}); succ_lab= _temp1706;}}}}}}}
! if( ss ==  0){ ss=({ struct Cyc_List_List* _temp1714=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1714->hd=( void*) Cyc_Absyn_goto_stmt(
! succ_lab, 0); _temp1714->tl= 0; _temp1714;});} s= Cyc_Absyn_seq_stmts( ss, 0);
! goto _LL1566;} _LL1594: { struct _tuple0* _temp1715= Cyc_Toc_temp_var(); void*
! _temp1716=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp1654->topt))->v;
! decls=({ struct Cyc_List_List* _temp1717=( struct Cyc_List_List*) _region_malloc(
! rgn, sizeof( struct Cyc_List_List)); _temp1717->hd=( void*)({ struct _tuple12*
! _temp1718=( struct _tuple12*) _region_malloc( rgn, sizeof( struct _tuple12));
! _temp1718->f1= _temp1715; _temp1718->f2= Cyc_Toc_typ_to_c( _temp1716); _temp1718;});
! _temp1717->tl= decls; _temp1717;});{ struct _tuple11 _temp1719= Cyc_Toc_xlate_pat(
! nv, rgn, _temp1716, Cyc_Absyn_var_exp( _temp1715, 0), Cyc_Absyn_deref_exp( path,
! 0), _temp1654, succ_lab, fail_lab, decls); nv= _temp1719.f1; decls= _temp1719.f2;{
! struct Cyc_Absyn_Stmt* _temp1720= _temp1719.f3; struct Cyc_Absyn_Stmt* _temp1721=
! Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp( _temp1715, 0), Cyc_Absyn_deref_exp(
! r, 0), 0), _temp1720, 0); if( Cyc_Toc_is_nullable( t)){ s= Cyc_Absyn_ifthenelse_stmt(
  Cyc_Absyn_eq_exp( r, Cyc_Absyn_signed_int_exp( 0, 0), 0), Cyc_Absyn_goto_stmt(
! fail_lab, 0), _temp1721, 0);} else{ s= _temp1721;} goto _LL1566;}}} _LL1596: s=({
! void* _temp1722[ 0u]={};(( struct Cyc_Absyn_Stmt*(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("unknownid", sizeof(
! unsigned char), 10u), _tag_arr( _temp1722, sizeof( void*), 0u));}); goto _LL1566;
! _LL1598: s=({ void* _temp1723[ 0u]={};(( struct Cyc_Absyn_Stmt*(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("unknowncall",
! sizeof( unsigned char), 12u), _tag_arr( _temp1723, sizeof( void*), 0u));}); goto
! _LL1566; _LL1600: s=({ void* _temp1724[ 0u]={};(( struct Cyc_Absyn_Stmt*(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("unknownfields",
! sizeof( unsigned char), 14u), _tag_arr( _temp1724, sizeof( void*), 0u));}); goto
! _LL1566; _LL1566:;} return({ struct _tuple11 _temp1725; _temp1725.f1= nv;
! _temp1725.f2= decls; _temp1725.f3= s; _temp1725;});} struct _tuple14{ struct
  _tagged_arr* f1; struct _tagged_arr* f2; struct Cyc_Absyn_Switch_clause* f3; } ;
  static struct _tuple14* Cyc_Toc_gen_label( struct _RegionHandle* r, struct Cyc_Absyn_Switch_clause*
! sc){ return({ struct _tuple14* _temp1726=( struct _tuple14*) _region_malloc( r,
! sizeof( struct _tuple14)); _temp1726->f1= Cyc_Toc_fresh_label(); _temp1726->f2=
! Cyc_Toc_fresh_label(); _temp1726->f3= sc; _temp1726;});} static void Cyc_Toc_xlate_switch(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Stmt* whole_s, struct Cyc_Absyn_Exp* e,
! struct Cyc_List_List* scs){ Cyc_Toc_exp_to_c( nv, e);{ void* _temp1727=( void*)((
  struct Cyc_Core_Opt*) _check_null( e->topt))->v; int leave_as_switch;{ void*
! _temp1728= Cyc_Tcutil_compress( _temp1727); _LL1730: if(( unsigned int)
! _temp1728 >  4u?*(( int*) _temp1728) ==  Cyc_Absyn_IntType: 0){ goto _LL1731;}
! else{ goto _LL1732;} _LL1732: if(( unsigned int) _temp1728 >  4u?*(( int*)
! _temp1728) ==  Cyc_Absyn_EnumType: 0){ goto _LL1733;} else{ goto _LL1734;}
! _LL1734: goto _LL1735; _LL1731: goto _LL1733; _LL1733: leave_as_switch= 1; goto
! _LL1729; _LL1735: leave_as_switch= 0; goto _LL1729; _LL1729:;}{ struct Cyc_List_List*
! _temp1736= scs; for( 0; _temp1736 !=  0; _temp1736=(( struct Cyc_List_List*)
! _check_null( _temp1736))->tl){ if(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
  _check_null((( struct Cyc_Absyn_Switch_clause*)(( struct Cyc_List_List*)
! _check_null( _temp1736))->hd)->pat_vars))->v !=  0? 1:(( struct Cyc_Absyn_Switch_clause*)((
! struct Cyc_List_List*) _check_null( _temp1736))->hd)->where_clause !=  0){
  leave_as_switch= 0; break;}}} if( leave_as_switch){ struct _tagged_arr* next_l=
! Cyc_Toc_fresh_label();{ struct Cyc_List_List* _temp1737= scs; for( 0; _temp1737
! !=  0; _temp1737=(( struct Cyc_List_List*) _check_null( _temp1737))->tl){ struct
! Cyc_Absyn_Stmt* _temp1738=(( struct Cyc_Absyn_Switch_clause*)(( struct Cyc_List_List*)
! _check_null( _temp1737))->hd)->body;(( struct Cyc_Absyn_Switch_clause*)(( struct
! Cyc_List_List*) _check_null( _temp1737))->hd)->body= Cyc_Absyn_label_stmt(
! next_l, _temp1738, 0); next_l= Cyc_Toc_fresh_label(); Cyc_Toc_stmt_to_c( Cyc_Toc_switch_as_switch_env(
! nv, next_l), _temp1738);}} return;}{ struct _tuple0* v= Cyc_Toc_temp_var();
  struct Cyc_Absyn_Exp* r= Cyc_Absyn_var_exp( v, 0); struct Cyc_Absyn_Exp* path=
  Cyc_Absyn_var_exp( v, 0); struct _tagged_arr* end_l= Cyc_Toc_fresh_label();
! struct _RegionHandle _temp1739= _new_region(); struct _RegionHandle* rgn=&
! _temp1739; _push_region( rgn);{ struct Cyc_List_List* lscs=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple14*(* f)( struct _RegionHandle*, struct Cyc_Absyn_Switch_clause*),
  struct _RegionHandle* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Toc_gen_label,
  rgn, scs); struct Cyc_List_List* test_stmts= 0; struct Cyc_List_List* nvs= 0;
! struct Cyc_List_List* decls= 0;{ struct Cyc_List_List* _temp1740= lscs; for( 0;
! _temp1740 !=  0; _temp1740=(( struct Cyc_List_List*) _check_null( _temp1740))->tl){
  struct Cyc_Absyn_Switch_clause* sc=(*(( struct _tuple14*)(( struct Cyc_List_List*)
! _check_null( _temp1740))->hd)).f3; struct _tagged_arr* fail_lab=(( struct Cyc_List_List*)
! _check_null( _temp1740))->tl ==  0? end_l:(*(( struct _tuple14*)(( struct Cyc_List_List*)
! _check_null((( struct Cyc_List_List*) _check_null( _temp1740))->tl))->hd)).f1;
  struct _tagged_arr* succ_lab=(*(( struct _tuple14*)(( struct Cyc_List_List*)
! _check_null( _temp1740))->hd)).f2; if( sc->where_clause ==  0){ struct _tuple11
! _temp1741= Cyc_Toc_xlate_pat( nv, rgn, _temp1727, r, path, sc->pattern, succ_lab,
! fail_lab, decls); nvs=({ struct Cyc_List_List* _temp1742=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1742->hd=( void*)
! _temp1741.f1; _temp1742->tl= nvs; _temp1742;}); decls= _temp1741.f2; test_stmts=({
! struct Cyc_List_List* _temp1743=( struct Cyc_List_List*) _region_malloc( rgn,
! sizeof( struct Cyc_List_List)); _temp1743->hd=( void*) Cyc_Absyn_label_stmt((*((
! struct _tuple14*)(( struct Cyc_List_List*) _check_null( _temp1740))->hd)).f1,
! _temp1741.f3, 0); _temp1743->tl= test_stmts; _temp1743;});} else{ struct Cyc_Absyn_Exp*
! _temp1744=( struct Cyc_Absyn_Exp*) _check_null( sc->where_clause); struct
! _tagged_arr* _temp1745= Cyc_Toc_fresh_label(); struct _tuple11 _temp1746= Cyc_Toc_xlate_pat(
! nv, rgn, _temp1727, r, path, sc->pattern, _temp1745, fail_lab, decls); Cyc_Toc_exp_to_c(
! _temp1746.f1, _temp1744); nvs=({ struct Cyc_List_List* _temp1747=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1747->hd=( void*)
! _temp1746.f1; _temp1747->tl= nvs; _temp1747;}); decls= _temp1746.f2;{ struct Cyc_Absyn_Stmt*
! s2= Cyc_Absyn_ifthenelse_stmt( _temp1744, Cyc_Absyn_goto_stmt( succ_lab, 0), Cyc_Absyn_goto_stmt(
! fail_lab, 0), 0); struct Cyc_Absyn_Stmt* s3= Cyc_Absyn_label_stmt( _temp1745, s2,
! 0); test_stmts=({ struct Cyc_List_List* _temp1748=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1748->hd=( void*) Cyc_Absyn_label_stmt((*((
! struct _tuple14*)(( struct Cyc_List_List*) _check_null( _temp1740))->hd)).f1,
! Cyc_Absyn_seq_stmt( _temp1746.f3, s3, 0), 0); _temp1748->tl= test_stmts;
! _temp1748;});}}}}{ struct Cyc_Absyn_Stmt* _temp1749= Cyc_Absyn_seq_stmts(((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  test_stmts), 0); nvs=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  nvs);{ struct Cyc_Absyn_Stmt* clauses= Cyc_Absyn_skip_stmt( 0); if( lscs !=  0){
  for( 0;(( struct Cyc_List_List*) _check_null( lscs))->tl !=  0;( lscs=(( struct
  Cyc_List_List*) _check_null( lscs))->tl, nvs=(( struct Cyc_List_List*)
! _check_null( nvs))->tl)){ struct Cyc_Toc_Env* _temp1750=( struct Cyc_Toc_Env*)((
  struct Cyc_List_List*) _check_null( nvs))->hd; struct Cyc_Absyn_Stmt* s=((*((
  struct _tuple14*)(( struct Cyc_List_List*) _check_null( lscs))->hd)).f3)->body;
! Cyc_Toc_stmt_to_c( Cyc_Toc_non_last_switchclause_env( _temp1750, end_l,(*((
  struct _tuple14*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
  _check_null( lscs))->tl))->hd)).f2,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
  _check_null(((*(( struct _tuple14*)(( struct Cyc_List_List*) _check_null(((
--- 2715,3019 ----
  struct _tuple11 Cyc_Toc_xlate_pat( struct Cyc_Toc_Env* nv, struct _RegionHandle*
  rgn, void* t, struct Cyc_Absyn_Exp* r, struct Cyc_Absyn_Exp* path, struct Cyc_Absyn_Pat*
  p, struct _tagged_arr* succ_lab, struct _tagged_arr* fail_lab, struct Cyc_List_List*
! decls){ struct Cyc_Absyn_Stmt* s;{ void* _temp1508=( void*) p->r; struct Cyc_Absyn_Vardecl*
! _temp1544; struct Cyc_Absyn_Vardecl _temp1546; struct _tuple0* _temp1547; struct
! Cyc_Absyn_Vardecl* _temp1549; int _temp1551; void* _temp1553; unsigned char
! _temp1555; struct _tagged_arr _temp1557; struct Cyc_Absyn_Enumfield* _temp1559;
! struct Cyc_Absyn_Enumdecl* _temp1561; struct Cyc_List_List* _temp1563; struct
! Cyc_List_List* _temp1565; struct Cyc_Absyn_Tunionfield* _temp1567; struct Cyc_Absyn_Tuniondecl*
! _temp1569; struct Cyc_Absyn_Pat* _temp1572; struct Cyc_Absyn_Pat _temp1574; void*
! _temp1575; struct Cyc_List_List* _temp1577; struct Cyc_List_List* _temp1579;
! struct Cyc_Absyn_Tunionfield* _temp1581; struct Cyc_Absyn_Tuniondecl* _temp1583;
! struct Cyc_List_List* _temp1585; struct Cyc_List_List* _temp1587; struct Cyc_List_List*
! _temp1589; struct Cyc_List_List* _temp1591; struct Cyc_Core_Opt* _temp1593;
! struct Cyc_Absyn_Structdecl* _temp1595; struct Cyc_Absyn_Pat* _temp1597; _LL1510:
! if(( unsigned int) _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_Var_p: 0){
! _LL1545: _temp1544=(( struct Cyc_Absyn_Var_p_struct*) _temp1508)->f1; _temp1546=*
! _temp1544; _LL1548: _temp1547= _temp1546.name; goto _LL1511;} else{ goto _LL1512;}
! _LL1512: if( _temp1508 == ( void*) Cyc_Absyn_Wild_p){ goto _LL1513;} else{ goto
! _LL1514;} _LL1514: if(( unsigned int) _temp1508 >  2u?*(( int*) _temp1508) == 
! Cyc_Absyn_Reference_p: 0){ _LL1550: _temp1549=(( struct Cyc_Absyn_Reference_p_struct*)
! _temp1508)->f1; goto _LL1515;} else{ goto _LL1516;} _LL1516: if( _temp1508 == (
! void*) Cyc_Absyn_Null_p){ goto _LL1517;} else{ goto _LL1518;} _LL1518: if((
! unsigned int) _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_Int_p: 0){
! _LL1554: _temp1553=( void*)(( struct Cyc_Absyn_Int_p_struct*) _temp1508)->f1;
! goto _LL1552; _LL1552: _temp1551=(( struct Cyc_Absyn_Int_p_struct*) _temp1508)->f2;
! goto _LL1519;} else{ goto _LL1520;} _LL1520: if(( unsigned int) _temp1508 >  2u?*((
! int*) _temp1508) ==  Cyc_Absyn_Char_p: 0){ _LL1556: _temp1555=(( struct Cyc_Absyn_Char_p_struct*)
! _temp1508)->f1; goto _LL1521;} else{ goto _LL1522;} _LL1522: if(( unsigned int)
! _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_Float_p: 0){ _LL1558:
! _temp1557=(( struct Cyc_Absyn_Float_p_struct*) _temp1508)->f1; goto _LL1523;}
! else{ goto _LL1524;} _LL1524: if(( unsigned int) _temp1508 >  2u?*(( int*)
! _temp1508) ==  Cyc_Absyn_Enum_p: 0){ _LL1562: _temp1561=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp1508)->f1; goto _LL1560; _LL1560: _temp1559=(( struct Cyc_Absyn_Enum_p_struct*)
! _temp1508)->f2; goto _LL1525;} else{ goto _LL1526;} _LL1526: if(( unsigned int)
! _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_Tunion_p: 0){ _LL1570:
! _temp1569=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1508)->f1; goto _LL1568;
! _LL1568: _temp1567=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1508)->f2; goto
! _LL1566; _LL1566: _temp1565=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1508)->f3;
! goto _LL1564; _LL1564: _temp1563=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1508)->f4;
! if( _temp1563 ==  0){ goto _LL1527;} else{ goto _LL1528;}} else{ goto _LL1528;}
! _LL1528: if(( unsigned int) _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_Pointer_p:
! 0){ _LL1573: _temp1572=(( struct Cyc_Absyn_Pointer_p_struct*) _temp1508)->f1;
! _temp1574=* _temp1572; _LL1576: _temp1575=( void*) _temp1574.r; if((
! unsigned int) _temp1575 >  2u?*(( int*) _temp1575) ==  Cyc_Absyn_Tunion_p: 0){
! _LL1584: _temp1583=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1575)->f1; goto
! _LL1582; _LL1582: _temp1581=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1575)->f2;
! goto _LL1580; _LL1580: _temp1579=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1575)->f3;
! goto _LL1578; _LL1578: _temp1577=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1575)->f4;
! goto _LL1571;} else{ goto _LL1530;}} else{ goto _LL1530;} _LL1571: if( _temp1577
! !=  0){ goto _LL1529;} else{ goto _LL1530;} _LL1530: if(( unsigned int)
! _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_Tunion_p: 0){ _LL1586:
! _temp1585=(( struct Cyc_Absyn_Tunion_p_struct*) _temp1508)->f4; goto _LL1531;}
! else{ goto _LL1532;} _LL1532: if(( unsigned int) _temp1508 >  2u?*(( int*)
! _temp1508) ==  Cyc_Absyn_Tuple_p: 0){ _LL1588: _temp1587=(( struct Cyc_Absyn_Tuple_p_struct*)
! _temp1508)->f1; goto _LL1533;} else{ goto _LL1534;} _LL1534: if(( unsigned int)
! _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_Struct_p: 0){ _LL1596:
! _temp1595=(( struct Cyc_Absyn_Struct_p_struct*) _temp1508)->f1; goto _LL1594;
! _LL1594: _temp1593=(( struct Cyc_Absyn_Struct_p_struct*) _temp1508)->f2; goto
! _LL1592; _LL1592: _temp1591=(( struct Cyc_Absyn_Struct_p_struct*) _temp1508)->f3;
! goto _LL1590; _LL1590: _temp1589=(( struct Cyc_Absyn_Struct_p_struct*) _temp1508)->f4;
! goto _LL1535;} else{ goto _LL1536;} _LL1536: if(( unsigned int) _temp1508 >  2u?*((
! int*) _temp1508) ==  Cyc_Absyn_Pointer_p: 0){ _LL1598: _temp1597=(( struct Cyc_Absyn_Pointer_p_struct*)
! _temp1508)->f1; goto _LL1537;} else{ goto _LL1538;} _LL1538: if(( unsigned int)
! _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_UnknownId_p: 0){ goto _LL1539;}
! else{ goto _LL1540;} _LL1540: if(( unsigned int) _temp1508 >  2u?*(( int*)
! _temp1508) ==  Cyc_Absyn_UnknownCall_p: 0){ goto _LL1541;} else{ goto _LL1542;}
! _LL1542: if(( unsigned int) _temp1508 >  2u?*(( int*) _temp1508) ==  Cyc_Absyn_UnknownFields_p:
! 0){ goto _LL1543;} else{ goto _LL1509;} _LL1511: nv= Cyc_Toc_add_varmap( nv,
! _temp1547, r); goto _LL1513; _LL1513: s= Cyc_Absyn_goto_stmt( succ_lab, 0); goto
! _LL1509; _LL1515: { struct _tuple0* _temp1599= Cyc_Toc_temp_var(); decls=({
! struct Cyc_List_List* _temp1600=( struct Cyc_List_List*) _region_malloc( rgn,
! sizeof( struct Cyc_List_List)); _temp1600->hd=( void*)({ struct _tuple12*
! _temp1601=( struct _tuple12*) _region_malloc( rgn, sizeof( struct _tuple12));
! _temp1601->f1= _temp1599; _temp1601->f2= Cyc_Absyn_cstar_typ( Cyc_Toc_typ_to_c(
! t), Cyc_Toc_mt_tq); _temp1601;}); _temp1600->tl= decls; _temp1600;}); nv= Cyc_Toc_add_varmap(
! nv, _temp1549->name, Cyc_Absyn_var_exp( _temp1599, 0)); s= Cyc_Absyn_seq_stmt(
! Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp( _temp1599, 0), Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ(
  Cyc_Toc_typ_to_c( t), Cyc_Toc_mt_tq), Cyc_Absyn_address_exp( path, 0), 0), 0),
! Cyc_Absyn_goto_stmt( succ_lab, 0), 0); goto _LL1509;} _LL1517: s= Cyc_Toc_if_eq_goto_stmt(
! r, Cyc_Absyn_signed_int_exp( 0, 0), succ_lab, fail_lab); goto _LL1509; _LL1519:
! s= Cyc_Toc_if_eq_goto_stmt( r, Cyc_Absyn_int_exp( _temp1553, _temp1551, 0),
! succ_lab, fail_lab); goto _LL1509; _LL1521: s= Cyc_Toc_if_eq_goto_stmt( r, Cyc_Absyn_char_exp(
! _temp1555, 0), succ_lab, fail_lab); goto _LL1509; _LL1523: s= Cyc_Toc_if_eq_goto_stmt(
! r, Cyc_Absyn_float_exp( _temp1557, 0), succ_lab, fail_lab); goto _LL1509;
! _LL1525: s= Cyc_Toc_if_eq_goto_stmt( r, Cyc_Absyn_new_exp(( void*)({ struct Cyc_Absyn_Enum_e_struct*
! _temp1602=( struct Cyc_Absyn_Enum_e_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Enum_e_struct));
! _temp1602[ 0]=({ struct Cyc_Absyn_Enum_e_struct _temp1603; _temp1603.tag= Cyc_Absyn_Enum_e;
! _temp1603.f1= _temp1559->name; _temp1603.f2=( struct Cyc_Absyn_Enumdecl*)
! _temp1561; _temp1603.f3=( struct Cyc_Absyn_Enumfield*) _temp1559; _temp1603;});
! _temp1602;}), 0), succ_lab, fail_lab); goto _LL1509; _LL1527: { struct Cyc_Absyn_Exp*
! cmp_exp= Cyc_Absyn_var_exp( _temp1567->name, 0); if( ! _temp1569->is_xtunion){
  cmp_exp= Cyc_Absyn_cast_exp( Cyc_Absyn_void_star_typ(), cmp_exp, 0);} s= Cyc_Toc_if_eq_goto_stmt(
! r, cmp_exp, succ_lab, fail_lab); goto _LL1509;} _LL1529: { struct Cyc_List_List*
! ss= 0; int cnt=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)( _temp1577);
! struct _tuple0* tufstrct= Cyc_Toc_collapse_qvar_tag( _temp1581->name, _tag_arr("_struct",
  sizeof( unsigned char), 8u)); struct Cyc_Absyn_Exp* rcast= Cyc_Absyn_cast_exp(
  Cyc_Absyn_cstar_typ( Cyc_Absyn_strctq( tufstrct), Cyc_Toc_mt_tq), r, 0); struct
! Cyc_List_List* _temp1604=(( struct Cyc_List_List*(*)( struct _RegionHandle*,
! struct Cyc_List_List* x)) Cyc_List_rrev)( rgn, _temp1581->typs); struct Cyc_List_List*
! _temp1605=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List*
! x)) Cyc_List_rrev)( rgn, _temp1577); for( 0; _temp1605 !=  0;((( _temp1605=((
! struct Cyc_List_List*) _check_null( _temp1605))->tl, _temp1604=(( struct Cyc_List_List*)
! _check_null( _temp1604))->tl)), cnt --)){ struct Cyc_Absyn_Pat* _temp1606=(
! struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*) _check_null( _temp1605))->hd;
! if(( void*) _temp1606->r == ( void*) Cyc_Absyn_Wild_p){ continue;}{ void*
! _temp1607=(*(( struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp1604))->hd)).f2;
! struct _tuple0* _temp1608= Cyc_Toc_temp_var(); void* _temp1609=( void*)(( struct
! Cyc_Core_Opt*) _check_null( _temp1606->topt))->v; void* _temp1610= Cyc_Toc_typ_to_c(
! _temp1609); struct _tagged_arr* _temp1611= Cyc_Toc_fresh_label(); struct Cyc_Absyn_Exp*
! _temp1612= Cyc_Absyn_structarrow_exp( rcast, Cyc_Absyn_fieldname( cnt), 0); if(
! Cyc_Toc_is_void_star( Cyc_Toc_typ_to_c( _temp1607))){ _temp1612= Cyc_Absyn_cast_exp(
! _temp1610, _temp1612, 0);} decls=({ struct Cyc_List_List* _temp1613=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1613->hd=( void*)({
! struct _tuple12* _temp1614=( struct _tuple12*) _region_malloc( rgn, sizeof(
! struct _tuple12)); _temp1614->f1= _temp1608; _temp1614->f2= _temp1610; _temp1614;});
! _temp1613->tl= decls; _temp1613;});{ struct _tuple11 _temp1615= Cyc_Toc_xlate_pat(
! nv, rgn, _temp1609, Cyc_Absyn_var_exp( _temp1608, 0), _temp1612, _temp1606,
! succ_lab, fail_lab, decls); nv= _temp1615.f1; decls= _temp1615.f2;{ struct Cyc_Absyn_Stmt*
! _temp1616= _temp1615.f3; struct Cyc_Absyn_Stmt* _temp1617= Cyc_Absyn_assign_stmt(
! Cyc_Absyn_var_exp( _temp1608, 0), _temp1612, 0); struct Cyc_Absyn_Stmt*
! _temp1618= Cyc_Absyn_seq_stmt( _temp1617, _temp1616, 0); ss=({ struct Cyc_List_List*
! _temp1619=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1619->hd=( void*) Cyc_Absyn_label_stmt( _temp1611, _temp1618, 0); _temp1619->tl=
! ss; _temp1619;}); succ_lab= _temp1611;}}}} if( ss ==  0){ ss=({ struct Cyc_List_List*
! _temp1620=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1620->hd=( void*) Cyc_Absyn_goto_stmt( succ_lab, 0); _temp1620->tl= 0;
! _temp1620;});}{ struct Cyc_Absyn_Exp* test_exp; if( _temp1583->is_xtunion){
  struct Cyc_Absyn_Exp* e2= Cyc_Absyn_cast_exp( Cyc_Absyn_cstar_typ( Cyc_Absyn_void_star_typ(),
  Cyc_Toc_mt_tq), r, 0); struct Cyc_Absyn_Exp* e1= Cyc_Absyn_deref_exp( e2, 0);
! struct Cyc_Absyn_Exp* e= Cyc_Absyn_var_exp( _temp1581->name, 0); test_exp= Cyc_Absyn_eq_exp(
  e1, e, 0); s= Cyc_Absyn_ifthenelse_stmt( Cyc_Absyn_eq_exp( e1, e, 0), Cyc_Absyn_seq_stmts(
  ss, 0), Cyc_Absyn_goto_stmt( fail_lab, 0), 0);} else{ unsigned int max_tag= 0;{
! struct Cyc_List_List* _temp1621=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1583->fields))->v; for( 0; _temp1621 !=  0; _temp1621=((
! struct Cyc_List_List*) _check_null( _temp1621))->tl){ struct Cyc_Absyn_Tunionfield*
! _temp1622=( struct Cyc_Absyn_Tunionfield*)(( struct Cyc_List_List*) _check_null(
! _temp1621))->hd; if( _temp1622->typs ==  0){ max_tag ++;}}}{ struct Cyc_Absyn_Exp*
  max_tag_exp= Cyc_Absyn_uint_exp( max_tag, 0); struct Cyc_Absyn_Exp* e3= Cyc_Absyn_cast_exp(
  Cyc_Absyn_cstar_typ( Cyc_Absyn_sint_t, Cyc_Toc_mt_tq), r, 0); struct Cyc_Absyn_Exp*
  e1= Cyc_Absyn_deref_exp( e3, 0); struct Cyc_Absyn_Exp* e5= Cyc_Absyn_gt_exp( Cyc_Absyn_cast_exp(
  Cyc_Absyn_uint_t, r, 0), max_tag_exp, 0); struct Cyc_Absyn_Exp* e= Cyc_Absyn_var_exp(
! _temp1581->name, 0); test_exp= max_tag >  0? Cyc_Absyn_and_exp( e5, Cyc_Absyn_eq_exp(
  e1, e, 0), 0): Cyc_Absyn_eq_exp( e1, e, 0);}} s= Cyc_Absyn_ifthenelse_stmt(
  test_exp, Cyc_Absyn_seq_stmts( ss, 0), Cyc_Absyn_goto_stmt( fail_lab, 0), 0);
! goto _LL1509;}} _LL1531: _temp1587= _temp1585; goto _LL1533; _LL1533: { struct
  Cyc_List_List* ss= 0; int cnt=(( int(*)( struct Cyc_List_List* x)) Cyc_List_length)(
! _temp1587);{ struct Cyc_List_List* _temp1623=(( struct Cyc_List_List*(*)( struct
! _RegionHandle*, struct Cyc_List_List* x)) Cyc_List_rrev)( rgn, _temp1587); for(
! 0; _temp1623 !=  0;( _temp1623=(( struct Cyc_List_List*) _check_null( _temp1623))->tl,
! cnt --)){ struct Cyc_Absyn_Pat* _temp1624=( struct Cyc_Absyn_Pat*)(( struct Cyc_List_List*)
! _check_null( _temp1623))->hd; if(( void*) _temp1624->r == ( void*) Cyc_Absyn_Wild_p){
! continue;}{ struct _tuple0* _temp1625= Cyc_Toc_temp_var(); void* _temp1626=(
! void*)(( struct Cyc_Core_Opt*) _check_null( _temp1624->topt))->v; struct
! _tagged_arr* _temp1627= Cyc_Toc_fresh_label(); decls=({ struct Cyc_List_List*
! _temp1628=( struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp1628->hd=( void*)({ struct _tuple12* _temp1629=( struct _tuple12*)
! _region_malloc( rgn, sizeof( struct _tuple12)); _temp1629->f1= _temp1625;
! _temp1629->f2= Cyc_Toc_typ_to_c( _temp1626); _temp1629;}); _temp1628->tl= decls;
! _temp1628;});{ struct _tuple11 _temp1630= Cyc_Toc_xlate_pat( nv, rgn, _temp1626,
! Cyc_Absyn_var_exp( _temp1625, 0), Cyc_Absyn_structmember_exp( path, Cyc_Absyn_fieldname(
! cnt), 0), _temp1624, succ_lab, fail_lab, decls); nv= _temp1630.f1; decls=
! _temp1630.f2;{ struct Cyc_Absyn_Stmt* _temp1631= _temp1630.f3; struct Cyc_Absyn_Stmt*
! _temp1632= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp(
! _temp1625, 0), Cyc_Absyn_structmember_exp( r, Cyc_Absyn_fieldname( cnt), 0), 0),
! _temp1631, 0); ss=({ struct Cyc_List_List* _temp1633=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1633->hd=( void*) Cyc_Absyn_label_stmt(
! _temp1627, _temp1632, 0); _temp1633->tl= ss; _temp1633;}); succ_lab= _temp1627;}}}}}
! if( ss ==  0){ ss=({ struct Cyc_List_List* _temp1634=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1634->hd=( void*) Cyc_Absyn_goto_stmt(
! succ_lab, 0); _temp1634->tl= 0; _temp1634;});} s= Cyc_Absyn_seq_stmts( ss, 0);
! goto _LL1509;} _LL1535: { struct Cyc_List_List* ss= 0;{ struct Cyc_List_List*
! _temp1635=(( struct Cyc_List_List*(*)( struct _RegionHandle*, struct Cyc_List_List*
! x)) Cyc_List_rrev)( rgn, _temp1589); for( 0; _temp1635 !=  0; _temp1635=((
! struct Cyc_List_List*) _check_null( _temp1635))->tl){ struct _tuple13* _temp1636=(
! struct _tuple13*)(( struct Cyc_List_List*) _check_null( _temp1635))->hd; struct
! Cyc_Absyn_Pat* _temp1637=(* _temp1636).f2; if(( void*) _temp1637->r == ( void*)
! Cyc_Absyn_Wild_p){ continue;}{ struct _tagged_arr* f;{ void* _temp1638=( void*)((
! struct Cyc_List_List*) _check_null((* _temp1636).f1))->hd; struct _tagged_arr*
! _temp1644; _LL1640: if(*(( int*) _temp1638) ==  Cyc_Absyn_FieldName){ _LL1645:
! _temp1644=(( struct Cyc_Absyn_FieldName_struct*) _temp1638)->f1; goto _LL1641;}
! else{ goto _LL1642;} _LL1642: goto _LL1643; _LL1641: f= _temp1644; goto _LL1639;
! _LL1643:( int) _throw(( void*) Cyc_Toc_Match_error); _LL1639:;}{ struct _tuple0*
! _temp1646= Cyc_Toc_temp_var(); void* _temp1647=( void*)(( struct Cyc_Core_Opt*)
! _check_null( _temp1637->topt))->v; void* _temp1648= Cyc_Toc_typ_to_c( _temp1647);
! struct _tagged_arr* _temp1649= Cyc_Toc_fresh_label(); decls=({ struct Cyc_List_List*
! _temp1650=( struct Cyc_List_List*) _region_malloc( rgn, sizeof( struct Cyc_List_List));
! _temp1650->hd=( void*)({ struct _tuple12* _temp1651=( struct _tuple12*)
! _region_malloc( rgn, sizeof( struct _tuple12)); _temp1651->f1= _temp1646;
! _temp1651->f2= _temp1648; _temp1651;}); _temp1650->tl= decls; _temp1650;});{
! struct _tuple11 _temp1652= Cyc_Toc_xlate_pat( nv, rgn, _temp1647, Cyc_Absyn_var_exp(
! _temp1646, 0), Cyc_Absyn_structmember_exp( path, f, 0), _temp1637, succ_lab,
! fail_lab, decls); nv= _temp1652.f1; decls= _temp1652.f2;{ struct Cyc_Absyn_Exp*
! _temp1653= Cyc_Absyn_structmember_exp( r, f, 0); if( Cyc_Toc_is_void_star(( void*)((
  struct Cyc_Absyn_Structfield*) _check_null( Cyc_Absyn_lookup_field(( struct Cyc_List_List*)((
! struct Cyc_Core_Opt*) _check_null( _temp1595->fields))->v, f)))->type)){
! _temp1653= Cyc_Absyn_cast_exp( _temp1648, _temp1653, 0);}{ struct Cyc_Absyn_Stmt*
! _temp1654= _temp1652.f3; struct Cyc_Absyn_Stmt* _temp1655= Cyc_Absyn_seq_stmt(
! Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp( _temp1646, 0), _temp1653, 0),
! _temp1654, 0); ss=({ struct Cyc_List_List* _temp1656=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1656->hd=( void*) Cyc_Absyn_label_stmt(
! _temp1649, _temp1655, 0); _temp1656->tl= ss; _temp1656;}); succ_lab= _temp1649;}}}}}}}
! if( ss ==  0){ ss=({ struct Cyc_List_List* _temp1657=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1657->hd=( void*) Cyc_Absyn_goto_stmt(
! succ_lab, 0); _temp1657->tl= 0; _temp1657;});} s= Cyc_Absyn_seq_stmts( ss, 0);
! goto _LL1509;} _LL1537: { struct _tuple0* _temp1658= Cyc_Toc_temp_var(); void*
! _temp1659=( void*)(( struct Cyc_Core_Opt*) _check_null( _temp1597->topt))->v;
! decls=({ struct Cyc_List_List* _temp1660=( struct Cyc_List_List*) _region_malloc(
! rgn, sizeof( struct Cyc_List_List)); _temp1660->hd=( void*)({ struct _tuple12*
! _temp1661=( struct _tuple12*) _region_malloc( rgn, sizeof( struct _tuple12));
! _temp1661->f1= _temp1658; _temp1661->f2= Cyc_Toc_typ_to_c( _temp1659); _temp1661;});
! _temp1660->tl= decls; _temp1660;});{ struct _tuple11 _temp1662= Cyc_Toc_xlate_pat(
! nv, rgn, _temp1659, Cyc_Absyn_var_exp( _temp1658, 0), Cyc_Absyn_deref_exp( path,
! 0), _temp1597, succ_lab, fail_lab, decls); nv= _temp1662.f1; decls= _temp1662.f2;{
! struct Cyc_Absyn_Stmt* _temp1663= _temp1662.f3; struct Cyc_Absyn_Stmt* _temp1664=
! Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt( Cyc_Absyn_var_exp( _temp1658, 0), Cyc_Absyn_deref_exp(
! r, 0), 0), _temp1663, 0); if( Cyc_Toc_is_nullable( t)){ s= Cyc_Absyn_ifthenelse_stmt(
  Cyc_Absyn_eq_exp( r, Cyc_Absyn_signed_int_exp( 0, 0), 0), Cyc_Absyn_goto_stmt(
! fail_lab, 0), _temp1664, 0);} else{ s= _temp1664;} goto _LL1509;}}} _LL1539: s=({
! void* _temp1665[ 0u]={};(( struct Cyc_Absyn_Stmt*(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("unknownid", sizeof(
! unsigned char), 10u), _tag_arr( _temp1665, sizeof( void*), 0u));}); goto _LL1509;
! _LL1541: s=({ void* _temp1666[ 0u]={};(( struct Cyc_Absyn_Stmt*(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("unknowncall",
! sizeof( unsigned char), 12u), _tag_arr( _temp1666, sizeof( void*), 0u));}); goto
! _LL1509; _LL1543: s=({ void* _temp1667[ 0u]={};(( struct Cyc_Absyn_Stmt*(*)(
  struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("unknownfields",
! sizeof( unsigned char), 14u), _tag_arr( _temp1667, sizeof( void*), 0u));}); goto
! _LL1509; _LL1509:;} return({ struct _tuple11 _temp1668; _temp1668.f1= nv;
! _temp1668.f2= decls; _temp1668.f3= s; _temp1668;});} struct _tuple14{ struct
  _tagged_arr* f1; struct _tagged_arr* f2; struct Cyc_Absyn_Switch_clause* f3; } ;
  static struct _tuple14* Cyc_Toc_gen_label( struct _RegionHandle* r, struct Cyc_Absyn_Switch_clause*
! sc){ return({ struct _tuple14* _temp1669=( struct _tuple14*) _region_malloc( r,
! sizeof( struct _tuple14)); _temp1669->f1= Cyc_Toc_fresh_label(); _temp1669->f2=
! Cyc_Toc_fresh_label(); _temp1669->f3= sc; _temp1669;});} static void Cyc_Toc_xlate_switch(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Stmt* whole_s, struct Cyc_Absyn_Exp* e,
! struct Cyc_List_List* scs){ Cyc_Toc_exp_to_c( nv, e);{ void* _temp1670=( void*)((
  struct Cyc_Core_Opt*) _check_null( e->topt))->v; int leave_as_switch;{ void*
! _temp1671= Cyc_Tcutil_compress( _temp1670); _LL1673: if(( unsigned int)
! _temp1671 >  4u?*(( int*) _temp1671) ==  Cyc_Absyn_IntType: 0){ goto _LL1674;}
! else{ goto _LL1675;} _LL1675: if(( unsigned int) _temp1671 >  4u?*(( int*)
! _temp1671) ==  Cyc_Absyn_EnumType: 0){ goto _LL1676;} else{ goto _LL1677;}
! _LL1677: goto _LL1678; _LL1674: goto _LL1676; _LL1676: leave_as_switch= 1; goto
! _LL1672; _LL1678: leave_as_switch= 0; goto _LL1672; _LL1672:;}{ struct Cyc_List_List*
! _temp1679= scs; for( 0; _temp1679 !=  0; _temp1679=(( struct Cyc_List_List*)
! _check_null( _temp1679))->tl){ if(( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
  _check_null((( struct Cyc_Absyn_Switch_clause*)(( struct Cyc_List_List*)
! _check_null( _temp1679))->hd)->pat_vars))->v !=  0? 1:(( struct Cyc_Absyn_Switch_clause*)((
! struct Cyc_List_List*) _check_null( _temp1679))->hd)->where_clause !=  0){
  leave_as_switch= 0; break;}}} if( leave_as_switch){ struct _tagged_arr* next_l=
! Cyc_Toc_fresh_label();{ struct Cyc_List_List* _temp1680= scs; for( 0; _temp1680
! !=  0; _temp1680=(( struct Cyc_List_List*) _check_null( _temp1680))->tl){ struct
! Cyc_Absyn_Stmt* _temp1681=(( struct Cyc_Absyn_Switch_clause*)(( struct Cyc_List_List*)
! _check_null( _temp1680))->hd)->body;(( struct Cyc_Absyn_Switch_clause*)(( struct
! Cyc_List_List*) _check_null( _temp1680))->hd)->body= Cyc_Absyn_label_stmt(
! next_l, _temp1681, 0); next_l= Cyc_Toc_fresh_label(); Cyc_Toc_stmt_to_c( Cyc_Toc_switch_as_switch_env(
! nv, next_l), _temp1681);}} return;}{ struct _tuple0* v= Cyc_Toc_temp_var();
  struct Cyc_Absyn_Exp* r= Cyc_Absyn_var_exp( v, 0); struct Cyc_Absyn_Exp* path=
  Cyc_Absyn_var_exp( v, 0); struct _tagged_arr* end_l= Cyc_Toc_fresh_label();
! struct _RegionHandle _temp1682= _new_region(); struct _RegionHandle* rgn=&
! _temp1682; _push_region( rgn);{ struct Cyc_List_List* lscs=(( struct Cyc_List_List*(*)(
  struct _RegionHandle*, struct _tuple14*(* f)( struct _RegionHandle*, struct Cyc_Absyn_Switch_clause*),
  struct _RegionHandle* env, struct Cyc_List_List* x)) Cyc_List_rmap_c)( rgn, Cyc_Toc_gen_label,
  rgn, scs); struct Cyc_List_List* test_stmts= 0; struct Cyc_List_List* nvs= 0;
! struct Cyc_List_List* decls= 0;{ struct Cyc_List_List* _temp1683= lscs; for( 0;
! _temp1683 !=  0; _temp1683=(( struct Cyc_List_List*) _check_null( _temp1683))->tl){
  struct Cyc_Absyn_Switch_clause* sc=(*(( struct _tuple14*)(( struct Cyc_List_List*)
! _check_null( _temp1683))->hd)).f3; struct _tagged_arr* fail_lab=(( struct Cyc_List_List*)
! _check_null( _temp1683))->tl ==  0? end_l:(*(( struct _tuple14*)(( struct Cyc_List_List*)
! _check_null((( struct Cyc_List_List*) _check_null( _temp1683))->tl))->hd)).f1;
  struct _tagged_arr* succ_lab=(*(( struct _tuple14*)(( struct Cyc_List_List*)
! _check_null( _temp1683))->hd)).f2; if( sc->where_clause ==  0){ struct _tuple11
! _temp1684= Cyc_Toc_xlate_pat( nv, rgn, _temp1670, r, path, sc->pattern, succ_lab,
! fail_lab, decls); nvs=({ struct Cyc_List_List* _temp1685=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1685->hd=( void*)
! _temp1684.f1; _temp1685->tl= nvs; _temp1685;}); decls= _temp1684.f2; test_stmts=({
! struct Cyc_List_List* _temp1686=( struct Cyc_List_List*) _region_malloc( rgn,
! sizeof( struct Cyc_List_List)); _temp1686->hd=( void*) Cyc_Absyn_label_stmt((*((
! struct _tuple14*)(( struct Cyc_List_List*) _check_null( _temp1683))->hd)).f1,
! _temp1684.f3, 0); _temp1686->tl= test_stmts; _temp1686;});} else{ struct Cyc_Absyn_Exp*
! _temp1687=( struct Cyc_Absyn_Exp*) _check_null( sc->where_clause); struct
! _tagged_arr* _temp1688= Cyc_Toc_fresh_label(); struct _tuple11 _temp1689= Cyc_Toc_xlate_pat(
! nv, rgn, _temp1670, r, path, sc->pattern, _temp1688, fail_lab, decls); Cyc_Toc_exp_to_c(
! _temp1689.f1, _temp1687); nvs=({ struct Cyc_List_List* _temp1690=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1690->hd=( void*)
! _temp1689.f1; _temp1690->tl= nvs; _temp1690;}); decls= _temp1689.f2;{ struct Cyc_Absyn_Stmt*
! s2= Cyc_Absyn_ifthenelse_stmt( _temp1687, Cyc_Absyn_goto_stmt( succ_lab, 0), Cyc_Absyn_goto_stmt(
! fail_lab, 0), 0); struct Cyc_Absyn_Stmt* s3= Cyc_Absyn_label_stmt( _temp1688, s2,
! 0); test_stmts=({ struct Cyc_List_List* _temp1691=( struct Cyc_List_List*)
! _region_malloc( rgn, sizeof( struct Cyc_List_List)); _temp1691->hd=( void*) Cyc_Absyn_label_stmt((*((
! struct _tuple14*)(( struct Cyc_List_List*) _check_null( _temp1683))->hd)).f1,
! Cyc_Absyn_seq_stmt( _temp1689.f3, s3, 0), 0); _temp1691->tl= test_stmts;
! _temp1691;});}}}}{ struct Cyc_Absyn_Stmt* _temp1692= Cyc_Absyn_seq_stmts(((
  struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  test_stmts), 0); nvs=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
  nvs);{ struct Cyc_Absyn_Stmt* clauses= Cyc_Absyn_skip_stmt( 0); if( lscs !=  0){
  for( 0;(( struct Cyc_List_List*) _check_null( lscs))->tl !=  0;( lscs=(( struct
  Cyc_List_List*) _check_null( lscs))->tl, nvs=(( struct Cyc_List_List*)
! _check_null( nvs))->tl)){ struct Cyc_Toc_Env* _temp1693=( struct Cyc_Toc_Env*)((
  struct Cyc_List_List*) _check_null( nvs))->hd; struct Cyc_Absyn_Stmt* s=((*((
  struct _tuple14*)(( struct Cyc_List_List*) _check_null( lscs))->hd)).f3)->body;
! Cyc_Toc_stmt_to_c( Cyc_Toc_non_last_switchclause_env( _temp1693, end_l,(*((
  struct _tuple14*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
  _check_null( lscs))->tl))->hd)).f2,( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
  _check_null(((*(( struct _tuple14*)(( struct Cyc_List_List*) _check_null(((
***************
*** 3112,3130 ****
  struct Cyc_Toc_Env*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
  _check_null( nvs))->tl))->hd), s); clauses= Cyc_Absyn_seq_stmt( clauses, Cyc_Absyn_label_stmt((*((
  struct _tuple14*)(( struct Cyc_List_List*) _check_null( lscs))->hd)).f2, s, 0),
! 0);}{ struct Cyc_Toc_Env* _temp1751=( struct Cyc_Toc_Env*)(( struct Cyc_List_List*)
  _check_null( nvs))->hd; struct Cyc_Absyn_Stmt* s=((*(( struct _tuple14*)((
  struct Cyc_List_List*) _check_null( lscs))->hd)).f3)->body; Cyc_Toc_stmt_to_c(
! Cyc_Toc_last_switchclause_env( _temp1751, end_l), s); clauses= Cyc_Absyn_seq_stmt(
  clauses, Cyc_Absyn_label_stmt((*(( struct _tuple14*)(( struct Cyc_List_List*)
  _check_null( lscs))->hd)).f2, s, 0), 0);}}{ struct Cyc_Absyn_Stmt* res= Cyc_Absyn_seq_stmt(
! _temp1749, Cyc_Absyn_seq_stmt( clauses, Cyc_Absyn_label_stmt( end_l, Cyc_Absyn_skip_stmt(
  0), 0), 0), 0); for( decls; decls !=  0; decls=(( struct Cyc_List_List*)
! _check_null( decls))->tl){ struct _tuple12 _temp1754; void* _temp1755; struct
! _tuple0* _temp1757; struct _tuple12* _temp1752=( struct _tuple12*)(( struct Cyc_List_List*)
! _check_null( decls))->hd; _temp1754=* _temp1752; _LL1758: _temp1757= _temp1754.f1;
! goto _LL1756; _LL1756: _temp1755= _temp1754.f2; goto _LL1753; _LL1753: res= Cyc_Absyn_declare_stmt(
! _temp1757, _temp1755, 0, res, 0);}( void*)( whole_s->r=( void*)(( void*)( Cyc_Absyn_declare_stmt(
  v, Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v),(
  struct Cyc_Absyn_Exp*) e, res, 0))->r));}}}}; _pop_region( rgn);}}} static
  struct Cyc_Absyn_Stmt* Cyc_Toc_letdecl_to_c( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Pat*
--- 3021,3039 ----
  struct Cyc_Toc_Env*)(( struct Cyc_List_List*) _check_null((( struct Cyc_List_List*)
  _check_null( nvs))->tl))->hd), s); clauses= Cyc_Absyn_seq_stmt( clauses, Cyc_Absyn_label_stmt((*((
  struct _tuple14*)(( struct Cyc_List_List*) _check_null( lscs))->hd)).f2, s, 0),
! 0);}{ struct Cyc_Toc_Env* _temp1694=( struct Cyc_Toc_Env*)(( struct Cyc_List_List*)
  _check_null( nvs))->hd; struct Cyc_Absyn_Stmt* s=((*(( struct _tuple14*)((
  struct Cyc_List_List*) _check_null( lscs))->hd)).f3)->body; Cyc_Toc_stmt_to_c(
! Cyc_Toc_last_switchclause_env( _temp1694, end_l), s); clauses= Cyc_Absyn_seq_stmt(
  clauses, Cyc_Absyn_label_stmt((*(( struct _tuple14*)(( struct Cyc_List_List*)
  _check_null( lscs))->hd)).f2, s, 0), 0);}}{ struct Cyc_Absyn_Stmt* res= Cyc_Absyn_seq_stmt(
! _temp1692, Cyc_Absyn_seq_stmt( clauses, Cyc_Absyn_label_stmt( end_l, Cyc_Absyn_skip_stmt(
  0), 0), 0), 0); for( decls; decls !=  0; decls=(( struct Cyc_List_List*)
! _check_null( decls))->tl){ struct _tuple12 _temp1697; void* _temp1698; struct
! _tuple0* _temp1700; struct _tuple12* _temp1695=( struct _tuple12*)(( struct Cyc_List_List*)
! _check_null( decls))->hd; _temp1697=* _temp1695; _LL1701: _temp1700= _temp1697.f1;
! goto _LL1699; _LL1699: _temp1698= _temp1697.f2; goto _LL1696; _LL1696: res= Cyc_Absyn_declare_stmt(
! _temp1700, _temp1698, 0, res, 0);}( void*)( whole_s->r=( void*)(( void*)( Cyc_Absyn_declare_stmt(
  v, Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*) _check_null( e->topt))->v),(
  struct Cyc_Absyn_Exp*) e, res, 0))->r));}}}}; _pop_region( rgn);}}} static
  struct Cyc_Absyn_Stmt* Cyc_Toc_letdecl_to_c( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Pat*
***************
*** 3132,3812 ****
  s); static void Cyc_Toc_local_decl_to_c( struct Cyc_Toc_Env* body_nv, struct Cyc_Toc_Env*
  init_nv, struct Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Stmt* s); struct Cyc_Absyn_Stmt*
  Cyc_Toc_make_npop_handler( int n){ return Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp(
! Cyc_Toc__npop_handler_e,({ struct Cyc_List_List* _temp1759=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List) *  1); _temp1759[ 0]=({ struct Cyc_List_List
! _temp1760; _temp1760.hd=( void*) Cyc_Absyn_uint_exp(( unsigned int)( n -  1), 0);
! _temp1760.tl= 0; _temp1760;}); _temp1759;}), 0), 0);} void Cyc_Toc_do_npop_before(
  int n, struct Cyc_Absyn_Stmt* s){ if( n >  0){( void*)( s->r=( void*)(( void*)(
  Cyc_Absyn_seq_stmt( Cyc_Toc_make_npop_handler( n), Cyc_Absyn_new_stmt(( void*) s->r,
  0), 0))->r));}} static void Cyc_Toc_stmt_to_c( struct Cyc_Toc_Env* nv, struct
! Cyc_Absyn_Stmt* s){ while( 1) { void* _temp1761=( void*) s->r; struct Cyc_Absyn_Exp*
! _temp1803; struct Cyc_Absyn_Stmt* _temp1805; struct Cyc_Absyn_Stmt* _temp1807;
! struct Cyc_Absyn_Exp* _temp1809; struct Cyc_Absyn_Stmt* _temp1811; struct Cyc_Absyn_Stmt*
! _temp1813; struct Cyc_Absyn_Exp* _temp1815; struct Cyc_Absyn_Stmt* _temp1817;
! struct _tuple2 _temp1819; struct Cyc_Absyn_Exp* _temp1821; struct Cyc_Absyn_Stmt*
! _temp1823; struct Cyc_Absyn_Stmt* _temp1825; struct Cyc_Absyn_Stmt* _temp1827;
! struct Cyc_Absyn_Stmt* _temp1829; struct _tuple2 _temp1831; struct Cyc_Absyn_Exp*
! _temp1833; struct _tuple2 _temp1835; struct Cyc_Absyn_Exp* _temp1837; struct Cyc_Absyn_Exp*
! _temp1839; struct Cyc_List_List* _temp1841; struct Cyc_Absyn_Exp* _temp1843;
! struct Cyc_Absyn_Switch_clause** _temp1845; struct Cyc_List_List* _temp1847;
! struct Cyc_Absyn_Stmt* _temp1849; struct Cyc_Absyn_Decl* _temp1851; struct Cyc_Absyn_Stmt*
! _temp1853; struct _tagged_arr* _temp1855; struct _tuple2 _temp1857; struct Cyc_Absyn_Exp*
! _temp1859; struct Cyc_Absyn_Stmt* _temp1861; struct Cyc_List_List* _temp1863;
! struct Cyc_Absyn_Stmt* _temp1865; struct Cyc_Absyn_Stmt* _temp1867; struct Cyc_Absyn_Vardecl*
! _temp1869; struct Cyc_Absyn_Tvar* _temp1871; _LL1763: if( _temp1761 == ( void*)
! Cyc_Absyn_Skip_s){ goto _LL1764;} else{ goto _LL1765;} _LL1765: if((
! unsigned int) _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Exp_s: 0){
! _LL1804: _temp1803=(( struct Cyc_Absyn_Exp_s_struct*) _temp1761)->f1; goto
! _LL1766;} else{ goto _LL1767;} _LL1767: if(( unsigned int) _temp1761 >  1u?*((
! int*) _temp1761) ==  Cyc_Absyn_Seq_s: 0){ _LL1808: _temp1807=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1761)->f1; goto _LL1806; _LL1806: _temp1805=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1761)->f2; goto _LL1768;} else{ goto _LL1769;} _LL1769: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Return_s: 0){ _LL1810:
! _temp1809=(( struct Cyc_Absyn_Return_s_struct*) _temp1761)->f1; goto _LL1770;}
! else{ goto _LL1771;} _LL1771: if(( unsigned int) _temp1761 >  1u?*(( int*)
! _temp1761) ==  Cyc_Absyn_IfThenElse_s: 0){ _LL1816: _temp1815=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp1761)->f1; goto _LL1814; _LL1814: _temp1813=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp1761)->f2; goto _LL1812; _LL1812: _temp1811=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp1761)->f3; goto _LL1772;} else{ goto _LL1773;} _LL1773: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_While_s: 0){ _LL1820:
! _temp1819=(( struct Cyc_Absyn_While_s_struct*) _temp1761)->f1; _LL1822:
! _temp1821= _temp1819.f1; goto _LL1818; _LL1818: _temp1817=(( struct Cyc_Absyn_While_s_struct*)
! _temp1761)->f2; goto _LL1774;} else{ goto _LL1775;} _LL1775: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Break_s: 0){ _LL1824:
! _temp1823=(( struct Cyc_Absyn_Break_s_struct*) _temp1761)->f1; goto _LL1776;}
! else{ goto _LL1777;} _LL1777: if(( unsigned int) _temp1761 >  1u?*(( int*)
! _temp1761) ==  Cyc_Absyn_Continue_s: 0){ _LL1826: _temp1825=(( struct Cyc_Absyn_Continue_s_struct*)
! _temp1761)->f1; goto _LL1778;} else{ goto _LL1779;} _LL1779: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Goto_s: 0){ _LL1828:
! _temp1827=(( struct Cyc_Absyn_Goto_s_struct*) _temp1761)->f2; goto _LL1780;}
! else{ goto _LL1781;} _LL1781: if(( unsigned int) _temp1761 >  1u?*(( int*)
! _temp1761) ==  Cyc_Absyn_For_s: 0){ _LL1840: _temp1839=(( struct Cyc_Absyn_For_s_struct*)
! _temp1761)->f1; goto _LL1836; _LL1836: _temp1835=(( struct Cyc_Absyn_For_s_struct*)
! _temp1761)->f2; _LL1838: _temp1837= _temp1835.f1; goto _LL1832; _LL1832:
! _temp1831=(( struct Cyc_Absyn_For_s_struct*) _temp1761)->f3; _LL1834: _temp1833=
! _temp1831.f1; goto _LL1830; _LL1830: _temp1829=(( struct Cyc_Absyn_For_s_struct*)
! _temp1761)->f4; goto _LL1782;} else{ goto _LL1783;} _LL1783: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Switch_s: 0){ _LL1844:
! _temp1843=(( struct Cyc_Absyn_Switch_s_struct*) _temp1761)->f1; goto _LL1842;
! _LL1842: _temp1841=(( struct Cyc_Absyn_Switch_s_struct*) _temp1761)->f2; goto
! _LL1784;} else{ goto _LL1785;} _LL1785: if(( unsigned int) _temp1761 >  1u?*((
! int*) _temp1761) ==  Cyc_Absyn_Fallthru_s: 0){ _LL1848: _temp1847=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp1761)->f1; goto _LL1846; _LL1846: _temp1845=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp1761)->f2; goto _LL1786;} else{ goto _LL1787;} _LL1787: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Decl_s: 0){ _LL1852:
! _temp1851=(( struct Cyc_Absyn_Decl_s_struct*) _temp1761)->f1; goto _LL1850;
! _LL1850: _temp1849=(( struct Cyc_Absyn_Decl_s_struct*) _temp1761)->f2; goto
! _LL1788;} else{ goto _LL1789;} _LL1789: if(( unsigned int) _temp1761 >  1u?*((
! int*) _temp1761) ==  Cyc_Absyn_Label_s: 0){ _LL1856: _temp1855=(( struct Cyc_Absyn_Label_s_struct*)
! _temp1761)->f1; goto _LL1854; _LL1854: _temp1853=(( struct Cyc_Absyn_Label_s_struct*)
! _temp1761)->f2; goto _LL1790;} else{ goto _LL1791;} _LL1791: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Do_s: 0){ _LL1862: _temp1861=((
! struct Cyc_Absyn_Do_s_struct*) _temp1761)->f1; goto _LL1858; _LL1858: _temp1857=((
! struct Cyc_Absyn_Do_s_struct*) _temp1761)->f2; _LL1860: _temp1859= _temp1857.f1;
! goto _LL1792;} else{ goto _LL1793;} _LL1793: if(( unsigned int) _temp1761 >  1u?*((
! int*) _temp1761) ==  Cyc_Absyn_TryCatch_s: 0){ _LL1866: _temp1865=(( struct Cyc_Absyn_TryCatch_s_struct*)
! _temp1761)->f1; goto _LL1864; _LL1864: _temp1863=(( struct Cyc_Absyn_TryCatch_s_struct*)
! _temp1761)->f2; goto _LL1794;} else{ goto _LL1795;} _LL1795: if(( unsigned int)
! _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Region_s: 0){ _LL1872:
! _temp1871=(( struct Cyc_Absyn_Region_s_struct*) _temp1761)->f1; goto _LL1870;
! _LL1870: _temp1869=(( struct Cyc_Absyn_Region_s_struct*) _temp1761)->f2; goto
! _LL1868; _LL1868: _temp1867=(( struct Cyc_Absyn_Region_s_struct*) _temp1761)->f3;
! goto _LL1796;} else{ goto _LL1797;} _LL1797: if(( unsigned int) _temp1761 >  1u?*((
! int*) _temp1761) ==  Cyc_Absyn_SwitchC_s: 0){ goto _LL1798;} else{ goto _LL1799;}
! _LL1799: if(( unsigned int) _temp1761 >  1u?*(( int*) _temp1761) ==  Cyc_Absyn_Cut_s:
! 0){ goto _LL1800;} else{ goto _LL1801;} _LL1801: if(( unsigned int) _temp1761 > 
! 1u?*(( int*) _temp1761) ==  Cyc_Absyn_Splice_s: 0){ goto _LL1802;} else{ goto
! _LL1762;} _LL1764: return; _LL1766: Cyc_Toc_exp_to_c( nv, _temp1803); return;
! _LL1768: Cyc_Toc_stmt_to_c( nv, _temp1807); s= _temp1805; continue; _LL1770: {
! struct Cyc_Core_Opt* topt= 0; if( _temp1809 !=  0){ topt=({ struct Cyc_Core_Opt*
! _temp1873=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1873->v=( void*) Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*)
! _check_null((( struct Cyc_Absyn_Exp*) _check_null( _temp1809))->topt))->v);
! _temp1873;}); Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*) _check_null(
! _temp1809));} if( s->try_depth >  0){ if( topt !=  0){ struct _tuple0* _temp1874=
! Cyc_Toc_temp_var(); struct Cyc_Absyn_Stmt* _temp1875= Cyc_Absyn_return_stmt((
! struct Cyc_Absyn_Exp*) Cyc_Absyn_var_exp( _temp1874, 0), 0);( void*)( s->r=(
! void*)(( void*)( Cyc_Absyn_declare_stmt( _temp1874,( void*)(( struct Cyc_Core_Opt*)
! _check_null( topt))->v, _temp1809, Cyc_Absyn_seq_stmt( Cyc_Toc_make_npop_handler(
! s->try_depth), _temp1875, 0), 0))->r));} else{ Cyc_Toc_do_npop_before( s->try_depth,
! s);}} return;} _LL1772: Cyc_Toc_exp_to_c( nv, _temp1815); Cyc_Toc_stmt_to_c( nv,
! _temp1813); s= _temp1811; continue; _LL1774: Cyc_Toc_exp_to_c( nv, _temp1821);
! Cyc_Toc_stmt_to_c( Cyc_Toc_loop_env( nv), _temp1817); return; _LL1776: if( nv->break_lab
  !=  0){( void*)( s->r=( void*)(( void*)( Cyc_Absyn_goto_stmt(( struct
  _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null( nv->break_lab))->v, 0))->r));}{
! int dest_depth= _temp1823 ==  0? 0:(( struct Cyc_Absyn_Stmt*) _check_null(
! _temp1823))->try_depth; Cyc_Toc_do_npop_before( s->try_depth -  dest_depth, s);
! return;} _LL1778: if( nv->continue_lab !=  0){( void*)( s->r=( void*)(( void*)(
  Cyc_Absyn_goto_stmt(( struct _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null(
! nv->continue_lab))->v, 0))->r));} _temp1827= _temp1825; goto _LL1780; _LL1780:
  Cyc_Toc_do_npop_before( s->try_depth - (( struct Cyc_Absyn_Stmt*) _check_null(
! _temp1827))->try_depth, s); return; _LL1782: Cyc_Toc_exp_to_c( nv, _temp1839);
! Cyc_Toc_exp_to_c( nv, _temp1837); Cyc_Toc_exp_to_c( nv, _temp1833); Cyc_Toc_stmt_to_c(
! Cyc_Toc_loop_env( nv), _temp1829); return; _LL1784: Cyc_Toc_xlate_switch( nv, s,
! _temp1843, _temp1841); return; _LL1786: if( nv->fallthru_info ==  0){( int)
! _throw(({ void* _temp1876[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("fallthru in unexpected place",
! sizeof( unsigned char), 29u), _tag_arr( _temp1876, sizeof( void*), 0u));}));}{
! struct _tuple6 _temp1879; struct Cyc_Dict_Dict* _temp1880; struct Cyc_List_List*
! _temp1882; struct _tagged_arr* _temp1884; struct _tuple6* _temp1877=( struct
! _tuple6*)(( struct Cyc_Core_Opt*) _check_null( nv->fallthru_info))->v; _temp1879=*
! _temp1877; _LL1885: _temp1884= _temp1879.f1; goto _LL1883; _LL1883: _temp1882=
! _temp1879.f2; goto _LL1881; _LL1881: _temp1880= _temp1879.f3; goto _LL1878;
! _LL1878: { struct Cyc_Absyn_Stmt* s2= Cyc_Absyn_goto_stmt( _temp1884, 0); Cyc_Toc_do_npop_before(
! s->try_depth - ((*(( struct Cyc_Absyn_Switch_clause**) _check_null( _temp1845)))->body)->try_depth,
! s2);{ struct Cyc_List_List* _temp1886=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_rev)( _temp1882); struct Cyc_List_List* _temp1887=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_rev)( _temp1847); for( 0; _temp1886 !=  0;(
! _temp1886=(( struct Cyc_List_List*) _check_null( _temp1886))->tl, _temp1887=((
! struct Cyc_List_List*) _check_null( _temp1887))->tl)){ Cyc_Toc_exp_to_c( nv,(
! struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp1887))->hd);
  s2= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt((( struct Cyc_Absyn_Exp*(*)(
! struct Cyc_Dict_Dict* d, struct _tuple0* k)) Cyc_Dict_lookup)( _temp1880,(
! struct _tuple0*)(( struct Cyc_List_List*) _check_null( _temp1886))->hd),( struct
! Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp1887))->hd, 0), s2, 0);}(
! void*)( s->r=( void*)(( void*) s2->r)); return;}}} _LL1788:{ void* _temp1888=(
! void*) _temp1851->r; struct Cyc_Absyn_Vardecl* _temp1898; int _temp1900; struct
! Cyc_Absyn_Exp* _temp1902; struct Cyc_Core_Opt* _temp1904; struct Cyc_Absyn_Pat*
! _temp1906; struct Cyc_List_List* _temp1908; _LL1890: if(*(( int*) _temp1888) == 
! Cyc_Absyn_Var_d){ _LL1899: _temp1898=(( struct Cyc_Absyn_Var_d_struct*)
! _temp1888)->f1; goto _LL1891;} else{ goto _LL1892;} _LL1892: if(*(( int*)
! _temp1888) ==  Cyc_Absyn_Let_d){ _LL1907: _temp1906=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1888)->f1; goto _LL1905; _LL1905: _temp1904=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1888)->f3; goto _LL1903; _LL1903: _temp1902=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1888)->f4; goto _LL1901; _LL1901: _temp1900=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1888)->f5; goto _LL1893;} else{ goto _LL1894;} _LL1894: if(*(( int*)
! _temp1888) ==  Cyc_Absyn_Letv_d){ _LL1909: _temp1908=(( struct Cyc_Absyn_Letv_d_struct*)
! _temp1888)->f1; goto _LL1895;} else{ goto _LL1896;} _LL1896: goto _LL1897;
! _LL1891: { struct Cyc_Toc_Env* _temp1910= Cyc_Toc_add_varmap( nv, _temp1898->name,
! Cyc_Absyn_varb_exp( _temp1898->name,( void*)({ struct Cyc_Absyn_Local_b_struct*
! _temp1911=( struct Cyc_Absyn_Local_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Local_b_struct));
! _temp1911[ 0]=({ struct Cyc_Absyn_Local_b_struct _temp1912; _temp1912.tag= Cyc_Absyn_Local_b;
! _temp1912.f1= _temp1898; _temp1912;}); _temp1911;}), 0)); Cyc_Toc_local_decl_to_c(
! _temp1910, _temp1910, _temp1898, _temp1849); goto _LL1889;} _LL1893:{ void*
! _temp1913=( void*) _temp1906->r; struct Cyc_Absyn_Vardecl* _temp1919; _LL1915:
! if(( unsigned int) _temp1913 >  2u?*(( int*) _temp1913) ==  Cyc_Absyn_Var_p: 0){
! _LL1920: _temp1919=(( struct Cyc_Absyn_Var_p_struct*) _temp1913)->f1; goto
! _LL1916;} else{ goto _LL1917;} _LL1917: goto _LL1918; _LL1916: { struct _tuple0*
! old_name= _temp1919->name; struct _tuple0* new_name= Cyc_Toc_temp_var();
! _temp1919->name= new_name; _temp1919->initializer=( struct Cyc_Absyn_Exp*)
! _temp1902;( void*)( _temp1851->r=( void*)(( void*)({ struct Cyc_Absyn_Var_d_struct*
! _temp1921=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp1921[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp1922; _temp1922.tag= Cyc_Absyn_Var_d;
! _temp1922.f1= _temp1919; _temp1922;}); _temp1921;})));{ struct Cyc_Toc_Env*
! _temp1923= Cyc_Toc_add_varmap( nv, old_name, Cyc_Absyn_varb_exp( new_name,( void*)({
! struct Cyc_Absyn_Local_b_struct* _temp1924=( struct Cyc_Absyn_Local_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Local_b_struct)); _temp1924[ 0]=({ struct
! Cyc_Absyn_Local_b_struct _temp1925; _temp1925.tag= Cyc_Absyn_Local_b; _temp1925.f1=
! _temp1919; _temp1925;}); _temp1924;}), 0)); Cyc_Toc_local_decl_to_c( _temp1923,
! nv, _temp1919, _temp1849); goto _LL1914;}} _LL1918:( void*)( s->r=( void*)((
! void*)( Cyc_Toc_letdecl_to_c( nv, _temp1906, _temp1904, _temp1902, _temp1900,
! _temp1849))->r)); goto _LL1914; _LL1914:;} goto _LL1889; _LL1895: { struct Cyc_List_List*
! _temp1926=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_rev)(
! _temp1908); if( _temp1926 ==  0){({ void* _temp1927[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("empty Letv_d",
! sizeof( unsigned char), 13u), _tag_arr( _temp1927, sizeof( void*), 0u));});}(
! void*)( _temp1851->r=( void*)(( void*)({ struct Cyc_Absyn_Var_d_struct*
! _temp1928=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp1928[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp1929; _temp1929.tag= Cyc_Absyn_Var_d;
! _temp1929.f1=( struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null(
! _temp1926))->hd; _temp1929;}); _temp1928;}))); _temp1926=(( struct Cyc_List_List*)
! _check_null( _temp1926))->tl; for( 0; _temp1926 !=  0; _temp1926=(( struct Cyc_List_List*)
! _check_null( _temp1926))->tl){ struct Cyc_Absyn_Decl* _temp1930= Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Var_d_struct* _temp1931=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp1931[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp1932; _temp1932.tag= Cyc_Absyn_Var_d; _temp1932.f1=( struct Cyc_Absyn_Vardecl*)((
! struct Cyc_List_List*) _check_null( _temp1926))->hd; _temp1932;}); _temp1931;}),
! 0);( void*)( s->r=( void*)(( void*)( Cyc_Absyn_decl_stmt( _temp1930, Cyc_Absyn_new_stmt((
! void*) s->r, 0), 0))->r));} Cyc_Toc_stmt_to_c( nv, s); goto _LL1889;} _LL1897:({
! void* _temp1933[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Tcutil_impos)( _tag_arr("bad nested declaration within function", sizeof(
! unsigned char), 39u), _tag_arr( _temp1933, sizeof( void*), 0u));}); goto _LL1889;
! _LL1889:;} return; _LL1790: s= _temp1853; continue; _LL1792: Cyc_Toc_stmt_to_c(
! Cyc_Toc_loop_env( nv), _temp1861); Cyc_Toc_exp_to_c( nv, _temp1859); return;
! _LL1794: { struct _tuple0* h_var= Cyc_Toc_temp_var(); struct _tuple0* e_var= Cyc_Toc_temp_var();
  struct _tuple0* was_thrown_var= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* h_exp=
  Cyc_Absyn_var_exp( h_var, 0); struct Cyc_Absyn_Exp* e_exp= Cyc_Absyn_var_exp(
  e_var, 0); struct Cyc_Absyn_Exp* was_thrown_exp= Cyc_Absyn_var_exp(
  was_thrown_var, 0); void* h_typ= Cyc_Absyn_strct( Cyc_Toc__handler_cons_sp);
  void* e_typ= Cyc_Toc_typ_to_c( Cyc_Absyn_exn_typ); void* was_thrown_typ= Cyc_Toc_typ_to_c(
! Cyc_Absyn_sint_t); e_exp->topt=({ struct Cyc_Core_Opt* _temp1934=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1934->v=( void*) e_typ; _temp1934;});
! nv= Cyc_Toc_add_varmap( nv, e_var, e_exp); Cyc_Toc_stmt_to_c( nv, _temp1865);{
! struct Cyc_Absyn_Stmt* _temp1935= Cyc_Absyn_seq_stmt( _temp1865, Cyc_Absyn_exp_stmt(
  Cyc_Absyn_fncall_exp( Cyc_Toc__pop_handler_e, 0, 0), 0), 0); struct _tuple0*
! _temp1936= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* _temp1937= Cyc_Absyn_var_exp(
! _temp1936, 0); struct Cyc_Absyn_Vardecl* _temp1938= Cyc_Absyn_new_vardecl(
! _temp1936, Cyc_Absyn_exn_typ, 0); _temp1937->topt=({ struct Cyc_Core_Opt*
! _temp1939=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1939->v=( void*) Cyc_Absyn_exn_typ; _temp1939;});{ struct Cyc_Absyn_Pat*
! _temp1940=({ struct Cyc_Absyn_Pat* _temp1956=( struct Cyc_Absyn_Pat*) _cycalloc(
! sizeof( struct Cyc_Absyn_Pat)); _temp1956->r=( void*)(( void*)({ struct Cyc_Absyn_Var_p_struct*
! _temp1958=( struct Cyc_Absyn_Var_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_p_struct));
! _temp1958[ 0]=({ struct Cyc_Absyn_Var_p_struct _temp1959; _temp1959.tag= Cyc_Absyn_Var_p;
! _temp1959.f1= _temp1938; _temp1959;}); _temp1958;})); _temp1956->topt=({ struct
! Cyc_Core_Opt* _temp1957=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1957->v=( void*) Cyc_Absyn_exn_typ; _temp1957;}); _temp1956->loc= 0;
! _temp1956;}); struct Cyc_Absyn_Exp* _temp1941= Cyc_Absyn_throw_exp( _temp1937, 0);
! _temp1941->topt=({ struct Cyc_Core_Opt* _temp1942=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1942->v=( void*)(( void*) Cyc_Absyn_VoidType);
! _temp1942;});{ struct Cyc_Absyn_Stmt* _temp1943= Cyc_Absyn_exp_stmt( _temp1941,
! 0); struct Cyc_Absyn_Switch_clause* _temp1944=({ struct Cyc_Absyn_Switch_clause*
! _temp1953=( struct Cyc_Absyn_Switch_clause*) _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause));
! _temp1953->pattern= _temp1940; _temp1953->pat_vars=({ struct Cyc_Core_Opt*
! _temp1954=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1954->v=( void*)({ struct Cyc_List_List* _temp1955=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1955->hd=( void*) _temp1938;
! _temp1955->tl= 0; _temp1955;}); _temp1954;}); _temp1953->where_clause= 0;
! _temp1953->body= _temp1943; _temp1953->loc= 0; _temp1953;}); struct Cyc_Absyn_Stmt*
! _temp1945= Cyc_Absyn_switch_stmt( e_exp,(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_append)( _temp1863,({ struct Cyc_List_List*
! _temp1952=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1952->hd=( void*) _temp1944; _temp1952->tl= 0; _temp1952;})), 0); Cyc_Toc_stmt_to_c(
! nv, _temp1945);{ struct Cyc_Absyn_Exp* _temp1946= Cyc_Absyn_fncall_exp( Cyc_Toc_setjmp_e,({
! struct Cyc_List_List* _temp1951=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1951->hd=( void*) Cyc_Absyn_structmember_exp( h_exp,
! Cyc_Toc_handler_sp, 0); _temp1951->tl= 0; _temp1951;}), 0); struct Cyc_Absyn_Stmt*
! _temp1947= Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp( Cyc_Toc__push_handler_e,({
! struct Cyc_List_List* _temp1950=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1950->hd=( void*) Cyc_Absyn_address_exp( h_exp, 0);
! _temp1950->tl= 0; _temp1950;}), 0), 0); struct Cyc_Absyn_Exp* _temp1948= Cyc_Absyn_int_exp((
! void*) Cyc_Absyn_Signed, 0, 0); struct Cyc_Absyn_Exp* _temp1949= Cyc_Absyn_int_exp((
  void*) Cyc_Absyn_Signed, 1, 0);( void*)( s->r=( void*)(( void*)( Cyc_Absyn_declare_stmt(
! h_var, h_typ, 0, Cyc_Absyn_seq_stmt( _temp1947, Cyc_Absyn_declare_stmt(
! was_thrown_var, was_thrown_typ,( struct Cyc_Absyn_Exp*) _temp1948, Cyc_Absyn_seq_stmt(
! Cyc_Absyn_ifthenelse_stmt( _temp1946, Cyc_Absyn_assign_stmt( was_thrown_exp,
! _temp1949, 0), Cyc_Absyn_skip_stmt( 0), 0), Cyc_Absyn_ifthenelse_stmt( Cyc_Absyn_prim1_exp((
! void*) Cyc_Absyn_Not, was_thrown_exp, 0), _temp1935, Cyc_Absyn_declare_stmt(
  e_var, e_typ,( struct Cyc_Absyn_Exp*) Cyc_Absyn_cast_exp( e_typ, Cyc_Toc__exn_thrown_e,
! 0), _temp1945, 0), 0), 0), 0), 0), 0))->r)); return;}}}}} _LL1796: { void*
  rh_struct_typ= Cyc_Absyn_strct( Cyc_Toc__RegionHandle_sp); void*
  rh_struct_ptr_typ= Cyc_Absyn_cstar_typ( rh_struct_typ, Cyc_Toc_mt_tq); struct
! _tuple0* rh_var= Cyc_Toc_temp_var(); struct _tuple0* x_var= _temp1869->name;
  struct Cyc_Absyn_Exp* rh_exp= Cyc_Absyn_var_exp( rh_var, 0); struct Cyc_Absyn_Exp*
  x_exp= Cyc_Absyn_var_exp( x_var, 0); Cyc_Toc_stmt_to_c( Cyc_Toc_add_varmap( nv,
! x_var, x_exp), _temp1867);( void*)( s->r=( void*)(( void*)( Cyc_Absyn_declare_stmt(
  rh_var, rh_struct_typ,( struct Cyc_Absyn_Exp*) Cyc_Absyn_fncall_exp( Cyc_Toc__new_region_e,
  0, 0), Cyc_Absyn_declare_stmt( x_var, rh_struct_ptr_typ,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( rh_exp, 0), Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp(
! Cyc_Toc__push_region_e,({ struct Cyc_Absyn_Exp* _temp1960[ 1u]; _temp1960[ 0u]=
  x_exp;(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1960, sizeof( struct Cyc_Absyn_Exp*), 1u));}), 0), 0), Cyc_Absyn_seq_stmt(
! _temp1867, Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp( Cyc_Toc__pop_region_e,({
! struct Cyc_Absyn_Exp* _temp1961[ 1u]; _temp1961[ 0u]= x_exp;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1961, sizeof( struct Cyc_Absyn_Exp*),
! 1u));}), 0), 0), 0), 0), 0), 0))->r)); return;} _LL1798:({ void* _temp1962[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
! _tag_arr("switchC_s", sizeof( unsigned char), 10u), _tag_arr( _temp1962, sizeof(
! void*), 0u));}); return; _LL1800:({ void* _temp1963[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("cut", sizeof(
! unsigned char), 4u), _tag_arr( _temp1963, sizeof( void*), 0u));}); return;
! _LL1802:({ void* _temp1964[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("splice", sizeof( unsigned char), 7u),
! _tag_arr( _temp1964, sizeof( void*), 0u));}); return; _LL1762:;}} struct
  _tuple15{ struct _tagged_arr* f1; struct Cyc_Absyn_Tqual f2; void* f3; } ;
  static void Cyc_Toc_fndecl_to_c( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Fndecl*
  f){ f->tvs= 0; f->effect= 0; f->rgn_po= 0;( void*)( f->ret_type=( void*) Cyc_Toc_typ_to_c((
! void*) f->ret_type));{ struct Cyc_List_List* _temp1965= f->args; for( 0;
! _temp1965 !=  0; _temp1965=(( struct Cyc_List_List*) _check_null( _temp1965))->tl){(*((
! struct _tuple15*)(( struct Cyc_List_List*) _check_null( _temp1965))->hd)).f3=
  Cyc_Toc_typ_to_c((*(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! _temp1965))->hd)).f3);{ struct _tuple0* _temp1966=({ struct _tuple0* _temp1967=(
! struct _tuple0*) _cycalloc( sizeof( struct _tuple0)); _temp1967->f1=( void*) Cyc_Absyn_Loc_n;
! _temp1967->f2=(*(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! _temp1965))->hd)).f1; _temp1967;}); nv= Cyc_Toc_add_varmap( nv, _temp1966, Cyc_Absyn_var_exp(
! _temp1966, 0));}}} if(( unsigned int) f->cyc_varargs?(( struct Cyc_Absyn_VarargInfo*)
! _check_null( f->cyc_varargs))->name !=  0: 0){ int _temp1970; void* _temp1972;
! struct Cyc_Absyn_Tqual _temp1974; struct Cyc_Core_Opt* _temp1976; struct Cyc_Absyn_VarargInfo
! _temp1968=*(( struct Cyc_Absyn_VarargInfo*) _check_null( f->cyc_varargs));
! _LL1977: _temp1976= _temp1968.name; goto _LL1975; _LL1975: _temp1974= _temp1968.tq;
! goto _LL1973; _LL1973: _temp1972=( void*) _temp1968.type; goto _LL1971; _LL1971:
! _temp1970= _temp1968.inject; goto _LL1969; _LL1969: { void* _temp1978= Cyc_Toc_typ_to_c(
! Cyc_Absyn_tagged_typ( _temp1972,( void*) Cyc_Absyn_HeapRgn, _temp1974)); struct
! _tuple0* _temp1979=({ struct _tuple0* _temp1982=( struct _tuple0*) _cycalloc(
! sizeof( struct _tuple0)); _temp1982->f1=( void*) Cyc_Absyn_Loc_n; _temp1982->f2=(
! struct _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null( _temp1976))->v;
! _temp1982;}); f->args=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
  struct Cyc_List_List* y)) Cyc_List_append)( f->args,({ struct Cyc_List_List*
! _temp1980=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1980->hd=( void*)({ struct _tuple15* _temp1981=( struct _tuple15*)
! _cycalloc( sizeof( struct _tuple15)); _temp1981->f1=( struct _tagged_arr*)((
! struct Cyc_Core_Opt*) _check_null( _temp1976))->v; _temp1981->f2= _temp1974;
! _temp1981->f3= _temp1978; _temp1981;}); _temp1980->tl= 0; _temp1980;})); nv= Cyc_Toc_add_varmap(
! nv, _temp1979, Cyc_Absyn_var_exp( _temp1979, 0)); f->cyc_varargs= 0;}}{ struct
! Cyc_List_List* _temp1983=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( f->param_vardecls))->v; for( 0; _temp1983 !=  0; _temp1983=((
! struct Cyc_List_List*) _check_null( _temp1983))->tl){( void*)((( struct Cyc_Absyn_Vardecl*)((
! struct Cyc_List_List*) _check_null( _temp1983))->hd)->type=( void*) Cyc_Toc_typ_to_c((
  void*)(( struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null(
! _temp1983))->hd)->type));}} Cyc_Toc_stmt_to_c( Cyc_Toc_clear_toplevel( nv), f->body);}
! static void* Cyc_Toc_scope_to_c( void* s){ void* _temp1984= s; _LL1986: if(
! _temp1984 == ( void*) Cyc_Absyn_Abstract){ goto _LL1987;} else{ goto _LL1988;}
! _LL1988: if( _temp1984 == ( void*) Cyc_Absyn_ExternC){ goto _LL1989;} else{ goto
! _LL1990;} _LL1990: goto _LL1991; _LL1987: return( void*) Cyc_Absyn_Public;
! _LL1989: return( void*) Cyc_Absyn_Extern; _LL1991: return s; _LL1985:;} struct
  Cyc_Core_Opt* Cyc_Toc_structs_so_far= 0; static void Cyc_Toc_structdecl_to_c(
! struct Cyc_Absyn_Structdecl* s){ struct _tuple0* _temp1992=( struct _tuple0*)((
  struct Cyc_Core_Opt*) _check_null( s->name))->v; if( Cyc_Toc_structs_so_far == 
! 0){ Cyc_Toc_structs_so_far=({ struct Cyc_Core_Opt* _temp1993=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1993->v=( void*)(( struct Cyc_Dict_Dict*(*)(
  int(* cmp)( struct _tagged_arr*, struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_zstrptrcmp);
! _temp1993;});}{ int seen_defn_before; struct Cyc_Core_Opt* _temp1994=(( struct
  Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup_opt)((
  struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v,(*
! _temp1992).f2); if( _temp1994 ==  0){ seen_defn_before= 0;( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v=( void*)(( struct
  Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl*
  v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( Cyc_Toc_structs_so_far))->v,(* _temp1992).f2, s));} else{ if(((
! struct Cyc_Absyn_Structdecl*)(( struct Cyc_Core_Opt*) _check_null( _temp1994))->v)->fields
  ==  0){( struct Cyc_Dict_Dict*)((( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v=(
  void*)(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr*
  k, struct Cyc_Absyn_Structdecl* v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v,(* _temp1992).f2,
  s)); seen_defn_before= 0;} else{ seen_defn_before= 1;}}( void*)( s->sc=( void*)((
! void*) Cyc_Absyn_Public)); s->tvs= 0; s->name=({ struct Cyc_Core_Opt* _temp1995=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1995->v=(
! void*) _temp1992; _temp1995;}); if( s->fields !=  0){ if( seen_defn_before){ s->fields=
! 0;} else{ struct Cyc_List_List* _temp1996=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( s->fields))->v; for( 0; _temp1996 !=  0; _temp1996=(( struct Cyc_List_List*)
! _check_null( _temp1996))->tl){( void*)((( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp1996))->hd)->type=( void*) Cyc_Toc_typ_to_c_array((
  void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp1996))->hd)->type));}}}}} struct Cyc_Core_Opt* Cyc_Toc_unions_so_far= 0;
  static void Cyc_Toc_uniondecl_to_c( struct Cyc_Absyn_Uniondecl* u){ struct
! _tuple0* _temp1997=( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( u->name))->v;
  if( Cyc_Toc_unions_so_far ==  0){ Cyc_Toc_unions_so_far=({ struct Cyc_Core_Opt*
! _temp1998=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1998->v=( void*)(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tagged_arr*,
! struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_zstrptrcmp); _temp1998;});}{ int
! seen_defn_before; struct Cyc_Core_Opt* _temp1999=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup_opt)(( struct
  Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v,(*
! _temp1997).f2); if( _temp1999 ==  0){ seen_defn_before= 0;( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v=( void*)(( struct
  Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl*
  v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( Cyc_Toc_unions_so_far))->v,(* _temp1997).f2, u));} else{ if(((
! struct Cyc_Absyn_Uniondecl*)(( struct Cyc_Core_Opt*) _check_null( _temp1999))->v)->fields
  ==  0){( struct Cyc_Dict_Dict*)((( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v=(
  void*)(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr*
  k, struct Cyc_Absyn_Uniondecl* v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v,(* _temp1997).f2,
  u)); seen_defn_before= 0;} else{ seen_defn_before= 1;}}( void*)( u->sc=( void*)((
! void*) Cyc_Absyn_Public)); u->tvs= 0; u->name=({ struct Cyc_Core_Opt* _temp2000=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2000->v=(
! void*) _temp1997; _temp2000;}); if( u->fields !=  0){ if( seen_defn_before){ u->fields=
! 0;} else{ struct Cyc_List_List* _temp2001=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( u->fields))->v; for( 0; _temp2001 !=  0; _temp2001=(( struct Cyc_List_List*)
! _check_null( _temp2001))->tl){( void*)((( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp2001))->hd)->type=( void*) Cyc_Toc_typ_to_c_array((
  void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp2001))->hd)->type));}}}}} static struct Cyc_Core_Opt* Cyc_Toc_tunions_so_far=
  0; static void Cyc_Toc_tuniondecl_to_c( struct Cyc_Absyn_Tuniondecl* tud){ if(
  Cyc_Toc_tunions_so_far ==  0){ Cyc_Toc_tunions_so_far=({ struct Cyc_Core_Opt*
! _temp2002=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2002->v=( void*)(( struct Cyc_Set_Set*(*)( int(* cmp)( struct _tuple0*,
! struct _tuple0*))) Cyc_Set_empty)( Cyc_Absyn_qvar_cmp); _temp2002;});}{ struct
! _tuple0* _temp2003= tud->name; if( tud->fields ==  0){ return;} if((( int(*)(
  struct Cyc_Set_Set* s, struct _tuple0* elt)) Cyc_Set_member)(( struct Cyc_Set_Set*)((
! struct Cyc_Core_Opt*) _check_null( Cyc_Toc_tunions_so_far))->v, _temp2003)){
  return;}( struct Cyc_Set_Set*)((( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_tunions_so_far))->v=(
  void*)(( struct Cyc_Set_Set*(*)( struct Cyc_Set_Set* s, struct _tuple0* elt))
  Cyc_Set_insert)(( struct Cyc_Set_Set*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_tunions_so_far))->v,
! _temp2003));{ int tag_count= 0; int box_count= 0; struct Cyc_List_List*
! _temp2004=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( tud->fields))->v;
! for( 0; _temp2004 !=  0; _temp2004=(( struct Cyc_List_List*) _check_null(
! _temp2004))->tl){ struct Cyc_Absyn_Tunionfield* f=( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp2004))->hd; if( f->typs ==  0){ struct
  Cyc_Absyn_Exp* eopt=( struct Cyc_Absyn_Exp*) Cyc_Absyn_signed_int_exp( tag_count
  ++, 0); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_static_vardecl( f->name, Cyc_Absyn_sint_t,
! eopt); vd->tq=({ struct Cyc_Absyn_Tqual _temp2005; _temp2005.q_const= 1;
! _temp2005.q_volatile= 0; _temp2005.q_restrict= 0; _temp2005;}); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp2006=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2006->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp2007=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp2007[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp2008; _temp2008.tag= Cyc_Absyn_Var_d; _temp2008.f1= vd; _temp2008;});
! _temp2007;}), 0); _temp2006->tl= Cyc_Toc_result_decls; _temp2006;});} else{
  struct Cyc_Absyn_Exp* eopt=( struct Cyc_Absyn_Exp*) Cyc_Absyn_signed_int_exp(
  box_count ++, 0); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_static_vardecl( f->name,
! Cyc_Absyn_sint_t, eopt); vd->tq=({ struct Cyc_Absyn_Tqual _temp2009; _temp2009.q_const=
! 1; _temp2009.q_volatile= 0; _temp2009.q_restrict= 0; _temp2009;}); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp2010=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2010->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp2011=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp2011[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp2012; _temp2012.tag= Cyc_Absyn_Var_d; _temp2012.f1= vd; _temp2012;});
! _temp2011;}), 0); _temp2010->tl= Cyc_Toc_result_decls; _temp2010;});{ struct Cyc_List_List*
! _temp2013= 0; int i= 1;{ struct Cyc_List_List* _temp2014= f->typs; for( 0;
! _temp2014 !=  0;( _temp2014=(( struct Cyc_List_List*) _check_null( _temp2014))->tl,
! i ++)){ struct _tagged_arr* _temp2015= Cyc_Absyn_fieldname( i); struct Cyc_Absyn_Structfield*
! _temp2016=({ struct Cyc_Absyn_Structfield* _temp2018=( struct Cyc_Absyn_Structfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structfield)); _temp2018->name= _temp2015;
! _temp2018->tq=(*(( struct _tuple3*)(( struct Cyc_List_List*) _check_null(
! _temp2014))->hd)).f1; _temp2018->type=( void*) Cyc_Toc_typ_to_c_array((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp2014))->hd)).f2);
! _temp2018->width= 0; _temp2018->attributes= 0; _temp2018;}); _temp2013=({ struct
! Cyc_List_List* _temp2017=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2017->hd=( void*) _temp2016; _temp2017->tl= _temp2013; _temp2017;});}}
! _temp2013=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
! _temp2013); _temp2013=({ struct Cyc_List_List* _temp2019=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2019->hd=( void*)({ struct Cyc_Absyn_Structfield*
! _temp2020=( struct Cyc_Absyn_Structfield*) _cycalloc( sizeof( struct Cyc_Absyn_Structfield));
! _temp2020->name= Cyc_Toc_tag_sp; _temp2020->tq= Cyc_Toc_mt_tq; _temp2020->type=(
! void*) Cyc_Absyn_sint_t; _temp2020->width= 0; _temp2020->attributes= 0;
! _temp2020;}); _temp2019->tl= _temp2013; _temp2019;});{ struct Cyc_Absyn_Structdecl*
! _temp2021=({ struct Cyc_Absyn_Structdecl* _temp2025=( struct Cyc_Absyn_Structdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structdecl)); _temp2025->sc=( void*)(( void*)
! Cyc_Absyn_Public); _temp2025->name=({ struct Cyc_Core_Opt* _temp2027=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2027->v=( void*)
  Cyc_Toc_collapse_qvar_tag( f->name, _tag_arr("_struct", sizeof( unsigned char),
! 8u)); _temp2027;}); _temp2025->tvs= 0; _temp2025->fields=({ struct Cyc_Core_Opt*
! _temp2026=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2026->v=( void*) _temp2013; _temp2026;}); _temp2025->attributes= 0;
! _temp2025;}); Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2022=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp2022->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Struct_d_struct* _temp2023=(
  struct Cyc_Absyn_Struct_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct));
! _temp2023[ 0]=({ struct Cyc_Absyn_Struct_d_struct _temp2024; _temp2024.tag= Cyc_Absyn_Struct_d;
! _temp2024.f1= _temp2021; _temp2024;}); _temp2023;}), 0); _temp2022->tl= Cyc_Toc_result_decls;
! _temp2022;});}}}}}}} static struct Cyc_Core_Opt* Cyc_Toc_xtunion_fields_so_far=
  0; static void Cyc_Toc_xtuniondecl_to_c( struct Cyc_Absyn_Tuniondecl* xd){ if(
  Cyc_Toc_xtunion_fields_so_far ==  0){ Cyc_Toc_xtunion_fields_so_far=({ struct
! Cyc_Core_Opt* _temp2028=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2028->v=( void*)(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tuple0*,
! struct _tuple0*))) Cyc_Dict_empty)( Cyc_Absyn_qvar_cmp); _temp2028;});} if( xd->fields
! ==  0){ return;}{ struct _tuple0* _temp2029= xd->name; struct Cyc_List_List*
! _temp2030=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( xd->fields))->v;
! for( 0; _temp2030 !=  0; _temp2030=(( struct Cyc_List_List*) _check_null(
! _temp2030))->tl){ struct Cyc_Absyn_Tunionfield* f=( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp2030))->hd; struct _tagged_arr* fn=(* f->name).f2;
! struct Cyc_Absyn_Exp* _temp2031= Cyc_Absyn_uint_exp( _get_arr_size(* fn, sizeof(
! unsigned char)) +  4, 0); struct Cyc_Absyn_ArrayType_struct* _temp2032=({ struct
! Cyc_Absyn_ArrayType_struct* _temp2082=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp2082[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp2083; _temp2083.tag= Cyc_Absyn_ArrayType;
! _temp2083.f1=( void*) Cyc_Absyn_uchar_t; _temp2083.f2= Cyc_Toc_mt_tq; _temp2083.f3=(
! struct Cyc_Absyn_Exp*) _temp2031; _temp2083;}); _temp2082;}); struct Cyc_Core_Opt*
! _temp2033=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* d, struct _tuple0* k))
  Cyc_Dict_lookup_opt)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
  _check_null( Cyc_Toc_xtunion_fields_so_far))->v, f->name); struct Cyc_Core_Opt
! _temp2041; int _temp2042; _LL2035: if( _temp2033 ==  0){ goto _LL2036;} else{
! goto _LL2037;} _LL2037: if( _temp2033 ==  0){ goto _LL2039;} else{ _temp2041=*
! _temp2033; _LL2043: _temp2042=( int) _temp2041.v; if( _temp2042 ==  0){ goto
! _LL2038;} else{ goto _LL2039;}} _LL2039: goto _LL2040; _LL2036: { struct Cyc_Absyn_Exp*
  initopt= 0; if(( void*) f->sc != ( void*) Cyc_Absyn_Extern){ initopt=( struct
  Cyc_Absyn_Exp*) Cyc_Absyn_string_exp(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp2049; _temp2049.tag= Cyc_Std_String_pa; _temp2049.f1=( struct _tagged_arr)*
! fn;{ struct Cyc_Std_Int_pa_struct _temp2048; _temp2048.tag= Cyc_Std_Int_pa;
! _temp2048.f1=( int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct _temp2047;
! _temp2047.tag= Cyc_Std_Int_pa; _temp2047.f1=( int)(( unsigned int) 0);{ struct
! Cyc_Std_Int_pa_struct _temp2046; _temp2046.tag= Cyc_Std_Int_pa; _temp2046.f1=(
! int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct _temp2045; _temp2045.tag=
! Cyc_Std_Int_pa; _temp2045.f1=( int)(( unsigned int) 0);{ void* _temp2044[ 5u]={&
! _temp2045,& _temp2046,& _temp2047,& _temp2048,& _temp2049}; Cyc_Std_aprintf(
! _tag_arr("%c%c%c%c%s", sizeof( unsigned char), 11u), _tag_arr( _temp2044,
! sizeof( void*), 5u));}}}}}}), 0);}{ struct Cyc_Absyn_Vardecl* _temp2050= Cyc_Absyn_new_vardecl(
! f->name,( void*) _temp2032, initopt);( void*)( _temp2050->sc=( void*)(( void*) f->sc));
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2051=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2051->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Var_d_struct* _temp2052=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp2052[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp2053; _temp2053.tag= Cyc_Absyn_Var_d; _temp2053.f1= _temp2050; _temp2053;});
! _temp2052;}), 0); _temp2051->tl= Cyc_Toc_result_decls; _temp2051;});( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_xtunion_fields_so_far))->v=( void*)((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tuple0* k, int v))
  Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null(
  Cyc_Toc_xtunion_fields_so_far))->v, f->name,( void*) f->sc != ( void*) Cyc_Absyn_Extern));
  if( f->typs !=  0){ struct Cyc_List_List* fields= 0; int i= 1;{ struct Cyc_List_List*
! _temp2054= f->typs; for( 0; _temp2054 !=  0;( _temp2054=(( struct Cyc_List_List*)
! _check_null( _temp2054))->tl, i ++)){ struct _tagged_arr* _temp2055=({ struct
! _tagged_arr* _temp2059=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2059[ 0]=( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp2061; _temp2061.tag= Cyc_Std_Int_pa; _temp2061.f1=( int)(( unsigned int) i);{
! void* _temp2060[ 1u]={& _temp2061}; Cyc_Std_aprintf( _tag_arr("f%d", sizeof(
! unsigned char), 4u), _tag_arr( _temp2060, sizeof( void*), 1u));}}); _temp2059;});
! struct Cyc_Absyn_Structfield* _temp2056=({ struct Cyc_Absyn_Structfield*
! _temp2058=( struct Cyc_Absyn_Structfield*) _cycalloc( sizeof( struct Cyc_Absyn_Structfield));
! _temp2058->name= _temp2055; _temp2058->tq=(*(( struct _tuple3*)(( struct Cyc_List_List*)
! _check_null( _temp2054))->hd)).f1; _temp2058->type=( void*) Cyc_Toc_typ_to_c_array((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp2054))->hd)).f2);
! _temp2058->width= 0; _temp2058->attributes= 0; _temp2058;}); fields=({ struct
! Cyc_List_List* _temp2057=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2057->hd=( void*) _temp2056; _temp2057->tl= fields; _temp2057;});}} fields=({
! struct Cyc_List_List* _temp2062=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2062->hd=( void*)({ struct Cyc_Absyn_Structfield*
! _temp2063=( struct Cyc_Absyn_Structfield*) _cycalloc( sizeof( struct Cyc_Absyn_Structfield));
! _temp2063->name= Cyc_Toc_tag_sp; _temp2063->tq= Cyc_Toc_mt_tq; _temp2063->type=(
! void*) Cyc_Absyn_cstar_typ( Cyc_Absyn_uchar_t, Cyc_Toc_mt_tq); _temp2063->width=
! 0; _temp2063->attributes= 0; _temp2063;}); _temp2062->tl=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( fields); _temp2062;});{ struct Cyc_Absyn_Structdecl*
! _temp2064=({ struct Cyc_Absyn_Structdecl* _temp2068=( struct Cyc_Absyn_Structdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structdecl)); _temp2068->sc=( void*)(( void*)
! Cyc_Absyn_Public); _temp2068->name=({ struct Cyc_Core_Opt* _temp2070=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2070->v=( void*)
  Cyc_Toc_collapse_qvar_tag( f->name, _tag_arr("_struct", sizeof( unsigned char),
! 8u)); _temp2070;}); _temp2068->tvs= 0; _temp2068->fields=({ struct Cyc_Core_Opt*
! _temp2069=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2069->v=( void*) fields; _temp2069;}); _temp2068->attributes= 0; _temp2068;});
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2065=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2065->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Struct_d_struct* _temp2066=( struct Cyc_Absyn_Struct_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct)); _temp2066[ 0]=({ struct
! Cyc_Absyn_Struct_d_struct _temp2067; _temp2067.tag= Cyc_Absyn_Struct_d;
! _temp2067.f1= _temp2064; _temp2067;}); _temp2066;}), 0); _temp2065->tl= Cyc_Toc_result_decls;
! _temp2065;});}} goto _LL2034;}} _LL2038: if(( void*) f->sc != ( void*) Cyc_Absyn_Extern){
! struct Cyc_Absyn_Exp* _temp2071= Cyc_Absyn_string_exp(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp2081; _temp2081.tag= Cyc_Std_String_pa;
! _temp2081.f1=( struct _tagged_arr)* fn;{ struct Cyc_Std_Int_pa_struct _temp2080;
! _temp2080.tag= Cyc_Std_Int_pa; _temp2080.f1=( int)(( unsigned int) 0);{ struct
! Cyc_Std_Int_pa_struct _temp2079; _temp2079.tag= Cyc_Std_Int_pa; _temp2079.f1=(
! int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct _temp2078; _temp2078.tag=
! Cyc_Std_Int_pa; _temp2078.f1=( int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct
! _temp2077; _temp2077.tag= Cyc_Std_Int_pa; _temp2077.f1=( int)(( unsigned int) 0);{
! void* _temp2076[ 5u]={& _temp2077,& _temp2078,& _temp2079,& _temp2080,&
! _temp2081}; Cyc_Std_aprintf( _tag_arr("%c%c%c%c%s", sizeof( unsigned char), 11u),
! _tag_arr( _temp2076, sizeof( void*), 5u));}}}}}}), 0); struct Cyc_Absyn_Vardecl*
! _temp2072= Cyc_Absyn_new_vardecl( f->name,( void*) _temp2032,( struct Cyc_Absyn_Exp*)
! _temp2071);( void*)( _temp2072->sc=( void*)(( void*) f->sc)); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp2073=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2073->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp2074=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp2074[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp2075; _temp2075.tag= Cyc_Absyn_Var_d; _temp2075.f1= _temp2072; _temp2075;});
! _temp2074;}), 0); _temp2073->tl= Cyc_Toc_result_decls; _temp2073;});( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_xtunion_fields_so_far))->v=( void*)((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tuple0* k, int v))
  Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null(
! Cyc_Toc_xtunion_fields_so_far))->v, f->name, 1));} goto _LL2034; _LL2040: goto
! _LL2034; _LL2034:;}}} static void Cyc_Toc_enumdecl_to_c( struct Cyc_Toc_Env* nv,
! struct Cyc_Absyn_Enumdecl* ed){ struct _tuple0* _temp2084= ed->name;( void*)( ed->sc=(
  void*)(( void*) Cyc_Absyn_Public)); if( ed->fields !=  0){ struct Cyc_List_List*
! _temp2085=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( ed->fields))->v;
! for( 0; _temp2085 !=  0; _temp2085=(( struct Cyc_List_List*) _check_null(
! _temp2085))->tl){ if((( struct Cyc_Absyn_Enumfield*)(( struct Cyc_List_List*)
! _check_null( _temp2085))->hd)->tag !=  0){ unsigned int i= Cyc_Evexp_eval_const_uint_exp((
  struct Cyc_Absyn_Exp*) _check_null((( struct Cyc_Absyn_Enumfield*)(( struct Cyc_List_List*)
! _check_null( _temp2085))->hd)->tag));(( struct Cyc_Absyn_Enumfield*)(( struct
! Cyc_List_List*) _check_null( _temp2085))->hd)->tag=( struct Cyc_Absyn_Exp*) Cyc_Absyn_uint_exp(
  i, 0);}}}} static void Cyc_Toc_local_decl_to_c( struct Cyc_Toc_Env* body_nv,
  struct Cyc_Toc_Env* init_nv, struct Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Stmt*
  s){( void*)( vd->type=( void*) Cyc_Toc_typ_to_c_array(( void*) vd->type)); Cyc_Toc_stmt_to_c(
  body_nv, s); if( vd->initializer !=  0){ struct Cyc_Absyn_Exp* init=( struct Cyc_Absyn_Exp*)
! _check_null( vd->initializer); void* _temp2086=( void*) init->r; struct Cyc_Absyn_Exp*
! _temp2092; struct Cyc_Absyn_Exp* _temp2094; struct Cyc_Absyn_Vardecl* _temp2096;
! _LL2088: if(*(( int*) _temp2086) ==  Cyc_Absyn_Comprehension_e){ _LL2097:
! _temp2096=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp2086)->f1; goto
! _LL2095; _LL2095: _temp2094=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp2086)->f2; goto _LL2093; _LL2093: _temp2092=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp2086)->f3; goto _LL2089;} else{ goto _LL2090;} _LL2090: goto _LL2091;
! _LL2089: vd->initializer= 0;( void*)( s->r=( void*)(( void*)( Cyc_Toc_init_comprehension(
! init_nv, Cyc_Absyn_var_exp( vd->name, 0), _temp2096, _temp2094, _temp2092, Cyc_Absyn_new_stmt((
! void*) s->r, 0), 0))->r)); goto _LL2087; _LL2091: if(( void*) vd->sc == ( void*)
! Cyc_Absyn_Static){ struct Cyc_Toc_Env* _temp2098= Cyc_Toc_copy_env( init_nv);
! _temp2098->toplevel= 1; Cyc_Toc_exp_to_c( _temp2098, init);} else{ Cyc_Toc_exp_to_c(
! init_nv, init);} goto _LL2087; _LL2087:;}} static struct Cyc_Absyn_Stmt* Cyc_Toc_letdecl_to_c(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Pat* p, struct Cyc_Core_Opt* topt,
  struct Cyc_Absyn_Exp* e, int exhaust, struct Cyc_Absyn_Stmt* s){ void* t=( void*)((
  struct Cyc_Core_Opt*) _check_null( topt))->v; Cyc_Toc_exp_to_c( nv, e);{ struct
  _tuple0* x= Cyc_Toc_temp_var(); struct _tagged_arr* succ_lab= Cyc_Toc_fresh_label();
  struct _tagged_arr* fail_lab= exhaust? succ_lab: Cyc_Toc_fresh_label();{ struct
! _RegionHandle _temp2099= _new_region(); struct _RegionHandle* prgn=& _temp2099;
! _push_region( prgn);{ struct Cyc_Absyn_Stmt* _temp2102; struct Cyc_List_List*
! _temp2104; struct Cyc_Toc_Env* _temp2106; struct _tuple11 _temp2100= Cyc_Toc_xlate_pat(
  nv, prgn, t, Cyc_Absyn_var_exp( x, 0), Cyc_Absyn_var_exp( x, 0), p, succ_lab,
! fail_lab, 0); _LL2107: _temp2106= _temp2100.f1; goto _LL2105; _LL2105: _temp2104=
! _temp2100.f2; goto _LL2103; _LL2103: _temp2102= _temp2100.f3; goto _LL2101;
! _LL2101: Cyc_Toc_stmt_to_c( _temp2106, s);{ struct Cyc_Absyn_Stmt* _temp2108=
  Cyc_Absyn_label_stmt( succ_lab, s, 0); if( exhaust){ s= Cyc_Absyn_declare_stmt(
  x, Cyc_Toc_typ_to_c( t),( struct Cyc_Absyn_Exp*) e, Cyc_Absyn_seq_stmt(
! _temp2102, _temp2108, 0), 0);} else{ struct Cyc_Absyn_Exp* _temp2109= Cyc_Toc_newthrow_exp(
! Cyc_Absyn_match_exn_exp( 0)); struct Cyc_Absyn_Stmt* _temp2110= Cyc_Absyn_label_stmt(
! fail_lab, Cyc_Absyn_exp_stmt( _temp2109, 0), 0); s= Cyc_Absyn_declare_stmt( x,
! Cyc_Toc_typ_to_c( t),( struct Cyc_Absyn_Exp*) e, Cyc_Absyn_seq_stmt( _temp2102,
! Cyc_Absyn_seq_stmt( _temp2110, _temp2108, 0), 0), 0);} for( 0; _temp2104 !=  0;
! _temp2104=(( struct Cyc_List_List*) _check_null( _temp2104))->tl){ struct
! _tuple12 _temp2113; void* _temp2114; struct _tuple0* _temp2116; struct _tuple12*
! _temp2111=( struct _tuple12*)(( struct Cyc_List_List*) _check_null( _temp2104))->hd;
! _temp2113=* _temp2111; _LL2117: _temp2116= _temp2113.f1; goto _LL2115; _LL2115:
! _temp2114= _temp2113.f2; goto _LL2112; _LL2112: s= Cyc_Absyn_declare_stmt(
! _temp2116, _temp2114, 0, s, 0);}}}; _pop_region( prgn);} return s;}} static
  struct Cyc_Toc_Env* Cyc_Toc_decls_to_c( struct Cyc_Toc_Env* nv, struct Cyc_List_List*
  ds, int top){ for( 0; ds !=  0; ds=(( struct Cyc_List_List*) _check_null( ds))->tl){
! if( ! nv->toplevel){({ void* _temp2118[ 0u]={};(( int(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("decls_to_c: not at toplevel!",
! sizeof( unsigned char), 29u), _tag_arr( _temp2118, sizeof( void*), 0u));});}{
  struct Cyc_Absyn_Decl* d=( struct Cyc_Absyn_Decl*)(( struct Cyc_List_List*)
! _check_null( ds))->hd; void* _temp2119=( void*) d->r; struct Cyc_Absyn_Vardecl*
! _temp2145; struct Cyc_Absyn_Fndecl* _temp2147; struct Cyc_Absyn_Structdecl*
! _temp2149; struct Cyc_Absyn_Uniondecl* _temp2151; struct Cyc_Absyn_Tuniondecl*
! _temp2153; struct Cyc_Absyn_Enumdecl* _temp2155; struct Cyc_Absyn_Typedefdecl*
! _temp2157; struct Cyc_List_List* _temp2159; struct Cyc_List_List* _temp2161;
! struct Cyc_List_List* _temp2163; _LL2121: if(*(( int*) _temp2119) ==  Cyc_Absyn_Var_d){
! _LL2146: _temp2145=(( struct Cyc_Absyn_Var_d_struct*) _temp2119)->f1; goto
! _LL2122;} else{ goto _LL2123;} _LL2123: if(*(( int*) _temp2119) ==  Cyc_Absyn_Fn_d){
! _LL2148: _temp2147=(( struct Cyc_Absyn_Fn_d_struct*) _temp2119)->f1; goto
! _LL2124;} else{ goto _LL2125;} _LL2125: if(*(( int*) _temp2119) ==  Cyc_Absyn_Let_d){
! goto _LL2126;} else{ goto _LL2127;} _LL2127: if(*(( int*) _temp2119) ==  Cyc_Absyn_Letv_d){
! goto _LL2128;} else{ goto _LL2129;} _LL2129: if(*(( int*) _temp2119) ==  Cyc_Absyn_Struct_d){
! _LL2150: _temp2149=(( struct Cyc_Absyn_Struct_d_struct*) _temp2119)->f1; goto
! _LL2130;} else{ goto _LL2131;} _LL2131: if(*(( int*) _temp2119) ==  Cyc_Absyn_Union_d){
! _LL2152: _temp2151=(( struct Cyc_Absyn_Union_d_struct*) _temp2119)->f1; goto
! _LL2132;} else{ goto _LL2133;} _LL2133: if(*(( int*) _temp2119) ==  Cyc_Absyn_Tunion_d){
! _LL2154: _temp2153=(( struct Cyc_Absyn_Tunion_d_struct*) _temp2119)->f1; goto
! _LL2134;} else{ goto _LL2135;} _LL2135: if(*(( int*) _temp2119) ==  Cyc_Absyn_Enum_d){
! _LL2156: _temp2155=(( struct Cyc_Absyn_Enum_d_struct*) _temp2119)->f1; goto
! _LL2136;} else{ goto _LL2137;} _LL2137: if(*(( int*) _temp2119) ==  Cyc_Absyn_Typedef_d){
! _LL2158: _temp2157=(( struct Cyc_Absyn_Typedef_d_struct*) _temp2119)->f1; goto
! _LL2138;} else{ goto _LL2139;} _LL2139: if(*(( int*) _temp2119) ==  Cyc_Absyn_Namespace_d){
! _LL2160: _temp2159=(( struct Cyc_Absyn_Namespace_d_struct*) _temp2119)->f2; goto
! _LL2140;} else{ goto _LL2141;} _LL2141: if(*(( int*) _temp2119) ==  Cyc_Absyn_Using_d){
! _LL2162: _temp2161=(( struct Cyc_Absyn_Using_d_struct*) _temp2119)->f2; goto
! _LL2142;} else{ goto _LL2143;} _LL2143: if(*(( int*) _temp2119) ==  Cyc_Absyn_ExternC_d){
! _LL2164: _temp2163=(( struct Cyc_Absyn_ExternC_d_struct*) _temp2119)->f1; goto
! _LL2144;} else{ goto _LL2120;} _LL2122: { struct _tuple0* _temp2165= _temp2145->name;
! if(( void*) _temp2145->sc == ( void*) Cyc_Absyn_ExternC){ _temp2165=({ struct
! _tuple0* _temp2166=( struct _tuple0*) _cycalloc( sizeof( struct _tuple0));
! _temp2166->f1= Cyc_Absyn_rel_ns_null; _temp2166->f2=(* _temp2165).f2; _temp2166;});}
! if( _temp2145->initializer !=  0){ Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*)
! _check_null( _temp2145->initializer));} nv= Cyc_Toc_add_varmap( nv, _temp2145->name,
! Cyc_Absyn_varb_exp( _temp2165,( void*)({ struct Cyc_Absyn_Global_b_struct*
! _temp2167=( struct Cyc_Absyn_Global_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Global_b_struct));
! _temp2167[ 0]=({ struct Cyc_Absyn_Global_b_struct _temp2168; _temp2168.tag= Cyc_Absyn_Global_b;
! _temp2168.f1= _temp2145; _temp2168;}); _temp2167;}), 0)); _temp2145->name=
! _temp2165;( void*)( _temp2145->sc=( void*) Cyc_Toc_scope_to_c(( void*) _temp2145->sc));(
! void*)( _temp2145->type=( void*) Cyc_Toc_typ_to_c_array(( void*) _temp2145->type));
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2169=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2169->hd=( void*) d; _temp2169->tl=
! Cyc_Toc_result_decls; _temp2169;}); goto _LL2120;} _LL2124: { struct _tuple0*
! _temp2170= _temp2147->name; if(( void*) _temp2147->sc == ( void*) Cyc_Absyn_ExternC){
! _temp2170=({ struct _tuple0* _temp2171=( struct _tuple0*) _cycalloc( sizeof(
! struct _tuple0)); _temp2171->f1= Cyc_Absyn_rel_ns_null; _temp2171->f2=(*
! _temp2170).f2; _temp2171;});} nv= Cyc_Toc_add_varmap( nv, _temp2147->name, Cyc_Absyn_var_exp(
! _temp2170, 0)); _temp2147->name= _temp2170; Cyc_Toc_fndecl_to_c( nv, _temp2147);
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2172=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2172->hd=( void*) d; _temp2172->tl=
! Cyc_Toc_result_decls; _temp2172;}); goto _LL2120;} _LL2126: goto _LL2128;
! _LL2128:({ void* _temp2173[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("letdecl at toplevel", sizeof(
! unsigned char), 20u), _tag_arr( _temp2173, sizeof( void*), 0u));}); goto _LL2120;
! _LL2130: Cyc_Toc_structdecl_to_c( _temp2149); Cyc_Toc_result_decls=({ struct Cyc_List_List*
! _temp2174=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2174->hd=( void*) d; _temp2174->tl= Cyc_Toc_result_decls; _temp2174;});
! goto _LL2120; _LL2132: Cyc_Toc_uniondecl_to_c( _temp2151); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp2175=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2175->hd=( void*) d; _temp2175->tl= Cyc_Toc_result_decls;
! _temp2175;}); goto _LL2120; _LL2134: if( _temp2153->is_xtunion){ Cyc_Toc_xtuniondecl_to_c(
! _temp2153);} else{ Cyc_Toc_tuniondecl_to_c( _temp2153);} goto _LL2120; _LL2136:
! Cyc_Toc_enumdecl_to_c( nv, _temp2155); Cyc_Toc_result_decls=({ struct Cyc_List_List*
! _temp2176=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2176->hd=( void*) d; _temp2176->tl= Cyc_Toc_result_decls; _temp2176;});
! goto _LL2120; _LL2138: _temp2157->name= _temp2157->name; _temp2157->tvs= 0;(
! void*)( _temp2157->defn=( void*) Cyc_Toc_typ_to_c_array(( void*) _temp2157->defn));
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2177=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2177->hd=( void*) d; _temp2177->tl=
! Cyc_Toc_result_decls; _temp2177;}); goto _LL2120; _LL2140: _temp2161= _temp2159;
! goto _LL2142; _LL2142: _temp2163= _temp2161; goto _LL2144; _LL2144: nv= Cyc_Toc_decls_to_c(
! nv, _temp2163, top); goto _LL2120; _LL2120:;}} return nv;} static void Cyc_Toc_init(){
  Cyc_Toc_result_decls= 0; Cyc_Toc_tuple_types= 0; Cyc_Toc_tuple_type_counter= 0;
  Cyc_Toc_temp_var_counter= 0; Cyc_Toc_fresh_label_counter= 0; Cyc_Toc_structs_so_far=
  0; Cyc_Toc_tunions_so_far= 0; Cyc_Toc_xtunion_fields_so_far= 0;} struct Cyc_List_List*
--- 3041,3721 ----
  s); static void Cyc_Toc_local_decl_to_c( struct Cyc_Toc_Env* body_nv, struct Cyc_Toc_Env*
  init_nv, struct Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Stmt* s); struct Cyc_Absyn_Stmt*
  Cyc_Toc_make_npop_handler( int n){ return Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp(
! Cyc_Toc__npop_handler_e,({ struct Cyc_List_List* _temp1702=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List) *  1); _temp1702[ 0]=({ struct Cyc_List_List
! _temp1703; _temp1703.hd=( void*) Cyc_Absyn_uint_exp(( unsigned int)( n -  1), 0);
! _temp1703.tl= 0; _temp1703;}); _temp1702;}), 0), 0);} void Cyc_Toc_do_npop_before(
  int n, struct Cyc_Absyn_Stmt* s){ if( n >  0){( void*)( s->r=( void*)(( void*)(
  Cyc_Absyn_seq_stmt( Cyc_Toc_make_npop_handler( n), Cyc_Absyn_new_stmt(( void*) s->r,
  0), 0))->r));}} static void Cyc_Toc_stmt_to_c( struct Cyc_Toc_Env* nv, struct
! Cyc_Absyn_Stmt* s){ while( 1) { void* _temp1704=( void*) s->r; struct Cyc_Absyn_Exp*
! _temp1746; struct Cyc_Absyn_Stmt* _temp1748; struct Cyc_Absyn_Stmt* _temp1750;
! struct Cyc_Absyn_Exp* _temp1752; struct Cyc_Absyn_Stmt* _temp1754; struct Cyc_Absyn_Stmt*
! _temp1756; struct Cyc_Absyn_Exp* _temp1758; struct Cyc_Absyn_Stmt* _temp1760;
! struct _tuple2 _temp1762; struct Cyc_Absyn_Exp* _temp1764; struct Cyc_Absyn_Stmt*
! _temp1766; struct Cyc_Absyn_Stmt* _temp1768; struct Cyc_Absyn_Stmt* _temp1770;
! struct Cyc_Absyn_Stmt* _temp1772; struct _tuple2 _temp1774; struct Cyc_Absyn_Exp*
! _temp1776; struct _tuple2 _temp1778; struct Cyc_Absyn_Exp* _temp1780; struct Cyc_Absyn_Exp*
! _temp1782; struct Cyc_List_List* _temp1784; struct Cyc_Absyn_Exp* _temp1786;
! struct Cyc_Absyn_Switch_clause** _temp1788; struct Cyc_List_List* _temp1790;
! struct Cyc_Absyn_Stmt* _temp1792; struct Cyc_Absyn_Decl* _temp1794; struct Cyc_Absyn_Stmt*
! _temp1796; struct _tagged_arr* _temp1798; struct _tuple2 _temp1800; struct Cyc_Absyn_Exp*
! _temp1802; struct Cyc_Absyn_Stmt* _temp1804; struct Cyc_List_List* _temp1806;
! struct Cyc_Absyn_Stmt* _temp1808; struct Cyc_Absyn_Stmt* _temp1810; struct Cyc_Absyn_Vardecl*
! _temp1812; struct Cyc_Absyn_Tvar* _temp1814; _LL1706: if( _temp1704 == ( void*)
! Cyc_Absyn_Skip_s){ goto _LL1707;} else{ goto _LL1708;} _LL1708: if((
! unsigned int) _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Exp_s: 0){
! _LL1747: _temp1746=(( struct Cyc_Absyn_Exp_s_struct*) _temp1704)->f1; goto
! _LL1709;} else{ goto _LL1710;} _LL1710: if(( unsigned int) _temp1704 >  1u?*((
! int*) _temp1704) ==  Cyc_Absyn_Seq_s: 0){ _LL1751: _temp1750=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1704)->f1; goto _LL1749; _LL1749: _temp1748=(( struct Cyc_Absyn_Seq_s_struct*)
! _temp1704)->f2; goto _LL1711;} else{ goto _LL1712;} _LL1712: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Return_s: 0){ _LL1753:
! _temp1752=(( struct Cyc_Absyn_Return_s_struct*) _temp1704)->f1; goto _LL1713;}
! else{ goto _LL1714;} _LL1714: if(( unsigned int) _temp1704 >  1u?*(( int*)
! _temp1704) ==  Cyc_Absyn_IfThenElse_s: 0){ _LL1759: _temp1758=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp1704)->f1; goto _LL1757; _LL1757: _temp1756=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp1704)->f2; goto _LL1755; _LL1755: _temp1754=(( struct Cyc_Absyn_IfThenElse_s_struct*)
! _temp1704)->f3; goto _LL1715;} else{ goto _LL1716;} _LL1716: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_While_s: 0){ _LL1763:
! _temp1762=(( struct Cyc_Absyn_While_s_struct*) _temp1704)->f1; _LL1765:
! _temp1764= _temp1762.f1; goto _LL1761; _LL1761: _temp1760=(( struct Cyc_Absyn_While_s_struct*)
! _temp1704)->f2; goto _LL1717;} else{ goto _LL1718;} _LL1718: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Break_s: 0){ _LL1767:
! _temp1766=(( struct Cyc_Absyn_Break_s_struct*) _temp1704)->f1; goto _LL1719;}
! else{ goto _LL1720;} _LL1720: if(( unsigned int) _temp1704 >  1u?*(( int*)
! _temp1704) ==  Cyc_Absyn_Continue_s: 0){ _LL1769: _temp1768=(( struct Cyc_Absyn_Continue_s_struct*)
! _temp1704)->f1; goto _LL1721;} else{ goto _LL1722;} _LL1722: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Goto_s: 0){ _LL1771:
! _temp1770=(( struct Cyc_Absyn_Goto_s_struct*) _temp1704)->f2; goto _LL1723;}
! else{ goto _LL1724;} _LL1724: if(( unsigned int) _temp1704 >  1u?*(( int*)
! _temp1704) ==  Cyc_Absyn_For_s: 0){ _LL1783: _temp1782=(( struct Cyc_Absyn_For_s_struct*)
! _temp1704)->f1; goto _LL1779; _LL1779: _temp1778=(( struct Cyc_Absyn_For_s_struct*)
! _temp1704)->f2; _LL1781: _temp1780= _temp1778.f1; goto _LL1775; _LL1775:
! _temp1774=(( struct Cyc_Absyn_For_s_struct*) _temp1704)->f3; _LL1777: _temp1776=
! _temp1774.f1; goto _LL1773; _LL1773: _temp1772=(( struct Cyc_Absyn_For_s_struct*)
! _temp1704)->f4; goto _LL1725;} else{ goto _LL1726;} _LL1726: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Switch_s: 0){ _LL1787:
! _temp1786=(( struct Cyc_Absyn_Switch_s_struct*) _temp1704)->f1; goto _LL1785;
! _LL1785: _temp1784=(( struct Cyc_Absyn_Switch_s_struct*) _temp1704)->f2; goto
! _LL1727;} else{ goto _LL1728;} _LL1728: if(( unsigned int) _temp1704 >  1u?*((
! int*) _temp1704) ==  Cyc_Absyn_Fallthru_s: 0){ _LL1791: _temp1790=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp1704)->f1; goto _LL1789; _LL1789: _temp1788=(( struct Cyc_Absyn_Fallthru_s_struct*)
! _temp1704)->f2; goto _LL1729;} else{ goto _LL1730;} _LL1730: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Decl_s: 0){ _LL1795:
! _temp1794=(( struct Cyc_Absyn_Decl_s_struct*) _temp1704)->f1; goto _LL1793;
! _LL1793: _temp1792=(( struct Cyc_Absyn_Decl_s_struct*) _temp1704)->f2; goto
! _LL1731;} else{ goto _LL1732;} _LL1732: if(( unsigned int) _temp1704 >  1u?*((
! int*) _temp1704) ==  Cyc_Absyn_Label_s: 0){ _LL1799: _temp1798=(( struct Cyc_Absyn_Label_s_struct*)
! _temp1704)->f1; goto _LL1797; _LL1797: _temp1796=(( struct Cyc_Absyn_Label_s_struct*)
! _temp1704)->f2; goto _LL1733;} else{ goto _LL1734;} _LL1734: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Do_s: 0){ _LL1805: _temp1804=((
! struct Cyc_Absyn_Do_s_struct*) _temp1704)->f1; goto _LL1801; _LL1801: _temp1800=((
! struct Cyc_Absyn_Do_s_struct*) _temp1704)->f2; _LL1803: _temp1802= _temp1800.f1;
! goto _LL1735;} else{ goto _LL1736;} _LL1736: if(( unsigned int) _temp1704 >  1u?*((
! int*) _temp1704) ==  Cyc_Absyn_TryCatch_s: 0){ _LL1809: _temp1808=(( struct Cyc_Absyn_TryCatch_s_struct*)
! _temp1704)->f1; goto _LL1807; _LL1807: _temp1806=(( struct Cyc_Absyn_TryCatch_s_struct*)
! _temp1704)->f2; goto _LL1737;} else{ goto _LL1738;} _LL1738: if(( unsigned int)
! _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Region_s: 0){ _LL1815:
! _temp1814=(( struct Cyc_Absyn_Region_s_struct*) _temp1704)->f1; goto _LL1813;
! _LL1813: _temp1812=(( struct Cyc_Absyn_Region_s_struct*) _temp1704)->f2; goto
! _LL1811; _LL1811: _temp1810=(( struct Cyc_Absyn_Region_s_struct*) _temp1704)->f3;
! goto _LL1739;} else{ goto _LL1740;} _LL1740: if(( unsigned int) _temp1704 >  1u?*((
! int*) _temp1704) ==  Cyc_Absyn_SwitchC_s: 0){ goto _LL1741;} else{ goto _LL1742;}
! _LL1742: if(( unsigned int) _temp1704 >  1u?*(( int*) _temp1704) ==  Cyc_Absyn_Cut_s:
! 0){ goto _LL1743;} else{ goto _LL1744;} _LL1744: if(( unsigned int) _temp1704 > 
! 1u?*(( int*) _temp1704) ==  Cyc_Absyn_Splice_s: 0){ goto _LL1745;} else{ goto
! _LL1705;} _LL1707: return; _LL1709: Cyc_Toc_exp_to_c( nv, _temp1746); return;
! _LL1711: Cyc_Toc_stmt_to_c( nv, _temp1750); s= _temp1748; continue; _LL1713: {
! struct Cyc_Core_Opt* topt= 0; if( _temp1752 !=  0){ topt=({ struct Cyc_Core_Opt*
! _temp1816=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1816->v=( void*) Cyc_Toc_typ_to_c(( void*)(( struct Cyc_Core_Opt*)
! _check_null((( struct Cyc_Absyn_Exp*) _check_null( _temp1752))->topt))->v);
! _temp1816;}); Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*) _check_null(
! _temp1752));} if( s->try_depth >  0){ if( topt !=  0){ struct _tuple0* _temp1817=
! Cyc_Toc_temp_var(); struct Cyc_Absyn_Stmt* _temp1818= Cyc_Absyn_return_stmt((
! struct Cyc_Absyn_Exp*) Cyc_Absyn_var_exp( _temp1817, 0), 0);( void*)( s->r=(
! void*)(( void*)( Cyc_Absyn_declare_stmt( _temp1817,( void*)(( struct Cyc_Core_Opt*)
! _check_null( topt))->v, _temp1752, Cyc_Absyn_seq_stmt( Cyc_Toc_make_npop_handler(
! s->try_depth), _temp1818, 0), 0))->r));} else{ Cyc_Toc_do_npop_before( s->try_depth,
! s);}} return;} _LL1715: Cyc_Toc_exp_to_c( nv, _temp1758); Cyc_Toc_stmt_to_c( nv,
! _temp1756); s= _temp1754; continue; _LL1717: Cyc_Toc_exp_to_c( nv, _temp1764);
! Cyc_Toc_stmt_to_c( Cyc_Toc_loop_env( nv), _temp1760); return; _LL1719: if( nv->break_lab
  !=  0){( void*)( s->r=( void*)(( void*)( Cyc_Absyn_goto_stmt(( struct
  _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null( nv->break_lab))->v, 0))->r));}{
! int dest_depth= _temp1766 ==  0? 0:(( struct Cyc_Absyn_Stmt*) _check_null(
! _temp1766))->try_depth; Cyc_Toc_do_npop_before( s->try_depth -  dest_depth, s);
! return;} _LL1721: if( nv->continue_lab !=  0){( void*)( s->r=( void*)(( void*)(
  Cyc_Absyn_goto_stmt(( struct _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null(
! nv->continue_lab))->v, 0))->r));} _temp1770= _temp1768; goto _LL1723; _LL1723:
  Cyc_Toc_do_npop_before( s->try_depth - (( struct Cyc_Absyn_Stmt*) _check_null(
! _temp1770))->try_depth, s); return; _LL1725: Cyc_Toc_exp_to_c( nv, _temp1782);
! Cyc_Toc_exp_to_c( nv, _temp1780); Cyc_Toc_exp_to_c( nv, _temp1776); Cyc_Toc_stmt_to_c(
! Cyc_Toc_loop_env( nv), _temp1772); return; _LL1727: Cyc_Toc_xlate_switch( nv, s,
! _temp1786, _temp1784); return; _LL1729: if( nv->fallthru_info ==  0){( int)
! _throw(({ void* _temp1819[ 0u]={}; Cyc_Toc_toc_impos( _tag_arr("fallthru in unexpected place",
! sizeof( unsigned char), 29u), _tag_arr( _temp1819, sizeof( void*), 0u));}));}{
! struct _tuple6 _temp1822; struct Cyc_Dict_Dict* _temp1823; struct Cyc_List_List*
! _temp1825; struct _tagged_arr* _temp1827; struct _tuple6* _temp1820=( struct
! _tuple6*)(( struct Cyc_Core_Opt*) _check_null( nv->fallthru_info))->v; _temp1822=*
! _temp1820; _LL1828: _temp1827= _temp1822.f1; goto _LL1826; _LL1826: _temp1825=
! _temp1822.f2; goto _LL1824; _LL1824: _temp1823= _temp1822.f3; goto _LL1821;
! _LL1821: { struct Cyc_Absyn_Stmt* s2= Cyc_Absyn_goto_stmt( _temp1827, 0); Cyc_Toc_do_npop_before(
! s->try_depth - ((*(( struct Cyc_Absyn_Switch_clause**) _check_null( _temp1788)))->body)->try_depth,
! s2);{ struct Cyc_List_List* _temp1829=(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x)) Cyc_List_rev)( _temp1825); struct Cyc_List_List* _temp1830=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_rev)( _temp1790); for( 0; _temp1829 !=  0;(
! _temp1829=(( struct Cyc_List_List*) _check_null( _temp1829))->tl, _temp1830=((
! struct Cyc_List_List*) _check_null( _temp1830))->tl)){ Cyc_Toc_exp_to_c( nv,(
! struct Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp1830))->hd);
  s2= Cyc_Absyn_seq_stmt( Cyc_Absyn_assign_stmt((( struct Cyc_Absyn_Exp*(*)(
! struct Cyc_Dict_Dict* d, struct _tuple0* k)) Cyc_Dict_lookup)( _temp1823,(
! struct _tuple0*)(( struct Cyc_List_List*) _check_null( _temp1829))->hd),( struct
! Cyc_Absyn_Exp*)(( struct Cyc_List_List*) _check_null( _temp1830))->hd, 0), s2, 0);}(
! void*)( s->r=( void*)(( void*) s2->r)); return;}}} _LL1731:{ void* _temp1831=(
! void*) _temp1794->r; struct Cyc_Absyn_Vardecl* _temp1841; int _temp1843; struct
! Cyc_Absyn_Exp* _temp1845; struct Cyc_Core_Opt* _temp1847; struct Cyc_Absyn_Pat*
! _temp1849; struct Cyc_List_List* _temp1851; _LL1833: if(*(( int*) _temp1831) == 
! Cyc_Absyn_Var_d){ _LL1842: _temp1841=(( struct Cyc_Absyn_Var_d_struct*)
! _temp1831)->f1; goto _LL1834;} else{ goto _LL1835;} _LL1835: if(*(( int*)
! _temp1831) ==  Cyc_Absyn_Let_d){ _LL1850: _temp1849=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1831)->f1; goto _LL1848; _LL1848: _temp1847=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1831)->f3; goto _LL1846; _LL1846: _temp1845=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1831)->f4; goto _LL1844; _LL1844: _temp1843=(( struct Cyc_Absyn_Let_d_struct*)
! _temp1831)->f5; goto _LL1836;} else{ goto _LL1837;} _LL1837: if(*(( int*)
! _temp1831) ==  Cyc_Absyn_Letv_d){ _LL1852: _temp1851=(( struct Cyc_Absyn_Letv_d_struct*)
! _temp1831)->f1; goto _LL1838;} else{ goto _LL1839;} _LL1839: goto _LL1840;
! _LL1834: { struct Cyc_Toc_Env* _temp1853= Cyc_Toc_add_varmap( nv, _temp1841->name,
! Cyc_Absyn_varb_exp( _temp1841->name,( void*)({ struct Cyc_Absyn_Local_b_struct*
! _temp1854=( struct Cyc_Absyn_Local_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Local_b_struct));
! _temp1854[ 0]=({ struct Cyc_Absyn_Local_b_struct _temp1855; _temp1855.tag= Cyc_Absyn_Local_b;
! _temp1855.f1= _temp1841; _temp1855;}); _temp1854;}), 0)); Cyc_Toc_local_decl_to_c(
! _temp1853, _temp1853, _temp1841, _temp1792); goto _LL1832;} _LL1836:{ void*
! _temp1856=( void*) _temp1849->r; struct Cyc_Absyn_Vardecl* _temp1862; _LL1858:
! if(( unsigned int) _temp1856 >  2u?*(( int*) _temp1856) ==  Cyc_Absyn_Var_p: 0){
! _LL1863: _temp1862=(( struct Cyc_Absyn_Var_p_struct*) _temp1856)->f1; goto
! _LL1859;} else{ goto _LL1860;} _LL1860: goto _LL1861; _LL1859: { struct _tuple0*
! old_name= _temp1862->name; struct _tuple0* new_name= Cyc_Toc_temp_var();
! _temp1862->name= new_name; _temp1862->initializer=( struct Cyc_Absyn_Exp*)
! _temp1845;( void*)( _temp1794->r=( void*)(( void*)({ struct Cyc_Absyn_Var_d_struct*
! _temp1864=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp1864[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp1865; _temp1865.tag= Cyc_Absyn_Var_d;
! _temp1865.f1= _temp1862; _temp1865;}); _temp1864;})));{ struct Cyc_Toc_Env*
! _temp1866= Cyc_Toc_add_varmap( nv, old_name, Cyc_Absyn_varb_exp( new_name,( void*)({
! struct Cyc_Absyn_Local_b_struct* _temp1867=( struct Cyc_Absyn_Local_b_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Local_b_struct)); _temp1867[ 0]=({ struct
! Cyc_Absyn_Local_b_struct _temp1868; _temp1868.tag= Cyc_Absyn_Local_b; _temp1868.f1=
! _temp1862; _temp1868;}); _temp1867;}), 0)); Cyc_Toc_local_decl_to_c( _temp1866,
! nv, _temp1862, _temp1792); goto _LL1857;}} _LL1861:( void*)( s->r=( void*)((
! void*)( Cyc_Toc_letdecl_to_c( nv, _temp1849, _temp1847, _temp1845, _temp1843,
! _temp1792))->r)); goto _LL1857; _LL1857:;} goto _LL1832; _LL1838: { struct Cyc_List_List*
! _temp1869=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_rev)(
! _temp1851); if( _temp1869 ==  0){({ void* _temp1870[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("empty Letv_d",
! sizeof( unsigned char), 13u), _tag_arr( _temp1870, sizeof( void*), 0u));});}(
! void*)( _temp1794->r=( void*)(( void*)({ struct Cyc_Absyn_Var_d_struct*
! _temp1871=( struct Cyc_Absyn_Var_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct));
! _temp1871[ 0]=({ struct Cyc_Absyn_Var_d_struct _temp1872; _temp1872.tag= Cyc_Absyn_Var_d;
! _temp1872.f1=( struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null(
! _temp1869))->hd; _temp1872;}); _temp1871;}))); _temp1869=(( struct Cyc_List_List*)
! _check_null( _temp1869))->tl; for( 0; _temp1869 !=  0; _temp1869=(( struct Cyc_List_List*)
! _check_null( _temp1869))->tl){ struct Cyc_Absyn_Decl* _temp1873= Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Var_d_struct* _temp1874=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp1874[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp1875; _temp1875.tag= Cyc_Absyn_Var_d; _temp1875.f1=( struct Cyc_Absyn_Vardecl*)((
! struct Cyc_List_List*) _check_null( _temp1869))->hd; _temp1875;}); _temp1874;}),
! 0);( void*)( s->r=( void*)(( void*)( Cyc_Absyn_decl_stmt( _temp1873, Cyc_Absyn_new_stmt((
! void*) s->r, 0), 0))->r));} Cyc_Toc_stmt_to_c( nv, s); goto _LL1832;} _LL1840:({
! void* _temp1876[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct _tagged_arr ap))
  Cyc_Tcutil_impos)( _tag_arr("bad nested declaration within function", sizeof(
! unsigned char), 39u), _tag_arr( _temp1876, sizeof( void*), 0u));}); goto _LL1832;
! _LL1832:;} return; _LL1733: s= _temp1796; continue; _LL1735: Cyc_Toc_stmt_to_c(
! Cyc_Toc_loop_env( nv), _temp1804); Cyc_Toc_exp_to_c( nv, _temp1802); return;
! _LL1737: { struct _tuple0* h_var= Cyc_Toc_temp_var(); struct _tuple0* e_var= Cyc_Toc_temp_var();
  struct _tuple0* was_thrown_var= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* h_exp=
  Cyc_Absyn_var_exp( h_var, 0); struct Cyc_Absyn_Exp* e_exp= Cyc_Absyn_var_exp(
  e_var, 0); struct Cyc_Absyn_Exp* was_thrown_exp= Cyc_Absyn_var_exp(
  was_thrown_var, 0); void* h_typ= Cyc_Absyn_strct( Cyc_Toc__handler_cons_sp);
  void* e_typ= Cyc_Toc_typ_to_c( Cyc_Absyn_exn_typ); void* was_thrown_typ= Cyc_Toc_typ_to_c(
! Cyc_Absyn_sint_t); e_exp->topt=({ struct Cyc_Core_Opt* _temp1877=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1877->v=( void*) e_typ; _temp1877;});
! nv= Cyc_Toc_add_varmap( nv, e_var, e_exp); Cyc_Toc_stmt_to_c( nv, _temp1808);{
! struct Cyc_Absyn_Stmt* _temp1878= Cyc_Absyn_seq_stmt( _temp1808, Cyc_Absyn_exp_stmt(
  Cyc_Absyn_fncall_exp( Cyc_Toc__pop_handler_e, 0, 0), 0), 0); struct _tuple0*
! _temp1879= Cyc_Toc_temp_var(); struct Cyc_Absyn_Exp* _temp1880= Cyc_Absyn_var_exp(
! _temp1879, 0); struct Cyc_Absyn_Vardecl* _temp1881= Cyc_Absyn_new_vardecl(
! _temp1879, Cyc_Absyn_exn_typ, 0); _temp1880->topt=({ struct Cyc_Core_Opt*
! _temp1882=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1882->v=( void*) Cyc_Absyn_exn_typ; _temp1882;});{ struct Cyc_Absyn_Pat*
! _temp1883=({ struct Cyc_Absyn_Pat* _temp1899=( struct Cyc_Absyn_Pat*) _cycalloc(
! sizeof( struct Cyc_Absyn_Pat)); _temp1899->r=( void*)(( void*)({ struct Cyc_Absyn_Var_p_struct*
! _temp1901=( struct Cyc_Absyn_Var_p_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Var_p_struct));
! _temp1901[ 0]=({ struct Cyc_Absyn_Var_p_struct _temp1902; _temp1902.tag= Cyc_Absyn_Var_p;
! _temp1902.f1= _temp1881; _temp1902;}); _temp1901;})); _temp1899->topt=({ struct
! Cyc_Core_Opt* _temp1900=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1900->v=( void*) Cyc_Absyn_exn_typ; _temp1900;}); _temp1899->loc= 0;
! _temp1899;}); struct Cyc_Absyn_Exp* _temp1884= Cyc_Absyn_throw_exp( _temp1880, 0);
! _temp1884->topt=({ struct Cyc_Core_Opt* _temp1885=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1885->v=( void*)(( void*) Cyc_Absyn_VoidType);
! _temp1885;});{ struct Cyc_Absyn_Stmt* _temp1886= Cyc_Absyn_exp_stmt( _temp1884,
! 0); struct Cyc_Absyn_Switch_clause* _temp1887=({ struct Cyc_Absyn_Switch_clause*
! _temp1896=( struct Cyc_Absyn_Switch_clause*) _cycalloc( sizeof( struct Cyc_Absyn_Switch_clause));
! _temp1896->pattern= _temp1883; _temp1896->pat_vars=({ struct Cyc_Core_Opt*
! _temp1897=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1897->v=( void*)({ struct Cyc_List_List* _temp1898=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1898->hd=( void*) _temp1881;
! _temp1898->tl= 0; _temp1898;}); _temp1897;}); _temp1896->where_clause= 0;
! _temp1896->body= _temp1886; _temp1896->loc= 0; _temp1896;}); struct Cyc_Absyn_Stmt*
! _temp1888= Cyc_Absyn_switch_stmt( e_exp,(( struct Cyc_List_List*(*)( struct Cyc_List_List*
! x, struct Cyc_List_List* y)) Cyc_List_append)( _temp1806,({ struct Cyc_List_List*
! _temp1895=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1895->hd=( void*) _temp1887; _temp1895->tl= 0; _temp1895;})), 0); Cyc_Toc_stmt_to_c(
! nv, _temp1888);{ struct Cyc_Absyn_Exp* _temp1889= Cyc_Absyn_fncall_exp( Cyc_Toc_setjmp_e,({
! struct Cyc_List_List* _temp1894=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1894->hd=( void*) Cyc_Absyn_structmember_exp( h_exp,
! Cyc_Toc_handler_sp, 0); _temp1894->tl= 0; _temp1894;}), 0); struct Cyc_Absyn_Stmt*
! _temp1890= Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp( Cyc_Toc__push_handler_e,({
! struct Cyc_List_List* _temp1893=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1893->hd=( void*) Cyc_Absyn_address_exp( h_exp, 0);
! _temp1893->tl= 0; _temp1893;}), 0), 0); struct Cyc_Absyn_Exp* _temp1891= Cyc_Absyn_int_exp((
! void*) Cyc_Absyn_Signed, 0, 0); struct Cyc_Absyn_Exp* _temp1892= Cyc_Absyn_int_exp((
  void*) Cyc_Absyn_Signed, 1, 0);( void*)( s->r=( void*)(( void*)( Cyc_Absyn_declare_stmt(
! h_var, h_typ, 0, Cyc_Absyn_seq_stmt( _temp1890, Cyc_Absyn_declare_stmt(
! was_thrown_var, was_thrown_typ,( struct Cyc_Absyn_Exp*) _temp1891, Cyc_Absyn_seq_stmt(
! Cyc_Absyn_ifthenelse_stmt( _temp1889, Cyc_Absyn_assign_stmt( was_thrown_exp,
! _temp1892, 0), Cyc_Absyn_skip_stmt( 0), 0), Cyc_Absyn_ifthenelse_stmt( Cyc_Absyn_prim1_exp((
! void*) Cyc_Absyn_Not, was_thrown_exp, 0), _temp1878, Cyc_Absyn_declare_stmt(
  e_var, e_typ,( struct Cyc_Absyn_Exp*) Cyc_Absyn_cast_exp( e_typ, Cyc_Toc__exn_thrown_e,
! 0), _temp1888, 0), 0), 0), 0), 0), 0))->r)); return;}}}}} _LL1739: { void*
  rh_struct_typ= Cyc_Absyn_strct( Cyc_Toc__RegionHandle_sp); void*
  rh_struct_ptr_typ= Cyc_Absyn_cstar_typ( rh_struct_typ, Cyc_Toc_mt_tq); struct
! _tuple0* rh_var= Cyc_Toc_temp_var(); struct _tuple0* x_var= _temp1812->name;
  struct Cyc_Absyn_Exp* rh_exp= Cyc_Absyn_var_exp( rh_var, 0); struct Cyc_Absyn_Exp*
  x_exp= Cyc_Absyn_var_exp( x_var, 0); Cyc_Toc_stmt_to_c( Cyc_Toc_add_varmap( nv,
! x_var, x_exp), _temp1810);( void*)( s->r=( void*)(( void*)( Cyc_Absyn_declare_stmt(
  rh_var, rh_struct_typ,( struct Cyc_Absyn_Exp*) Cyc_Absyn_fncall_exp( Cyc_Toc__new_region_e,
  0, 0), Cyc_Absyn_declare_stmt( x_var, rh_struct_ptr_typ,( struct Cyc_Absyn_Exp*)
  Cyc_Absyn_address_exp( rh_exp, 0), Cyc_Absyn_seq_stmt( Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp(
! Cyc_Toc__push_region_e,({ struct Cyc_Absyn_Exp* _temp1903[ 1u]; _temp1903[ 0u]=
  x_exp;(( struct Cyc_List_List*(*)( struct _tagged_arr)) Cyc_List_list)( _tag_arr(
! _temp1903, sizeof( struct Cyc_Absyn_Exp*), 1u));}), 0), 0), Cyc_Absyn_seq_stmt(
! _temp1810, Cyc_Absyn_exp_stmt( Cyc_Absyn_fncall_exp( Cyc_Toc__pop_region_e,({
! struct Cyc_Absyn_Exp* _temp1904[ 1u]; _temp1904[ 0u]= x_exp;(( struct Cyc_List_List*(*)(
! struct _tagged_arr)) Cyc_List_list)( _tag_arr( _temp1904, sizeof( struct Cyc_Absyn_Exp*),
! 1u));}), 0), 0), 0), 0), 0), 0))->r)); return;} _LL1741:({ void* _temp1905[ 0u]={};((
  int(*)( struct _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_toc_impos)(
! _tag_arr("switchC_s", sizeof( unsigned char), 10u), _tag_arr( _temp1905, sizeof(
! void*), 0u));}); return; _LL1743:({ void* _temp1906[ 0u]={};(( int(*)( struct
  _tagged_arr fmt, struct _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("cut", sizeof(
! unsigned char), 4u), _tag_arr( _temp1906, sizeof( void*), 0u));}); return;
! _LL1745:({ void* _temp1907[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_unimp)( _tag_arr("splice", sizeof( unsigned char), 7u),
! _tag_arr( _temp1907, sizeof( void*), 0u));}); return; _LL1705:;}} struct
  _tuple15{ struct _tagged_arr* f1; struct Cyc_Absyn_Tqual f2; void* f3; } ;
  static void Cyc_Toc_fndecl_to_c( struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Fndecl*
  f){ f->tvs= 0; f->effect= 0; f->rgn_po= 0;( void*)( f->ret_type=( void*) Cyc_Toc_typ_to_c((
! void*) f->ret_type));{ struct Cyc_List_List* _temp1908= f->args; for( 0;
! _temp1908 !=  0; _temp1908=(( struct Cyc_List_List*) _check_null( _temp1908))->tl){(*((
! struct _tuple15*)(( struct Cyc_List_List*) _check_null( _temp1908))->hd)).f3=
  Cyc_Toc_typ_to_c((*(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! _temp1908))->hd)).f3);{ struct _tuple0* _temp1909=({ struct _tuple0* _temp1910=(
! struct _tuple0*) _cycalloc( sizeof( struct _tuple0)); _temp1910->f1=( void*) Cyc_Absyn_Loc_n;
! _temp1910->f2=(*(( struct _tuple15*)(( struct Cyc_List_List*) _check_null(
! _temp1908))->hd)).f1; _temp1910;}); nv= Cyc_Toc_add_varmap( nv, _temp1909, Cyc_Absyn_var_exp(
! _temp1909, 0));}}} if(( unsigned int) f->cyc_varargs?(( struct Cyc_Absyn_VarargInfo*)
! _check_null( f->cyc_varargs))->name !=  0: 0){ int _temp1913; void* _temp1915;
! struct Cyc_Absyn_Tqual _temp1917; struct Cyc_Core_Opt* _temp1919; struct Cyc_Absyn_VarargInfo
! _temp1911=*(( struct Cyc_Absyn_VarargInfo*) _check_null( f->cyc_varargs));
! _LL1920: _temp1919= _temp1911.name; goto _LL1918; _LL1918: _temp1917= _temp1911.tq;
! goto _LL1916; _LL1916: _temp1915=( void*) _temp1911.type; goto _LL1914; _LL1914:
! _temp1913= _temp1911.inject; goto _LL1912; _LL1912: { void* _temp1921= Cyc_Toc_typ_to_c(
! Cyc_Absyn_tagged_typ( _temp1915,( void*) Cyc_Absyn_HeapRgn, _temp1917)); struct
! _tuple0* _temp1922=({ struct _tuple0* _temp1925=( struct _tuple0*) _cycalloc(
! sizeof( struct _tuple0)); _temp1925->f1=( void*) Cyc_Absyn_Loc_n; _temp1925->f2=(
! struct _tagged_arr*)(( struct Cyc_Core_Opt*) _check_null( _temp1919))->v;
! _temp1925;}); f->args=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x,
  struct Cyc_List_List* y)) Cyc_List_append)( f->args,({ struct Cyc_List_List*
! _temp1923=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1923->hd=( void*)({ struct _tuple15* _temp1924=( struct _tuple15*)
! _cycalloc( sizeof( struct _tuple15)); _temp1924->f1=( struct _tagged_arr*)((
! struct Cyc_Core_Opt*) _check_null( _temp1919))->v; _temp1924->f2= _temp1917;
! _temp1924->f3= _temp1921; _temp1924;}); _temp1923->tl= 0; _temp1923;})); nv= Cyc_Toc_add_varmap(
! nv, _temp1922, Cyc_Absyn_var_exp( _temp1922, 0)); f->cyc_varargs= 0;}}{ struct
! Cyc_List_List* _temp1926=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( f->param_vardecls))->v; for( 0; _temp1926 !=  0; _temp1926=((
! struct Cyc_List_List*) _check_null( _temp1926))->tl){( void*)((( struct Cyc_Absyn_Vardecl*)((
! struct Cyc_List_List*) _check_null( _temp1926))->hd)->type=( void*) Cyc_Toc_typ_to_c((
  void*)(( struct Cyc_Absyn_Vardecl*)(( struct Cyc_List_List*) _check_null(
! _temp1926))->hd)->type));}} Cyc_Toc_stmt_to_c( Cyc_Toc_clear_toplevel( nv), f->body);}
! static void* Cyc_Toc_scope_to_c( void* s){ void* _temp1927= s; _LL1929: if(
! _temp1927 == ( void*) Cyc_Absyn_Abstract){ goto _LL1930;} else{ goto _LL1931;}
! _LL1931: if( _temp1927 == ( void*) Cyc_Absyn_ExternC){ goto _LL1932;} else{ goto
! _LL1933;} _LL1933: goto _LL1934; _LL1930: return( void*) Cyc_Absyn_Public;
! _LL1932: return( void*) Cyc_Absyn_Extern; _LL1934: return s; _LL1928:;} struct
  Cyc_Core_Opt* Cyc_Toc_structs_so_far= 0; static void Cyc_Toc_structdecl_to_c(
! struct Cyc_Absyn_Structdecl* s){ struct _tuple0* _temp1935=( struct _tuple0*)((
  struct Cyc_Core_Opt*) _check_null( s->name))->v; if( Cyc_Toc_structs_so_far == 
! 0){ Cyc_Toc_structs_so_far=({ struct Cyc_Core_Opt* _temp1936=( struct Cyc_Core_Opt*)
! _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1936->v=( void*)(( struct Cyc_Dict_Dict*(*)(
  int(* cmp)( struct _tagged_arr*, struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_zstrptrcmp);
! _temp1936;});}{ int seen_defn_before; struct Cyc_Core_Opt* _temp1937=(( struct
  Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup_opt)((
  struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v,(*
! _temp1935).f2); if( _temp1937 ==  0){ seen_defn_before= 0;( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v=( void*)(( struct
  Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Structdecl*
  v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( Cyc_Toc_structs_so_far))->v,(* _temp1935).f2, s));} else{ if(((
! struct Cyc_Absyn_Structdecl*)(( struct Cyc_Core_Opt*) _check_null( _temp1937))->v)->fields
  ==  0){( struct Cyc_Dict_Dict*)((( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v=(
  void*)(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr*
  k, struct Cyc_Absyn_Structdecl* v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( Cyc_Toc_structs_so_far))->v,(* _temp1935).f2,
  s)); seen_defn_before= 0;} else{ seen_defn_before= 1;}}( void*)( s->sc=( void*)((
! void*) Cyc_Absyn_Public)); s->tvs= 0; s->name=({ struct Cyc_Core_Opt* _temp1938=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1938->v=(
! void*) _temp1935; _temp1938;}); if( s->fields !=  0){ if( seen_defn_before){ s->fields=
! 0;} else{ struct Cyc_List_List* _temp1939=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( s->fields))->v; for( 0; _temp1939 !=  0; _temp1939=(( struct Cyc_List_List*)
! _check_null( _temp1939))->tl){( void*)((( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp1939))->hd)->type=( void*) Cyc_Toc_typ_to_c_array((
  void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp1939))->hd)->type));}}}}} struct Cyc_Core_Opt* Cyc_Toc_unions_so_far= 0;
  static void Cyc_Toc_uniondecl_to_c( struct Cyc_Absyn_Uniondecl* u){ struct
! _tuple0* _temp1940=( struct _tuple0*)(( struct Cyc_Core_Opt*) _check_null( u->name))->v;
  if( Cyc_Toc_unions_so_far ==  0){ Cyc_Toc_unions_so_far=({ struct Cyc_Core_Opt*
! _temp1941=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1941->v=( void*)(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tagged_arr*,
! struct _tagged_arr*))) Cyc_Dict_empty)( Cyc_Std_zstrptrcmp); _temp1941;});}{ int
! seen_defn_before; struct Cyc_Core_Opt* _temp1942=(( struct Cyc_Core_Opt*(*)(
  struct Cyc_Dict_Dict* d, struct _tagged_arr* k)) Cyc_Dict_lookup_opt)(( struct
  Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v,(*
! _temp1940).f2); if( _temp1942 ==  0){ seen_defn_before= 0;( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v=( void*)(( struct
  Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr* k, struct Cyc_Absyn_Uniondecl*
  v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
! _check_null( Cyc_Toc_unions_so_far))->v,(* _temp1940).f2, u));} else{ if(((
! struct Cyc_Absyn_Uniondecl*)(( struct Cyc_Core_Opt*) _check_null( _temp1942))->v)->fields
  ==  0){( struct Cyc_Dict_Dict*)((( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v=(
  void*)(( struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tagged_arr*
  k, struct Cyc_Absyn_Uniondecl* v)) Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)((
! struct Cyc_Core_Opt*) _check_null( Cyc_Toc_unions_so_far))->v,(* _temp1940).f2,
  u)); seen_defn_before= 0;} else{ seen_defn_before= 1;}}( void*)( u->sc=( void*)((
! void*) Cyc_Absyn_Public)); u->tvs= 0; u->name=({ struct Cyc_Core_Opt* _temp1943=(
! struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1943->v=(
! void*) _temp1940; _temp1943;}); if( u->fields !=  0){ if( seen_defn_before){ u->fields=
! 0;} else{ struct Cyc_List_List* _temp1944=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*)
! _check_null( u->fields))->v; for( 0; _temp1944 !=  0; _temp1944=(( struct Cyc_List_List*)
! _check_null( _temp1944))->tl){( void*)((( struct Cyc_Absyn_Structfield*)((
! struct Cyc_List_List*) _check_null( _temp1944))->hd)->type=( void*) Cyc_Toc_typ_to_c_array((
  void*)(( struct Cyc_Absyn_Structfield*)(( struct Cyc_List_List*) _check_null(
! _temp1944))->hd)->type));}}}}} static struct Cyc_Core_Opt* Cyc_Toc_tunions_so_far=
  0; static void Cyc_Toc_tuniondecl_to_c( struct Cyc_Absyn_Tuniondecl* tud){ if(
  Cyc_Toc_tunions_so_far ==  0){ Cyc_Toc_tunions_so_far=({ struct Cyc_Core_Opt*
! _temp1945=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1945->v=( void*)(( struct Cyc_Set_Set*(*)( int(* cmp)( struct _tuple0*,
! struct _tuple0*))) Cyc_Set_empty)( Cyc_Absyn_qvar_cmp); _temp1945;});}{ struct
! _tuple0* _temp1946= tud->name; if( tud->fields ==  0){ return;} if((( int(*)(
  struct Cyc_Set_Set* s, struct _tuple0* elt)) Cyc_Set_member)(( struct Cyc_Set_Set*)((
! struct Cyc_Core_Opt*) _check_null( Cyc_Toc_tunions_so_far))->v, _temp1946)){
  return;}( struct Cyc_Set_Set*)((( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_tunions_so_far))->v=(
  void*)(( struct Cyc_Set_Set*(*)( struct Cyc_Set_Set* s, struct _tuple0* elt))
  Cyc_Set_insert)(( struct Cyc_Set_Set*)(( struct Cyc_Core_Opt*) _check_null( Cyc_Toc_tunions_so_far))->v,
! _temp1946));{ int tag_count= 0; int box_count= 0; struct Cyc_List_List*
! _temp1947=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( tud->fields))->v;
! for( 0; _temp1947 !=  0; _temp1947=(( struct Cyc_List_List*) _check_null(
! _temp1947))->tl){ struct Cyc_Absyn_Tunionfield* f=( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp1947))->hd; if( f->typs ==  0){ struct
  Cyc_Absyn_Exp* eopt=( struct Cyc_Absyn_Exp*) Cyc_Absyn_signed_int_exp( tag_count
  ++, 0); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_static_vardecl( f->name, Cyc_Absyn_sint_t,
! eopt); vd->tq=({ struct Cyc_Absyn_Tqual _temp1948; _temp1948.q_const= 1;
! _temp1948.q_volatile= 0; _temp1948.q_restrict= 0; _temp1948;}); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp1949=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1949->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp1950=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp1950[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp1951; _temp1951.tag= Cyc_Absyn_Var_d; _temp1951.f1= vd; _temp1951;});
! _temp1950;}), 0); _temp1949->tl= Cyc_Toc_result_decls; _temp1949;});} else{
  struct Cyc_Absyn_Exp* eopt=( struct Cyc_Absyn_Exp*) Cyc_Absyn_signed_int_exp(
  box_count ++, 0); struct Cyc_Absyn_Vardecl* vd= Cyc_Absyn_static_vardecl( f->name,
! Cyc_Absyn_sint_t, eopt); vd->tq=({ struct Cyc_Absyn_Tqual _temp1952; _temp1952.q_const=
! 1; _temp1952.q_volatile= 0; _temp1952.q_restrict= 0; _temp1952;}); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp1953=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp1953->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp1954=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp1954[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp1955; _temp1955.tag= Cyc_Absyn_Var_d; _temp1955.f1= vd; _temp1955;});
! _temp1954;}), 0); _temp1953->tl= Cyc_Toc_result_decls; _temp1953;});{ struct Cyc_List_List*
! _temp1956= 0; int i= 1;{ struct Cyc_List_List* _temp1957= f->typs; for( 0;
! _temp1957 !=  0;( _temp1957=(( struct Cyc_List_List*) _check_null( _temp1957))->tl,
! i ++)){ struct _tagged_arr* _temp1958= Cyc_Absyn_fieldname( i); struct Cyc_Absyn_Structfield*
! _temp1959=({ struct Cyc_Absyn_Structfield* _temp1961=( struct Cyc_Absyn_Structfield*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structfield)); _temp1961->name= _temp1958;
! _temp1961->tq=(*(( struct _tuple3*)(( struct Cyc_List_List*) _check_null(
! _temp1957))->hd)).f1; _temp1961->type=( void*) Cyc_Toc_typ_to_c_array((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp1957))->hd)).f2);
! _temp1961->width= 0; _temp1961->attributes= 0; _temp1961;}); _temp1956=({ struct
! Cyc_List_List* _temp1960=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp1960->hd=( void*) _temp1959; _temp1960->tl= _temp1956; _temp1960;});}}
! _temp1956=(( struct Cyc_List_List*(*)( struct Cyc_List_List* x)) Cyc_List_imp_rev)(
! _temp1956); _temp1956=({ struct Cyc_List_List* _temp1962=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1962->hd=( void*)({ struct Cyc_Absyn_Structfield*
! _temp1963=( struct Cyc_Absyn_Structfield*) _cycalloc( sizeof( struct Cyc_Absyn_Structfield));
! _temp1963->name= Cyc_Toc_tag_sp; _temp1963->tq= Cyc_Toc_mt_tq; _temp1963->type=(
! void*) Cyc_Absyn_sint_t; _temp1963->width= 0; _temp1963->attributes= 0;
! _temp1963;}); _temp1962->tl= _temp1956; _temp1962;});{ struct Cyc_Absyn_Structdecl*
! _temp1964=({ struct Cyc_Absyn_Structdecl* _temp1968=( struct Cyc_Absyn_Structdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structdecl)); _temp1968->sc=( void*)(( void*)
! Cyc_Absyn_Public); _temp1968->name=({ struct Cyc_Core_Opt* _temp1970=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp1970->v=( void*)
  Cyc_Toc_collapse_qvar_tag( f->name, _tag_arr("_struct", sizeof( unsigned char),
! 8u)); _temp1970;}); _temp1968->tvs= 0; _temp1968->fields=({ struct Cyc_Core_Opt*
! _temp1969=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1969->v=( void*) _temp1956; _temp1969;}); _temp1968->attributes= 0;
! _temp1968;}); Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp1965=( struct
! Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List)); _temp1965->hd=( void*)
! Cyc_Absyn_new_decl(( void*)({ struct Cyc_Absyn_Struct_d_struct* _temp1966=(
  struct Cyc_Absyn_Struct_d_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct));
! _temp1966[ 0]=({ struct Cyc_Absyn_Struct_d_struct _temp1967; _temp1967.tag= Cyc_Absyn_Struct_d;
! _temp1967.f1= _temp1964; _temp1967;}); _temp1966;}), 0); _temp1965->tl= Cyc_Toc_result_decls;
! _temp1965;});}}}}}}} static struct Cyc_Core_Opt* Cyc_Toc_xtunion_fields_so_far=
  0; static void Cyc_Toc_xtuniondecl_to_c( struct Cyc_Absyn_Tuniondecl* xd){ if(
  Cyc_Toc_xtunion_fields_so_far ==  0){ Cyc_Toc_xtunion_fields_so_far=({ struct
! Cyc_Core_Opt* _temp1971=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp1971->v=( void*)(( struct Cyc_Dict_Dict*(*)( int(* cmp)( struct _tuple0*,
! struct _tuple0*))) Cyc_Dict_empty)( Cyc_Absyn_qvar_cmp); _temp1971;});} if( xd->fields
! ==  0){ return;}{ struct _tuple0* _temp1972= xd->name; struct Cyc_List_List*
! _temp1973=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( xd->fields))->v;
! for( 0; _temp1973 !=  0; _temp1973=(( struct Cyc_List_List*) _check_null(
! _temp1973))->tl){ struct Cyc_Absyn_Tunionfield* f=( struct Cyc_Absyn_Tunionfield*)((
! struct Cyc_List_List*) _check_null( _temp1973))->hd; struct _tagged_arr* fn=(* f->name).f2;
! struct Cyc_Absyn_Exp* _temp1974= Cyc_Absyn_uint_exp( _get_arr_size(* fn, sizeof(
! unsigned char)) +  4, 0); struct Cyc_Absyn_ArrayType_struct* _temp1975=({ struct
! Cyc_Absyn_ArrayType_struct* _temp2025=( struct Cyc_Absyn_ArrayType_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_ArrayType_struct)); _temp2025[ 0]=({ struct
! Cyc_Absyn_ArrayType_struct _temp2026; _temp2026.tag= Cyc_Absyn_ArrayType;
! _temp2026.f1=( void*) Cyc_Absyn_uchar_t; _temp2026.f2= Cyc_Toc_mt_tq; _temp2026.f3=(
! struct Cyc_Absyn_Exp*) _temp1974; _temp2026;}); _temp2025;}); struct Cyc_Core_Opt*
! _temp1976=(( struct Cyc_Core_Opt*(*)( struct Cyc_Dict_Dict* d, struct _tuple0* k))
  Cyc_Dict_lookup_opt)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*)
  _check_null( Cyc_Toc_xtunion_fields_so_far))->v, f->name); struct Cyc_Core_Opt
! _temp1984; int _temp1985; _LL1978: if( _temp1976 ==  0){ goto _LL1979;} else{
! goto _LL1980;} _LL1980: if( _temp1976 ==  0){ goto _LL1982;} else{ _temp1984=*
! _temp1976; _LL1986: _temp1985=( int) _temp1984.v; if( _temp1985 ==  0){ goto
! _LL1981;} else{ goto _LL1982;}} _LL1982: goto _LL1983; _LL1979: { struct Cyc_Absyn_Exp*
  initopt= 0; if(( void*) f->sc != ( void*) Cyc_Absyn_Extern){ initopt=( struct
  Cyc_Absyn_Exp*) Cyc_Absyn_string_exp(( struct _tagged_arr)({ struct Cyc_Std_String_pa_struct
! _temp1992; _temp1992.tag= Cyc_Std_String_pa; _temp1992.f1=( struct _tagged_arr)*
! fn;{ struct Cyc_Std_Int_pa_struct _temp1991; _temp1991.tag= Cyc_Std_Int_pa;
! _temp1991.f1=( int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct _temp1990;
! _temp1990.tag= Cyc_Std_Int_pa; _temp1990.f1=( int)(( unsigned int) 0);{ struct
! Cyc_Std_Int_pa_struct _temp1989; _temp1989.tag= Cyc_Std_Int_pa; _temp1989.f1=(
! int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct _temp1988; _temp1988.tag=
! Cyc_Std_Int_pa; _temp1988.f1=( int)(( unsigned int) 0);{ void* _temp1987[ 5u]={&
! _temp1988,& _temp1989,& _temp1990,& _temp1991,& _temp1992}; Cyc_Std_aprintf(
! _tag_arr("%c%c%c%c%s", sizeof( unsigned char), 11u), _tag_arr( _temp1987,
! sizeof( void*), 5u));}}}}}}), 0);}{ struct Cyc_Absyn_Vardecl* _temp1993= Cyc_Absyn_new_vardecl(
! f->name,( void*) _temp1975, initopt);( void*)( _temp1993->sc=( void*)(( void*) f->sc));
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp1994=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp1994->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Var_d_struct* _temp1995=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp1995[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp1996; _temp1996.tag= Cyc_Absyn_Var_d; _temp1996.f1= _temp1993; _temp1996;});
! _temp1995;}), 0); _temp1994->tl= Cyc_Toc_result_decls; _temp1994;});( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_xtunion_fields_so_far))->v=( void*)((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tuple0* k, int v))
  Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null(
  Cyc_Toc_xtunion_fields_so_far))->v, f->name,( void*) f->sc != ( void*) Cyc_Absyn_Extern));
  if( f->typs !=  0){ struct Cyc_List_List* fields= 0; int i= 1;{ struct Cyc_List_List*
! _temp1997= f->typs; for( 0; _temp1997 !=  0;( _temp1997=(( struct Cyc_List_List*)
! _check_null( _temp1997))->tl, i ++)){ struct _tagged_arr* _temp1998=({ struct
! _tagged_arr* _temp2002=( struct _tagged_arr*) _cycalloc( sizeof( struct
! _tagged_arr)); _temp2002[ 0]=( struct _tagged_arr)({ struct Cyc_Std_Int_pa_struct
! _temp2004; _temp2004.tag= Cyc_Std_Int_pa; _temp2004.f1=( int)(( unsigned int) i);{
! void* _temp2003[ 1u]={& _temp2004}; Cyc_Std_aprintf( _tag_arr("f%d", sizeof(
! unsigned char), 4u), _tag_arr( _temp2003, sizeof( void*), 1u));}}); _temp2002;});
! struct Cyc_Absyn_Structfield* _temp1999=({ struct Cyc_Absyn_Structfield*
! _temp2001=( struct Cyc_Absyn_Structfield*) _cycalloc( sizeof( struct Cyc_Absyn_Structfield));
! _temp2001->name= _temp1998; _temp2001->tq=(*(( struct _tuple3*)(( struct Cyc_List_List*)
! _check_null( _temp1997))->hd)).f1; _temp2001->type=( void*) Cyc_Toc_typ_to_c_array((*((
! struct _tuple3*)(( struct Cyc_List_List*) _check_null( _temp1997))->hd)).f2);
! _temp2001->width= 0; _temp2001->attributes= 0; _temp2001;}); fields=({ struct
! Cyc_List_List* _temp2000=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2000->hd=( void*) _temp1999; _temp2000->tl= fields; _temp2000;});}} fields=({
! struct Cyc_List_List* _temp2005=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2005->hd=( void*)({ struct Cyc_Absyn_Structfield*
! _temp2006=( struct Cyc_Absyn_Structfield*) _cycalloc( sizeof( struct Cyc_Absyn_Structfield));
! _temp2006->name= Cyc_Toc_tag_sp; _temp2006->tq= Cyc_Toc_mt_tq; _temp2006->type=(
! void*) Cyc_Absyn_cstar_typ( Cyc_Absyn_uchar_t, Cyc_Toc_mt_tq); _temp2006->width=
! 0; _temp2006->attributes= 0; _temp2006;}); _temp2005->tl=(( struct Cyc_List_List*(*)(
! struct Cyc_List_List* x)) Cyc_List_imp_rev)( fields); _temp2005;});{ struct Cyc_Absyn_Structdecl*
! _temp2007=({ struct Cyc_Absyn_Structdecl* _temp2011=( struct Cyc_Absyn_Structdecl*)
! _cycalloc( sizeof( struct Cyc_Absyn_Structdecl)); _temp2011->sc=( void*)(( void*)
! Cyc_Absyn_Public); _temp2011->name=({ struct Cyc_Core_Opt* _temp2013=( struct
! Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt)); _temp2013->v=( void*)
  Cyc_Toc_collapse_qvar_tag( f->name, _tag_arr("_struct", sizeof( unsigned char),
! 8u)); _temp2013;}); _temp2011->tvs= 0; _temp2011->fields=({ struct Cyc_Core_Opt*
! _temp2012=( struct Cyc_Core_Opt*) _cycalloc( sizeof( struct Cyc_Core_Opt));
! _temp2012->v=( void*) fields; _temp2012;}); _temp2011->attributes= 0; _temp2011;});
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2008=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2008->hd=( void*) Cyc_Absyn_new_decl((
! void*)({ struct Cyc_Absyn_Struct_d_struct* _temp2009=( struct Cyc_Absyn_Struct_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Struct_d_struct)); _temp2009[ 0]=({ struct
! Cyc_Absyn_Struct_d_struct _temp2010; _temp2010.tag= Cyc_Absyn_Struct_d;
! _temp2010.f1= _temp2007; _temp2010;}); _temp2009;}), 0); _temp2008->tl= Cyc_Toc_result_decls;
! _temp2008;});}} goto _LL1977;}} _LL1981: if(( void*) f->sc != ( void*) Cyc_Absyn_Extern){
! struct Cyc_Absyn_Exp* _temp2014= Cyc_Absyn_string_exp(( struct _tagged_arr)({
! struct Cyc_Std_String_pa_struct _temp2024; _temp2024.tag= Cyc_Std_String_pa;
! _temp2024.f1=( struct _tagged_arr)* fn;{ struct Cyc_Std_Int_pa_struct _temp2023;
! _temp2023.tag= Cyc_Std_Int_pa; _temp2023.f1=( int)(( unsigned int) 0);{ struct
! Cyc_Std_Int_pa_struct _temp2022; _temp2022.tag= Cyc_Std_Int_pa; _temp2022.f1=(
! int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct _temp2021; _temp2021.tag=
! Cyc_Std_Int_pa; _temp2021.f1=( int)(( unsigned int) 0);{ struct Cyc_Std_Int_pa_struct
! _temp2020; _temp2020.tag= Cyc_Std_Int_pa; _temp2020.f1=( int)(( unsigned int) 0);{
! void* _temp2019[ 5u]={& _temp2020,& _temp2021,& _temp2022,& _temp2023,&
! _temp2024}; Cyc_Std_aprintf( _tag_arr("%c%c%c%c%s", sizeof( unsigned char), 11u),
! _tag_arr( _temp2019, sizeof( void*), 5u));}}}}}}), 0); struct Cyc_Absyn_Vardecl*
! _temp2015= Cyc_Absyn_new_vardecl( f->name,( void*) _temp1975,( struct Cyc_Absyn_Exp*)
! _temp2014);( void*)( _temp2015->sc=( void*)(( void*) f->sc)); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp2016=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2016->hd=( void*) Cyc_Absyn_new_decl(( void*)({
! struct Cyc_Absyn_Var_d_struct* _temp2017=( struct Cyc_Absyn_Var_d_struct*)
! _cycalloc( sizeof( struct Cyc_Absyn_Var_d_struct)); _temp2017[ 0]=({ struct Cyc_Absyn_Var_d_struct
! _temp2018; _temp2018.tag= Cyc_Absyn_Var_d; _temp2018.f1= _temp2015; _temp2018;});
! _temp2017;}), 0); _temp2016->tl= Cyc_Toc_result_decls; _temp2016;});( struct Cyc_Dict_Dict*)(((
  struct Cyc_Core_Opt*) _check_null( Cyc_Toc_xtunion_fields_so_far))->v=( void*)((
  struct Cyc_Dict_Dict*(*)( struct Cyc_Dict_Dict* d, struct _tuple0* k, int v))
  Cyc_Dict_insert)(( struct Cyc_Dict_Dict*)(( struct Cyc_Core_Opt*) _check_null(
! Cyc_Toc_xtunion_fields_so_far))->v, f->name, 1));} goto _LL1977; _LL1983: goto
! _LL1977; _LL1977:;}}} static void Cyc_Toc_enumdecl_to_c( struct Cyc_Toc_Env* nv,
! struct Cyc_Absyn_Enumdecl* ed){ struct _tuple0* _temp2027= ed->name;( void*)( ed->sc=(
  void*)(( void*) Cyc_Absyn_Public)); if( ed->fields !=  0){ struct Cyc_List_List*
! _temp2028=( struct Cyc_List_List*)(( struct Cyc_Core_Opt*) _check_null( ed->fields))->v;
! for( 0; _temp2028 !=  0; _temp2028=(( struct Cyc_List_List*) _check_null(
! _temp2028))->tl){ if((( struct Cyc_Absyn_Enumfield*)(( struct Cyc_List_List*)
! _check_null( _temp2028))->hd)->tag !=  0){ unsigned int i= Cyc_Evexp_eval_const_uint_exp((
  struct Cyc_Absyn_Exp*) _check_null((( struct Cyc_Absyn_Enumfield*)(( struct Cyc_List_List*)
! _check_null( _temp2028))->hd)->tag));(( struct Cyc_Absyn_Enumfield*)(( struct
! Cyc_List_List*) _check_null( _temp2028))->hd)->tag=( struct Cyc_Absyn_Exp*) Cyc_Absyn_uint_exp(
  i, 0);}}}} static void Cyc_Toc_local_decl_to_c( struct Cyc_Toc_Env* body_nv,
  struct Cyc_Toc_Env* init_nv, struct Cyc_Absyn_Vardecl* vd, struct Cyc_Absyn_Stmt*
  s){( void*)( vd->type=( void*) Cyc_Toc_typ_to_c_array(( void*) vd->type)); Cyc_Toc_stmt_to_c(
  body_nv, s); if( vd->initializer !=  0){ struct Cyc_Absyn_Exp* init=( struct Cyc_Absyn_Exp*)
! _check_null( vd->initializer); void* _temp2029=( void*) init->r; struct Cyc_Absyn_Exp*
! _temp2035; struct Cyc_Absyn_Exp* _temp2037; struct Cyc_Absyn_Vardecl* _temp2039;
! _LL2031: if(*(( int*) _temp2029) ==  Cyc_Absyn_Comprehension_e){ _LL2040:
! _temp2039=(( struct Cyc_Absyn_Comprehension_e_struct*) _temp2029)->f1; goto
! _LL2038; _LL2038: _temp2037=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp2029)->f2; goto _LL2036; _LL2036: _temp2035=(( struct Cyc_Absyn_Comprehension_e_struct*)
! _temp2029)->f3; goto _LL2032;} else{ goto _LL2033;} _LL2033: goto _LL2034;
! _LL2032: vd->initializer= 0;( void*)( s->r=( void*)(( void*)( Cyc_Toc_init_comprehension(
! init_nv, Cyc_Absyn_var_exp( vd->name, 0), _temp2039, _temp2037, _temp2035, Cyc_Absyn_new_stmt((
! void*) s->r, 0), 0))->r)); goto _LL2030; _LL2034: if(( void*) vd->sc == ( void*)
! Cyc_Absyn_Static){ struct Cyc_Toc_Env* _temp2041= Cyc_Toc_copy_env( init_nv);
! _temp2041->toplevel= 1; Cyc_Toc_exp_to_c( _temp2041, init);} else{ Cyc_Toc_exp_to_c(
! init_nv, init);} goto _LL2030; _LL2030:;}} static struct Cyc_Absyn_Stmt* Cyc_Toc_letdecl_to_c(
  struct Cyc_Toc_Env* nv, struct Cyc_Absyn_Pat* p, struct Cyc_Core_Opt* topt,
  struct Cyc_Absyn_Exp* e, int exhaust, struct Cyc_Absyn_Stmt* s){ void* t=( void*)((
  struct Cyc_Core_Opt*) _check_null( topt))->v; Cyc_Toc_exp_to_c( nv, e);{ struct
  _tuple0* x= Cyc_Toc_temp_var(); struct _tagged_arr* succ_lab= Cyc_Toc_fresh_label();
  struct _tagged_arr* fail_lab= exhaust? succ_lab: Cyc_Toc_fresh_label();{ struct
! _RegionHandle _temp2042= _new_region(); struct _RegionHandle* prgn=& _temp2042;
! _push_region( prgn);{ struct Cyc_Absyn_Stmt* _temp2045; struct Cyc_List_List*
! _temp2047; struct Cyc_Toc_Env* _temp2049; struct _tuple11 _temp2043= Cyc_Toc_xlate_pat(
  nv, prgn, t, Cyc_Absyn_var_exp( x, 0), Cyc_Absyn_var_exp( x, 0), p, succ_lab,
! fail_lab, 0); _LL2050: _temp2049= _temp2043.f1; goto _LL2048; _LL2048: _temp2047=
! _temp2043.f2; goto _LL2046; _LL2046: _temp2045= _temp2043.f3; goto _LL2044;
! _LL2044: Cyc_Toc_stmt_to_c( _temp2049, s);{ struct Cyc_Absyn_Stmt* _temp2051=
  Cyc_Absyn_label_stmt( succ_lab, s, 0); if( exhaust){ s= Cyc_Absyn_declare_stmt(
  x, Cyc_Toc_typ_to_c( t),( struct Cyc_Absyn_Exp*) e, Cyc_Absyn_seq_stmt(
! _temp2045, _temp2051, 0), 0);} else{ struct Cyc_Absyn_Exp* _temp2052= Cyc_Toc_newthrow_exp(
! Cyc_Absyn_match_exn_exp( 0)); struct Cyc_Absyn_Stmt* _temp2053= Cyc_Absyn_label_stmt(
! fail_lab, Cyc_Absyn_exp_stmt( _temp2052, 0), 0); s= Cyc_Absyn_declare_stmt( x,
! Cyc_Toc_typ_to_c( t),( struct Cyc_Absyn_Exp*) e, Cyc_Absyn_seq_stmt( _temp2045,
! Cyc_Absyn_seq_stmt( _temp2053, _temp2051, 0), 0), 0);} for( 0; _temp2047 !=  0;
! _temp2047=(( struct Cyc_List_List*) _check_null( _temp2047))->tl){ struct
! _tuple12 _temp2056; void* _temp2057; struct _tuple0* _temp2059; struct _tuple12*
! _temp2054=( struct _tuple12*)(( struct Cyc_List_List*) _check_null( _temp2047))->hd;
! _temp2056=* _temp2054; _LL2060: _temp2059= _temp2056.f1; goto _LL2058; _LL2058:
! _temp2057= _temp2056.f2; goto _LL2055; _LL2055: s= Cyc_Absyn_declare_stmt(
! _temp2059, _temp2057, 0, s, 0);}}}; _pop_region( prgn);} return s;}} static
  struct Cyc_Toc_Env* Cyc_Toc_decls_to_c( struct Cyc_Toc_Env* nv, struct Cyc_List_List*
  ds, int top){ for( 0; ds !=  0; ds=(( struct Cyc_List_List*) _check_null( ds))->tl){
! if( ! nv->toplevel){({ void* _temp2061[ 0u]={};(( int(*)( struct _tagged_arr fmt,
  struct _tagged_arr ap)) Cyc_Tcutil_impos)( _tag_arr("decls_to_c: not at toplevel!",
! sizeof( unsigned char), 29u), _tag_arr( _temp2061, sizeof( void*), 0u));});}{
  struct Cyc_Absyn_Decl* d=( struct Cyc_Absyn_Decl*)(( struct Cyc_List_List*)
! _check_null( ds))->hd; void* _temp2062=( void*) d->r; struct Cyc_Absyn_Vardecl*
! _temp2088; struct Cyc_Absyn_Fndecl* _temp2090; struct Cyc_Absyn_Structdecl*
! _temp2092; struct Cyc_Absyn_Uniondecl* _temp2094; struct Cyc_Absyn_Tuniondecl*
! _temp2096; struct Cyc_Absyn_Enumdecl* _temp2098; struct Cyc_Absyn_Typedefdecl*
! _temp2100; struct Cyc_List_List* _temp2102; struct Cyc_List_List* _temp2104;
! struct Cyc_List_List* _temp2106; _LL2064: if(*(( int*) _temp2062) ==  Cyc_Absyn_Var_d){
! _LL2089: _temp2088=(( struct Cyc_Absyn_Var_d_struct*) _temp2062)->f1; goto
! _LL2065;} else{ goto _LL2066;} _LL2066: if(*(( int*) _temp2062) ==  Cyc_Absyn_Fn_d){
! _LL2091: _temp2090=(( struct Cyc_Absyn_Fn_d_struct*) _temp2062)->f1; goto
! _LL2067;} else{ goto _LL2068;} _LL2068: if(*(( int*) _temp2062) ==  Cyc_Absyn_Let_d){
! goto _LL2069;} else{ goto _LL2070;} _LL2070: if(*(( int*) _temp2062) ==  Cyc_Absyn_Letv_d){
! goto _LL2071;} else{ goto _LL2072;} _LL2072: if(*(( int*) _temp2062) ==  Cyc_Absyn_Struct_d){
! _LL2093: _temp2092=(( struct Cyc_Absyn_Struct_d_struct*) _temp2062)->f1; goto
! _LL2073;} else{ goto _LL2074;} _LL2074: if(*(( int*) _temp2062) ==  Cyc_Absyn_Union_d){
! _LL2095: _temp2094=(( struct Cyc_Absyn_Union_d_struct*) _temp2062)->f1; goto
! _LL2075;} else{ goto _LL2076;} _LL2076: if(*(( int*) _temp2062) ==  Cyc_Absyn_Tunion_d){
! _LL2097: _temp2096=(( struct Cyc_Absyn_Tunion_d_struct*) _temp2062)->f1; goto
! _LL2077;} else{ goto _LL2078;} _LL2078: if(*(( int*) _temp2062) ==  Cyc_Absyn_Enum_d){
! _LL2099: _temp2098=(( struct Cyc_Absyn_Enum_d_struct*) _temp2062)->f1; goto
! _LL2079;} else{ goto _LL2080;} _LL2080: if(*(( int*) _temp2062) ==  Cyc_Absyn_Typedef_d){
! _LL2101: _temp2100=(( struct Cyc_Absyn_Typedef_d_struct*) _temp2062)->f1; goto
! _LL2081;} else{ goto _LL2082;} _LL2082: if(*(( int*) _temp2062) ==  Cyc_Absyn_Namespace_d){
! _LL2103: _temp2102=(( struct Cyc_Absyn_Namespace_d_struct*) _temp2062)->f2; goto
! _LL2083;} else{ goto _LL2084;} _LL2084: if(*(( int*) _temp2062) ==  Cyc_Absyn_Using_d){
! _LL2105: _temp2104=(( struct Cyc_Absyn_Using_d_struct*) _temp2062)->f2; goto
! _LL2085;} else{ goto _LL2086;} _LL2086: if(*(( int*) _temp2062) ==  Cyc_Absyn_ExternC_d){
! _LL2107: _temp2106=(( struct Cyc_Absyn_ExternC_d_struct*) _temp2062)->f1; goto
! _LL2087;} else{ goto _LL2063;} _LL2065: { struct _tuple0* _temp2108= _temp2088->name;
! if(( void*) _temp2088->sc == ( void*) Cyc_Absyn_ExternC){ _temp2108=({ struct
! _tuple0* _temp2109=( struct _tuple0*) _cycalloc( sizeof( struct _tuple0));
! _temp2109->f1= Cyc_Absyn_rel_ns_null; _temp2109->f2=(* _temp2108).f2; _temp2109;});}
! if( _temp2088->initializer !=  0){ Cyc_Toc_exp_to_c( nv,( struct Cyc_Absyn_Exp*)
! _check_null( _temp2088->initializer));} nv= Cyc_Toc_add_varmap( nv, _temp2088->name,
! Cyc_Absyn_varb_exp( _temp2108,( void*)({ struct Cyc_Absyn_Global_b_struct*
! _temp2110=( struct Cyc_Absyn_Global_b_struct*) _cycalloc( sizeof( struct Cyc_Absyn_Global_b_struct));
! _temp2110[ 0]=({ struct Cyc_Absyn_Global_b_struct _temp2111; _temp2111.tag= Cyc_Absyn_Global_b;
! _temp2111.f1= _temp2088; _temp2111;}); _temp2110;}), 0)); _temp2088->name=
! _temp2108;( void*)( _temp2088->sc=( void*) Cyc_Toc_scope_to_c(( void*) _temp2088->sc));(
! void*)( _temp2088->type=( void*) Cyc_Toc_typ_to_c_array(( void*) _temp2088->type));
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2112=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2112->hd=( void*) d; _temp2112->tl=
! Cyc_Toc_result_decls; _temp2112;}); goto _LL2063;} _LL2067: { struct _tuple0*
! _temp2113= _temp2090->name; if(( void*) _temp2090->sc == ( void*) Cyc_Absyn_ExternC){
! _temp2113=({ struct _tuple0* _temp2114=( struct _tuple0*) _cycalloc( sizeof(
! struct _tuple0)); _temp2114->f1= Cyc_Absyn_rel_ns_null; _temp2114->f2=(*
! _temp2113).f2; _temp2114;});} nv= Cyc_Toc_add_varmap( nv, _temp2090->name, Cyc_Absyn_var_exp(
! _temp2113, 0)); _temp2090->name= _temp2113; Cyc_Toc_fndecl_to_c( nv, _temp2090);
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2115=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2115->hd=( void*) d; _temp2115->tl=
! Cyc_Toc_result_decls; _temp2115;}); goto _LL2063;} _LL2069: goto _LL2071;
! _LL2071:({ void* _temp2116[ 0u]={};(( int(*)( struct _tagged_arr fmt, struct
  _tagged_arr ap)) Cyc_Toc_toc_impos)( _tag_arr("letdecl at toplevel", sizeof(
! unsigned char), 20u), _tag_arr( _temp2116, sizeof( void*), 0u));}); goto _LL2063;
! _LL2073: Cyc_Toc_structdecl_to_c( _temp2092); Cyc_Toc_result_decls=({ struct Cyc_List_List*
! _temp2117=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2117->hd=( void*) d; _temp2117->tl= Cyc_Toc_result_decls; _temp2117;});
! goto _LL2063; _LL2075: Cyc_Toc_uniondecl_to_c( _temp2094); Cyc_Toc_result_decls=({
! struct Cyc_List_List* _temp2118=( struct Cyc_List_List*) _cycalloc( sizeof(
! struct Cyc_List_List)); _temp2118->hd=( void*) d; _temp2118->tl= Cyc_Toc_result_decls;
! _temp2118;}); goto _LL2063; _LL2077: if( _temp2096->is_xtunion){ Cyc_Toc_xtuniondecl_to_c(
! _temp2096);} else{ Cyc_Toc_tuniondecl_to_c( _temp2096);} goto _LL2063; _LL2079:
! Cyc_Toc_enumdecl_to_c( nv, _temp2098); Cyc_Toc_result_decls=({ struct Cyc_List_List*
! _temp2119=( struct Cyc_List_List*) _cycalloc( sizeof( struct Cyc_List_List));
! _temp2119->hd=( void*) d; _temp2119->tl= Cyc_Toc_result_decls; _temp2119;});
! goto _LL2063; _LL2081: _temp2100->name= _temp2100->name; _temp2100->tvs= 0;(
! void*)( _temp2100->defn=( void*) Cyc_Toc_typ_to_c_array(( void*) _temp2100->defn));
! Cyc_Toc_result_decls=({ struct Cyc_List_List* _temp2120=( struct Cyc_List_List*)
! _cycalloc( sizeof( struct Cyc_List_List)); _temp2120->hd=( void*) d; _temp2120->tl=
! Cyc_Toc_result_decls; _temp2120;}); goto _LL2063; _LL2083: _temp2104= _temp2102;
! goto _LL2085; _LL2085: _temp2106= _temp2104; goto _LL2087; _LL2087: nv= Cyc_Toc_decls_to_c(
! nv, _temp2106, top); goto _LL2063; _LL2063:;}} return nv;} static void Cyc_Toc_init(){
  Cyc_Toc_result_decls= 0; Cyc_Toc_tuple_types= 0; Cyc_Toc_tuple_type_counter= 0;
  Cyc_Toc_temp_var_counter= 0; Cyc_Toc_fresh_label_counter= 0; Cyc_Toc_structs_so_far=
  0; Cyc_Toc_tunions_so_far= 0; Cyc_Toc_xtunion_fields_so_far= 0;} struct Cyc_List_List*
diff -rbBcN --exclude=CVS i686-unknown-linux/src/tovc.c powerpc-apple-rhapsody/src/tovc.c
*** i686-unknown-linux/src/tovc.c	Wed Oct 10 15:39:58 2001
--- powerpc-apple-rhapsody/src/tovc.c	Wed Oct 10 15:39:32 2001
***************
*** 303,309 ****
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl** f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
--- 303,309 ----
  struct _tuple0* name; int is_xtunion; } ; static const int Cyc_Absyn_UnknownTunion=
  0; struct Cyc_Absyn_UnknownTunion_struct{ int tag; struct Cyc_Absyn_UnknownTunionInfo
  f1; } ; static const int Cyc_Absyn_KnownTunion= 1; struct Cyc_Absyn_KnownTunion_struct{
! int tag; struct Cyc_Absyn_Tuniondecl* f1; } ; struct Cyc_Absyn_TunionInfo{ void*
  tunion_info; struct Cyc_List_List* targs; void* rgn; } ; struct Cyc_Absyn_UnknownTunionFieldInfo{
  struct _tuple0* tunion_name; struct _tuple0* field_name; int is_xtunion; } ;
  static const int Cyc_Absyn_UnknownTunionfield= 0; struct Cyc_Absyn_UnknownTunionfield_struct{
***************
*** 394,456 ****
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_StructField=
! 0; struct Cyc_Absyn_StructField_struct{ int tag; struct _tagged_arr* f1; } ;
! static const int Cyc_Absyn_TupleIndex= 1; struct Cyc_Absyn_TupleIndex_struct{
! int tag; unsigned int f1; } ; static const int Cyc_Absyn_Const_e= 0; struct Cyc_Absyn_Const_e_struct{
! int tag; void* f1; } ; static const int Cyc_Absyn_Var_e= 1; struct Cyc_Absyn_Var_e_struct{
! int tag; struct _tuple0* f1; void* f2; } ; static const int Cyc_Absyn_UnknownId_e=
! 2; struct Cyc_Absyn_UnknownId_e_struct{ int tag; struct _tuple0* f1; } ; static
! const int Cyc_Absyn_Primop_e= 3; struct Cyc_Absyn_Primop_e_struct{ int tag; void*
! f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_AssignOp_e= 4;
! struct Cyc_Absyn_AssignOp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Increment_e=
! 5; struct Cyc_Absyn_Increment_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; void*
! f2; } ; static const int Cyc_Absyn_Conditional_e= 6; struct Cyc_Absyn_Conditional_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_SeqExp_e= 7; struct Cyc_Absyn_SeqExp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_FnCall_e=
! 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static const int Cyc_Absyn_Throw_e=
! 10; struct Cyc_Absyn_Throw_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_NoInstantiate_e= 11; struct Cyc_Absyn_NoInstantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Instantiate_e=
! 12; struct Cyc_Absyn_Instantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{
! int tag; void* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e=
! 14; struct Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e=
! 16; struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Sizeofexp_e= 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct
! Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; void* f2; } ; static const int Cyc_Absyn_Gentyp_e= 19; struct
! Cyc_Absyn_Gentyp_e_struct{ int tag; struct Cyc_List_List* f1; void* f2; } ;
! static const int Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_StructMember_e= 21;
! struct Cyc_Absyn_StructMember_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct _tagged_arr* f2; } ; static const int Cyc_Absyn_StructArrow_e= 22; struct
! Cyc_Absyn_StructArrow_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e= 23; struct Cyc_Absyn_Subscript_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Absyn_Exp* f2; } ; static const
! int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{ int tag; struct Cyc_List_List*
! f1; } ; static const int Cyc_Absyn_CompoundLit_e= 25; struct _tuple1{ struct Cyc_Core_Opt*
! f1; struct Cyc_Absyn_Tqual f2; void* f3; } ; struct Cyc_Absyn_CompoundLit_e_struct{
! int tag; struct _tuple1* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e=
! 26; struct Cyc_Absyn_Array_e_struct{ int tag; struct Cyc_List_List* f1; } ;
! static const int Cyc_Absyn_Comprehension_e= 27; struct Cyc_Absyn_Comprehension_e_struct{
! int tag; struct Cyc_Absyn_Vardecl* f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Struct_e= 28; struct Cyc_Absyn_Struct_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List* f3;
! struct Cyc_Absyn_Structdecl* f4; } ; static const int Cyc_Absyn_AnonStruct_e= 29;
! struct Cyc_Absyn_AnonStruct_e_struct{ int tag; void* f1; struct Cyc_List_List*
! f2; } ; static const int Cyc_Absyn_Tunion_e= 30; struct Cyc_Absyn_Tunion_e_struct{
! int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt* f2; struct Cyc_List_List*
! f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield* f5; } ;
! static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{ int tag;
! struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
--- 394,453 ----
  19; static const int Cyc_Absyn_PreInc= 0; static const int Cyc_Absyn_PostInc= 1;
  static const int Cyc_Absyn_PreDec= 2; static const int Cyc_Absyn_PostDec= 3;
  struct Cyc_Absyn_VarargCallInfo{ int num_varargs; struct Cyc_List_List*
! injectors; struct Cyc_Absyn_VarargInfo* vai; } ; static const int Cyc_Absyn_Const_e=
! 0; struct Cyc_Absyn_Const_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Var_e=
! 1; struct Cyc_Absyn_Var_e_struct{ int tag; struct _tuple0* f1; void* f2; } ;
! static const int Cyc_Absyn_UnknownId_e= 2; struct Cyc_Absyn_UnknownId_e_struct{
! int tag; struct _tuple0* f1; } ; static const int Cyc_Absyn_Primop_e= 3; struct
! Cyc_Absyn_Primop_e_struct{ int tag; void* f1; struct Cyc_List_List* f2; } ;
! static const int Cyc_Absyn_AssignOp_e= 4; struct Cyc_Absyn_AssignOp_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_Core_Opt* f2; struct Cyc_Absyn_Exp*
! f3; } ; static const int Cyc_Absyn_Increment_e= 5; struct Cyc_Absyn_Increment_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_Conditional_e=
! 6; struct Cyc_Absyn_Conditional_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_SeqExp_e=
! 7; struct Cyc_Absyn_SeqExp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; struct
! Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_UnknownCall_e= 8; struct Cyc_Absyn_UnknownCall_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_FnCall_e= 9; struct Cyc_Absyn_FnCall_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_List_List* f2; struct Cyc_Absyn_VarargCallInfo* f3; } ; static
! const int Cyc_Absyn_Throw_e= 10; struct Cyc_Absyn_Throw_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; } ; static const int Cyc_Absyn_NoInstantiate_e= 11;
! struct Cyc_Absyn_NoInstantiate_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Instantiate_e= 12; struct Cyc_Absyn_Instantiate_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct Cyc_List_List* f2; } ; static const
! int Cyc_Absyn_Cast_e= 13; struct Cyc_Absyn_Cast_e_struct{ int tag; void* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Address_e= 14; struct
! Cyc_Absyn_Address_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ; static const
! int Cyc_Absyn_New_e= 15; struct Cyc_Absyn_New_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Sizeoftyp_e= 16;
! struct Cyc_Absyn_Sizeoftyp_e_struct{ int tag; void* f1; } ; static const int Cyc_Absyn_Sizeofexp_e=
! 17; struct Cyc_Absyn_Sizeofexp_e_struct{ int tag; struct Cyc_Absyn_Exp* f1; } ;
! static const int Cyc_Absyn_Offsetof_e= 18; struct Cyc_Absyn_Offsetof_e_struct{
! int tag; void* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Gentyp_e=
! 19; struct Cyc_Absyn_Gentyp_e_struct{ int tag; void* f1; } ; static const int
! Cyc_Absyn_Deref_e= 20; struct Cyc_Absyn_Deref_e_struct{ int tag; struct Cyc_Absyn_Exp*
! f1; } ; static const int Cyc_Absyn_StructMember_e= 21; struct Cyc_Absyn_StructMember_e_struct{
! int tag; struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int
! Cyc_Absyn_StructArrow_e= 22; struct Cyc_Absyn_StructArrow_e_struct{ int tag;
! struct Cyc_Absyn_Exp* f1; struct _tagged_arr* f2; } ; static const int Cyc_Absyn_Subscript_e=
! 23; struct Cyc_Absyn_Subscript_e_struct{ int tag; struct Cyc_Absyn_Exp* f1;
! struct Cyc_Absyn_Exp* f2; } ; static const int Cyc_Absyn_Tuple_e= 24; struct Cyc_Absyn_Tuple_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_CompoundLit_e=
! 25; struct _tuple1{ struct Cyc_Core_Opt* f1; struct Cyc_Absyn_Tqual f2; void* f3;
! } ; struct Cyc_Absyn_CompoundLit_e_struct{ int tag; struct _tuple1* f1; struct
! Cyc_List_List* f2; } ; static const int Cyc_Absyn_Array_e= 26; struct Cyc_Absyn_Array_e_struct{
! int tag; struct Cyc_List_List* f1; } ; static const int Cyc_Absyn_Comprehension_e=
! 27; struct Cyc_Absyn_Comprehension_e_struct{ int tag; struct Cyc_Absyn_Vardecl*
! f1; struct Cyc_Absyn_Exp* f2; struct Cyc_Absyn_Exp* f3; } ; static const int Cyc_Absyn_Struct_e=
! 28; struct Cyc_Absyn_Struct_e_struct{ int tag; struct _tuple0* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Structdecl* f4; } ; static const
! int Cyc_Absyn_AnonStruct_e= 29; struct Cyc_Absyn_AnonStruct_e_struct{ int tag;
! void* f1; struct Cyc_List_List* f2; } ; static const int Cyc_Absyn_Tunion_e= 30;
! struct Cyc_Absyn_Tunion_e_struct{ int tag; struct Cyc_Core_Opt* f1; struct Cyc_Core_Opt*
! f2; struct Cyc_List_List* f3; struct Cyc_Absyn_Tuniondecl* f4; struct Cyc_Absyn_Tunionfield*
! f5; } ; static const int Cyc_Absyn_Enum_e= 31; struct Cyc_Absyn_Enum_e_struct{
! int tag; struct _tuple0* f1; struct Cyc_Absyn_Enumdecl* f2; struct Cyc_Absyn_Enumfield*
  f3; } ; static const int Cyc_Absyn_Malloc_e= 32; struct Cyc_Absyn_Malloc_e_struct{
  int tag; struct Cyc_Absyn_Exp* f1; void* f2; } ; static const int Cyc_Absyn_UnresolvedMem_e=
  33; struct Cyc_Absyn_UnresolvedMem_e_struct{ int tag; struct Cyc_Core_Opt* f1;
