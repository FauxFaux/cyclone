
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<title>Cyclone - A Safe Programming Language</title>
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="Microsoft Border" content="l, default">
</head>

<body><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%">

<nobr>Home</nobr><br><nobr><a href="quick_questions.htm">Quick&nbsp;Questions</a></nobr><br><nobr><a href="quick_answers.htm">Quick&nbsp;Answers</a></nobr><br><nobr><a href="known_bugs.htm">Known&nbsp;Bugs</a></nobr><br><nobr><a href="pointers.htm">Pointers</a></nobr><br><nobr><a href="discriminated_unions.htm">Discriminated&nbsp;Unions</a></nobr><br><nobr><a href="pattern_matching.htm">Pattern&nbsp;Matching</a></nobr><br><nobr><a href="type_inference.htm">Type&nbsp;Inference</a></nobr><br><nobr><a href="polymorphism.htm">Polymorphism</a></nobr><br><nobr><a href="regions_and_effects.htm">Memory&nbsp;Management</a></nobr><br><nobr><a href="definite_assignment.htm">Definite&nbsp;Assignment</a></nobr><br><nobr><a href="namespaces.htm">Namespaces</a></nobr><br><nobr><a href="interfacing_with_c.htm">Interfacing&nbsp;with&nbsp;C</a></nobr>

</td><td valign="top" width="24"></td><!--msnavigation--><td valign="top">
<h1 align="center">Cyclone Language and Implementation Documentation</h1>
<p align="center"><b>Version 1.0, Last updated May 2001</b></p>
<p>
Cyclone is a programming language that has been designed with two
goals in mind:
</p>
<ol>
  <li><b>Safety</b> --- ideally, there should be no way to write a
    Cyclone program that crashes (i.e., has a core dump, segmentation
    fault or bus error, blue screen of death, and so on).  Safety also
    rules out things like buffer overflows and format string attacks
    (which can lead to crashes).  To achieve safety, Cyclone uses a
    combination of static type checking, extended static checking,
    dynamic checking, and specially prepared libraries.</li>

  <li><b>Support as much of C as possible</b> --- Cyclone should share as much
    with C as possible, including syntax, static semantics, data
    representations, calling conventions, and dynamic semantics.&nbsp; 
    This rule should only be violated when in direct conflict with the 
    first goal of supporting safety.</li>
</ol>

<p>
The intended user of Cyclone is someone who is either (a) writing
systems code, or (b) needs to port C code to a safe environment.&nbsp;
Though languages such as Java, ML, or Scheme are safe, they do not
give the control over data representations, memory management, calling
conventions, etc., that C does.&nbsp; Hence, they are often unsuitable
for building systems where performance and control matter.&nbsp; For
instance, no one suggests building a run-time system in these
languages.  Furthermore, today's implementations of these languages
make it relatively difficult to interface with legacy code written in
C, or to incrementally move program units from C to the safe
setting.&nbsp; The goals of Cyclone are aimed at making it easier to
build systems software without sacrificing safety or
control.&nbsp;&nbsp;
</p>

<p align="left">&nbsp;</p>
<p align="left">&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="left">&nbsp;
<!--msnavigation--></td></tr><!--msnavigation--></table></body>

</html>
