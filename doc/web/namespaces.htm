<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Namespaces</title>
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="Microsoft Border" content="l, default">
</head>

<body><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%">

<nobr><a href="index.htm">Home</a></nobr><br><nobr><a href="quick_questions.htm">Quick&nbsp;Questions</a></nobr><br><nobr><a href="quick_answers.htm">Quick&nbsp;Answers</a></nobr><br><nobr><a href="known_bugs.htm">Known&nbsp;Bugs</a></nobr><br><nobr><a href="pointers.htm">Pointers</a></nobr><br><nobr><a href="discriminated_unions.htm">Discriminated&nbsp;Unions</a></nobr><br><nobr><a href="pattern_matching.htm">Pattern&nbsp;Matching</a></nobr><br><nobr><a href="type_inference.htm">Type&nbsp;Inference</a></nobr><br><nobr><a href="polymorphism.htm">Polymorphism</a></nobr><br><nobr><a href="regions_and_effects.htm">Memory&nbsp;Management</a></nobr><br><nobr><a href="definite_assignment.htm">Definite&nbsp;Assignment</a></nobr><br><nobr>Namespaces</nobr><br><nobr><a href="interfacing_with_c.htm">Interfacing&nbsp;with&nbsp;C</a></nobr>

</td><td valign="top" width="24"></td><!--msnavigation--><td valign="top">
<h1 align="center">Namespaces<br>
</h1>
<p>As in C++, namespaces are used to avoid name clashes in code.&nbsp; For
example:&nbsp;</p>
<p><font face="Courier New">namespace Foo {&nbsp;<br>
&nbsp; int x = 0;&nbsp;<br>
&nbsp; int f() { return x; }<i> 
    &nbsp;<br>
    </i>}</font></p>
<p>declares an integer named <code>Foo::x</code> and a
function named <code>Foo::f</code>.&nbsp; Note that within
the namespace, you don't need to use the qualified name.&nbsp; For instance, <code>Foo::f</code> refers to <code>Foo::x</code> as simply <code>x</code>.&nbsp;
We could also simply write &quot;<code>namespace Foo;</code>&quot;
(note the trailing semi-colon) and leave out the enclosing braces.&nbsp; Every
declaration (variables, functions, types, typedefs) following this namespace declaration would be placed in the <code>Foo</code>
namespace.&nbsp;&nbsp;</p>
<p>As noted before, you can refer to elements of a namespace using the
&quot;::&quot; notation.&nbsp; Alternatively, you can open up a namespace with a
&quot;using&quot; declaration.&nbsp;
For example, we could follow the above code with:</p>
<p style="line-height: 0"><font face="Courier New">
namespace Bar {&nbsp;</font>
<p style="line-height: 0"><font face="Courier New">&nbsp; using Foo {&nbsp;</font></p>
<p style="line-height: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp; int g() { return f(); }&nbsp;</font></p>
<p style="line-height: 0"><font face="Courier New">&nbsp; }&nbsp;</font></p>
<p style="line-height: 0"><font face="Courier New">&nbsp; int h() { return
Foo::f(); }&nbsp;</font></p>
<p style="line-height: 0"><font face="Courier New">}</font></p>
<p>Here, we opened the <code>Foo</code> namespace within the
definition of <code>Bar::g</code>.&nbsp; One can also write
&quot;<code>using Foo;</code>&quot;
to open a namespace for the remaining definitions in the current block.</p>
<p>Namespaces can nest as in C++.&nbsp;&nbsp;</p>
<p>Currently, namespaces are only supported at the top-level and you can't
declare a qualified variable directly.&nbsp; Rather, you have to write a namespace declaration to encapsulate it.&nbsp;
For example, you cannot write &quot;int Foo::x = 3;&quot;.
<p> The following subtle issues and <b>implementation bugs</b> may leave you
scratching your head:
<ul>
  <li>The current implementation translates qualified Cyclone variables to C
    identifiers very naively: each :: is translated to _ (underscore).&nbsp;
    This translation is wrong because it can introduce clashes that are not
    clashes in Cyclone, such as in the following:
    <p style="line-height: 0"><font face="Courier New">namespace Foo { int x =
    7; }</font></p>
    <p style="line-height: 0"><font face="Courier New">int Foo_x = 9;</font></p>
    <p>So avoid prefixing your identifiers with namespaces in your
    program.&nbsp; We intend to fix this bug in a future release. <br>
  </li>
</ul>
<p>&nbsp;</p>
<ul>
  <li>Becaue #include is defined as textual substitution, the following are
    usually very bad ideas:
    <ul>
      <li>Having &quot;namespace Foo;&quot; or &quot;using Foo;&quot; at the top
        level of a header file.&nbsp; After all, you will be changing the
        identifiers produced or the identifiers available in every file that
        includes the header file.&nbsp;&nbsp;</li>
      <li>Having #include directives within the scope of namespace
        declarations.&nbsp; After all, you are changing the names of the
        identifiers in the header file by (further) qualifying them.</li>
    </ul>
    <p>Unfortunately, the current system uses the C pre-processor before looking
    at the code, so it cannot warn you of these probable errors.</p>
    <p>In short, <b>you are advised to not use the &quot;semicolon syntax&quot;
    in header files and you are advised to put all #include directives at the
    top of files, before any namespace or using declarations</b>.</li>
</ul>
<p>&nbsp;</p>
<ul>
  <li>The translation of identifiers declared <font face="Courier New">extern
    &quot;C&quot;</font> is different.&nbsp; Given&nbsp;
    <p><font face="Courier New">namespace Foo { extern &quot;C&quot; int x; }</font></p>
    <p>the Cyclone code refers to the global variable as Foo::x, but the
    translation to C will convert all uses to just x.&nbsp; The following code
    will therefore get compiled incorrectly (f will return 4):</p>
    <p><font face="Courier New">namespace Foo { extern "C" int x; }<br>
    int f() {<br>
    &nbsp; int x = 2;<br>
    &nbsp; return x + Foo::x;<br>
    }<br>
    </font></li>
</ul>
&nbsp;<!--msnavigation--></td></tr><!--msnavigation--></table></body>

</html>
