
The Cyclone distribution is a bootstrapping compiler from Cyclone to C
(with gcc extensions).  So the notion of "what is a source file" is a
bit convoluted.  This document describes the directory structure and
how to do various development tasks without breaking all the Makefile
invariants.

*** Directory Structure and Overall Design ***

The directories look roughly like this:
   cyclone
      bin
         genfiles
           lib
           src
      doc
      src
      lib
      tests
      tools
         cycbison
         cycocamllex

bin/genfiles/lib contains the C files necessary to produce cyclib.a,
the Cyclone library.  Cyclone executables should be linked against
cyclib.a and gc.a.  (Currently, cyc_runtime.o is in cyclib.a; we may
wish to revisit this decision.)

bin/genfiles/src contains the C files necessary to produce cyclone.exe

All the C files in bin/genfiles except cyc_runtime.c can be are
generated by the Cyclone compiler.  But for bootstrapping reasons,
they must be in the distribution.

The cyclone Makefile (make or make all or make install) will build
bin/genfiles/lib and bin/genfiles/src and copy the library and the
compiler into bin.  Doing so requires only gcc.  The target also build
tools/cycbison and tools/cycocamllex and copies the resulting
executables into bin.  These tools are not necessary for building the
boostrapped cyclone.exe; in fact, they are built afterwards.  Building
cycbison requires only gcc; cycocamllex requires OCaml 3.0 (and
ocamlyacc).

To build and run the programs in the tests directory, you need
cyclone.exe and cycbison.exe.  Several of the .cyc files are not used
in tests/Makefile because I didn't know what they were supposed to do.

The Cyclone source code is in lib (for the libraries) and src (for the
compiler).  lib also has cyc_runtime.c, formerly called
cyc_helpers.c.  Building these directories (make cyclone_src from the
cyclone Makefile suffices) produces .c files, .o files, lib/cyclib.a,
and src/cyclone.exe that should be identical to the corresponding
files in bin/genfiles.

In order to emphasize and maintain the correspondence between lib,src
and bin/genfiles/lib,src, all four directory's Makefiles include the
top-level file Makefile.inc.  This included file is the only place
where the library and compiler's modules are enumerated.

All C files produce by Cyclone compilers have " #include "cyc_include.h" "
as their only include directive.  Due to lack of any better idea, this
file is in the top-level directory of the distribution.  Some copy of
this file must be in gcc's include path.  The header files for Cyclone
libraries are in lib.  Therefore, lib should be in the cyclone
compiler's include path.

All Makefiles have clean targets; cyclone/Makefile calls the other
ones recursively.  The result of cleaning leaves exactly those files
present in the CVS repository unless you put additional files in
directories "by hand".

Finally, two phony targets in the cyclone/Makefile facilitate
bootstrapping.  The diff target compares the C files in bin/genfiles
with those produced.  The update target replaces the C files in
bin/genfiles with those produced.

*** How to do the initial build ***

Just run make.  This should put cyclone.exe cycbison.exe and
cycocamllex.exe in bin.  It does not build from the Cyclone sources;
for that, do "make cyclone_src".  Doing "make cyclone_src" does not
replace the executable in bin; it just leaves the executable in src.

*** How to update the bootstrapped compiler ***

First, it is strongly recommended you test the generated
compiler as described below.  Having done so, just do the following
from the top directory:

(0) make               (creates the old compiler -- probably already done)
(1) make cyclone_src   (creates C files in lib and src)
(2) make update        (clobbers bin/genfiles with the C files in lib and src)
(3) make               (the old compiler is now older than its sources)

Finally, remember to commit the bin/genfiles changes to CVS at which
point the bootstrapping compiler will really be at version n+1.

*** How to test a generated compiler ***

So you've made a src/cyclone.exe -- does it do what you expect?  You'd
like to run it on Cyclone files (say those in tests, lib, or src) and
in the case of the compiler reach a "bootstrapping fixpoint".  To do
this, override two Makefile variables:

CYCC: The location of the Cyclone compiler.  Either use an absolute
path or a path that works relative to being in lib, src, or tests.
The default is CYCC=../bin/cyclone.exe, a common override value is 
CYCC=../src/cyclone.exe.

OUT_PREFIX: A string to prefix to all generated files.  The default is
the empty string, a commond override value is OUT_PREFIX="boot_".
Pains were taken to make sure all generated files and targets will
have the prefix (boot_parse_tab.h, boot_tc.c, boot_tc.o boot_cyclib.a,
etc.) so the work will be independent of any run with a different
OUT_PREFIX.  Moreover, the clean targets are smart enough to delete
files generated with any OUT_PREFIX.

(I'm sure the instructions above are opaque -- but they make sense to
me, so someone else should improve on them.)

Here's an example session:
(0) make
... modify the Cyclone files to implement some new feature 
    but don't yet use the new feature ...
(1) make cyclone_src
(2) make cyclone_src CYCC=../src/cyclone.exe OUT_PREFIX="boot_"
... check to see that src/cyclone.exe and src/boot_cyclone.exe are the
    same ...
(3) make update
(4) make
... now modify the compiler sources to use the new features ...
... and then of course update the bootstrapped compiler again ...


*** How to change file dependencies in the distribution ***

Currently, the dependencies among .cyc and .h files are maintained by
hand.  Basically, baz.c should be remade if baz.cyc includes bar.h
(recursively) and bar.h has changed.  However, the dependencies of
compiler files on library files are not listed.  The safest thing to
do after changing a library interface is to re-make src from scratch.

The Makefile voodoo at the bottom of lib/Makefile and src/Makefile is
rather sensical, so please try to follow the pattern: If baz.cyc
includes bar.h (directly), then have $(OUT_PREFIX)baz.c depend on
$(BAR_H). If bar.h includes quux.h (directly) have BAR_H = bar.h $(QUUX_H).
This requires QUUX_H to appear before BAR_H -- cycles in
the header include files will require manual unrolling of the
recursion.

Please keep the dependencies up to date!  If you write #include, think
"what should I do to the Makefile".  Better yet, write cyclonedep. :-)

*** How to add a Cyclone source file to the distribution ***

I'll only describe the simplest case -- you want to add a new .cyc
file to lib or src.  The most important steps are: 

(1) ADD THE OBVIOUS LINE TO Makefile.inc!
(2) Update the Makefile dependencies as described above.
(3) Do cvs add for the cyclone file (and an associated .h file if
    there is one )
(4) Do make update from the top-level Makefile.  This will copy the
    generated .c file into bin/genfiles, but only if you did step (1).
(5) Do cvs add for the .c file in bin/genfiles.  (Otherwise, nobody
    else will be able to bootstrap the compiler.)

